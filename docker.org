* docker (工人）进程虚拟机
** 基础
*** 安装
**** 安装
     #+begin_src shell
       sudo	apt install	docker.io
       sudo	ln	-sf	/usr/bin/docker.io	/usr/local/bin/docker
       sudo	sed	-i	'$acomplete	-F	_docker	docker'	/etc/bash_completion.d/docker.io
     #+END_SRC
**** 通过Docker源安装最新版本
     要安装最新的	Docker	版本,首先需要安装	apt-transport-https	支持,之后通过添加源来安装。
     $	sudo	apt-get	install	apt-transport-https
     $	sudo	apt-key	adv	--keyserver	hkp://keyserver.ubuntu.com:80	--recv-keys	36A1D7869245C8950F966E92D857
     $	sudo	bash	-c	"echo	deb	https://get.docker.io/ubuntu	docker	main	>	/etc/apt/sources.list.d/docker.li
     $	sudo	apt-get	update
     $	sudo	apt-get	install	lxc-docker
*** 启动服务(工人就绪）
    $ sudo	service	docker	start
*** 创建容器（工人干活)
    sudo	docker	run	-t	-i	ubuntu:12.04	/bin/bash
** 镜像和仓库(有什么活)
*** 查找镜像 
    $ sudo docker search ubuntu
    $ sudo docker search -s 100 ubuntu # 查找 star 数至少为 100 的镜像，找出只有官方镜像 start 数超过 100，默认不加 s 选项找出所有相关 ubuntu 镜像
*** 信息显示
    docker info
*** 列出镜像
   $ sudo docker images -a # 显示当前系统所有镜像，包括过渡层镜像 
   $ sudo docker images ubuntu # 显示当前系统 docker ubuntu 库中的所有镜像
*** 获取镜像
    $sudo	docker	pull	ubuntu:12.04
    相当于
    $sudo	docker	pull	registry.hub.docker.com/ubuntu:12.04	 	
    $sudo	docker	pull	dl.dockerpool.com:5000/ubuntu:12.04
*** 运行
    $ sudo docker run -i -t ubuntu:14.04 /bin/bash
    docker run - 运行一个容器
    -t - 分配一个（伪）tty (link is external)
    -i - 交互模式 (so we can interact with it)
    ubuntu:14.04 - 使用 ubuntu 基础镜像 14.04
    /bin/bash - 运行命令 bash shell
    注: ubuntu 会有多个版本，通过指定 tag 来启动特定的版本 [image]:[tag]

    $ sudo docker ps # 查看当前运行的容器
    ps -a 列出当前系统所有的容器
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
    6c9129e9df10        ubuntu:14.04        /bin/bash 6 minutes ago       Up 6 minutes                            cranky_babbage
*** 后台运行
    	sudo	docker	run	-d	ubuntu:14.04	/bin/sh	-c	"while	true;	do	echo	hello	world;	sleep	1;	done"
*** 获取后台输出
    sudo	docker	logs	$containerName
*** 进入后台容器
    $	sudo	docker	run	-idt	ubuntu
    243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550
    $	sudo	docker	ps
    CONTAINER	ID								IMAGE															COMMAND													CREATED													STATUS														P
    243c32535da7								ubuntu:latest							"/bin/bash"									18	seconds	ago						Up	17	seconds								
    $sudo	docker	attach	$containerName

    或者
    PID=$(docker	inspect	--format	"{{	.State.Pid	}}"	<$container>)
    PID=$(docker	inspect	--format	"{{	.State.Pid	}}"	dazzling_euclid)
    nsenter	--target	$PID	--mount	--uts	--ipc	--net	--pid
    nsenter	--target	8754 --mount	--uts	--ipc	--net	--pid
*** 导入导出
    #+BEGIN_SRC shell
      $	sudo	docker	ps	-a
      CONTAINER	ID								IMAGE															COMMAND													CREATED													STATUS															
      7691a814370e								ubuntu:14.04								"/bin/bash"									36	hours	ago								Exited	(0)	21	hours	a
      $	sudo	docker	export	7691a814370e	>	ubuntu.tar
    #+END_SRC
    #+BEGIN_SRC bash
      $	cat	ubuntu.tar	|	sudo	docker	import	-	test/ubuntu:v1.0
      $	sudo	docker	images
    #+END_SRC
*** 删除容器
    可以使用		docker	rm	 	来删除一个处于终止状态的容器。	例如
    $sudo	docker	rm		trusting_newton
*** 构建镜像
****  Dockerfile   
    $	touch	Dockerfile
    Dockerfile	中每一条指令都创建镜像的一层,例如:
    
    #+BEGIN_SRC docker
      #	T his	is	a	comment
      FROM  ubuntu:14.04
      MAINTAINER	Docker	Newbee	<newbee@docker.com>
      RUN	apt-get	-qq	update
      RUN	apt-get	-qqy	install	ruby	ruby-dev
      RUN	gem	install	sinatra
    #+END_SRC
**** 生成镜像
     $	sudo	docker	build	-t="ouruser/sinatra:v2"	.

 此外,还可以利用ADD命令复制本地文件到镜像;用EXPOSE命令来向外部开放端口;用CMD命令来描述容器启动后运行的程序等。例如
 #+BEGIN_SRC docker
   #	put	my	local	web	site	in	myApp	folder	to	/var/www
   ADD	myApp	/var/www
   #	expose	httpd	port
   EXPOSE	80
   #	the	command	to	run
   CMD	["/usr/sbin/apachectl",	"-D",	"FOREGROUND"]
 #+END_SRC
**** 修改镜像标签
 $	sudo	docker	tag	5db5f8471261	ouruser/sinatra:devel
 $	sudo	docker	images	ouruser/sinatra
*** 从本地文件系统导入
    sudo	cat	ubuntu-14.04-x86_64-minimal.tar.gz|docker	import	-	ubuntu:14.04
*** 删除镜像 
    $ sudo docker rmi --help
    Usage: docker rmi IMAGE [IMAGE...] Remove one or more images
    -f, --force=false Force removal of the image # 强制移除镜像不管是否有容器使用该镜像 
    --no-prune=false Do not delete untagged parents # 不要删除未标记的父镜像 
** docker start|stop|kill
   docker start CONTAINER [CONTAINER...]
   # 运行一个或多个停止的容器
   docker stop CONTAINER [CONTAINER...]
   # 停掉一个或多个运行的容器-t选项可指定超时时间
   docker kill [OPTIONS] CONTAINER [CONTAINER...]
# 默认 kill 发送 SIGKILL 信号-s可以指定发送 kill 信号类型
docker restart [OPTIONS] CONTAINER [CONTAINER...]
# 重启一个或多个运行的容器-t选项可指定超时时间
docker pause CONTAINER
# 暂停一个容器，方便 commit
docker unpause CONTAINER
# 继续暂停的容器
docker rm [OPTIONS] CONTAINER [CONTAINER...]
# 移除一个或多个容器
-f, --force=false Force removal of running container
-l, --link=false Remove the specified link and not the underlying container
-v, --volumes=false Remove the volumes associated with the container
docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
# 提交指定容器为镜像
-a, --author="" Author (e.g., "John Hannibal Smith hannibal@a-team.com")
-m, --message="" Commit message
-p, --pause=true Pause container during commit
# 默认 commit 是暂停状态
docker inspect CONTAINER|IMAGE [CONTAINER|IMAGE...]
# 查看容器或者镜像的详细信息
docker logs CONTAINER
# 输出指定容器日志信息
-f, --follow=false Follow log output
# 类似 tail -f
-t, --timestamps=false Show timestamps
--tail="all" Output the specified number of lines at the end of logs (defaults to all logs)
** 命令
   $ sudo docker   # docker 命令帮助
   Commands:
    attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像
    build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像
    commit    Create a new image from a container's changes # 提交当前容器为新的镜像
    cp        Copy files/folders from the containers filesystem to the host path
              # 从容器中拷贝指定文件或者目录到宿主机中
    create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器
    diff      Inspect changes on a container's filesystem   # 查看 docker 容器变化
    events    Get real time events from the server          # 从 docker 服务获取容器实时事件
    exec      Run a command in an existing container        # 在已存在的容器上运行命令
    export    Stream the contents of a container as a tar archive   
              # 导出容器的内容流作为一个 tar 归档文件[对应 import ]
    history   Show the history of an image                  # 展示一个镜像形成历史
    images    List images                                   # 列出系统当前镜像
    import    Create a new filesystem image from the contents of a tarball  
              # 从tar包中的内容创建一个新的文件系统映像[对应 export]
    info      Display system-wide information               # 显示系统相关信息
    inspect   Return low-level information on a container   # 查看容器详细信息
    kill      Kill a running container                      # kill 指定 docker 容器
    load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]
    login     Register or Login to the docker registry server   
              # 注册或者登陆一个 docker 源服务器
    logout    Log out from a Docker registry server         # 从当前 Docker registry 退出
    logs      Fetch the logs of a container                 # 输出当前容器日志信息
    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT
              # 查看映射端口对应的容器内部源端口
    pause     Pause all processes within a container        # 暂停容器
    ps        List containers                               # 列出容器列表
    pull      Pull an image or a repository from the docker registry server
              # 从docker镜像源服务器拉取指定镜像或者库镜像
    push      Push an image or a repository to the docker registry server
              # 推送指定镜像或者库镜像至docker源服务器
    restart   Restart a running container                   # 重启运行的容器
    rm        Remove one or more containers                 # 移除一个或者多个容器
    rmi       Remove one or more images                 
              # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]
    run       Run a command in a new container
              # 创建一个新的容器并运行一个命令
    save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]
    search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像
    start     Start a stopped containers                    # 启动容器
    stop      Stop a running containers                     # 停止容器
    tag       Tag an image into a repository                # 给源中镜像打标签
    top       Lookup the running processes of a container   # 查看容器中运行的进程信息
    unpause   Unpause a paused container                    # 取消暂停容器
    version   Show the docker version information           # 查看 docker 版本号
    wait      Block until a container stops, then print its exit code   
              # 截取容器停止时的退出状态值
              Run 'docker COMMAND --help' for more information on a command.
** 构建服务
*** 构建 jekyll 
*** Java引用程序
*** redis
*** node
** 编配 fig
** 使用api
<!-- GFM-TOC -->
* docker 虚拟机
** 功能 (创建一个独立的上下文空间 进程空间） 
*** 启动速度
    启动虚拟机需要启动虚拟机的操作系统，再启动应用，这个过程非常慢；
    而启动 Docker 相当于启动宿主操作系统上的一个进程。
*** 占用资源
    虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU，一台机器只能开启几十
    个的虚拟机。
    
    而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，
    一台机器可以开启成千上万个 Docker。
** 镜像与容器
 镜像是一种静态的结构，可以看成面向对象里面的类，而容器是镜像的一个实例。

 镜像包含着容器运行时所需要的代码以及其它组件，它是一种分层结构，每一层都是只读的
 （read-only layers）。构建镜像时，会一层一层构建，前一层是后一层的基础。镜像的这
 种分层存储结构很适合镜像的复用以及定制。

 构建容器时，通过在镜像的基础上添加一个可写层（writable layer），用来保存着容器运
 行过程中的修改。

