* 工作
** DONE 进行中 [#A] 微信支付本地测试前看完微信小程序教程
   CLOSED: [2020-11-07 六 05:46] DEADLINE: <2020-10-29 四>
   :LOGBOOK:
   CLOCK: [2020-10-29 四 14:07]--[2020-10-29 四 14:11] =>  0:04
   :END:
* Work
** STARTED 整理资料 八小时  
   SCHEDULED: <2020-12-02 三 .+1d>
   :LOGBOOK:
   CLOCK: [2020-12-06 日 12:24]--[2020-12-06 日 14:10] =>  1:46
   CLOCK: [2020-12-04 五 09:32]--[2020-12-04 五 19:08] =>  9:36
   CLOCK: [2020-12-03 四 07:38]--[2020-12-04 五 09:32] => 25:54
   CLOCK: [2020-12-03 四 05:59]--[2020-12-03 四 07:04] =>  1:05
   CLOCK: [2020-12-02 三 19:54]--[2020-12-03 四 05:41] =>  9:47
   CLOCK: [2020-12-02 三 07:22]--[2020-12-02 三 07:42] =>  0:20
   :END:
** STARTED 运动一小时
   SCHEDULED: <2020-12-02 三 .+1d>
   :LOGBOOK:
   CLOCK: [2020-12-03 四 05:42]--[2020-12-03 四 05:55] =>  0:13
   :END:
** DONE 时间规划 [100%][4/4]
   CLOSED: [2020-11-21 六 11:20] DEADLINE: <2020-11-21 六 11:30> SCHEDULED: <2020-11-21 六 11:10>
   
   - State "DONE"       from              [2020-11-21 六 11:20]
*** DONE 抓取事情
    CLOSED: [2020-11-21 六 20:43]
    - State "DONE"       from "STARTED"    [2020-11-21 六 20:43]
    :LOGBOOK:
    CLOCK: [2020-11-21 六 11:24]--[2020-11-21 六 12:24] =>  1:00
    :END:
*** DONE 事项分类
    CLOSED: [2020-11-21 六 11:15]
    - State "DONE"       from "STARTED"    [2020-11-21 六 11:15]
    :LOGBOOK:
    CLOCK: [2020-11-21 六 11:13]--[2020-11-21 六 11:15] =>  0:02
    :END:
*** DONE 计时
    CLOSED: [2020-11-21 六 11:18]
    - State "DONE"       from "STARTED"    [2020-11-21 六 11:18]
    :LOGBOOK:
    CLOCK: [2020-11-21 六 11:17]--[2020-11-21 六 11:18] =>  0:01
    :END:
*** DONE 统计
    CLOSED: [2020-11-21 六 11:20]
    - State "DONE"       from "STARTED"    [2020-11-21 六 11:20]
    :LOGBOOK:
    CLOCK: [2020-11-21 六 11:19]--[2020-11-21 六 11:20] =>  0:01
    :END:
    
** CANCELLED [#A] 学python [0/3]
   CLOSED: [2020-11-23 一 19:02]
   - State "CANCELLED"  from "STARTED"    [2020-11-23 一 19:02]
*** STARTED 08.面向对象编程基础.md
    :LOGBOOK:
    CLOCK: [2020-11-21 六 13:40]--[2020-11-21 六 14:25] =>  0:45
    :END:
*** STARTED 09.面向对象进阶.md
    :LOGBOOK:
    CLOCK: [2020-11-21 六 19:55]--[2020-11-21 六 20:11] =>  0:16
    :END:
*** 10.图形用户界面和游戏开发.md
*** 11.文件和异常.md
*** 12.字符串和正则表达式.md
*** 13.进程和线程.md
*** 14.网络编程入门和网络应用开发.md
*** 15.图像和办公文档处理.md
 
 
  [2020-11-21 六 11:25]
** CANCELLED python学习手册
   CLOSED: [2020-11-23 一 19:02]
   - State "CANCELLED"  from "TODO"       [2020-11-23 一 19:02]
*** DONE 入门
    CLOSED: [2020-11-21 六 20:43]
    - State "DONE"       from "STARTED"    [2020-11-21 六 20:43]
    :LOGBOOK:
    CLOCK: [2020-11-21 六 20:13]--[2020-11-21 六 20:43] =>  0:30
    :END:
*** DONE 类型
    CLOSED: [2020-11-22 日 11:36]
    
    - State "DONE"       from "STARTED"    [2020-11-22 日 11:36]
    :LOGBOOK:
    CLOCK: [2020-11-22 日 05:41]--[2020-11-22 日 06:26] =>  0:45
    CLOCK: [2020-11-21 六 20:43]--[2020-11-21 六 20:58] =>  0:15
    :END:
*** STARTED 语法
    :LOGBOOK:
    CLOCK: [2020-11-22 日 11:36]--[2020-11-22 日 12:21] =>  0:45
    :END:
*** TODO 函数
*** TODO [#B] 模块
*** TODO 类
*** TODO 异常
*** TODO unicode
*** TODO 属性
*** TODO 装饰器
*** TODO 元类
*** TODO 附录

** STARTED [#A] JavaScript
   :LOGBOOK:
   CLOCK: [2020-12-01 二 09:29]--[2020-12-01 二 09:58] =>  0:29
   :END:
   [2020-12-01 二 08:45]
** TODO [#A] Promises
** TODO [#A] Standard Style - Style guide and linter.
** TODO [#A] Must Watch Talks
** TODO [#B] Tips
** TODO [#A] Network Layer
** TODO [#A] Micro npm Packages
** TODO [#A] Mad Science npm Packages - Impossible sounding projects that exist.
** TODO [#A] Maintenance Modules - For npm packages.
** TODO [#A] npm - Package manager.
** TODO [#A] AVA - Test runner.
** TODO [#A] ESLint - Linter.
** TODO [#A] Functional Programming
** TODO [#A] Observables
** TODO [#A] npm scripts - Task runner.
** TODO [#A] 30 Seconds of Code - Code snippets you can understand in 30 seconds.
** TODO [#A] Ponyfills - Like polyfills but without overriding native APIs.
  
  [2020-12-01 二 08:45]

  
** STARTED [#A] 做lisp
   :LOGBOOK:
   CLOCK: [2020-12-01 二 07:43]--[2020-12-01 二 08:13] =>  0:30
   :END:
  
  [2020-12-01 二 07:42]

** 第3章 因特网客户端编程 (99)
  3.1 因特网客户端简介 (100)
  3.2 文件传输 (100)
    3.2.1 文件传输因特网协议 (100)
    3.2.2 文件传输协议 (101)
    3.2.3 Python和FTP (102)
    3.2.4 ftplib.FTP类的方法 (102)
    3.2.5 交互式FTP示例 (103)
    3.2.6 客户端FTP程序示例 (104)
    3.2.7 FTP的其他内容 (105)
  3.3 网络新闻 (106)
    3.3.1 Usenet与新闻组 (106)
    3.3.2 网络新闻传输协议 (107)
    3.3.3 Python和NNTP (108)
    3.3.4 nntplib.NNTP类方法 (108)
    3.3.5 交互式NNTP示例 (109)
    3.3.6 客户端程序NNTP示例 (110)
    3.3.7 NNTP的其他内容 (114)
  3.4 电子邮件 (115)
    3.4.1 电子邮件系统组件和协议 (115)
    3.4.2 发送电子邮件 (116)
    3.4.3 Python和SMTP (117)
    3.4.4 smtplib.SMTP类方法 (117)
    3.4.5 交互式SMTP示例 (118)
    3.4.6 SMTP的其他内容 (119)
    3.4.7 接收电子邮件 (119)
    3.4.8 POP和IMAP (120)
    3.4.9 Python和POP3 (120)
    3.4.10 交互式POP3示例 (121)
    3.4.11 poplib.POP3类方法 (122)
    3.4.12 客户端程序SMTP和POP3示例 (123)
    3.4.13 Python和IMAP4 (125)
    3.4.14 交互式IMAP4示例 (125)
    3.4.15 imaplib.IMAP4类中的常用方法 (126)
  3.5 实战 (127)
    3.5.1 生成电子邮件 (127)
    3.5.2 解析电子邮件 (129)
    3.5.3 基于Web的云电子邮件服务 (130)
    3.5.4 最佳实践：安全、重构 (131)
    3.5.5 Yahoo! Mail (133)
    3.5.6 Gmail (137)
  3.6 相关模块 (140)
    3.6.1 电子邮件 (140)
    3.6.2 其他因特网客户端协议 (140)
  3.7 练习 (141)

** 第4章 多线程编程 (147)
  4.1 简介/动机 (148)
  4.2 线程和进程 (149)
    4.2.1 进程 (149)
    4.2.2 线程 (149)
  4.3 线程和Python (150)
    4.3.1 全局解释器锁 (150)
    4.3.2 退出线程 (151)
    4.3.3 在Python中使用线程 (151)
    4.3.4 不使用线程的情况 (151)
    4.3.5 Python的threading模块 (153)
  4.4 thread模块 (153)
  4.5 threading模块 (157)
    4.5.1 Thread类 (158)
    4.5.2 threading模块的其他函数 (164)
  4.6 单线程和多线程执行对比 (165)
  4.7 多线程实践 (167)
    4.7.1 图书排名示例 (167)
    4.7.2 同步原语 (174)
    4.7.3 锁示例 (174)
    4.7.4 信号量示例 (181)
  4.8 生产者-消费者问题和Queue/queue模块 (184)
  4.9 线程的替代方案 (187)
    4.9.1 subprocess模块 (188)
    4.9.2 multiprocessing模块 (188)
    4.9.3 concurrent.futures模块 (188)
  4.10 相关模块 (190)
  4.11 练习 (190)

** 第5章 GUI编程 (193)
  5.1 简介 (194)
    5.1.1 Tcl、Tk和Tkinter (194)
    5.1.2 安装和使用Tkinter (195)
    5.1.3 客户端/服务端架构 (195)
  5.2 Tkinter和Python编程 (195)
    5.2.1 Tkinter模块：添加Tk到应用中 (196)
    5.2.2 GUI编程介绍 (196)
    5.2.3 顶层窗口：Tkinter.Tk() (198)
    5.2.4 Tk控件 (198)
  5.3 Tkinter示例 (199)
    5.3.1 Label控件 (199)
    5.3.2 Button控件 (200)
    5.3.3 Label和Button控件 (200)
    5.3.4 Label、Button和Scale控件 (201)
    5.3.5 偏函数应用示例 (203)
    5.3.6 中级Tkinter示例 (205)
  5.4 其他GUI简介 (210)
    5.4.1 Tk接口扩展（Tix） (212)
    5.4.2 Python MegaWidgets（PMW） (213)
    5.4.3 wxWidgets和wxPython (213)
    5.4.4 GTK+和PyGTK (215)
    5.4.5 Tile/Ttk (217)
  5.5 相关模块和其他GUI (219)
  5.6 练习 (221)

** 第6章 数据库编程 (223)
  6.1 简介 (224)
    6.1.1 持久化存储 (224)
    6.1.2 数据库基本操作和SQL (224)
    6.1.3 数据库和Python (226)
  6.2 Python的DB-API (228)
    6.2.1 模块属性 (228)
    6.2.2 Connection对象 (230)
    6.2.3 Cursor对象 (231)
    6.2.4 类型对象和构造函数 (232)
    6.2.5 关系数据库 (234)
    6.2.6 数据库和Python：适配器 (235)
    6.2.7 使用数据库适配器的示例 (235)
    6.2.8 数据库适配器示例应用 (240)
  6.3 ORM (251)
    6.3.1 考虑对象，而不是SQL (252)
    6.3.2 Python和ORM (252)
    6.3.3 员工角色数据库示例 (253)
    6.3.4 SQLAlchemy (254)
    6.3.5 SQLObject (265)
  6.4 非关系数据库 (270)
    6.4.1 NoSQL介绍 (270)
    6.4.2 MongoDB (271)
    6.4.3 PyMongo：MongoDB和Python (271)
    6.4.4 总结 (275)
  6.5 相关文献 (275)
  6.6 练习 (277)

** 第7章 *Microsoft Office编程 (281)
  7.1 简介 (282)
  7.2 使用Python进行COM客户端编程 (282)
    7.2.1 客户端COM编程 (283)
    7.2.2 入门 (283)
  7.3 入门示例 (284)
    7.3.1 Excel (284)
    7.3.2 Word (286)
    7.3.3 PowerPoint (287)
    7.3.4 Outlook (289)
  7.4 中级示例 (291)
    7.4.1 Excel (291)
    7.4.2 Outlook (293)
    7.4.3 PowerPoint (298)
    7.4.4 总结 (305)
  7.5 相关模块/包 (306)
  7.6 练习 (306)

** 第8章 扩展Python (311)
  8.1 简介和动机 (312)
    8.1.1 Python扩展简介 (312)
    8.1.2 什么情况下需要扩展Python (313)
    8.1.3 什么情况下不应该扩展Python (313)
  8.2 编写Python扩展 (314)
    8.2.1 创建应用代码 (314)
    8.2.2 根据样板编写封装代码 (316)
    8.2.3 编译 (321)
    8.2.4 导入并测试 (322)
    8.2.5 引用计数 (325)
    8.2.6 线程和全局解释器锁 (326)
  8.3 相关主题 (327)
    8.3.1 SWIG (327)
    8.3.2 Pyrex (327)
    8.3.3 Cython (327)
    8.3.4 Psyco (328)
    8.3.5 PyPy (328)
    8.3.6 嵌入Python (329)
  8.4 练习 (329)

** 第9章 Web客户端和服务器 (331)
  9.1 简介 (332)
    9.1.1 Web应用：客户端/服务器计算 (332)
    9.1.2 因特网 (333)
  9.2 Python Web客户端工具 (335)
    9.2.1 统一资源定位符 (335)
    9.2.2 urlparse模块 (337)
    9.2.3 urllib模块/包 (338)
    9.2.4 使用urllib2 HTTP验证的示例 (342)
    9.2.5 将HTTP验证示例移植到Python 3中 (344)
  9.3 Web客户端 (347)
    9.3.1 一个简单的Web爬虫/蜘蛛/机器人 (347)
    9.3.2 解析Web页面 (353)
    9.3.3 可编程的Web浏览 (358)
  9.4 Web（HTTP）服务器 (361)
  9.5 相关模块 (364)
  9.6 练习 (366)

** 第10章 Web编程：CGI和WSGI (370)
  10.1 简介 (371)
  10.2 帮助Web服务器处理客户端数据 (371)
    10.2.1 CGI简介 (371)
    10.2.2 CGI应用程序 (372)
    10.2.3 cgi模块 (373)
    10.2.4 cgitb模块 (373)
  10.3 构建CGI应用程序 (374)
    10.3.1 构建Web服务器 (374)
    10.3.2 建立表单页 (376)
    10.3.3 生成结果页面 (377)
    10.3.4 生成表单和结果页面 (378)
    10.3.5 全面交互的Web站点 (382)
  10.4 在CGI中使用Unicode (387)
  10.5 高级CGI (389)
    10.5.1 mulitipart表单提交和文件上传 (389)
    10.5.2 多值字段 (389)
    10.5.3 cookie (390)
    10.5.4 cookie和文件上传 (390)
  10.6 WSGI简介 (398)
    10.6.1 动机（替代CGI） (398)
    10.6.2 服务器集成 (399)
    10.6.3 外部进程 (399)
    10.6.4 WSGI简介 (400)
    10.6.5 WSGI服务器 (401)
    10.6.6 参考服务器 (402)
    10.6.7 WSGI应用示例 (403)
    10.6.8 中间件及封装WSGI应用 (403)
    10.6.9 在Python 3中使用WSGI (404)
  10.7 现实世界中的Web开发 (405)
  10.8 相关模块 (405)
  10.9 练习 (406)

** 第11章 Web框架：Django (409)
  11.1 简介 (410)
  11.2 Web框架 (410)
  11.3 Django简介 (411)
  11.4 项目和应用 (415)
    11.4.1 在Django中创建项目 (415)
    11.4.2 运行开发服务器 (418)
  11.5 “Hello World”应用（一个博客） (419)
  11.6 创建模型来添加数据库服务 (421)
    11.6.1 设置数据库 (421)
    11.6.2 创建表 (423)
  11.7 Python 应用shell (425)
    11.7.1 在Django中使用Python shell (425)
    11.7.2 测试数据模型 (427)
  11.8 Django管理应用 (428)
    11.8.1 设置admin (428)
    11.8.2 使用admin (429)
  11.9 创建博客的用户界面 (435)
    11.9.1 创建模板 (436)
    11.9.2 创建URL模式 (437)
    11.9.3 创建视图函数 (440)
  11.10 改进输出 (443)
  11.11 处理用户输入 (447)
    11.11.1 模板：添加HTML表单 (448)
    11.11.2 添加URLconf项 (448)
    11.11.3 视图：处理用户输入 (448)
    11.11.4 跨站点请求伪造 (449)
  11.12 表单和模型表单 (451)
    11.12.1 Django表单简介 (451)
    11.12.2 模型表单示例 (452)
    11.12.3 使用ModelForm来生成HTML表单 (452)
    11.12.4 处理ModelForm数据 (453)
  11.13 视图进阶 (454)
  11.14 *改善外观 (456)
  11.15 *单元测试 (457)
    11.15.1 blog应用的代码审查 (459)
    11.15.2 blog应用总结 (464)
  11.16 *中级Django应用：TweetApprover (464)
    11.16.1 创建项目文件结构 (465)
    11.16.2 安装Twython库 (470)
    11.16.3 URL结构 (471)
    11.16.4 数据模型 (474)
    11.16.5 提交新推文以便审核 (478)
    11.16.6 审核推文 (482)
  11.17 资源 (490)
  11.18 总结 (490)
  11.19 练习 (491)

** 第12章 云计算：Google App Engine (495)
  12.1 简介 (496)
  12.2 云计算 (496)
    12.2.1 云计算服务的层次 (497)
    12.2.2 App Engine (498)
  12.3 沙盒和App Engine SDK (501)
  12.4 选择一个App Engine框架 (504)
  12.5 Python 2.7支持 (510)
    12.5.1 一般差异 (511)
    12.5.2 代码中的差异 (511)
  12.6 与Django比较 (512)
    12.6.1 开始“Hello World” (512)
    12.6.2 手动创建“Hello World”（Zip文件用户） (513)
  12.7 将“Hello World”改成一个 简单的博客 (514)
    12.7.1 快速发现改动：30秒内将纯文本转成HTML (514)
    12.7.2 添加表单 (515)
    12.7.3 添加Datastore服务 (517)
    12.7.4 迭代改进 (521)
    12.7.5 开发/SDK控制台 (521)
  12.8 添加Memcache服务 (527)
  12.9 静态文件 (530)
  12.10 添加用户服务 (530)
    12.10.1 Google账号验证 (531)
    12.10.2 联合验证 (532)
  12.11 远程API shell (532)
  12.12 问与答（Python实现） (534)
    12.12.1 发送电子邮件 (534)
    12.12.2 接收电子邮件 (535)
  12.13 使用XMPP发送即时消息 (537)
  12.14 处理图片 (539)
  12.15 任务队列（非定期任务） (539)
    12.15.1 创建任务 (540)
    12.15.2 配置app.yaml (540)
    12.15.3 其他任务创建选项 (541)
    12.15.4 将发送电子邮件作为任务 (542)
    12.15.5 deferred包 (544)
  12.16 使用Appstats进行分析 (545)
    12.16.1 在app.yaml中添加标准处理程序 (546)
    12.16.2 添加自定义Admin Console页面 (546)
    12.16.3 作为内置界面启用界面 (546)
  12.17 URLfetch服务 (547)
  12.18 问与答（无Python实现） (547)
    12.18.1 Cron服务（计划任务作业） (548)
    12.18.2 预热请求 (548)
    12.18.3 DoS保护 (549)
  12.19 厂商锁定 (549)
  12.20 资源 (550)
  12.21 总结 (551)
  12.22 练习 (552)

** 第13章 Web服务 (555)
  13.1 简介 (556)
  13.2 Yahoo!金融股票报价服务器 (556)
  13.3 Twitter微博 (559)
    13.3.1 社交网络 (559)
    13.3.2 Twitter和Python (560)
    13.3.3 稍微长一点的API组合应用示例 (562)
    13.3.4 总结 (572)
    13.3.5 额外在线资源 (573)
  13.4 练习 (573)

** 第14章 文本处理 (578)
  14.1 逗号分隔值（CSV） (579)
    14.1.1 CSV简介 (579)
    14.1.2 再论股票投资组合示例 (581)
  14.2 JSON (582)
  14.3 可扩展标记语言 (586)
    14.3.1 XML简介 (587)
    14.3.2 Python和XML (587)
    14.3.3 XML实战 (591)
    14.3.4 *使用XML-RPC的客户端-服务器服务 (594)
  14.4 参考文献 (598)
  14.5 相关模块 (599)
  14.6 练习 (599)

** STARTED [#A] Python数据结构和算法
   :LOGBOOK:
   CLOCK: [2020-12-06 日 15:28]
   :END:
  
  [2020-12-06 日 15:26]

