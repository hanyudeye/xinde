* Bash 
** 数据 
*** 数组
    #+BEGIN_SRC bash
      array_name=(value0 value1 value2 value3)
      ${数组名[下标]}
      length=${#array_name[*]}
      for str in ${mingnong[*]}
      do
      done
    #+END_SRC
*** 声明
  declare -i b          
** 命令
*** 参数
    $1 $2 $n
    $0 是文件名
    #+BEGIN_SRC shell
        $#	传递到脚本的参数个数
        $*	以一个单字符串显示所有向脚本传递的参数。
        如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
      $$	脚本运行的当前进程 ID 号
      $!	后台运行的最后一个进程的 ID 号
      $@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
      如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
        $-	显示 Shell 使用的当前选项，与 set 命令功能相同。
        $?	显示最后命令的退出状态。0 表示没有错误，其他任何值表明有错误。
    #+END_SRC
*** set 设定参数变量
   #+BEGIN_SRC shell
     #!/bin/bashh
     echo the date is $(date)
     set $(date)
     echo The month is $2
     exit 0

   #+END_SRC
    set 命令用于设置 shell。
    set 指令能设置所使用 shell 的执行方式，可依照不同的需求来做设置。

语法
set [+-abCdefhHklmnpPtuvx]
参数说明：

-a 　标示已修改的变量，以供输出至环境变量。
-b 　使被中止的后台程序立刻回报执行状态。
-C 　转向所产生的文件无法覆盖已存在的文件。
-d 　Shell 预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d 参数可取消。
-e 　若指令传回值不等于 0，则立即退出 shell。
-f　 　取消使用通配符。
-h 　自动记录函数的所在位置。
-H Shell 　可利用"!"加<指令编号>的方式来执行 history 中记录的指令。
-k 　指令所给的参数都会被视为此指令的环境变量。
-l 　记录 for 循环的变量名称。
-m 　使用监视模式。
-n 　只读取指令，而不实际执行。
-p 　启动优先顺序模式。
-P 　启动-P 参数后，执行指令时，会以实际的文件或目录来取代符号连接。
-t 　执行完随后的指令，即退出 shell。
-u 　当执行时使用到未定义过的变量，则显示错误信息。
-v 　显示 shell 所读取的输入值。
-x 　执行指令后，会先显示该指令及所下的参数。
+<参数> 　取消某个 set 曾启动的参数。
*** 运算符
**** 基本运算符
     不支持，但可以用其他命令实现 如 awk 和 expr$(())，expr 最常用
   
     val=`expr 2 + 2` 被下面的替代了, 不过很有用
     $((3+4))
     #+BEGIN_SRC shell
           [ $a -eq $b ] 
           [ $a -lt 20 -a $b -gt 100 ] 返回 false
           [[ $a -lt 100 || $b -gt 100 ]] 返回 true
           #注意 + 号之间空格
     #+END_SRC
     = != > < -eq -ne -lt -gt -le -ge -a (and) -o (or) -z (空字符)
     -n (非空)

**** 字符串运算符
   #+BEGIN_SRC shell
     =	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
     !=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
     -z	检测字符串长度是否为 0，为 0 返回 true。	[ -z $a ] 返回 false。
     -n	检测字符串长度是否为 0，不为 0 返回 true。	[ -n $a ] 返回 true。
     str	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。
   #+END_SRC
**** 逻辑运算
     : 逻辑判断
     # TITLE shell 的逻辑判断式
  | 功能     | 逻辑标识 | 表示意思                      |
  |----------+----------+-------------------------------|
  | 文件目录 | -f       | 文件是否存在                  |
  |          | -d       | 目录                          |
  |          | -b       | block                         |
  |          | -c       | character 文件                |
  |          | -S       | socket                        |
  |          | -L       | 符号链接                      |
  |          | -e       | 某个东西                      |
  |----------+----------+-------------------------------|
  | 程序     | -G       | 是否由 GID 所执行的程序所拥有 |
  |          | -O       | UID                           |
  |          | -p       | name pipe or FIFO             |
  |----------+----------+-------------------------------|
  | 文件属性 | -r       | 可读                          |
  |          | -w       | 写                            |
  |          | -x       | 执行                          |
  |          | -s       | 非空白                        |
  |          | -u       | SUID 属性                     |
  |          | -g       | SGID                          |
  |----------+----------+-------------------------------|
  | 文件间   | -nt      | 第一个比第二个新              |
  |          | -ot      | 旧                            |
  |          | -ef      | 同一文件(link 之类)           |
  |----------+----------+-------------------------------|
  | 逻辑     | &&       | AND 的意思                    |
  |          | 两竖     | OR                            |
  |----------+----------+-------------------------------|
  : 条件判断
  #+BEGIN_SRC bash
  if [[ one && two ]];then
  elif [[ && ]];then
  else
  fi
  #+END_SRC
*** 函数
    #+BEGIN_SRC shell
        [ function ] funname [()]
        {
          action;
          [return int;]
      }
    调用
  函数名 参数 1 参数 2 ...
    #+END_SRC
** 流程控制
   break continue
 #+BEGIN_SRC shell
     if condition
     then
         command1 
         command2
         ...
         commandN
     else
         command
     fi

     for var in item1 item2 ... itemN
     do
         command1
         command2
         ...
         commandN
     done
     while condition
     do
         command
     done

   until condition
   do
       command
   done

   case 值 in
    模式 1)
        command1
        command2
        ...
        commandN
        ;;
    模式 2）
        command1
        command2
        ...
        commandN
        ;;
           esac
 #+END_SRC
** 重定向(命令转移）
   #+BEGIN_SRC shell
     command > file	将输出重定向到 file。
     command < file	将输入重定向到 file。
     command >> file	将输出以追加的方式重定向到 file。
      n > file	将文件描述符为 n 的文件重定向到 file。
      n >> file	将文件描述符为 n 的文件以追加的方式重定向到 file。
      n >& m	将输出文件 m 和 n 合并。
      n <& m	将输入文件 m 和 n 合并。
      << tag	将开始标记 tag 和结束标记 tag 之间的内容作为输入。
 
      $ kill -1 1234 >killouterr.txt 2>&1
   #+END_SRC
** 包含文件
 #+BEGIN_SRC shell
 . filename   # 注意点号(.)和文件名中间有一空格
 或
 source filename
 #+END_SRC
** 新任务
   要想 一段字符当命令运行， 用 $() 或 `` 
* on-my-zsh
  安装插件  plugins=(git wd web-search history history-substring-search)
推介插件 zsh-history-substring-search
https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/history-substring-search
zsh-syntax-highlighting
https://github.com/zsh-users/zsh-syntax-highlighting

zsh-autosuggestions
https://github.com/zsh-users/zsh-autosuggestions

命令历史记录

一旦在 shell 敲入正确命令并能执行后，shell 就会存储你所敲入命令的历史记录（存放在~/.zsh_history 文件中），方便再次运行之前的命令。可以按方向键↑和↓来查看之前执行过的命令
可以用 r来执行上一条命令
使用 ctrl-r 来搜索命令历史记录
命令别名

可以简化命令输入，在 .zshrc 中添加 alias shortcut='this is the origin command' 一行就相当于添加了别名
在命令行中输入 alias 可以查看所有的命令别名


使用技巧
连按两次Tab会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n/p/f/b上下左右切换
智能跳转，安装了 autojump 之后，zsh 会自动记录你访问过的目录，通过 j 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过 hadoop-1.0.0 目录，输入j hado 即可正确跳转。j --stat 可以看你的历史路径库。
命令选项补全。在zsh中只需要键入 tar -<tab> 就会列出所有的选项和帮助说明
在当前目录下输入 .. 或 ... ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。在你知道路径的情况下，比如 /usr/local/bin 你可以输入 cd /u/l/b 然后按进行补全快速输入
目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。
命令参数补全。键入 kill <tab> 就会列出所有的进程名和对应的进程号
更智能的历史命令。在用或者方向上键查找历史命令时，zsh支持限制查找。比如，输入ls,然后再按方向上键，则只会查找用过的ls命令。而此时使用则会仍然按之前的方式查找，忽略 ls
多个终端会话共享历史记录
通配符搜索：ls -l **/*.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find。使用 **/ 来递归搜索
扩展环境变量，输入环境变量然后按 就可以转换成表达的值
在 .zshrc 中添加 setopt HIST_IGNORE_DUPS 可以消除重复记录，也可以利用 sort -t ";" -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history 手动清除

* simple shell
  #+BEGIN_SRC c 

    #define TRUE 1
    while(TRUE) { /* repeat forever */
      type_prompt();/* display prompt on the screen *\/ */
      read_command(command,parameters); /* read input from terminal */
      if(fork()!=0) {  /* fork off child process */
        /* 父进程 */
        waitpid(-1,&status,0);　　　　　　　  /* wait for child to exit */
        else {
          /* Child code */
          execve(command,parameters,0);/* execute command */
        }
      }
      #+END_SRC
