#+TITLE: hugo简介

博客框架，比较快。

#more
** 命令使用  
   - 创建网站 hugo new site SITENAME
   - 写关于页面 hugo new about.md
   - 写文章 hugo new post/POSTNAME.md 
   - 创建主题 hugo new theme THEMENAME
   - 添加主题 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/THEMENAME
   - 使用主题 echo 'theme = "ananke"' >> config.toml
   - 启动站点 hugo server -D
   - 使用模板 hugo server --theme=hyde
** 内容 (content)
   hugo content 目录中的内容一般会映射到 URL 地址结构。
   
   当然，url 也可以是其他的组织形式，比如 slug，type，sections，path 或自己定义 url
** 模板
    大部分的网站只需要创建 */layouts/_default/single.html* 和 */layouts/_default/list.html*
*** 主要模板 
**** single 
     用户可以在前端 (front-matter)指定类型(type)和布局 (layout)，section 是根据 content 文件的位置决定，type 优先于 section.
     
     - /layouts/TYPE-or-SECTION/LAYOUT.html
     - /layouts/TYPE-or-SECTION/single.html
     - /layouts/_default/single.html
     - /themes/THEME/layouts/TYPE-or-SECTION/LAYOUT.html
     - /themes/THEME/layouts/TYPE-or-SECTION/single.html
     - /themes/THEME/layouts/_default/single.html

       结构
       #+begin_quote
       ▾ layouts/
       ▾ _default/
       single.html
       ▾ post/
       single.html
       ▾ project/
       single.html
       #+end_quote
       
     #+begin_src html
       {{ partial "header.html" . }}
       {{ partial "subheader.html" . }}
       {{ $baseurl := .Site.BaseURL }}

       <section id="main">
         <h1 id="title">{{ .Title }}</h1>
         <div>
           <article id="content">
             {{ .Content }}
           </article>
         </div>
       </section>

       <aside id="meta">
         <div>
           <section>
             <h4 id="date"> {{ .Date.Format "Mon Jan 2, 2006" }} </h4>
             <h5 id="wc"> {{ .FuzzyWordCount }} Words </h5>
           </section>
           <ul id="categories">
             {{ range .Params.topics }}
             <li><a href="{{ $baseurl }}/topics/{{ . | urlize }}">{{ . }}</a> </li>
             {{ end }}
           </ul>
           <ul id="tags">
             {{ range .Params.tags }}
             <li> <a href="{{ $baseurl }}/tags/{{ . | urlize }}">{{ . }}</a> </li>
             {{ end }}
           </ul>
         </div>
         <div>
           {{ if .Prev }}
           <a class="previous" href="{{.Prev.Permalink}}"> {{.Prev.Title}}</a>
           {{ end }}
           {{ if .Next }}
           <a class="next" href="{{.Next.Permalink}}"> {{.Next.Title}}</a>
           {{ end }}
         </div>
       </aside>

       {{ partial "disqus.html" . }}
       {{ partial "footer.html" . }}
#+end_src
**** list  
     列表页显示多个内容，! 主页有单独的模板  
***** section lists 
      - /layouts/section/SECTION.html
      - /layouts/_default/section.html
      - /layouts/_default/list.html
      - /themes/THEME/layouts/section/SECTION.html
      - /themes/THEME/layouts/_default/section.html
      - /themes/THEME/layouts/_default/list.html
***** Taxonomy Lists
      - /layouts/taxonomy/SINGULAR.html (e.g. /layouts/taxonomy/topic.html)
      - /layouts/_default/taxonomy.html
      - /layouts/_default/list.html
      - /themes/THEME/layouts/taxonomy/SINGULAR.html
      - /themes/THEME/layouts/_default/taxonomy.html
      - /themes/THEME/layouts/_default/list.html
***** Taxonomy RSS
      - /layouts/taxonomy/SINGULAR.rss.xml
      - /layouts/_default/rss.xml
      - /themes/THEME/layouts/taxonomy/SINGULAR.rss.xml
      - /themes/THEME/layouts/_default/rss.xml
***** section 示例(post.html)
      #+begin_src html
        {{ partial "header.html" . }}
        {{ partial "subheader.html" . }}

        <section id="main">
          <div>
            <h1 id="title">{{ .Title }}</h1>
            <ul id="list">
              {{ range .Data.Pages }}
              {{ .Render "li"}}
              {{ end }}
            </ul>
          </div>
        </section>

        {{ partial "footer.html" . }}
      #+end_src
***** taxonomy (tag.html)
      #+begin_src html
        {{ partial "header.html" . }}
        {{ partial "subheader.html" . }}

        <section id="main">
          <div>
            <h1 id="title">{{ .Title }}</h1>
            {{ range .Data.Pages }}
            {{ .Render "summary"}}
            {{ end }}
          </div>
        </section>

        {{ partial "footer.html" . }}
      #+end_src
**** 列表模板 list template
     hugo 中一个页面的显示需要使用多个模板。
  
***** section lists (段模板)
      /layouts/section/1,2,3.html
***** taxonomy lists (分类模板)
      /layouts/taxonomy /1,2,3.html
***** 模板例子 (tag.html)
      #+begin_src html
        {{ partial "header.html" . }}
        {{ partial "subheader.html" . }}

        <section id="main">
          <div>
            <h1 id="title">{{ .Title }}</h1>
            {{ range .Data.Pages }}
            {{ .Render "summary"}}
            {{ end }}
          </div>
        </section>

        {{ partial "footer.html" . }}
      #+end_src
***** 内容排序
      hugo 中，content 要按照 *front matter* 的信息进行排序
    
      按照日期排序 
      #+begin_src html
        {{ range .Data.Pages }}
        <li>
          <a href="{{ .Permalink }}">{{ .Title }}</a>
          <div class="meta">{{ .Date.Format "Mon, Jan 2, 2006" }}</div>
        </li>
        {{ end }}
      #+end_src
   
      - 按 weight 排序  range .Data.Pages.ByWeight
      - 按日期 range .Data.Pages.ByDate
      - 发布日期 range .Data.Pages.ByPublishDate
      - 长度 range .Data.Pages.ByLength
      - 标题 range .Data.Pages.ByTitle
      - 逆序 range .Data.Pages.ByDate.Reverse
***** 分组
***** 过滤和限制内容
******  first
       #+begin_src html
         {{ range first 10 .Data.Pages }}
         {{ .Render "summary" }}
         {{ end }}
       #+end_src
****** where
       #+begin_src html
         {{ range where .Data.Pages "Section" "post" }}
         {{ .Content }}
         {{ end }}
       #+end_src
****** 联合起来
       #+begin_src html
         {{ range first 5 (where .Data.Pages "Section" "post") }}
         {{ .Content }}
         {{ end }}
       #+end_src
**** homepage 
     主页路径  */themes/THEME/layouts/index.html*

     #+begin_src html
       <!DOCTYPE html>
       <html class="no-js" lang="en-US" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#">
         <head>
           <meta charset="utf-8">

           {{ partial "header.html" . }}

           <base href="{{ .Site.BaseURL }}">
           <title>{{ .Site.Title }}</title>
           <link rel="canonical" href="{{ .Permalink }}">

         </head>
         <body lang="en">
           王八单
           <section id="main">
             <div>
               {{ range first 10 .Data.Pages }}
               {{ .Render "summary"}}
               {{ end }}
             </div>
           </section>

           {{ partial "footer.html" . }}
     #+end_src
*** 支持模板 
**** partial templates
**** content view 
**** texonomy terms (分类术语)
     如果我们在 Front Matter 中添加以下代码

     type: review
     layout: reviewarticle
     该文章现在的寻找模板顺序为：

     #+begin_src 
     /layouts/review/reviewarticle.html
     /layouts/posts/reviewarticle.html
     /layouts/review/single.html
     /layouts/posts/single.html
     /layouts/_default/single.html
     /themes/<THEME>/layouts/review/reviewarticle.html
     /themes/<THEME>/layouts/posts/reviewarticle.html
     /themes/<THEME>/layouts/review/single.html
     /themes/<THEME>/layouts/posts/single.html
     /themes/<THEME>/layouts/_default/single.html
     #+end_src
     值得注意的是，/layouts/ 目录下模板优先级总是高于 /themes/<THEME>/layouts/ 。同理，若根目录下存在与 /themes/ 文件夹下同名的文件夹，根目录下的文件优先级总是高于 /themes/ 文件夹。

     因此，在我们只是需要别人提供的主题做一些小修改时，尤其是对于一些静态资源需要进行覆盖时，将新的文件置于根目录的文件夹下而不是直接对主题进行修改，日后需要更新主题时就无需解决 git 冲突的问题了。

     当然，如果是需要直接对 /layouts/ 目录下的模板进行修改，还是建议新建一个 git 分支进行更改。

** URL 管理
   正如前文所言，hugo 会将 content/目录下的结构反映到生成的静态网站中，但 config.toml 中的 permalinks 参数允许你自由更改内容的 URL。例如：你想从 hexo 迁移到 hugo，你可以将 permalinks 定义为下面这种形式以适应之前的 URL。

   #+begin_src 
 [permalinks]
   post = "/:year/:month/:title/"
   #+end_src
   上面的配置将改变 content/post/文件夹下所有文章的 URL。

   举个栗子，content/post/sample-entry.md 的 URL 将从默认的https://example.com/post/sample-entry/改变为https://example.com/2013/11/sample-entry/。

   所有可用的属性如下：
   #+begin_src 
 /:monthname/:day/:weekday/:weekdayname/:yearday/:section/:title/:slug/:filename/
   #+end_src
 
** 内容摘要
 Hugo 会自动提取文章的前 70 个字符作为摘要。（注意：该功能在中文环境下需要在
 config.toml 中添加 hasCJKLanguage = true 才能发挥更好的效果。）

 当然你也可以在文章内使用<!--more-->针对文章手动进行摘要提取，在<!--more-->之前
 出现的内容都会作为摘要使用，且能够保持渲染后的结构而不是纯文字版本。

** Shortcodes
 Shortcodes 帮助你在编写 markdown 时快捷的插入 HTML 代码，功能上类似于 Hexo 的标签插件。

  #+begin_src 
  {{< ref "blog/post.md" >}} => https://example.com/blog/post/
 {{< ref "post.md#tldr" >}} => https://example.com/blog/post/#tldr:caffebad
 {{< relref "post.md" >}} => /blog/post/
 {{< relref "blog/post.md#tldr" >}} => /blog/post/#tldr:caffebad
 {{< ref "#tldr" >}} => #tldr:badcaffe
 {{< relref "#tldr" >}} => #tldr:badcaffe
  #+end_src
 上述代码通过内置的 rel 与 relref 帮助你快速引用站点内的其他文章。

 注意: 如果你的 content/ 目录下有多个同名的文件，引用该文章必须使用 blog/post.md 这样的相对路径而不是只提供 post.md 这样的文件名。

 hugo 还内置了 instagram、tweet、youtube 等 Shortcodes，可以阅读官方文档了解更多信息，你使用的主题可能也会提供 Shortcodes，当然你也可以定制你自己的 Shortcodes。

** 分类系统
 默认情况下即 tags 与 categories，通常来说这已经足够我们使用了，但你也可以在 config.toml 文件中添加下面的代码来添加更多的分类。
 #+begin_src 
 [taxonomies]
   tag = "tags"
   category = "categories"
   series = "series"
 #+end_src
* 特效
** 文字逐字显示
   #+begin_src html 
     <div class="textexbox" data-textex="anime">
       内容
     </div>
     <link rel="stylesheet" href="/css/TextEx.css">
     <script src="/js/TextEx.js"></script>
   #+end_src
* shortcode
  https://blog.olowolo.com/example-site/post/shortcodes/
** Admonition
   #+begin_src 
{{% admonition note "I'm title!" false %}}
biu biu biu.

{{% admonition type="note" title="note" details="true" %}}
biu biu biu.
{{% /admonition %}}

{{% admonition example %}}
Without title.
{{% /admonition %}}

{{% /admonition %}}
   #+end_src

   
   #+begin_src 
   {{% admonition abstract abstract %}}
{{% /admonition %}}
   #+end_src

   info tip success question warning failure danger bug example quote
   
*** 图片
    center, right, left
    #+begin_src 
 ## default
 ![img](/path/to/img.gif "img")

 {{% center %}}
 ## center
 ![img](/path/to/img.gif "img")
 {{% /center %}}

 {{% right %}}
 ## right
 ![img](/path/to/img.gif "img")
 {{% /right %}}

 {{% left %}}
 ## left
 ![img](/path/to/img.gif "img")
 {{% /left %}}
    #+end_src
** 网易音乐
   #+begin_src 
{{% music id="28196554" auto="1" %}}
   #+end_src
* 包含库
---
title: Some catchy title
js: https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.2/photoswipe.js
css: https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.2/photoswipe.css
---
模板部分
如果您想将脚本作为数组提供给您，那么您也可以支持多个 include。您只需遍历并为下方的每个条目添加脚本标签 js。同样的过程适用于 CSS。

CSS 部分
{{ if .Params.css }}
<link rel="stylesheet" href="{{ .Params.css }}">
{{ end }}
JS 部分
{{ if .Params.js }}
<script src="{{ .Params.js }}"></script>
{{ end }}
* video
  <video id="video" controls="" preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png">
      <source id="mp4" src="/VID_20200324_114551.mp4" type="video/mp4">
      <p>Your user agent does not support the HTML5 Video element.</p>
    </video>
* [[https://hugo.aiaide.com/post/%E8%87%AA%E5%AE%9A%E4%B9%89hugo%E4%B8%BB%E9%A2%98-%E4%BB%8E%E5%86%85%E5%AE%B9%E9%A1%B5%E5%BC%80%E5%A7%8B/][自定义hugo主题--从内容页开始 - Hugo 中文帮助文档]] :website:
** Article
*** 准备工作


 创建网站骨架和主题目录

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                   |
 |       1           |      hugo new site study-hugo   # 创建网站骨架    |
 |      2            |      cd study-hugo                                |
 |      3            |     hugo new theme study-theme   # 创建主题目录   |
 | #+END_EXAMPLE     | #+END_EXAMPLE                                     |

 在config.toml文件中配置study-theme主题

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                 |
 |       1           |       theme  =  "study-theme"   |
 | #+END_EXAMPLE     | #+END_EXAMPLE                   |

*** 添加第一篇博文


 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE               |
 |       1           |      hugo new post/page1.md   |
 |      2            |      # hugo new的命令格式     |
 |      3            |      # hugo new [path]        |
 | #+END_EXAMPLE     | #+END_EXAMPLE                 |

 这时content目录会变成下面这样

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE            |
 |       1           |      └── content           |
 |      2            |         └── post           |
 |      3            |             └── page1.md   |
 | #+END_EXAMPLE     | #+END_EXAMPLE              |

 我们打开page1.md文件, 发现文件本身并不是空的, 而是有一些默认的内容.

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                       |
 |       1           |      ---                              |
 |      2            |     title: "Page1"                    |
 |      3            |     date: 2019-11-11T09:53:40+08:00   |
 |      4            |     draft: true                       |
 |      5            |     ---                               |
 | #+END_EXAMPLE     | #+END_EXAMPLE                         |

 这些内容是由/archetypes目录中的内容原型决定的.

 由 =---= 包裹的内容为”Front Matter”, FrontMatter中包含了一些预定义的变量, 这些变量的值可以在模板文件通过模板中的变量取得. =---=一下的内容为博文的实际内容.

 title: 页面的标题 date: 页面的时间 draft: true表示当前页面是草稿页

 我们给博文添加一些内容

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                            |
 |        1          |      ---                                   |
 |       2           |     title: "我们的第一篇博客"              |
 |       3           |     date: 2019-12-05T09:53:40+08:00        |
 |       4           |     draft: false                           |
 |       5           |     ---                                    |
 |       6           |     ;博文正文                              |
 |       7           |      ## 大家好!                            |
 |       8           |      新博客, 新气象, 愿大家有个好的开始.   |
 |       9           |                                            |
 |      10           |     .....                                  |
 |      11           |                                            |
 |      12           |     Good Luck!                             |
 | #+END_EXAMPLE     | #+END_EXAMPLE                              |

*** 为博文设计模板


 /themes/study-theme/layouts/_default/single.html文件是所有内容页面默认的模板页面

 single.html文件默认为空, 修改内容如下:

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                                                           |
 |        1          |                                                                                           |
 |       2           |      < html  lang = "zh" >                                                                |
 |       3           |                                                                                           |
 |       4           |      < head >                                                                             |
 |       5           |          < meta  charset = "UTF-8" >                                                      |
 |       6           |          < meta  name = "viewport"  content = "width=device-width, initial-scale=1.0" >   |
 |       7           |          < meta  http-equiv = "X-UA-Compatible"  content = "ie=edge" >                    |
 |       8           |          < title >{{.Title}}  title >                                                     |
 |       9           |       head >                                                                              |
 |      10           |                                                                                           |
 |      11           |      < body >                                                                             |
 |      12           |          < div  id = "post"  class = "post" >                                             |
 |      13           |              < article >                                                                  |
 |      14           |                  < header >                                                               |
 |      15           |                      < h1  class = "post-title" >{{ .Title }}  h1 >                       |
 |      16           |                   header >                                                                |
 |      17           |                 {{.Content}}                                                              |
 |      18           |               article >                                                                   |
 |      19           |           div >                                                                           |
 |      20           |       body >                                                                              |
 |      21           |                                                                                           |
 |      22           |       html >                                                                              |
 | #+END_EXAMPLE     | #+END_EXAMPLE                                                                             |

 模板中的{{.Title}}和{{.Content}}都是模板页面级的变量, 他们的值来至内容页中”Front Matter”中对应的字段. 具体本示例中就是/content/post/page1.md中的内容

*** 预览网站


 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                                                    |
 |      1            |     hugo server -D                                                                 |
 |      2            |     # Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)   |
 | #+END_EXAMPLE     | #+END_EXAMPLE                                                                      |

 服务器的默认地址是 [[http://localhost:1313/]], 端口号可以通过 -p 自定义端口 来修改.

 content目录的结构就是网站的结构, 所以我们刚才添加的第一篇博客的url地址就是: [[http://localhost:1313/post/page1/]]

*** Front Matter中常用的变量


 - =title=: 内容标题
 - =date=: 该页面的时间, 一般用来存放页面的创建时间.
 - =draft=: 如果true, 表示页面为草稿页, 内容不会呈现在网站中, 除非添加 --buildDrafts 给hugo命令.
 - =keywords=: 页面的关键字
 - =description=: 内容描述, 主要用于SEO优化.
 - =weight=: 列表页的文章排序, 值越小越靠前, 默认是按时间先后排序的, 也就是 =date=中的值

*** 模板页中常用的变量


 - =.Title=: 获取Front Matter中title的值
 - =.Content=: 获取文章的内容
 - =.Date=: 获取Front Matter中date的值
 - =.Description=: 获取Front Matter中description的值, 一般用于meta中的description字段
 - =.Keywords=: 获取Front Matter中keywords的值, 用于meta中的keyword字段
 - =.Permalink=: 获取页面的链接地址(URL)
 - =.Next=: 下一个页面
 - =.Prev=: 上一个页面
 - =.WordCount=: 内容的字数
 - =.ReadingTime=: 阅读内容的预估时间
 - =.Pages=: 当前列表页面下的内容页面的集合, 该变量在内容页模板的上下文中值为nil
 - =.Site=: 站点变量, 该变量下包含很多站点级别的属性和方法.

 这些变量可以在官网找到 [[https://gohugo.io/variables/page/]] 具体的含义可以逐步去试一下.
* 自定义hugo主题--内容列表页 
  
  文章中的源码: [[https://github.com/Suroppo/hugo-theme-demo]]

** 内容页面的划分


根据内容页存放的位置, 内容页分为两种, 一种是存放在content根目录下面的内容页, 叫单页面(Single Page), 一种是存放在content子目录下的内容页, 叫章节页面(Section Page). 两者的区别是: 他们的Section属性不同, 章节页面的Section属性的值为页面所在的目录名, 单页面的Section属性的值为空字符串, Type属性为 =page=.

这里给内容页面添加列表页主要是给章节页面添加列表页.

** 为所有的内容页面添加一个列表页.


在前一篇DEMO的基础上我们多添加了几篇博文, 和一个_index.md文件. content目录的结构如下

| #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE            |
|       1           |      └── content           |
|      2            |         └── post           |
|      3            |             ├─ _index.md   |
|      4            |             ├─ page1.md    |
|      5            |             ├─ page2.md    |
|      6            |             ├─ page3.md    |
|      7            |             └─ page4.md    |
| #+END_EXAMPLE     | #+END_EXAMPLE              |

_index.md就是post目录下面所有博文的列表页. 它对应的默认模板文件在: layouts/_default/list.html.

现在修改list.html内容如下

| #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                                                           |
|        1          |                                                                                           |
|       2           |      < html  lang = "zh" >                                                                |
|       3           |      < head >                                                                             |
|       4           |          < meta  charset = "UTF-8" >                                                      |
|       5           |          < meta  name = "viewport"  content = "width=device-width, initial-scale=1.0" >   |
|       6           |          < meta  http-equiv = "X-UA-Compatible"  content = "ie=edge" >                    |
|       7           |          < title >列表页面  title >                                                       |
|       8           |       head >                                                                              |
|       9           |      < body >                                                                             |
|      10           |                                                                                           |
|      11           |         {{  range .Pages }}                                                               |
|      12           |              < div >                                                                      |
|      13           |                  < a  href = ".Permalink" >{{.Title}}  a >                                |
|      14           |               div >                                                                       |
|      15           |         {{  end  }}                                                                       |
|      16           |       body >                                                                              |
|      17           |       html >                                                                              |
| #+END_EXAMPLE     | #+END_EXAMPLE                                                                             |

=range=: 可以用来遍历集合, .Pages变量获取的是当前当前章节下说有的内容页的集合. 如本例中, 访问post章节下的列表页, 这时.Pages包含的就是post目录下的所有文章.

在遍历的时候, 每次循环的上下文就是每个内容页面, 内容页面模板中的变量都可以使用的.

** 为内容页面添加上一页和下一页


这里主要使用到了内容页模板中的 =.NextInSection= 和 =.PrevInSection= 变量, 他们表示当前章节中, 按时间倒序排列的文章集合的后一篇文章和前一篇文章.

| #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                                                           |
|        1          |                                                                                           |
|       2           |      < html  lang = "zh" >                                                                |
|       3           |                                                                                           |
|       4           |      < head >                                                                             |
|       5           |          < meta  charset = "UTF-8" >                                                      |
|       6           |          < meta  name = "viewport"  content = "width=device-width, initial-scale=1.0" >   |
|       7           |          < meta  http-equiv = "X-UA-Compatible"  content = "ie=edge" >                    |
|       8           |          < title >{{.Title}}  title >                                                     |
|       9           |       head >                                                                              |
|      10           |                                                                                           |
|      11           |      < body >                                                                             |
|      12           |          < div  id = "post"  class = "post" >                                             |
|      13           |              < article >                                                                  |
|      14           |                  < header >                                                               |
|      15           |                      < h1  class = "post-title" >{{ .Title }}  h1 >                       |
|      16           |                   header >                                                                |
|      17           |                 {{.Content}}                                                              |
|      18           |                  < br  />                                                                 |
|      19           |                                                                                           |
|      20           |                  < div >                                                                  |
|      21           |                     {{with .NextInSection}}                                               |
|      22           |                      < a  href = "{{.Permalink}}" >前一页  a >                            |
|      23           |                     {{end}}                                                               |
|      24           |                     {{with NextInSection}}                                                |
|      25           |                      < a  href = "{{.Permalink}}" >后一页  a >                            |
|      26           |                     {{end}}                                                               |
|      27           |                   div >                                                                   |
|      28           |               article >                                                                   |
|      29           |           div >                                                                           |
|      30           |       body >                                                                              |
|      31           |                                                                                           |
|      32           |       html >                                                                              |
| #+END_EXAMPLE     | #+END_EXAMPLE                                                                             |

* 自定义hugo主题--网站首页 - Hugo 中文帮助文档
  首页也属于列表页, 只是他是一个特殊的列表页. 如果没有给首页添加模板, 首页使用
  内容页的模板.

** 首页模板的位置
/themes/study-theme/layouts/index.html 首页模板使用单独的模板, 模板的名字也是固
定的 index.html. 也可以给首页添加一个markdown文件, 位置在content根目录下,
/content/_index.md. 这个不是必须的.

** 在首页中展示各章节的文章列表
 首页是整个网站的一个索引, 我们一般会在首页中展示各个板块的文章列表, 在本DEMO中
 我们添加了两个板块, 也就是/content目录中的news 和 post这两个章节目录, 现在我们
 把这两个章节的内容添加到首页中.

| 网站首页                                              |
 |                                                       |
 | 新闻列表                                              |
 | {{ range where .Site.RegularPages "Section" "news" }} |
 | {{.Title}}                                            |
 | {{ end }}                                             |
 |                                                       |
 | 博文列表                                              |
 | {{ range where .Site.RegularPages "Section" "post" }} |
 | {{.Title}}                                            |
 | {{ end }}                                             |

 这里主要用到两点

 - =.Site.RegularPages= 表示网站下面的所有节点内容, 具体到本例, 就是news和post目录下的所有文章
 - =where= 是一个函数, 用来查询集合中符合条件的项目.

 where 的语法: =where COLLECTION KEY [OPERATOR] MATCH=

 =where .Site.RegularPages "Section" "news"= 的含义就是, 查找出section属性的值为news的项目
 
* [[https://hugo.aiaide.com/post/%E8%87%AA%E5%AE%9A%E4%B9%89hugo%E4%B8%BB%E9%A2%98-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95/][自定义hugo主题--导航菜单 - Hugo 中文帮助文档]] :website:

*** 设置导航菜单的位置

 在根目录下的 config.toml 文件中配置导航菜单, config 文件支持三种文件格式: toml,
 yaml, json, 可以使用自己熟悉的格式. 使用对应的格式需要修改对应的扩展名. 不推荐
 使用 JSON 格式, 因为 json 不支持注释, 在配置文件中添加注释是非常有必要的.

 通过.Site.Menus 变量获取到设置的菜单信息, 下面以 toml 格式为例展示导航菜单的使用.

*** 添加主导航菜单和页脚导航菜单
 | # 主导航菜单      |
 | name = "首页"     |
 | url = "/"         |
 | weight = "1"      |
 | [[ menu . main ]]     |
 | name = "博文"     |
 | url = "/post"     |
 | weight = "2"      |
 | [[ menu . main ]]     |
 | name = "新闻"     |
 | url = "/news"     |
 | weight = "3"      |
 | [[ menu . main ]]     |
 | name = "关于"     |
 | url = "/about"    |
 | weight = "4"      |
 |                   |
 | # 页脚导航菜单    |
 | [[ menu . foot ]]     |
 | name = "网站首页" |
 | url = "/"         |
 | weight = "4"      |
 | [[ menu . foot ]]     |
 | name = "博文集合" |
 | url = "/post"     |
 | weight = "3"      |
 | [[ menu . foot ]]     |
 | name = "新闻列表" |
 | url = "/news"     |
 | weight = "2"      |
 | [[ menu . foot ]]     |
 | name = "关于我们" |
 | url = "/about"    |
 | weight = "1"      |
 | #+END_EXAMPLE     |

 获取菜单的代码如下”

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                            |
 |        1          |       < h2 >主导航菜单  h2 >                               |
 |       2           |      < ul >                                                |
 |       3           |       {{ range .Site.Menus.main }}                         |
 |       4           |        < li >< a  href = "{{.URL}}" >{{.Name}}  a > li >   |
 |       5           |       {{ end }}                                            |
 |       6           |       ul >                                                 |
 |       7           |                                                            |
 |       8           |      < h2 >页脚导航菜单  h2 >                              |
 |       9           |      < ul >                                                |
 |      10           |       {{ range .Site.Menus.foot }}                         |
 |      11           |        < li >< a  href = "{{.URL}}" >{{.Name}}  a > li >   |
 |      12           |       {{ end }}                                            |
 |      13           |       ul >                                                 |
 | #+END_EXAMPLE     | #+END_EXAMPLE                                              |

 =.Site.Menus=后面接的是在 config.toml 中定义的表名

*** 定义多级菜单


 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE           |
 |        1          |       [[ menu . main ]]   |
 |       2           |      name = "首页"        |
 |       3           |      url = "/"            |
 |       4           |      weight = "1"         |
 |       5           |      [[ menu . main ]]    |
 |       6           |      name = "博文"        |
 |       7           |      url = "/post"        |
 |       8           |      weight = "2"         |
 |       9           |      [[ menu . main ]]    |
 |      10           |      name = "新闻"        |
 |      11           |      url = "/news"        |
 |      12           |      weight = "3"         |
 |      13           |      [[ menu . main ]]    |
 |      14           |      name = "关于"        |
 |      15           |      url = "/about"       |
 |      16           |      weight = "4"         |
 |      17           |      [[ menu . main ]]    |
 |      18           |      name = "子菜单"      |
 |      19           |      weight = "5"         |
 |      20           |      [[ menu . main ]]    |
 |      21           |      parent = "子菜单"    |
 |      22           |      name = "子菜单1"     |
 |      23           |      weight = "2"         |
 |      24           |      [[ menu . main ]]    |
 |      25           |      parent = "子菜单"    |
 |      26           |      name = "子菜单2"     |
 |      27           |      weight = "1"         |
 | #+END_EXAMPLE     | #+END_EXAMPLE             |

 获取菜单的代码如下:

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                            |
 |        1          |       < h2 >主导航菜单  h2 >                               |
 |       2           |                                                            |
 |       3           |      < ul >                                                |
 |       4           |       {{ range .Site.Menus.main }}                         |
 |       5           |       {{if .HasChildren}}                                  |
 |       6           |        < li >{{.Name}}  li >                               |
 |       7           |        < ul >                                              |
 |       8           |         {{ range .Children }}                              |
 |       9           |          < li >                                            |
 |      10           |            < a  href = "{{ .URL }}" >{{ .Name }}  a >      |
 |      11           |           li >                                             |
 |      12           |         {{ end }}                                          |
 |      13           |         ul >                                               |
 |      14           |       {{ else }}                                           |
 |      15           |        < li >< a  href = "{{.URL}}" >{{.Name}}  a > li >   |
 |      16           |       {{end}} {{ end }}                                    |
 |      17           |       ul >                                                 |
 | #+END_EXAMPLE     | #+END_EXAMPLE                                              |

 子菜单项比普通的菜单项多了一个属性 =parent=, 用于设置父菜单的ID, 这里用的是Name的值, 如果name的值不重复, 一旦重复就会产生意想不到的效果. 正确的做法是使用Identifier的值.

*** 导航菜单常用的属性


 - =.Name=: 菜单想的名称, 如果Name的值重复了, 要想使其生效, 需要为其设置Identifier属性
 - =.Identifier=: 菜单想的唯一标识, 值不能重复.
 - =.Weight=: 用于设置菜单项的排序, 值越小排名越靠前.
 - =.Parent=: 设置父菜单的ID.
 - =.URL=: 设置菜单项直向的URL地址.

*** 当行菜单常用的方法


 - =.HasChildren=: 判断是否包含子菜单. 如果有子菜单则返回true

   
* [[https://hugo.aiaide.com/post/hugo%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/][Hugo的工作原理 - Hugo 中文帮助文档]] :website:

** 基本概念
   文章, 页面, 模板
*** 文章
文章就是作者需要撰写的内容, 他以markdown格式的文件存放在content目录下面. 我们既可以通过命令行的方式创建文章 =hugo new about.md=, 也可以通过手工的方式在content创建. 通常我们把单独的文章内容放在content目录下面, 同一类型的文章内容放在content的子目录下面, 这样做hugo会根据子目录下的内容自动生成列表内容.

*** 页面
    页面就是通过 =hugo= 最终生成的静态网站中的html页面. 页面是由两部内容合成的, 即: 页面 = 文章 + 模板. hugo会根据一定的规制去寻找文章对应的模板页面, 从而生成页面.
** content目录结构和URL的对应关系

其实也可以叫文章和页面的对应关系.

| └── content                                                                    |
| ├── _index.md          [home ]            <- https://example.com/ **           |
| ├── about.md           [page ]            <- https://example.com/about/        |
| ├── posts                                                                      |
| ├── _index.md      [section ]         <- https://example.com/posts/ **         |
| ├── firstpost.md   [page ]            <- https://example.com/posts/firstpost/  |
| ├──--------- happy                                                             |
| ├──---------_index.md  [section ]         <- https://example.com/posts/happy/ ** |
| └──--------- ness.md    [page ]            <- https://example.com/posts/happy/ness/ |
| └── secondpost.md  [page ]            <- https://example.com/posts/secondpost/ |
| └── quote                                                                      |
| ├── _index.md      //  [section ]         <- https://example.com/quote/ **     |
| ├── first.md       //  [page ]            <- https://example.com/quote/first/  |
| └── second.md      //  [page ]            <- https://example.com/quote/second/ |

| // hugo默认生成的页面, 没有对应的markdown文章                                                         |
| 分类列表页面               //  [taxonomyTerm ]    <- https://example.com/categories/  **              |
| 某个分类下的所有文章的列表  //  [taxonomy ]        <- https://example.com/categories/one-category  ** |
| 标签列表页面               //  [taxonomyTerm ]    <- https://example.com/tags/  **                    |
| 某个标签下的所有文章的列表  //  [taxonomy ]        <- https://example.com/tags/one-tag  **            |

从对应关系来看作者创建的文章路径, 会一一对应的转化成网站的URL,也就是页面. 所以作者应以反映所呈现网站结构的方式进行组织content的目录结构.

中括号 =[]=中标注的是页面的kind属性, 他们整体上分为两类: single(单页面 - page) 和 list(列表页 - home, section, taxonomyTerm, taxonomy).

content目录下的所有_index.md可以用来生成对应的列表页面, 如果没有这些markdown文件, hugo也会默认生成对应的页面. 有这些markdown文件的话, hugo会根据文件里面的FrontMatter的设置生成更个性的页面.

** 页面和模板的对应关系
页面和模板的应对关系是根据页面的一系列的属性决定的, 这些属性有: Kind, Output Format, Language, Layout, Type, Section. 他们不是同时起作用, 其中kind, layout, type, section用的比较多.

- kind: 用于确定页面的类型, 单页面使用single.html为默认模板页, 列表页使用list.html为默认模板页, 值不能被修改
- section: 用于确定section tree下面的文章的模板. section tree的结构是由content目录结构生成的, 不能被修改, content目录下的一级目录自动成为root section, 二级及以下的目录, 需要在目录下添加_index.md文件才能成为section tree的一部分. 如果页面不在section tree下section的值为空
- type: 可以在Front Matter中设置, 用户指定模板的类型. 如果没设定type的值, type的值等于section的值 或 等于 =page=(section为空的时候)
- layout: 可以在Front Matter中设置, 用户指定具体的模板名称.

可以使用模板属性来查看这些属性的具体值

 {{.Kind}}       
 {{.Section}}    
 {{.Type}}       

从层次上hugo中的模板分为三个级别的, hugo依据从上到下的顺序一次查找模板,直到找到为止.

- 特定页面的模板
- 应对某一类页面的模板
- 应对全站的模板: 存放在_default目录下面的list.html 和 single.html页面

后面会根据kind属性的值, 分别介绍各种模板.
