* gwk
** 基础  
*** 工作流程
    AWK 执行的流程非常简单：读( Read )、执 行（ Execute )与重复( Repeat )。

**** 读（Read）
     AWK 从输入流（文件、管道或者标准输入）中读入一行然后将其存入内存中。
**** 执行(Execute)
     对于每一行输入，所有的 AWK 命令按顺执行。 默认情况下，AWK 命令是针对于每一行输入，但是我们可以将其限制在指定的模式中。
**** 重复（Repeate）
   一直重复上述两个过程直到文件结束。
*** 程序的结构
**** 开始块（BEGIN block）
     BEGIN {awk-commands}
 
   顾名思义，开始块就是在程序启动的时候执行的代码部分，并且它在整个过程中只执行一次。 一般情况下，我们在开始块中初始化一些变量。BEGIN 是 AWK 的关键字，因此它必须是大写的。 不过，请注意，开始块部分是可选的，你的程序可以没有开始块部分。
**** 主体块（Body Block）
     /pattern/ {awk-commands}
 
   对于每一个输入的行都会执行一次主体部分的命令。默认情况下，对于输入的每一行，AWK 都会很执行命令。但是，我们可以将其限定在指定的模式中。 注意，在主体块部分没有关键字存在。
**** 结束块（END Block）
     END {awk-commands}
 
   结束块是在程序结束时执行的代码。 END 也是 AWK 的关键字，它也必须大写。 与开始块相似，结束块也是可选的。
*** 示例
  先创建一个名为 marks.txt 的文件。其中包括序列号、学生名字、课程名称与所得分数。

  1) Amit     Physics    80
  2) Rahul    Maths      90
  3) Shyam    Biology    87
  4) Kedar    English    85
  5) Hari     History    89

  接下来，我们将使用 AWK 脚本来显示输出文件中的内容，同时输出表头信息。

  [jerry]$ awk 'BEGIN{printf "Sr No\tName\tSub\tMarks\n"} {print}' marks.txt

  执行上面的代码后，将会输出如下的结果：

  Sr No Name     Sub        Marks
  1) Amit     Physics    80
  2) Rahul    Maths      90
  3) Shyam    Biology    87
  4) Kedar    English    85
  5) Hari     History    89

  程序启动时，AWK 在开始块中输出表头信息。在主体块中，AWK 每读入一行就将读入的内容输出至标准输出流中，一直到整个文件被全部读入为止。
** 选项
*** --dump-variables[=file] 选项
 此选项会将全局变量及相应值按序输出到指定文件中。默认的输出文件名是 awkvars.out。
** 示例 
*** 打印列或域
    awk '{print $3 "\t" $4}' marks.txt
*** 输出匹配的所有行
    awk '/a/ {print $0}' marks.txt
*** 计数匹配次数并输出
    awk '/a/{++cnt} END {print "Count = ", cnt}' marks.txt
*** 输出字符数多于 18 的行
    awk 'length($0) > 18' marks.txt
*** if
    awk 'BEGIN {num = 10; if (num % 2 == 0) printf "%d is even number.\n", num }'
*** if else
    awk 'BEGIN {num = 11; 
   if (num % 2 == 0) printf "%d is even number.\n", num; 
   else printf "%d is odd number.\n", num 
                    }'
*** for
    awk 'BEGIN { for (i = 1; i <= 5; ++i) print i }'
*** While
    awk 'BEGIN {i = 1; while (i < 6) { print i; ++i } }'

*** 内置函数
**** 算术函数
     AWK 提供了如下的内置算术运算函数：
***** atan2(y,x)
  该函数返回正切值 y/x 的角度值，角度以弧度为单位。示例如下：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        PI = 3.14159265
        x = -10
        y = 10
        result = atan2 (y,x) * 180 / PI;

        printf "The arc tangent for (x=%f, y=%f) is %f degrees\n", x, y, result
      }'
  #+END_EXAMPLE

  执行上面的命令得到如下结果：

  #+BEGIN_EXAMPLE
      The arc tangent for (x=-10.000000, y=10.000000) is 135.000000 degrees
  #+END_EXAMPLE

***** cos(expr)
      该函数返回 expr 的余弦值， 输入参数以弧度为单位。示例如下：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        PI = 3.14159265
        param = 60
        result = cos(param * PI / 180.0);

        printf "The cosine of %f degrees is %f.\n", param, result
      }'
  #+END_EXAMPLE

  执行上面的命令得到如下的结果：

  #+BEGIN_EXAMPLE
      The cosine of 60.000000 degrees is 0.500000.
  #+END_EXAMPLE

***** exp(expr)
      此函数返回自然数 e 的 expr 次幂。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        param = 5
        result = exp(param);

        printf "The exponential value of %f is %f.\n", param, result
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      The exponential value of 5.000000 is 148.413159.
  #+END_EXAMPLE

***** int(expr)


  此函数返回数值 expr 的整数部分。示例如下：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        param = 5.12345
        result = int(param)

        print "Truncated value =", result
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Truncated value = 5
  #+END_EXAMPLE

***** log(expr)


  此函数计算 expr 自然对数。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        param = 5.5
        result = log (param)

        printf "log(%f) = %f\n", param, result
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      log(5.500000) = 1.704748
  #+END_EXAMPLE

***** rand


  rand 函数返回一个大于等于 0 小于 1 的随机数 N（0<= N < 1）。示例如下：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        print "Random num1 =" , rand()
        print "Random num2 =" , rand()
        print "Random num3 =" , rand()
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Random num1 = 0.237788
      Random num2 = 0.291066
      Random num3 = 0.845814
  #+END_EXAMPLE

***** sin(expr)


  正弦函数返回角度 expr 的正弦值，角度以弧度为单位。示例如下：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        PI = 3.14159265
        param = 30.0
        result = sin(param * PI /180)

        printf "The sine of %f degrees is %f.\n", param, result
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      The sine of 30.000000 degrees is 0.500000.
  #+END_EXAMPLE

***** sqrt(expr)


  此函数计算 expr 的平方根。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        param = 1024.0
        result = sqrt(param)

        printf "sqrt(%f) = %f\n", param, result
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      sqrt(1024.000000) = 32.000000
  #+END_EXAMPLE

***** srand([expr])


  此函数使用种子值生成随机数，数值　expr 作为随机数生成器的种子值。如果没有指定 expr 的值则函数默认使用当前系统时间作为种子值。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
        param = 10

        printf "srand() = %d\n", srand()
        printf "srand(%d) = %d\n", param, srand(param)
      }'
  #+END_EXAMPLE

  执行上面的命令得到如下的结果：

  #+BEGIN_EXAMPLE
      srand() = 1
      srand(10) = 1417959587
  #+END_EXAMPLE

**** 字符串函数


  AWK 提供了下面所示的字符串操作函数：

***** asort(arr,[, d [,how] ])


  asort 函数使用 GAWK 值比较的一般规则排序 arr 中的内容，然后用以 1 开始的有序整数替换排序内容的索引。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          arr[0] = "Three"
          arr[1] = "One"
          arr[2] = "Two"

          print "Array elements before sorting:"
          for (i in arr) {
              print arr[i]
          }

          asort(arr)

          print "Array elements after sorting:"
          for (i in arr) {
              print arr[i]
          }
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Array elements before sorting:
      Three
      One
      Two
      Array elements after sorting:
      One
      Three
      Two
  #+END_EXAMPLE

***** asorti(arr,[, d [,how] ])


  asorti 函数的行为与 asort 函数的行为很相似，二者的差别在于 aosrt 对数组的值排序，而 asorti 对数组的索引排序。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          arr["Two"] = 1
          arr["One"] = 2
          arr["Three"] = 3

          asorti(arr)

          print "Array indices after sorting:"
          for (i in arr) {
              print arr[i]
          }
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Array indices after sorting:
      One
      Three
      Two
  #+END_EXAMPLE

***** gsub(regx,sub, string)


  gsub 是全局替换( global substitution )的缩写。它将出现的子串（sub）替换为 regx。第三个参数 string 是可选的，默认值为 $0，表示在整个输入记录中搜索子串。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "Hello, World"

          print "String before replacement = " str

          gsub("World", "Jerry", str)

          print "String after replacement = " str
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      String before replacement = Hello, World
      String after replacement = Hello, Jerry
  #+END_EXAMPLE

***** index(str,sub)


  index 函数用于检测字符串 sub 是否是 str 的子串。如果 sub 是 str 的子串，则返回子串 sub 在字符串 str 的开始位置；若不是其子串，则返回 0。str 的字符位置索引从 1 开始计数。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "One Two Three"
          subs = "Two"

          ret = index(str, subs)

          printf "Substring \"%s\" found at %d location.\n", subs, ret
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Substring "Two" found at 5 location.
  #+END_EXAMPLE

***** length(str)


  length 函数返回字符串的长度。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "Hello, World !!!"

          print "Length = ", length(str)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Length = 16
  #+END_EXAMPLE

***** match(str, regex)


  match 返回正则表达式在字符串 str 中第一个最长匹配的位置。如果匹配失败则返回0。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "One Two Three"
          subs = "Two"

          ret = match(str, subs)

          printf "Substring \"%s\" found at %d location.\n", subs, ret
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Substring "Two" found at 5 location.
  #+END_EXAMPLE

***** split(str, arr,regex)


  split 函数使用正则表达式 regex 分割字符串 str。分割后的所有结果存储在数组 arr 中。如果没有指定 regex 则使用 FS 切分。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "One,Two,Three,Four"

          split(str, arr, ",")

          print "Array contains following values"

          for (i in arr) {
              print arr[i]
          }
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Array contains following values
      One
      Two
      Three
      Four
  #+END_EXAMPLE

***** sprintf(format,expr-list)


  sprintf 函数按指定的格式（ format ）将参数列表 expr-list 构造成字符串然后返回。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = sprintf("%s", "Hello, World !!!")

          print str
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Hello, World !!!
  #+END_EXAMPLE

***** strtonum(str)


  strtonum 将字符串 str 转换为数值。 如果字符串以 0 开始，则将其当作十进制数；如果字符串以 0x 或 0X 开始，则将其当作十六进制数；否则，将其当作浮点数。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          print "Decimal num = " strtonum("123")
          print "Octal num = " strtonum("0123")
          print "Hexadecimal num = " strtonum("0x123")
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Decimal num = 123
      Octal num = 83
      Hexadecimal num = 291
  #+END_EXAMPLE

***** sub(regex,sub,string)


  sub 函数执行一次子串替换。它将第一次出现的子串用 regex 替换。第三个参数是可选的，默认为 $0。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "Hello, World"

          print "String before replacement = " str

          sub("World", "Jerry", str)

          print "String after replacement = " str
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      String before replacement = Hello, World
      String after replacement = Hello, Jerry
  #+END_EXAMPLE

***** substr(str, start, l)


  substr 函数返回 str 字符串中从第 start 个字符开始长度为 l 的子串。如果没有指定 l 的值，返回 str 从第 start 个字符开始的后缀子串。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "Hello, World !!!"
          subs = substr(str, 1, 5)

          print "Substring = " subs
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Substring = Hello
  #+END_EXAMPLE

***** tolower(str)


  此函数将字符串 str 中所有大写字母转换为小写字母然后返回。注意，字符串 str 本身并不被改变。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "HELLO, WORLD !!!"

          print "Lowercase string = " tolower(str)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Lowercase string = hello, world !!!
  #+END_EXAMPLE

***** toupper(str)


  此函数将字符串 str 中所有小写字母转换为大写字母然后返回。注意，字符串 str 本身不被改变。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          str = "hello, world !!!"

          print "Uppercase string = " toupper(str)
      }'
  #+END_EXAMPLE

  执行上面命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Uppercase string = HELLO, WORLD !!!
  #+END_EXAMPLE

**** 时间函数


  AWK 提供了如下的内置时间函数：

***** systime


  此函数返回从 Epoch 以来到当前时间的秒数（在 POSIX 系统上，Epoch 为1970-01-01 00:00:00 UTC）。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          print "Number of seconds since the Epoch = " systime()
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Number of seconds since the Epoch = 1418574432
  #+END_EXAMPLE

***** mktime(dataspec)


  此函数将字符串 dataspec 转换为与 systime 返回值相似的时间戳。 dataspec 字符串的格式为 YYYY MM DD HH MM SS。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          print "Number of seconds since the Epoch = " mktime("2014 12 14 30 20 10")
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Number of seconds since the Epoch = 1418604610
  #+END_EXAMPLE

***** strftime([format [, timestamp[, utc-flag]]])


  此函数根据 format 指定的格式将时间戳 timestamp 格式化。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          print strftime("Time = %m/%d/%Y %H:%M:%S", systime())
      }'
  #+END_EXAMPLE

  执行上面的的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Time = 12/14/2014 22:08:42
  #+END_EXAMPLE

  下面是 AWK 支持的不同的日期格式说明：

  | SN   | 描述                                                                                                                                                                                                                                                                                                               |
  |------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | %a   | 星期缩写(Mon-Sun)。                                                                                                                                                                                                                                                                                                |
  | %A   | 星期全称（Monday-Sunday）。                                                                                                                                                                                                                                                                                        |
  | %b   | 月份缩写（Jan）。                                                                                                                                                                                                                                                                                                  |
  | %B   | 月份全称（January）。                                                                                                                                                                                                                                                                                              |
  | %c   | 本地日期与时间。                                                                                                                                                                                                                                                                                                   |
  | %C   | 年份中的世纪部分，其值为年份整除100。                                                                                                                                                                                                                                                                              |
  | %d   | 十进制日期(01-31)                                                                                                                                                                                                                                                                                                  |
  | %D   | 等价于 %m/%d/%y.                                                                                                                                                                                                                                                                                                   |
  | %e   | 日期，如果只有一位数字则用空格补齐                                                                                                                                                                                                                                                                                 |
  | %F   | 等价于 %Y-%m-%d，这也是 ISO 8601 标准日期格式。                                                                                                                                                                                                                                                                    |
  | %g   | ISO8610 标准周所在的年份模除 100（00-99)。比如，1993 年 1 月 1 日属于 1992 年的第 53 周。所以，虽然它是 1993 年第 1 天，但是其　ISO8601 标准周所在年份却是 1992。同样，尽管 1973 年 12 月 31 日属于 1973 年但是它却属于 1994 年的第一周。所以 1973 年 12 月 31 日的 ISO8610　标准周所在的年是 1974 而不是 1973。   |
  | %G   | ISO 标准周所在年份的全称。                                                                                                                                                                                                                                                                                         |
  | %h   | 等价于 %b.                                                                                                                                                                                                                                                                                                         |
  | %H   | 用十进制表示的 24 小时格式的小时(00-23)                                                                                                                                                                                                                                                                            |
  | %I   | 用十进制表示的 12 小时格式的小时（00-12）                                                                                                                                                                                                                                                                          |
  | %j   | 一年中的第几天（001-366）                                                                                                                                                                                                                                                                                          |
  | %m   | 月份（01-12）                                                                                                                                                                                                                                                                                                      |
  | %M   | 分钟数（00-59)                                                                                                                                                                                                                                                                                                     |
  | %n   | 换行符 (ASCII LF)                                                                                                                                                                                                                                                                                                  |
  | %p   | 十二进制表示法（AM/PM）                                                                                                                                                                                                                                                                                            |
  | %r   | 十二进制表示法的时间（等价于 %I:%M:%S %p）。                                                                                                                                                                                                                                                                       |
  | %R   | 等价于 %H:%M。                                                                                                                                                                                                                                                                                                     |
  | %S   | 时间的秒数值（00-60）                                                                                                                                                                                                                                                                                              |
  | %t   | 制表符 (tab)                                                                                                                                                                                                                                                                                                       |
  | %T   | 等价于 %H:%M:%S。                                                                                                                                                                                                                                                                                                  |
  | %u   | 以数字表示的星期(1-7),1 表示星期一。                                                                                                                                                                                                                                                                               |
  | %U   | 一年中的第几个星期（第一个星期天作为第一周的开始），00-53                                                                                                                                                                                                                                                          |
  | %V   | 一年中的第几个星期（第一个星期一作为第一周的开始），01-53。                                                                                                                                                                                                                                                        |
  | %w   | 以数字表示的星期（0-6），0表示星期日 。                                                                                                                                                                                                                                                                            |
  | %W   | 十进制表示的一年中的第几个星期（第一个星期一作为第一周的开始），00-53。                                                                                                                                                                                                                                            |
  | %x   | 本地日期表示                                                                                                                                                                                                                                                                                                       |
  | %X   | 本地时间表示                                                                                                                                                                                                                                                                                                       |
  | %y   | 年份模除 100。                                                                                                                                                                                                                                                                                                     |
  | %Y   | 十进制表示的完整年份。                                                                                                                                                                                                                                                                                             |
  | %z   | 时区，表示格式为+HHMM（例如，格式要求生成的 RFC 822或者 RFC 1036 时间头）                                                                                                                                                                                                                                          |
  | %Z   | 时区名称或缩写，如果时区待定则无输出。                                                                                                                                                                                                                                                                             |

**** 位操作函数


  AWK 提供了如下的内置的位操作函数：

***** and


  执行位与操作。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          num1 = 10
          num2 = 6

          printf "(%d AND %d) = %d\n", num1, num2, and(num1, num2)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      (10 AND 6) = 2
  #+END_EXAMPLE

***** compl


  按位求补。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          num1 = 10

          printf "compl(%d) = %d\n", num1, compl(num1)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      compl(10) = 9007199254740981
  #+END_EXAMPLE

***** lshift


  左移位操作。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          num1 = 10

          printf "lshift(%d) by 1 = %d\n", num1, lshift(num1, 1)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      lshift(10) by 1 = 20
  #+END_EXAMPLE

***** rshift


  向右移位操作。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          num1 = 10

          printf "rshift(%d) by 1 = %d\n", num1, rshift(num1, 1)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      rshift(10) by 1 = 5
  #+END_EXAMPLE

***** or


  按位或操作。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          num1 = 10
          num2 = 6

          printf "(%d OR %d) = %d\n", num1, num2, or(num1, num2)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      (10 OR 6) = 14
  #+END_EXAMPLE

***** xor


  按位异或操作。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          num1 = 10
          num2 = 6

          printf "(%d XOR %d) = %d\n", num1, num2, xor(num1, num2)
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      (10 bitwise xor 6) = 12
  #+END_EXAMPLE

**** 其它函数


  其它函数中主要包括:

***** close(expr)


  关闭管道的文件。

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          cmd = "tr [a-z] [A-Z]"
          print "hello, world !!!" |& cmd
          close(cmd, "to")
          cmd |& getline out
          print out;
          close(cmd);
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      HELLO, WORLD !!!
  #+END_EXAMPLE

  脚本的内容看上去很神秘吗？让我们来揭开它神秘的面纱。

  - 第一条语句 cmd = "tr [a-z] [A-Z]" 在　AWK 中建立了一个双向的通信通道。
  - 第二条语句 print 为 tr 命令提供输入。&| 表示双向通信。
  - 第三条语句 close(cmd, "to") 完成执行后关闭 to 进程。
  - 第四条语句 cmd |& getline out 使用 getline 函数将输出存储到 out 变量中。
  - 接下来的输出语句打印输出的内容，最后 close 函数关闭 cmd。

***** delete


  delete 被用于从数组中删除元素。下面的例子演示了如何使用 delete：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          arr[0] = "One"
          arr[1] = "Two"
          arr[2] = "Three"
          arr[3] = "Four"

          print "Array elements before delete operation:"
          for (i in arr) {
              print arr[i]
          }

          delete arr[0]
          delete arr[1]

          print "Array elements after delete operation:"
          for (i in arr) {
              print arr[i]
          }
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Array elements before delete operation:
      One
      Two
      Three
      Four

      Array elements after delete operation:
      Three
      Four
  #+END_EXAMPLE

***** exit


  该函数终止脚本执行。它可以接受可选的参数 expr 传递 AWK 返回状态。示例如下：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN {
          print "Hello, World !!!"

          exit 10

          print "AWK never executes this statement."
      }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Hello, World !!!
  #+END_EXAMPLE

***** flush


  flush 函数用于刷新打开文件或管道的缓冲区。 使用方法如下：

  #+BEGIN_EXAMPLE
      fflush([output-expr])
  #+END_EXAMPLE

  如果没有提供 output-expr，fflush 将刷新标准输出。若 output-epxr 是空字符串 ("")，fflush 将刷新所有打开的文件和管道。

***** getline


  getline 函数读入下一行。示例中使用 getline 从文件 marks.txt 中读入一行并输出：

  #+BEGIN_EXAMPLE
      [jerry]$ awk '{getline; print $0}' marks.txt 
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      2)  Rahul   Maths   90
      4)  Kedar   English 85
      5)  Hari    History 89
  #+END_EXAMPLE

  脚本看似工作正常，但是第一行去哪儿了呢？让我们理一下整个过程。刚启动时，AWK 从文件 marks.txt 中读入一行存储到变量 $0 中。在下一条语句中，我们使用 getline 读入下一行。 因此 AWK 读入第二行并存储到 $0 中。最后，AWK 使用 print 输出第二行的内容。这个过程一直到文件结束。

***** next


  next 停止处理当前记录，并且进入到下一条记录的处理过程。下面的例子中，当模式串匹配成功后程序并不执行任何操作：

  #+BEGIN_EXAMPLE
      [jerry]$ awk '{if ($0 ~/Shyam/) next; print $0}' marks.txt
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      1)  Amit    Physics 80
      2)  Rahul   Maths   90
      4)  Kedar   English 85
      5)  Hari    History 89
  #+END_EXAMPLE

***** nextfile


  nextfile 停止处理当前文件，从下一个文件第一个记录开始处理。下面的的例子中，匹配成功时停止处理第一个文件转而处理第二个文件：\\
  首先创建两个文件。 file1.txt 内容如下:

  #+BEGIN_EXAMPLE
      file1:str1
      file1:str2
      file1:str3
      file1:str4
  #+END_EXAMPLE

  文件 file2.txt 内容如下：

  #+BEGIN_EXAMPLE
      file2:str1
      file2:str2
      file2:str3
      file2:str4
  #+END_EXAMPLE

  现在我们来测试 nextfile 函数。

  #+BEGIN_EXAMPLE
      [jerry]$ awk '{ if ($0 ~ /file1:str2/) nextfile; print $0 }' file1.txt file2.txt
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      file1:str1
      file2:str1
      file2:str2
      file2:str3
      file2:str4
  #+END_EXAMPLE

***** return


  return 用于从用户自定义的函数中返回值。请注意，如果没有指定返回值，那么的返回值是未定义的。下面的例子演示了 return 的使用方法：\\
  首先，创建文件 functions.awk，内容如下：

  #+BEGIN_EXAMPLE
      function addition(num1, num2)
      {
          result = num1 + num2

          return result
      }

      BEGIN {
          res = addition(10, 20)
          print "10 + 20 = " res
      }
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      10 + 20 = 30
  #+END_EXAMPLE

***** system


  system 函数可以执行特定的命令然后返回其退出状态。返回值为 0 表示命令执行成功；非 0 表示命令执行失败。下面的示例中执行 Date 显示当前的系统时间，然后输出命令的返回状态：

  #+BEGIN_EXAMPLE
      [jerry]$ awk 'BEGIN { ret = system("date"); print "Return value = " ret }'
  #+END_EXAMPLE

  执行上面的命令可以得到如下的结果：

  #+BEGIN_EXAMPLE
      Sun Dec 21 23:16:07 IST 2014
      Return value = 0
  #+END_EXAMPLE
