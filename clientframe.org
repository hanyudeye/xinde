#+TITLE: 客户端框架，开发高性能客户端

* 客户端
** 界面内容 [[file:html.org][html]] 技术 (动态 静态)
                         ->  文字
( 静态显示 )      -> 图片
                          ->  动画
                          

( 动态与服务器交互 )   -> 表单

** 界面样式 [[file:css.org][css]]
** 界面事件处理  脚本语言 [[file:javascript.org][js]]
* jquery ( js 封装库)
** 使用库
   <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.js"></script>
** 节点选择器  ( DOM 文档树操作,同 css )
   jQuery( "*" )
   jQuery( ".class" )
   jQuery( "element" )
   jQuery( "#id" )
   jQuery( "selector1, selector2, selectorN" )  多个选择

*** 表达式查找
    jQuery.find(expr)	不会有初始集合中的内容
    jQuery.filter(expr)	从初始的 jQuery 对象集合中筛选出一部分
    $("p").find("span");//是从元素 p 的后代开始找，等于$("p span")
*** this 对象
    在任何事件内部，this 引用的都是 Dom 对象
    在任何插件内部，this 引用的都是当前的 jquery 对象
    在$(…).each 方法中，this 引用的都是 Dom 或正被遍历的元素对象
   
    在 ajax 事件中，this 默认指向的是调用本次 AJAX 请求时传递的 options 参数，可以通过设
    定 ajax options 的 context 参数进行修改;
   
** 节点属性 
*** 属性值
    $(…).attr	属性值
    $(…).prop	访问 html 规范定义的属性

    <input id="chk1" type="checkbox" />是否可见
    <input id="chk2" type="checkbox" checked="checked" />是否可见
    分别用 prop 和 attr 的操作结果如下：
    $("#chk1").prop("checked") == false
    $("#chk2").prop("checked") == true

    $("#chk1").attr("checked") == undefined
    $("#chk2").attr("checked") == "checked"
*** 节点漫游
    $.parent(expr)	找父元素
    $.parents(expr)	找到所有祖先元素，不限于父元素
    $.children(expr)	查找所有子元素，只会找到直接的孩子节点，不会返回所有子孙
    $.prev()	查找上一个兄弟节点，不是所有的兄弟节点
    $.prevAll()	查找所有之前的兄弟节点
    $.next()	查找下一个兄弟节点，不是所有的兄弟节点
    $.nextAll()	查找所有之后的兄弟节点
    $.siblings()	查找兄弟节点，不分前后
*** 节点定义事件
    基本只需要使用 on、once、off 三个即可 
    尽可能使用命名空间（bootstrap 比较常见）
   
    $("#main").on("click.test",function(){
    this;//指向当前的 Dom 元素
    });
   
 灵活运用事件委托，利用时间冒泡机制，将事件绑定到祖先元素
 $("#parent").on("click.test",function(event){
     var $target=$(event.target);
     if($target.is("#child1")){//是否为 child1
     //...
     }
     if($target.is("#child2")){//是否为 child2
     //...
     }
     return false;//=event.stopPropagation();event.preventDefault();
 });

 使用命名函数代替匿名函数可以解决事件重复绑定问题，因为同一个命名函数绑定同一个事
 件只会绑定一次。
*** 动态创建节点
    #+begin_src js
      $('<input />',{
          type:"checkbox",
          name:"cbox",
          val:"1",
          checked:"checked"
      }).appendTo("body");
    #+end_src
*** 遍历
    $.each(data,function(index,item){})
    $.each(data,function(k,v,object){})
*** 表单对象
    //用 Form 传递表单数据
    var formData=new FormData();//方式 1，new 一个 FormData
    formData.append("username","张三");

    var form=document.getElementById("myForm");
    var formData=new FormData(form);//方式 2，根据 Form 创建 FormData
    formData.append(...);//添加额外内容
    //xhr.open("POST",form.action);
    //xhr.send(formData);//使用 xhr 发送数据

    $.ajax({//使用 jquery 发送数据
    url:"example.php",
    type:"POST",
    data=formData,
    processData:false,//告诉 jquery 不要处理待发送的数据
    contentType:false//告诉 jquery 不要设置 Content-Type 请求头，默认为“application/x-www-form-urlencoded”
    });
** Dom 对象 与 jQuery 对象转换
   var $v =$("#v");    //jQuery 对象
   var v=$v[0];       //DOM 对象 
   var v=$v.get(0);   //DOM 对象 

** 实用 jQuery 代码
*** 1. 创建一个嵌套的过滤器
 <span class="pun">.filter(":not(:has(.selected))")
  //去掉所有不包含 class 为.selected 的元素
 </span>
*** 2. 重用你的元素查询
     var allItems = $("div.item");  
     var keepList = $("div#container1 div.item");
     $(formToLookAt + " input:checked").each(function() {     keepListkeepList = keepList.filter("." + $(this).attr("name")); });
*** 3. 使用 has()来判断一个元素是否包含特定的 class 或者元素
 $("input").has(".email").addClass("email_icon");
*** 4. 使用 jQuery 切换样式
     //Look for the media-type you wish to switch then set the href to your new style sheet  
     $('link[media='screen']').attr('href', 'Alternative.css');
*** 5. 限制选择的区域
    //Where possible, pre-fix your class names with a tag name  
     //so that jQuery doesn't have to spend more time searching  
     //for the element you're after. Also remember that anything  
     //you can do to be more specific about where the element is  
     //on your page will cut down on execution/search times  
     var in_stock = $('#shopping_cart_items input.is_in_stock');

     <ul id="shopping_cart_items">  
     <li>  
     <input value="Item-X" name="item" class="is_in_stock" type="radio"> Item X</li>  
     <li>  
     <input value="Item-Y" name="item" class="3-5_days" type="radio"> Item Y</li>  
     <li>  
     <input value="Item-Z" name="item" class="unknown" type="radio"> Item Z</li>  
     </ul>
*** 6. 如何正确使用 ToggleClass
    //Toggle class allows you to add or remove a class  
     //from an element depending on the presence of that  
     //class. Where some developers would use:  
     a.hasClass('blueButton') ? a.removeClass('blueButton') : a.addClass('blueButton');  
     //toggleClass allows you to easily do this using  
     a.toggleClass('blueButton');
*** 7. 设置 IE 指定的功能
         if ($.browser.msie) { // Internet Explorer is a sadist. }
*** 8. 使用 jQuery 来替换一个元素
        $('#thatdiv').replaceWith('fnuh');
*** 9. 验证一个元素是否为空
        if ($('#keks').html()) { //Nothing found ;}
*** 10. 在无序的 set 中查找一个元素的索引
           $("ul > li").click(function () {  
         var index = $(this).prevAll().length;  
     });
*** 11. 绑定一个函数到一个事件
 $('#foo').bind('click', function() {
   alert('User clicked on "foo."'); 
 });
*** 12. 添加 HTML 到一个元素
 $('#lal').append('sometext');
*** 13. 创建元素时使用对象来定义属性
 var e = $("", { href: "#", class: "a-class another-class", title: "..." });
*** 14. 使用过滤器过滤多属性
 //This precision-based approached can be useful when you use  
 //lots of similar input elements which have different types  
 var elements = $('#someid input[type=sometype][value=somevalue]').get();
*** 15. 使用 jQuery 预加载图片
 jQuery.preloadImages = function() { for(var i = 0; i').attr('src', arguments[i]); } };  
 // Usage $.preloadImages('image1.gif', '/path/to/image2.png', 'some/image3.jpg');
*** 16. 设置任何匹配一个选择器的事件处理程序
     $('button.someClass').live('click', someFunction);
       //Note that in jQuery 1.4.2, the delegate and undelegate options have been
       //introduced to replace live as they offer better support for context
         //For example, in terms of a table where before you would use..
       // .live()
       $("table").each(function(){
         $("td", this).live("hover", function(){
         $(this).toggleClass("hover");
         });
       });
       //Now use..
       $("table").delegate("td", "hover", function(){
       $(this).toggleClass("hover");
     });
*** 17. 找到被选择到的选项(option)元素
 $('#someElement').find('option:selected');
*** 18. 隐藏包含特定值的元素
 $("p.value:contains('thetextvalue')").hide();
*** 19. 自动的滚动到页面特定区域
     jQuery.fn.autoscroll = function(selector) {
       $('html,body').animate(
         {scrollTop: $(selector).offset().top},
         500
       );
     }
     //Then to scroll to the class/area you wish to get to like this:
     $('.area_name').autoscroll();
*** 20. 检测各种浏览器
     Detect Safari (if( $.browser.safari)),
     Detect IE6 and over (if ($.browser.msie && $.browser.version > 6 )),
     Detect IE6 and below (if ($.browser.msie && $.browser.version <= 6 )),
     Detect FireFox 2 and above (if ($.browser.mozilla && $.browser.version >= '1.8' ))
*** 21. 替换字符串中的单词
     var el = $('#id');
     el.html(el.html().replace(/word/ig, ''));
*** 22. 关闭右键的菜单
  $(document).bind('contextmenu',function(e){ return false; });
*** 23. 定义一个定制的选择器
     $.expr[':'].mycustomselector = function(element, index, meta, stack){
     // element- is a DOM element
     // index - the current loop index in stack
     // meta - meta data about your selector
     // stack - stack of all elements to loop
     // Return true to include current element
     // Return false to explude current element
     };
     // Custom Selector usage:
     $('.someClasses:test').doSomething();
*** 24. 判断一个元素是否存在
 if ($('#someDiv').length) {//hooray!!! it exists...}
*** 25. 使用 jQuery 判断鼠标的左右键点击
     $("#someelement").live('click', function(e) {
         if( (!$.browser.msie && e.button == 0) || ($.browser.msie && e.button == 1) ) {
             alert("Left Mouse Button Clicked");
         }
         else if(e.button == 2)
             alert("Right Mouse Button Clicked");
     });
*** 26. 显示或者删除输入框的缺省值
     //This snippet will show you how to keep a default value
     //in a text input field for when a user hasn't entered in
     //a value to replace it
     swap_val = [];
     $(".swap").each(function(i){
         swap_val[i] = $(this).val();
         $(this).focusin(function(){
             if ($(this).val() == swap_val[i]) {
                 $(this).val("");
             }
         }).focusout(function(){
             if ($.trim($(this).val()) == "") {
                 $(this).val(swap_val[i]);
             }
         });
     });
 1
  <input class="swap" type="text" value="Enter Username here.." />
*** 27. 指定时间后自动隐藏或者关闭元素(1.4 支持）
     //Here's how we used to do it in 1.3.2 using setTimeout
     setTimeout(function() {
       $('.mydiv').hide('blind', {}, 500)
     }, 5000);
     //And here's how you can do it with 1.4 using the delay() feature (this is a lot like sleep)
     $(".mydiv").delay(5000).hide('blind', {}, 500);
*** 28. 动态创建元素到 DOM
     var newgbin1Div = $('');
     newgbin1Div.attr('id','gbin1.com').appendTo('body');
*** 29. 限制 textarea 的字符数量
     jQuery.fn.maxLength = function(max){
       this.each(function(){
         var type = this.tagName.toLowerCase();
         var inputType = this.type? this.type.toLowerCase() : null;
         if(type == "input" && inputType == "text" || inputType == "password"){
           //Apply the standard maxLength
           this.maxLength = max;
         }
         else if(type == "textarea"){
           this.onkeypress = function(e){
             var ob = e || event;
             var keyCode = ob.keyCode;
             var hasSelection = document.selection? document.selection.createRange().text.length > 0 : this.selectionStart != this.selectionEnd;
             return !(this.value.length >= max && (keyCode > 50 || keyCode == 32 || keyCode == 0 || keyCode == 13) && !ob.ctrlKey && !ob.altKey && !hasSelection);
           };
           this.onkeyup = function(){
             if(this.value.length > max){
               this.value = this.value.substring(0,max);
             }
           };
         }
       });
     };
     //Usage:
     $('#gbin1textarea').maxLength(500);
*** 30. 为函数创建一个基本测试用例
     //Separate tests into modules.
     module("Module B");
     test("some other gbin1.com test", function() {
       //Specify how many assertions are expected to run within a test.
       expect(2);
       //A comparison assertion, equivalent to JUnit's assertEquals.
       equals( true, false, "failing test" );
       equals( true, true, "passing test" );
     });
*** 31. 使用 jQuery 克隆元素
 var cloned = $('#gbin1div').clone();
*** 32. 测试一个元素在 jQuery 中是否可见
 if($(element).is(':visible') == 'true') { //The element is Visible }
*** 33. 元素屏幕居中
     jQuery.fn.center = function () {
       this.css('position','absolute');
       this.css('top', ( $(window).height() - this.height() ) / +$(window).scrollTop() + 'px');
       this.css('left', ( $(window).width() - this.width() ) / 2+$(window).scrollLeft() + 'px');return this;
     }
     //Use the above function as: $('#gbin1div').center();
 34. 使用特定名字的元素对应的值生成一个数组

 1
 2
 3
 4
     var arrInputValues = new Array();
     $("input[name='table[]']").each(function(){
          arrInputValues.push($(this).val());
     });
 35. 剔除元素中的 HTML

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
 12
 13
     (function($) {
         $.fn.stripHtml = function() {
             var regexp = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
             this.each(function() {
                 $(this).html(
                     $(this).html().replace(regexp,"")
                 );
             });
             return $(this);
         }
     })(jQuery);
     //usage:
     $('p').stripHtml();
 36. 使用 closest 来得到父元素

 1
 $('#searchBox').closest('div');
 37. 使用 firebug 来记录 jQuery 事件

 1
 2
 3
 4
 5
 6
 7
 8
     // Allows chainable logging
     // Usage: $('#someDiv').hide().log('div hidden').addClass('someClass');
     jQuery.log = jQuery.fn.log = function (msg) {
           if (console){
              console.log("%s: %o", msg, this);
           }
           return this;
     };
 38. 点击链接强制弹出新窗口

 1
 2
 3
 4
 5
     jQuery('a.popup').live('click', function(){
       newwindow=window.open($(this).attr('href'),'','height=200,width=150');
       if (window.focus) {newwindow.focus()}
       return false;
     });
 39. 点击链接强制打开新标签页

 1
 2
 3
 4
 5
     jQuery('a.newTab').live('click', function(){
       newwindow=window.open($(this).href);
       jQuery(this).target = "_blank";
       return false;
     });
 40. 使用 siblings()来处理同类元素

 1
 2
 3
 4
 5
 6
 7
 8
 9
     // Rather than doing this
     $('#nav li').click(function(){
         $('#nav li').removeClass('active');
         $(this).addClass('active');
     });
     // Do this instead
     $('#nav li').click(function(){
         $(this).addClass('active').siblings().removeClass('active');
     });
 41. 选择或者不选页面上全部复选框

 1
 2
 3
 4
 5
     var tog = false; // or true if they are checked on load
     $('a').click(function() {
         $("input[type=checkbox]").attr("checked",!tog);
         tog = !tog;
     });
 42. 基于输入文字过滤页面元素

 1
 2
 3
 4
 5
     //If the value of the element matches that of the entered text
     //it will be returned
     $('.gbin1Class').filter(function() {
         return $(this).attr('value') == $('input#gbin1Id').val() ;
      })
 43. 取得鼠标的 X 和 Y 坐标

 1
 2
 3
 4
 5
 6
     $(document).mousemove(function(e){
     $(document).ready(function() {
     $().mousemove(function(e){
     $('#XY').html("Gbin1 X Axis : " + e.pageX + " | Gbin1 Y Axis " + e.pageY);
     });
     });
 44. 使得整个列表元素(LI)可点击

 1
 2
 3
     $("ul li").click(function(){
       window.location=$(this).find("a").attr("href"); return false;
     });
 GBin1 Link 1
 

 GBin1 Link 2
 

 

 GBin1 Link 3
 

 

 GBin1 Link 4
 

 

 45. 使用 jQuery 来解析 XML

 1
 2
 3
 4
 5
 6
 7
     function parseXml(xml) {
       //find every Tutorial and print the author
       $(xml).find("Tutorial").each(function()
       {
       $("#output").append($(this).attr("author") + "");
       });
     }
 46. 判断一个图片是否加载完全

 1
 2
 3
     $('#theGBin1Image').attr('src', 'image.jpg').load(function() {
     alert('This Image Has Been Loaded');
     });
 47. 使用 jQuery 命名事件

 1
 2
 3
 4
 5
 6
     //Events can be namespaced like this
     $('input').bind('blur.validation', function(e){
         // ...
     });
     //The data method also accept namespaces
     $('input').data('validation.isValid', true);
 48. 判断 cookie 是否激活或者关闭

 1
 2
 3
 4
 5
 6
 7
 8
     var dt = new Date();
     dt.setSeconds(dt.getSeconds() + 60);
     document.cookie = "cookietest=1; expires=" + dt.toGMTString();
     var cookiesEnabled = document.cookie.indexOf("cookietest=") != -1;
     if(!cookiesEnabled)
     {
       //cookies have not been enabled
     }
 49. 强制过期 cookie

 1
 2
 3
     var date = new Date();
     date.setTime(date.getTime() + (x * 60 * 1000));
     $.cookie('example', 'foo', { expires: date });
 50. 使用一个可点击的链接替换页面中所有 URL

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
 $.fn.replaceUrl = function() {
         var regexp = /((ftp|http|https)://(w+:{0,1}w*@)?(S+)(:[0-9]+)?(/|/([w#!:.?+=&%@!-/]))?)/gi;
         this.each(function() {
             $(this).html(
                 $(this).html().replace(regexp,'<a href="$1">$1</a>')
             );
         });
         return $(this);
     }
 //usage
 $('#GBin1div').replaceUrl();
 51: 在表单中禁用“回车键”

 大家可能在表单的操作中需要防止用户意外的提交表单，那么下面这段代码肯定非常有帮助：

 1
 2
 3
 4
 5
     $("#form").keypress(function(e) {
       if (e.which == 13) {
         return false;
       }
     });
 52: 清除所有的表单数据

 可能针对不同的表单形式，你需要调用不同类型的清楚方法，不过使用下面这个现成方法，绝对能让你省不少功夫。

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
     function clearForm(form) {
       // iterate over all of the inputs for the form
       // element that was passed in
       $(':input', form).each(function() {
         var type = this.type;
         var tag = this.tagName.toLowerCase(); // normalize case
         // it's ok to reset the value attr of text inputs,
         // password inputs, and textareas
         if (type == 'text' || type == 'password' || tag == 'textarea')
           this.value = "";
         // checkboxes and radios need to have their checked state cleared
         // but should *not* have their 'value' changed
         else if (type == 'checkbox' || type == 'radio')
           this.checked = false;
         // select elements need to have their 'selectedIndex' property set to -1
         // (this works for both single and multiple select elements)
         else if (tag == 'select')
           this.selectedIndex = -1;
       });
     };
 53: 将表单中的按钮禁用

 下面的代码对于 ajax 操作非常有用，你可以有效的避免用户多次提交数据，个人也经常使用：

 1
  $("#somebutton").attr("disabled", true);//禁用按钮
 1
     $("#submit-button").removeAttr("disabled");//启动按钮
 可能大家往往会使用.attr(‘disabled’,false);，不过这是不正确的调用。

 54: 输入内容后启用递交按钮
 这个代码和上面类似，都属于帮助用户控制表单递交按钮。使用这段代码后，递交按钮只有在用户输入指定内容后才可以启动。

 1
 2
 3
     $('#username').keyup(function() {
         $('#submit').attr('disabled', !$('#username').val()); 
     });
 55: 禁止多次递交表单
 多次递交表单对于 web 应用来说是个比较头疼的问题，下面的代码能够很好的帮助你解决这个问题：

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
 12
 13
 14
 15
     $(document).ready(function() {
       $('form').submit(function() {
         if(typeof jQuery.data(this, "disabledOnSubmit") == 'undefined') {
           jQuery.data(this, "disabledOnSubmit", { submited: true });
           $('input[type=submit], input[type=button]', this).each(function() {
             $(this).attr("disabled", "disabled");
           });
           return true;
         }
         else
         {
           return false;
         }
       });
     });
 56: 高亮显示目前聚焦的输入框标示
 有时候你需要提示用户目前操作的输入框，你可以使用下面代码高亮显示标示：

 1
 2
 3
 4
 5
     $("form :input").focus(function() {
       $("label[for='" + this.id + "']").addClass("labelfocus");
     }).blur(function() {
       $("label").removeClass("labelfocus");
     });
 57: 动态方式添加表单元素
 这个方法可以帮助你动态的添加表单中的元素，比如，input 等：

 1
 2
 3
 4
 5
     //change event on password1 field to prompt new input
     $('#password1').change(function() {
             //dynamically create new input and insert after password1
             $("#password1").append("<input id="password2" name="password2" type="text" />");
     });
 58: 自动将数据导入 selectbox 中

 下面代码能够使用 ajax 数据自动生成选择框的内容

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10
 11
     $(function(){
       $("select#ctlJob").change(function(){
         $.getJSON("/select.php",{id: $(this).val(), ajax: 'true'}, function(j){
           var options = '';
           for (var i = 0; i < j.length; i++) {
             options += '' + j[i].optionDisplay + '';
           }
           $("select#ctlPerson").html(options);
         })
       })
     })
 59: 判断一个复选框是否被选中

 1
 $('#checkBox').attr('checked');
 60: 使用代码来递交表单

 1
 $("#myform").submit();
 希望大家觉得这些 jQuery 代码会对你的开发有帮助，如果你也有类似的 jQuery 代码或者 jQuery 插件，欢迎一起分享！

 注：部分代码原文应该是英文的。但是看见转的几个链接已经打不开了。所以就这样吧。
* echarts
** 库地址
   前端模块加载 <script src="echarts.js"></script>
   <script src="http://echarts.baidu.com/build/dist/echarts.js"></script>
   npm install echarts
** 模板
   #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
       <head>
         <meta charset="utf-8">
         <title>ECharts</title>
         <!-- 引入 echarts.js -->
         <script src="echarts.min.js"></script>
       </head>
       <body>
         <!-- 为 ECharts 准备一个具备大小（宽高）的 Dom -->
         <div id="main" style="width: 600px;height:400px;"></div>
         <script type="text/javascript">
           // 基于准备好的 dom，初始化 echarts 实例
           var myChart = echarts.init(document.getElementById('main'));

           // 指定图表的配置项和数据
           var option = {
           title: {
           text: 'ECharts 入门示例'
           },
           tooltip: {},
           legend: {
           data:['销量']
           },
           xAxis: {
           data: ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]
           },
           yAxis: {},
           series: [{
           name: '销量',
           type: 'bar',
           data: [5, 20, 36, 10, 10, 20]
           }]
           };

           // 使用刚指定的配置项和数据显示图表。
           myChart.setOption(option);
         </script>
       </body>
     </html>
   #+END_SRC
** 图表类型 series
*** pie
*** line
*** bar
*** scatter
*** effectScatter
*** tree
*** radar
*** treemap
*** sunburst  阳光
*** boxplot
*** candlestick
*** heatmap
*** map
*** parallel
*** lines
*** graph
*** sankey
*** funnel
*** gauge
*** pictorialBar
*** themeRiver
*** custom
** 阴影的配置
   ECharts 中有一些通用的样式，诸如阴影、透明度、颜色、边框颜色、边框宽度等，这些样
   式一般都会在系列的 itemStyle 里设置。例如阴影的样式可以通过下面几个配置项设置：

   #+begin_src js
     itemStyle: {
         normal: {
             // 阴影的大小
             shadowBlur: 200,
             // 阴影水平方向上的偏移
             shadowOffsetX: 0,
             // 阴影垂直方向上的偏移
             shadowOffsetY: 0,
             // 阴影颜色
             shadowColor: 'rgba(0, 0, 0, 0.5)'
         }
     }
   #+end_src
** 异步数据加载和更新
   ECharts 中实现异步数据的更新非常简单，在图表初始化后不管任何时候只要通过
   jQuery 等工具异步获取数据后通过 setOption 填入数据和配置项就行。
   
   #+BEGIN_SRC javascript
     var myChart = echarts.init(document.getElementById('main'));

     $.get('data.json').done(function (data) {
         myChart.setOption({
             title: {
                 text: '异步数据加载示例'
             },
             tooltip: {},
             legend: {
                 data:['销量']
             },
             xAxis: {
                 data: ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]
             },
             yAxis: {},
             series: [{
                 name: '销量',
                 type: 'bar',
                 data: [5, 20, 36, 10, 10, 20]
             }]
         });
     });
   #+END_SRC
   或者先设置完其它的样式，显示一个空的直角坐标轴，然后获取数据后填入数据。
   #+BEGIN_SRC javascript
     var myChart = echarts.init(document.getElementById('main'));
     // 显示标题，图例和空的坐标轴
     myChart.setOption({
         title: {
             text: '异步数据加载示例'
         },
         tooltip: {},
         legend: {
             data:['销量']
         },
         xAxis: {
             data: []
         },
         yAxis: {},
         series: [{
             name: '销量',
             type: 'bar',
             data: []
         }]
     });

     // 异步加载数据
     $.get('data.json').done(function (data) {
         // 填入数据
         myChart.setOption({
             xAxis: {
                 data: data.categories
             },
             series: [{
                 // 根据名字对应到相应的系列
                 name: '销量',
                 data: data.data
             }]
         });
     });

   #+END_SRC
** loading 动画
   #+begin_src js
     myChart.showLoading();

     $.get('data.json').done(function (data) {
         myChart.hideLoading();
         myChart.setOption(...);
     });
   #+end_src
** 数据的动态更新
   #+BEGIN_SRC javascript
     var base = +new Date(2014, 9, 3);
     var oneDay = 24 * 3600 * 1000;
     var date = [];

     var data = [Math.random() * 150];
     var now = new Date(base);

     function addData(shift) {
         now = [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('-');
         date.push(now);
         data.push((Math.random() - 0.4) * 10 + data[data.length - 1]);
         if (shift) {
             date.shift();
             data.shift();
         }
         now = new Date(Date.parse(now) + 24 * 3600 * 1000);
     }

     for (var i = 1; i < 100; i++) {
         addData();
     }

     option = {
         xAxis: {
             type: 'category',
             boundaryGap: false,
             data: date
         },
         yAxis: {
             boundaryGap: [0, '50%'],
             type: 'value'
         },
         series: [
             {
                 name:'成交',
                 type:'line',
                 smooth:true,
                 symbol: 'none',
                 stack: 'a',
                 areaStyle: {
                     normal: {}
                 },
                 data: data
             }
         ]
     };

     app.timeTicket = setInterval(function () {
         addData(true);
         myChart.setOption({
             xAxis: {
                 data: date
             },
             series: [{
                 name:'成交',
                 data: data
             }]
         });
     }, 500);
   #+END_SRC
** [[http://echarts.baidu.com/tutorial.html#5%2520%25E5%2588%2586%25E9%2592%259F%25E4%25B8%258A%25E6%2589%258B%2520ECharts%0A][帮助]] 
* [[file:vuejs.org][单页 vuejs]]
* 移动 [[file:bootstrap.org][bootstrap]]
* [[file:angular.org][angular]]
* font awesome 图标 
** 库 
   #+begin_src html
     <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous">
   #+end_src
   
** 使用 
*** 引入 css
    
   <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css" integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt" crossorigin="anonymous">
    <nav>
    <i class="fa fa-heart"></i>
    </nav>
   

 <i class="fa fa-heart"></i>
*** 使用 WOFF 字体：

<style>
	.fa.fa-bars {
		font-size: 28px	;
		color:red;
		background: blue;
	}
	@font-face {
	font-family: FA;
	src: 
	url("./fonts/fontawesome-webfont.woff") format("woff");
	}
	.mytextwithicon {
    position:relative;
	}    
	.mytextwithicon:before {
		content: "\f0c9";  
	    font-family: FA;
	    font-size: 18px;
	    left:-5px;
	    position:absolute;
	    top:0;
	 }
</style>
<span class = "mytextwithicon"></span><br/>
<i class = "mytextwithicon"></i>
*** 颜色
    <i class="fas fa-stroopwafel fa-lg" style="color:Tomato"></i>
* 开发高性能客户端

