* spacemacs 
** 安装与配置
*** 配置环境变量 
    spacemacs/edit-env 
    ~/.spacemacs.d/.spacemacs.env
*** 配置文件 .spacemacs 
*** 键绑定
    (evil-leader/set-key "o y" 'copy-to-clipboard)
    全局绑定 会被模式绑定覆盖
     (global-set-key (kbd "C-]") 'forward-char)
     //被下面的覆盖了
     (define-key evil-insert-state-map (kbd "C-]") 'forward-char)
     //用前导键
  #+BEGIN_SRC emacs-lisp
    (spacemacs/set-leader-keys "C-]" 'forward-char)
    (spacemacs/set-leader-keys-for-major-mode 'emacs-lisp-mode "C-]" 'forward-char)
  #+END_SRC
*** 配置本地变量 SPC f v f
    
** 编码
   以某编码打开：M-x revert-buffer-with-coding-system RET
   插入字符 Ctrl-x 8 Enter 3bb Enter
** 导航
*** 快速跳转 通过 [[https://github.com/abo-abo/avy][avy]] 
    | ~SPC j b~   | 返回原来的地方 |
    | ~SPC j j~   | 跳到某个 char  |
    | ~SPC j w~   | 跳到某个  word |
    | ~SPC j l~   | 跳到某个  line |
**** 跳转链接 ace-link 
     | ~o~         | 默认模式 hinitiate ace link mode in =help-mode= and =info-mode= |

*** 增强功能绑定 [[https://github.com/tpope/vim-unimpaired][tpope’s vim-unimpaired]].
    | ~[ SPC~     | Insert space above               |
    | ~] SPC~     | Insert space below               |
    | ~[ b~       | Go to previous buffer            |
    | ~] b~       | Go to next buffer                |
    | ~[ f~       | Go to previous file in directory |
    | ~] f~       | Go to next file in directory     |
    | ~[ l~       | Go to the previous error         |
    | ~] l~       | Go to the next error             |
    | ~[ h~       | Go to the previous vcs hunk      |
    | ~] h~       | Go to the next vcs hunk          |
    | ~[ q~       | Go to the previous error         |
    | ~] q~       | Go to the next error             |
    | ~[ t~       | Go to the previous frame         |
    | ~] t~       | Go to the next frame             |
    | ~[ w~       | Go to the previous window        |
    | ~] w~       | Go to the next window            |
    | ~[ e~       | Move line up                     |
    | ~] e~       | Move line down                   |
    | ~[ p~       | Paste above current line         |
    | ~] p~       | Paste below current line         |
    | ~g p~       | Select pasted text               |

*** Jumping, Joining and Splitting
    The ~SPC j~ prefix is for jumping, joining and splitting.
*** 窗口操作 SPC w 
    黄金分割 golden-ratio
*** 缓存和文件　Buffers and Files
**** Buffers manipulation key bindings
     Buffer manipulation commands (start with ~b~):
**** 文件操作 SPC f 
**** 框架操作 Frame manipulation commands (start with ~F~): 
**** 配置文件操作 SPC f e
     Convenient key bindings are located under the prefix ~SPC f e~ to quickly
     navigate between =Emacs= and Spacemacs specific files.

*** 书签 SPC f b
    | ~C-d~       | delete the selected bookmark                 |
    | ~C-e~       | edit the selected bookmark                   |
    | ~C-f~       | toggle filename location                     |
    | ~C-o~       | open the selected bookmark in another window |

    To save a new bookmark, just type the name of the bookmark and press ~RET~.

*** 视图文档
  =doc-view-mode= is a built-in major mode to view DVI, PostScript (PS), PDF,
                 OpenDocument, and Microsoft Office documents.

| Key Binding | Description                              |
|-------------+------------------------------------------|
| ~/~         | search forward                           |
| ~?~         | search backward                          |
| ~+~         | enlarge                                  |
| ~-~         | shrink                                   |
| ~gg~        | go to first page                         |
| ~G~         | go to last page                          |
| ~gt~        | go to page number                        |
| ~h~         | previous page                            |
| ~H~         | adjust to height                         |
| ~j~         | next line                                |
| ~k~         | previous line                            |
| ~K~         | kill proc and buffer                     |
| ~l~         | next page                                |
| ~n~         | go to next search occurrence             |
| ~N~         | go to previous search occurrence         |
| ~P~         | fit page to window                       |
| ~r~         | revert                                   |
| ~W~         | adjust to width                          |
| ~C-d~       | scroll down                              |
| ~C-k~       | kill proc                                |
| ~C-u~       | scroll up                                |
| ~C-c C-c~   | toggle display text and image display    |
| ~C-c C-t~   | open new buffer with doc’s text contents |

** 查找 SPC s
*** 通过语义列出符号  SPC s j
** 编辑 
*** 文本操作 (start with ~x~)
*** 文本输入 (start with ~i~)
*** 数字加减 n
*** 选区 v
*** 缩放显示区域 (start with ~n~)
    | ~SPC n f~ | 显示函数            |
    | ~SPC n p~ | 显示 page           |
    | ~SPC n r~ | 显示　selected text |
    | ~SPC n w~ | 撤销，全部显示      |
*** 替换 
**** 可视化替换 iedit                                              :多行编辑:
     选中要替换的词，按 SPC s e
**** 选中替换 <>s//新词/               :多行编辑:
*** 文件重命名
    It is possible to batch rename files in a directory using =wdired= from an
    =helm= session:
    - browse for a directory using ~SPC f f~
    - enter =wdired= with ~C-c C-e~
    - edit the file names and use ~C-c C-c~ to confirm the changes
    - use ~C-c C-k~ to abort any changes
      
*** 注释 SPC c
    改变注释样式
    
    #+BEGIN_SRC emacs-lisp
      (add-hook 'c-mode-common-hook
                (lambda ()
                  ;; Preferred comment style
                  (setq comment-start "// "
                        comment-end "")))

    #+END_SRC
          
或者
    #+BEGIN_SRC emacs-lisp
      (defun my-c-mode-hook ()
        (c-set-style "bsd")
        (setq tab-width 4)
        (c-set-offset 'case-label '+)
        (setq c-basic-offset tab-width)
        (setq comment-start "//")
        (setq comment-end "")
        (setq comment-column 80))
      (add-hook 'c-mode-hook #'my-c-mode-hook)
#+END_SRC
*** 正则表达式
    Spacemacs uses the packages [[https://github.com/joddie/pcre2el][pcre2el]] to manipulate regular expressions. It is
    useful when working with =Emacs Lisp= buffers since it allows to easily converts
    =PCRE= (Perl Compatible RegExp) to Emacs RegExp or =rx=. It can also be used to
    “explain” a PCRE RegExp around point in =rx= form.

    The key bindings start with ~SPC x r~ and have the following mnemonic structure:
    - ~SPC x r <source> <target>~ convert from source to target
    - ~SPC x r~ do what I mean

    | Key Binding   | Function                                                                               |
    |---------------+----------------------------------------------------------------------------------------|
    | ~SPC x r /~   | Explain the regexp around point with =rx=                                              |
    | ~SPC x r '​~   | Generate strings given by a regexp given this list is finite                           |
    | ~SPC x r t~   | Replace regexp around point by the =rx= form or vice versa                             |
    | ~SPC x r x~   | Convert regexp around point in =rx= form  and display the result in the minibuffer     |
    | ~SPC x r c~   | Convert regexp around point to the other form and display the result in the minibuffer |
    | ~SPC x r e /~ | Explain Emacs Lisp regexp                                                              |
    | ~SPC x r e '​~ | Generate strings from Emacs Lisp regexp                                                |
    | ~SPC x r e p~ | Convert Emacs Lisp regexp to PCRE                                                      |
    | ~SPC x r e t~ | Replace Emacs Lisp regexp by =rx= form or vice versa                                   |
    | ~SPC x r e x~ | Convert Emacs Lisp regexp to =rx= form                                                 |
    | ~SPC x r p /~ | Explain PCRE regexp                                                                    |
    | ~SPC x r p '​~ | Generate strings from PCRE regexp                                                      |
    | ~SPC x r p e~ | Convert PCRE regexp to Emacs Lisp                                                      |
    | ~SPC x r p x~ | Convert PCRE to =rx= form                                                              |

    Deletion is configured to send deleted files to system trash.

    On OS X the =trash= program is required. It can be installed with [[https://brew.sh/][homebrew]] with
    the following command:

    #+BEGIN_SRC sh
      $ brew install trash
    #+END_SRC

    To disable the trash you can set the variable =delete-by-moving-to-trash= to
    =nil= in your =~/.spacemacs=.
*** 编辑 Lisp code
    Editing of lisp code is provided by [[https://github.com/syl20bnr/evil-lisp-state][evil-lisp-state]].

    Commands will set the current state to =lisp state= where different commands
    combo can be repeated without pressing on ~SPC k~.

    When in =lisp state= the color of the mode-line changes to pink.

    Examples:
    - to slurp three times while in normal state: ~SPC k 3 s~
    - to wrap a symbol in parentheses then slurp two times: ~SPC k w 2 s~

    *Note*: The =lisp state= commands are available in /any/ modes! Try it out.

**** Lisp Key Bindings
***** Lisp state key bindings
      These commands automatically switch to =lisp state=.

      | Key Binding | Function                                                            |
      |-------------+---------------------------------------------------------------------|
      | ~SPC k %~   | evil jump item                                                      |
      | ~SPC k :~   | ex command                                                          |
      | ~SPC k (~   | insert expression before (same level as current one)                |
      | ~SPC k )~   | insert expression after (same level as current one)                 |
      | ~SPC k $~   | go to the end of current sexp                                       |
      | ~SPC k ` k~ | hybrid version of push sexp (can be used in non lisp dialects)      |
      | ~SPC k ` p~ | hybrid version of push sexp (can be used in non lisp dialects)      |
      | ~SPC k ` s~ | hybrid version of slurp sexp (can be used in non lisp dialects)     |
      | ~SPC k ` t~ | hybrid version of transpose sexp (can be used in non lisp dialects) |
      | ~SPC k 0~   | go to the beginning of current sexp                                 |
      | ~SPC k a~   | absorb expression                                                   |
      | ~SPC k b~   | forward barf expression                                             |
      | ~SPC k B~   | backward barf expression                                            |
      | ~SPC k c~   | convolute expression                                                |
      | ~SPC k ds~  | delete symbol                                                       |
      | ~SPC k Ds~  | backward delete symbol                                              |
      | ~SPC k dw~  | delete word                                                         |
      | ~SPC k Dw~  | backward delete word                                                |
      | ~SPC k dx~  | delete expression                                                   |
      | ~SPC k Dx~  | backward delete expression                                          |
      | ~SPC k e~   | unwrap current expression and kill all symbols after point          |
      | ~SPC k E~   | unwrap current expression and kill all symbols before point         |
      | ~SPC k h~   | previous symbol                                                     |
      | ~SPC k H~   | go to previous sexp                                                 |
      | ~SPC k i~   | switch to =insert state=                                            |
      | ~SPC k I~   | go to beginning of current expression and switch to =insert state=  |
      | ~SPC k j~   | next closing parenthesis                                            |
      | ~SPC k J~   | join expression                                                     |
      | ~SPC k k~   | previous opening parenthesis                                        |
      | ~SPC k l~   | next symbol                                                         |
      | ~SPC k L~   | go to next sexp                                                     |
      | ~SPC k p~   | paste after                                                         |
      | ~SPC k P~   | paste before                                                        |
      | ~SPC k r~   | raise expression (replace parent expression by current one)         |
      | ~SPC k s~   | forward slurp expression                                            |
      | ~SPC k S~   | backward slurp expression                                           |
      | ~SPC k t~   | transpose expression                                                |
      | ~SPC k u~   | undo                                                                |
      | ~SPC k U~   | got to parent sexp backward                                         |
      | ~SPC k C-r~ | redo                                                                |
      | ~SPC k v~   | switch to =visual state=                                            |
      | ~SPC k V~   | switch to =visual line state=                                       |
      | ~SPC k C-v~ | switch to =visual block state=                                      |
      | ~SPC k w~   | wrap expression with parenthesis                                    |
      | ~SPC k W~   | unwrap expression                                                   |
      | ~SPC k y~   | copy expression                                                     |

***** Emacs lisp specific key bindings

      | Key Binding | Function                                   |
      |-------------+--------------------------------------------|
      | ~SPC m e $~ | go to end of line and evaluate last sexp   |
      | ~SPC m e b~ | evaluate buffer                            |
      | ~SPC m e c~ | evaluate current form (a =def= or a =set=) |
      | ~SPC m e e~ | evaluate last sexp                         |
      | ~SPC m e f~ | evaluate current defun                     |
      | ~SPC m e l~ | go to end of line and evaluate last sexp   |
      | ~SPC m e r~ | evaluate region                            |

      | Key Binding | Function                                           |
      |-------------+----------------------------------------------------|
      | ~SPC m g g~ | go to definition                                   |
      | ~SPC m g G~ | go to definition in another window                 |
      | ~SPC m h h~ | describe elisp thing at point (show documentation) |
      | ~SPC m t b~ | execute buffer tests                               |
      | ~SPC m t q~ | ask for test function to execute                   |

    There are some added mouse features set for the line number margin (if shown):
    - single click in line number margin visually selects the entire line
    - drag across line number masusually selally selrgin visually selects the region
    - double click in line numbsually seler margin visually select the current code block

*** 字符复制上面行 CTL-y   下面行 CTL-e  
** 工程管理 SPC p
** 暂存器  SPC r
   | ~SPC r e~ | show evil yank and named registers |
   | ~SPC r m~ | show marks register                |
   | ~SPC r r~ | show helm register                 |
   | ~SPC r y~ | show kill ring                     |
** 服务
*** 连接服务 emacsclient -c
*** 保证服务不关闭
    #+BEGIN_SRC emacs-lisp
      (setq-default dotspacemacs-persistent-server t)
    #+END_SRC


    | ~SPC q q~  | Quit Emacs and kill the server, prompt for changed buffers to save       |
    | ~SPC q Q~  | Quit Emacs and kill the server, lose all unsaved changes.                |
    | ~SPC q r~  | Restart both Emacs and the server, prompting to save any changed buffers |
    | ~SPC q s~  | Save the buffers, quit Emacs and kill the server                         |
    | ~SPC q f~  | Kill the current frame                                                   |
    | ~SPC q t~  | Restart Emacs and debug with --with-timed-requires                       |
    | ~SPC q T~  | Restart Emacs and debug with --adv-timers                                |

*** 关闭服务
    #+BEGIN_SRC emacs-lisp
      (setq-default dotspacemacs-enable-server nil)
    #+END_SRC

** 调试
*** 加载有错误
    emacs --debug-init
*** 更新包后有错，要重新编译安装包
    spacemacs/recompile-elpa
*** 打开调试开关 
    toggle-debug-on-error
** 帮助
*** 手册 SPC h m 
*** spacemacs 文档 SPC  h SPC 
*** 显示当前层的快捷键 SPC ?
    
