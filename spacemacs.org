* spacemacs 黑板, 这块黑板对应的是各种字符的粉笔
** 按键 (粉笔)
*** 键绑定 (我想用某个按键代表某个功能)
    (evil-leader/set-key "o y" 'copy-to-clipboard)
    全局绑定 会被模式绑定覆盖
     (global-set-key (kbd "C-]") 'forward-char)
     //被下面的覆盖了
     (define-key evil-insert-state-map (kbd "C-]") 'forward-char)
     //用前导键
  #+BEGIN_SRC emacs-lisp
    (spacemacs/set-leader-keys "C-]" 'forward-char)
    (spacemacs/set-leader-keys-for-major-mode 'emacs-lisp-mode "C-]" 'forward-char)
  #+END_SRC
*** 键绑定帮助
  | Key Binding | Description                                               |
  |-------------+-----------------------------------------------------------|
  | ~SPC h d b~ | describe bindings                                         |
  | ~SPC h d c~ | describe current character under point                    |
  | ~SPC h d d~ | describe current expression under point                   |
  | ~SPC h d f~ | describe a function                                       |
  | ~SPC h d F~ | describe a face                                           |
  | ~SPC h d k~ | describe a key                                            |
  | ~SPC h d K~ | describe a keymap                                         |
  | ~SPC h d l~ | copy last pressed keys that you can paste in gitter chat  |
  | ~SPC h d m~ | describe current modes                                    |
  | ~SPC h d p~ | describe a package (Emacs built-in function)              |
  | ~SPC h d P~ | describe a package (Spacemacs layer information)          |
  | ~SPC h d s~ | copy system information that you can paste in gitter chat |
  | ~SPC h d t~ | describe a theme                                          |
  | ~SPC h d v~ | describe a variable                                       |

  Other help key bindings:

  | Key Binding | Description                                           |
  |-------------+-------------------------------------------------------|
  | ~SPC h SPC~ | discover Spacemacs documentation, layers and packages |
  | ~SPC h i~   | search in info pages with the symbol at point         |
  | ~SPC h k~   | show top-level bindings with =which-key=              |
  | ~SPC h m~   | search available man pages                            |
  | ~SPC h n~   | browse emacs news                                     |

  Navigation key bindings in =help-mode=:

*** 预留前缀
    ~SPC o~ and ~SPC m o~ are reserved for the user
*** Vim key bindings
**** Escaping
     #+BEGIN_SRC emacs-lisp
       (defun dotspacemacs/user-config ()
         (setq-default evil-escape-key-sequence "jj"))
     #+END_SRC

**** Leader key
**** Major Mode leader key
     #+BEGIN_SRC emacs-lisp
       (setq-default dotspacemacs-major-mode-leader-key "<tab>")
     #+END_SRC

**** Additional text objects
     Additional text objects are defined in Spacemacs:

     | Object  | Description                |
     |---------+----------------------------|
     | ~a~     | an argument                |
     | ~g~     | the entire buffer          |
     | ~$~     | text between =$=           |
     | ~*~     | text between =*=           |
     | ~8~     | text between =/*= and =*/= |
     | ~%~     | text between =%=           |
     | ~\vert~ | text between =\vert=       |

** unicode (我想写外语，俄语，拉丁语)
   以某编码打开： M-x revert-buffer-with-coding-system RET（回车）
   Ctrl-x 8 Enter 3bb Enter
   $ ＄ 央行网页选用了半角字符 U+00A5 (¥)。另见：人民币符号是「U+FFE5」还是「U+00A5」 ￥
   
   插入unicode C-q 加8进制类型数字
** 环境变量 (会对一些操作起作用的配置)
   spacemacs/edit-env 
   配置文件  ~/.spacemacs.env
** 导航 
*** 光标
    Navigation is performed using the Vi key bindings ~hjkl~.
*** 快速跳转 通过 [[https://github.com/abo-abo/avy][avy]] 
    | ~SPC j b~   | 返回原来的地方 |
    | ~SPC j j~   | 跳到某个 char  |
    | ~SPC j w~   | 跳到某个  word |
    | ~SPC j l~   | 跳到某个  line |

**** 跳转链接 ace-link 
     | ~o~         | 默认模式hinitiate ace link mode in =help-mode= and =info-mode= |

*** 增强功能绑定 [[https://github.com/tpope/vim-unimpaired][tpope’s vim-unimpaired]].
    | ~[ SPC~     | Insert space above               |
    | ~] SPC~     | Insert space below               |
    | ~[ b~       | Go to previous buffer            |
    | ~] b~       | Go to next buffer                |
    | ~[ f~       | Go to previous file in directory |
    | ~] f~       | Go to next file in directory     |
    | ~[ l~       | Go to the previous error         |
    | ~] l~       | Go to the next error             |
    | ~[ h~       | Go to the previous vcs hunk      |
    | ~] h~       | Go to the next vcs hunk          |
    | ~[ q~       | Go to the previous error         |
    | ~] q~       | Go to the next error             |
    | ~[ t~       | Go to the previous frame         |
    | ~] t~       | Go to the next frame             |
    | ~[ w~       | Go to the previous window        |
    | ~] w~       | Go to the next window            |
    | ~[ e~       | Move line up                     |
    | ~] e~       | Move line down                   |
    | ~[ p~       | Paste above current line         |
    | ~] p~       | Paste below current line         |
    | ~g p~       | Select pasted text               |

*** 可以忽略Jumping, Joining and Splitting
    The ~SPC j~ prefix is for jumping, joining and splitting.

**** Jumping
     | ~SPC j 0~   | go to the beginning of line (and set a mark at the previous location in the line) |
     | ~SPC j $~   | go to the end of line (and set a mark at the previous location in the line)       |
     | ~SPC j b~   | undo a jump (go back to previous location)                                        |
     | ~SPC j d~   | jump to a listing of the current directory                                        |
     | ~SPC j D~   | jump to a listing of the current directory (other window)                         |
     | ~SPC j f~   | jump to the definition of an Emacs Lisp function                                  |
     | ~SPC j i~   | jump to a definition in buffer (imenu)                                            |
     | ~SPC j I~   | jump to a definition in any buffer (imenu)                                        |
     | ~SPC j j~   | jump to one or more characters in the buffer (works as an evil motion)            |
     | ~SPC j k~   | jump to next line and indent it using auto-indent rules                           |
     | ~SPC j l~   | jump to a line with avy (works as an evil motion)                                 |
     | ~SPC j q~   | show the dumb-jump quick look tooltip                                             |
     | ~SPC j u~   | jump to a URL in the current buffer                                               |
     | ~SPC j v~   | jump to the definition/declaration of an Emacs Lisp variable                      |
     | ~SPC j w~   | jump to a word in the current buffer (works as an evil motion)                    |

**** Joining and splitting
     | ~J~         | join the current line with the next line                                 |
     | ~SPC j k~   | go to next line and indent it using auto-indent rules                    |
     | ~SPC j n~   | split the current line at point, insert a new line and auto-indent       |
     | ~SPC j o~   | split the current line at point but let point on current line            |
     | ~SPC j s~   | split a quoted string or s-expression in place                           |
     | ~SPC j S~   | split a quoted string or s-expression, insert a new line and auto-indent |

*** 窗口操作 SPC w 
    黄金分割 golden-ratio

*** 缓存和文件　Buffers and Files
**** Buffers manipulation key bindings
     Buffer manipulation commands (start with ~b~):

     | Key Binding     | Description                                                              |
     |-----------------+--------------------------------------------------------------------------|
     | ~SPC TAB~       | switch to alternate buffer in the current window (switch back and forth) |
     | ~SPC b b~       | switch to a buffer                                                       |
     | ~SPC b d~       | kill the current buffer (does not delete the visited file)               |
     | ~SPC u SPC b d~ | kill the current buffer and window (does not delete the visited file)    |
     | ~SPC b D~       | kill a visible buffer using [[https://github.com/abo-abo/ace-window][ace-window]]                                   |
     | ~SPC u SPC b D~ | kill a visible buffer and its window using [[https://github.com/abo-abo/ace-window][ace-window]]                    |
     | ~SPC b C-d~     | kill other buffers                                                       |
     | ~SPC b C-D~     | kill buffers using a regular expression                                  |
     | ~SPC b e~       | erase the content of the buffer (ask for confirmation)                   |
     | ~SPC b h~       | open =*spacemacs*= home buffer                                           |
     | ~SPC b H~       | open or select the =*Help*= buffer                                       |
     | ~SPC b n~       | switch to next buffer avoiding special buffers                           |
     | ~SPC b m~       | open =*Messages*= buffer                                                 |
     | ~SPC u SPC b m~ | kill all buffers and windows except the current one                      |
     | ~SPC b M~       | kill all buffers matching the regexp                                     |
     | ~SPC b p~       | switch to previous buffer avoiding special buffers                       |
     | ~SPC b P~       | copy clipboard and replace buffer (useful when pasting from a browser)   |
     | ~SPC b R~       | revert the current buffer (reload from disk)                             |
     | ~SPC b s~       | switch to the =*scratch*= buffer (create it if needed)                   |
     | ~SPC b u~       | reopen the most recently killed file buffer                              |
     | ~SPC b w~       | toggle read-only (writable state)                                        |
     | ~SPC b x~       | kill the current buffer and window (does not delete the visited file)    |
     | ~SPC b Y~       | copy whole buffer to clipboard (useful when copying to a browser)        |
     | ~z f~           | Make current function or comments visible in buffer as much as possible  |

**** 文件操作
**** 框架操作 Frame manipulation commands (start with ~F~): 
**** 配置文件操作 SPC f e
     Convenient key bindings are located under the prefix ~SPC f e~ to quickly
     navigate between =Emacs= and Spacemacs specific files.

*** 书签 SPC f b
    | ~C-d~       | delete the selected bookmark                 |
    | ~C-e~       | edit the selected bookmark                   |
    | ~C-f~       | toggle filename location                     |
    | ~C-o~       | open the selected bookmark in another window |

    To save a new bookmark, just type the name of the bookmark and press ~RET~.

*** 视图文档
    =doc-view-mode= is a built-in major mode to view DVI, PostScript (PS), PDF,
    OpenDocument, and Microsoft Office documents.

    | Key Binding | Description                              |
    |-------------+------------------------------------------|
    | ~/~         | search forward                           |
    | ~?~         | search backward                          |
    | ~+~         | enlarge                                  |
    | ~-~         | shrink                                   |
    | ~gg~        | go to first page                         |
    | ~G~         | go to last page                          |
    | ~gt~        | go to page number                        |
    | ~h~         | previous page                            |
    | ~H~         | adjust to height                         |
    | ~j~         | next line                                |
    | ~k~         | previous line                            |
    | ~K~         | kill proc and buffer                     |
    | ~l~         | next page                                |
    | ~n~         | go to next search occurrence             |
    | ~N~         | go to previous search occurrence         |
    | ~P~         | fit page to window                       |
    | ~r~         | revert                                   |
    | ~W~         | adjust to width                          |
    | ~C-d~       | scroll down                              |
    | ~C-k~       | kill proc                                |
    | ~C-u~       | scroll up                                |
    | ~C-c C-c~   | toggle display text and image display    |
    | ~C-c C-t~   | open new buffer with doc’s text contents |

** 自动保存
*** Frequency of auto-saving
    By default auto-saving of files is performed every 300 characters and
    every 30 seconds of idle time which can be changed by setting to a
    new value the variables =auto-save-interval= and =auto-save-timeout=
    respectively.

*** Location of auto-saved files
    Auto-save of modified files can be performed in-place on the original file
    itself /or/ in the cache directory (in this case the original file will remain
    unsaved). By default Spacemacs auto-save the file in the cache directory.

    To modify the location set the variable =dotspacemacs-auto-save-file-location=
    to =original= or =cache=.

    Local files are auto-saved in a sub-directory called =site= in the =cache=
    directory whereas remote files (i.e. files edited over TRAMP) are auto-saved
    in a sub-directory called =dist=.

*** Disable auto-save
    To disable auto-saving set the variable =dotspacemacs-auto-save-file-location=
    to =nil=.

    You can toggle auto-save in a buffer by calling the command =auto-save-mode=.

** 搜索SPC s
*** 搜索工具
**** 有用的功能
     | ~SPC r l~              | 重新显示上次的搜索结果                                       |
     | ~SPC r s~ or ~SPC s l~ | resume search buffer (completion or converted search buffer) |
     | ~SPC s `~              | 返回原来的地方            |
*** 通过语义列出符号 Listing symbols by semantic SPC s j
** 编辑
*** 粘贴文本
**** 上下文粘贴
     打开配置　 =dotspacemacs-enable-paste-transient-state= to =t=

     | ~p~ or ~P~ | 粘贴       |
     | ~C-j~      | 粘贴上一个 |
     | ~C-k~      | 粘贴下一个 |

**** 自动缩进粘贴文本
     默认是自动缩进的，如不需要，可以加universal argument

     配置变量 =spacemacs-indent-sensitive-modes= 
*** 文本操作 (start with ~x~)
    | ~SPC x j c~ | 居中对齐 |
    | ~SPC x l s~ | 排序     |
    | ~SPC x l u~ | 去重     |
    | ~SPC x o~   | 跳转链接 |
    | ~SPC x u~   | 小写     |
    | ~SPC x U~   | 大写     |
    | ~SPC x w c~ | 多少字   |

*** 文本输入 (start with ~i~)
*** 缩放
    Text Frame
*** 数字加减
    | ~SPC n +~   | increase the number under point by one and initiate transient state |
    | ~SPC n -~   | decrease the number under point by one and initiate transient state |
    (i.e. ~10 SPC n +~ will add 10 to the number under point).

*** 拼写检查
     [[https://github.com/syl20bnr/spacemacs/blob/develop/layers/%2Bcheckers/spell-checking/README.org][spell checking]] layer
*** 选区 v
*** 缩放显示区域 (start with ~n~)
    | ~SPC n f~ | 显示函数            |
    | ~SPC n p~ | 显示 page           |
    | ~SPC n r~ | 显示　selected text |
    | ~SPC n w~ | 撤销，全部显示      |
*** 替换 
**** 可视化替换 iedit
     选中要替换的词，按 SPC s e
     删除替换: ~v w w SPC s e S "toto" ESC ESC~
**** 选中替换 <>s//新词/

*** 文件重命名
    It is possible to batch rename files in a directory using =wdired= from an
    =helm= session:
    - browse for a directory using ~SPC f f~
    - enter =wdired= with ~C-c C-e~
    - edit the file names and use ~C-c C-c~ to confirm the changes
    - use ~C-c C-k~ to abort any changes
      
*** 注释 SPC c
    改变注释样式
    
    #+BEGIN_SRC emacs-lisp
      (add-hook 'c-mode-common-hook
                (lambda ()
                  ;; Preferred comment style
                  (setq comment-start "// "
                        comment-end "")))

    #+END_SRC
          
或者
    #+BEGIN_SRC emacs-lisp
      (defun my-c-mode-hook ()
        (c-set-style "bsd")
        (setq tab-width 4)
        (c-set-offset 'case-label '+)
        (setq c-basic-offset tab-width)
        (setq comment-start "//")
        (setq comment-end "")
        (setq comment-column 80))
      (add-hook 'c-mode-hook #'my-c-mode-hook)
#+END_SRC
*** 正则表达式
    Spacemacs uses the packages [[https://github.com/joddie/pcre2el][pcre2el]] to manipulate regular expressions. It is
    useful when working with =Emacs Lisp= buffers since it allows to easily converts
    =PCRE= (Perl Compatible RegExp) to Emacs RegExp or =rx=. It can also be used to
    “explain” a PCRE RegExp around point in =rx= form.

    The key bindings start with ~SPC x r~ and have the following mnemonic structure:
    - ~SPC x r <source> <target>~ convert from source to target
    - ~SPC x r~ do what I mean

    | Key Binding   | Function                                                                               |
    |---------------+----------------------------------------------------------------------------------------|
    | ~SPC x r /~   | Explain the regexp around point with =rx=                                              |
    | ~SPC x r '​~   | Generate strings given by a regexp given this list is finite                           |
    | ~SPC x r t~   | Replace regexp around point by the =rx= form or vice versa                             |
    | ~SPC x r x~   | Convert regexp around point in =rx= form  and display the result in the minibuffer     |
    | ~SPC x r c~   | Convert regexp around point to the other form and display the result in the minibuffer |
    | ~SPC x r e /~ | Explain Emacs Lisp regexp                                                              |
    | ~SPC x r e '​~ | Generate strings from Emacs Lisp regexp                                                |
    | ~SPC x r e p~ | Convert Emacs Lisp regexp to PCRE                                                      |
    | ~SPC x r e t~ | Replace Emacs Lisp regexp by =rx= form or vice versa                                   |
    | ~SPC x r e x~ | Convert Emacs Lisp regexp to =rx= form                                                 |
    | ~SPC x r p /~ | Explain PCRE regexp                                                                    |
    | ~SPC x r p '​~ | Generate strings from PCRE regexp                                                      |
    | ~SPC x r p e~ | Convert PCRE regexp to Emacs Lisp                                                      |
    | ~SPC x r p x~ | Convert PCRE to =rx= form                                                              |

    Deletion is configured to send deleted files to system trash.

    On OS X the =trash= program is required. It can be installed with [[https://brew.sh/][homebrew]] with
    the following command:

    #+BEGIN_SRC sh
      $ brew install trash
    #+END_SRC

    To disable the trash you can set the variable =delete-by-moving-to-trash= to
    =nil= in your =~/.spacemacs=.
*** 编辑Lisp code
    Editing of lisp code is provided by [[https://github.com/syl20bnr/evil-lisp-state][evil-lisp-state]].

    Commands will set the current state to =lisp state= where different commands
    combo can be repeated without pressing on ~SPC k~.

    When in =lisp state= the color of the mode-line changes to pink.

    Examples:
    - to slurp three times while in normal state: ~SPC k 3 s~
    - to wrap a symbol in parentheses then slurp two times: ~SPC k w 2 s~

    *Note*: The =lisp state= commands are available in /any/ modes! Try it out.

**** Lisp Key Bindings
***** Lisp state key bindings
      These commands automatically switch to =lisp state=.

      | Key Binding | Function                                                            |
      |-------------+---------------------------------------------------------------------|
      | ~SPC k %~   | evil jump item                                                      |
      | ~SPC k :~   | ex command                                                          |
      | ~SPC k (~   | insert expression before (same level as current one)                |
      | ~SPC k )~   | insert expression after (same level as current one)                 |
      | ~SPC k $~   | go to the end of current sexp                                       |
      | ~SPC k ` k~ | hybrid version of push sexp (can be used in non lisp dialects)      |
      | ~SPC k ` p~ | hybrid version of push sexp (can be used in non lisp dialects)      |
      | ~SPC k ` s~ | hybrid version of slurp sexp (can be used in non lisp dialects)     |
      | ~SPC k ` t~ | hybrid version of transpose sexp (can be used in non lisp dialects) |
      | ~SPC k 0~   | go to the beginning of current sexp                                 |
      | ~SPC k a~   | absorb expression                                                   |
      | ~SPC k b~   | forward barf expression                                             |
      | ~SPC k B~   | backward barf expression                                            |
      | ~SPC k c~   | convolute expression                                                |
      | ~SPC k ds~  | delete symbol                                                       |
      | ~SPC k Ds~  | backward delete symbol                                              |
      | ~SPC k dw~  | delete word                                                         |
      | ~SPC k Dw~  | backward delete word                                                |
      | ~SPC k dx~  | delete expression                                                   |
      | ~SPC k Dx~  | backward delete expression                                          |
      | ~SPC k e~   | unwrap current expression and kill all symbols after point          |
      | ~SPC k E~   | unwrap current expression and kill all symbols before point         |
      | ~SPC k h~   | previous symbol                                                     |
      | ~SPC k H~   | go to previous sexp                                                 |
      | ~SPC k i~   | switch to =insert state=                                            |
      | ~SPC k I~   | go to beginning of current expression and switch to =insert state=  |
      | ~SPC k j~   | next closing parenthesis                                            |
      | ~SPC k J~   | join expression                                                     |
      | ~SPC k k~   | previous opening parenthesis                                        |
      | ~SPC k l~   | next symbol                                                         |
      | ~SPC k L~   | go to next sexp                                                     |
      | ~SPC k p~   | paste after                                                         |
      | ~SPC k P~   | paste before                                                        |
      | ~SPC k r~   | raise expression (replace parent expression by current one)         |
      | ~SPC k s~   | forward slurp expression                                            |
      | ~SPC k S~   | backward slurp expression                                           |
      | ~SPC k t~   | transpose expression                                                |
      | ~SPC k u~   | undo                                                                |
      | ~SPC k U~   | got to parent sexp backward                                         |
      | ~SPC k C-r~ | redo                                                                |
      | ~SPC k v~   | switch to =visual state=                                            |
      | ~SPC k V~   | switch to =visual line state=                                       |
      | ~SPC k C-v~ | switch to =visual block state=                                      |
      | ~SPC k w~   | wrap expression with parenthesis                                    |
      | ~SPC k W~   | unwrap expression                                                   |
      | ~SPC k y~   | copy expression                                                     |

***** Emacs lisp specific key bindings

      | Key Binding | Function                                   |
      |-------------+--------------------------------------------|
      | ~SPC m e $~ | go to end of line and evaluate last sexp   |
      | ~SPC m e b~ | evaluate buffer                            |
      | ~SPC m e c~ | evaluate current form (a =def= or a =set=) |
      | ~SPC m e e~ | evaluate last sexp                         |
      | ~SPC m e f~ | evaluate current defun                     |
      | ~SPC m e l~ | go to end of line and evaluate last sexp   |
      | ~SPC m e r~ | evaluate region                            |

      | Key Binding | Function                                           |
      |-------------+----------------------------------------------------|
      | ~SPC m g g~ | go to definition                                   |
      | ~SPC m g G~ | go to definition in another window                 |
      | ~SPC m h h~ | describe elisp thing at point (show documentation) |
      | ~SPC m t b~ | execute buffer tests                               |
      | ~SPC m t q~ | ask for test function to execute                   |

    There are some added mouse features set for the line number margin (if shown):
    - single click in line number margin visually selects the entire line
    - drag across line number masusually selally selrgin visually selects the region
    - double click in line numbsually seler margin visually select the current code block

** 工程管理 SPC p
** 暂存器  SPC r
   | ~SPC r e~   | show evil yank and named registers |
   | ~SPC r m~   | show marks register                |
   | ~SPC r r~   | show helm register                 |
   | ~SPC r y~   | show kill ring                     |

   Spacemacs has support for [[http://editorconfig.org/][EditorConfig]], a configuration file to “define and
   maintain consistent coding styles between different editors and IDEs.”
   To enable this feature, [[https://github.com/editorconfig/editorconfig-core-c/blob/master/INSTALL.md][install the editorconfig command]].

   To customize your editorconfig experience, read [[https://github.com/editorconfig/editorconfig-emacs/blob/master/README.md#customize][the editorconfig-emacs package’s
   documentation]].

** Emacs 服务
*** 连接服务 emacsclient -c
*** 保证服务不关闭
    #+BEGIN_SRC emacs-lisp
      配置
      (setq-default dotspacemacs-persistent-server t)
    #+END_SRC


    | ~SPC q q~  | Quit Emacs and kill the server, prompt for changed buffers to save       |
    | ~SPC q Q~  | Quit Emacs and kill the server, lose all unsaved changes.                |
    | ~SPC q r~  | Restart both Emacs and the server, prompting to save any changed buffers |
    | ~SPC q s~  | Save the buffers, quit Emacs and kill the server                         |
    | ~SPC q f~  | Kill the current frame                                                   |
    | ~SPC q t~  | Restart Emacs and debug with --with-timed-requires                       |
    | ~SPC q T~  | Restart Emacs and debug with --adv-timers                                |

*** 关闭服务
    #+BEGIN_SRC emacs-lisp
      (setq-default dotspacemacs-enable-server nil)
    #+END_SRC

** 调试
*** 加载有错误
    emacs --debug-init
*** 更新包后有错，要重新编译安装包
    spacemacs/recompile-elpa
** 编程功能
*** 代码跳转　gtags
**** 安装
***** GNU Global (gtags)
   To use gtags, you first have to install [[https://www.gnu.org/software/global/download.html][GNU Global]].

   You can install =global= from the software repository of your OS; however, many
   OS distributions are out of date, and you will probably be missing support for
   =pygments= and =exuberant ctags=, and thus support for many languages. We
   recommend installing from source. If not for example to install on Ubuntu:

   #+begin_src sh
     sudo apt-get install global
   #+end_src

****** Install on OSX using Homebrew
   #+begin_src sh options
     brew install global --with-pygments --with-ctags
   #+end_src

****** Install on *nix from source
******* Install recommended dependencies
   To take full advantage of global you should install 2 extra packages in
   addition to global: pygments and ctags (exuberant). You can do this using
   your normal OS package manager, e.g., on Ubuntu

   #+BEGIN_SRC sh
     sudo apt-get install exuberant-ctags python-pygments
   #+END_SRC


******* Install with recommended features
   Download the latest tar.gz archive, then run these commands:

   #+BEGIN_SRC sh
     tar xvf global-6.5.3.tar.gz
     cd global-6.5.3
     ./configure --with-exuberant-ctags=/usr/bin/ctags
     make
     sudo make install
   #+END_SRC

******* Configure your environment to use pygments and ctags
   To be able to use =pygments= and =ctags=, you need to copy the sample
   =gtags.conf= either to =/etc/gtags.conf= or =$HOME/.globalrc=. For example:

   #+begin_src sh
     cp gtags.conf ~/.globalrc
   #+end_src

   Additionally you should define GTAGSLABEL in your shell startup file e.g.
   with sh/ksh:

   #+begin_src sh
     echo export GTAGSLABEL=pygments >> .profile
   #+end_src

****** Conflict between =ctags= and emacs's =etags= binary
   If you installed =emacs= from source after =ctags=, your original =ctags= binary
   is probably replaced by emacs's =etags=. To get around this you will need to
   configure =emacs= as following before installing:

   #+begin_src sh
     ./configure --program-transform-name='s/^ctags$/ctags.emacs/'
   #+end_src

   To check if you have the correct version of =ctags= execute:

   #+begin_src sh
     ctags --version | grep Exuberant
   #+end_src

   If yo do not get any output then it means you have the wrong =ctags= and must
   install it again.

***** Emacs Configuration
   To use this configuration layer, add it to your =~/.spacemacs=. You
   will need to add =gtags= to the existing =dotspacemacs-configuration-layers=.

   #+begin_src emacs-lisp
     (setq dotspacemacs-configuration-layers
           '( ;; ...
             gtags
              ;; ...
             ))
   #+end_src

****** Disabling by default
   If =ggtags-mode= is too intrusive you can disable it by default, by setting the
   layer variable =gtags-enable-by-default= to =nil=.

   #+BEGIN_SRC emacs-lisp
     (setq-default dotspacemacs-configuration-layers
       '((gtags :variables gtags-enable-by-default t)))
   #+END_SRC

   This variable can also be set as a file-local or directory-local variable for
   additional control per project.

**** 使用
   - 首先创建 gtags 数据库文件
     运行 =helm-gtags-create-tags= ~SPC m g c~.
     If the language is not directly supported by GNU Global, you
     can choose =ctags= or =pygments= as a backend to generate tag database.
     如果 =global= 不支持 此语言，那么可以换工具, 或者在终端执行

   - From inside terminal, runs gtags at your project root in terminal:
   #+BEGIN_SRC sh
     cd /path/to/project/root
     gtags
   #+END_SRC

     If the language is not directly supported by =gtags=, and you have not set the
     GTAGSLABEL environment variable, use this command instead:
     如果不支持某语言，用插件来增强
   #+BEGIN_SRC sh
     gtags --gtagslabel=pygments
   #+END_SRC

****** Language Support
******* Built-in languages
   If you do not have =ctags= or =pygments= enabled gtags will only produce
   tags for the following languages:

   - asm
   - c/c++
   - java
   - php
   - yacc

******* Exuberant ctags languages
   If you have enabled =exuberant ctags= and use that as the backend (i.e.,
   =GTAGSLABEL=ctags= or =--gtagslabel=ctags=) the following additional languages
   will have tags created for them:

   - c#
   - erlang
   - javascript
   - common-lisp
   - emacs-lisp
   - lua
   - ocaml
   - python
   - ruby
   - scheme
   - vimscript
   - windows-scripts (.bat .cmd files)

******* Universal ctags languages
        如果是最新的，还会增加以下语言
   If instead you installed you the newer/beta =universal ctags= and use that
   as the backend (i.e., GTAGSLABEL=ctags or --gtagslabel=ctags) the following
   additional languages will have tags created for them:

   - clojure
   - d
   - go
   - rust

******* Pygments languages (plus symbol and reference tags)
   In order to look up symbol references for any language not in the built in
   parser you must use the pygments backend. When this backend is used global
   actually uses both ctags and pygments to find the definitions and uses of
   functions and variables as well as "other symbols".

   If you enabled pygments (the best choice) and use that as the backend (i.e.,
   =GTAGSLABEL=pygments= or =--gtagslabel=pygments=) the following additional
   languages will have tags created for them:

   - elixir
   - fsharp
   - haskell
   - octave
   - racket
   - scala
   - shell-scripts
   - tex

***** Eldoc integration
   This layer also integrates =ggtags= for its Eldoc feature. That means, when
   writing code, you can look at the minibuffer (at the bottom) and see variable
   and function definition of the symbol the cursor is on. However, this feature is
   only activated for programming modes that are not one of these languages:

   - C
   - C++
   - Common Lisp
   - Emacs Lisp
   - Python
   - Ruby

   Since these modes have better Eldoc integration already.

   In addition, if output from =compile= (bound to ~SPC c C~), =shell-command=
   (bound to ~SPC !~ and ~M-!~) or =async-shell-command= (bound to ~M-&~) commands
   contains symbol in your project, you move cursor on such symbol and use any of
   the gtags commands.
**** 键盘绑定
   | ~SPC m g C~ | create a tag database 第一步，创建标记文件                                   |
   | ~SPC m g f~ | jump to a file in tag database    跳到包含那个 tag 的文件                     |
   | ~SPC m g g~ | jump to a location based on context       这个更精确，调到函数定义           |
   | ~SPC m g G~ | jump to a location based on context (open another window) 另个窗口           |
   | ~SPC m g d~ | find definitions                      跟上面没区别                           |
   | ~SPC m g i~ | present tags in current function only 这个给你选一下 tag 链表,表示可能它会认错 |
   | ~SPC m g l~ | jump to definitions in file           如果这个 tag 是本文件定义的，这个可以用  |
   | ~SPC m g n~ | jump to next location in context stack                                       |
   | ~SPC m g p~ | jump to previous location in context stack                                   |
   | ~SPC m g r~ | find references                         有几个人用了这函数                   |
   | ~SPC m g R~ | resume previous helm-gtags session       看看 tags 文件中有多少 tag            |
   | ~SPC m g s~ | select any tag in a project retrieved by gtags 看看 tags 文件中有多少 tag      |
   | ~SPC m g S~ | show stack of visited locations                                              |
   | ~SPC m g y~ | find symbols   状态栏显示符号                                                |
   | ~SPC m g u~ | manually update tag database 手动更新 tag 数据库                               |
 | 〜SPC n  - 〜 | 减少指示点下的数量并启动暂态 |
 参数（即〜10 SPC n +〜将点数加 10）
*** 代码折叠
    zm      折叠
    zo      展开折叠
    zO     对所在范围内所有嵌套的折叠点展开
    [z       到当前打开的折叠的开始处。
    ]z       到当前打开的折叠的末尾处。
    zj       向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
    zk      向上移动到前一折叠的结束处。关闭的折叠也被计入。
    zf      创建折叠，比如在 marker 方式下：
    zd      删除 (delete) 在光标下的折叠。仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
    zD     循环删除 (Delete) 光标下的折叠，即嵌套删除折叠。
    zE     除去 (Eliminate) 窗口里“所有”的折叠。
** 帮助
*** 手册 SPC h m 
* layers
** pdf layer
*** 特征:
 - Searching and slicing with =occur=.
 - Show document headings in outline buffer.
 - Manipulate annotations.(注释)
 - Fit PDF to screen.(全屏)
*** Key bindings
  If you use Emacs editing style, check the key bindings at the [[https://github.com/politza/pdf-tools#some-keybindings][pdf-tools page]].
**** PDF View
  | *Key Binding*        | *Description*                             |
  |----------------------+-------------------------------------------|
  | *Navigation*         |                                           |
  |----------------------+-------------------------------------------|
  | ~M-SPC~ or ~s-M-SPC~ | pdf-tools transient state                 |
  | ~0/$~                | Left/right full scroll                    |
  | ~J~                  | Move to next page                         |
  | ~K~                  | Move to previous page                     |
  | ~u~                  | Scroll page up                            |
  | ~d~                  | Scroll page down                          |
  | ~gg~                 | Go to the first page                      |
  | ~G~                  | Go to the last page                       |
  | ~gt~                 | Go to page                                |
  | ~gl~                 | Go to label (usually the line as printed) |
  | ~C-u~                | Scroll up                                 |
  | ~C-d~                | Scroll down                               |
  | ~``~                 | Go to last page in the history            |
  | ~m~                  | Set mark                                  |
  | ~'~                  | Go to mark                                |
  | ~y~                  | Yank selected region                      |
  |----------------------+-------------------------------------------|
  | *Search*             |                                           |
  |----------------------+-------------------------------------------|
  | ~/~                  | Search forward                            |
  | ~?~                  | Search backward                           |
  |----------------------+-------------------------------------------|
  | *Actions*            |                                           |
  |----------------------+-------------------------------------------|
  | ~o~                  | Follow link                               |
  | ~O~                  | Show outline                              |
  | ~r~                  | Refresh file                              |
  |----------------------+-------------------------------------------|
  | *Zoom*               |                                           |
  |----------------------+-------------------------------------------|
  | ~+/-~                | Zoom in/out                               |
  | ~zr~                 | Reset zoom                                |
  |----------------------+-------------------------------------------|

  /For evil users/: Note that the search keys activate =isearch=, which works
  differently from the default Evil search. To go to the next match, use ~C-s~.

**** Leader keys
  | *Key Binding*         | *Description*                             |
  |-----------------------+-------------------------------------------|
  | *Slicing*             |                                           |
  |-----------------------+-------------------------------------------|
  | ~SPC m s m~           | Set slice using mouse                     |
  | ~SPC m s b~           | Set slice from bounding box               |
  | ~SPC m s r~           | Reset slice                               |
  |-----------------------+-------------------------------------------|
  | *Annotations*         |                                           |
  |-----------------------+-------------------------------------------|
  | ~SPC m a D~           | Delete annotation (select it with mouse)  |
  | ~SPC m a a~           | List all attachments in a dired buffer    |
  | ~SPC m a h~           | Highlight visual selection                |
  | ~SPC m a l~           | List all annotations                      |
  | ~SPC m a m~           | Add markup annotation to visual selection |
  | ~SPC m a o~           | Strikeout visual selection                |
  | ~SPC m a s~           | Add squiggly to visual selection          |
  | ~SPC m a t~           | Add annotation text                       |
  | ~SPC m a u~           | Underline to visual selection             |
  |-----------------------+-------------------------------------------|
  | *Fit image to window* |                                           |
  |-----------------------+-------------------------------------------|
  | ~SPC m f w~           | Fit width to window                       |
  | ~SPC m f h~           | Fit height to window                      |
  | ~SPC m f p~           | Fit page to window                        |
  |-----------------------+-------------------------------------------|
  | *Other*               |                                           |
  |-----------------------+-------------------------------------------|
  | ~SPC m n~             | Toggle night view mode                    |
  | ~SPC m s~             | Run =pdf-occur=                           |
  | ~SPC m p~             | Display print version                     |

**** Outline buffer mode

  | *Key Binding* | *Description*                                         |
  |---------------+-------------------------------------------------------|
  | ~S-tab~       | Expand all trees                                      |
  | ~RET~         | Follow link                                           |
  | ~M-RET~       | Follow link and close outline window                  |
  | ~o~           | Go to pdf view window                                 |
  | ~``~          | Move to the heading correspondent to the current page |
  | ~''~          | Move to the heading correspondent to the current page |
  | ~f~           | Go to selected heading without leaving outline buffer |
  | ~F~           | Enable follow mode                                    |
  | ~q~           | Quit                                                  |
  | ~Q~           | Quit and kill outline buffer                          |

  Note that you can use also typical Vim keys such as ~j~ and ~G~.

**** Annotation list mode

  | Key Binding | Description                   |
  |-------------+-------------------------------|
  | ~d~         | Mark for deletion             |
  | ~x~         | Apply action for marked items |
  | ~u~         | Unmark item                   |
  | ~q~         | Quit                          |

**** Occur mode

  | Key Binding | Description    |
  |-------------+----------------|
  | ~q~         | Quit           |
  | ~g~         | Refresh buffer |
  | ~r~         | Refresh buffer |

** epub layers
 | Key Binding | Description         |
 |-------------+---------------------|
 | ~<TAB>~     | Next link           |
 | ~<BACKTAB>~ | Previous link       |
 | ~H~ or ~[~  | Previous chapter    |
 | ~L~ or ~]~  | Next chapter        |
 | ~u~         | Scroll up           |
 | ~d~         | Scroll down         |
 | ~g m~       | Display metadata    |
 | ~g r~       | Re-render document  |
 | ~g t~       | Table of contents   |
 | ~g v~       | View source         |
 | ~g V~       | View content source |

 Hint: use ~SPC w c~ to center the buffer.

** 英汉转换 [[file:~/.emacs.d/private/companyenglish/][layers]]
   打开英语提示 (toggle-company-english-helper)
** 语法检查 syntax check
*** 语法提示开关
 By default tooltips are enabled and used whenever it is possible.
 You can disable them by setting the variable =syntax-checking-enable-tooltips=
 to =nil=:

 #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layers
     '((syntax-checking :variables syntax-checking-enable-tooltips nil)))
 #+END_SRC

*** 默认提示配置
 #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layers
     '((syntax-checking :variables syntax-checking-enable-by-default nil)))
 #+END_SRC

 If you want more fine-grained control, you can configure the variable
 =flycheck-global-modes= instead. Note that this variable should be manipulated
 in =dotspacemacs/user-config=.

*** 位图
 If the original flycheck fringe bitmaps are more to your liking, you can set the
 variable =syntax-checking-use-original-bitmaps= to =t=:

 #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layers
     '((syntax-checking :variables syntax-checking-use-original-bitmaps t)))
 #+END_SRC

*** 键盘绑定
 | ~SPC e b~ | check for errors now                                         |
 | ~SPC e c~ | clear errors                                                 |
 | ~SPC e h~ | describe flycheck checker                                    |
 | ~SPC e l~ | display a list of all the errors                             |
 | ~SPC e L~ | display a list of all the errors and focus the errors buffer |
 | ~SPC e s~ | set flycheck checker                                         |
 | ~SPC e S~ | set flycheck checker executable                              |
 | ~SPC e v~ | verify flycheck setup                                        |
 | ~SPC t s~ | toggle flycheck                                              |
 | ~SPC e x~ | explain the error at point                                   |
** search engine
*** 配置默认浏览器  
    在 dotspacemacs/user-config段:

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        engine/browser-function 'browse-url-generic
        browse-url-generic-program "google-chrome")
#+END_SRC
*** 配置搜索引擎 
    在 dotspacemacs/user-config

#+BEGIN_SRC emacs-lisp
  (push '(custom1
           :name "Custom Search Engine 1"
           :url "http://www.domain.com/s/stuff_sutff_remember_to_replace_search_candidate_with_%s")
          search-engine-alist)
#+END_SRC



** asm layers
  语言高亮
  自动缩进
  自动完成
  查找文档 
  智能菜单 Imenu integration SPC s j 

| ~SPC m h h~ |查找命令文档 Look up the documentation for instruction at point |

