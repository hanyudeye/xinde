* android studio
** 开始入手
     2.1 Android 开发
     2.1.1 开始前的准备工作
     2.1.2 创建第一个 Android 活动
     2.1.3 Android 应用程序的类型
     2.2 面向移动设备的开发
     2.2.1 关于硬件设计的考虑事项
     2.2.2 考虑用户环境
     2.2.3 Android 开发
     2.3 To-Do List 示例
     2.4 Android 开发工具
     2.4.1 Android 模拟器
     2.4.2 Dalvik 调试监控服务(DDMS)
     2.4.3 Android 调试桥(ADB)
     2.5 小结
     第 3 章 创建应用程序和活动
     3.1 Android 应用程序的组成部分
     3.2 程序清单简介
     3.3 使用清单编辑器
     3.4 Android 应用程序生命周期
     3.5 理解应用程序的优先级和进程状态
     3.6 分离资源
     3.6.1 创建资源
     3.6.2 使用资源
     3.6.3 To-DoList 资源示例
     3.6.4 为不同的语言和硬件创建资源
     3.6.5 运行时配置更改
     3.7 深入探讨 Android 活动
     3.7.1 创建一个活动
     3.7.2 活动生命周期
     3.7.3 Android 活动类
     3.8 小结
     第 4 章 创建用户界面
     4.1 Android UI 基本设计
     4.2 View 简介
     4.2.1 使用 View 创建 Activity(活动)用户界面
     4.2.2 Android Widget 工具箱
     4.3 布局简介
     4.4 创建新的 View
     4.4.1 修改现有的 View
     4.4.2 创建复合控件
     4.4.3 创建定制的 Widget 和控件
     4.4.4 使用定制的控件
     4.5 创建和使用菜单
     4.5.1 Android 菜单系统简介
     4.5.2 定义活动的菜单
     4.5.3 动态更新菜单项
     4.5.4 处理菜单选择
     4.5.5 子菜单和上下文菜单
     4.5.6 To-Do List 示例续
     4.6 小结
     第 5 章 Intent、广播接收器、
     Adapter 和 Internet
     5.1 Intent 简介
     5.1.1 使用 Intent 来启动活动
     5.1.2 使用 Intent Filter 来为隐式 Intent 提供服务
     5.1.3 使用 Intent Filter 作为插件和扩展
     5.1.4 使用 Intent 来广播事件
     5.2 Adapter 简介
     5.2.1 Android 提供的部分 Adapter 简介
     5.2.2 使用 Adapter 绑定数据
     5.3 使用 Internet 资源
     5.3.1 连接到 Internet 资源
     5.3.2 利用 Internet 资源
     5.4 Dialog 简介
     5.4.1 Dialog 类简介
     5.4.2 使用活动作为对话框
     5.5 创建一个地震查看器
     5.6 小结
     第 6 章 数据存储、检索和共享
     6.1 Android 中的数据保存技术
     6.2 保存简单的应用程序数据
     6.2.1 创建和保存 preference
     6.2.2 检索共享的 preference
     6.2.3 保存活动状态
     6.2.4 为地震查看器创建一个 Preference 页
     6.3 保存和载入文件
     6.3.1 将静态文件作为资源添加
     6.3.2 文件管理工具
     6.4 Android 中的数据库
     6.4.1 SQLite 简介
     6.4.2 Cursor 和内容值
     6.4.3 使用 Android 数据库
     6.5 内容提供器简介
     6.5.1 使用内容提供器
     6.5.2 本地 Android 内容提供器
     6.5.3 创建一个新的内容提供器
     6.5.4 创建和使用地震内容提供器
     6.6 小结
     第 7 章 地图、地理编码和基于位置的服务
     7.1 使用基于位置的服务
     7.2 使用 Test Proyider 构建模拟器
     7.2.1 更新模拟位置提供器中的位置
     7.2.2 创建一个应用程序来管理 Test Location Provider
     7.3 选择——个 Location Provider
     7.3.1 查找可用的提供器
     7.3.2 根据要求标准查找提供器
     7.4 确定自己所在的位置
     7.4.1 “Where Am I”示例
     7.4.2 追踪移动
     7.4.3 更新“WhereAmI”示例中的位置
     7.5 使用邻近提醒
     7.6 使用 Geocoder
     7.6.1 反向地理编码
     7.6.2 前向地理编码
     7.6.3 对“Where Am I”示例进行地理编码
     7.7 创建基于地图的活动
     7.7.1 MapView 和 MapActivity 简介
     7.7.2 创建一个基于地图的活动
     7.7.3 配置和使用 MapView
     7.7.4 使用 MapController
     7.7.5 对“Where Am I”示例使用地图
     7.7.6 创建和使用覆盖(Overlay)
     7.7.7 MyLocationOverlay 简介
     7.7.8 ItemizedOverlay 和 Overlayltem 简介
     7.7.9 将 View 固定到地图和地图的某个位置上
     7.8 对 Earthquake 示例添加地图功能
     7.9 小结
     第 8 章 后台工作
     8.1 服务简介
     8.1.1 创建和控制服务
     8.1.2 将活动和服务绑定
     8.2 使用后台工作线程
     8.2.1 创建新的线程
     8.2.2 为 GUI 操作同步线程
     8.2.3 将 Earthquake Service 移动到后台线程
     8.3 创建一个 Toast
     8.3.1 定制 Toast
     8.3.2 在工作(worker)线程中使用 Toast
     8.4 Notification 简介
     8.4.1 Notification Manager 简介
     8.4.2 创建 Notification
     8.4.3 触发 Notification
     8.4.4 向 Earthquake Monitor 中添加 Notiflcation
     8.4.5 高级 Notification 技术
     8.4.6 持续的和连续的 Notification
     8.5 使用 Alarm
     8.6 使用 Alarm 更新 Earthquake
     8.7 小结
     第 9 章 P2P 通信
     9.1 Android 即时消息简介
     9.1.1 使用 GTalk 服务
     9.1.2 和 GTalk 服务绑定
     9.1.3 建立 GTalk 连接，开始一个 IM 会话
     9.1.4 在线状态和联系人列表简介
     9.1.5 管理聊天会话
     9.1.6 发送和接收数据信息
     9.2 SMS 简介
     9.2.1 在应用程序中使用 SMS
     9.2.2 发送 SMS 信息
     9.2.3 监听 SMS 消息
     9.2.4 紧急响应的 SMS 示例
     9.2.5 紧急响应自动化
     9.3 小结
     第 10 章 访问 Android 硬件
     10.1 使用媒体 API
     10.1.1 播放媒体资源
     10.1.2 录制多媒体
     10.2 使用摄像头
     10.2.1 控制摄像头设置
     10.2.2 使用摄像头预览
     10.2.3 照相
     10.3 Sensor Manager 简介
     10.4 使用加速计和指南针
     10.4.1 加速计介绍
     10.4.2 检测加速度的改变
     10.4.3 创建一个速度计
     10.4.4 确定方向
     10.4.5 创建指南针和地平仪
     10.5 Android 电话功能
     10.5.1 打电话
     10.5.2 监控电话状态和电话活动
     10.5.3 监控数据连通性和活动
     10.5.4 访问手机的属性和状态
     10.5.5 控制电话
     10.6 使用蓝牙
     10.6.1 蓝牙服务介绍
     10.6.2 控制本地蓝牙设备
     10.6.3 发现并配对蓝牙设备
     10.6.4 管理蓝牙连接
     10.6.5 使用蓝牙进行通信
     10.6.6 使用蓝牙耳机
     10.7 管理网络和 Wi-Fi 连接
     10.7.1 监控和管理 Internet 连接
     10.7.2 管理活动的连接
     10.7.3 管理你的 Wi-Fi
     10.8 控制设备震动
     10.9 小结
     第 11 章 Android 高级开发
     11.1 Android 的安全性
     11.1.1 Linux 内核安全
     11.1.2 权限简介
     11.1.3 声明和实施权限
     11.1.4 为广播 Intent 实施权限
     11.2 使用 AIDL 来支持服务 IPC
     11.3 使用 Internet 服务
     11.4 构建内容丰富的用户界面
     11.4.1 使用动画
     11.4.2 使用主题来为应用程序添加皮肤
     11.4.3 高级画布绘图
     11.4.4 SurfaceView 简介
     11.4.5 创建交互式控件
     11.5 小结
* Android
** 架构 linux 内核层，系统运行库层，应用框架层，应用层
** 四大组件
   活动 Activity 
   服务 Service
  广播接收器 Broadcast receiver
  内容提供器 Content provider
** 软件开发流程
   ➤创建应用程序
   ➤模拟器测试 Access the tools for accessing your Android emulators and devices.
   ➤编译调试 Compile and debug Android applications.
   ➤导出 apk 包 Export Android applications into Android Packages (APKs).
   ➤创建包的数字证书 Create digital certificates for code-signing your APK.
** 项目结构 
*** 项目配置文件 AndroidManifest.xml 
     AndroidManifest.xml
     任何 android 组件都要在此注册
*** 资源文件夹 res    
      1. 在代码中通过 R.string.hello_world 可以获得该字符串的引用；
      2. 在 XML 中通过@string/hello_world 可以获得该字符串的引用。
**** 布局 layout
     activity_main.xml
**** 数字常量 values
     colors.xml
     strings.xml
     styles.xml
** 日志工具??? 
   android 的 android.util.Log 提供几个方法
   1.Log.v() 打印最繁琐的日志信息 verbose
   2.Log.d() 打印调试信息 debug
   3.Log.i() 打印比较重要的信息  info
   4.Log.w() 打印警告信息 warn
   5.Log.e() 打印错误信息 error
*** 日志过滤工具 
    可以输出定义的日志
    
* 真机调试
** 在清单或 build.gradle 文件中验证您的应用是否“可调试”
在构建文件中，确保 debug 构建类型中的 debuggable 属性设为 true。构建类型属性将替换清单设置。

android {
    buildTypes {
        debug {
            debuggable true
        }
在 AndroidManifest.xml 文件中，将 android:debuggable="true" 添加到 <application> 元素中。

** 手机启用 USB 调试
注：在运行 Android 4.2 及更新版本的设备上，Developer options 默认情况下处于隐藏
状态。如需将其显示出来，请转到 Settings > About phone 并点按 Build number 七次。
返回上一屏幕即可找到 Developer options。
** 设置您的系统以检测设备
如果您在 Ubuntu Linux 上开发，则需要为想要在开发中使用的每一种设备类型添加一个包
含 USB 配置的 udev 规则文件。在规则文件中，每一个设备制造商都由一个唯一的供应商
ID（如 ATTR{idVendor} 属性所指定）标识。要查看供应商 ID 列表，请参见下文的 USB
供应商 ID。要在 Ubuntu Linux 上设置设备检测，请执行以下操作：

以 root 身份登录，并创建此文件：/etc/udev/rules.d/51-android.rules。
使用下面的格式将各个供应商添加到文件中：
SUBSYSTEM=="usb", ATTR{idVendor}=="0bb4", MODE="0666", GROUP="plugdev" 
小米 6 SUBSYSTEM=="usb", ATTR{idVendor}=="279e", MODE="0666", GROUP="plugdev" 
lsusb 插入第一段 xxxx 就好了

chmod a+r /etc/udev/rules.d/51-android.rules
sudo service udev restart
然后重新插入 USB 接口
** 手机确认密钥 允许在这台计算机上调试的 RSA 密钥
   通过 USB 充电时，您可以从 SDK platform-tools/ 目录执行 adb devices，验证您的设备
   是否连接。如果已连接，您将看到设备名称以“设备”形式列示。

   如果使用 Android Studio，可以照常运行或调试您的应用。系统将显示 Device Chooser
   对话框，其中会列出可用模拟器和已连接设备。选择要在上面安装和运行应用的设备。
* 分离资源
** 创建资源 res/  
   简单值、Drawable、颜色、布局、动画、样式、菜单、xml 文件和原始资源 R 文件是对
   资源文件夹的引用
*** 简单值:
<resources>
<string name="app_name">To Do List</string>
<string name="app_name">&lt;b>To Do List&lt;/b></string>
<string name="app_name"><b>To Do List</b></string>
<string name="app_name">To Do List</string>
</resources>
*** 颜色
<color name="blue">#00F</color>
*** 尺寸
    <dimen name="border">5dp</dimen>
    px(屏幕像素)
    in(物理英寸)
    pt(物理点)
    mm(物理毫米)
    dp(非密度制约的像素)
    sp(scale-independent 缩放比例无关的像素)
*** 样式和主题
    <style name="base_text">
        <item name="android:textSize">14sp</item>
        <item name="android:textColor">#111</item>
    </style>
    继承 parent 关键字
    <style name="small_text" parent="base_text">
*** Drawable
    资源标识符是没有扩展名的小写字母文件名。
*** 布局
*** 动画
*** 菜单
    <menu>
       <item android:id="@+id/menu_refresh"/>
    </menu>
** 使用资源
   setContentView(R.layout.main);
*** 当需要资源本身的实例时：
   Resources myResources = getResources();
   
   cahrSequence styleText = myResources.getText(R.string.stop_message);
   Drawable icon = myResoureces.getDrawable(R.drawable.app_icon);
   int Blue = myResources.getColor(R.color.opeque_blue);
   float borderWidth = myResources.getDimension(R.dimen.standard_border);
   
   Animation tranOut;
   tranOut = AnimationUtils.loadAnimation(this, R.anim.spin_shrink_fade);

   String[] stringArray;
   stringArray = myResources.getStringArray(R.array.string_array);
   
   int[] intArray = myResources.getIntArray(R.array.integer_array);
*** 在资源内引用资源
    使用@符号，就可以在资源中引用另一个资源.
    attribute= "@[packagename:]resourcetype/resourceidentifier"
*** 使用系统资源 
    charSequence httpError = getString(android.R.string.httpErrorBadUrl);
    
    XML 中
    android:text="@android:string/httpErrorBadUrl"
*** 在当前主题中引用样式
    使用?android: 而不是@
    android:textColor="?android:textColor"
