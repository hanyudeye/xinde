#+TITLE: C小难题
#+DESCRIPTION: C 语言简介
#+TAGS[]: C
#+CATEGORIES[]: 技术

# more
** 数据
*** 基本数据类型 
    | 数字-整数         | int       |
    | 数字-短整数       | short int |
    | 数字-长整数       | long int  |
    | 数字-小数(双精度) | double    |
    | 数字-小数(单精度) | float     |
    | 字符              | char      |

    #+begin_quote
    #+begin_verse
    这些东西一般用于数学计算和显示文字
    因为数学运算要用数字作参数
    #+end_verse
    #+end_quote
*** 复杂数据类型    
**** 枚举
     #+begin_quote
     枚举用来定义 *有限可能性* 的数据
     #+end_quote
     #+begin_src c
       enum DAY
         {
          MON=1, TUE, WED, THU, FRI, SAT, SUN
         };
       enum DAY day;
     #+end_src
**** 结构体
     #+begin_quote
     结构体用来构造复杂数据
     #+end_quote
     
     #+begin_src c
       struct [structure tag]
       {
         member definition;
         member definition;
         ...
           member definition;
       } [one or more structure variables];  
       structure tag 是可选的，每个 member definition 是标准的变量定义

       struct point {double x,y,z;} p = {1.2, 1.3}; // p.x=1.2, p.y=1.3, p.z=0.0
       div_t answer = {.quot = 2, .rem = -1 };      // order of elements in div_t may vary

     #+end_src
**** 共用体
     #+begin_quote
     节约内存用的
     #+end_quote
     #+begin_src c
       union [union tag]
       {
         member definition;
         member definition;
         ...
           member definition;
       } [one or more union variables];  
       union tag 是可选的
     #+end_src
 
**** 位域
     #+begin_quote
     节约内存用的
     #+end_quote
     #+begin_src c -n
       struct
       {
         unsigned int widthValidated : 1;
         unsigned int heightValidated : 1;
       } status;

       #include <stdio.h>
       #include <string.h>

       /* 定义简单的结构 */
       struct
       {
         unsigned int widthValidated;
         unsigned int heightValidated;
       } status1;

       /* 定义位域结构 */
       struct
       {
         unsigned int widthValidated : 1;
         unsigned int heightValidated : 1;
       } status2;

       int main( )
       {
         printf( "Memory size occupied by status1 : %d\n", sizeof(status1));
         printf( "Memory size occupied by status2 : %d\n", sizeof(status2));

         return 0;
       }
       #+end_src
     当上面的代码被编译和执行时，它会产生下列结果：

     #+begin_verse
     Memory size occupied by status1 : 8
     Memory size occupied by status2 : 4
     #+end_verse

     #+begin_src c
       struct
       {
         unsigned int age : 3;
       } Age;
     #+end_src
 
     上面的结构定义指示 C 编译器，age 变量将只使用 3 位来存储这个值，如果您试图使用
     超过 3 位，则无法完成。让我们来看下面的实例：
*** 指针
    对象链接，这里的对象包括数据和命令(函数)。
    #+begin_quote
    其实能链接到任何地方，包括链接自己。
    本质是一个内存地址，内存又是放程序和数据的地方，但是操作系统对内存的保护，所以只能链接到程序自己包含的内容。
    #+end_quote
    
    #+begin_src c
      int    *ip;    /* 一个整型的指针 */
      double *dp;    /* 一个 double 型的指针 */
      float  *fp;    /* 一个浮点型的指针 */
      char   *ch;     /* 一个字符型的指针 */
    #+end_src

    NULL 指针是一个定义在标准库中的值为零的常量。请看下面的程序：
    #+begin_src c
      #include <stdio.h>

      int main ()
      {
        int  *ptr = NULL;

        printf("ptr 的地址是 %p\n", ptr  );

        return 0;
      }
    #+end_src
    #+begin_quote
    ptr 的地址是 0x0
    #+end_quote
 
    #+begin_verse
    在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。
    然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按
    照惯例，如果指针包含空值（零值），则假定它不指向任何东西。
    #+end_verse

    如需检查一个空指针，您可以使用 if 语句，如下所示：

    #+begin_src c
      if(ptr){}     /* 如果 p 非空，则完成 */
      if(!ptr){}    /* 如果 p 为空，则完成 */
    #+end_src
 
*** 函数指针
    函数指针是指向函数的指针变量。
    #+begin_src c -n
      typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型

      #include <stdio.h>

      int max(int x, int y)
      {
        return x > y ? x : y;
      }

      int main(void)
      {
        /* p 是函数指针 */
        int (* p)(int, int) = & max; // &可以省略
        int a, b, c, d;

        printf("请输入三个数字:");
        scanf("%d %d %d", & a, & b, & c);

        /* 与直接调用函数等价，d = max(max(a, b), c) */
        d = p(p(a, b), c); 
        printf("最大的数字是: %d\n", d);

        return 0;
      }
    #+end_src
*** 数据长度  ( sizeof ) 
** 类型别名
   #+begin_src c
     typedef char* String_t;
     #define String_d char *
   #+end_src
   
** 函数   
   #+begin_quote
   *做什么* ，或者用什么做什么的 *做什么*
   #+end_quote
   
   如:
   #+begin_src c
     printf("hello");/* 显示器显示 hello */ 
     int a,b=2,c=3;
     a=b+c; /* 把 b 与 c 的和给 a */
     printf("%d\n",a); /* 显示器显示 a 的值并换行*/
     exit 0; /* 程序退出 */
   #+end_src

*** 定义做什么   
    结构:
    #+begin_verse
      返回结果 做什么(用什么)
    #+end_verse
      
*** 可变参数
    #+begin_src c 
      int func(int, ... ) 
      {
        .
        .
        .
      }

      int main()
      {
        func(1, 2, 3);
        func(1, 2, 3, 4);
      }

    #+end_src
    #+begin_src c -n
      #include <stdio.h>
      #include <stdarg.h>

      double average(int num,...)
      {

        va_list valist;
        double sum = 0.0;
        int i;

        /* 为 num 个参数初始化 valist */
        va_start(valist, num);

        /* 访问所有赋给 valist 的参数 */
        for (i = 0; i < num; i++)     {
          sum += va_arg(valist, int);
        }     /* 清理为 valist 保留的内存 */
        va_end(valist);
        return sum/num;
      }
      int main() {
        printf("Average of 2, 3, 4, 5 = %f\n", average(4, 2,3,4,5));
        printf("Average of 5, 10, 15 = %f\n", average(3, 5,10,15));
      } 
    #+end_src
    Average of 2, 3, 4, 5 = 3.500000
    Average of 5, 10, 15 = 10.000000

