猫会游泳!
* 拨动计算机的琴弦 
  琴弦1 os: (文件, 进程, 信号)输出长久保存, 多任务，任务交流之逻辑
  琴弦2 shell: 指令组合，连接, 调用(软件）命令(交互）能交互，交互的遍历性，语法的可读性。自然语言
  琴弦3 soft:具体软件
  琴弦4 compile:各语法
* 正则(事物的联系）
  特殊字符有
  \
  . 匹配任何单个字符，但nul除外。
  * 匹配在他之前的任何数目的单个字符,他会取最多的匹配。
  abcd abcccd abccd abccd
  ^ 匹配紧接着的正则表达式，在行或字符串的起始处

  gbcdef^geh 
  abcdef^geh 
  $ 匹配前面的正则表达式，在字符串或行结尾处。
  [] 匹配方括号内的任一字符。
  \{n,m\} 表示它前面的单个字符重新的次数
  abbbbbbbc
  abc
  abbc
  abbbc
  \( \) 将\( \) 之间的模式存储在特殊的“保留空间”，最多可以将9个独立的子模式
  abc edf 
  abcdefgdsgab
  abab
  abdcdlasabab
  \n 
  + 匹配前面正则表达式的一个或多个实例
  ? 匹配前面的零个或一个实例
  | 匹配于 | 前或后的表达式 |
  abc def
  acc dff

  此外，可用以在匹配及排序字符串数据时，将序列里的字符视为一个独立单位。
  字符集
  character class[: :] 将关键字组合括起来的posix 字符集。
  collating symbol 
  排序符号指的是将多字符序列视为一个单位 。他使用[. 与 .] 将字符组合括起来。排序符号在系统所使用的特定locale 上各有其定义。
  等价字符集 [= =] 扩住
  如[[:alpha:]!]匹配任一英文字符或惊叹号；在法文French的国际化中，或者在中文的同义词中 [[=一样=]] 跟完全，相同都是同一个意思。
  在这里应该是不能使用的。不知道搜索引擎能不能匹配。
  对于字符集
  [:alnum:]
  [:alpha:]
  [:digit:]
  [:lower:]
  [:print:]
  [:punct:]标点符号
  [:space:]空格符
  [:upper:]控制字符
  [:cntrl:]
  [:graph:][:xdigit:]
  以及字符集，这些是方括号表达式最后出现的组成部分。接下来，我们就要说明他们的构造方式
  为了匹配需要，某些成对的字符必须视为单个字符。像这样的成对字符，当他们与语言里的单个字符比较时，都有其排序的定义方式。
  例如，在。。就是词组差不多的意思。
  排序是指给予成组的排序顺序的操作。就是匹配一个词汇了哇
  [ab[.你好.]de]
  ab 你好 de 

  最后一个特殊组成部分：字符集，他表示字符的类别，例如数字，小写与大写字母、标点符号
  排序元素、等价字符集以及字符集，都仅在方括号表达式的方括号内认可，对于[:alpha:]这样的表达式，只有一层的化，仅匹配 : a l p h
  在方括号表达式中，所有的元字符 meta 都会失去其含义。要将]加入该集合，可以将它放在列表的最前面：[]*\.]
  若你需要右方括号与减号同时在列表中，请将右方括号放在第一个字符、减号放在最后一个字符 []*\.-]

  后向引用
  指的是“匹配于正则表达式匹配的先前的部分”。使用后向引用的步骤有两个。第一步是将子表达式包围在\( 与 \) 里；单个模式里可
  包括至多9个表达式
  下一步是在同一模式之后使用\digit,digit 是介于1至9的数字，指的是“匹配于第n个先前方括号内字表达式匹配成功的字符”。

  abcdcdab\ abcdeeecdab abcdddeeffcdab
  \([[:alpha:]_][[:alnum:]_]*\) = \1; 匹配简易的c/c++ 赋值语句
  \1 就是 第一个() 中的内容
  后向引用在寻找重复字以及匹配引号时特别有用
  \(["']\).*\1 匹配以单引号或双引号括起来的字，如'foo' 或"bar"

  在这种方法下，就无需担心是单引号或是双引号先找到。
  匹配多字符最简单的方法就是把他们一个一个列出来。

  \{n,m\} 的值介于0 至RE_DUP_MAX 之间。re_dup_max是POSIX定义的符号型常数，且可以通过getconf 命令取得。
  方式为 getconf RE_DUP_MAX ,在Linux 上是一个很大的数字，32767
  再介绍两个meta字符就完成这个bre的介绍了。他们是 ^ 和 $ 符号，他们指的是anchor,因为他们针对的是字符串的头部和尾部进行匹配。
  ^$ 表示空行 
  扩展文件里头时常包含空行或空白比较多
  cc -E foo.c | grep -v '^$' > foo.out 删除空行

  在扩展正则表达式里 [ ] \ - 都是有含义的，所以要用\ 转义
  ere 里没有向后引用，在ere里，\( 与\)匹配的是字面上的括号

  aaaaaaa
  区间表达 时，要查找5个a 或几个a 时 ，用 a{5,10},不要加反斜杠
  交替运算符 | ，可以用于匹配多个,用这个挺有用的

  扩展正则表达式 \< \> 表示匹配单词
  \<abc

  abc helabc acbc abcdef abcefg 
  虽然POSIX标准化的只有ex编辑器，但在所有商用unix 系统上，ed ex  以及vi 都支持单词匹配。
  另外还有额外的gnu 正则表达式运算符

  \w [[:alnum:]_]
  \W  

  一般来说，执行了文本查找，我们可能会进一步做替换来修改文本。此时用到的工具一般是 sed stream edtior . sed 的设计就是用来
  以批处理的方式，而不是交互的方式来编辑文件。当你知道要做好几个变更。 
  我们发现，在shell脚本里，sed 主要用于一些简单的文本替换，所以我们先从他开始。

  基本用法，你可能常会在管道中间，用sed 的替换 s 用法 
  sed 's/:.*//’ /etc/passwd | sort -u 删除重复的行

  为了编辑他的输入流，将结果生成到标准输出，而非以交互式编辑器的方式来编辑文件。虽然sed 的命令很多，通常只是作为管道的一部分，
  给 下一个程序做最终处理
  行为模式
  读取每个输入文件的每一行，加入没有文件的话，则是标准输入。以每一行来说，sed会执行每一个应用到输入行的editing command. 
  结果会写到标准输出（默认状态下，或是显示地使用p 命令及-n 选项） 。 
  在这里，/ 字符扮演定界符（delimiter)的角色，从而分割正则表达式与替代文本。在本例中，替代文本是空的，实际上会有效地删除匹配的文本，
  在处理文件名称时，通常会以标点符号字符作为定界符，因为在文件名中/ 是有特殊含义的。
  find /home/xx -type d  -print | sed 's;/home/tolstoy/;/home/lt/;'|修改名称，注意：这里使用的是分号作为定界符
  sed 's/^/mkdir /' | sh -x 
  上述脚本将/home/tolstoy 目录结构建立一份副本在/home/lt 下 这个脚本 使用了产生命令的手法，这是一个功能很强且很常见的技巧

  替换细节
  前面提到，定界符不光是/ 还可以是任何标点；对于这些特殊字符的替换，需要用到转义符。
  不过这么做让人很难看懂。看下面这个替换
  sed 's/\/home\/tolstoy\//\/home\/lt\//' 
  sed 's|/home/tolstoy/|/home/lt|' 这个就看的清楚了
  sed 's&/home/tolstoy/&/home/lt&' 这样就更清楚

  sed 也知道向后引用，他也认得正则表达式。他知道从这替换匹配的文本
  举个例子
  echo /home/tolstoy/ | sed 's;\(/home\)/tolstoy/;\1/lt/;'
  sed 将\1 替换为匹配与正则表达式的/home 部分。在这里，任何表达式都可以在括号，向后引用最多9个，不能多哦

  向后引用
  sed 's/\(ab\)/\1nimei\1/'
  有些其他字符在替代文本里也有特殊含义。 我们已经提过需要使用反斜杠转义定界符的情况
  还有 & 在替代文本的含义是，就像是代表这个匹配的不懂，并可以在后面追加字符
  sed 's/hello/& world/' 'hello !'
  在s 命令里以 g 结尾表示global，表示替代每个匹配。默认只会匹配第一个
  如果结尾跟数字，则表示为第 数字 次出现才匹配

  到目前，我们都是讲的一次替换一个，但一次替换多个也能实现。 就是使用-e 选项。 每个编辑命令使用一个 -e 
  sed -e 's/foo/bar/g' -e 's/chicken/cow/g' file.xml > myfile.xml

  不过，如果你有很多项目要编辑，这种形式很恐怖，将编辑命令全部放在脚本里，再搭配 -f 使用，会更好 
  cat fixup.sed
  s/foo/bar/g
  s/chicken/cow/g
  s/animal/horse/g

  以后只要修改文件就好了，这是对于修复bug来挺有用的。另外，POSIX标准也允许使用分号将不同的命令隔开
  sed 's/foo/bar/g; s/chicken/cow/g' myfile.xml > myfile2.xml

  sed 的工作方式是对于行来说的，每次读取一行，进行操作。

  sed -n '/hello/p' xx.file  这个有点像grep 的查找功能，显示匹配的一行 ，不做替换
  匹配特定的行，而不是每一行都作处理，现在我们就来学习sed 的这一功能。
  行编号，上面的有点笼统 ，最后一行 用 $l $p 表示
  有了行编号，就可以具体到哪一行了
  还可以取一个范围，也是由行编号来的，用逗号隔开。
  s 是替换命令 p 是打印命令
  sed '/foo/,/bar/ s/baz/quux/g' 仅替换范围内的行。这个范围并不是以行号来限定的，而是根据正文内容。挺有用的。
  像ed ex 或 vi 内的冒号命令，都认识此语法。当然，在emacs的evil模式下也是认得的。
  否定正则表达式
  有时，将命令应用于不匹配于特定模式的每一行，也很有用。在下面的例子来说明

  假如这一行没有这么一个东西，就把xx 改成yy
  /used/!s/new/used/g   将没有used 的每一行的new 改成used
  sed 还可以作为head 使用
  语法是 sed 3q file  打印头三行

  写的灵活点就是
  count=$1
  sed ${count}q $2
  q 要求sed马上离开，不再读取其他输入，或执行任何命令。
  了解行与字符串的差异是相当重要的。大部分简易程序都是处理输入数据的行，在这些情况下，不会有内嵌的换行字符出现在将要匹配的数据中。
  但字符串就不同了，他可能包括换行符，可能还有空字符。这种情况下，^ 与 $ 就无法匹配内嵌的换行字符。他们只是用来匹配字符串的开头
  和结尾。也就是在这种程序语言中，工具的含义发生了微妙变化。
  字段处理，一行表示一个记录。对于一行内分割字段的惯例，是用空格或制表符 空白
  或用特定的定界符

  使用cut 选定字段
  用法如下 
  cut -d : -f 1,5 /etc/passwd 取出第一段 和第五段内容
  cut -c list [file...] 以字符为主，执行剪下的操作。list为字符编号或一段范围的列表，以逗号隔开 如 1,2,5-10,34 剪下字符
  cut -f list [-d delim] [file...] field 剪下字段

  join 连接
  join [options ...] file1 file2
  以共同的一个键值，将已存储文件内的记录加以结合
  -1 field1
  -2 field2 标明要结合的字段，-1 field1指从file1中取出field1,-2 field2 是指从file2 中取出field2，字段编号自1开始，而非0
  -o file.field 输出file中的field 字段。
  -t separator 
  使用separator 作为输入字段分割字符，而非使用空白。

  这个有点难 
  现在讲到重点了，awk工具
  本节，我们介绍awk 的基本概念，随后，你看到这样的 单命令行程序 （one-liners) 就会比较了解了。
  模式与操作
  awk ‘program ' [file...]
  awk 读取命令行上所指定的各个文件，一次读取一行，在针对每一行，应用命令。awk 基本架构为
  pattern {action}
  pattern 可以是任何表达式，但在单命令行程序里，他通常是由斜括号扩起来的 ege。action 为awk语句 
  对于每条记录
  · [^abc...] 这个否定的字符序列匹配所有的字符除了 "abc...".
  · r* 这个匹配以"r" 开始的后面有 0 个或者多个字符的字符串。
  · r+ 这个匹配以"r" 开始的后面有一个或者多个字符的表达式。
  · r? 以"r" 开始后面有 0 个或者 1 个其他的字符。
  · r1|r2 匹配"r1"或者"r2"。
  · (r1|r2) 匹配"r1"或者 "r2"并且把它当作一个分类 正则表达式。

* 编译器技术
* 计算机网络(输入输出）
  电话交换（单任务）
  分组交换（多任务）
  tcp/ip分层
  客户端/服务器
#+BEGIN_SRC 
  万维网：浏览器/服务器  浏览器充当排字机的功能。把浏览器比作一台简单的解释器，网页是一段简单的程序。
  web 浏览器请求一个页面时,Web服务器会在发送实际页面内容前,先发送一些头信息(header)
  浏览器需要这些头信息解析随后的页面内容..(交流嘛)
  Content-Type:text/html (内容类型或MIME类型)
  MIME类型(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型,是描述消息内容类型的因特网标准。
  | jpeg       | image/jpeg               |
  | png        | image/png                |
  | javascript | application/x-javascript |
  | css        | text/css                 |
  | xhtml      | application/xhtml+xml(严格形式,但一般用宽松形式) |

  当浏览器渲染Web页面的时候,它会构造一个文档对象模型(DOM),用一个对象的集合表示
  页面上的HTML元素.除此还有window和document这些不和特定页面元素绑定的全局对象.
  对象有共有属性
  还有私有属性
#+END_SRC
百货商店
#+BEGIN_SRC 
javascript:加入了语言的支持，更动态。可变。
FTP:客户端/服务器
ssh:客户端/服务器
进程间通信
搜索引擎
email ->基于www的电子邮件
SMTP 局限于ascii,不能中文
MIME 作了扩展，可以传输二进制
防火墙：特殊编程的路由器
音视频：RTSP
#+END_SRC
** 联网(网内名字)
   （1）IP地址
   （2）子网掩码
服务
#+BEGIN_SRC 
   （3）默认路由IP
   （4）域名服务IP
#+END_SRC
   或者用DHCP
* 资源
  LDP: Linux Documentation Project (http://www.tldp.org/)
  DDP: Debian Documentation Project (http://www.debian.org/doc/)
