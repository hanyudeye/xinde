* PHP
**   PHP 包含文件
: require 引入或者包含外部php文件
: include     
**    类型   往下一直在扩展概念 (类,函数 忽略大小写)
*** 数组
**** 索引数组 - 带有数字索引的数组 $arr; $arr[]=1;$arr[]=3;| $arr=array();
**** 关联数组 - 带有指定键的数组
**** 多维数组 - 包含一个或多个数组的数组
***** array function
	foreach($array as $key=>$value){}遍历数组
	each() 函数返回当前元素的键名和键值，并将内部指针向前移动。
	该元素的键名和键值会被返回带有四个元素的数组中。两个元素（1 和 Value）包含键值，两个元素（0 和 Key）包含键名。
	array()创建数组
	current() - 返回数组中的当前元素的值
	end() - 将内部指针指向数组中的最后一个元素，并输出
	next() - 将内部指针指向数组中的下一个元素，并输出
	prev() - 将内部指针指向数组中的上一个元素，并输出
	reset() - 将内部指针指向数组中的第一个元素，并输出
	array_values() 函数返回一个包含给定数组中所有键值的数组，但不保留键名。
	int count ( mixed $var [, int $mode = COUNT_NORMAL ] )统计一个数组里的所有元素，或者一个对象里的东西。
	is_array() - 检测变量是否是数组
	array_count_values() returns an array using the values of array as keys and their frequency in array as values. 返回一个数组，统计的是每个值的数量，相等，数量加１
	 array_unique(array) 删除数组中重复的值,返回新数组
	 array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )  过滤器,把每个值传给callback函数,如果返回值为真，就返回过来
	 usort()	使用用户自定义的比较函数对数组进行排序。
	 array_slice(array,start,length,preserve) 函数在数组中根据条件取出一段值，并返回。
	 array()	创建数组。
	 array_change_key_case()	把数组中所有键更改为小写或大写。
	 array_chunk()	把一个数组分割为新的数组块。
	 array_column()	返回输入数组中某个单一列的值。
	 array_combine()	通过合并两个数组来创建一个新数组。
	 array_count_values()	用于统计数组中所有值出现的次数。
	 array_diff()	比较数组，返回差集（只比较键值）。
	 array_diff_assoc()	比较数组，返回差集（比较键名和键值）。
	 array_diff_key()	比较数组，返回差集（只比较键名）。
	 array_diff_uassoc()	比较数组，返回差集（比较键名和键值，使用用户自定义的键名比较函数）。
	 array_diff_ukey()	比较数组，返回差集（只比较键名，使用用户自定义的键名比较函数）。
	 array_fill()	用给定的键值填充数组。
	 array_fill_keys()	用指定键名的给定键值填充数组。
	 array_filter()	用回调函数过滤数组中的元素。
	 array_flip()	交换数组中的键和值。
	 array_intersect()	比较数组，返回交集（只比较键值）。
	 array_intersect_assoc()	比较数组，返回交集（比较键名和键值）。
	 array_intersect_key()	比较数组，返回交集（只比较键名）。
	 array_intersect_uassoc()	比较数组，返回交集（比较键名和键值，使用用户自定义的键名比较函数）。
	 array_intersect_ukey()	比较数组，返回交集（只比较键名，使用用户自定义的键名比较函数）。
	 array_key_exists()	检查指定的键名是否存在于数组中。
	 array_keys()	返回数组中所有的键名。
	 array_map()	把数组中的每个值发送到用户自定义函数，返回新的值。
	 array_merge()	把一个或多个数组合并为一个数组。
	 array_merge_recursive()	递归地合并一个或多个数组。
	 array_multisort()	对多个数组或多维数组进行排序。
	 array_pad()	用值将数组填补到指定长度。
	 array_pop()	删除数组的最后一个元素（出栈）。
	 array_product()	计算数组中所有值的乘积。
	 array_push()	将一个或多个元素插入数组的末尾（入栈）。
	 array_rand()	返回数组中一个或多个随机的键。
	 array_reduce()	通过使用用户自定义函数，以字符串返回数组。
	 array_replace()	使用后面数组的值替换第一个数组的值。
	 array_replace_recursive()	递归地使用后面数组的值替换第一个数组的值。
	 array_reverse()	以相反的顺序返回数组。
	 array_search()	搜索数组中给定的值并返回键名。
	 array_shift()	删除数组中首个元素，并返回被删除元素的值。
	 array_slice()	返回数组中被选定的部分。
	 array_splice()	删除并替换数组中指定的元素。
	 array_sum()	返回数组中值的和。
	 array_udiff()	比较数组，返回差集（只比较值，使用一个用户自定义的键名比较函数）。
	 array_udiff_assoc()	比较数组，返回差集（比较键和值，使用内建函数比较键名，使用用户自定义函数比较键值）。
	 array_udiff_uassoc()	比较数组，返回差集（比较键和值，使用两个用户自定义的键名比较函数）。
	 array_uintersect()	比较数组，返回交集（只比较值，使用一个用户自定义的键名比较函数）。
	 array_uintersect_assoc()	比较数组，返回交集（比较键和值，使用内建函数比较键名，使用用户自定义函数比较键值）。
	 array_uintersect_uassoc()	比较数组，返回交集（比较键和值，使用两个用户自定义的键名比较函数）。
	 array_unique()	删除数组中的重复值。
	 array_unshift()	在数组开头插入一个或多个元素。
:  int array_unshift ( array &$array , mixed $var [, mixed $... ] )
	 array_values()	返回数组中所有的值。
	 array_walk()	对数组中的每个成员应用用户函数。
	 array_walk_recursive()	对数组中的每个成员递归地应用用户函数。
	 arsort()	对关联数组按照键值进行降序排序。
	 asort()	对关联数组按照键值进行升序排序。
	 compact()	创建包含变量名和它们的值的数组。
	 count()	返回数组中元素的数目。
	 current()	返回数组中的当前元素。
	 each()	返回数组中当前的键／值对。
	 end()	将数组的内部指针指向最后一个元素。
	 extract()	从数组中将变量导入到当前的符号表。
	 in_array()	检查数组中是否存在指定的值。
: bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )
: 在 haystack[干草堆] 中搜索 needle[针]，如果没有设置 strict[严格的] 则使用宽松的比较。 
	 key()	从关联数组中取得键名。
	 krsort()	对数组按照键名逆向排序。
	 ksort()	对数组按照键名排序。
	 list()	把数组中的值赋给一些变量。
	 natcasesort()	用“自然排序”算法对数组进行不区分大小写字母的排序。
	 natsort()	用“自然排序”算法对数组排序。
	 next()	将数组中的内部指针向前移动一位。
	 pos()	current() 的别名。
	 prev()	将数组的内部指针倒回一位。
	 range()	创建包含指定范围单元的数组。
	 reset()	将数组的内部指针指向第一个元素。
	 rsort()	对数组逆向排序。
	 shuffle()	将数组打乱。
	 sizeof()	count() 的别名。
	 sort()	对数组排序。
	 uasort()	使用用户自定义的比较函数对数组中的键值进行排序。
	 uksort()	使用用户自定义的比较函数对数组中的键名进行排序。

: print_r(array_filter($array1, "odd"));
*** date
	date(Y年m月d日l星期/M英文月,而不是数字)
	((int)date('h')+8)时间,东八区要加8小时
	h - 带有首位零的 12 小时小时格式
	i - 带有首位零的分钟 (minute)
	s - 带有首位零的秒（00 -59）(second)
	a - 小写的午前和午后（am 或 pm）ante (before) meridiem post meridiem
	cal_days_in_month()	针对指定的年份和历法，返回一个月中的天数。
	cal_from_jd()	把儒略日计数转换为指定历法的日期。
	cal_info()	返回有关指定历法的信息。
	cal_to_jd()	把指定历法中的日期转换为儒略日计数。
	easter_date()	返回指定年份的复活节午夜的 Unix 时间戳。
	easter_days()	返回指定年份的复活节与 3 月 21 日之间的天数。
	frenchtojd()	把法国共和历的日期转换成为儒略日计数。
	gregoriantojd()	把格利高里历法的日期转换成为儒略日计数。
	jddayofweek()	返回日期在周几。
	jdmonthname()	返回月的名称。
	jdtofrench()	把儒略日计数转换为法国共和历的日期。
	jdtogregorian()	将格利高里历法转换成为儒略日计数。
	jdtojewish()	把儒略日计数转换为犹太历法的日期。
	jdtojulian()	把儒略日计数转换为儒略历法的日期。
	jdtounix()	把儒略日计数转换为 Unix 时间戳。
	jewishtojd()	把犹太历法的日期转换为儒略日计数。
	juliantojd()	把儒略历法的日期转换为儒略日计数。
	unixtojd()	把 Unix 时间戳转换为儒略日计数。

	Date/Time 函数的行为受到 php.ini 中设置的影响：
	date.timezone 	默认时区（所有的 Date/Time 函数使用该选项） 	
	date.default_latitude 	默认纬度（date_sunrise() 和 date_sunset() 使用该选项）
	date.default_longitude 	默认经度（date_sunrise() 和 date_sunset() 使用该选项）
	date.sunrise_zenith 	默认日出天顶（date_sunrise() 和 date_sunset() 使用该选项）
	date.sunset_zenith 	默认日落天顶（date_sunrise() 和 date_sunset() 使用该选项）
	PHP 5 Date/Time 函数
	函数 	描述
	checkdate() 	验证格利高里日期。
	date_add() 	添加日、月、年、时、分和秒到日期。
	date_create_from_format() 	返回根据指定格式进行格式化的新的 DateTime 对象。
	date_create() 	返回新的 DateTime 对象。
	date_date_set() 	设置新日期。
	date_default_timezone_get() 	返回由所有的 Date/Time 函数使用的默认时区。
	date_default_timezone_set() 	设置由所有的 Date/Time 函数使用的默认时区。
	date_diff() 	返回两个日期间的差值。
	date_format() 	返回根据指定格式进行格式化的日期。
	date_get_last_errors() 	返回日期字符串中的警告/错误。
	date_interval_create_from_date_string() 	从字符串的相关部分建立 DateInterval。
	date_interval_format() 	格式化时间间隔。
	date_isodate_set() 	设置 ISO 日期。
	date_modify() 	修改时间戳。
	date_offset_get() 	返回时区偏移。
	date_parse_from_format() 	根据指定的格式返回带有关于指定日期的详细信息的关联数组。
	date_parse() 	返回带有关于指定日期的详细信息的关联数组。
	date_sub() 	从指定日期减去日、月、年、时、分和秒。
	date_sun_info() 	返回包含有关指定日期与地点的日出/日落和黄昏开始/黄昏结束的信息的数组。
	date_sunrise() 	返回指定日期与位置的日出时间。
	date_sunset() 	返回指定日期与位置的日落时间。
	date_time_set() 	设置时间。
	date_timestamp_get() 	返回 Unix 时间戳。
	date_timestamp_set() 	设置基于 Unix 时间戳的日期和时间。
	date_timezone_get() 	返回给定 DateTime 对象的时区。
	date_timezone_set() 	设置 DateTime 对象的时区。
	date() 	格式化本地日期和时间。
	getdate() 	返回某个时间戳或者当前本地的日期/时间的日期/时间信息。
	gettimeofday() 	返回当前时间。
	gmdate() 	格式化 GMT/UTC 日期和时间。
	gmmktime() 	返回 GMT 日期的 UNIX 时间戳。
	gmstrftime() 	根据区域设置对 GMT/UTC 日期和时间进行格式化。
	idate() 	将本地时间/日期格式化为整数。
	localtime() 	返回本地时间。
	microtime() 	返回当前时间的微秒数。
	mktime() 	返回日期的 Unix 时间戳。
	strftime() 	根据区域设置对本地时间/日期进行格式化。
	strptime() 	解析由 strftime() 生成的时间/日期。
	strtotime() 	将任何英文文本的日期或时间描述解析为 Unix 时间戳。
	time() 	返回当前时间的 Unix 时间戳。
	timezone_abbreviations_list() 	返回包含夏令时、偏移量和时区名称的关联数组。
	timezone_identifiers_list() 	返回带有所有时区标识符的索引数组。
	timezone_location_get() 	返回指定时区的位置信息。
	timezone_name_from_abbr() 	根据时区缩略语返回时区名称。
	timezone_name_get() 	返回时区的名称。
	timezone_offset_get() 	返回相对于 GMT 的时区偏移。
	timezone_open() 	创建新的 DateTimeZone 对象。
	timezone_transitions_get() 	返回时区的所有转换。
	timezone_version_get() 	返回时区数据库的版本。

*** Directory 函数
	chdir()	改变当前的目录。
	chroot()	改变根目录。
	closedir()	关闭目录句柄。
	dir()	返回 Directory 类的实例。
	getcwd()	返回当前工作目录。
	opendir()	打开目录句柄。
	readdir()	返回目录句柄中的条目。
	rewinddir()	重置目录句柄。
	scandir()	返回指定目录中的文件和目录的数组。

**    变量
变量作用域：相对于函数而言
*** local（局部）
*** global（全局）来自于$var= $GLOBALS["var"] === global $var(建立一个引用,不能赋值)
*** static（静态）
**    常量
***  定义 define("const",33);
***  预定义(全局)
**** __file__ | __FILE__ 函数返回的是脚本所在在的路径
**** 服务器数据 $_SERVER
	$_SERVER["SERVER_PORT"]  //获取端口  
	$_SERVER['HTTP_HOST']  	 //获取域名或主机地址 如test.cn
  	$_SERVER['SERVER_NAME']  //获取域名或主机地址 注：只是主域名如test.cn
	$_SERVER["REQUEST_URI"]  //获取域名后的详细地址 如：/index.php?id=123 ...  
	$_SERVER['SERVER_ROOT']  //请求的网页主目录
: $_SERVER['SCRIPT_NAME']  //包含当前脚本的路径
: $_SERVER['PHP_SELF']  //获取PHP文件名 
: 以 CGI 方式運行，二者就有明顯不同的差異,一般差不多的
	$_SERVER["QUERY_STRING"]  //获取PHP后的网址参数  
	$_SERVER['HTTP_REFERER']  //来源网页的详细地址  
	HTTPReferer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，
	服务器基此可以获得一些信息用于处理
**** 客户机数据 $_POST  $_GET 
**    表达式
**    运算符
**    流程控制
**    函数 调用的参数是一份拷贝
*** 定义 function
*** 定义引用返回function &functionname
引用返回用在当你想用函数找到引用该被绑定的一个变量上面.
#+BEGIN_SRC php -n -r 
    function &find_var($param){
return $found_var;
}
$foo=&find_var($bar);
$foo->x=2;
#+END_SRC
**   库函数
*** file
	fopen("filename",'w')  //可以指定绝对路径或相对路径
	"r" 	只读方式打开，将文件指针指向文件头。
	"r+" 	读写方式打开，将文件指针指向文件头。
	"w" 	写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
	"w+" 	读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
	"a" 	写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
	"a+" 	读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
	"x" 	创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则报错.
	basename() 	返回路径中的文件名部分。
	chgrp() 	改变文件组。 	
	chmod() 	改变文件模式。 
	chown() 	改变文件所有者。 	
	clearstatcache() 	清除文件状态缓存。 	
	fopen() 可以通过http路径打开,可以在php.ini 中配置allow_url_fopen   //unix中要注意文件的访问权限
	copy() 	复制文件。
	fread(filepoint,length)	读取打开的文件。
	fwrite(file,string,length)   
	file_get_contents(filepath) 函数把整个文件读入一个字符串中。
	file_put_contents(filepath,filecontent) 在ftp中要用到flags和context标志
	basename()
	is_readable()
	feof(fp)
	fgets()
	fgetss() 去掉文件中的html格式
	readfile(filename) 输出到浏览器
	file(file) 返回值是文件内容
	fgetc()
	file_exists()
	filesize()
	unlink() 删除文件
	rewind()
	fseek()
	ftell()
	URL中的域名不区分大小写,但是路径和文件名可能区分大小写!!!!!
	chgrp() 	改变文件组。 	
	chmod() 	改变文件模式。 	
	chown() 	改变文件所有者。 	
	clearstatcache() 	清除文件状态缓存。 	
	copy() 	复制文件。 	
	delete() 	参见 unlink() 或 unset()。 	 
	dirname() 	返回路径中的目录名称部分。 	
	disk_free_space() 	返回目录的可用空间。 	
	disk_total_space() 	返回一个目录的磁盘总容量。
	diskfreespace() 	disk_free_space() 的别名。
	fclose() 	关闭打开的文件。 	
	feof() 	测试文件指针是否到了文件结束的位置。 	
	fflush() 	向打开的文件输出缓冲内容。 
	fgetc() 	从打开的文件中返回字符。 
	fgetcsv() 	从打开的文件中解析一行，校验 CSV 字段。 	
	fgets() 	从打开的文件中返回一行。 	
	fgetss() 	从打开的文件中读取一行并过滤掉 HTML 和 PHP 标记。 	  file() 	把文件读入一个数组中。 	
	file_exists() 	检查文件或目录是否存在。
	file_get_contents() 	将文件读入字符串。 	
	file_put_contents() 	将字符串写入文件。 	
	fileatime() 	返回文件的上次访问时间。 	
	filectime() 	返回文件的上次改变时间。 	
	filegroup() 	返回文件的组 ID。 	
	fileinode() 	返回文件的 inode 编号。 
	filemtime() 	返回文件的上次修改时间。
	fileowner() 	文件的 user ID （所有者）。
	fileperms() 	返回文件的权限。 	
	filesize() 	返回文件大小。 	
	filetype() 	返回文件类型。 	
	flock() 	锁定或释放文件。
	fnmatch() 	根据指定的模式来匹配文件名或字符串。 	
	fopen() 	打开一个文件或 URL。 	
	fpassthru() 	从打开的文件中读数据，直到 EOF，并向输出缓冲写结果
	fputcsv() 	将行格式化为 CSV 并写入一个打开的文件中。 	
	fputs() 	fwrite() 的别名。 	
	fread() 	读取打开的文件。 	
	fscanf() 	根据指定的格式对输入进行解析。
	fseek() 	在打开的文件中定位。 	
	fstat() 	返回关于一个打开的文件的信息。
	ftell() 	返回文件指针的读/写位置 
	ftruncate() 	将文件截断到指定的长度。
	fwrite() 	写入文件。 	
	glob() 	返回一个包含匹配指定模式的文件名/目录的数组。 	
	is_dir() 	判断指定的文件名是否是一个目录。 	
	is_executable() 	判断文件是否可执行。 	
	is_file() 	判断指定文件是否为常规的文件。 	
	is_link() 	判断指定的文件是否是连接。 	
	is_readable() 	判断文件是否可读。 	
	is_uploaded_file() 	判断文件是否是通过 HTTP POST 上传的。 	
	is_writable() 	判断文件是否可写。 	
	is_writeable() 	is_writable() 的别名。 	
	link() 	创建一个硬连接。 	
	linkinfo() 	返回有关一个硬连接的信息。 	
	lstat() 	返回关于文件或符号连接的信息。 	
	mkdir() 	创建目录。 	
	move_uploaded_file() 	将上传的文件移动到新位置。 	
	parse_ini_file() 	解析一个配置文件。 	
	pathinfo() 	返回关于文件路径的信息。 	
	pclose() 	关闭有 popen() 打开的进程。 	
	popen() 	打开一个进程。 	
	readfile() 	读取一个文件，并输出到输出缓冲。 	
	readlink() 	返回符号连接的目标。 	
	realpath() 	返回绝对路径名。 	
	rename() 	重名名文件或目录。 	
	rewind() 	倒回文件指针的位置。 	
	rmdir() 	删除空的目录。 	
	set_file_buffer() 	设置已打开文件的缓冲大小。 	
	stat() 	返回关于文件的信息。 	
	symlink() 	创建符号连接。 	
	tempnam() 	创建唯一的临时文件。
	tmpfile() 	建立临时文件。 	
	touch() 	设置文件的访问和修改时间。 	
	umask() 	改变文件的文件权限。 	
	unlink() 	删除文件。

	isset(varname)判断变量是否已经配置，就是变量存不存在值
	unset(varname)取消配置；
	empty(varname) 对于值是0的数返回true，这里要当心

*** PHP 过滤器用于对来自非安全来源的数据（比如用户输入）进行验证和过滤。
	filter_has_var() 	检查是否存在指定输入类型的变量。 	5
	filter_id() 	返回指定过滤器的 ID 号。 	5
	filter_input() 	从脚本外部获取输入，并进行过滤。 	5
	filter_input_array() 	从脚本外部获取多项输入，并进行过滤。 	5
	filter_list() 	返回包含所有得到支持的过滤器的一个数组。 	5
	filter_var_array() 	获取多项变量，并进行过滤。 	5
	filter_var() 	获取一个变量，并进行过滤。

*** HTTP 函数允许您在其他输出被发送之前，对由 Web 服务器发送到浏览器的信息进行操作。
	header() 	向客户端发送原始的 HTTP 报头。
	headers_list() 	返回已发送的（或待发送的）响应头部的一个列表。
	headers_sent() 	检查 HTTP 报头是否发送/已发送到何处。
	setcookie() 	定义与 HTTP 报头的其余部分一共发送的 cookie。
	setrawcookie() 	定义与 HTTP 报头的其余部分一共发送的 cookie（不进行 URL 编码）。

*** 数学 (Math) 函数能处理 integer 和 float 范围内的值。
	abs() 	绝对值。 	3
	acos() 	反余弦。 	3
	acosh() 	反双曲余弦。 	4
	asin() 	反正弦。 	3
	asinh() 	反双曲正弦。 	4
	atan() 	反正切。 	3
	atan2() 	两个参数的反正切。 	3
	atanh() 	反双曲正切。 	4
	base_convert() 	在任意进制之间转换数字。 	3
	bindec() 	把二进制转换为十进制。 	3
	ceil() 	向上舍入为最接近的整数。 	3
	cos() 	余弦。 	3
	cosh() 	双曲余弦。 	4
	decbin() 	把十进制转换为二进制。 	3
	dechex() 	把十进制转换为十六进制。 	3
	decoct() 	把十进制转换为八进制。 	3
	deg2rad() 	将角度转换为弧度。 	3
	exp() 	返回 Ex 的值。 	3
	expm1() 	返回 Ex - 1 的值。 	4
	floor() 	向下舍入为最接近的整数。 	3
	fmod() 	返回除法的浮点数余数。 	4
	getrandmax() 	显示随机数最大的可能值。 	3
	hexdec() 	把十六进制转换为十进制。 	3
	hypot() 	计算直角三角形的斜边长度。 	4
	is_finite() 	判断是否为有限值。 	4
	is_infinite() 	判断是否为无限值。 	4
	is_nan() 	判断是否为合法数值。 	4
	lcg_value() 	返回范围为 (0, 1) 的一个伪随机数。 	4
	log() 	自然对数。 	3
	log10() 	以 10 为底的对数。 	3
	log1p() 	返回 log(1 + number)。 	4
	max() 	返回最大值。 	3
	min() 	返回最小值。 	3
	mt_getrandmax() 	显示随机数的最大可能值。 	3
	mt_rand() 	使用 Mersenne Twister 算法返回随机整数。 	3
	mt_srand() 	播种 Mersenne Twister 随机数生成器。 	3
	octdec() 	把八进制转换为十进制。 	3
	pi() 	返回圆周率的值。 	3
	pow() 	返回 x 的 y 次方。 	3
	rad2deg() 	把弧度数转换为角度数。 	3
	rand() 	返回随机整数。 	3
	round() 	对浮点数进行四舍五入。 	3
	sin() 	正弦。 	3
	sinh() 	双曲正弦。 	4
	sqrt() 	平方根。 	3
	srand() 	播下随机数发生器种子。 	3
	tan() 	正切。 	3
	tanh() 	双曲正切。

*** string	
    mb_substr(strip_tags( $list["content"]),0,20) 截取字符串 对中文的支持
    ucfirst(string)->string第一个字大写
    addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符
    addslashes — 使用反斜线引用字符串
    bin2hex — 函数把包含数据的二进制字符串转换为十六进制值
    chop — rtrim 的别名
    chr — 返回指定的字符
    chunk_split — 将字符串分割成小块
    convert_cyr_string — 将字符由一种 Cyrillic 字符转换成另一种
    convert_uudecode — 解码一个 uuencode 编码的字符串
    convert_uuencode — 使用 uuencode 编码一个字符串
    count_chars — 返回字符串所用字符的信息
    crc32 — 计算一个字符串的 crc32 多项式
    crypt — 单向字符串散列
****    echo — 输出一个或多个字符串
****    explode — 使用一个字符串分割另一个字符串
: array explode ( string $delimiter , string $string [, int $limit ] )

    fprintf — 将格式化后的字符串写入到流
    get_html_translation_table — 返回使用 htmlspecialchars 和 htmlentities 后的转换表
    hebrev — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）
    hebrevc — 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符
    hex2bin — 转换十六进制字符串为二进制字符串
    html_entity_decode — Convert all HTML entities to their applicable characters
    htmlentities — Convert all applicable characters to HTML entities
    htmlspecialchars_decode — 将特殊的 HTML 实体转换回普通字符
    htmlspecialchars — Convert special characters to HTML entities
    implode — 将一个一维数组的值转化为字符串
    join — 别名 implode
    lcfirst — 使一个字符串的第一个字符小写
    levenshtein — 计算两个字符串之间的编辑距离
    localeconv — Get numeric formatting information
    ltrim — 删除字符串开头的空白字符（或其他字符）
    md5_file — 计算指定文件的 MD5 散列值
    md5 — 计算字符串的 MD5 散列值
    metaphone — Calculate the metaphone key of a string
    money_format — 将数字格式化成货币字符串
    nl_langinfo — Query language and locale information
    nl2br — 在字符串所有新行之前插入 HTML 换行标记
    number_format — 以千位分隔符方式格式化一个数字
    ord — 返回字符的 ASCII 码值
    parse_str — 将字符串解析成多个变量
    print — 输出字符串
    printf — 输出格式化字符串
    quoted_printable_decode — 将 quoted-printable 字符串转换为 8-bit 字符串
    quoted_printable_encode — 将 8-bit 字符串转换成 quoted-printable 字符串
    quotemeta — 转义元字符集
    rtrim — 删除字符串末端的空白字符（或者其他字符）
    setlocale — 设置地区信息
    sha1_file — 计算文件的 sha1 散列值
    sha1 — 计算字符串的 sha1 散列值
    similar_text — 计算两个字符串的相似度
    soundex — Calculate the soundex key of a string
    sprintf — Return a formatted string
    sscanf — 根据指定格式解析输入的字符
    str_getcsv — 解析 CSV 字符串为一个数组
    str_ireplace — str_replace 的忽略大小写版本
    str_pad — 使用另一个字符串填充字符串为指定长度
    str_repeat — 重复一个字符串
    str_replace — 子字符串替换
    str_rot13 — 对字符串执行 ROT13 转换
    str_shuffle — 随机打乱一个字符串
    str_split — 将字符串转换为数组
    str_word_count — 返回字符串中单词的使用情况
    strcasecmp — 二进制安全比较字符串（不区分大小写）
    strchr — 别名 strstr
    strcmp — 二进制安全字符串比较
    strcoll — 基于区域设置的字符串比较
    strcspn — 获取不匹配遮罩的起始子字符串的长度
    strip_tags — 从字符串中去除 HTML 和 PHP 标记
    stripcslashes — 反引用一个使用 addcslashes 转义的字符串
    stripos — 查找字符串首次出现的位置（不区分大小写）
    stripslashes — 反引用一个引用字符串
    stristr — strstr 函数的忽略大小写版本
    strlen — 获取字符串长度
    strnatcasecmp — 使用“自然顺序”算法比较字符串（不区分大小写）
    strnatcmp — 使用自然排序算法比较字符串
    strncasecmp — 二进制安全比较字符串开头的若干个字符（不区分大小写）
    strncmp — 二进制安全比较字符串开头的若干个字符
    strpbrk — 在字符串中查找一组字符的任何一个字符
    strpos — 查找字符串首次出现的位置
    strrchr — 查找指定字符在字符串中的最后一次出现
    strrev — 反转字符串
    strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）
    strrpos — 计算指定字符串在目标字符串中最后一次出现的位置
    strspn — 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。
    strstr — 查找字符串的首次出现
    strtok — 标记分割字符串
    strtolower — 将字符串转化为小写
    strtoupper — 将字符串转化为大写
    strtr — 转换指定字符
    substr_compare — 二进制安全比较字符串（从偏移位置比较指定长度）
    substr_count — 计算字串出现的次数
    substr_replace — 替换字符串的子串
    substr — 返回字符串的子串
    trim — 去除字符串首尾处的空白字符（或者其他字符）
    ucfirst — 将字符串的首字母转换为大写
    ucwords — 将字符串中每个单词的首字母转换为大写
    vfprintf — 将格式化字符串写入流
    vprintf — 输出格式化字符串
    vsprintf — 返回格式化字符串
    wordwrap — 打断字符串为指定数量的字串

*** 网络 函数
    checkdnsrr — 给指定的主机（域名）或者IP地址做DNS通信检查
    closelog — 关闭系统日志链接
    define_syslog_variables — Initializes all syslog related variables
    dns_check_record — 别名 checkdnsrr
    dns_get_mx — 别名 getmxrr
    dns_get_record — 获取指定主机的DNS记录
    fsockopen — 打开一个网络连接或者一个Unix套接字连接
    gethostbyaddr — 获取指定的IP地址对应的主机名  //这个只能查到本机的主机名,可能跟域名反向解析有关,不能反向解析,只能解析host文件里面的
    gethostbyname — Get the IPv4 address corresponding to a given Internet host name
    gethostbynamel — Get a list of IPv4 addresses corresponding to a given Internet host name
    gethostname — Gets the host name
    getmxrr — Get MX records corresponding to a given Internet host name
    getprotobyname — Get protocol number associated with protocol name
    getprotobynumber — Get protocol name associated with protocol number
    getservbyname — Get port number associated with an Internet service and protocol
    getservbyport — Get Internet service which corresponds to port and protocol
    header_register_callback — Call a header function
    header_remove — Remove previously set headers
    header — 发送原生 HTTP 头
    headers_list — Returns a list of response headers sent (or ready to send)
    headers_sent — Checks if or where headers have been sent
    http_response_code — Get or Set the HTTP response code
    inet_ntop — Converts a packed internet address to a human readable representation
    inet_pton — Converts a human readable IP address to its packed in_addr representation
    ip2long — 将一个IPV4的字符串互联网协议转换成数字格式
    long2ip — Converts an long integer address into a string in (IPv4) Internet standard dotted format
    openlog — Open connection to system logger
    pfsockopen — 打开一个持久的网络连接或者Unix套接字连接。
    setcookie — Send a cookie
    setrawcookie — Send a cookie without urlencoding the cookie value
    socket_get_status — 别名 stream_get_meta_data
    socket_set_blocking — 别名 stream_set_blocking
    socket_set_timeout — 别名 stream_set_timeout
    syslog — Generate a system log message

*** pthreads
		Threaded — Threaded 类
        Threaded::chunk — 操作
        Threaded::count — Manipulation
        Threaded::extend — Runtime Manipulation
        Threaded::from — Creation
        Threaded::getTerminationInfo — Error Detection
        Threaded::isRunning — State Detection
        Threaded::isTerminated — State Detection
        Threaded::isWaiting — State Detection
        Threaded::lock — Synchronization
        Threaded::merge — Manipulation
        Threaded::notify — Synchronization
        Threaded::pop — Manipulation
        Threaded::run — Execution
        Threaded::shift — Manipulation
        Threaded::synchronized — Synchronization
        Threaded::unlock — Synchronization
        Threaded::wait — Synchronization
		Thread — Thread 类
        Thread::detach — 执行
        Thread::getCreatorId — 识别
        Thread::getCurrentThread — 识别
        Thread::getCurrentThreadId — 识别
        Thread::getThreadId — 识别
        Thread::globally — 执行
        Thread::isJoined — 状态监测
        Thread::isStarted — 状态检测
        Thread::join — 同步
        Thread::kill — 执行
        Thread::start — 执行
***  Worker — Worker 类
        Worker::getStacked — 栈分析
        Worker::isShutdown — 状态检测
        Worker::isWorking — 状态检测
        Worker::shutdown — 同步
        Worker::stack — 栈操作
        Worker::unstack — 栈操作
	Collectable — The Collectable class
        Collectable::isGarbage — Determine whether an object has been marked as garbage
        Collectable::setGarbage — Mark an object as garbage
    Modifiers — 方法修饰符
***    Pool — Pool 类
        Pool::collect — 回收已完成任务的引用
        Pool::__construct — 创建新的 Worker 对象池
        Pool::resize — 改变 Pool 对象的可容纳 Worker 对象的数量
        Pool::shutdown — 停止所有的 Worker 对象
        Pool::submit — 提交对象以执行
        Pool::submitTo — 提交对象以执行
***    Mutex — Mutex 类
        Mutex::create — 创建一个互斥量
        Mutex::destroy — 销毁互斥量
        Mutex::lock — 给互斥量加锁
        Mutex::trylock — 尝试给互斥量加锁
        Mutex::unlock — 释放互斥量上的锁
***    Cond — Cond 类
        Cond::broadcast — 广播条件变量
        Cond::create — 创建一个条件变量
        Cond::destroy — 销毁条件变量
        Cond::signal — 发送唤醒信号
        Cond::wait — 等待
		
*** PCRE 函数 Perl Compatible Regular Expressions 兼容正则
****    preg_filter — 执行一个正则表达式搜索和替换
****    preg_grep — 返回匹配模式的数组条目
****    preg_last_error — 返回最后一个PCRE正则执行产生的错误代码
****    preg_match_all — 执行一个全局正则表达式匹配
****    preg_match — 执行一个正则表达式匹配
****    preg_quote — 转义正则表达式字符
****    preg_replace_callback_array — Perform a regular expression search and replace using callbacks
****    preg_replace_callback — 执行一个正则表达式搜索并且使用一个回调进行替换
****    preg_replace — 执行一个正则表达式的搜索和替换
: mixed preg_replace( mixed pattern, mixed replacement, mixed subject [, int limit ] )
: $str = preg_replace('/\s/','-',$str);  这里要注意,匹配模式要加载/ /中间
****    preg_split — 通过一个正则表达式分隔字符串		
*** JSON 函数 
    json_decode — 对 JSON 格式的字符串进行解码
    json_encode — 对变量进行 JSON 编码
    json_last_error_msg — Returns the error string of the last json_encode() or json_decode() call
    json_last_error — 返回最后发生的错误

*** Socket 函数

    socket_accept — Accepts a connection on a socket
    socket_bind — 给套接字绑定名字
    socket_clear_error — 清除套接字或者最后的错误代码上的错误
    socket_close — 关闭套接字资源
    socket_cmsg_space — Calculate message buffer size
    socket_connect — 开启一个套接字连接
    socket_create_listen — Opens a socket on port to accept connections
    socket_create_pair — Creates a pair of indistinguishable sockets and stores them in an array
    socket_create — 创建一个套接字（通讯节点）
    socket_get_option — Gets socket options for the socket
    socket_getopt — 别名 socket_get_option
    socket_getpeername — Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
    socket_getsockname — Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
    socket_import_stream — Import a stream
    socket_last_error — Returns the last error on the socket
    socket_listen — Listens for a connection on a socket
    socket_read — Reads a maximum of length bytes from a socket
    socket_recv — 从已连接的socket接收数据
    socket_recvfrom — Receives data from a socket whether or not it is connection-oriented
    socket_recvmsg — Read a message
    socket_select — Runs the select() system call on the given arrays of sockets with a specified timeout
    socket_send — Sends data to a connected socket
    socket_sendmsg — Send a message
    socket_sendto — Sends a message to a socket, whether it is connected or not
    socket_set_block — Sets blocking mode on a socket resource
    socket_set_nonblock — Sets nonblocking mode for file descriptor fd
    socket_set_option — Sets socket options for the socket
    socket_setopt — 别名 socket_set_option
    socket_shutdown — Shuts down a socket for receiving, sending, or both
    socket_strerror — Return a string describing a socket error
    socket_write — Write to a socket
**    类与对象
**    命名空间
**    Errors
*** 错误显示
ini_set("display_errors", "On");   
error_reporting(E_ALL); //-1是关闭
更改了Php.ini后要重启IIS,点击 “开始”->“运行”，输入iisreset 回车。
*** Error 和 Logging 函数
	debug_backtrace() 	生成 backtrace。
	debug_print_backtrace() 	打印 backtrace。
	error_get_last() 	返回最后发生的错误。
	error_log() 	向服务器错误记录、文件或远程目标发送错误消息。
	error_reporting() 	规定报告哪个错误。
	restore_error_handler() 	恢复之前的错误处理程序。
	restore_exception_handler() 	恢复之前的异常处理程序。
	set_error_handler() 	设置用户自定义的错误处理函数。
	set_exception_handler() 	设置用户自定义的异常处理函数。
	trigger_error() 	创建用户级别的错误消息。
	user_error() 	trigger_error() 的别名。
	PHP Filesystem 函数

**    异常处理
**    生成器
**    引用的解释
**    预定义变量
**    预定义异常
**    预定义接口
**    上下文（Context）选项和参数
**    支持的协议和封装协议
** 框架 
 	CodeIgniter手册[ig'naiter]
#############                           ###############    ############
#           #==> Routing==> Security==> #             #    #  Models  #
#           #           		#             #    #Libraries #
# index.php #			        # application #<==># Helpers  #
#           #             		#  controller #    #  plugins #
#           #<== Caching<== View<====== #             #    # Scripts  #
#############                           ###############    ############
1.index.php 文件作为前端控制器,初始化运行CodeIgniter所需要的基本资源;
2. Router检查HTTP请求,以确定如何处理该请求;
3.如果存在缓存文件,将直接输出到浏览器,不用走下面正常的系统流程;
4.在加载应用程序控制器之前,对HTTP请求以及任何用户提交的数据进行安全检查;
5.控制器加载模型/核心类库/辅助函数以及其他所有处理请求所需的资源;
6.最后,渲染视图并发送至浏览器,如果开启了缓存,视图会被先缓存起来用于后续的请求.

$route['(:any)'] = 'pages/view/$1';
CodeIgniter 从上到下读取路由规则并将请求映射到第一个匹配的规则，每一个规则都是 一个正则表达式（左侧）映射到 一个控制器和方法（右侧）
这里，第二条规则中 $routes 数组使用了通配符 (:any) 可以匹配所有的请求， 然后将参数传递给 Pages 类的 view() 方法。
 application/config/routes.php
 application/models/
 application/views/
 application/controllers/

$this->load->view('name'); 
$this->load->model();
URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。URN统一资源命名符.URL这个名字正在被弃用	

DOM 可被 JavaScript 用来读取、改变 HTML、XHTML 以及 XML 文档。
通过使用 getElementById() 和 getElementsByTagName() 方法
通过使用一个元素节点的 parentNode、firstChild 以及 lastChild 属性
getElementById() 和 getElementsByTagName() 这两种方法，可查找整个 HTML 文档中的任何 HTML 元素。
