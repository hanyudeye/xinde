svn被锁定 扩展功能清理一下
* 命令 
** 系统管理
 openssl 强大的安全套接字层密码库
 lastb 列出登入系统失败的用户相关信息
 sudo 以其他身份来执行命令
 sudo -i 切换为root用户
 lastlog 显示系统中所有用户最近一次登录信息
 chroot 把根目录换成指定的目的目录
 logsave 将命令的输出信息保存到指定的日志文件
 last 列出目前与过去登入系统的用户相关信息
 进程和作业管理
 ipcrm 删除消息队列、信号集、或者共享内存标识
 systemctl 系统服务管理器指令
 w 显示目前登入系统的用户信息
 watch 周期性的方式执行给定的指令
 pidof 查找指定名称的进程的进程号ID号　
 skill 向选定的进程发送信号冻结进程
 pgrep 设置用户的认证信息，包括用户密码、密码过期时间等
 renice 修改正在运行的进程的调度优先级
 nohup 将程序以忽略挂起信号的方式运行起来
 ipcs 分析消息队列共享内存和信号量
 pmap 报告进程的内存映射关系
 nice 改变程序执行的优先权等级
 service 控制系统服务的实用工具
 pstree 以树状图的方式展现进程之间的派生关系
 telint 切换当前正在运行系统的运行等级
 killall 使用进程的名称来杀死一组进程
 runlevel 打印当前Linux系统的运行等级
 batch 在系统不繁忙的时候执行定时任务
 ps 报告当前系统的进程状态
 init init进程是所有Linux进程的父进程
 crontab 提交和管理用户的需要周期性执行的任务
 pkill 可以按照进程名杀死进程
 atrm 删除待执行任务队列中的指定任务
 atq 列出当前用户的at任务列表
 at 在指定时间执行一个任务
at TIME HH:MM YYY-MM-DD /+ n {hours,days,weeks}
script 录制并回放终端会话
script -t 2>time.log -a output.session   录制
scriptreplay time.log output.session 回放
 用户和工作组管理
 chage 修改帐号和密码的有效期限
 id 显示用户的ID以及所属群组的ID
 grpconv 用来开启群组的投影密码
 pwunconv 用来关闭用户的投影密码
 pwconv 用来开启用户的投影密码
 nologin 拒绝用户登录系统
 chpasswd 批量更新用户口令的工具
 grpunconv 用来关闭群组的投影密码
 grpck 用于验证组文件的完整性
 groupdel 用于删除指定的工作组
 chsh 用来更换登录系统时使用的shell
 gpasswd Linux下工作组文件的管理工具
 pwck 用来验证系统认证文件内容和格式的完整性
 groupmod 更改群组识别码或名称
 passwd 用于让用户可以更改自己的密码
 chfn 用来改变finger命令显示的信息
 newusers 用于批处理的方式一次创建多个命令
 logname 用来显示用户名称
 groups 用来打印指定用户所属的工作组
 finger 用于查找并显示用户信息
 su 用于切换当前用户身份到其他用户身份
 usermod 用于修改用户的基本信息
 groupadd 用于创建一个新的工作组
 userdel 用于删除给定的用户以及与用户相关的文件
 useradd 创建的新的系统用户
X-Windows
 xclip 管理 X 粘贴板
 xset 设置X-Window系统中的用户爱好的实用工具
 xlsfonts 列出X Server使用的字体
 xhost 制哪些X客户端能够在X服务器上显示
 xlsatoms 列出X服务器内部所有定义的原子成分
 xauth 显示和编辑被用于连接X服务器的认证信息
 xlsclients 列出显示器中的客户端应用程序
 xinit 是Linux下X-Window系统的初始化程序
 startx 用来启动X Window
SELinux
 restorecon 恢复文件的安全上下文
 semanage 默认目录的安全上下文查询与修改
 setsebool 修改SElinux策略内各项规则的布尔值
 getsebool 查询SElinux策略内各项规则的布尔值
 sesearch 查询SELinux策略的规则详情
 seinfo 查询SELinux的策略提供多少相关规则
 chcon 修改对象（文件）的安全上下文
** 文件系统管理
   repquota 报表的格式输出磁盘空间限制的状态
   e2label 设置第二扩展文件系统的卷标
   findfs 标签或UUID查找文件系统
   resize2fs ext2/ext2文件系统重新设置大小
   e2image 将处于危险状态的文件系统保存到文件中
   tune2fs 调整或查看ext2/ext3文件系统的文件系统参数
   sync 用于强制被改变的内容立刻写入磁盘
   swapoff 关闭指定的交换空间
   swapon 激活Linux系统中交换空间
   quota 显示磁盘已使用的空间与限制
   quotastats 显示系统当前的磁盘配额运行状态信息
   edquota 用于编辑指定用户或工作组磁盘配额
   quotaon 激活Linux内核中指定文件系统的磁盘配额功能
   quotacheck 检查磁盘的使用空间与限制
   quotaoff 关闭Linux内核中指定文件系统的磁盘配额功能
   mkfs 用于在设备上创建Linux文件系统
   mountpoint 用来判断指定的目录是否是加载点
   e2fsck 用于检查第二扩展文件系统的完整性
*** dumpe2fs 用于打印“ext2/ext3”文件系统的超级块和快组信息
*** fsck 检查并且试图修复文件系统中的错误
*** umount 用于卸载已经加载的文件系统
*** mount 用于加载文件系统到指定的加载点

   mount  [-t vfstype] [-o options] device dir
   1.-t vfstype 文件系统类型
   　　光盘或光盘镜像：iso9660
   　　DOS fat16文件系统：msdos
   　　Windows 9x fat32文件系统：vfat
   　　Windows NT ntfs文件系统：ntfs
   　　Mount Windows文件网络共享：smbfs
   　　UNIX(LINUX) 文件网络共享：nfs
   2.-o options 主要用来描述设备或档案的挂接方式。常用的参数有：
   　　loop：用来把一个文件当成硬盘分区挂接上系统
   　　ro：采用只读方式挂接设备
   　　rw：采用读写方式挂接设备
   　　iocharset：指定访问文件系统所用字符集,不能显示中文 iocharset=cp936
   3.device 要挂接(mount)的设备。
   4.dir设备在系统上的挂接点(mount point)。
   sudo mount -t smbfs -o username=user,password='' //10.0.1.1/windowsshare /mnt 浏览windows 共享文件夹
*** mke2fs 创建磁盘分区上的“etc2/etc3”文系统
** 系统关机和重启
**** halt 关闭正在运行的Linux操作系统
**** reboot 重新启动正在运行的Linux操作系统
**** shutdown 用来执行系统关机的命令
     shutdown [-cfFhknr (参数名称)] [-t 秒数] [时间][警告信息] 
**** poweroff 用来关闭计算机操作系统并且切断系统电源
** 网络管理
   网络应用
   axel 多线程下载工具
   jwhois whois 客户端服务
   curl 利用URL规则在命令行下工作的文件传输工具
   wget Linux系统下载文件工具
   telnet 登录远程主机和管理
   rexec 运程执行Linux系统下命令
   rsh 连接远程主机并执行命令
   rlogin 从当前终端登录到远程Linux主机
   mail 命令行下发送和接收电子邮件
   mailstat 显示到达的邮件状态
   lynx 纯文本模式的网页浏览器
   elm 纯文本邮件客户端程序
   mailq 显示待发送的邮件队列
   lftpget 调用lftp指令下载指定的文件
   elinks 纯文本界面的WWW浏览器
   ipcalc 简单的IP地址计算器
   lftp 优秀的文件客户端程序
   tcpreplay 将PCAP包重新发送，用于性能或者功能测试
   pfctl PF防火墙的配置命令
   iptraf 实时地监视网卡流量
   ss 获取socket统计信息
   nstat/rtacct 监视SNMP计数器和网络接口状态 
   lnstat 显示Linux系统的网路状态
   arptables 管理ARP包过滤规则表
   arpd 收集免费ARP信息
   tcpdump 一款sniffer工具
   ip 网络配置工具
   ip6tables-restore 还原ip6tables表
   ip6tables-save 保存ip6tables表配置
   iptables Linux上常用的防火墙软件
   网络测试
   hping3 测试网络及主机的安全
   iperf 网络性能测试工具
   host 常用的分析域名查询工具
   tracepath 追踪目的主机经过的路由信息
   arpwatch 监听网络上ARP的记录
   nslookup 查询域名DNS信息的工具
   arping 通过发送ARP协议报文测试网络
   nc 
   用来设置路由器 dig
   域名查询工具 arp
   显示和修改 
   ping 测试主机之间网络的连通性
   traceroute 显示数据包到主机间的路径
   netstat 查看Linux中网络系统状态信息
   -r: 路由
   -i:接口列表
   -t: tcp
   -u:udp
   -l:LISTEN
   -p:PID
   网络安全
   ssh-copy-id 把本地的ssh公钥文件安装到远程主机对应的账户下
   ssh-agent ssh密钥管理器
   ssh-add 把专用密钥添加到ssh-agent的高速缓存中
   nmap 网络探测和安全审核
   iptstate 显示iptables的工作状态
   ssh-keygen 为ssh生成、管理和转换认证密钥
   sftp-server sftp协议的服务器端程序
   sshd openssh软件套件中的服务器守护进程
   ssh-keyscan 收集主机公钥的使用工具
   sftp 交互式的文件传输程序
   ssh openssh套件中的客户端连接工具
   网络配置
   mii-tool 配置网络设备协商方式的工具
   ethtool 显示或修改以太网卡的配置信息
   nisdomainname 显示主机NIS的域名
   dhclient 动态获取或释放IP地址
   domainname 显示和设置系统的NIS域名
   ypdomainname 显示主机的NIS的域名
   usernetctl 被允许时操作指定的网络接口
   dnsdomainname 定义DNS系统中FQDN名称的域名
   hostname 显示和设置系统的主机名
   ifup 激活指定的网络接口
   ifcfg 置Linux中的网络接口参数
   ifconfig 配置和显示Linux系统网卡的网络参数;调试用的
   sudo ifconfig eth0 down/up
   ifdown 禁用指定的网络接口
   route 显示并设置Linux中静态路由表
   网络服务器
   mysqlimport 为MySQL服务器用命令行方式导入数据
   ftpshut 在指定的时间关闭FTP服务器
   ftpcount 显示目前已FTP登入的用户人数
   exportfs 管理NFS共享文件系统列表
   apachectl Apache服务器前端控制工具
   ab Apache服务器的性能测试工具
   squid squid服务器守护进程
   mysql MySQL服务器客户端工具
   sendmail 著名电子邮件服务器
   mysqlshow 显示MySQL中数据库相关信息
**** smbpasswd samba用户和密码管理工具
     创建共享目录:
     mkdir /home/xxx/share   sudo chmod 777 /home/xxx/share  说明：xxx为你的ubuntu的用户名　　　  share你可以随便起个名字做为共享文件夹	
     修改现配置文件
     sudo gedit /etc/samba/smb.conf
     :  在smb.conf最后添加
	   　[share]
	   path = /home/xxx/share      
	   available = yes
	   browseable = yes
	   public = yes
     writable = yes
	   valid users =myname
	   create mask = 0700
	   directory mask =0700
	   force user =nobody
	   force group = nogroup
	   sudo smbpasswd -a myname
     : 说明：valid users = myname　这个myname是自己起的，后面在添加用户名时就是添加的这个
	   另外这个[share]名字也是可以随便起的，这个是你在windows下访问时显示的名字在windows下\\162.168.160.11\share
	   就可以访问linux下/home/god/code目录下的内容了    其中162.168.160.11是你linux的IP地址,用ifconfig就可以查看到
	   samba服务器配置

     squidclient squid服务器的客户端管理工具
     smbclient 交互方式访问samba服务器
     showmount 显示NFS服务器加载的信息
     nfsstat 列出NFS客户端和服务器的工作状态
     mysqladmin MySQL服务器管理客户端
     ftpwho 显示当前每个ftp会话信息
     mysqldump MySQL数据库中备份工具
     htdigest Apache服务器内置工具
     htpasswd apache服务器创建密码认证文件
     ftptop proftpd服务器的连接状态
** 软件  打印  开发  工具
*** 常用工具命令
    screen 用于命令行终端切换
    clockdiff 检测两台linux主机的时间差
    ntpdate 使用网络计时协议（NTP）设置日期和时间
    vdfuse VirtualBox软件挂载VDI分区文件工具
    ngrep 方便的数据包匹配和显示工具
    tempfile shell中给临时文件命名
    xargs 给其他命令传递参数的一个过滤器
    awk 文本和数据进行处理的编程语言
    yes 重复打印指定字符串
    date 显示或设置系统时间与日期
    eog 显示图片
    hostid 用来打印当前主机的数字化标识
    clear 清除当前屏幕终端上的任何信息
    whoami 打印当前有效的用户名称
    users 显示当前登录系统的所有用户
    sleep 将目前动作延迟一段时间
    md5sum 计算和校验文件报文摘要的工具程序
    mesg 设置当前终端的写权限
    mtools 显示mtools支持的指令
    login 登录系统或切换用户身份
    stty 修改终端命令行的相关设置
    talk 让用户和其他用户聊天
    man 查看Linux中的指令帮助
    whatis 查询一个命令执行什么功能
    write 向指定登录用户终端上发送信息
    who 显示目前登录系统的用户信息
    sum 计算文件的校验码和显示块数
    wall 向系统当前所有打开的终端上输出信息
    dircolors 置ls命令在显示目录或文件时所用的色彩
    gpm 提供文字模式下的滑鼠事件处理
    bc 算术操作精密运算工具
    cal 显示当前日历或指定日期的日历 cal 1988 cal -m
    cksum 检查文件的CRC是否正确
    Shutter 功能丰富的截图软件
    qemu Emulator [-fda fdb] Use file as floppy disk 0/1 image	     
    软件包管理
    dpkg-reconfigure Debian Linux中重新配制一个已经安装的软件包
*** 编程开发
**** gcc 基于C/C++的预处理器和编译器
     -o：指定生成的输出文件,所以编译多个文件是,-o 没有意义；
     -E：仅执行编译预处理； .i
     -S：将C代码转换为汇编代码；.s
     -wall：显示警告信息；
     -c：仅执行编译操作，不进行连接操作。.o
***** 1. 预处理 gcc -E test.c -o test.i
      -C:
      -H:
      -include:
***** 2. 编译为汇编代码   gcc -S test.i -o test.s
      masm=intel	汇编代码 
      -std 指定使用的语言标准
***** 3. gas  gcc -c test.s -o test.o
      :-Wa,option
      :-llibrary 连接名为library的库文件
      :-L 指定额外路径
      :-m32
***** 4. ld  gcc test.o -o test
      :-lobjc 这个-l选项的特殊形式用于连接Objective C程序.
      :-nostartfiles 不连接系统标准启动文件,而标准库文件仍然正常使用.
      :-nostdlib 不连接系统标准启动文件和标准库文件.只把指定的文件传递给连接器.
      :-static 在支持动态连接(dynamic linking)的系统上,阻止连接共享库.该选项在其他系统上无效.
      :-shared 生成一个共享目标文件,他可以和其他目标文件连接产生可执行文件.只有部分系统支持该选项.
      :-symbolic 建立共享目标文件的时候,把引用绑定到全局符号上.对所有无法解析的引用作出警
      告(除非用连接编辑选项 `-Xlinker -z -Xlinker defs'取代).只有部分系统支持该选项.
      :-u symbol 使连接器认为取消了symbol的符号定义,从而连接库模块以取得定义.你可以使用多
      个 `-u'选项,各自跟上不同的符号,使得连接器调入附加的库模块.
      : [-e ENTRY]|[--entry=ENTRY]	 使用 ENTRY (入口)标识符作为程序执行的开始端,而不是缺省入口.   
      : -lAR	在连接文件列表中增加归档库文件AR.可以多次使用这个选项. 凡指定一项AR,ld 就会在路径列表中增加一项对libar.a的搜索.
      : -LSEARCHDIR   这个选项将路径SEARCHDIR添加到路径列表, ld在这个列表中搜索归档库.
      可以多次使用这个选项.缺省的搜索路径集(不使用-L时)取决于ld使用的
      模拟模式(emulation)及其配置.在连接脚本中,可以用SEARCH_DIR命令指定路径. 
      : -Tbss org
      : -Tdata org
      : -Ttext org
      把org作为输出文件的段起始地址 --- 特别是 --- bss,data,或text段.org必须是十六进制整数. 
      : -X    删除 全部 临时的 局部符号. 大多数 目的文件 中, 这些 局部符	    号 的 名字 用 `L' 做 开头.
      : -x    删除 全部 局部符号. 
      : -m 指定仿真环境,这里要与gcc 的选项 -m32一致; -V显示 支持的仿真：本机支持   elf_x86_64   
      elf32_x86_64   elf_i386   i386linux   elf_l1om   elf_k1om   i386pep   i386pe
      LDFLAGS="-L/usr/lib64 -L/lib64" 全局常量
      : 注意,如果连接器通过被编译器驱动来间接引用(比如gcc), 那所有的连接器命令行选项前必须加上前缀'-Wl'
      gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup 
      : `-b INPUT-FORMAT'
      `--format=INPUT-FORMAT' [binary]
      'ld'可以被配置为支持多于一种的目标文件.缺省的格式是从环境变量'GNUTARGET'中得到的.
      你也可以从一个脚本中定义输入格式,使用的命令是'TARGET'. 
      : `--oformat OUTPUT-FORMAT'	  指定输出目标文件的二进制格式.一般不需要指定,ld的缺省输出格式配置
      为/各个机器上最常用的/ 格式. output-format是一个 字符串,BFD库支持的格式名称:在操作系统一层了,如果是操作系统本身,加入此选项
      : [`-N']|[`--omagic']
      把text和data节设置为可读写.同时,取消数据节的页对齐,同时,取消对共享库的连接.如果输出格式
      支持Unix风格的magic number, 把输出标志为'OMAGIC'. 
***** 5. 检错
      : -Wall 产生尽可能多的警告信息
      : -Werror GCC会在所有产生警告的地方停止编译
***** 6. 库文件连接 .a .so
      : 包含文件 -I /usr/dirpath    
      : 库   -L /dirpath   -llibname  不要.a 或.so 后缀
      : 强制静态库 gcc –L /usr/dev/mysql/lib –static –lmysqlclient test.o –o test
      静态库链接时搜索路径顺序：
      1. ld会去找GCC命令中的参数-L
      2. 再找gcc的环境变量LIBRARY_PATH
      3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的

      动态链接时、执行时搜索路径顺序:
      1. 编译目标代码时指定的动态库搜索路径
      2. 环境变量LD_LIBRARY_PATH指定的动态库搜索路径
      3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径
      4. 默认的动态库搜索路径/lib
      5. 默认的动态库搜索路径/usr/lib
      有关环境变量：
      LIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径
      LD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径
***** 7. 调试
      -g:
      -gstabs:
      -gcoff:
      -gdwarf:
***** 8. 优化
      -O0 不优化
      -fcaller-saves: 
***** 9. 目标机选项(Target Option) 交叉编译
      -b machine 
      -V version 哪个版本的gcc
***** 10.配置相关选项(Configuration Dependent Option)
      M680x0 选项
      i386选项
***** 11.总体选项(Overall Option)
      -x language
      明确指出后面输入文件的语言为language (而不是从文件名后缀得到的默认选择).

***** 12.目录选项(DIRECTORY OPTION)
      :-Idir 在头文件的搜索路径列表中添加dir 目录.
      :-Ldir 在`-l'选项的搜索路径列表中添加dir目录.

***** 13.C 文件与 汇编文件编译
      以下涉及到不同编译器对符号的处理问题。比如我们写个汇编文件，汇编后，汇编文件中的符号未变，但是当我们写个C文件再生成目标文件后，源文件中的符号前可能加了下划线，当两者之间发生引用关系时可能无法连接，此时我们会用到下面的命令。
      : --change-leading-char
      : --remove-leading-char
      : --prefix-symbols=string
**** ldconfig 动态链接库管理命令
**** readelf 用于显示elf格式文件的信息
     : -a       --all
***** elf header
      描述了这个elf文件的一些信息，如数据格式是big-endian 或者little-endian
      运行平台、section header 的个数等。
****** section headers是一个表，表中的每个条目描述了一个section，
       如section在文件中的偏移，大小等。
****** section中就是elf文件中“真正”的信息了。

**** objcopy拷贝一个目标文件的内容到另一个目标文件中,bfdnamels是BFD库中描述的标准格式名
     : --info 显示支持的architecture 与 目标文件格式
     : -I bfdname或--input-target=bfdname  用来指明源文件的格式,取值elf32-little，elf32-big等，可用用objdump –i查看相应的信息
     : -O bfdname 或--output-target=bfdname 输出的格式
     #+BEGIN_SRC 
-O srec 产生S记录格式文件
-O binary 产生原始的二进制文件
     #+END_SRC
     : -R sectionname 从输出文件中删除掉所有名为sectionname的段
     : -S 不从源文件中复制重定位信息和符号信息到目标文件中
     : -g 不从源文件中复制调试符号到目标文件中
     : -j sectionname 或--only-section=sectionname 只将由sectionname指定的section拷贝到输出文件
     : -K symbolname 保留由symbolname指定的符号信息
     : -N symbolname 去除掉由symbolname指定的符号信息

**** objdump 显示二进制文件信息
     : -a|--archive-header 列出 archive头/列表用'ar tv'
     : -d反汇编
     : -S|--source
     : -m MACHINE| --architecture=MACHINE
     : -G|--stabs
**** pstack 显示每个进程的栈跟踪
**** indent 格式化C语言的源文件
**** gdb 功能强大的程序调试器
***** options gdb <program> [core]|[PID]
      -d 指定远程调试时串行接口的线路速度
      -batch 以批处理模式运行
      -c 指定要分析的核心转储文件
      -cd 指定工作目录
      -d 指定搜索源文件的目录
      -e 指定要执行的文件
      -f 调试时以标准格式输出文件名和行号
      -q 安静模式
      -s 指定符号的文件名
      -se 指定符号和要执行的文件名
      -tty 设置标准输出和输入设备
      -x 从指定的文件执行 gdb 命令
***** 常用的调试命令
      shell <command>
      make <make -args>

      运行参数
      set args 设定参数
      show args 查看运行参数
      运行环境
      path<dir> 设定程序的运行路径。
      show paths 查看程序的运行路径。
      set environment varname[=value]设置环境变量。如:set env USER=hchen
      show environment[varname]查看环境变量
      工作目录
      cd <dir>相当于 shell 的 cd 命令。
      pwd 显示当前的工作目录。
      程序的输入输出
      info terminal 显示程序用到的终端的模式
      使用重定向空值程序输出。如 run>outfile
      tty 命令可以指定写输入输出的终端设备。如 tty /dev/ttyb
      列出源码 ;l 3 （开始行） 根据本地文件,没有就列不出 
      设置断点 ;b filename: <行号>;break +offset -offset 当前行号前后
      b filename: <函数名称>;
      b *<函数名称>;
      b *<代码地址> 
      break...if<condition>
      调试程序 ;r 
      继续执行 ;c
      删除断点 ;clear <行号>
      删除断点 ;d <编号>
      执行一行 ;n /s
      结束循环 ;until
      p $1 ($1为历史记录变量); 
      p <数组名>显示数组元素;
      p <*数组指针>显示数组int a[N]的特定值：
      p &var 显示变量地址
      显示变量类型;    whatis p
      显示各类信息   info b 显示断点信息
      finish 退出函数
      info r 寄存器信息
      info local 当前函数中的局部变量信息;
      info prog 显示被调试程序的执行状态
      break *_start+1 由于 gnu 调试时忽略开始处断点, 需要在开始标签处执行一个空指令
      print/d 显示十进制数字
      print/t 显示二进制数字
      print/x 显示 16 进制数字

      x/FMT ADDRESS.
      ADDRESS is an expression for the memory address to examine.
      FMT is a repeat count followed by a format letter and a size letter.
      Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
      t(binary), f(float), a(address), i(instruction), c(char), s(string)
      and z(hex, zero padded on the left).
      Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
      The specified number of objects of the specified size are printed
      according to the format.
      7.0版本以上gdb的disas命令可以携带/m参数，让汇编与c源码同时显示：disas /m main

      使用 x 命令可以查看特定内存的值:
      x/nyz
      其中 n 为要显示的字段数
      y 时输出格式, 它可以是:
      c 用于字符, d 用于十进制, x 用于 16 进制
      z 是要显示的字段长度, 它可以是:
      b 用于字节, h 用于 16 字节, w 用于 32 位字
      如:
      x/42cb 用于显示前 42 字节
      print-stack      查看堆栈               
      u start end      反汇编内存                       
      trace on          反汇编每一条                    
      trace-reg on    每执行一条打印cpu               
      xp /32bx 0x90000  查询从0x90000开始的32个字节内容 
**** expr 一款表达式计算工具
**** test shell环境中测试条件表达式工具
**** php PHP语言的命令行接口
**** protoize GNU-C代码转换为ANSI-C代码
**** mktemp 创建临时文件供shell脚本使用
**** perl perl语言解释器
**** make GNU的工程化编译工具
**** ldd 打印程序或者库文件所依赖的共享库列表
**** nm 显示二进制目标文件的符号表
**** unprotoize 删除C语言源代码文件中的函数原型
**** gcov 测试程序的代码覆盖率的工具
*** 打印
**** reject 指示打印系统拒绝发往指定目标打印机的打印任务
**** lpadmin 配置CUPS套件中的打印机和类
**** cupsenable 启动指定的打印机
**** accept 指示打印系统接受发往指定目标打印机的打印任务
**** lpstat 显示CUPS中打印机的状态信息
**** cupsdisable 停止指定的打印机
**** lpc 命令行方式打印机控制程序
**** cancel 取消已存在的打印任务
**** lp 打印文件或修改排队的打印任务
**** lpq 显示打印队列中的打印任务的状态信息
**** eject 用来退出抽取式设备
**** lprm 删除打印队列中的打印任务
**** lpr 将文件发送给指定打印机进行打印
** 文件目录管理
*** 文件查找和比较
    strings 在对象文件或二进制文件中查找可打印的字符串
    diff 比较给定的两个文件的不同
    cmp 比较两个文件是否有差异
    diff3 比较3个文件不同的地方
    locate/slocate 查找文件或目录
    -n 至多显示n 个输出
    -r 使用正则做寻找条件
    -d 指定资料库的路径
    which 查找并显示给定命令的绝对路径
**** find 在指定目录下查找文件
     find pathname -options [-print -exec -ok ...]
     : -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' {  } \;，注意{   }和\；之间的空格。
     : -ok：和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。

     : -name   按照文件名查找文件。
     : -perm   按照文件权限来查找文件。
     : -prune  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。
     : -user   按照文件属主来查找文件。
     : -group  按照文件所属的组来查找文件。
     : -mtime -n +n  按照文件的更改时间来查找文件， - n表示文件更改时间距
     : 现在n天以内，+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。
     : -nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。
     : -nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。
     : -newer file1 ! file2  查找更改时间比文件file1新但比文件file2旧的文件。
     : -iname 忽略大小写
     : -type  查找某一类型的文件，诸如：
     + b - 块设备文件。
     + d - 目录。
     + c - 字符设备文件。
     + p - 管道文件。
     + l - 符号链接文件。
     + f - 普通文件。
     + -size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。
     + -depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
     + -fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。
     + -mount：在查找文件时不跨越文件系统mount点。
     + -follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。
     + -cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。

     另外,下面三个的区别:
     : -amin n   查找系统中最后N分钟访问的文件  -n n天以内;+n n天之前
     : -atime n  查找系统中最后n*24小时访问的文件
     : -cmin n   查找系统中最后N分钟被改变文件状态的文件
     : -ctime n  查找系统中最后n*24小时被改变文件状态的文件
     : -mmin n   查找系统中最后N分钟被改变文件数据的文件
     : -mtime n  查找系统中最后n*24小时被改变文件数据的文件
     : find  ./    -mtime    -1    -type f    -ok   ls -l    {} \;  
     : find .    -perm -007    -exec ls -l {} \;  
     : ! 否定参数
     whereis 查找二进制程序、代码等相关文件路径
**** hexdump 显示文件十六进制格式
     -c 每单元以字节为单位，显示出对应的ASCII码
     -C 每单元以字节为单位，同时显示十六机制和ASCII码
**** od 输出文件的八进制、十六进制等格式编码的字节
**** cut 连接文件并打印到标准输出设备上
     cut -cnum1-num2 filename  显示每行从开头算起 num1 到num2 的文字
**** tail 在屏幕上显示指定文件的末尾若干行
**** head 在屏幕上显示指定文件的开头若干行
     -c  xx xx字节
     -n 行
**** less 分屏上下翻页浏览文件内容
**** more 显示文件内容，每次显示一屏
     more +20 filename 从第20行开始显示
*** 文件处理
**** iconv 转换文件的编码方式
**** nl 在Linux系统中计算文件内容行号
**** basename 打印目录或者文件的基本名称
**** unlink 系统调用函数unlink去删除指定的文件
**** pathchk 检查文件中不可移植的部分
**** touch 创建新的空文件
**** rename 用字符串替换的方式批量改变文件名
**** dd 复制文件并对原文件的内容进行转换和格式化处理
     : `if=FILE'     Read from FILE instead of standard input.
     : `of=FILE'     Write to FILE instead of standard output.  Unless `conv=notrunc' is given, `dd' truncates FILE to zero bytes (or the size specified with `seek=').
     : ibs=BYTES 指定每次输入多少字节,默认512
     : obs=BYTES 输出
     : skip=N   跳过 ibs指定字节的N块东西,如果iflag=skip_bytes,则跳过N 字节,就跟ibs指定多少无关了
     : seek=N 跳过obs指定字节的N块东西,如果oflag=seek_bytes,则跳过N 字节,就跟obs指定多少无关了
     : count=N 复制 N 块 ibs指定的东西,如果iflag=skip_bytes,则...
     : `conv=CONVERSION[,CONVERSION]...'转换
     ascii / ebcdic/ibm/block/lcase/notrunc/fsync
     : iflag=FLAG[,FLAG]...
     append/cio/direct/sync/binary/text/skip_bytes/seek_bytes
  
**** dirname 去除文件名中的非目录部分
**** updatedb 创建或更新locate命令所必需的数据库文件
     一般只会对系统目录创建索引
**** ln 用来为文件创件连接
     ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)
     默认 ln -s Exist_target new_name
     ln [OPTION]... TARGET                  (2nd form)
     ln [OPTION]... TARGET... DIRECTORY  
**** cat 连接文件并打印到标准输出设备上
     cat - file1 file2   把标准输入 文件1 文件2 连接
     -n --number 输出行号
     -b --number-nonblank 行不编号
*** 文件编辑
**** nano 字符终端文本编辑器
**** sed 功能强大的流式文本编辑器
     sed [options] 'command' file(s)
     sed [options] -f scriptfile file(s)
     -e<script>或--expression=<script>：以选项中的指定的script来处理输入的文本文件；
     -f<script文件>或--file=<script文件>：以选项中指定的script文件来处理输入的文本文件；
***** sed命令
      a\ 在当前行下面插入文本。
      i\ 在当前行上面插入文本。
      c\ 把选定的行改为新的文本。
      d 删除，删除选择的行。
      D 删除模板块的第一行。
      s 替换指定字符 sed 's/aa/bb/' file 注意/ 符,用来分界
      h 拷贝模板块的内容到内存中的缓冲区。
      H 追加模板块的内容到内存中的缓冲区。
      g 获得内存缓冲区的内容，并替代当前模板块中的文本。
      G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
      l 列表不能打印字符的清单。
      n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
      N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
      p 打印模板块的行。(显示两遍)
      P(大写) 打印模板块的第一行。
      q 退出Sed。
      b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
      r file 从file中读行。
      t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
      T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
      w file 写并追加模板块到file末尾。  
      W file 写并追加模板块的第一行到file末尾。  
      ! 表示后面的命令对所有没有被选定的行发生作用。  
      = 打印当前行号码。  
      # 把注释扩展到下一个换行符以前。  

      sed替换标记
      g 表示行内全面替换。  
      p 表示打印行。  
      w 表示把行写入一个文件。  
      x 表示互换模板块中的文本和缓冲区中的文本。  
      y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
      \1 子串匹配标记
      & 已匹配字符串标记

      sed元字符集
      ^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。
      $ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。
      . 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。
      [* 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。
      [] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。  
      [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。
      \(..\) 匹配子串，保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。
      & 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。
      \< 匹配单词的开始，如:/\<love/匹配包含以love开头的单词的行。
      \> 匹配单词的结束，如/love\>/匹配包含以love结尾的单词的行。
      x\{m\} 重复字符x，m次，如：/0\{5\}/匹配包含5个0的行。
      x\{m,\} 重复字符x，至少m次，如：/0\{5,\}/匹配至少有5个0的行。
      x\{m,n\} 重复字符x，至少m次，不多于n次，如：/0\{5,10\}/匹配5~10个0的行。 

***** sed用法实例
      替换操作：s命令

      替换文本中的字符串：
      sed 's/book/books/' file

      -n选项和p命令一起使用表示只打印那些发生替换的行：
      sed -n 's/test/TEST/p' file

      直接编辑文件选项-i，会匹配file文件中每一行的第一个book替换
      为books：
      sed -i 's/book/books/g' file

      全面替换标记g
      使用后缀 /g 标记会替换每一行中的所有匹配：

      sed 's/book/books/g' file
      当需要从第N处匹配开始替换时，可以使用 /Ng：

      echo sksksksksksk | sed 's/sk/SK/2g'
      skSKSKSKSKSK

      定界符
      以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定
      界符：
      sed 's:test:TEXT:g'
      sed 's|test|TEXT|g'

      定界符出现在样式内部时，需要进行转义：
      sed 's/\/bin/\/usr\/local\/bin/g'

      删除操作：d命令
      删除空白行：
      sed '/^$/d' file

      删除文件的第2行：
      sed '2d' file

      删除文件的第2行到末尾所有行：
      sed '2,$d' file

      删除文件最后一行：

      sed '$d' file

      删除文件中所有开头是test的行：

      sed '/^test/'d file

      已匹配字符串标记&

      正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之
      前所匹配到的单词：

      echo this is a test line | sed 's/\w\+/[&]/g'
      [this] [is] [a] [test] [line]

      所有以192.168.0.1开头的行都会被替换成它自已加localhost：

      sed 's/^192.168.0.1/&localhost/' file
      192.168.0.1localhost

      子串匹配标记\1

      匹配给定样式的其中一部分：

      echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'
      this is 7 in a number

      命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\)
      用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹
      配到的第二个结果就是 \2，例如：

      echo aaa BBB | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
      BBB aaa

      love被标记为1，所有loveable会被替换成lovers，并打印出来：

      sed -n 's/\(love\)able/\1rs/p' file

      组合多个表达式

      sed '表达式' | sed '表达式'

      等价于：

      sed '表达式; 表达式'

      引用

      sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字
      符串，就需要使用双引号。

      test=hello
      echo hello WORLD | sed "s/$test/HELLO"
      HELLO WORLD

      选定行的范围：,（逗号）

      所有在模板test和check所确定的范围内的行都被打印：

      sed -n '/test/,/check/p' file

      打印从第5行开始到第一个包含以test开始的行之间的所有行：

      sed -n '5,/^test/p' file

      对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：

      sed '/test/,/west/s/$/aaa bbb/' file

      多点编辑：e命令

      -e选项允许在同一行里执行多条命令：

      sed -e '1,5d' -e 's/test/check/' file

      上面sed表达式的第一条命令删除1至5行，第二条命令用check替换
      test。命令的执行顺序对结果有影响。如果两个命令都是替换命令
      ，那么第一个替换命令将影响第二个替换命令的结果。

      和 -e 等价的命令是 --expression：

      sed --expression='s/test/check/' --expression='/love/d' file

      从文件读入：r命令

      file里的内容被读进来，显示在与test匹配的行后面，如果匹配多
      行，则file的内容将显示在所有匹配行的下面：

      sed '/test/r file' filename

      写入文件：w命令  

      在example中所有包含test的行都被写入file里：

      sed -n '/test/w file' example

      追加（行下）：a\命令

      将 this is a test line 追加到以test 开头的行后面：

      sed '/^test/a\this is a test line' file

      在 test.conf 文件第2行之后插入 this is a test line：

      sed -i '2a\this is a test line' test.conf

      插入（行上）：i\命令

      将 this is a test line 追加到以test开头的行前面：

      sed '/^test/i\this is a test line' file

      在test.conf文件第5行之前插入this is a test line：

      sed -i '5i\this is a test line' test.conf

      下一个：n命令

      如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变
      为bb，并打印该行，然后继续：

      sed '/test/{ n; s/aa/bb/; }' file

      变形：y命令

      把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使
      用这个命令：

      sed '1,10y/abcde/ABCDE/' file

      退出：q命令

      打印完第10行后，退出sed

      sed '10q' file

      保持和获取：h命令和G命令

      在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓
      冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将
      打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。

      sed -e '/test/h' -e '$G' file

      在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将
      其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的
      意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它
      放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾
      。在这个例子中就是追加到最后一行。简单来说，任何包含test的
      行都被复制并追加到该文件的末尾。

      保持和互换：h命令和x命令

      互换模式空间和保持缓冲区的内容。也就是把包含test与check的行
      互换：

      sed -e '/test/h' -e '/check/x' file

      脚本scriptfile

      sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名
      。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空
      白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行
      为注释行，且不能跨行。

      sed [options] -f scriptfile file(s)

      打印奇数行或偶数行

      方法1：

      sed -n 'p;n' test.txt  #奇数行
      sed -n 'n;p' test.txt  #偶数行

      方法2：

      sed -n '1~2p' test.txt  #奇数行
      sed -n '2~2p' test.txt  #偶数行

      打印匹配字符串的下一行

      grep -A 1 SCC URFILE
      sed -n '/SCC/{n;p}' URFILE
      awk '/SCC/{getline; print}' URFILE
**** pico 功能强大全屏幕的文本编辑器
**** jed 主要用于编辑代码的编辑器
**** joe 强大的纯文本编辑器
**** ed 单行纯文本编辑器
**** ex 启动vim编辑器的ex编辑模式
**** vi 功能强大的纯文本编辑器
*** 目录基本操作
**** rmdir -p 子目录若空,一并删除
**** mkdir 
**** rm -i 删除前询问 -r 递归 -f 强制
**** pwd 绝对路径方式显示用户当前工作目录
**** ls -r 反序输出 -t 时间排序 -R 输出目录下文件
**** mv 
**** cp -a 尽可能将档案状态权限等资料都照原状予以复制。 
     -r     若source中含有目录名则将目录下之档案亦皆依序拷贝至目的地。 
     -f     若目的地已经有相同档名的档案存在则在复制前先予以删除再行复制。 
**** cd 切换用户当前工作目录
*** 文件权限属性设置
**** dos2unix 
     dos2unix dosfile
**** umask 用来设置限制新建文件权限的掩码
**** lsattr 查看文件的第二扩展文件系统属性
**** chmod 用来变更文件或目录的权限
     chmod [-cfvR] [--help] [--version] mode file... 
     :[ugoa...][[+-=][rwxX]...][,...], u 
     -c:若该档案权限确实已经更改才显示其更改动作 
     -f:若该档案权限无法被更改也不要显示错误讯息 
     -v:显示权限变更的详细资料 
     -R:对目前目录下的所有档案与子目录进行相同的权限变更 即以递回的方式逐个变更) 
     chmod -R user:group filename
     chmod o-r example
**** chown 用来变更文件或目录的拥有者或所属群组
**** chgrp 用来变更文件或目录的所属群组
     chgrp USER GROUP 
**** chattr 用来改变文件属性
**** stat 用于显示文件的状态信息
**** file 用来探测给定文件的类型。
**** split 分割任意大小的文件
     -b,--bytes=SIZE b k m 
     -l,--lines=NUMBER 每一输出文件的行数
     split filename backname
**** grep 强大的文本搜索工具
     -C 5 foo file  显示file文件中匹配foo字串那行以及上下5行
     -B 5 foo file  显示foo及前5行
     -A 5 foo file  显示foo及后5行
     －c：只输出匹配行的计数。
     －I：不区分大 小写(只适用于单字符)。
     －h：查询多文件时不显示文件名。
     －l：查询多文件时只输出包含匹配字符的文件名。
     －n：显示匹配行及 行号。
     －s：不显示不存在或无匹配文本的错误信息。
     －v：显示不包含匹配文本的所有行。
     pattern正则表达式主要参数：
     \： 忽略正则表达式中特殊字符的原有含义。
     ^：匹配正则表达式的开始行。
     $: 匹配正则表达式的结束行。
     \<：从匹配正则表达 式的行开始。
     \>：到匹配正则表达式的行结束。
     [ ]：单个字符，如[A]即A符合要求 。
     [ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。
     .：所有的单个字符。
     $ grep ‘test’ d*
     显示所有以d开头的文件中包含 test的行。
     $ grep ‘test’ aa bb cc
     显示在aa，bb，cc文件中匹配test的行。
     $ grep ‘[a-z]\{5\}’ aa
     显示所有包含每个字符串至少有5个连续小写字符的字符串的行。
     $ grep ‘w\(es\)t.*\1′ aa
     如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符(.*)，这些字符后面紧跟着 另外一个es(\1)，找到就显示该行。如果用egrep或grep -E，就不用”\”号进行转义，直接写成’w(es)t.*\1′就可以了。

     grep命令使用复杂实例
     假设您正在’/usr/src/Linux/Doc’目录下搜索带字符 串’magic’的文件：
     $ grep magic /usr/src/Linux/Doc/*
     sysrq.txt:* How do I enable the magic SysRQ key?
     sysrq.txt:* How do I use the magic SysRQ key?
     其中文件’sysrp.txt’包含该字符串，讨论的是 SysRQ 的功能。
     默认情况下，’grep’只搜索当前目录。如果 此目录下有许多子目录，’grep’会以如下形式列出：
     grep: sound: Is a directory
     这可能会使’grep’ 的输出难于阅读。这里有两种解决的办法：
     明确要求搜索子目录：grep -r
     或忽略子目录：grep -d skip
     如果有很多 输出时，您可以通过管道将其转到’less’上阅读：
     $ grep magic /usr/src/Linux/Documentation/* | less
     这样，您就可以更方便地阅读。

     下面还有一些有意思的命令行参数：
     grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，
     grep -l pattern files ：只列出匹配的文件名，
     grep -L pattern files ：列出不匹配的文件名，
     grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，
     grep -C number pattern files ：匹配的上下文分别显示[number]行，
     grep pattern1 | pattern2 files ：显示匹配 pattern1 或 pattern2 的行，
     grep pattern1 files | grep pattern2 ：显示既匹配 pattern1 又匹配 pattern2 的行。
     grep -n pattern files  即可显示行号信息
     grep -c pattern files  即可查找总行数
**** comm 两个文件之间的比较
**** printf 格式化并输出结果
**** expand 将文件的制表符转换为空白字符
**** spell 对文件进行拼写检查
**** pr 将文本文件转换成适合打印的格式
**** look 显示文件中以指定字符串开头的任意行
**** tac 将文件已行为单位的反序输出
**** wc 统计文件的字节数、字数、行数
**** fmt 读取文件后优化处理并输出
**** rev 将文件内容以字符为单位反序输出
**** diffstat 显示diff命令输出信息的柱状图
**** ispell 检查文件中出现的拼写错误

**** uniq 报告或忽略文件中的重复行
**** tee 把数据重定向到给定文件和屏幕上

**** paste 将多个文件按列队列合并
**** sort 将文件进行排序并输出
**** unexpand 将文件的空白字符转换为制表符
**** csplit 将一个大文件分割成小的碎片文件
**** fold 控制文件内容输出时所占用的屏幕宽度
**** join 两个文件中指定栏位内容相同的行连接起来
**** col 过滤控制字符
**** tr 将字符进行替换压缩和删除
     tr [option] source-char-list replace-char-list
     -d 删除不在集合的内容
     -s 压缩重复字符
     -c 使用补集,一般 -d 删除不在补集的内容
**** colrm 删除文件中的指定列
*** 文件压缩与解压
**** lha 压缩或解压缩lzh格式文件
**** bzcmp 比较两个压缩包中的文件
**** bzcat 解压缩指定的.bz2文件
**** unarj 解压缩由arj命令创建的压缩包
**** zcat 显示压缩包中文件的内容
**** znew 将.Z压缩包重新转化为gzip命令压缩的.gz压缩包
**** zipsplit 将较大的zip压缩包分割成各个较小的压缩包
**** arj 用于创建和管理.arj压缩包
**** gzexe 用来压缩可执行文件
**** bzgrep 使用正则表达式搜索.bz2压缩包中文件
**** compress 使用Lempress-Ziv编码压缩数据文件
**** zfore 强制为gzip格式的压缩文件添加.gz后缀
**** bzless 增强.bz2压缩包查看器
**** bzmore 查看bzip2压缩过的文本文件的内容
**** zipinfo 用来列出压缩文件信息
**** unzip 用于解压缩由zip命令压缩的压缩包
     unzip -O cp936
     unzip [-Z] [-cflptTuvz[abjnoqsCDKLMUVWX$/:^]] file[.zip] [file(s) ...]  [-x xfile(s) ...] [-d exdir]

     To extract all members of letters.zip into the current directory only:
     unzip -j letters

     To test letters.zip, printing only a summary message indicating whether the archive is OK or not:
     unzip -tq letters

     To test all zipfiles in the current directory, printing only the summaries:
     unzip -tq \*.zip

     (The backslash before the asterisk is only required if the shell expands wildcards, as in Unix; double  quotes  could  have
     been  used instead, as in the source examples below.)  To extract to standard output all members of letters.zip whose names
     end in .tex, auto-converting to the local end-of-line convention and piping the output into more(1):
     unzip -ca letters \*.tex | more

     To extract the binary file paper1.dvi to standard output and pipe it to a printing program:
     unzip -p articles paper1.dvi | dvips

     To extract all FORTRAN and C source files--*.f, *.c, *.h, and Makefile--into the /tmp directory:
     unzip source.zip "*.[fch]" Makefile -d /tmp

     (the double quotes are necessary only in Unix and only if globbing is turned on).  To extract  all  FORTRAN  and  C  source
     files, regardless of case (e.g., both *.c and *.C, and any makefile, Makefile, MAKEFILE or similar):
     unzip -C source.zip "*.[fch]" makefile -d /tmp

     To extract any such files but convert any uppercase MS-DOS or VMS names to lowercase and convert the line-endings of all of
     the files to the local standard (without respect to any files that might be marked ``binary''):
     unzip -aaCL source.zip "*.[fch]" makefile -d /tmp

     To extract only newer versions of the files already in the current directory, without querying (NOTE:  be careful of unzip‐
     ping  in  one  timezone  a zipfile created in another--ZIP archives other than those created by Zip 2.1 or later contain no
     timezone information, and a ``newer'' file from an eastern timezone may, in fact, be older):
     unzip -fo sources

     To extract newer versions of the files already in the current directory and to create any files  not  already  there  (same
     caveat as previous example):
     unzip -uo sources

     To display a diagnostic screen showing which unzip and zipinfo options are stored in environment variables, whether decryp‐
     tion support was compiled in, the compiler with which unzip was compiled, etc.:
     unzip -v

     In the last five examples, assume that UNZIP or UNZIP_OPTS is set to -q.  To do a singly quiet listing:
     unzip -l file.zip

     To do a doubly quiet listing:
     unzip -ql file.zip

     (Note that the ``.zip'' is generally not necessary.)  To do a standard listing:
     unzip --ql file.zip
     or
     unzip -l-q file.zip
     or
     unzip -l--q file.zip
     (Extra minuses in options don't hurt.)
**** bzip2recover 恢复被破坏的.bz2压缩包中的文件
**** tar Linux下的归档使用工具，用来打包和备份。
**** bunzip2 创一个bz2文件压缩包
**** gunzip 用来解压缩文件
**** bzdiff 直接比较两个.bz2压缩包中文件的不同
**** zip 可以用来解压缩文件
**** bzip2 将文件压缩成bz2格式
**** gzip 用来压缩文件
**** uncompress 用来解压.Z文件
*** 文件备份和恢复
**** cpio 用来建立、还原备份档的工具程序
**** restore 所进行的操作和dump指令相反
**** dump 用于备份ext2或者ext3文件系统
*** 文件传输
**** ftp 用来设置文件系统相关功能
**** tftp 在本机和tftp服务器之间使用TFTP协议传输文件
**** scp 加密的方式在本地主机和远程主机之间复制文件
**** ncftp 是增强的的FTP工具
**** rcp 使在两台Linux主机之间的文件复制操作更简单

** 硬件 | 监测 | 内核 | Shell
*** Shell内建命令
    trap 指定在接收到信号后将要采取的动作
    let 简单的计算器
    seq 以指定增量从首数开始打印数字到尾数 sequential sequence
    tput 通过terminfo数据库对终端会话进行初始化和操作
    apropos 在 whatis 数据库中查找字符串
    set 显示或设置shell特性及shell变量
    command 调用并执行指定的命令
    dris 显示和清空目录堆栈中的内容
    fc 修改历史命令并执行
    bind 显示或设置键盘按键与其相关的功能
    readonly 定义只读shell变量或函数
    read 从键盘读取变量值
    bg 用于将作业放到后台运行
    ulimit 控制shell程序的资源
    enable 启动或关闭shell内建命令
    declare 声明或显示shell变量
    wait 等待进程执行完后返回
    builtin 执行shell内部命令
    shopt 显示和设置shell操作选项
    exit 退出当前的shell
    jobs 显示Linux中的任务列表及任务状态
    history 用于显示历史命令
    logout 退出当前登录的Shell
    export 设置或显示系统环境变量
    exec 调用并执行指定的命令
    env 显示系统中已存在的环境变量
    unset 删除指定的shell变量或函数
    kill 删除执行中的程序或工作
    unalias 删除由alias设置的别名
    type 显示指定命令的类型
    fg 将后台作业放到前台终端运行
    alias 用来设置指令的别名
**** echo 输出指定的字符串或者变量
     -e 识别转义
     -n 不输出新行
     [*] 输出目录
*** 性能监测与优化
    inotifywait 异步文件系统监控机制
    nethogs 终端下的网络流量监控工具
    ifstat 统计网络接口流量状态
    dstat 通用的系统资源统计工具
    ltrace 用来跟踪进程调用库函数的情况
    iotop 用来监视磁盘I/O使用状况的工具
    strace 跟踪系统调用和信号
    fuser 使用文件或文件结构识别进程
    lsof 显示Linux系统当前已打开的所有文件列表
    tload 显示系统负载状况
    time 统计给定命令所花费的总时间
    vmstat 显示虚拟内存状态
    sar 系统运行状态统计工具
    mpstat 显示各个可用CPU的状态
    iostat 监视系统输入输出设备和CPU的使用情况
    free 显示内存的使用情况
    uptime 查看Linux系统负载信息
    top 显示或管理执行中的程序
*** 硬件管理
    losetup 设定与控制循环（loop）设备
    dmidecode 在Linux系统下获取有关硬件方面的信息
    hwclock 显示与设定硬件时钟
    cdrecord Linux系统下光盘刻录功能命令
    setpci 查询和配置PCI设备的使用工具
    lspci 显示当前主机的所有PCI总线信息
    lsusb 显示本机的USB设备列表信息
    arch 显示当前主机的硬件架构类型
    volname 显示指定的ISO-9660格式的设备的卷名称
    systool 显示基于总线、类和拓扑显示系统中设备的信息
*** 内核与模块管理
    lsb_release 显示发行版本信息
    sysctl 时动态地修改内核的运行参数
    slabtop 实时显示内核slab内存缓存信息
    kernelversion 打印当前内核的主版本号
    get_module 获取Linux内核模块的详细信息
    kexec 从当前正在运行的内核引导到一个新内核
    dmesg 显示Linux系统启动信息
    uname 显示Linux系统信息
    depmod 分析可载入模块的相依性
    bmodinfo 显示给定模块的详细信息
    modprobe 自动处理可载入模块
    触摸板和小红点
    关闭:sudo modprobe -r psmouse
    开启:sudo modprobe  psmouse
    只关闭触摸板: synclient touchpadoff=1
    开启:synclient touchpadoff=0
    rmmod 从运行的内核中移除指定的内核模块
    insmod 将给定的模块加载到内核中
    lsmod 显示已载入系统的模块
*** 磁盘管理
**** blkid 查看块设备的文件系统类型、LABEL、UUID等信息
**** du 显示每个文件和目录的磁盘使用空间
     -Bk -Bm (多少K,兆)
     lsblk 列出块设备信息
     vgremove 用于用户删除LVM卷组
     lvresize 调整逻辑卷空间大小
     lvremove 删除指定LVM逻辑卷
     lvreduce 收缩逻辑卷空间
     pvs 输出物理卷信息报表
     pvchange 修改物理卷属性
     pvck 检测物理卷的LVM元数据的一致性
     pvremove 删除一个存在的物理卷
     lvextend 扩展逻辑卷空间
     pvdisplay 显示物理卷的属性
     lvdisplay 显示逻辑卷属性
     pvscan 扫描系统中所有硬盘的物理卷列表
     lvscan 扫描逻辑卷
     lvcreate 用于创建LVM的逻辑卷
     pvcreate 将物理硬盘分区初始化为物理卷
     vgconvert 转换卷组元数据格式
     blockdev 从命令行调用区块设备控制程序
     mkswap 建立和设置SWAP交换分区
     vgchange 修改卷组属性
     mknod 创建字符设备文件和块设备文件
     mkisofs 建立ISO 9660映像文件
     mkinitrd 建立要载入ramdisk的映像文件
     vgreduce 从卷组中删除物理卷
     hdparm 显示与设定硬盘的参数
     vgextend 向卷组中添加物理卷
     partprobe 不重启的情况下重读分区
     vgscan 扫描并显示系统中的卷组
     vgcreate 用于创建LVM卷组
     fdisk 查看磁盘使用情况和磁盘分区
     -l 查看磁盘
     badblocks 查找磁盘中损坏的区块
     vgdisplay 显示LVM卷组的信息
     mkbootdisk 可建立目前系统的启动盘
     grub 多重引导程序grub的命令行shell工具
     查看分区信息 cat (hd0,6)/etc/fstab
     指定/boot所在分区 root (hd[0=n],y)
     指定Linux内核 kernel /boot/vmlinux-XX ro root=/dev/hdaX
     指定initrd文件 initrd /boot/initrdXX.img
     引导系统 boot
     menu.lst
     default=0   #默认启动哪个系统,从0开始,title 开头的是第0个系统
     timeout=5
     title Ubuntu
     root (hd0,6)
     splashimage=(hd0,6)/boot/grub/splash.xpm.gz #grub的背景画面,注释加 '#' /nosplash 没背景
     hiddenmenu # 隐藏grub菜单
     kernel XX
     initrd XX
     ---------
     title WinXP #第 1 个系统
     convertquota 把老的配额文件转换为新的格式
     lilo 安装核心载入开机管理程序
**** df 显示磁盘的相关信息
     -ia i节点使用情况
     parted 磁盘分区和分区大小调整工具
     软件不能运行，如果缺少库
     #example
     ldd firefox
     可以
     sudo ln -s /usr/lib/libpng.so.15 /usr/lib/libpng.so.14
* arch linux
** install
*** pre-installation
    need 800MB of diskspace ;network;
**** 1.1 verify the boot mode
     if exist the efivars directory,then UEFI motherboard boot
     ls /sys/firmware/efi/efivars
     else the system is booted in BIOS(or CSM) mode
**** 1.2 set the keyboard layout
     default console keymap is US.
     all: ls /usr/share/kbd/keymaps/**/*.map.gz
     layout changed: loadkeys de-latin1
     console fonts: /usr/share/kbd/consolefonts/
     set font: setfont
**** 1.3 connect the Internet
     default wired devices: dhcpcd
     different network: systemd-networkd and netctl;first stop dhcpcd@interface.service
     无线 wifi-menu
**** 1.4 update the system clock
     timedatectl set-ntp true
     check the service status: timedatectl status
     timedatectl set-timezone Asia/Shanghai
**** 1.5 partition the disks
     fdisk or parted for both MBR and GPT, or
     gdisk for GPT only
     display partitions: lsblk or fdisk -l
     /(root) directory must be available
     如果要LVM,disk encryption or RAID,现在就做
**** 1.6 format the partions
     mkfs,mkswap
**** 1.7 Mount the file system
     mount /dev/sda1 /mnt
     mount /dev/XX /mnt/boot 100MB 够了
     mount /dev/xxx /mnt/home
     swapon /dev/xxx
*** Installation
**** 2.1 Select the mirrors
     packages to be installed from the mirror servers,need downloaded.
     defined in /etc/pacman.d/mirrorlist 
**** 2.2 Install the base packages
     base package group: pacstrap /mnt base base-devel
     ohter packages: append their names to pacstrap or pacman
*** Configure the system
**** 3.1 Fstab (-U or -L to define by UUID or labels)
     genfstab -U /mnt >> /mnt/etc/fstab
     check the resulting file in /mnt/etc/fstab
**** 3.2 Chroot
     arch-chroot /mnt
**** Time zone
     list-timezones
     set: ln -s /usr/share/zoneinfo/zone/subzone /etc/localtime
     generate /etc/adjtime: hwclock --systohc --utc
**** Locale
     uncomment en_US.UTF-8 UTF-8 and other needed localizations in
     /etc/locale.gen,and generate them with:
     # locale-gen
     set the LANG variable 
     # echo LANG=en_US.UTF-8 > /etc/locale.conf
     if required,set the console keymap and font in vconsole.conf
**** Hostname
     create:
     # echo myhostname >/etc/hostname
     add: /etc/hosts
     127.0.1.1 myhostname.localdomain myhostname
**** Network configuration
     For wireless configuration, install the iw,wpa_supplicant,and dialog packages, and firmware packages.
     systemctl enable dhcpcd@enp2s0.service
**** Initramfs RAM磁盘
     create a new initial RAM disk with:
     # mkinitcpio -p linux
**** Root password
     # passwd
**** Boot loader
     pacman -S grub
     grub-install /dev/sda
     grub-mkconfig -o /boot/grub/grub.cfg
**** 用户
     useradd -m -g users -G wheel -s /bin/bash ikke
     passwd ikke

     安装 sudo
     pacman -S sudo
     打开 /etc/sudoers 文件，找到 root ALL=(ALL) ALL 并依葫芦画瓢添加 ikke ALL=(ALL) ALL 即可。

*** Reboot
    # exit 
    # umount -R /mnt
    # reboot
*** Post-installation
* 正则 
  foo ——————字符串“foo”  
  ^foo ——————以“foo”开头的字符串  
  foo$ ——————以“foo”结尾的字符串  
  ^foo$ ——————“foo”开头和结尾，（只能是他自己 ）  
  [abc]—————— a 或者b 或者c  
  [a-z] —————— a到z之间任意字母  
  [^A-Z]——————除了 A-Z这些之外的字符  
  (gif|jpg)——————“gif”或者 “jpeg”  
  [a-z]+—————— 一个或者多个 a到z之间任意字母  
  [0-9.-]—————— 0-9之间任意数字，或者 点 或者 横线  
  ^[a-zA-Z0-9_]{1,}$—————— 至少一个字母数字下划线  
  ([wx])([yz])—————— wy或wz或xy或xz  
  [^A-Za-z0-9]—————— 字符数字之外的字符  
  ([A-Z]{3}|[0-9]{4})—————— 三个大写字母或者4个数字  

  \B 匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。  
  \cx 匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。  
  \d 匹配一个数字字符。等价于 [0-9]。  
  \D 匹配一个非数字字符。等价于 [^0-9]。  
  \f 匹配一个换页符。等价于 \x0c 和 \cL。  
  \n 匹配一个换行符。等价于 \x0a 和 \cJ。  
  \r 匹配一个回车符。等价于 \x0d 和 \cM。  
  \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。  
  \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。  
  \t 匹配一个制表符。等价于 \x09 和 \cI。  
  \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。  
  \w 匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。  
  \W 匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。  
  \xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码。.  
  \num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。  
  \n 标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。  
  \nm 标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。  
  \nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。  
  \un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。  

  常用的正则表达式
  1、非负整数：”^\d+$”
  2、正整数：”^[0-9]*[1-9][0-9]*$”
  3、非正整数：”^((-\d+)|(0+))$”
  4、负整数：”^-[0-9]*[1-9][0-9]*$”
 
  5、整数：”^-?\d+$”

  6、非负浮点数：”^\d+(\.\d+)?$”

	7、正浮点数：”^((0-9)+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$”

  8、非正浮点数：”^((-\d+\.\d+)?)|(0+(\.0+)?))$”

  9、负浮点数：”^(-((正浮点数正则式)))$”

  10、英文字符串：”^[A-Za-z]+$”

  11、英文大写串：”^[A-Z]+$”

  12、英文小写串：”^[a-z]+$”

  13、英文字符数字串：”^[A-Za-z0-9]+$”

  14、英数字加下划线串：”^\w+$”

  15、E-mail地址：”^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$”

  16、URL：”^[a-zA-Z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\s*)?$”

  PHP 常用正则表达式整理
  表单验证匹配
  验证账号，字母开头，允许 5-16 字节，允许字母数字下划线：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
  验证账号，不能为空，不能有空格，只能是英文字母：^\S+[a-z A-Z]$
  验证账号，不能有空格，不能非数字：^\d+$
  验证用户密码，以字母开头，长度在 6-18 之间：^[a-zA-Z]\w{5,17}$
  验证是否含有 ^%&',;=?$\ 等字符：[^%&',;=?$\x22]+
  匹配Email地址：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
  匹配腾讯QQ号：[1-9][0-9]{4,}
  匹配日期，只能是 2004-10-22 格式：^\d{4}\-\d{1,2}-\d{1,2}$
  匹配国内电话号码：^\d{3}-\d{8}|\d{4}-\d{7,8}$
  评注：匹配形式如 010-12345678 或 0571-12345678 或 0831-1234567
  匹配中国邮政编码：^[1-9]\d{5}(?!\d)$
  匹配身份证：\d{14}(\d{4}|(\d{3}[xX])|\d{1})
  评注：中国的身份证为 15 位或 18 位
  不能为空且二十字节以上：^[\s|\S]{20,}$
 
  字符匹配
  匹配由 26 个英文字母组成的字符串：^[A-Za-z]+$
  匹配由 26 个大写英文字母组成的字符串：^[A-Z]+$
  匹配由 26 个小写英文字母组成的字符串：^[a-z]+$
  匹配由数字和 26 个英文字母组成的字符串：^[A-Za-z0-9]+$
  匹配由数字、26个英文字母或者下划线组成的字符串：^\w+$
  匹配空行：\n[\s| ]*\r 
  匹配任何内容：[\s\S]* 
  匹配中文字符：[\x80-\xff]+ 或者 [\xa1-\xff]+ 
  只能输入汉字：^[\x80-\xff],{0,}$ 
  匹配双字节字符(包括汉字在内)：[^\x00-\xff] 
  匹配数字 
  只能输入数字：^[0-9]*$ 
  只能输入n位的数字：^\d{n}$
  只能输入至少n位数字：^\d{n,}$ 
  只能输入m-n位的数字：^\d{m,n}$ 
  匹配正整数：^[1-9]\d*$
  匹配负整数：^-[1-9]\d*$
  匹配整数：^-?[1-9]\d*$
  匹配非负整数（正整数 + 0）：^[1-9]\d*|0$
  匹配非正整数（负整数 + 0）：^-[1-9]\d*|0$
  匹配正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$
  匹配负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$
  匹配浮点数：^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$  
  匹配非负浮点数（正浮点数 + 0）：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$  
  匹配非正浮点数（负浮点数 + 0）：^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
 
  其他  
  匹配HTML标记的正则表达式（无法匹配嵌套标签）：<(\S*?)[^>]*>.*?</\1>|<.*? />  
  匹配网址 URL ：[a-zA-z]+://[^\s]*   
  匹配 IP 地址：((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)   
  匹配完整域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.?
 
  提示
  上述正则表达式通常都加了 ^ 与 $ 来限定字符的起始和结束，如果需要匹配的内容包括在字符串当中，可能需要考虑去掉 ^ 和 $ 限定符。
  以上正则表达式仅供参考，使用时请检验后再使用s   
	
* shell高级编程例子
  清除:清除/var/log 下的 log 文件  
  清除:一个改良的清除脚本  
  cleanup:一个增强的和广义的删除 logfile 的脚本  
  代码块和 I/O 重定向  
  将一个代码块的结果保存到文件  
  在后台运行一个循环  
  备份最后一天所有修改的文件.  
  变量赋值和替换  
  一般的变量赋值  
  变量赋值,一般的和比较特殊的  
  整型还是 string?  
  位置参数  
  wh,whois 节点名字查询  
  使用 shift  
  echo 一些诡异的变量  
  转义符  
  exit/exit 状态  
  否定一个条件使用!  
  什么情况下为真?  
  几个等效命令 test,/usr/bin/test,[],和/usr/bin/[  
  算数测试使用(( ))  
  test 死的链接文件  
  数字和字符串比较  
  测试字符串是否为 null  
  zmore  
  最大公约数  
  使用算术操作符  
  使用&&和||进行混合状态的 test  
  数字常量的处理  
  $IFS 和空白  
  时间输入  
  再来一个时间输入  

  Timed read  
  我是 root?  
  arglist:通过$*和$@列出所有的参数  
  不一致的$*和$@行为  
  当$IFS 为空时的$*和$@  
  下划线变量  
  在一个文本文件的段间插入空行  
  利用修改文件名,来转换图片格式  
  模仿 getopt 命令  
  提取字符串的一种可选的方法  
  使用参数替换和 error messages  
  参数替换和"usage"messages  
  变量长度  
  参数替换中的模式匹配  
  重命名文件扩展名  
  使用模式匹配来分析比较特殊的字符串  
  对字符串的前缀或后缀使用匹配模式  
  使用 declare 来指定变量的类型  
  间接引用  
  传递一个间接引用给 awk  
  产生随机数  
  从一副扑克牌中取出一张随机的牌  
  两个指定值之间的随机数  
  使用随机数来摇一个骰子  
  重新分配随机数种子  
  使用 awk 产生伪随机数  

  C 风格的变量处理  
  循环的一个简单例子  
  每个[list]元素带两个参数的 for 循环  
  文件信息:对包含在变量中的文件列表进行操作  
  在 for 循环中操作文件  
  在 for 循环中省略[list]  
  使用命令替换来产生 for 循环的[list]  
  对于二进制文件的一个 grep 替换  
  列出系统上的所有用户  
  在目录的所有文件中查找源字串  
  .  列出目录中所有的符号连接文件  
  .  将目录中的符号连接文件名保存到一个文件中  
  .  一个 C 风格的 for 循环  
  .  在 batch mode 中使用efax  
  .  简单的 while 循环  
  .  另一个while 循环  
  .  多条件的 while 循环  
  . C 风格的 while 循环  
  . until 循环  
  .  嵌套循环  
  . break 和 continue 命令在循环中的效果  
  .  多层循环的退出  
  .  多层循环的 continue  
  .  在实际的任务中使用"continue N"  
  .  使用 case  
  .  使用 case 来创建菜单  
  .  使用命令替换来产生 case 变量  
  .  简单字符串匹配  
  .  检查是否是字母输入  
  .  用 select 来创建菜单  
  .  用函数中 select 结构来创建菜单  
  一个 fork 出多个自己实例的脚本  

  11-2. printf  
  11-3.  使用 read,变量分配  
  11-4.  当使用一个不带变量参数的 read 命令时,将会发生什么?  
  11-5. read 命令的多行输入  
  11-6.  检测方向键  
  11-7.  通过文件重定向来使用 read  
  11-8.  管道输出到 read 中的问题  
  11-9.  修改当前的工作目录  
  11-10.  用"let"命令来作算术操作.  
  11-11.  显示 eval 命令的效果  
  11-12.  强制登出(log-off)  
  11-13.  另一个"rot13"的版本  

  11-14.  在 Perl 脚本中使用 eval 命令来强制变量替换  
  11-15.  使用 set 来改变脚本的位置参数  
  11-16.  重新分配位置参数  
  11-17. Unset 一个变量  
  11-18.  使用 export 命令传递一个变量到一个内嵌 awk 的脚本中  
  11-19.  使用 getopts 命令来读取传递给脚本的选项/参数.  
  11-20. "Including"一个数据文件  
  11-21.  一个没什么用的,source 自身的脚本  
  11-22. exec 的效果  
  11-23.  一个 exec 自身的脚本  
  11-24.  在继续处理之前,等待一个进程的结束  
  11-25.  一个结束自身的脚本.  
  12-3.  删除当前目录下文件名中包含一些特殊字符(包括空白)的文件..  
  12-4.  通过文件的  inode  号来删除文件  
  12-5. Logfile:  使用  xargs  来监控系统  log  
  12-6.  把当前目录下的文件拷贝到另一个文件中  
  12-7.  通过名字 Kill 进程  
  12-8.  使用 xargs 分析单词出现的频率  
  12-9.  使用  expr  
  12-10.  使用  date  命令  
  12-11.  分析单词出现的频率  
  12-12.  那个文件是脚本?  
  12-13.  产生 10 进制随机数  
  12-14.  使用  tail  命令来监控系统 log  
  12-15.  在一个脚本中模仿  "grep"  的行为  
  12-16.  在 1913 年的韦氏词典中查找定义  
  12-17.  检查列表中单词的正确性  
  12-18.  转换大写:  把一个文件的内容全部转换为大写.  
  12-19.  转换小写:  将当前目录下的所有文全部转换为小写.  
  12-20. Du: DOS  到  UNIX  文本文件的转换.  
  12-22. Generating "Crypto-Quote" Puzzles  
  12-23.  格式化文件列表.  
  12-24.  使用  column  来格式化目录列表  
  12-25. nl:  一个自己计算行号的脚本.  
  12-26. manview:  查看格式化的 man 页  
  12-27.  使用  cpio  来拷贝一个目录树  
  12-28.  解包一个  rpm  归档文件    
  12-29.  从  C  文件中去掉注释  

  12-30. Exploring /usr/X11R6/bin  
  12-31.  一个"改进过"的  strings    命令  
  12-32.  在一个脚本中使用  cmp  来比较 2 个文件.  

  12-33. basename  和  dirname  
  12-34.  检查文件完整性    
  12-35. Uudecod  编码后的文件  
  12-36.  查找滥用的连接来报告垃圾邮件发送者  
  12-37.  分析一个垃圾邮件域  
  12-38.  获得一份股票报价  
  12-39.  更新  Fedora Core 4    
  12-40.  使用  ssh  
  12-41.  一个可以 mail 自己的脚本  
  12-42.  按月偿还贷款  
  12-43.  数制转换  
  12-44.  使用  "here document"  来调用  bc  
  12-45.  计算圆周率  
  12-46.  将 10 进制数字转换为 16 进制数字  
  12-47.  因子分解  
  12-48.  计算直角三角形的斜边  
  12-49.  使用  seq  来产生循环参数  
  12-50.  字母统计  
  12-51.  使用 getopt 来分析命令行选项  
  12-52.  一个拷贝自身的脚本  
  12-53.  练习 dd  
  12-54.  记录按键  
  12-55.  安全的删除一个文件  
  12-56.  文件名产生器  
  12-57.  将米转换为英里  
  12-58.  使用  m4  
  13-1.  设置一个新密码  
  13-2.  设置一个擦除字符  
  13-3.  关掉终端对于密码的 echo  
  13-4.  按键检测  
  13-5. Checking a remote server for identd<rojy bug>  
  13-6. pidof  帮助杀掉一个进程  
  13-7.  检查一个 CD 镜像  
  13-8.  在一个文件中创建文件系统  
  13-9.  添加一个新的硬盘驱动器  
  13-10.  使用 umask 来将输出文件隐藏起来  
  13-11. killall,  来自于  /etc/rc.d/init.d  
  14-1.  愚蠢的脚本策略  
  14-2.  从循环的输出中产生一个变量  
  14-3.  找 anagram(回文构词法,  可以将一个有意义的单词,  变换为 1 个或多个有意义的单词,  但 
  是还是原来的子母集合)  
  16-1.  使用 exec 重定向标准输入  
  16-2.  使用 exec 来重定向 stdout  
  16-3.  使用 exec 在同一脚本中重定向 stdin 和 stdout  
  16-4.  避免子 shell  
  16-5. while 循环的重定向  
  16-6.  另一种while 循环的重定向  
  16-7. until 循环重定向  
  16-8. for 循环重定向  
  16-9. for 循环重定向  loop (将标准输入和标准输出都重定向了)  
  16-10.  重定向 if/then 测试结构  
  16-11.  用于上面例子的"names.data"数据文件  
  16-12.  记录日志事件  
  17-1.  广播:  发送消息给每个登录上的用户  
  17-2.  仿造文件:  创建一个两行的仿造文件  
  17-3.  使用 cat 的多行消息  
  17-4.  带有抑制 tab 功能的多行消息  
  17-5.  使用参数替换的 here document  
  17-6.  上传一个文件对到"Sunsite"的 incoming 目录  
  17-7.  关闭参数替换  
  17-8.  一个产生另外一个脚本的脚本  
  17-9. Here documents 与函数  
  17-10. "匿名" here Document  
  17-11.  注释掉一段代码块    
  17-12.  一个自文档化(self-documenting)的脚本  
  17-13.  在一个文件的开头添加文本  
  20-1.  子 shell 中的变量作用域  
  20-2.  列出用户的配置文件  
  20-3.  在子 shell 里进行串行处理  
  21-1.  在受限的情况下运行脚本  
  23-1.  简单函数  
  23-2.  带着参数的函数  
  23-3.  函数和被传给脚本的命令行参数  
  23-4.  传递间接引用给函数  
  23-5.  解除传递给函数的参数引用  
  23-6.  再次尝试解除传递给函数的参数引用  
  23-7.  两个数中的最大者  
  23-8.  把数字转化成罗马数字  
  23-9.  测试函数最大的返回值  
  23-10.  比较两个大整数  
  23-11.  用户名的真实名  
  23-12.  局部变量的可见范围  
  23-13.  用局部变量来递归  
  23-14.  汉诺塔  
  24-1.  脚本中的别名  
  24-2. unalias:  设置和删除别名  
  25-1.  使用"与列表(and list)"来测试命令行参数  
  25-2.  用"与列表"的另一个命令行参数测试  
  25-3. "或列表"和"与列表"的结合使用  
  26-1.  简单的数组用法  
  26-2.  格式化一首诗  
  26-3.  多种数组操作  
  26-4.  用于数组的字符串操作符  
  26-5.  将脚本的内容传给数组  
  26-6.  一些数组专用的工具  
  26-7.  关于空数组和空数组元素  
  26-8.  初始化数组  
  26-9.  复制和连接数组  
  26-10.  关于连接数组的更多信息  
  26-11.  一位老朋友:  冒泡排序  
  26-12.  内嵌数组和间接引用  
  26-13.  复杂数组应用: 埃拉托色尼素数筛子  
  26-14.  模拟下推的堆栈  
  26-15.  复杂的数组应用:  列出一种怪异的数学序列  
  26-16.  模拟二维数组,并使它倾斜  
  27-1.  利用/dev/tcp  来检修故障  
  27-2.  搜索与一个 PID 相关的进程  
  27-3.  网络连接状态  
  28-1.  隐藏 cookie 而不再使用  
  28-2.  用/dev/zero 创建一个交换临时文件  
  28-3.  创建 ramdisk  
  29-1.  一个错误的脚本  
  29-2.  丢失关键字(keyword)  
  29-3.  另一个错误脚本  
  29-4.  用"assert"测试条件  
  29-5.  捕捉  exit  
  29-6.  在 Control-C 后清除垃圾  
  29-7.  跟踪变量  
  29-8.  运行多进程  (在多处理器的机器里)  
  31-1.  数字和字符串比较是不相等同的  
  31-2.  子 SHELL 缺陷  
  31-3.  把 echo 的输出用管道输送给 read 命令  
  33-1. shell  包装  
  33-2.  稍微复杂一些的 shell 包装  
  33-3.  写到日志文件的 shell 包装  
  33-4.  包装 awk 的脚本  
  33-5.  另一个包装 awk 的脚本  
  33-6.  把 Perl 嵌入 Bash 脚本  
  33-7. Bash  和  Perl  脚本联合使用  
  33-8.  递归调用自己本身的(无用)脚本  
  33-9.  递归调用自己本身的(有用)脚本  
  33-10.  另一个递归调用自己本身的(有用)脚本  
  33-11.  一个  "彩色的"  地址资料库  
  33-12.  画盒子  
  33-13.  显示彩色文本  
  33-14. "赛马"  游戏  
  33-15.  返回值技巧  
  33-16.  整型还是 string?  
  33-17.  传递和返回数组  
  33-18. anagrams 游戏  
  33-19.  在 shell 脚本中调用的窗口部件  
  34-1.  字符串扩展  
  34-2.  间接变量引用  -  新方法  
  34-3.  使用间接变量引用的简单数据库应用  

  A-1. mailformat: Formatting an e-mail message  
  A-2. rn: A simple-minded file rename utility  
  A-3. blank-rename: renames filenames containing blanks  
  A-4. encryptedpw: Uploading to an ftp site, using a locally encrypted password  
  A-5. copy-cd: Copying a data CD  
  A-6. Collatz series  
  A-7. days-between: Calculate number of days between two dates  
  A-8. Make a "dictionary"  
  A-9. Soundex conversion  
  A-10. "Game of Life"  
  A-11. Data file for "Game of Life"  
  A-12. behead: Removing mail and news message headers  
  A-13. ftpget: Downloading files via ftp  
  A-14. password: Generating random 8-character passwords  
  A-15. fifo: Making daily backups, using named pipes  
  A-16. Generating prime numbers using the modulo operator  
  A-17. tree: Displaying a directory tree  
  A-18. string functions: C-like string functions  
  A-19. Directory information  
  A-20. Object-oriented database  
  A-21. Library of hash functions  
  A-22. Colorizing text using hash functions  
  A-23. Mounting USB keychain storage devices  
  A-24. Preserving weblogs  
  A-25. Protecting literal strings  
  A-26. Unprotecting literal strings  
  A-27. Spammer Identification  
  A-28. Spammer Hunt  
  A-29. Making wget easier to use  
  A-30. A "podcasting" script  
  C-1. Counting Letter Occurrences  
  K-1. Sample .bashrc file  
  L-1. VIEWDATA.BAT: DOS Batch File  
  L-2. viewdata.sh: Shell Script Conversion of VIEWDATA.BAT  
 Print the server environment  
  
* Linux桌面使用之道 也是一种哲学
  何为道，我觉得就是好用。功能强大，不死板（可配置），足以。
  1.可以分割，放大，缩小，移动。
  2.打开，关闭。
  3.文件管理用emacs 比自带的高效。
  4.这些软件和用户和开发者是一个精英荟萃的圈子.重要的是你要理解这个圈子的风格.
  5.少而精 软件数量少,品质高,功能强,依赖小,界面通用.
  6.长期坚持 * 久经考验(例如Emacs的开发历史有35年以上)
  7.原谅我又用Emacs举例,用Emacs可以看网页,收邮件,写程序,做笔记,写博客,读rss.
  * 联网我自己写脚本,因为GUI工具如wicd之类的依赖多而且曾经折腾过我.
  * 听音乐我用命令行工具mpd和mpc
  * 播放视频我用mplayer(命令行),等等.
  * 硬盘清理我用bleachbit(清理常用软件产生的临时文件),localepurge(删
    除无用的多国语言),ncdu(检查硬盘如何被占用)
  8. 在Linux上更新完系统或者安装最新软件包后,可以考虑手动将/etc目录下的文件用git备份.
  sudo git add /etc/
  sudo git commit -am "backup"

  一旦某软件工作不正常了,可以检查其/etc下默认配置文件的修改纪录,将配置
  文件恢复到上一个正常工作的版本.
  sudo git log /etc/mysql/my.cnf #check history
  sudo git checkout commit_ref(version) /etc/mysql/my.cnf #restoren file

  9. 顺便说一下,国内的服务不要用,安全原因,不言自明.
  Dropbox实在是妙用无穷(例如,国外有人把Dropbox和git结合使用),我只是用

  10. 备份整个硬盘是用Clonezilla,只是备份操作系统的话用以下命令,
  tar zcvpf mylinux.tgz --exclude=/proc/* --exclude=/lost+found --exclude='mylinux.tgz' --exclude=/mnt/* --exclude=/home/username/* --exclude=/sys/* /
  我建议用前者,因为省事.

  11. 阅读官方和社区文档.
  Arch Linux和Gentoo Linux的特点是用户一般水准较高,所以文档技术含量很高。

  12. 常用软件的诊断修复
  strace -o err.txt firefox
  读一下err.txt就可以知道是哪个库出问题了.相信我,这是不需要任何编程知识的,外加google就可以了.
  13. 系统启动失败
  可以用linux 启动光盘启动，然后chroot,其作用是以指定目录作为操作系统根目录，然后就可以用工具升级或降级kernel了。
* Vi/Vim查找替换使用方法
  vi/vim 中可以使用 ：s 命令来替换字符串。该命令有很多种不同细节使用方法，
  可以实现复杂的功能，记录几种在此，方便以后查询。 
  　　：s/abc/sky/ 替换当前行第一个 vivian 为 sky 
  　　：s/abc/sky/g 替换当前行所有 abc 为 sky 
  　　：n，$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky 
  　　：n，$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky 
  　　n 为数字，若 n 为 .，表示从当前行开始到最后一行 
  　　：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky 
  　　：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky 
  　　可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符 
  　　：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/ 
  　　：%s+/oradata/apras/+/user01/apras1+ （使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/ 
  　　问题描述：对于换行，window下用回车换行（0A0D）来表示，linux下是回车（0A）来表示。
  这样，将window上的文件拷到unix上用时，总会有个^M.请写个用在unix下的过滤windows文件的换行符（0D）
  的shell或c程序。 
  　　。 使用命令：cat filename1 | tr -d “^V^M” > newfile； 
  　　。 使用命令：sed -e “s/^V^M//” filename > outputfilename.
  需要注意的是在1、2两种方法中，^V和^M指的是Ctrl+V和Ctrl+M.你必须要手工进行输入，而不是粘贴。 
  　　。 在vi中处理：首先使用vi打开文件，然后按ESC键，接着输入命令：%s/^V^M//. 
  　　。 ：%s/^M$//g 
  　　如果上述方法无用，则正确的解决办法是：
  　　。 tr -d \"\\r\" < src >dest 
  　　。 tr -d \"\\015\" dest 
  　　。 strings A>B 
  6. 替换确认
     我们有很多时候会需要某个字符(串)在文章中某些位置出现时被替换，而其它位置不被替换的有选择的操作，这就需要用户来进行确认，vi的查找替换同样支持
     例如
     ：s/vivian/sky/g 替换当前行所有 vivian 为 sky 
     在命令后面加上一个字母c就可以实现，即：s/vivian/sky/gc
     顾名思意，c是confirm的缩写
  　　7. 其它 
  　　利用 ：s 命令可以实现字符串的替换。具体的用法包括： 
  　　：s/str1/str2/ 用字符串 str2 替换行中首次出现的字符串 str1 
  　　：s/str1/str2/g 用字符串 str2 替换行中所有出现的字符串 str1 
  　　：。，$ s/str1/str2/g 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1 
  　　：1，$ s/str1/str2/g 用字符串 str2 替换正文中所有出现的字符串 str1 
  　　：g/str1/s//str2/g 功能同上 
  　　从上述替换命令可以看到：g 放在命令末尾，表示对搜索字符串的每次出现进行替换；不加 g，表示只对搜索 
  　　字符串的首次出现进行替换；g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作
* samba
  #1.全局部分参数设置：
  [global]
  #与主机名相关的设置
  workgroup = zkhouse  <==工作组名称
  netbios name = zkserver   <==主机名称，跟hostname不是一个概念，在同一个组中，netbios name必须唯一
  serverstring = this is a test samba server <==说明性文字，内容无关紧要
  #与登录文件有关的设置
  log file = /var/log/samba/log.%m   <==日志文件的存储文件名，%m代表的是client端Internet主机名，就是hostname
  max log size = 50      <==日志文件最大的大小为50Kb
  #与密码相关的设置
  security = share       <==表示不需要密码，可设置的值为share、user和server
  passdb backend = tdbsam
  #打印机加载方式
  load printer = no <==不加载打印机
  -----------------------------------------------------------
  #2.共享资源设置方面：将旧的注释掉，加入新的
  #先取消[homes]、[printers]的项目，添加[temp]项目如下
  [temp]              <==共享资源名称
  comment = Temporary file space <==简单的解释，内容无关紧要
  path = /tmp     <==实际的共享目录
  writable = yes    <==设置为可写入
  browseable = yes   <==可以被所有用户浏览到资源名称，
  guest ok = yes    <==可以让用户随意登录


  输入testparm检查smb.conf是否有错误 
  本机测试输入smbclient -L //127.0.0.1
  然后，我们把分享的目录挂载到某一个目录下，输入mount -t cifs //127.0.0.1 /home/test,然后跳到这个目录 

  先说解决方案： 1.访问 https://github.com/CocoaPods/Specs，然后将Specs项目fork到自己的github账户上 2. 下载GitHub Desktop, 然后clone
  Specs项目。 3. 将clone的Specs项目的文件夹改名为master，然后拖到/Users/用户名/.cocoapods/repos目录下。 4. 运行pod setup解释...
  2016-10-03 16:35 阅读(890) 评论(0)

  git commit ammend 修改已经提交的注释

  git commit --amend 可以对上一次的提交做修改 push -f 如果上一次的提交已经push了，那么需要加f参数覆盖服务端，不过不建议这么搞...
  2016-08-23 12:57 阅读(760) 评论(0)

  git使用SSH连接oschina

  生成ssh公钥ssh-keygen -t rsa -C "xxxxx@xxxxx.com"根据提示，一路回车，千万别输密码，输了还不如用https了然后到.ssh文件夹下找到
  id_rsa.pub文件注：window和mac按自己的方式找到用户根目录复制内容，到oschina中找到SSH公钥管理，添加一个新的公钥。注：clone的时候需要使
  用ssh地址...
  2016-07-22 10:53 阅读(500) 评论(0)

  让 Git 全局性的忽略 .DS_Store

  Mac中每个目录都会有个文件叫.DS_Store,用于存储当前文件夹的一些Meta信息。每次提交代码时，我都要在代码仓库的.gitignore中声明，忽略这类
  文件。有方法可以全局性的忽略某种类型的文件吗？按照以下两步就可实现1.创建~/.gitignore_global文件，把需要全局忽略的文件类型塞到这个文
  件里。# .gitignore_global #######################...
  2016-07-22 10:06 阅读(609) 评论(0)

  备忘，git常用操作

  git branch [branch name] git checkout [branch name] git pull origin [branch name] git push origin [branch name] git merge [branch
  name] git branch -d [branch name] git push origin :[branch name] git ta...
  2015-06-02 16:06 阅读(252) 评论(0)

  个人资料

  [1_sbt0]
  sbt0198
     
  3       
  + 访问：137098次
  + 积分：2951
  + 等级： [blog5] 
    积分：2951
  + 排名：第11065名
  + 原创：148篇
  + 转载：74篇
  + 译文：0篇
  + 评论：20条

    友情链接

    + 爪爪网
    + 乐教（中国）
    + 家教100-让教与学变得简单

    文章分类

  * javascript(62)
  * c#(23)
  * css(21)
  * asp(4)
  * 操作系统(8)
  * jQuery(4)
  * as3(5)
  * mssql(14)
  * http协议(1)
  * html(15)
  * vs2010(2)
  * python(1)
  * git(7)
  * c++(1)
  * linux(5)
  * node-js(14)
  * mongoDB(2)
  * IOS(68)
  * swift(43)
  * swift(1)
  * mui(1)
  * cocoapod(3)

    文章存档

  * 2017年04月(4)
  * 2017年03月(18)
  * 2017年02月(4)
  * 2017年01月(7)
  * 2016年12月(15)
  * 2016年11月(11)
  * 2016年10月(9)
  * 2016年09月(12)
  * 2016年08月(5)
  * 2016年07月(13)
  * 2016年06月(13)
  * 2016年05月(5)
  * 2016年04月(1)
  * 2015年09月(2)
  * 2015年07月(1)
  * 2015年06月(8)
  * 2015年05月(1)
  * 2015年04月(6)
  * 2015年02月(1)
  * 2014年12月(5)
  * 2014年11月(6)
  * 2014年10月(6)
  * 2014年09月(3)
  * 2014年08月(4)
  * 2014年07月(10)
  * 2014年06月(2)
  * 2014年04月(1)
  * 2014年03月(2)
  * 2013年12月(1)
  * 2013年11月(1)
  * 2013年08月(5)
  * 2013年07月(2)
  * 2013年06月(5)
  * 2013年05月(5)
  * 2013年04月(8)
  * 2013年03月(10)
  * 2013年02月(2)
  * 2013年01月(9)

    阅读排行

  * MUI的上拉加载功能实现(9226)
  * IOS学习-collectionView的自适应宽度和高度，固定列数(3190)
  * MUI动态加载数据后，scrollToBottom无效的解决方案(2758)
  * DECLARE CURSOR FOR的使用(2606)
  * NodeJS实现WebSocket，太容易了吧！！(2565)
  * 关于SyntaxError: syntax error <!doctype html>(2348)
  * IE6/7之<div>标签嵌套img元素垂直加4px ， li 中包含浮动元素， IE下有间距(2252)
  * IOS使用高德地图获取当前位置信息(2231)
  * Nodejs+express+ejs简单实例(1866)
  * MUI使用pullRefresh后，scrollToBottom无法使用的解决方案(1687)

    评论排行

  * IOS学习-collectionView的自适应宽度和高度，固定列数(3)
  * 图片上传前预览，支持IE各版本、火狐、谷歌浏览器(3)
  * Swift与Js通过WebView交互(2)
  * jQuery的ajax，当async为false时，同步操作失败。解决方案(2)
  * 刚写的一个js分页类，未优化(2)
  * 使用SQLite.Swift实现SQLite3.0的读写(2)
  * NodeJS实现WebSocket，太容易了吧！！(1)
  * MUI的上拉加载功能实现(1)
  * IOS学习笔记-关闭键盘的两种方式(1)
  * IOS开发-从网络获取图片并显示(1)

    推荐文章

    + * 5月书讯：流畅的Python，终于等到你！
    + * JSON最佳实践
    + * InfiniBand技术和协议架构分析
    + * Android 中解决破解签名验证之后导致的登录授权失效问题
    + * 《Real-Time Rendering 3rd》提炼总结——图形渲染与视觉外观
    + * CSDN日报20170607 ——《别混淆你想要什么和能否实现》

    最新评论

  * MUI的上拉加载功能实现

    lzbj91: 您好,就是想请教一下,我现在在A页面使用了上拉刷新,我切换了路由之后又切回来 ,为什么A页面的上...

  * IOS学习-collectionView的自适应宽度和高度，固定列数

    sbt0198: 嗯，现在我也想到了，谢谢提醒\(^o^)/~

  * IOS学习-collectionView的自适应宽度和高度，固定列数

    qq_36807795: ios 10 有个想tableview 样的自动计算size 的 , 想tableview...

  * IOS学习-collectionView的自适应宽度和高度，固定列数

    qq_36807795: ios 10 有个想tableview 样的自动计算size 的 , 想tableview...

  * IOS学习笔记-获取当前的地理位置swift版

    xzyz314: CoreLocation.framework 框架是自己下载的吗，我是新手不大懂，能给个demo吗，...

  * Swift与Js通过WebView交互

    sbt0198: @qq_35472181:jiajiao100app是IOS里定义的

  * Swift与Js通过WebView交互

    qq_35472181: 怎么连html代码部分都看不懂了我...

  * 使用SQLite.Swift实现SQLite3.0的读写

    qq_35472181: 来打个酱油

  * 使用SQLite.Swift实现SQLite3.0的读写

    gsfdjgji: 感谢分享

  * IOS开发-从网络获取图片并显示

    sbt0198: let data:NSData = NSData(contentsOfURL:url)!//修改成下...

    收藏助手

* 刷新hosts
  Windows
  开始 -> 运行 -> 输入cmd -> 在CMD窗口输入
  ipconfig /flushdns
  Linux
  终端输入
  sudo rcnscd restart
  对于systemd发行版，请使用命令
  sudo systemctl restart NetworkManager
  如果不懂请都尝试下
  Mac OS X终端输入
  sudo killall -HUP mDNSResponder
  Android
  开启飞行模式 -> 关闭飞行模式
  通用方法
  拔网线(断网) -> 插网线(重新连接网络)
  如不行请清空浏览器缓存（老D建议不要使用国产浏览器，请使用谷歌Chrome浏览器）
* sed
  二.定址
  定址用于决定对哪些行进行编辑。地址的形式可以是数字、正则表达式、或二者的结合。如果没有指定地址，sed将处理输入文件的所有行。
  地址是一个数字，则表示行号；是“$"符号，则表示最后一行。例如： 
  sed -n '3p' datafile   #只打印第三行

  只显示指定行范围的文件内容，例如：
  sed -n '100,200p' mysql_slow_query.log  # 只查看文件的第100行到第200行

  地址是逗号分隔的，那么需要处理的地址是这两行之间的范围（包括这两行在内）。范围可以用数字、正则表达式、或二者的组合表示。例如：
  sed '2,5d' datafile               #删除第二到第五行
  sed '/My/,/You/d' datafile    #删除包含"My"的行到包含"You"的行之间的行
  sed '/My/,10d' datafile        #删除包含"My"的行到第十行的内容
 
  三 .命令与选项
  sed命令告诉sed如何处理由地址指定的各输入行，如果没有指定地址则处理所有的输入行。

  3.1 sed命令
  a\   在当前行后添加一行或多行。多行时除最后一行外，每行末尾需用“\”续行
  echo "a,b,c,d" | sed 's/,/\n/g'  | sed '1,$ a\xxx yy zz'

  c\  用此符号后的新文本替换当前行中的文本。多行时除最后一行外，每行末尾需用"\"续行 
  i\  在当前行之前插入文本。多行时除最后一行外，每行末尾需用"\"续行 
  d  删除行 
  h  把模式空间里的内容复制到暂存缓冲区 
  H  把模式空间里的内容追加到暂存缓冲区 
  g  把暂存缓冲区里的内容复制到模式空间，覆盖原有的内容 
  G  把暂存缓冲区的内容追加到模式空间里，追加在原有内容的后面 
  l  列出非打印字符 
  p  打印行 
  n  读入下一输入行，并从下一条命令而不是第一条命令开始对其的处理
  echo "a,b,c,d,e,x,f,g,gz,ga,xsf" | sed 's/,/\n/g' | sed '1,$ n;n;n;c xxxx'
 
  q  结束或退出sed  r  从文件中读取输入行 
  !  对所选行以外的所有行应用命令 

  s  用一个字符串替换另一个 
  g  在行内进行全局替换 
   
  w  将所选的行写入文件 
  x  交换暂存缓冲区与模式空间的内容 
  echo "a,b,c,d,e,x,f,g,gz,ga,xsf" | sed 's/,/\n/g' | sed '1,2y  将字符替换为另一字符（不能对正则表达式使用y命令） 

  3.2 sed选项
  选项  功能 
  -e  进行多项编辑，即对输入行应用多条sed命令时使用 
  -n  取消默认的输出 
  -f  指定sed脚本的文件名 

  4.退出状态
  sed不向grep一样，不管是否找到指定的模式，它的退出状态都是0。只有当命令存在语法错误时，sed的退出状态才不是0。
  5.正则表达式元字符
  与grep一样，sed也支持特殊元字符，来进行模式查找、替换。不同的是，sed使用的正则表达式是括在斜杠线"/"之间的模式。
  如果要把正则表达式分隔符"/"改为另一个字符，比如o，只要在这个字符前加一个反斜线，在字符后跟上正则表达式，再跟上这个字符即可。例如：sed -n '\o^Myop' datafile
 
  元字符  功能  示例 
  ^  行首定位符  /^my/  匹配所有以my开头的行 
  $  行尾定位符  /my$/  匹配所有以my结尾的行 
  .  匹配除换行符以外的单个字符  /m..y/  匹配包含字母m，后跟两个任意字符，再跟字母y的行 
  *  匹配零个或多个前导字符  /my*/  匹配包含字母m,后跟零个或多个y字母的行 
  []  匹配指定字符组内的任一字符  /[Mm]y/  匹配包含My或my的行 
  [^]  匹配不在指定字符组内的任一字符  /[^Mm]y/  匹配包含y，但y之前的那个字符不是M或m的行 
  \(..\)  保存已匹配的字符  1,20s/\(you\)self/\1r/  标记元字符之间的模式，并将其保存为标签1，之后可以使用\1来引用它。最多可以定义9个标签，从左边开始编号，最左边的是第一个。此例中，对第1到第20行进行处理，you被保存为标签1，如果发现youself，则替换为your。 
  &  保存查找串以便在替换串中引用  s/my/**&**/  符号&代表查找串。my将被替换为**my** 
  \<  词首定位符  /\<my/  匹配包含以my开头的单词的行 
  \>  词尾定位符  /my\>/  匹配包含以my结尾的单词的行 
  x\{m\}  连续m个x  /9\{5\}/ 匹配包含连续5个9的行 
  x\{m,\}  至少m个x  /9\{5,\}/  匹配包含至少连续5个9的行 
  x\{m,n\}  至少m个，但不超过n个x  /9\{5,7\}/  匹配包含连续5到7个9的行 

 
  6.范例
  6.1 p命令
  命令p用于显示模式空间的内容。默认情况下，sed把输入行打印在屏幕上，选项-n用于取消默认的打印操作。当选项-n和命令p同时出现时,sed可打印选定的内容。
  sed '/my/p' datafile
  #默认情况下，sed把所有输入行都打印在标准输出上。如果某行匹配模式my，p命令将把该行另外打印一遍。

  sed -n '/my/p' datafile
  #选项-n取消sed默认的打印，p命令把匹配模式my的行打印一遍。

  6.2 d命令
  命令d用于删除输入行。sed先将输入行从文件复制到模式空间里，然后对该行执行sed命令，最后将模式空间里的内容显示在屏幕上。如果发出的是命令d，当前模式空间里的输入行会被删除，不被显示。
  sed '$d' datafile
  #删除最后一行，其余的都被显示

  sed '/my/d' datafile
  #删除包含my的行，其余的都被显示

  6.3 s命令
  sed 's/^My/You/g' datafile
  #命令末端的g表示在行内进行全局替换，也就是说如果某行出现多个My，所有的My都被替换为You。
  sed -n '1,20s/My$/You/gp' datafile
  #取消默认输出，处理1到20行里匹配以My结尾的行，把行内所有的My替换为You，并打印到屏幕上。
  sed 's#My#Your#g' datafile
  #紧跟在s命令后的字符就是查找串和替换串之间的分隔符。分隔符默认为正斜杠，但可以改变。无论什么字符（换行符、反斜线除外），只要紧跟s命令，就成了新的串分隔符。

  6.4 e选项
  -e是编辑命令，用于sed执行多个编辑任务的情况下。在下一行开始编辑前，所有的编辑动作将应用到模式缓冲区中的行上。
  sed -e '1,10d' -e 's/My/Your/g' datafile
  #选项-e用于进行多重编辑。第一重编辑删除第1-3行。第二重编辑将出现的所有My替换为Your。因为是逐行进行这两项编辑（即这两个命令都在模式空间的当前行上执行），所以编辑命令的顺序会影响结果。
 
  6.5 r命令
  r命令是读命令。sed使用该命令将一个文本文件中的内容加到当前文件的特定位置上。
  sed '/My/r introduce.txt' datafile
  #如果在文件datafile的某一行匹配到模式My，就在该行后读入文件introduce.txt的内容。如果出现My的行不止一行，则在出现My的各行后都读入introduce.txt文件的内容。

  6.6 w命令
  sed -n '/hrwang/w me.txt' datafile

  6.7 a\ 命令
  a\ 命令是追加命令，追加将添加新文本到文件中当前行（即读入模式缓冲区中的行）的后面。所追加的文本行位于sed命令的下方另起一行。如果要追加的内容超过一行，则每一行都必须以反斜线结束，最后一行除外。最后一行将以引号和文件名结束。
  sed '/^hrwang/a\
  >hrwang and mjfan are husband\
  >and wife' datafile
  #如果在datafile文件中发现匹配以hrwang开头的行，则在该行下面追加hrwang and mjfan are husband and wife
 
  6.8 i\ 命令
  i\ 命令是在当前行的前面插入新的文本。

  6.9 c\ 命令
  sed使用该命令将已有文本修改成新的文本。

  6.10 n命令
  sed使用该命令获取输入文件的下一行，并将其读入到模式缓冲区中，任何sed命令都将应用到匹配行紧接着的下一行上。
  sed '/hrwang/{n;s/My/Your/;}' datafile
  注：如果需要使用多条命令，或者需要在某个地址范围内嵌套地址，就必须用花括号将命令括起来，每行只写一条命令，或这用分号分割同一行中的多条命令。
 
  6.11 y命令
  该命令与UNIX/Linux中的tr命令类似，字符按照一对一的方式从左到右进行转换。例如，y/abc/ABC/将把所有小写的a转换成A，小写的b转换成B，小写的c转换成C。
  sed '1,20y/hrwang12/HRWANG^$/' datafile
  #将1到20行内，所有的小写hrwang转换成大写，将1转换成^,将2转换成$。
  #正则表达式元字符对y命令不起作用。与s命令的分隔符一样，斜线可以被替换成其它的字符。

  6.12 q命令
  q命令将导致sed程序退出，不再进行其它的处理。
  sed '/hrwang/{s/hrwang/HRWANG/;q;}' datafile

  6.13 h命令和g命令
  #cat datafile
  My name is hrwang.
  Your name is mjfan.
  hrwang is mjfan's husband.
  mjfan is hrwang's wife.

  sed -e '/hrwang/h' -e '$G' datafile
  sed -e '/hrwang/H' -e '$G' datafile
  #通过上面两条命令，你会发现h会把原来暂存缓冲区的内容清除，只保存最近一次执行h时保存进去的模式空间的内容。而H命令则把每次匹配hrwnag的行都追加保存在暂存缓冲区。
  sed -e '/hrwang/H' -e '$g' datafile
  sed -e '/hrwang/H' -e '$G' datafile
  #通过上面两条命令，你会发现g把暂存缓冲区中的内容替换掉了模式空间中当前行的内容，此处即替换了最后一行。而G命令则把暂存缓冲区的内容追加到了模式空间的当前行后。此处即追加到了末尾。
 
  7. sed脚本

  sed脚本就是写在文件中的一列sed命令。脚本中，要求命令的末尾不能有任何多余的空格或文本。如果在一行中有多个命令，要用分号分隔。执行脚本时，sed先将输入文件中第一行复制到模式缓冲区，然后对其执行脚本中所有的命令。每一行处理完毕后，sed再复制文件中下一行到模式缓冲区，对其执行脚本中所有命令。使用sed脚本时，不再用引号来确保sed命令不被shell解释。例如sed脚本script：

  sed ':label;N;s/\n/:/;t label' filename
  上面的两条命令可以实现将文件中的所有换行符替换为指定的字串，如命令中的冒号。命令的解释：
  :label;  这是一个标签，用来实现跳转处理，名字可以随便取(label),后面的b label就是跳转指令
  N;  N是sed的一个处理命令，追加文本流中的下一行到模式空间进行合并处理，因此是换行符可见
  s/\n/:/;   s是sed的替换命令，将换行符替换为冒号
  b label  或者 t label    b / t 是sed的跳转命令，跳转到指定的标签处
  标签跳转和N的追加命令实现了每一行的不间断放入模式处理空间，从而不会漏掉每一个换行符，而没有标签的话跳转的话，就只能每两行替换掉一个换行符，对比效果：

  sed '8,80{n;n;n;d}' filename
  n表示读取文本流中的下一行到模式空间(N为追加)，sed还是只处理一行。上面的命令理解：从第8行起（包含），一次读取9/10/11行，然后读取11行后，执行d命令，就是删除处理空间中的第11行，之后从12行开始，读取13/14/15, 删除15行，以此类推，直到第80行。
* eclipse
说起Java的IDE，朗朗上口的无非是Eclipse了，假若能熟练Eclipse，对于我们编写java程序会起到事半功倍的效果，大大提高我们工作效率。因此本篇博文，笔者只是针对刚刚入门java的新手，以便他们能尽快掌握Eclipse的使用。
1. 常用快捷键
这是使用工具的第一步，熟练使用快捷键对于我们编写程序会起到相当大帮助，所以这里笔者列出的快捷键建议大家必须都掌握。
Ctrl + 鼠标左键（类、方法、属性的变量名词）：定位跟踪某变量声明或定义的位置
Ctrl + S：保存当前文件
Ctrl + X：剪切
Ctrl + C：复制
Ctrl + V：粘贴
Ctrl + D：删除当前行
Ctrl + F：查找/替换（当前编辑窗口）
Ctrl + H：全局搜索
Ctrl + /：注释当前行或多行代码
Ctrl + Shift + C：注释当前行或多行代码
Ctrl + Shift + F：格式化当前代码
Ctrl + Shift + O：缺少的Import语句被加入，多余的Import语句被删除（先把光标定位到需导入包的类名上）
Ctrl + Shift + S：保存所有文件
Ctrl + Shift + X：把当前选中的文本全部变为大写
Ctrl + Shift + Y：把当前选中的文本全部变为小写
Alt + /：代码智能提示
Alt + Shift + R：重命名（包括文件名、类名、方法名、变量名等等，非常好用）
Alt + Shift + J：生成类或方法的注释
Alt + Shift + S：打开Source窗口（生成get、set方法，实现、覆盖接口或类的方法，很常用）
Alt + Shift + D, J：如果有main方法入口，则以Debug方式执行代码
Alt + Shift + X, J：如果有main方法入口，则以Run方式执行代码
 
 
2. 插件推荐
Eclipse默认情况下是一个纯净版的，所以功能简单，而开源IDE最为强大的莫过于各种插件，通过使用插件可以帮助我们减少大量编写代码的工作量，也帮助我们降低了编写代码的难度，所以懂得安装必要插件，也是熟练使用IDE的鉴证。
① hibernate Tools
Hibernate Tools是一套全新而且完整的面向Hibernate3的工具集合，它包含了Eclipse插件和Ant编译流程，是JBoss Tools的核心组件。使用该插件能大大减少我们使用Hibernate的工作量，支持自动生成全部Hibernate的xml文件、javabean、HTML表单文件等。
安装地址：http://download.jboss.org/jbosstools/updates/development/indigo/
② spring IDE
Spring IDE是Spring官方网站推荐的Eclipse插件，可提供在开发Spring时对Bean定义文件进行提示、验证并以可视化的方式查看各个Bean之间的依赖关系等，对基于spring框架的项目开发提供了有力的支持。
安装地址：http://dist.springsource.com/release/TOOLS/update/e3.6/
③ Subclipse
Subclipse是基于Eclipse的SVN插件，支持所有版本的Eclipse，团队开发必备插件。
安装地址：http://subclipse.tigris.org/update_1.8.x
④ Findbugs
FindBugs是一个能静态分析源代码中可能会出现Bug的Eclipse插件工具。它检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。利用这个工具，就可以在不实际运行程序的情况对软件进行分析。它可以帮助改进代码的质量。
安装地址：http://findbugs.cs.umd.edu/eclipse/
⑤ Sysdeo Tomcat Launcher Plugin
Sysdeo Tomcat Launcher Plugin是Tomcat的Eclipse插件，帮助我们自动部署tomcat服务器。该插件不是必要插件，可以不装。
下载地址：http://www.eclipsetotale.com/tomcatPlugin/tomcatPluginV33.zip
 
插件安装方法
插件大概有三种安装方法：
第一种：知道在线安装地址。Eclipse→Help→Install New Software...→地址栏（Work with）中输入安装地址→勾选要安装的插件→Next→同意安装协议→Finish→等待安装完毕→按要求重启Eclipse
第二种：手动从官网下载好插件并手动与Eclipse集成。这种方法一般的思路是：先关闭Eclipse，然后将下载好的插件解压后，复制到Eclipse安装目录下的plugins文件夹和features文件夹下，如果必要的话再创建一个link文件，再重新打开Eclipse。
第三种：在线搜索安装。Eclipse→Help→Eclipse Marketplace...→在搜索栏输入要查找的插件→点击Install按钮→等待安装完毕→按要求重启Eclipse
这里笔者推荐第一种，如果不知道安装地址，那么就用第三种，第二种方法有时操作错误的话就会出现问题，风险较大，所以不推荐。
 
 
3. tomcat
① 配置
Window→Preferences→Server→Runtime Environment→Add→Apache→选择tomcat版本→Next→更改显示名称（Name）→Browse...浏览选择事先解压好的tomcat文件夹→选择jre→Finish→OK→打开Servers窗体→右击选择New→Server→选择tomcat版本→选择刚配置好的tomcat→Next→选择项目→Finish
② 使用心得
当我们修改某处代码后，启动tomcat发现页面没有变化时，要先关掉tomcat，右击Servers窗口中tomcat服务器图标，选择Clean...来清理下编译后的源码，再启动tomcat来重新编译下源码。
而且如果部署多个，或tomcat异常时，右击Servers窗口中tomcat服务器图标，选择Properties，检查General选项右侧Location是否正确，如果不正确则点击Switch Location。
虽然一个tomcat支持同时启动多个项目，但项目多启动时会很慢，所以如果不是工程项目需要的话，建议tomcat只部署启动一个项目，将暂时无用的项目移除。
当web项目启动加载时间过长导致tomcat启动失败的话，可适当延长tomcat启动超时的时间（默认45秒），双击Servers窗口中tomcat服务器打开tomcat属性窗口，点击右上方Timeouts选项，修改Start(in seconds)的时间。
eclipse默认情况下是调用tomcat接口模拟启动tomcat，而不是真正启动tomcat，所以大家经常会遇到一件怪事：启动tomcat后，虽然能正常进web项目首页，却仅不了tomcat小猫首页（即http://localhost:8080/），并且web项目部署编译后生成的文件也不在tomcat文件目录下的work目录下。解决办法：如果tomcat服务器下已经部署了项目，就先要将其全部移除，即右击Servers窗口中tomcat服务器图标，选择Add and Remove...，单击Remove All按钮，单击Finish按钮。之后先Clean清理下，再双击tomcat服务器图标打开属性窗口，选择左侧中间Server Locations选项，选择下方第二个单选按钮（Use Tomcat installation），并将Deploy path文本框中的“wtpwebapps”（默认值）改为webapps，也就是tomcat中发布项目所在的文件夹名字，最好再将项目重新部署到tomcat上，启动tomcat后，就可以看到熟悉的小猫页面了，同时在tomcat文件目录下的work文件夹下也能看见熟悉的编译后的页面文件了。
如果代码出现引入javax.servlet.http.*报错，说明是缺少tomcat的jar包，引入即可。方法：在左侧资源管理器右击项目，选择Build Path下的Configure Build Path...，右侧点击Add Library...按钮，选择Server Runtime，点击Next后选择tomcat，Finish。
 
 
4. eclipse常见配置
● 字体大小
Window→Preferences→General→Appearance→Colors and Fonts→右侧窗口→Basic选项→双击Text Font
● 修改打开文件的编辑浏览器
Window→Preferences→General→Editors→File Associations→选择要修改的文件类型→在下方选择编辑浏览器
● 显示/隐藏代码行号
Window→Preferences→General→Editors→勾选Show line numbers
● 添加自定义jar包Libraries
Window→Preferences→Java→Build Path→User Libraries→右侧点击New...→输入名称→点击Add JARs...→浏览选择相应的jar文件
● 配置tomcat等服务器
Window→Preferences→Server→Runtime Environment→Add...→选择需要的服务器（以tomcat为例请见上面tomcat配置）
● 修改格式化代码的换行判定
Window→Preferences→Java→Code Style→Formatter→右侧点击New...→输入名称→点击OK→在弹出的窗口选择Line Wrapping选项卡→修改Maixmum line width文本框的值（默认80）
● 添加xml的dtd、xsd等xml语法规则文件，实现代码自动提示
Window→Preferences→XML→XML Catalog→右侧点击Add...→Key type选择Public ID→Location浏览选择你所下载的DTD文件的物理位置→Key填入xml文档头部 <!DOCTYPE sqlMapConfig PUBLIC 后面的那些url地址→OK
● 修改编码格式
右击你要修改的项目/包/类→选择Properties→在Resource选项右侧的Text file encoding下选择你需要的编码格式
● 相同名称（包括类名、方法名、变量名等等）以不同背景色标识出来
见下图：

或者按快捷键：Alt + Shift + O
 
在Window→Preferences下有许多配置，这里并不可能介绍很全，所以只列出最为常用的，大家有时间可能多进这里看看，再多点点多试试就明白了。
 
 
5. SVN
● 上传项目至SVN服务器
右击要上传的项目→Team→Share Project...→SVN→创建新的资源库位置/使用现有的资源库→Next→（输入URL地址）→Next→使用项目名称作为文件夹名→Next→Finish→（输入用户名/密码）
注意：“使用项目名称作为文件夹名”时，要保证SVN服务器端已创建与项目名称相同的文件夹，否则会导入失败。如果SVN端创建的文件夹名与项目名称不符，则在该步骤选择“使用指定的模块名”以确保SVN服务器端与项目名称一致。
● 下载项目从SVN服务器
在资源管理器空白处右击→Import...→选择SVN文件夹→从SVN检出项目→创建新的资源库位置/使用现有的资源库→Next→（输入URL地址）→Next→做为新项目检出，并使用新建项目向导进行配置→Finish→Yes→配置新建项目（如输入项目名称）→OK
注意：这个“输入URL地址”与上面上传项目的不同，这个URL地址需要输入项目具体所在的文件夹，而上一个因为有“使用项目名称作为文件夹名”这步，所以不需要带文件夹名称。
● 提交、更新、还原文件
选中需要提交的文件、jar包、javabean等文件然后右击→Team→选择相应的操作。（这个基本地球人看看都会，所以就不多说了）
 
 
所谓学武功首先要被口诀练习基本招式，只有打好基础，才能快速参悟渗透“上层武功”，所以希望笔者写的“基本心法”能助各位菜鸟早日成为威震四海的武林高手！
pp
java.lang.RuntimeException: error:  out: An error has occurred.  See the log file
/home/wuming/.eclipse/org.eclipse.platform_4.6.3_1353066266_linux_gtk_x86_64/configuration/1498476862792.log
	at org.eclim.installer.step.EclipseInfo.installInstallerPlugin(EclipseInfo.java:185)
	at org.eclim.installer.step.EclipseInfoStep$1.run(EclipseInfoStep.java:67)
	at foxtrot.AbstractWorkerThread$1.run(AbstractWorkerThread.java:40)
	at java.security.AccessController.doPrivileged(Native Method)
	at foxtrot.AbstractWorkerThread.runTask(AbstractWorkerThread.java:36)
	at foxtrot.workers.SingleWorkerThread.run(SingleWorkerThread.java:199)
	at foxtrot.workers.SingleWorkerThread.run(SingleWorkerThread.java:182)
	at java.lang.Thread.run(Thread.java:748)
* debian os
软件包管理
apt-get apt-cache apt-cdrom
    apt-cache showsrc <package> 查看软件信息
    apt-get source <package> 获取源码
    install /remove /update (更新列表)/upgrade(升级可用)/help
    apt-cache search 'expression'
    打包工具 checkinstall
  1.升级 apt-get/dpkg 方式
  更新软件源 sudo apt-get update,
  更新所有的软件 apt-get dist-upgrade
  main restricted(受限的,无源码) universe(社区维护) multiverse(非自由)
  设置默认浏览器    sudo update-alternatives --config x-www-browser
  官方文档(软件手册）可以用man查阅功能 LDP /usr/share/doc/
  硬件及配置 $ pager /proc/pci $ pager /proc/ioports
  下面将在 DOS、 Mac 和 Unix 的文本文件中转换行结尾格式:
  $ recode /cl../cr <dos.txt >mac.txt
  $ recode /cr.. <mac.txt >unix.txt
  $ recode ../cl <unix.txt >dos.txt
  · /cr — Carriage return as end of line (Mac text)
  · /cl — Carriage return line feed as end of line (DOS text)
  · / — Line feed as end of line (Unix text)
  ·  /d1  — Human readable bytewise decimal dump
  ·  /x1  — Human readable bytewise hexidecimal dump
  ·  /64  — Base64 编码文本
  o  iconv — 本地编码转换
  o  konwert — 特殊编码转换
  $ diff -u file.old file.new1 > file.patch0
  $ diff3 -m file.mine file.old file.yours > file
  $ patch -p0 file < file.patch0
  $ split -b 650m file   # 将大文件分块成多个 650MB 的小文件
  $ cat x* >largefile    # 将所有小文件合并成一个大文件
  $ IFS=":,"  # 使用 ":" 和 "," 作为 IFS
  $ awk '($1=="Ian") { print }' <DPL     列文件 
  · 字符集转换:
  o  iconv — 本地编码转换
  o  konwert — 特殊编码转换
  · 二进制文件转换:
  o  uuencode and uudecode — 用于 Unix
  o  mimencode — 用于邮件
  find /usr | egrep -v "/usr/var|/usr/tmp|/usr/local"
  # 查找 /usr 下的所有文件,排除某些文件
  xargs -n 1 command # 将所有项作为标准输入来执行命令
  xargs -n 1 echo     # 将空格隔离的项分开为行
  xargs echo          # 合并所有的行到一行里面
  sort -u              # 排序并删除重复行
  tr '\n' ' '          # 将多行连接为一行
  tr '\r' ''           # 删除 CR
  tr 'A-Z' 'a-z'       # 转化大写字母为小写
  sed 's/^/# /'        # 将每行变为注释
  sed 's/\.ext//g'     # 删除 .ext
  sed -n -e 2p         # 显示第 2 行
  head -n 2 -          # 显示头两行
  tail -n 2 -          # 显示最后两行
  下面的操作将网页转化为文本文件。从网上拷贝配置文件时十分有用。
  $ lynx -dump http://www.remote-site.com/help-info.html >textfile
  links 和 w3m 也可以这么用,只是生成的文本样式可能略有不同。
  如果是邮件列表文档,可使用 munpack 从文本获得 mime 内容。
  $ apt-get install html2ps
  $ html2ps URL | lpr
  执行命令 crontab -e 创建或编辑 crontab 文件,为规律事务(按周期循环的事务)安排日
  程。下面的一个 crontab 文件样例:
  # use /bin/sh to run commands, no matter what /etc/passwd says
  SHELL=/bin/sh
  # mail any output to `paul', no matter whose crontab this is
  MAILTO=paul
  # Min Hour DayOfMonth Month DayOfWeek command (Day... are OR'ed)
  # run at 00:05, every day
  5 0 * * * $HOME/bin/daily.job >> $HOME/tmp/out 2>&1
  # run at 14:15 on the first of every month -- output mailed to paul
  15 14 1 * * $HOME/bin/monthly
  # run at 22:00 on weekdays(1-5), annoy Joe. % for newline, last % for cc:
  0 22 * * 1-5 mail -s "It's 10pm" joe%Joe,%%Where are your kids?%.%%
  23 */2 1 2 * echo "run 23 minutes after 0am, 2am, 4am ..., on Feb 1"
  5 4 * * sun echo "run at 04:05 every sunday"
  # run at 03:40 on the first Monday of each month
  40 3 1-7 * *   [ "$(date +%a)" ==== "Mon" ] && command -args
  执行 at 命令为偶然任务(只执行一次的任务)安排日程:
  $ echo 'command -args'| at 3:40 monday

  8.6.29 网络测试基础
  $ ping yahoo.com            # 检查 Internet 连接
  $ traceroute yahoo.com      # 跟踪 IP 数据包
  $ ifconfig                  # 检查主机设置
  $ route -n                  # 检查路由设置
  $ dig [@dns-server.com] host.dom [{a|mx|any}] |less
  # 检查 dns-server.com 的 host.dom DNS 记录
  # 查找{a|mx|any}记录
  $ ipchains -L -n |less      # 检查包过滤(2.2 kernel)
  $ iptables -L -n |less      # 检查包过滤(2.4 kernel)
  $ netstat -a                # 查找系统上所有打开的端口
  $ netstat -l --inet         # 查找系统监听的端口
  $ netstat -ln --tcp         # 查找系统监听的 TCP 端口(端口数字)
  8.6.30 从本地缓冲池中清空(flush)邮件
  从本地缓冲池中清空邮件:
  # exim -q    # 清空待读邮件
  # exim -qf # 清空所有邮件
  # exim -qff # 清空冻结邮件
  -qff 选项用在/etc/ppp/ip-up.d/exim 脚本中效果更好。 在 Sarge 中,使用 exim4 代替
  exim。
  8.6.31 删除本地缓冲池中的冻结邮件
  删除本地缓冲池中的冻结邮件并返回出错信息:
  # exim -Mg `mailq | grep frozen | awk '{ print $3 }'`
  在 Sarge 中,使用 exim4 代替 exim。
  8.6.32 再分发 mbox 中的信件
  如果 home 目录没有空间继续处理邮件,procmail 将失败, 就需要对磁盘空间进行扩容,
  扩容完成后需要手工分发/var/mail/username 目录中的邮件到 home 目录中的分类邮箱,执
  行:
  # /etc/init.d/exim stop
  # formail -s procmail </var/mail/username
  # /etc/init.d/exim start
  在 Sarge 中,使用 exim4 代替 exim。
  8.6.33 清空文件内容
  要清空某些文件如日志文件的内容,千万不要使用 rm 删除文件然后再创建一个新的空文件,
  因为在两次操作的间隔,系统可能需要访问该文件。下面是清空文件内容的安全方法:
  $ :>file-to-be-cleared
  8.6.34 空文件
  下面的命令可以创建空文件:
  $ dd if=/dev/zero    of=filename bs=1k count=5 # 5KB 零内容
  $ dd if=/dev/urandom of=filename bs=1M count=7 # 7MB 随机内容
  $ touch filename # 创建一个 0 B 大小的文件(如果文件存在,更新该文件的修改时间 )
  例如,最实用的用法是从 Debian 启动软盘的 shell 中执行下列命令将硬盘/dev/hda 的内容
  完全清空。
  # dd if=/dev/urandom of=/dev/hda ; dd if=/dev/zero of=/dev/hda
  8.6.35 chroot
  chroot 程序,chroot(8),不需要重启系统,就可以在单独的系统上同时运行多个不同的
  GNU/Linux 环境。
  还可以在较快主机的 chroot 下运行某些需耗大量系统资源内存的程序如 apt-get 或
  dselect,并将较慢子机的硬盘通过 NFS 方式挂载到主机,开放读/写权限,在主机上以
  chroot 方式操作子机。
  8.6.35.1 用 chroot 来运行不同版本的 Ubuntu
  在老版本中使用 debootstrap 命令很容易构造 chroot Debian 体系。对于 Hoary 的后续
  发行版,用 cdebootstrap 命令加上适当的选项来代替 debootstrap。例如,在一台拥有快
  速 Internet 连接的机器的 /sid-root 下创建一个 dapper chroot:
  main # cd / ; mkdir /dapper-root
  main # debootstrap dapper /dapper-root http://archive.ubuntu.com/ubuntu/
  ... 看它下载整个系统
  main # echo "proc-dapper /dapper-root/proc proc none 0 0" >> /etc/fstab
  main # mount proc-dapper /dapper-root/proc -t proc
  main # cp /etc/hosts /dapper-root/etc/hosts
  main # chroot /dapper-root /bin/bash
  chroot # cd /dev; /sbin/MAKEDEV generic ; cd -
  chroot # apt-setup # 创建 /etc/apt/sources.list 文件
  chroot # vi /etc/apt/sources.list # 将源指向 dapper
  chroot # dselect # 可以使用 aptitude,安装 mc 和 vim :-)
  现在你就拥有了一个全功能 Ubuntu 子系统,可以尽情享受而不必担心主 Ubuntu 受到不利
  影响。
  该 debootstrap 应用技巧还可以实现在没有 Ubuntu 安装盘的情况下,从另一个
  GNU/Linux 发行版下安装 Ubuntu。参阅
  http://www.debian.org/releases/stable/i386/apcs04.html.en。
  8.6.35.2 设置 chroot 登录
  输入 chroot /sid-root /bin/bash 非常简单,但这将保留当前的所有环境变量,你可能并
  不希望这样并且有时还会出问题。更好的方法是,在别的虚拟终端上执行另一个登录进程,
  登录到 chroot 目录。
  在默认的 Ubuntu 系统中,从 tty1 到 tty6 运行 Linux 控制台,tty7 运行 X Window 系 统 ,
  在本例中,我们将 tty8 设置成 chroot 控制台。按照 用 chroot 来运行不同版本的 Ubuntu,
  第 8.6.35.1 节中的描述创建好 chroot 系统后,就可以在主系统的 root shell 中输入:
  main # echo "8:23:respawn:/usr/sbin/chroot /sid-root "\
  "/sbin/getty 38400 tty8" >> /etc/inittab
  main # init q    # 重启 init
  8.6.35.3 配置 chroot 下的 X
  想在 chroot 下安全地运行最新版的 X 和 GNOME 吗?完全可以!下面的例子将实现在虚拟终
  端 vt9 下运行 GDM。
  首先,按照 用 chroot 来运行不同版本的 Ubuntu, 第 8.6.35.1 节中描述的方法安装好
  chroot 系统,从主系统的 root 下拷贝关键配置文件到 chroot 系统。
  main # cp /etc/X11/xorg.conf /dapper-root/etc/X11/xorg.conf
  main # chroot /dapper-root # or use chroot console
  chroot # cd /dev; /sbin/MAKEDEV generic ; cd -
  chroot # apt-get install gdm gnome x-window-system
  chroot # vi /etc/gdm/gdm.conf # do s/vt7/vt9/ in [servers] section
  chroot # /etc/init.d/gdm start
  在此,编辑/etc/gdm/gdm.conf,使其在 vt7 到 vt9 上创建虚拟终端。
  现在可以很容易地能过切换 Linux 虚拟终端来实现在主系统的 X 环境和 chroot 系统的 X 环
  境之间转换,例如使用 Ctrl-Alt-F7 和 Ctrl-Alt-F9。酷吧!
  [FIXME] 在 chroot 系统下 gdm 的 init 脚本中添加一条注释和一条链接。
  8.6.35.4 使用 chroot 来运行其它发行版
  很容易创建一个包含其它发行版的 chroot 环境。使用其它发行版的安装程序将它们安装到
  单独的硬盘分区中。例如 root 分区位于/dev/hda9:
  main # cd / ; mkdir /other-dist
  main # mount -t ext3 /dev/hda9 /other-dist
  main # chroot /other-dist /bin/bash
  接下来按照 用 chroot 来运行不同版本的 Ubuntu, 第 8.6.35.1 节、 设置 chroot 登录,
  第 8.6.35.2 节和 配置 chroot 下的 X, 第 8.6.35.3 节 处理。
  8.6.35.5 使用 chroot 来编译软件包
  这儿有一个很特殊的 chroot 软件包 pbuilder,它构造一个 chroot 系统并在其中编译软件
  包。该体系可用于检查软件包编译时关联关系是否正确,并确保编译生成的软件包中没有不
  必要的或错误的关联关系。
  8.6.36 怎样检查硬链接
  检查两个文件是否是指向同一个文件的两个硬链接:
  $ ls -li file1 file2
  8.6.37 mount 硬盘上的镜像文件
  如果 file.img 文件是硬盘内容的镜像文件,而且原始硬盘的配置参数为 xxxx ===
  (bytes/sector) * (sectors/cylinder),那么,下面的命令将其挂载到/mnt:
  # mount -o loop,offset=xxxx file.img /mnt
  注意绝大部分的硬盘都是 512 bytes/sector。
  8.6.38 Samba
  获取 Windows 文件的基本方法:
  # mount -t smbfs -o username=myname,uid=my_uid,gid=my_gid \
  //server/share /mnt/smb # 挂载 Windows 的文件到 Linux
  # smbmount //server/share /mnt/smb \
  -o "username=myname,uid=my_uid,gid=my_gid"
  # smbclient -L 192.168.1.2 # 列出某个计算机的共享目录
  可从 Linux 检查 Samba 网上邻居:
  # smbclient -N -L ip_address_of_your_PC | less
  # nmblookup -T "*"
  8.6.39 外来文件系统的操作工具
  Linux 内核支持多种外来文件系统,想访问它们只需将其挂载到合适的文件系统下就行了。
  对某些文件系统,还提供专门工具不需要挂载,只依靠用户空间的程序,不需要内核提供文
  件系统支持,就能完成访问。
  ·   mtools: for MSDOS filesystem (MS-DOS, Windows)
  ·   cpmtools: for CP/M filesystem
  ·   hfsutils: for HFS filesystem (native Macintosh)
  ·   hfsplus: for HFS+ filesystem (modern Macintosh)
  对于创建和检查 MS-DOS FAT 文件系统 dosfstools 非常有用。
  8.7 需要注意的典型错误
  这里有一些危险行为的例子。如果你是使用特权账号 root 的话,负面影响将会更大。
  8.7.1 rm -rf .*
  在象"rm -rf .*" 的命令行参数中使用通配符文件名,有可能造成危险的结果, 因为 ".*"
  扩展为 "." 和 ".."。 比较幸运的是,在 Debian 发行版中,当前版本的 "rm" 命令会检
  查文件名参数的健全性,会拒绝删除 "." 和 ".."。 但这种检查并不一定在其它地方存在。
  尝试下面的操作来参看通配符文件名是怎样工作的。
  ·   "echo ." : 列出当前目录自身
  ·   "echo *" : 列出当前目录下所有不以点开头的文件和目录
  ·   "echo .[^.]*" : 列出当前目录下所有以点开头的文件和目录
  ·   "echo .*" : 列出父目录下的所有东西和父目录自身
  8.7.2 rm /etc/passwd
  由于你的过失,丢失象 /etc/passwd 这样的重要文件,是一件非常痛苦的事。Ubuntu 系统
  周期性的将他们备份到 /var/backups/。 当你恢复这些文件的时候,你需要设置适当的权
  限。
  # cp /var/backups/passwd /etc/passwd
  # chmod 644 /etc/passwd
  第 9 章 - Ubuntu 系统微调
  9.1 系统初始化
  Ubuntu 使用 System V 的 init 脚本系统。参阅 init 程序, 第 2.4.1 节的介绍。
  9.1.1 自定义 init 脚本
  最简单的控制 init 脚本的方法是改变 /etc/default 目 录下 ,与 init 脚本同名的文件里
  的环境变量设置。 例如,/etc/default/hotplug 可以控制 /etc/init.d/hotplug 的行为。
  文件 /etc/default/rcS 可以用来定制 motd、sulogin 等为默认启动。
  如果你不能通过设置这些变量来得到你所需要的行为,你可以去修改 init 脚本:它们都是
  配置文件。
  9.1.2 自定义系统日志
  可通过 /etc/syslog.conf 配置系统日志记录方式。如果想为日志文件上色可安装
  colorize 软件包。参阅 syslogd(8) 和 syslog.conf(5)。
  9.1.3 硬件存取优化
  有一部分硬件优化的配置工作 Ubuntu 留给了系统管理员。
  · hdparm
  o 硬盘存取优化。效果显著。
  o 危险。务必先阅读 hdparm(8)。
  o hdparm -tT /dev/hda 测试硬盘存取速度。
  o hdparm -q -c3 -d1 -u1 -m16 /dev/hda 加速新型 IDE 系统。(有一定风
  险 。)
  · setcd
  o 压缩磁盘存取优化。
  o setcd -x 2 减速至 2x speed。
  · setserial
  o 串行接口管理工具集。
  · scsitools
  o SCSI 硬件管理工具集。
  · memtest86
  o   内存硬件管理工具集。
  · hwtools
  o   低级硬件管理工具集。
  § irqtune:修改设备的 IRQ 优先级,使那些需要高优先级和快速服
  务的硬件(例如,串行接口、调制解调器)获得它所要的资源。对
  串口/调制解调器加速后获得原来 3 倍的吞吐量。
  § scanport:扫描 I/O 空间的 0x100 至 0x3ff 地址段,查找已安装
  的 ISA 设备。
  § inb:一个小巧的黑客工具,用来阅读 I/O 端口信息并将其值转换
  成十六进制和二进制。
  · schedutils
  o   Linux 日程安排工具包。
  o   包括 taskset、irqset、lsrt 和 rt。
  o   再加上 nice 和 renice(不包括在工具包内),就可对进程的日程安排进行
  全面的管理。
  使用 noatime 选项挂载文件系统可有效提高文件的读取速度。参阅 fstab(5) 和
  mount(8)。
  通过 proc 文件系统,Linux 内核可直接调节某些硬件参数。参阅 通过 proc 文件系统调
  整内核, 第 7.3 节。
  Ubuntu 中有许多专门的硬件配置工具包。其中有不少是针对笔记本电脑的。这儿有一些有
  趣的软件包:
  ·   tpconfig - 一个配置触摸屏设备的程序
  ·   apmd - 高级电源管理(APM)工具
  ·   acpi - 显示 ACPI 设备信息
  ·   acpid - ACPI 使用工具
  ·   lphdisk - 识别 Phoenix NoteBIOS 下的隐藏分区。
  ·   sleepd - 笔记本电脑处于非工作状态时进入休眠
  ·   noflushd - 让空闲硬盘进入减速状态
  ·   big-cursor - X 下的巨型鼠标指针
  ·   acme - 激活笔记本电脑上的“多媒体按钮”
  ·   tpctl - IBM ThinkPad 硬件配置工具
  ·   mwavem - Mwave/ACP modem 支持
  ·   toshset - 访问大部分 Toshiba 笔记本电脑的硬件接口
  ·   toshutils - Toshiba 笔记本电脑工具集
  ·   sjog - 激活 Sony Vaio 笔记本电脑上“Jog Dial”功能的程序
  ·   spicctrl - Sony Vaio 控制器程序可增亮 LCD 背光
  ACPI 是一种比 APM 更新的电源管理系统。
  某些软件包需要专门的内核模块。它们已经包含在许多最新的内核源码中。如果遇此问题,
  则需要手动打上最新的内核补丁。
  9.2 访问限制(Restricting access)
  9.2.1 用 PAM 来控制登录
  P A M(Pluggable Authentication Modules 可嵌入认证模块)允许你控制用户是如何登录的 。
  /etc/pam.d/*               # PAM 管理文件
  /etc/pam.d/login           # PAM 登录管理文件
  /etc/security/*            # PAM 模块参数
  /etc/securetty             # 管理通过控制台进行的 root 登录(login)
  /etc/login.defs            # 管理登录行为(login)
  如果想在控制台终端不用密码直接登录系统,可按下面的方法修改 /etc/pam.d/login 文件
  的内容,风险自负。
  #auth         required pam_unix.so nullok
  auth         required pam_permit.so
  该方法亦可用于 xdm、gdm,实现无密码 X 控制台。
  相反,如果你希望强化密码政策,可安装 cracklib2 并按下面的方法修改
  /etc/pam.d/passwd:
  password required         pam_cracklib.so retry=3 minlen=6 difok=3
  使用一次性登录密码激活帐户也很有用。要实现该功能,在 passwd 命令后加上 -e 参 数 ,
  参阅 passwd(1)。
  要设置系统最大进程数,可在 Bash shell 中设定 ulimit -u 1000 或设置 PAM 的
  /etc/security/limits.conf 文件。其它参数如 core 等的设置方法与之类似。PATH 的初
  始值可在 /etc/login.defs 中先于 shell 启动脚本设置。
  PAM 的文档位于 libpam-doc 软件包内。其中 The Linux-PAM System Administrator's
  Guide 一文涵盖了 PAM 配置、可用模块等内容,文档中还包括了 The Linux-PAM
  Application Developers' Guide 和 The Linux-PAM Module Writers' Guide。
  9.2.2 “为什么 GNU su 命令不支持 wheel group””
  这是 Richard M. Stallman 的一句名言,位于旧版 info su 页面末尾。别担心:在 Ubuntu
  中,当前版本的 su 使用 PAM,因此你可以用 /etc/pam.d/su 下的 pam_wheel.so 来限制
  任何用户组使用 su 的能力。下面的操作将在 Ubuntu 系统中赋予 adm 用户等同于 BSD
  wheel 用户组的权限,而且该组成员不需要密码就能使用 su 命令。
  # anti-RMS configuration in /etc/pam.d/su
  auth         required pam_wheel.so group=adm
  # Wheel members to be able to su without a password
  auth         sufficient pam_wheel.so trust group=adm
  9.2.3 各标准用户组的目的
  一些有趣的用户组:
  · 如果 pam_wheel.so 不带任何 group== 参数,root group 就是 su 默认的 wheel
  group。
  ·   adm group 可以阅读日志文件。
  ·   cdrom group 可在本地赋予一组用户访问 CD-ROM 驱动器的权限。
  ·   floppy group 可在本地赋予一组用户访问软盘驱动器的权限。
  ·   audio group 可在本地赋予一组用户访问声音设备的权限。
  ·   src group 拥有源代码以及 /usr/src 目录下的文件。它可以在本地赋予某个用户
  管理系统源代码的权限。
  · 对于管理桌面或低级别的系统管理员,可设置他们为 staff 成员,该类成员可以在
  /usr/local 下工作并且可以在 /home 下创建目录。
  完整列表参阅 Securing Debian Manual 的“FAQ”章节,亦见于 Woody 中的 harden-doc 软
  件包。新的 base-passwd (>3.4.6)软件包亦包含了权威列表:/usr/share/doc/base-
  passwd/users-and-groups.html。
  9.2.4 更安全地工作 – sudo
  使用 sudo 最主要的目的是保护自己少做蠢事,我认为使用系统时使用 sudo 比总是使用
  root 帐号更好。
  Ubuntu 系统默认使用 sudo,来工作,你建立的第一个帐户将自动加入到 admin 组 , admin
  组的成员拥有 sudo 的权限。
  安装 sudo 然后编辑 sudoers 中有关选项激活它。还可在 /usr/share/doc/sudo/OPTIONS
  中查看 sudo 的用户组特性。
  样例中的配置,设定“staff”用户组成员可通过 sudo 执行任何 root 权限的命令而“src”
  用户组成员只可执行规定的一部分 root 权限的命令。
  使用 sudo 的好处在于只需一个普通用户密码登录,并且所有的活动都受到监控。用它为低
  级别的系统管理员赋权是个好主意。例如:
  $ sudo chown -R myself:mygrp .
  当然,如果你知道 root 密码(绝大部分在家安装系统的用户都会知道),就可以在普通用
  户下执行任何 root 命令:
  $ su -c "shutdown -h now"
  Password:
  (我想我该严格限制 admin 帐号的 sudo 特权,但对于家中的服务器,就不用考虑那么多了。)
  想了解其它允许普通用户执行 root 权限命令的程序,可以看看 super 软件包。
  9.2.5 服务的访问限制
  对于 Internet 超级服务器,inetd 会在系统启动时通过 /etc/rc2.d/S20inetd(for
  RUNLEVEL=2)加 载 ,S20inetd 是一个指向 /etc/init.d/inetd 的符号链接。本质上,inetd
  允许一个运行中的守护进程(daemon)调用其它多个守护进程,以减轻系统的负载。
  当某个服务请求到达,系统会查询 /etc/protocols 和 /etc/services 中的数据库,确定
  该请求所指定的相关协议和服务,接着 inetd 会在 /etc/inetd.conf 数据库中查找普通
  Internet 服务或 /etc/rpc.conf 中查找基于 Sun-RPC 的服务。
  为了系统安全,请在 /etc/inetd.conf 中关闭所有不用的服务。涉及到 NFS 和其它基于
  RPC 的程序时需要激活 Sun-RPC 服务。
  有时,inetd 并不直接打开请求的服务,而是在 /etc/inetd.conf 中将该服务名作为的参
  数,打开 tcpd TCP/IP 守护进程包装程序。这时,tcpd 首先登记请求并使用
  /etc/hosts.deny 和 /etc/hosts.allow 进行附加的检查,然后再运行相应的服务程序。
  如果新版的 Ubuntu 系统进行远程访问时出现问题,可以在 /etc/hosts.deny 中注释掉
  “ALL: PARANOID”,如果有该行的话。
  更多信息参阅 inetd(8)、inetd.conf(5)、protocols(5)、services(5)、tcpd(8)、
  hosts_access(5) 和 hosts_options(5)。
  有关 Sun-RPC 的更多信息参阅 rpcinfo(8)、portmap(8) 和
  /usr/share/doc/portmap/portmapper.txt.gz。
    9.3.3 方法二:重编译内核
  Ubuntu 用 make-kpkg 创建新内核,使用 make-kpkg 时加上新的 --append_to_version 参
  数可创建多重内核镜像。参阅 Ubuntu 下的 Linux 内核, 第 7 章。
  make menuconfig 后执行下列步骤:
  · bzImage
  · 包含 IDE CD driver(不是必须的,但这样更简单)
  · 将 ide-scsi 和 sg 编译进内核,或编译成模块
  9.3.4 配置步骤
  下列步骤可让系统在启动时激活内核对刻录机的支持:
  # echo ide-scsi >>/etc/modules
  # echo sg        >>/etc/modules
  # cd /dev; ln -sf scd0 cdrom
  手工激活可以这样做:
  # modprobe ide-scsi
  # modprobe sg
  重启以后,用下列方法检查安装情况:
  $ dmesg|less
  # apt-get install cdrecord
  # cdrecord -scanbus
  [Per Warren Dodge]如果机器上同时有 CD-ROM 和 CD-R/RW,这 时 ide-scsi 和 ide-cd 可
  能会产生冲突,请试试在 /etc/modutils/aliases 中加上下面的内容,然后运行 update-
  modules 并重启系统。
  pre-install      ide-scsi      modprobe ide-cd
  上述指令指示系统在加载 ide-scsi 前先加载 IDE 驱动。IDE 驱动 ide-cd 接管所有
  ATAPI CD-ROM——对指明忽略的设备除外。剩下的设备才由 ide-scsi 来管理。
  9.3.5 光盘镜像文件(可引导光盘)
  将 target-directory/ 下的文件制作成光盘镜像文件 cd-image.raw(可引导系统、Joliet
  TRANS.TBL-enabled 格式的光盘;如果不需要引导系统功能,可去掉 -b 和 -c 选 项 ), 在
  第一个软驱中插入启动软盘然后执行:
  # dd if=/dev/fd0 target-directory/boot.img
  # mkisofs -r -V volume_id -b boot.img -c bootcatalog -J -T \
  -o cd-image.raw target_directory/
  一个有趣的黑客尝试是制作一盘 DOS 引导光盘。如果上述的 boot.img 文件中包含了通用
  DOS 引导软盘镜像,光盘就可以象插在软驱(A:)中的 DOS 软盘一样引导 DOS 系统。如果
  再加上 freeDOS 就更有趣。
  想检查该光盘镜像文件,可以在回送设备(loop device)上加载它。
  # mount -t iso9660 -o ro,loop cd-image.raw /cdrom
  # cd /cdrom
  # mc
  # umount /cdrom
  9.3.6 刻录光盘(R,R/W):
  首先进行设备测试(假设是双倍数刻录)
  # nice --10 cdrecord -dummy speed=2 dev=0,0 disk.img
  如果测试通过,执行下面的命令刻录 CD-R
  # nice --10 cdrecord -v -eject speed=2 dev=0,0 disk.img
  或执行下面命令刻录 CD-RW
  # nice --10 cdrecord -v -eject blank=fast speed=2 dev=0,0 disk.img
  某些型号的 CD-RW 刻录机用下面的命令更好
  112
  Linux公社 www.linuxidc.com
  # nice --10 cdrecord -v blank=all speed=2 dev=0,0 disk.img
  接下来执行
  # nice --10 cdrecord -v -eject speed=2 dev=0,0 disk.img
  分两步做是必要,这可以防止在刻录时遇到数据空白产生 SCSI 超时错误。nice 参数可时
  也要做一些调整。
  9.3.7 制作光盘镜像文件
  某些 CD-R 和商业光盘在数据末尾追加了空白扇区(junk sectors), 使 用 dd 无法拷贝这
  些光盘(Windows98 CD 就是其中之一)。cdrecord 软件包中有一个 readcd 命令,用它可
  以将任何光盘内容拷贝成镜像文件。对于数据盘,先挂载,运行 df 查看它的实际大小,再
  将显示的数字(in blocks, === 1024 bytes)除以 2 得到实际光盘扇区数(2048 bytes),
  带参数运行 readcd 用该硬盘镜像文件烧制 CD-R/RW。
  # readcd dev=target,lun,scsibusno # select function 11
  其中,大部分情况下命令行中三个参数都为 0。有时 readcd 给出的扇区数会偏多!此时使
  用前面用挂载镜像的方法得出的大小值来对上述参数赋值效果更好。
  应该提醒的是,如果你对 CD-ROM 使用 dd 的话,会有不少问题。第一次执行 dd 时可能会
  产生错误信息并丢失光盘镜像末端的一些数据。再次执行 dd 时,如果没有指定镜像的大小
  的话,在一些系统上会产生一个过大光盘镜像,其末端都是垃圾。只有第二次运行 dd 时 ,
  使用正确的镜像大小并在看到错误信息之后不弹出光盘,才能避免这些问题。例如,假设用
  df 得到镜像的大小为 46301184 blocks,则执行两次下面的命令可以得到正确的镜像(这
  是我的经验):
  # dd if=/dev/cdrom of=cd.img bs=2048 count=$((46301184/2))
  9.3.8 Ubuntu 安装盘镜像
  有关 Ubuntu CDs 的最新信息,请浏览 Ubuntu CD site。
  如果有较快的 Internet 连接,可考虑用下面的引导方法从网络安装系统:
  · 一些软盘镜像。
  · 一个迷你型可引导光镜像。
  如果没有较快的 Internet 连接,可考虑从光盘分发免费获取安装光盘。
  请不要浪费带宽来下载标准光盘镜像(即使是使用新的 jigdo 方式),除非你是光盘镜像测
  试员。
  有一个很有名的光盘镜像 KNOPPIX - Live Linux Filesystem On CD。该光盘可以启动一个
  全功能的 Debian 系统而且不需要在硬盘上安装。
  9.3.9 将系统备份到 CD-R
  想要将重要的配置文件和数据备份到 CD-R,可使用 backup 中的“backup”脚本。亦可参
  阅 差异备份与数据同步, 第 8.4 节。
  9.3.10 将音乐 CD 刻录到 CD-R
  我没测试过:
  # apt-get install cdrecord cdparanoia
  # cdparanoia -s -B
  # cdrecord dev=0,0,0 speed=2 -v -dao -eject defpregap=1 -audio *.wav
  或
  # apt-get install cdrdao #disk at once
  # cdrdao read-cd --device /dev/cdrom --paranoia-mode 3 my_cd # read cd
  # cdrdao write --device /dev/cdrom --speed 8 my_cd    # write a new CD
  cdrdao 与拷贝不同(如没有数据间隙,等...)。
  9.3.11 刻录 DVD-R、DVD-RW 和 DVD+RW
  刻录 DVD 光盘有两种方式:
  · 使用 growisofs 并搭配 mkisofs。
  · 按照 /usr/share/doc/cdrecord/README.DVD.Debian 的说明重新编译 cdrecord,
  并创建加入了 dvd 支持的本地软件包。
  9.4 X
  X 窗口系统由 XFree86 提供。Ubuntu 的最早系统中 X 服务器有两个主要版本:XFree86
  Version 3.3 (XF3)和 XFree86 Version 4.x series (XF4),它们都是基于 X.Org 制定的
  X11R6 标准。现在全部使用 xorg 。
  想了解 X 的基础知识,可参阅 X(7),LDP XWindow-User-HOWTO 和 Remote X Apps mini-
  HOWTO。 对 Debian 用户专门的指南,可阅读 xfree86-common 软件包中提供的
  /usr/share/doc/xfree86-common/FAQ.gz,其中 Branden Robinson 有一些关于 key
  binding 的有趣且权威的讨论。
  X 服务器, 第 9.4.3 节:: 该程序存在于那些需要在用户显示器(CRT,LCD)上显示 X 窗
  口和桌面并接收键盘和鼠标输入的本地主机上。
  X 客户端, 第 9.4.4 节:: 该程序存在于那些需要运行与 X 兼容的应用程序的(本地或远
  程)主机上。
  这正好将常规的“服务器”和“客户机”关系倒转过来。
  有几种途径让“X server”(显示端)接收远程“X client”(应用端)的连接请求:
  · xhost 方式
  o   主机列表机制(很不安全)。
  o   协议不加密(易受到网络监听攻击)
  o   尽量不要使用该方式。
  o   参阅 联接远程的 X 服务器 – xhost, 第 9.4.7 节 和 xhost(1x)。
  · xauth 方式
  o    MIT magic cookie 机制(不安全但比 xhost 强 点 )。
  o   协议不加密(易受到网络监听攻击)
  o   仅用于本地连接,它所需的 CPU 消耗比 ssh -X 低。
  o   参阅 X 下获取 root 权限, 第 9.4.12 节 和 xauth(1x)。
  · xdm, wdm, gdm, kdm, ... 方式
  o   MIT magic cookie 机制(和 xauth 一样不安全)
  o   参阅 xdm(1x) 和 Xsecurity(7) 获得更多有关 X 显示访问控制的基础知
  识
  o   参阅 wdm(1x)、gdm(8) 和 kdm.options(5) 获得更多信息,当然先得装上
  它们。
  o   参阅 自定义运行级别, 第 2.4.3 节了解如何在不删除 xdm 包的情况下禁
  用它,使系统启动到控制台。
  · ssh -X 方式
  o    基于安全 shell 的端口发送机制(安全)。
  o   加密协议(在本地使用很耗系统资源)。
  o   使用它进行远程连接。
  o   参阅 联接远程的 X 服务器 – ssh, 第 9.4.8 节。
  除了 ssh,所有的远程连接方式,都需要 X 服务器开启 TCP/IP 连接。参阅 在 TCP/IP 中
  使用 X, 第 9.4.6 节。
  9.4.1 X 软件包
  提供了下列几个(meta)软件包来简化 X 的安装。
  x-window-system-core:: 该综合包提供一些基本组件,用于在单一工作站上运行 X Window
  系统,其中包括 X 函数库、一个 X 服务器(xserver-xfree86)、一套字体、一组基本的 X
  客户端及工具。
  x-window-system:: 该综合包提供 XFree86 项目开发的所有 X Window 系统的组件,以及
  一套经久不衰的辅助程序。           (注意,它包含了 x-window-system-core、twm 和 xdm 等组件,
  故安装了它就不用再安装 x-window-system-core 了 。)
  xserver-common-v3:: XFree86 3.x X 服务器(X3)相关的程序和工具。
  xserver-*:: XF3 服务器软件包的补充包,包含了对那些新的 XF4 服务器(xserver-
  xfree86)不支持的硬件的支持。如 XF4 不支持某些老式的 ATI mach64 卡,某些视频卡在
  Woody 版的 XF4 中无法工作等等。         (要获得可用软件包,可执行 apt-cache search
  xserver-|less。所有这些 XF3 服务器均是基于 xserver-common-v3 的 。)
  大多数情况下,应该安装 x-window-system(如果要通过控制台登录,需禁用 xdm,具体方
  法参阅 “我不想直接启动到 X!”, 第 8.1.4 节 。)
  9.4.2 X 服务器的硬件侦测
  在安装 X 系统之前安装下列软件包,就能在 X 配置阶段实现硬件侦测:
  · discover – 硬件识别系统。
  · mdetect – 鼠标自动侦测工具。
  · read-edid – VESA PnP 监视器硬件信息收集工具。
  9.4.3 X 服务器
  有关 X 服务器的信息,参阅 xorg(1x)。
  从本地控制台调用 X 服务器:
  $ startx -- :<display> vtXX
  e.g.:
  $ startx -- :1 vt8 -bpp 16
  ... start on vt8 connected to localhost:1 with 16 bpp mode
  --后面的参数用于设置 X 服务器。
  注意,在使用 ~/.xserverrc 脚本定制 X 服务器启动进程时,请确保 exec 调用的是真正
  的 X 服务器。如果没这么做会导致 X 服务器启动缓慢及退出。例如:
  #!/bin/sh
  exec /usr/bin/X11/X -dpi 100 -nolisten tcp
  9.4.3.1 配置 X 服务器(版本 4)
  (重新)配置 XF4 服务器,
  # dpkg-reconfigure --priority=low xserver-xorg
  该命令会生成 /etc/X11/xorg.conf 文件并调用 dexconf 脚本来配置 X。
  9.4.3.2 配置 X 服务器(版本 3)
  (重新)配置 XF3 服务器。例如,针对 ATI mach64,
  # dpkg-reconfigure --priority=low xserver-common-v3
  # dpkg-reconfigure --priority=low xserver-mach64
  该命令会生成 /etc/X11/XF86Config 文件并调用 xf86config-v3 脚本来配置 X。
  9.4.3.3 手工配置 X 服务器
  往文件 /etc/X11/xorg.conf 中添加用户自定义内容时,              不要在配置文件的定义段落中进行
  编辑:
  ### BEGIN DEBCONF SECTION
  [snip]
  ### END DEBCONF SECTION
  正确是做法是将用户定义内容加在定义段落之前。例如,要添加自定义视频卡,可在文件
  开头添加类似下面的内容:
  Section "Device"
  Identifier        "Custom Device"
  Driver            "ati"
  Option            "NoAccel"
  EndSection
  Section "Screen"
  Identifier "Custom Screen"
  Device      "Custom Device"
  Monitor     "Generic Monitor"
  DefaultDepth 24
  Subsection "Display"
  Depth       8
  Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
  Subsection "Display"
  Depth       16
  Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
  Subsection "Display"
  Depth       24
  Modes       "1280x960" "1152x864" "1024x768" "800x600" "640x480"
  EndSubsection
  EndSection
  Section "ServerLayout"
  Identifier        "Custom"
  Screen            "Custom Screen"
  InputDevice       "Generic Keyboard" "CoreKeyboard"
  InputDevice       "Configured Mouse" "CorePointer"
  EndSection
  对于 Sarge(撰写本文时是 testing),如果你希望在升级的时候保留用户的自定义的
  /etc/X11/xorg.conf 设置,请用 root 运行下列命令:
  # cp /etc/X11/xorg.conf /etc/X11/xorg.conf.custom
  # md5sum /etc/X11/xorg.conf > /var/lib/xfree86/xorg.conf.md5sum
  # dpkg-reconfigure xserver-xorg
  如果想美化字体,请按照 X 下的 TrueType 字体, 第 9.4.13 节中的说明来修改
  /etc/X11/xorg。
  请同时检查 X 设置中的其他部分。不良的显示器设置甚至比难看的字体更让人头痛,所以
  请确保你设置的刷新率是你显示器能处理的最高刷新率(85 Hz 很 好 ,75 Hz 还可以,60 Hz
  就很糟糕了)。
  9.4.4 X 客户端
  绝大多数 X 客户端程序都可以用类似下面的命令启动:
  client $ xterm -geometry 80x24+30+200 -fn 6x10 -display hostname:0 &
  命令行中各参数的含义如下:
  · -geometry WIDTHxHEIGHT+XOFF+YOFF:窗口初始尺寸和位置。
  · -fn FONTNAME:显示文本的字体。FONTNAME 的赋值有如下几个:
  o   a14: 普通字体
  o   a24: 大号字体
  o   ... (使用 xlsfont 检查可用字体。)
  · -display displayname:X 服务器名称。 displayname 的赋值有如下几个:
  o   hostname:D.S 表示在名为 hostname 的主机的显示器 D 上显示的屏幕 S;
  工作于该显示器的 X 服务器监听 TCP 端口 6000+D。
  o   host/unix:D.S 表示在 host 主机的显示器 D 上显示的屏幕 S;工作于该
  显示器的 X 服务器监听 UNIX domain socket /tmp/.X11-unix/XD(故只能
  从主机访问它)。
  o    :D.S 等价于 host/unix:D.S,其中 host 代表本地主机名。
  默认的 X 客户端程序(应用端)的 displayname 可通过 DISPLAY 环境变量来设置。例如:
  在运行某 X 客户端程序之前,执行下列命令之一就可以完成设置工作:
  $ export DISPLAY=:0
  # 默认情况下,本地机器使用第一个 X 屏幕
  $ export DISPLAY=hostname.fulldomain.name:0.2
  $ export DISPLAY=localhost:0
  程序启动方式可以在~/.xinitrc 中进行自定义。例如:
  xrdb -load $HOME/.Xresources
  xsetroot -solid gray &
  xclock -g 50x50-0+0 -bw 0 &
  xload -g 50x50-50+0 -bw 0 &
  xterm -g 80x24+0+0 &
  xterm -g 80x24+0-0 &
  118
  正如 自定义 X 会话, 第 9.4.5.1 节中所描述的,当使用 startx 启动 X 时,该脚本将重
  载 Xsession 所做的所有常规操作,通常用 ~/.xsession 来代替,而该方法仅作为最后的
  手段使用。参阅 xsetroot(1x)、xset(1x) 和 X 资源, 第 9.4.10 节。
  9.4.5 X 会话
  X 会话(X 服务器 + X 客户端)可使用下列方法启动:
  · startx:xinit 的脚本化命令(wrapper script command), 负 责 从 Linux 字符型
  控制台启动 X 服务器和客户端。如果 ~/.xinitrc 文件不存在,
  /etc/X11/xinit/xinitrc 会调用并执行 /etc/X11/Xsession。
  · xdm、gdm、kdm 或 wdm:X 显示管理器守护进程,负责启动 X 服务器和客户端,并
  管理来自 GUI 屏幕的登录行为。直接执行 /etc/X11/Xsession。
  想使用控制台参阅 “我不想直接启动到 X!”, 第 8.1.4 节。
  9.4.5.1 自定义 X 会话
  默认的启动脚本 /etc/X11/Xsession 是 /etc/X11/Xsession.d/50xfree86-
  common_determine-startup 和 /etc/X11/Xsession.d/99xfree86-common_start 的高效的
  结合体。
  /etc/X11/Xsession 的执行会受 /etc/X11/Xsession.options 的影响,从本质上讲,它使
  用 exec 命令执行系统中按下面的次序排序,排在第一位的程序:
  ·  ~/.xsession or ~/.Xsession,如果它被定义。
  ·  /usr/bin/x-session-manager,如果它被定义。
  ·  /usr/bin/x-window-manager,如果它被定义。
  ·  /usr/bin/x-terminal-emulator,如果它被定义。
  Ubuntu 选择系统 Ubuntu alternative system )对这些命令的确切定义进行了描述,参阅
  # update-alternatives --config x-session-manager
  ... 或
  # update-alternatives --config x-window-manager
  如果想定义某 X 窗口管理器为默认窗口管理器,同时保留已安装的 GNOME 和 KDE 会话管
  理器,按下面的方法编辑 /etc/X11/Xsession.options 来禁用 X 会话管理器:
  # /etc/X11/Xsession.options
  #
  # configuration options for /etc/X11/Xsession
  # See Xsession.options(5) for an explanation of the available options.
  # Default enabled
  allow-failsafe
  allow-user-resources
  119
  Linux公社 www.linuxidc.com
  allow-user-xsession
  use-ssh-agent
  # Default disabled (enable them by uncommenting)
  do-not-use-x-session-manager
  #do-not-use-x-window-manager
  如果不想按上述方法修改系统,由于 gnome-session 和 kdebase 软件包包含了那些 X 会
  话管理器。所以删除它们,X 窗口管理器就成了默认窗口管理器了。(废话,还更好的主意
  吗?)
  对于那些 /etc/X11/Xsession.options 中仅包含一行 allow-user-xsession 的 系统 ,任何
  定义了 ~/.xsession 或 ~/.Xsession 的用户,均可以自定义 /etc/X11/Xsession 的行为。
  ~/.xsession 文件中排在最后的命令,其格式应该为 exec some-window/session-manager,
  用来启动你喜欢的 X 窗口/会话管理器。
  /usr/share/doc/xfree86-common/examples/xsession.gz 给出了一个不错的 ~/.xsession
  脚本样例。
  我使用它来为每个用户设置窗口管理器、屏幕访问和语言支持。参阅 针对用户启动 X 会话,
  第 9.4.5.2 节、 X 下获取 root 权限, 第 9.4.12 节、 多语言的 X 窗口系统范例, 第
  9.7.9 节。
  如果你希望一些 X 客户端程序能自动启动,参阅 X 客户端, 第 9.4.4 节 的范例并将其写
  在 ~/.xsession 而不是 ~/.xinitrc。
  用户自己添加的 X 资源保存在 ~/.Xresources,而系统级的 X 资源保存于
  /etc/X11/Xresources/*。参阅 xrdb(1x)。
  用户可以在 ~/.xmodmaprc 中自定义键盘布局和鼠标按键布局,参阅 xmodmap(1x)。
  9.4.5.2 针对用户启动 X 会话
  遵循 自定义 X 会话, 第 9.4.5.1 节中描述的原则,要激活用户特定的 X 会话/窗口管理
  器,需要安装相应的软件包并在 ~/.xsession 文件末尾添加如下内容(我爱用
  blackbox/fluxbox, 它 简 单 快 捷 。):
  · 默认 X 会话管理器
  o   exec /usr/bin/x-session-manager
  · 默认 X 窗口管理器
  o   exec /usr/bin/x-window-manager
  · GNOME 会话管理器(loaded)
  o   需安装软件包:gnome-session
  o  exec /usr/bin/gnome-session
  · KDE 会话管理器(loaded)
  o  需安装软件包:kdebase (or kdebase3 for KDE3)
  o  exec /usr/bin/kde2
  · Blackbox 窗口管理器(lightweight, slick).
  o  需安装软件包:blackbox
  o  exec /usr/bin/blackbox
  · Fluxbox 窗口管理器(lightweight, new blackbox).
  o  需安装软件包:fluxbox
  o  exec /usr/bin/fluxbox
  · Xfce 窗口管理器(Mac OS-X, SUN CDE like).
  o  需安装软件包:xfce
  o  exec /usr/bin/xfwm
  · IceWM 窗口管理器(lightweight, GNOME alternative)
  o  需安装软件包:icewm
  o  exec /usr/bin/X11/icewm
  · FVWM2 虚拟窗口管理器(lightweight, Win95 like)
  o  需安装软件包:fvwm
  o  exec /usr/bin/fvwm2
  · Windowmaker 窗口管理器(somewhat NexT like)
  o  需安装软件包:wmaker
  o  exec /usr/bin/wmaker
  · Enlightenment 窗口管理器(loaded).
  o  需安装软件包:enlightenment
  o  exec /usr/bin/enlightenment
  参阅 Window Managers for X.
  9.4.5.3 配置 KDE/GNOME
  要配置完整的 KDE 或 GNOME 环境,下列的综合包很有用:
  · KDE:安装 kde 软件包
  · GNOME:安装 gnome 软件包
  121
  Linux公社 www.linuxidc.com
  请使用能操作 Recommends 类软件包的安装工具安装这些软件包,如 dselect 和
  aptitude,比起 apt-get 它们能提供更丰富的软件供你选择。
  如果想从控制台登录,必须禁用 X 显示管理器,例如 kdm、gdm 和 wdm 这会牵扯到一些关
  联问题,有关信息参阅 “我不想直接启动到 X!”, 第 8.1.4 节。
  如果想将系统的默认环境由 KDE 换成 GNOME,请用 Alternative 命令, 第 6.5.3 节中所
  述的方法配置 x-session-manager。
  9.4.6 在 TCP/IP 中使用 X
  由于不加密的远程 TCP/IP 套接字连接易受到窃听攻击,新版的 Debian 安装 X 时默认是
  禁用 TCP/IP 套接字口的。建议使用 ssh 进行远程 X 连 接(参阅 联接远程的 X 服务器 –
  ssh, 第 9.4.8 节 )。
  通常不推荐使用本节所述的方法,除非系统处于防火墙之后且所处网络中全是绝对可信任的
  用户。使用下面的命令检查当前 X 服务器的 TCP/IP 套接字口的设置:
  # find /etc/X11 -type f -print0 | xargs -0 grep nolisten
  /etc/X11/xinit/xserverrc:exec /usr/bin/X11/X -dpi 100 -nolisten tcp
  删除 -nolisten 就可以恢复 X 服务器对 TCP/IP 的监听。
  9.4.7 联接远程的 X 服务器 – xhost
  xhost 允许通过主机名访问。该方式极不安全。下面的方法将关闭主机验证功能,只要
  TCP/IP 套接字连接功能是打开的(参阅 在 TCP/IP 中使用 X, 第 9.4.6 节)本机就会接
  收来自任何地方的连接请求。
  $ xhost +
  要重新打开主机验证功能可执行:
  $ xhost -
  xhost 无法区分远程主机上不同的用户,而且远程连接的主机名(实际上是地址)也可以是伪
  造的。
  如果处于一个不可信的网络环境(例如通过 PPP 拔号连接到 Internet),即使在网络中成
  为主机受到一定标准的限制,也应尽量避免使用该连接方式。参阅 xhost(1x)。
  9.4.8 联接远程的 X 服务器 – ssh
  使用 ssh 可以在本地主机和远程应用服务器之间建立一个安全的连接通道。
  · 如果不想每次执行相同的命令行选项,可在远程主机的 /etc/ssh/sshd_config 文
  件中,打开 X11Forwarding 和 AllowTcpForwarding 选项。
  · 启动本地主机的 X 服务器。
  · 在本地主机上开一个 xterm 进程。
  · 运行 ssh 建立与远程站点的连接。
  localname @ localhost $ ssh -q -X -l loginname remotehost.domain
  Password:
  .....
  · 在远程站点上运行 X 应用程序命令。
  loginname @ remotehost $ gimp &
  该连接方式使得远程 X 客户机上的屏幕输出,看上去就好象是通过本地 UNIX 域套接字的
  方式连接到服务器的客户机输出。
  9.4.9 X 终端模拟器 – xterm
  学习 xterm 可以去 http://dickey.his.com/xterm/xterm.faq.html。
  9.4.10 X 资源
  许多老式的 X 程序,如 xterm,使用 X 资源数据库配置它们的外观。~/.Xresources 文件
  用于保存用户资源定义。登录后该文件自动合并到默认的 X 资源中。系统范围的缺省配置
  存储在 /etc/X11/Xresources/* 中,应用程序缺省的配置存储在 /etc/X11/app-
  defaults/*。使用这些设置作为学习的起点。
  这儿是一些有用的设置,可加到~/.Xresources 文件中:
  ! Set the font to a more readable 9x15
  XTerm*font: 9x15
  ! Display a scrollbar
  XTerm*scrollBar: true
  ! Set the size of the buffer to 1000 lines
  XTerm*saveLines: 1000
  ! Large kterm screen
  KTerm*VT100*fontList: -*-fixed-medium-r-normal--24-*,\
  -*-gothic-medium-r-normal--24-*,\
  -*-mincho-medium-r-normal--24-*
  要使上述设置立即生效,可用下面的命令将它们合并到数据库:
  xrdb -merge ~/.Xresources
  参阅 xrdb(1x)。
  9.4.11 X 中键盘和指针按钮的映射
  xmodmap 程序用来编辑和显示键盘修订表和按键映射表的,客户端程序用它们来把按键代码
  事件(event keycodes)转换成 X 中的 keysyms。
  123
  Linux公社 www.linuxidc.com
  $ xmodmap -pm
  ... 显示当前按键修订表
  $ xmodmap -pk | pager
  ... 显示当前按键映射表
  $ xmodmap -e "pointer === 3 2 1" # 设置为惯用左手鼠标
  $ xmodmap ~/.xmodmaprc # 用 ~/.xmodmaprc 中的描述设置键盘
  通常从用户的会话中启动脚本,从 ~/.xsession 中执行。
  要获得按键代码(keycode),请在 X 中运行 xev 并按键。要想获得 keysym 的含义,请从
  宏定义文件 /usr/include/X11/keysymdef.h 中查找。该文件中所有的 #define 声明都用
  XK_ 命名,伪装成 keysym 的名字。
  参阅 xmodmap(1x)。
  9.4.12 X 下获取 root 权限
  如果运行 GUI 程序时需要 root 权限,请用下面的步骤在用户的 X 服务器上显示程序输
  出。千万不要直接使用 root 帐号启动 X 服务器以避免承担不必要的安全风险。
  以普通用户身份启动 X 服务器,开一个 xterm 控制台窗口,执行:
  $ XAUTHORITY=$HOME/.Xauthority
  $ export XAUTHORITY
  $ su root
  Password:*****
  # printtool &
  非 root 用户以 su 方式运用该技巧时,要确保该非 root 用户所在用户组对
  ~/.Xauthority 文件有读权限。
  想要系统自动执行该命令序列,请在用户帐号下创建 ~/.xsession 文件,编辑文件如下:
  # This makes X work when I su to the root account.
  if [ -z "$XAUTHORITY" ]; then
  XAUTHORITY=$HOME/.Xauthority
  export XAUTHORITY
  fi
  unset XSTARTUP
  # If a particular window/session manager is desired, uncomment following
  # and edit it to fit your needs.
  #XSTARTUP=/usr/bin/blackbox
  # This starts x-window/session-manager program
  if [ -z "$XSTARTUP" ]; then
  if [ -x /usr/bin/x-session-manager ]; then
  XSTARTUP=x-session-manager
  elif [ -x /usr/bin/x-window-manager ]; then
  XSTARTUP=x-window-manager
  elif [ -x /usr/bin/x-terminal-emulator ]; then
  XSTARTUP=x-terminal-emulator
  124
  Linux公社 www.linuxidc.com
  fi
  fi
  # execute auto selected X window/session manager
  exec $XSTARTUP
  接着在用户的 xterm 窗口中运行 su(不是 su -)。现 在 从 该 xterm 启动的 GUI 程序就可
  以在该用户的 X window 环境中显示以 root 权限运行的程序输出。只要执行了默认的
  /etc/X11/Xsession,就可以使用该方法。如果用户使用 ~/.xinitrc 或 ~/.xsession 来配
  置自定义环境,需要将上面提到的环境变量 XAUTHORITY 加到这些脚本中去。
  还有一种方法,sudo 可用于自动执行上面的命令序列:
  $ sudo xterm
  ... 或
  $ sudo -H -s
  这时 /root/.bashrc 中应包含:
  if [ $SUDO_USER ]; then
  sudo -H -u $SUDO_USER xauth extract - $DISPLAY | xauth merge -
  fi
  即使对那些 home 目录位于 NFS 上的用户,它也能正常工作。因为 root 不用读
  .Xauthority 文件。
  还有一些用于该目的的专用软件包:kdesu、gksu、gksudo、gnome-sudo 和 xsu。其它方法
  也可以达到同样的目的:如在 /root/.Xauthority 和相应用户文件之间创建一个符号链接;
  使用 sux 脚本;或对 root 初始化脚本执行“xauth merge
  ~USER_RUNNING_X/.Xauthority”。
  更多方法参阅 debian-devel mailing list。
  9.4.13 X 下的 TrueType 字体
  xorg 中标准的 xfs 能完美地驱动 TrueType 字体,如果你使用的是 XFree86-3,就得安装
  第三方字体服务器如 xfs-xtt。
  不论什么应用程序,如果要使用 TrueType 字体,就要与 libXft 或 libfreetype 建立链
  接(如果你使用的是已编译好的 .deb 包,就不用在这方面操心了)。
  首先进行字体支持的基础设置:
  · 安装软件包 x-ttcidfont-conf 和 defoma。它们能自动生成文件 fonts.scale 和
  fonts.dir。
  # apt-get install x-ttcidfont-conf
  125
  Linux公社 www.linuxidc.com
  · 编辑 /etc/X11/xorg.conf 的 Section "Files" 部分,如下显示:
  Section "Files"
  FontPath "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
  FontPath "/usr/share/fonts/truetype"
  FontPath "/usr/lib/X11/fonts/CID"
  FontPath "/usr/lib/X11/fonts/Speedo"
  FontPath "/usr/lib/X11/fonts/misc"
  FontPath "/usr/lib/X11/fonts/cyrillic"
  FontPath "/usr/lib/X11/fonts/100dpi:unscaled"
  FontPath "/usr/lib/X11/fonts/75dpi:unscaled"
  FontPath "/usr/lib/X11/fonts/Type1"
  EndSection
  第一行使 xorg 使用任何你从 Ubuntu 软将包安装的 TrueType 字体。因为 xorg 渲染
  Type1 字体的效果很差,Type1 字体的目录就放在后面了。点阵字体的小技巧 :unscaled 对
  于新的 XF4 来说是不需要的,我把它包含在内是为了确保万无一失。 为了保留手工修改的
  /etc/X11/xorg.conf 文件,请按照 手工配置 X 服务器, 第 9.4.3.3 节的说明操作。
  然后安装 DFSG 字体软件包:
  · 西方 TrueType 字体:
  o  ttf-bitstream-vera:一套由 Bitstream, Inc 创造的高质量的 TrueType
  字体。 [40]
  o  ttf-freefont:一套高质量的 TrueType 字体,包含了 UCS 字符集。
  o  ttf-thryomanes:一套包括了 Latin、Greek、Cyrillic 和 IPA 的 Unicode
  TrueType 字体。
  · 亚洲字体:
  o  tfm-arphic-bsmi00lp: Chinese Arphic "AR PL Mingti2L Big5"
  TrueType font TeX font metric data
  o  tfm-arphic-bkai00mp: Chinese Arphic "AR PL KaitiM Big5" TrueType
  font TeX font metric data
  o  tfm-arphic-gbsn00lp: Chinese Arphic "AR PL SungtiL GB" TrueType
  font TeX font metric data
  o  tfm-arphic-gkai00mp: Chinese Arphic "AR PL KaitiM GB" TrueType
  font TeX font metric data
  o  ttf-baekmuk: Korean Baekmuk series TrueType fonts
  o  hbf-jfs56: Chinese Jianti Fangsong 56x56 bitmap font (GB2312) for
  CJK
  o  hbf-cns40-b5: Chinese Fanti Song 40x40 bitmap font (Big5) for CJK
  o  hbf-kanji48: Japanese Kanji 48x48 bitmap font (JIS X-0208) for
  CJK
  由于供自由使用的字体有时很有限,Debian 用户也可以安装或共享某些商业 TrueType 字
  体。为了简化安装这类字体的工序,于是产生了一些方便的软件包:
  · ttf-commercial
  · msttcorefonts (>1.1.0) [41]
  请慎重选择 TT 字体,以免自由系统受到不自由字体的污染。
  所有这些 Debian 字体软件包不用设置就能工作,并且对于使用“core”字体系统的 X 程
  序来说,它都是可用的。包括 Xterm、Emacs 和其他一些非 KDE 和 gnome 的程序。
  现在运行 xfontsel,在 fndry 菜单中选中任何一个 TrueType 字体,你可以在 “fmly”
  菜单中看到很多项目。
  对于 KDE2.2 和 GNOME1.4(搭配 libgdkxft0 使 GTK 1.2 能对字体进行反锯齿的渲染),
  同样的你需要配置 Xft1。Xft1 非常的过时了,基本上只有 GNOME1.4 和 KDE2.2 在 使 用 。
  编辑 /etc/X11/XftConfig 文件,在其他“dir”之前加入下面这一行东西。
  dir "/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType"
  [42]
  对于 GNOME2 和 KDE3(Sarge 之后的版本),你需要设置 fontconfig,Xft2 用它来查找字
  体。 你不必为此再安装其他额外的软件包,因为所有用到 fontconfig 的软件包都会依赖
  与它的。
  首先,查看 /etc/fonts/fonts.conf。里面应该有如下的一行内容。如果没有,就打开
  /etc/fonts/local.conf,在 <fontconfig> 行后面添加这些内容。
  <dir>/var/lib/defoma/x-ttcidfont-conf.d/dirs/TrueType</dir>
  Fontconfig 应该能直接获得字体信息,          “fc-list”能列出你的新字体。另外一个 fontconfig
  的特色是,你能把字体放在 ~/.fonts/ 中,而所有字体可设置的程序都能立即访问它们。
  如果你在 X 中手动安装了新的一个 TrueTyep 字体,而没有使用 Ubuntu 的软件包,运行
  # xset fp rehash
  让 xorg 重新检查目录下面的内容并找到新的字体。
  9.4.14 X 中的网页浏览器
  Dapper 发行版中包含了下面这些拥有图形处理能力的网页浏览器:
  ·   mozilla Mozilla 浏览器
  ·   mozilla-firefox Mozilla 浏览器变体(独立的)
  ·   epiphany-browser Mozilla 浏览器变体(Gnome)
  ·   galeon 基于 Mozilla 的使用 Gnome UI 的浏览器(新增)
  ·   konqueror KDE 浏览器
  ·   amaya W3C 参考浏览器
  ·   ...
    9.5 SSH
  S S H(Secure SHell)是 在 Internet 中建立连接的安全途径。OpenSSH 是一个自由的 SSH 实
  现软件,它包含 在 Debian 的 ssh 软件包中。
  9.5.1 SSH 基础
  首次安装 OpenSSH 服务器和客户机。
  # apt-get update && apt-get install ssh
  要运行 OpenSSH 服务器,还得屏蔽掉 /etc/ssh/sshd_not_to_be_run。
  SSH 有两个验证协议:
  · SSH 协议 第 1 版:
  o  Potato 发布版仅支持该版协议
  o  可用的验证方法:
  §   RSA 验证:基于 RSA 密钥的用户验证
  §   Rhosts 验证:基于 .rhosts 的主机验证(不安全,有缺陷)
  §   RhostsRSA 验证:.rhosts 验证与 RSA 主机密钥相结合(有缺陷)
  §   ChallengeResponse 验证:RSA Challenge-response 验证
  §   Password 验证:基于 password 的验证
  · SSH 协议 第 2 版
  o  Woody 后继版本将以该版协议为主
  o  可用的验证方式:
  § Pubkey 验证:基于公共密钥的用户验证
  § Hostbase 验证:.rhosts 或 /etc/hosts.equiv 验证与公共密钥客
  户端主机验证相结合(有缺陷)
  § ChallengeResponse 验证:challenge-response 验证
  § Password 验证:基于 password 的验证
  如果系统正迁移到 Woody 或使用非 Debian 系统,请注意版本差异。
  更多信息请参阅 /usr/share/doc/ssh/README.Debian.gz、ssh(1)、sshd(8)、ssh-agent(1)
  和 ssh-keygen(1)。
  下面是一些关键的配置文件:
  · /etc/ssh/ssh_config:默认的 SSH 客户机。参阅 ssh(1)。其中重要的项目有:
  o   Host:作用于所有与该关键字后所列出的主机相匹配的主机,它们须遵守下
  面(处于本 host 关键字之后下一个 host 关键字之前的内容)所列的各项
  条款。
  o   Protocol:规定所使用的 SSH 协议的版本。默认为“2,1”。
  o   PreferredAuthentications:规定 SSH2 客户端验证方式。默认为
  “hostbased,publickey,keyboard-interactive,password”。
  o   PasswordAuthentication:如果想使用密码登录,须确认该选项没有设置成
  no。
  o   ForwardX11:默认为关闭状态。可使用命令行选项“-X”重载它。
  · /etc/ssh/sshd_config:默认的 SSH 服务器。参阅 sshd(8)。其中重要的项目有:
  o   ListenAddress:规定 sshd 监听的本地地址。允许多重指定。
  o   AllowTcpForwarding:默认为关闭状态。
  o   X11Forwarding:默认为关闭状态。
  · $HOME/.ssh/authorized_keys:默认公共密钥列表,客户机可使用这些密钥连接本
  主机的该用户帐号。参阅 ssh-keygen(1)。
  · $HOME/.ssh/identity:参阅 ssh-add(1) 和 ssh-agent(1)。
  下面的操作将从客户机建立一个 ssh 连接。
  $ ssh username@hostname.domain.ext
  $ ssh -1 username@hostname.domain.ext # Force SSH version 1
  $ ssh -1 -o RSAAuthentication=no -l username foo.host
  # force password on SSH1
  $ ssh -o PreferredAuthentications=password -l username foo.host
  # force password on SSH2
  在用户眼里,ssh 的功能相当于一个更灵巧更安全的 telnet(will not bomb with ^])。
  9.5.2 发送端口 SMTP/POP3 微调
  在本地机器上执行下面的命令,可以建立一个连接本地主机 4025 端口和远程服务器 25 端
  口的管道,以及一个连接本地主机 4110 端口和远程服务器 110 端口的 ssh 连接。
  # ssh -q -L 4025:remote-server:25 4110:remote-server:110 \
  username@remote-server
  在 Internet 上可使用该方法建立与 SMTP/POP3 服务器的安全连接。记得在远程主机的
  /etc/ssh/sshd_config 中设置 AllowTcpForwarding 值为 yes。
  9.5.3 用更少的密码建立连接 – RSA
  使用 RSAAuthentication(SSH1 协议)或 PubkeyAuthentication(SSH2 协议)可不必记住
  每个远程系统的连接密码。
  在远程系统上,在 /etc/ssh/sshd_config 中分别设置“RSAAuthentication yes”或
  “PubkeyAuthentication yes”。
  然后在本地生成验证密匙,在远程系统上安装公共密钥:
  $ ssh-keygen          # RSAAuthentication: RSA1 key for SSH1
  $ cat .ssh/identity.pub | ssh user1@remote \
  "cat - >>.ssh/authorized_keys"
  ...
  $ ssh-keygen -t rsa # PubkeyAuthentication: RSA key for SSH2
  $ cat .ssh/id_rsa.pub | ssh user1@remote \
  "cat - >>.ssh/authorized_keys"
  ...
  $ ssh-keygen -t dsa # PubkeyAuthentication: DSA key for SSH2
  $ cat .ssh/id_dsa.pub | ssh user1@remote \
  "cat - >>.ssh/authorized_keys"
  今后可用“ssh-keygen -p”来改密码。最后记得检查一下设置,可做个连接测试,如遇问
  题,执行“ssh -v”。
  你可以通过在 authorized_keys 里添加选项来限制主机及运行指定的命令。详情参阅
  sshd(8)。
  注意 SSH2 有 HostbasedAuthentication,要使它工作,必须同时在服务器端的
  /etc/ssh/sshd_config 文件中和客户机端的 /etc/ssh/ssh_config 或
  $HOME/.ssh/config 文件中设置 HostbasedAuthentication 为 yes。
  9.5.4 处理外来的 SSH 客户端
  下面是其它一些非类 Unix 平台的免费 SSH 客户端。
  Windows:: puTTY (GPL)
  Windows (cygwin):: SSH in cygwin (GPL)
  Macintosh Classic:: macSSH (GPL) [注意 Mac OS X 包含 OpenSSH;在终端应用程序中使
  用 ssh]
  参阅 SourceForge.net 的站点文档,“6. CVS Instructions”。
  9.5.5 设置 ssh-agent
  使用 passphrase 来保护 SSH 认证密匙会更安全,如果还没有设置,可使用 ssh-keygen -p
  来设置。
  用更少的密码建立连接 – RSA, 第 9.5.3 节中描述了如何使用一个基于密码的远程主机
  连接,将公共密钥(例如~/.ssh/id_rsa.pub)放入远程主机的 ~/.ssh/authorized_keys。
  $ ssh-agent bash # 或者用 zsh/tcsh/pdksh 这些程序代替。
  $ ssh-add ~/.ssh/id_rsa
  Enter passphrase for /home/osamu/.ssh/id_rsa:
  Identity added: /home/osamu/.ssh/id_rsa (/home/osamu/.ssh/id_rsa)
  $ scp foo user@remote.host:foo
  ... no passphrase needed from here on :-)
  $^D
  ... terminating ssh-agent session
  对于 X 服务器,普通 Ubuntu 启动脚本会将 ssh-agent 作为一个父进程执行。所以只需执
  行一次 ssh-add 即可。
  详情参阅 ssh-agent(1) 和 ssh-add(1)。
  9.5.6 SSH 问题处理
  如果遇到问题,检查一下配置文件的访问权限,并使用“-v”选项运行 ssh。
  如果是 root 身份,遇到连接防火墙出错的情况,可使用“-P”选项;它规定 ssh 使用服
  务器的 1 – 1023 以外的端口。
  如果与远程站点的 ssh 连接突然停止工作,很可能是因为系统管理员修补系统造成的,
  host_key 在系统维护过程中被更改。在查明了事情真象并确定并不是有人试图冒充远程主
  机非法入侵之后,从本地机器的 $HOME/.ssh/known_hosts 中删除 host_key 项目就可以恢
  复连接了。
  9.6 邮件
  邮件系统配置分为三类:
  · 邮件传输代理(MTA): exim4, exim, postfix, sendmail, qmail, ssmtp,
  nullmailer, ...
  · 邮件工具:procmail, fetchmail, mailx, crm114, ...
  · 邮件用户代理(MUA): mutt, emacs+gnus,
  9.6.1 邮件传输代理(MTAs)
  对于全功能的 MTA 来说,请使用 exim4。 参考资料:
  · 针对软件包 exim4 的 exim4-doc 和 exim4-doc-html。
  了 sendmail 和 qmail,但并不推荐你使用它们。
  有时并不需要 MTA 的所有功能,如在一个卫星系统中的一台笔记本电脑,可以考虑下列几
  种轻量级软件包:
  · ssmtp:需要 SMTP 连接并支持别名功能,或者
  · nullmailer:可以存信但不支持别名。
  此刻,我发现 exim 对于我作为个人工作站的笔记本电脑再合适不过了。
  如果要安装这些软件包必须先删除 exim,它们有冲突:
  # dpkg -P --force-depends exim
  # apt-get install nullmailer      # or ssmtp
  9.6.1.1 Smarthost
  如果你在一台通过用户级别的服务连接的机器上运行 exim4 或 exim,请确保在发信的时候
  通过 ISP 或者其他人提供的 smarthost。 [45] 这样做有许多好处:
  · ISP 的 smarthost 通常有更可靠的连接,可以确保 SMTP 重发。
  · 避免使用动态 IP 发送信件,这类信件会被 dial-up spam 列表过滤的。
  · 节省寄出多个收信人的邮件的带宽。
  唯一可能的坏处是:
  · 你 ISP 的 SMTP 出问题时的紧急处理。
  · 用于学习目的的实验。
  · 你的主机是专业的主机服务器。
  9.6.1.2 Exim 的基础设置
  为了将 exim 作为 MTA,可按下列步骤进行配置:
  /etc/exim/exim.conf     使用“eximconfig”创建及编辑(exim)
  /etc/exim4/*        使用“dpkg-reconfigure exim4-config”创建及编辑(exim4)
  /etc/inetd.conf         注释掉 smtp,将 exim 作为 daemon 运行
  /etc/email-addresses    添加伪来源地址列表
  检查邮件过滤器可使用 exim4 搭配 -brw, -bf, -bF, -bV, ... 等等
  9.6.1.3 在 Exim 下设置一个收集不存在的邮件地址的容器
  在 /etc/exim/exim.conf 文件(Woody 或后继版本)的 DIRECTORS 部分的末尾
  (localuser:director 之后)添加一个 catch-all director,将所有前面的 director 无
  法解析的地址收集到一起(per Miquel van Smoorenburg):
  catchall:
  driver === smartuser
  new_address === webmaster@mydomain.com
  如果要为每个虚拟域指定更精细的处理方法或其它什么的,可在/etc/exim/exim.conf 末尾
  添加(我没仔细测试过):
  *****@yourdomain.com ${lookup{$1}lsearch*{/etc/email-addresses} \
  {$value}fail} T
  接着在/etc/email-addresses 中加上一行“*”。
  9.6.1.4 在 Exim 下设置寄出邮件的地址重写
  可用 exim 为发出的邮件指定特定的“From:”信头,在 /etc/exim/exim.conf 文件的末尾
  编辑:
  *****@host1.something.dyndns.org \
  "${if eq {${lookup{$1}lsearch{/etc/passwd}{1}{0
  {1} \
  {$0}{$1@something.dyndns.org}}" frFs </nowiki></pre>
  该语句将作用于所有符合*@host1.something.dyndns.org 的邮件。
  · 在/etc/password 中搜索,以确定 local part($1)是否为本地用户。
  · 如果是本地用户,它将用第一个域($0)中的内容重写地址
  · 如果不是本地用户,重写域部分。
  9.6.1.5 在 Exim 中设置 SMTP 认证
  某些 SMTP 服务如 yahoo.com 需要 SMTP 认证。可用下面的方法配置
  /etc/exim/exim.conf:
  remote_smtp:
  driver === smtp
  authenticate_hosts === smtp.mail.yahoo.com
  ...
  smarthost:
  driver === domainlist
  transport === remote_smtp
  route_list === "* smtp.mail.yahoo.com bydns_a"
  ...
  plain:
  driver === plaintext
  133
  Linux公社 www.linuxidc.com
  public_name === PLAIN
  client_send === "<sup>cmatheson3</sup>this_is_my_password"
  别忘了最后一行的双引号。
  9.6.2 收取邮件 – Fetchmail
  fetchmail 以 daemon 方式运行,用 ISP 提供的 POP3 帐号将邮件收到本地邮件系统。配
  置:
  /etc/init.d/fetchmail
  /etc/rc?.d/???fetchmail run update-rc.d fetchmail default priority 30
  /etc/fetchmailrc        configuration file (chown 600, owned by fetchmail)
  在 Potato 中,有关如何在 init.d 脚本中配置 fetchmail 以 daemon 方式运行的信息,
  十分混乱,Woody 解决了这个问题。参阅 example scripts 中 /etc/init.d/fetchmail 和
  /etc/fetchmailrc 样例文件。
  如果你的邮件信头被 ISP 的邮件工具以^M 污染,可在 $HOME/.fetchmailrc 中添加
  “stripcr”选项:
  options fetchall no keep stripcr
  9.6.3 处理邮件 – Procmail
  procmail 是一个本地邮件分发过滤程序。使用时,需要为每个使用它的用户创建
  $HOME/.procmailrc,样例:_procmailrc。
  9.6.4 用 crm114 处理垃圾邮件
  crm114 软件包提供了 /usr/share/crm114/mailfilter.crm 脚本。该脚本是用 CRM114 撰
  写的,提供了非常有效的垃圾信件过滤器,并可以通过喂食垃圾邮件来调节它的处理能力。
  CRM114 是一种专门为写过滤器设计的小语言,可以把它当做拥有超能力的 grep 版本。参
  阅 crm(1)。
  9.6.5 阅读邮件 – Mutt
  用 mutt 做用户邮件代理(MUA)与 vim 结合使用。使用 ~/.muttrc 进行自定义;例如:
  # use visual mode and "gq" to reformat quotes
  set editor="vim -c 'set tw=72 et ft=mail'"
  #
  # header weeding taken from the manual (Sven's Draconian header weeding)
  #
  ignore *
  unignore from: date subject to cc
  unignore user-agent x-mailer
  134
  Linux公社 www.linuxidc.com
  hdr_order from subject to cc date user-agent x-mailer
  auto_view application/msword
  ....
  在 /etc/mailcap 或 $HOME/.mailcap 中添加下列内容,就能显示 HTML 邮件和内嵌的 MS
  Word 附件:
  text/html; lynx -force_html %s; needsterminal;
  application/msword; /usr/bin/antiword '%s'; copiousoutput;
  description="Microsoft Word Text"; nametemplate=%s.doc
  9.7 本地化(localization)
  Ubuntu 是国际化的操作系统,它所支持的语言和地区惯例的数目正在不断增加。接下来的
  部分列出了当前 Ubuntu 对各种差异形式的支持,接着再讨论本地化,该过程负责定制你的
  工作环境,根据你所选的语言确定当前系统的输入输出方式,并按照你所在地区的惯例转化
  日期、数字、货币格式以及系统中其它相关方面。
  9.7.1 本地化基础
  定制系统的本地化和国家语言支持包括以下几个方面。
  9.7.1.1 键盘本地化
  Ubuntu 发布版中包含了二十多种键盘布局方案。重新配置键盘可使用:
  · dpkg-reconfigure --priority=low console-data # console
  · dpkg-reconfigure --priority=low xserver-xfree86 # XF4
  · dpkg-reconfigure --priority=low xserver-common-v3 # XF3
  9.7.1.2 资料文件本地化
  绝大多数 Ubuntu 软件包都能使用 non-US-ASCII 字符,它们通过 glibc 中的 locale 技
  术,用 LC_CTYPE 环境变量来操作这些字符。
  · 纯 8-bit 字符:应用于所有程序中
  · 其它拉丁字符集(例如:ISO-8859-1 或 ISO-8859-2)              :应用于绝大多数程序中
  · 多字节语言如中文、日文或韩文:应用于较新的应用程序中
  9.7.1.3 显示本地化
  X 可以显示包括 UTF-8 在内的许多编码并支持所有的字体。列表中包含了所有的 8-bit 字
  体和 16-bit 字体诸如中文、日文或韩文。 其他 X 输入法, 第 9.7.10 节 机制支持多字
  节输入法。参阅 多语言的 X 窗口系统范例, 第 9.7.9 节和 支持 UTF-8 的 X 终端机, 第
  9.7.12 节。
  kon2 软件包可实现在 (S)VGA 图形化控制台中显示日文 EUC 编码。另一个替代品是
  jfbterm,它也使用 FB 控制台。在控制台环境里,必须由应用程序来提供对日文输入的支
  持。所以要为 Emacs 加装 egg 软件包,可使用日文化的 jvim 软件包作为 Vim 环境。
  135
  Linux公社 www.linuxidc.com
  安装非 Unicode 字体到 X 就能在 X 下显示任何编码的文件。所以不用太担心字体的编码
  问题。
  9.7.1.4 信息和文档的本地化
  许多在 Ubuntu 系统中显示的文本信息和文档被翻译成了各种译本,如出错信息、标准程序
  输出、菜单以及帮助页面。当前 Ubuntu 支持德语、西班牙语、芬兰语、法语、匈牙 利 语 、
  意大利语、日语、韩语、波兰语、葡萄牙语、汉语以及俄语帮助页面,可通过安装 manpages-
  LANG 软件包实现这些支持(此处 LANG 代表双位的 ISO 国家代码。使用 apt-cachesearch
  manpages-|less 获得可用的 Unix 帮助页面列表。)
  要访问 NLS 帮助页面,用户必须将环境变量 LC_MESSAGES 设置成相应的字串。例如,要访
  问意大利语的帮助页面,需要将 LC_MESSAGES 设置成 it,这时 man 程序会在
  /usr/share/man/it/ 目录下搜索帮助页面。
  9.7.2 Locales
  Ubuntu 支持 locale 技 术 。locale 机制允许程序按照该地区惯例来提供输出和其它特殊功
  能如字符集、日期时间显示格式,货币符号等等。该机制使用环境变量来确定其相关的行为 。
  例如,假设你同时在系统上安装了美式英语和法语 locales,许多程序的出错信息都以双语
  显示:
  $ LANG="en_US" cat foo
  cat: foo: No such file or directory
  $ LANG="de_DE" cat foo
  cat: foo: Datei oder Verzeichnis nicht gefunden
  Glibc 以函数库的形式向程序提供该功能的支持。参阅 locale(7)。
  9.7.3 Locales 简介
  完整的 locale 描述包括三个部分:xx_YY.ZZZZ。
  · xx: ISO 639 个语言代码(小写)
  · YY: ISO 3166 个国家代码(大写)
  · ZZZZ: 编码集,例如,字符集或编码标志。
  关于语言代码和国家代码,请参阅 info gettext 中的相关描述。
  请注意,为了完成跨平台的兼容性,这个编码集部分可能被“内部标准化”。移除了所有 -,
  把所有字符都转化成小写的。典型的编码集:
  · UTF-8: 适合所有区域的 Unicode 码 ,通常是 1-3 个八进制数(新的事实上的标准 )
  · ISO-8859-1: western Europe (de facto old standard)
  · ISO-8859-2: eastern Europe (Bosnian, Croatian, Czech, Hungarian, Polish,
  Romanian, Serbian, Slovak, Slovenian)
  ·   ISO-8859-3: Maltese
  ·   ISO-8859-5: Macedonian, Serbian
  ·   ISO-8859-6: Arabic
  ·   ISO-8859-7: Greek
  ·   ISO-8859-8: Hebrew
  ·   ISO-8859-9: Turkish
  136
  Linux公社 www.linuxidc.com
  ·   ISO-8859-11: Thai (=TIS-620)
  ·   ISO-8859-13: Latvian, Lithuanian, Maori
  ·   ISO-8859-14: Welsh
  ·   ISO-8859-15: western Europe with euro
  ·   KOI8-R: Russian
  ·   KOI8-U: Ukrainian
  ·   CP1250: Czech, Hungarian, Polish (MS Windows origin)
  ·   CP1251: Bulgarian, Byelorussian (MS Windows origin)
  ·   eucJP: Unix style Japanese (=ujis)
  ·   eucKR: Unix style Korean
  ·   GB2312: Unix style Simplified Chinese (=GB, ==eucCN) for zh_CN
  ·   Big5: Traditional Chinese for zh_TW
  ·   sjis: Microsoft style Japanese (Shift-JIS)
  询问基本编码系统术语的意思:
  ·   ASCII: 7 bits (0-0x7f)
  ·   ISO-8859-?: 8 bits (0-0xff)
  ·   ISO-10646-1: Universal Character Set (UCS) (31 bits, 0-0x7fffffff)
  ·   UCS-2: First 16 bit of UCS as straight 2 Octets (Unicode: 0-0xffff)
  ·   UCS-4: UCS as straight 4 Octets (UCS: 0-0x7fffffff)
  ·   UTF-8: UCS encoded in 1-6 Octets (mostly in 3 Octets)
  ·   ISO-2022: 7 bits (0-0xff) with the escape sequence. ISO-2022-JP is the
  most popular encoding for the Japanese e-mail.
  · EUC: 8 bits + 16 bits combination (0-0xff), Unix style
  · Shift-JIS: 8 bits + 16 bits combination (0-0xff), Microsoft style.
  ISO-8859-?、EUC、ISO-10646-1、UCS-2、UCS-4 和 UTF-8 对于 7 位的字符使用和 ASCII 相
  同的编码。 EUC or Shift-JIS uses high-bit characters (0x80-0xff) to indicate
  that part of encoding is 16 bit. UTF-8 also uses high-bit characters (0x80-0xff)
  to indicate non 7 bit character sequence bytes and this is the most sane
  encoding system to handle non-ASCII characters.
  Please note the byte order difference of Unicode implementation:
  · Standard UCS-2, UCS-4: big endian
  · Microsoft UCS-2, UCS-4: little endian for ix86 (machine-dependent)
  See 使用 recode 转化文本文件, 第 8.6.12 节 for conversion between various
  character sets. For more see Introduction to i18n.
 # ifconfig
  eth0 Link encap:Ethernet HWaddr 08:00:46:7A:02:B0
  inet addr:192.168.0.111 Bcast:192.168.0.255 Mask:255.255.255.0
  UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1
  146
  Linux公社 www.linuxidc.com
  ...
  lo Link encap:Local Loopback
  inet addr:127.0.0.1 Mask:255.0.0.0
  ...
  # route
  Kernel IP routing table
  Destination Gateway        Genmask         Flags Metric Ref Use Iface
  192.168.0.0 *              255.255.255.0 U       0      0     0 eth0
  *****0.0.0     192.168.0.1 255.0.0.0         UG    0      0     0 eth0
  更多信息请参阅 ifconfig(8) 和 route(8).
  10.2.2 底层网络设置 – ip
  ip 和先前的 ifconfig 和 route 有相同功能的命令如下:
  ·  ip link show
  ·  ip route list
  ·  ip link set eth0 down
  ·  ip addr del dev eth0 local 192.168.0.3
  ·  ip addr add dev eth0 local 192.168.0.111/24 broadcast 192.168.0.255
  ·  ip link set eth0 up
  ·  ip route add dev eth0 to 10.0.0.0/8 src 192.168.0.111 via 192.168.0.1
  运行的时候使用 help 参数,能让 ip 打印出命令的语法。 例如,ip link help 打 印 出 :
  Usage: ip link set DEVICE { up | down | arp { on | off } |
  dynamic { on | off } |
  multicast { on | off } | txqueuelen PACKETS |
  name NEWNAME |
  address LLADDR | broadcast LLADDR |
  mtu MTU }
  ip link show [ DEVICE ]
  参阅 ip(8).
  10.2.3 设置无线网卡(Wi-Fi)接口
  对于无线网卡(Wi-Fi)接口,除了 ifconfig 或 ip 之外,你还需要 iwconfig 这 个 程 序 。
  此程序在 wireless-tools 中。
  参阅 iwconfig(8).
  10.2.4 设置 PPP 接口
  如果你是通过连接在拨号电话机上的调制解调器,并使用 Point-to-Point 协议 (PPP) 来
  上网的。那么这样的网络连接就是通过 ppp0、ppp1 等网络接口来实现的。
  147
  Linux公社 www.linuxidc.com
  PPP 接口是由 pppd 这个 PPP 服务来管理的。你可以在 ppp 中找到该程序。 所以,对于
  用户来说,设置 PPP 接口也就是对 pppd 进行设置。
  10.2.4.1 手动设置 pppd
  为了建立网络连接,我们需要打开一个通讯端口(通常是串口),需要把命令传输到通讯设
  备上(通常是调制解调器)           ,需要拨某个电话号码,对于外部的 PPP 服务还需要进行身份验
  证,需要内核创建 PPP 接口,最后需要修改路由表。只有这样信息才能在这条连接上传递。
  pppd 能完成上述所有动作,因而会有一堆的设置参数。相关参数参见 pppd(8)。
  在 Ubuntu 系统上,全局的设置在 /etc/ppp/options 里面。用户的特定设置放在
  ~/.ppprc。依赖于通讯端口的设置全部在 /etc/ppp/options.partname。例如,假设你有两
  个调制解调器 —通过 /dev/LT-modem 来访问的内置 Lucent LT 调制解调器和通过
  /dev/ttyS0 来访问的外置调制解调器。 建立以下这两个文件。
  # cat > /etc/ppp/options.LT-modem <<EOF
  115200
  init "/usr/sbin/chat -f /etc/chatscripts/setup-LT-modem"
  EOF
  # cat > /etc/ppp/options.ttyS0 <<EOF
  115200
  init "/usr/sbin/chat -f /etc/chatscripts/setup-ttyS0"
  EOF
  这些涉及到下面的 chat scripts。 首先,/etc/chatscripts/setup-LT-modem。
  ABORT ERROR
  '' ATZ
  OK 'ATW2X2 S7=70 S11=55'
  OK AT
  其次,/etc/chatscripts/setup-ttyS0。
  ABORT ERROR
  '' ATZ
  OK 'ATL1M1Q0V1W2X4&C1&D2 S6=4 S7=70 S11=55 S95=63 S109=1 +FCLASS=0'
  OK AT
  显然,这些文件的内容依赖于你的硬件。
  选项也可以被当为参数传递给 pppd。
  在 Ubuntu 中通常用 pon 来启动 pppd。pon 使用的时候,它的第一个参数表示位于
  /etc/ppp/pears/ 里面的配置文件的名称,这个文件同样也被 pppd 读取。 [54] 这儿就是
  你为特定连接设置特殊选项的地方 — 例如,一个特别的网络服务提供商(ISP)。
  假设你往来于 Amsterdm 和 Den Haag 这两座城市。在每个城市,你要求能访问两个 ISP 服
  务— Planet 和 KPN。首先为每个 ISP 创建基本的配置文件。
  148
  Linux公社 www.linuxidc.com
  # cat > /etc/ppp/peers/KPN <<EOF
  remotename KPN
  noauth
  user kpn
  noipdefault
  ipparam KPN
  EOF
  # cat > /etc/ppp/peers/Planet <<EOF
  remotename Planet
  auth
  user user3579@planet.nl
  noipdefault
  mru 1000
  mtu 1000
  ipparam Planet
  EOF
  这些文件设置了两个 ISPs 中不同的部分。相同的部分可以放在 /etc/ppp/options 或于接
  口有关的某个设置文件中。
  现在为每个城市里的每个 ISP 创建配置文件。在我们的例子中,从一个城市连接某个 ISP
  和从另外一个城市连接这个 ISP 唯一的差别就是所需要的 chatscript。( chatscript 不同
  是因为当地访问的电话号码不同。)
  # cat > /etc/ppp/peers/KPN-Amsterdam <<EOF
  connect "/usr/sbin/chat -v -f /etc/chatscripts/KPN-Amsterdam"
  file /etc/ppp/peers/KPN
  EOF
  # cat > /etc/ppp/peers/KPN-DenHaag <<EOF
  connect "/usr/sbin/chat -v -f /etc/chatscripts/KPN-DenHaag"
  file /etc/ppp/peers/KPN
  EOF
  # cat > /etc/ppp/peers/Planet-Amsterdam <<EOF
  connect "/usr/sbin/chat -v -f /etc/chatscripts/Planet-Amsterdam"
  file /etc/ppp/peers/Planet
  EOF
  # cat > /etc/ppp/peers/Planet-DenHaag <<EOF
  connect "/usr/sbin/chat -v -f /etc/chatscripts/Planet-DenHaag"
  file /etc/ppp/peers/Planet
  EOF
  file 命令显示了各个配置,包括先前列出过的配置。connetc 命令详细说明了 pppd 用来
  建立连接需要的特殊参数。我们通常使用 chat 这个程序来做这些事情,使 chatscript 适
  合这个 ISP。这里是给 Den Haag 的 chatscripts;给 Amsterdam 用的 chatscripts 也类
  似,除了电话号码不一样。不过当这个 ISP 通过本地的其他公司来提供服务的话,也许
  chatscripts 就有所区别了。
  # cat > /etc/chatscripts/KPN-DenHaag <<EOF
  ABORT BUSY
  149
  Linux公社 www.linuxidc.com
  ABORT 'NO CARRIER'
  ABORT VOICE
  ABORT 'NO DIALTONE'
  ABORT 'NO DIAL TONE'
  ABORT 'NO ANSWER'
  ABORT ERROR
  OK-AT-OK ATDT 0676012321
  CONNECT \d\c
  EOF
  # cat > /etc/chatscripts/Planet-DenHaag <<EOF
  ABORT BUSY
  ABORT 'NO CARRIER'
  ABORT VOICE
  ABORT 'NO DIALTONE'
  ABORT 'NO DIAL TONE'
  ABORT 'NO ANSWER'
  ABORT ERROR
  OK-AT-OK ATDT 0676002505
  CONNECT \d\c
  EOF
  为了能连接上这些 ISP,你需要用户名和密码以便让 pppd 在需要的时候能提供这些资料。
  这些信息不是被存储在 /etc/ppp/pap-secrets(如果使用 PAP 协议)就是在
  /etc/ppp/chap-secrets(如果使用 CHAP 协议)。虽然 CHAP 更加的安全,但是 PAP 仍然
  是使用最为广泛的。因为这些文件包含有“秘密”,所以群组和其他用户应该不被允许读写
  这些文件。这些文件的格式在 pppd(8) 中 有 解 释 。“秘密”(第三格)是通过用户名(第一
  格)和/或服务器名称(第二格)来查找的。当连接到一个 ISP 时通常是不知道这个服务器
  的名字的,所以我们用用户名代替;上面 peers/KPN 和 peers/Planet 中的 user 那一行
  就是完成这个动作的。
  # client name       server name secret
  kpn                 *            kpn
  user3579@planet.nl *             myfavoritepet
  详细信息,参阅 /usr/share/doc/ppp/README.Debian.gz。
  10.2.4.2 使用 pppconfig 设置 pppd
  一个快速设置 pppd 方法就是使用 pppconfig 程序,该程序来自同名的软件包。pppconfig
  先使用菜单界面来询问使用者一些问题,然后设置上面提到过的这些文件。
  10.2.4.3 使用 wvdial 设置 PPP 接口
  另一种使用 pppd 的处理方法是从 wvdial 来运行 pppd,wvdial 在软件包 wvdial 中 。不
  同于 pppd 使用 chat 来拨号和协商连接,wvdial 在完成拨号和初始化协商之后才运行
  pppd 去完成剩余的工作。只要给出电话号码、用户名和密码,大多数情况下,wvdial 都能
  成功建立连接。
  10.3 命名主机
  150
  Linux公社 www.linuxidc.com
  10.3.1 主机名
  主机名是由内核维护的。初始化脚本 /etc/init.d/hostname.sh 在系统启动的时候根据
  /etc/hostname 中存储的名称设置主机名(使用 hostname 这个命令)。这个文件应该只包
  含系统的主机名,而不是完整的域名。
  运行 hostname(不带任何参数)可以打印出当前的主机名。
  10.3.2 邮件名
  主机的邮件名是于邮件相关的程序用来确认主机的。/etc/mailname 包含了该名称并以新空
  行结尾。邮件名通常是主机的完整的域名之一。参阅 mailname(5)。
  电子邮件接受者看到的你这台 Debian 主机发送的邮件信头 From: 的内容,取决于你机器
  上邮件用户代理(MUA)和邮件传输代理(MTA)的设置。假设本地用户 foo 从邮件名为
  myhost.dom 的主机上发送了一封邮件。送出去的电子邮件的信头 From: 会是:
  · “From: foo@myhost.dom” 如果 MUA 没有 From: 的设置;
  · “From: bar@myhost.dom” 如果 MUA 有“From: bar”的设置;
  · “From: bar@bogus.dom” 如果 MUA 有“From: bar@bogus.dom”的设置。
  就算 MUA 中设置了 From:,MTA 还是会加入"Sender:foo@herman.dom" 来表示真正的来源
  。
  当然,任何复杂的 MTA 在执行地址重写的时候,如同在 Exim 下设置一个收集不存在的邮
  件地址的容器, 第 9.6.1.3 节和在 Exim 下设置寄出邮件的地址重写, 第 9.6.1.4 节中
  讨论的,收件者看到的邮件地址是可以任意改变的。
  10.4 域名服务(DNS)
  主机由域名和 IP 地址来查询。DNS 是一套客户端-服务器系统,在这套系统中域名解释器
  访问域名服务器从而把域名和 IP 地址或是其他合适的主机联系在一起。 GNU C Library
  resolver(3) 也能够在文件中或通过网络信息服务(NIS)来查找 IP 地址。
  某些程序(如,GNOME)就希望主机名能被解析为一个 IP 地址并且拥有一个合法的域名。
  这样真的是非常不合适的,因为主机名和域名是两个完全不同的的东西。为了支持这些软件 ,
  我们需要确保系统主机名能够被解析。通常的做法就是在 /etc/hosts 中加入一行带有 IP
  地址和系统主机名的内容。如果你的系统有一个永久的 IP 地址,那就用这个地址,否则使
  用 127.0.0.1 这个地址。
  127.0.0.1 localhost
  127.0.1.1 uranus
  使用 hostname --fqdn 来查看你的系统的主机名能否被解析为一个 IP 地址并拥有一个有
  效的域名。
  10.4.1 域名解析器
  域名解析器的工作是查找某个域名所对应的 IP 地址。大部分常用的域名解析器是 GNU C
  Library 中的 resovler 提供的功能(resolver(3))。另一个是由 libfiredns 软件包提供
  151
  Linux公社 www.linuxidc.com
  的 FireDNS resolver。还有其他的。
  GNU LIBC 的域名解析器对域名的解析是由 /etc/nsswitch.conf 中的 hosts 这一行配置
  决定的。该行列出了解析域名用的服务:例如 dns、files、nis、nisplus。参阅
  nsswitch.conf(5)。 即使在使用 files 的情况下,域名解析器的行为也是由 /etc/hosts
  这个配置文件控制的。参阅 hosts(5)。
  上述文件都是静态的,你可以用你喜欢的编辑器修改。
  在使用 dns 服务的情况下,域名解释器的行为也是由 /etc/resolv.conf 这个配置文件控
  制的。参阅 resolv.conf(5)。resolv.conf 的一个重要功能就是提供一个域名服务器的 IP
  地址列表,通过查询这些服务器来获得域名解析。这一列表常常依赖于网络环境,而且在你
  机器运行的时候,网络环境时常发生变化。pppd 和 dhclient 这类程序都能添加或删除
  resolv.conf 中的信息。但是这些功能不是每次都能正常工作而且两者还会有冲突。软件包
  resolvconf 采用了更好的方法解决了这个问题,并提供了一个标准的框架来更新
  resolv.conf。参阅管理域名服务器信息 – resolvconf, 第 10.4.2 节。
  10.4.2 管理域名服务器信息 – resolvconf
  软件包 resolvconf 提供了一个框架,能动态的管理关于可用域名服务器的信息。它解决了
  长久以来如何维护一个给域名解析器和 DNS 缓存使用的动态的域名服务器列表的问题。
  Resolvconf 把它自己设为控制网络接口和提供域名服务信息的程序与需要域名服务信息的
  应用程序的中间媒介。
  resolvconf 被设计成不需要任何手动设置就能工作。但是,这个软件包还是很新的,可能
  需要一些手工的干预才能正常的工作。如果你曾经定制过软件包,而且它们更新了
  /etc/resolv.conf 的话:你就需要去掉这部分定制。更多信息参阅
  /usr/share/doc/resolvconf/README.gz。
  10.4.3 缓存查询过的域名 – nscd、dnsmasq、pdnsd、bind9
  如果你的域名服务器响应速度非常慢,你可能需要使用 nscd 来缓存域名解析器 libc6 查
  询到的结果。
  如果你希望为你本地网络中的其他主机缓存结果的话,你可能要去运行一个缓存转发域名服
  务器(caching forwarding nameserver)。就像 dnsmasq 或 pdnsd。
  如果你愿意,你也可以用软件包 bind9 中的 named 来做缓存转发域名服务器(caching
  forwarding nameserver)。但是这是一个很庞大的程序,除非你需要它高级功能,否则还是
  使用上面提到的那些程序比较好。
  所有这些软件包都能和 resolvconf 一起工作。
  10.4.4 提供域名解析服务 – bind
  如果你希望给一个域提供一个权威的域名服务的话,你就需要一个完善的域名服务器,例如
  软件包 bind9 中的 named。
  如果你安装了 bind9,你也应该安装 dnsutils。 你可能还需要安装这样一些工具软件包:
  bind9-host; dns-browse; dnscvsutil; nslint。 你可能还需要安装说明文档: bind9-
  doc。 你可能还需要安装开发文档:libbind-dev; libnet-dns-perl。 如果你是使用 DHCP,
  152
  Linux公社 www.linuxidc.com
  下面这个软件包会对你有所帮助: dhcp-dns。
  安装 bind9 或者用 dpkg-reconfigure bind9 来进行基本的设置。设置包括编辑文件
  name。在 Debian 中,你可以在 /etc/bind/ 找到这个文件,它主要是用来设置基本的 DNS
  域的;它包含了其他两个文件: named.conf.local,用来定义本地区域,和
  named.conf.options,用来设置选项的。(后者的执行需要 resolvconf 来产生
  /var/run/bind/named.options 文 件,除了 forwarders 的说明是一个当前可用的非本地域
  名服务器列表之外,其余都和原先的一样。要利用这个,可以修改 named.conf 中的 include
  这一样,使其包含 /var/run/bind/named.options。参阅管理域名服务器信息 –
  resolvconf, 第 10.4.2 节。)
  在 named.conf* 文件中用到的数据库文件,如果没有指定完整的路径,则该数据库文件会
  被存储在 /var/cache/bind/。这是一个正确的存储 named 产生的文件的地方。例如:某个
  域的从服务器使用的数据库文件。/etc/bind/ 下面的那些静态的数据库文件,需要在
  named.conf 中有完整的路径才能被找到。详情参阅
  /usr/share/doc/bind9/README.Debian.gz。
  10.5 使用 DHCP 来配置网络接口
  底层的网络接口设置可以用 Dynamic Host Configuration Protocol (DHCP) 来自动设置。
  你的防火墙或路由器或宽带 ISP 可能用这个方法来配置 IP 地址和其他参数。
  要做这个工作你必须安装下列软件包的其中一个:
  · dhcp3-client (version 3, Internet Software Consortium)
  · dhcpcd (Yoichi Hariguchi and Sergei Viznyuk)
  · pump (Red Hat)
  pump 简易且被广泛应用。 dhcp3-client 复杂,但是可配置程度更高。 [55]
  10.6 Debian 的高级网络设置
  10.6.1 使用 ifupdown 进行高级网络设置
  为了让网络设置更加简单,Debian 提供了一个标准的高级网络设置工具,包含 ifup 和
  ifdown 程序和 /etc/network/interfaces 文件。 如果你选择用 ifupdown 来配置你的网
  络,那么就不要同时使用底层工具去配置。这也意味着你不应该用其他高级配置工具,如
  whereami、divine、intuitively 等。他们调用的也是底层配置工具。ifupdown 程序在设
  计的时候,是假设仅有这样一个程序会被用来设置网络接口的。
  更新接口设置是执行:
  # ifdown eth0
  # editor /etc/network/interfaces # 做你需要的调整
  # ifup eth0
  更多信息参阅 interfaces(5)、 /usr/share/doc/ifupdown/examples/network-
  interfaces.gz 和 ifup(8)。
  10.6.1.1 用固定 IP 地址为接口进行设置
  153
  Linux公社 www.linuxidc.com
  假设你要配置一个以太网接口,使其拥有一个固定的 IP 地址 192.168.0.111。这个 IP 地
  址以 192.168.0 为开头,所以它肯定在一个 LAN 内。进一步假设 192.168.0.1 是 LAN 上
  面 Internet 网关的地址。编辑 /etc/network/interfaces,使其包含类似下面这段的内容 :
  iface eth0 inet static
  address 192.168.0.111
  netmask 255.255.255.0
  gateway 192.168.0.1
  在接口被激活或是在激活之前,你都可以配置接口的其他部分或者进行其他操作。只要你在
  "up"和"down"那几行中设置合适的命令。
  iface eth0 inet static
  address 192.168.0.111
  netmask 255.255.255.0
  gateway 192.168.0.1
  up route add -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.2 dev $IFACE
  down route del -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.2 dev $IFACE
  up echo Interface $IFACE going up | /usr/bin/logger -t ifup
  down echo Interface $IFACE Going down | /usr/bin/logger -t ifdown
  你也可以选择把命令插入到 /etc/network/if-up.d 和 /etc/network/if-down.d 目录下
  的脚本中。这些脚本也能执行扩展的选项。详情参阅 interfaces(5)。例如,软件包
  resolvconf 包含的脚本允许你在接口被激活的同时,往 /etc/resolv.conf 添加指定的
  DNS 信息:
  iface eth0 inet static
  address 192.168.0.111
  netmask 255.255.255.0
  gateway 192.168.0.1
  dns-search somedomain.org
  dns-nameservers 195.238.2.21 195.238.2.22
  dns-search 选项的参数 somedomain.org 符合 resolv.conf(5) 中所说的 search 选项的
  参数。 dns-nameservers 选项的参数 195.238.2.21 和 195.238.2.22 符合选项
  nameserver 的参数。其他可以识别的选项是 dns-domain 和 dns-sortlist。参阅 管理域
  名服务器信息 – resolvconf, 第 10.4.2 节。
  10.6.1.2 用 DHCP 配置接口
  为了使用 DHCP 配置接口,请编辑 /etc/network/interfaces,使其包含一下这段内容:
  iface eth0 inet dhcp
  为了让 DHCP 能工作,你需要安装一个 使用 DHCP 来配置网络接口, 第 10.5 节中提及的
  DHCP 客户端程序。
  154
  Linux公社 www.linuxidc.com
  10.6.1.3 配置无线网卡(Wi-Fi)接口
  软件包 wireless-tools 包含了一个钩子脚本 /etc/network/if-pre-up.d/wireless-
  tools,使得在接口被激活之前,对无线网卡(802.11a/b/g)进行设 置变为可能。使用
  iwconfig 程序来完成设置,参阅 iwconfig(8)。任何一个 iwconfig 的有效参数,你都可
  以把它包含在 /etc/network/interfaces 中,并在原有的参数名字前加上“wireless-”这
  个前缀。例如,要设置 eth0, 使得 eth0 在被 DHCP 激活之前, ESSID 设定为 myessid,
  encryption key 设定为 123456789e,请编辑 /etc/network/interfaces,加入一下这段内
  容:
  iface eth0 inet dhcp
  wireless-essid myessid
  wireless-key 123456789e
  注意!如果你使用 waproamd 来设置这个接口的话,你不应该使用这个方法来设置 ESSID 和
  key。在 ifup 执行时,waproamd 就已经设置好了 ESSID 和 key。参阅 使用 waproamd 启
  动网络设置, 第 10.8.4 节。
  10.6.1.4 设置 PPP 接口
  ifup 和 ifdown 程序使用 pon 和 poff 来添加和删除 PPP 接口,所以先阅读 设置 PPP
  接口, 第 10.2.4 节。
  假设你已经设定了 PPP 和 myisp 一起工作。请编辑 /etc/network/interfaces,使其包含
  如下这段内容:
  iface ppp0 inet ppp
  provider myisp
  这样设置好后,ifup ppp0 会完成
  pon myisp
  遗憾的是,目前无法在 /etc/network/interfaces 中的 ppp 段落里面提供额外的 pppd 选
  项。
  目前无法使用 ifupdown 来为 PPP 接口提供辅助的设置。因为在 pppd 完成连接之前 pon
  就已经存在了,ifup 执行激活脚本之后 PPP 接口才可用。到这个 bug 被修正之前,还是
  需要在 /etc/ppp/ip-up 或 /etc/ppp/ip-up.d/ 中进行额外的设置。
  10.6.1.5 设置 PPPoE 接口
  许多宽带因特网服务提供商(ISP)使用 PPP 协议来连接,即使用户的机器通过以太网和/或
  ATM 网络连接他们。 这是通过 PPPoE 的技术来完成的,即把 PPP 祯封装在以太网卡
  (Ethernet)的祯里面。 假设你的 ISP 被称为 myisp。首先为 myisp 设置 PPP 和 PPPoE。
  最简单的方法就是安装 pppoeconf,然后从终端中运行 pppoeconf。之后编辑
  /etc/network/interfaces 使其包含如下这段内容:
  155
  Linux公社 www.linuxidc.com
  iface eth0 inet ppp
  provider myisp
  有时候最大传输单位 Maximum Transmit Unit (MTU) 和 PPPoE over Digital Subscriber
  Line (DSL) 有关。详情参阅 DSL-HOWTO。
  注意!如果你的宽带调制解调器包含路由功能。那么当调制解调器/路由器自己处理 PPPoE
  连接时,在 LAN 中它就表现的和简单的连接 Internet 的以太网网关一样。
  10.6.1.6 为网关配置多个以太网接口
  假设 eth0 已经用 DHCP-configured IP 地址连接到 Internet,并且 eth1 使用一个固定
  IP 地址 192.168.1.1 连接到 LAN。编辑 /etc/network/interfaces 使其包含如下内容:
  iface eth0 inet dhcp
  iface eth1 inet static
  address 192.168.1.1
  netmask 255.255.255.0
  如果按照 建立路由网关, 第 10.12 节中描述的去激活主机上的 NAT,那么你就能和 LAN
  中的其他主机一起享用互联网连接了。
  10.6.1.7 设置虚拟接口
  使用虚拟接口,你可以设置一个以太网卡使其成为拥有很多 IP 子网的接口。例如,假设你
  的主机在 LAN 网络上(192.168.0.x/24)。你想要让主机连接到互联网,并用已经存在的以
  太网卡通过 DHCP 来获得公网 IP 地址。编辑 /etc/network/interfaces 使其包含如下一
  段内容:
  iface eth0 inet static
  address 192.168.0.1
  netmask 255.255.255.0
  network 192.168.0.0
  broadcast 192.168.0.255
  iface eth0:0 inet dhcp
  eth0:0 接口是一个虚拟的接口。当它被激活的时候,它的真实硬件 eth0 也会被激活。
  10.6.2 使用 ifupdown 的逻辑接口定义进行高级网络设置
  下列内容中,对于读者而言了解物理接口(physical interface)和逻辑接口(logical
  interface)之间的不同是重要的。 物理(physical)接口就是我们所说的“接口”,是由内
  核命名为 eth0、eth1、ppp0 或其他。逻辑(logical)接口是一套可以用来对物理接口的可
  变参数进行设置的值的集合。如果你觉得还不清楚,那么在阅读的时候就用“用 X 配置文
  件来设置接口”去代替“设置逻辑接口 X”。
  在 /etc/network/interfaces 中 iface 的定义实际上是逻辑接口的定义,而不是物理接口
  156
  Linux公社 www.linuxidc.com
  的 。 如果你从来不去重新配置你的接口,那么你就可以忽略这个细节。因为物理接口 foo 缺
  省会被设置成逻辑接口 foo。
  假设你的电脑是台笔记本,你需要在家里和工作的地方之间穿梭。那么当你的电脑连接到公
  司的网络或家里的网络时,你都要相应地对 eth0 进行设置。
  首先定义两个逻辑接口 home 和 work(取代 eth0,就像我们先前做的),它们分别描述了
  在家中的和公司的网络中如何设置接口。
  iface home inet static
  address 192.168.0.123
  netmask 255.255.255.0
  gateway 192.168.0.1
  iface work inet static
  address 81.201.3.123
  netmask 255.255.0.0
  gateway 81.201.1.1
  然后通过适当的设置,并在命令行中指定这些设置。物理接口 eth0 就能在家庭网络中被激
  活了:
  # ifup eth0=home
  针对公司网络重新设置 eth0 只要运行这些命令:
  # ifdown eth0
  # ifup eth0=work
  注意!如果 interfaces 中的内容如上述所写的,那么我们就不能单独执行 ifup eth0 来
  激活 eth0。理由是 ifup 使用物理接口名作为缺省的逻辑接口名,但是现在在我们的例子
  中,没有关于逻辑接口 eth0 的定义。
  10.6.3 使用 ifupdown 进行自动的网络设置
  在 ifup 运行的时候,接口的名称可以被“映射(mapped)”为别的名称。至于映射成什么名
  称,这个视情况决定。因此 ifup 能够被设置为用预设的逻辑接口集合中的一个合适的逻辑
  接口来激活物理接口。
  逻辑接口名称映射产生的情况如下:
  · 如果执行 ifup 的时候没有给定逻辑接口名称,那么物理接口名称就会被用作初始
  的逻辑接口名称。
  · 如果逻辑接口名称符合 mapping 描述的 glob-pattern,那么就会映射到新生成的
  逻辑接口名称中去。对于每段映射都是这样按顺序进行的。
  · 如果最终的逻辑接口名称是 /etc/network/interfaces 中定义的一个逻辑接口的
  标签,那么物理接口就被当作这个逻辑接口来激活。否则 ifup 会打印"Ignoring
  unknown interface"随后退出。
  157
  Linux公社 www.linuxidc.com
  mapping 的语法:
  mapping glob-pattern
  script script-name
  [map script input]
  mapping 段落中的 script,总是把物理接口的名称作为它的参数。其他“map”行中的内容
  (不包含“map”本身)都会作为它的标准输入。该 script 在退出之前会把映射的结果作
  为标准输出打印出来。
  例如,下面这段 mapping 会让 ifup 用逻辑接口 home 来激活接口 eth0。
  mapping eth0
  script /usr/local/sbin/echo-home
  /usr/local/sbin/echo-home 的内容为:
  #!/bin/sh
  echo home
  因为映射是由脚本来完成的,所以自动选择逻辑接口是可能的 — 基于一些选择测试。参阅
  使用 guessnet 来选择逻辑接口, 第 10.6.3.1 节中的范例。
  10.6.3.1 使用 guessnet 来选择逻辑接口
  安装软件包 guessnet。然后在 /etc/network/interfaces 中加入如下一段内容:
  mapping eth0
  script guessnet-ifupdown
  map home
  map work
  现在,当你 ifup eth0 的时候,guessnet 会检测 eth0 是否能用 home 或 work 来 激 活 。
  它用存储在逻辑接口定义中的信息来完成这项工作。
  10.6.4 使用 laptop-net 进行自动的网络设置
  软件包 laptop-net 采用不同的方法处理自动的网络设置。Laptop-net 不用 ifupdown 的
  逻辑接口,取而代之的是它自己的一套配置"方案"和“配置文件”系统。不过,Laptop-net
  还是会使用 ifup 和 ifdown 来设置物理接口。更多详细文档请安装 laptop-net-doc。
  10.6.5 使用 network-manager 进行自动的网络设置
  network-manager 这个软件现在是由 Fedora 的开发者们开发的,Ubuntu 已经对其进行了
  打包。有朝一日它也会出现在 debian 中,到时候我们应该放弃 ifupdown 和其他过时的朋
  友们了。
  158
  Linux公社 www.linuxidc.com
  10.7 处理内核对接口命名的不一致性
  eth0、eth1 这类设备的名称是由内核指定的,内核是按照创建这些接口的顺序来命名的。
  在开机的时候,被检测到的适配器通常都是按照一样的顺序被检测到的,所以每次都被 指
  定为同一个名称。但是,对于热拔插的适配器情况就不是这样了。在不同情况下,它们可能
  以任意的顺序被检测到,于是内核就给它们指定不同的名称。
  因为这个关系,在一个网卡适配器是热拔插设备的系统中,使用 /etc/network/interfaces








   了,你需要做下列工作:
  · 在 /etc/default/pcmcia 中设置 CARDMGR_OPTS="-f",强 制 cardmgr 在前台运行。
  · 修改 /etc/rc?.d/S20pcmcia 的名称,改成类似 /etc/rc?.d/S12pcmcia 的样子。
  这些只适合于 16 位的 PCMCIA 卡。
  注意!如果你使用 16 位的 PCMICA 卡,软件包 pcmcia-cs 还是需要的。该软件包包括了
  cardmgr 守护进程,用来管理 socket 和加载驱动模块。我们只是不希望它通过
  /etc/pcmcia/network 来呼叫网络设置程序。
  162
  Linux公社 www.linuxidc.com
  为了让 cardmgr 能正常工作,你可能需要编辑 /etc/pcmcia/config.opts 来设置 16 位
  PCMCIA 卡的资源。更多信息参阅 PCMCIA, 第 7.2.1 节和 Linux PCMCIA HOWTO。
  10.9 多阶段(Multi-stage)映射
  首先,假设你的网络适配器可以热拔插,你启用了 使用 hotplug 启动(triggering)网络设
  置, 第 10.8.2 节中描述的自动设置。其次,进一步假设你需要依照物理接口下面的适配器
  (如同 处理内核对接口命名的不一致性, 第 10.7 节中描述的)和接口上连接的网络(例
  如,使用 guessnet 来选择逻辑接口, 第 10.6.3.1 节中描述的)来把逻辑接口映射到“物
  理”接口。你就可以用多阶段映射来完成。
  如果接口是可以热拔插的,映射的第一个阶段是利用 hotplug 的组名称并输出内核指定的
  接口名称。映射的第二阶段是利用内核指定的接口名称并输出适配器的名称。第三个阶段就
  是依照网络环境,把适配器名称映射到逻辑接口名称上去。
  # 允许 hotplug 激活接口
  mapping hotplug
  script echo
  # 确定那个接口是有线的那个是无线的
  mapping eth?
  script /usr/local/sbin/get-mac-address.sh
  map 02:23:45:3C:45:3C wired
  map 00:A3:03:63:26:93 wifi
  # 检测有线网络是否可用
  mapping wired
  script guessnet-ifupdown
  map work-wired
  map home
  # 检测哪个无线网络可用
  mapping wifi
   apache 和 apache2:Web 服务器。
  o  /etc/apache/*
  o  /etc/apache2/*
  · squid: Web 代理和缓存服务器。
  o  /etc/squid/*
  10.11 网络故障排除
  如果你遇到了问题,首先执行下列命令来检查输出的结果:
  # ifconfig
  # cat /proc/pci
  # cat /proc/interrupts
  # dmesg | more
  同时参阅 网络测试基础, 第 8.6.29 节下面的章节。
  如果你无法浏览特定的站点,参阅 无法访问某些站点的怪问题, 第 3.8.5 节。
  10.12 建立路由网关
  一个 Debian 主机可以作为一个全能的网关,它可以承担网络地址转换(NAT,通常也称为 IP
  伪装)、邮件传输、DHCP、DNS 缓存、HTTP 代理缓存、CVS 服务、NFS 服务和 Samba 服务。
  参阅 网络所需的主机名和 IP 地址, 第 3.1.9 节中的例子来完成上述设置。
  10.12.1 Netfilter 设置
  在 Linux 2.4 及其后继版本中加入了 netfilter/iptables 项目,作为一个防火墙子系统。
  参阅 Netfilter,那儿有许多有关其配置的讨论和解释。
  10.12.1.1 netfilter 基础
  Netfilter 内建了 5 条链路来处理数据包,它们分别是:PREROUTING、INPUT、FORWARD、
  OUTPUT 和 POSTROUTING:
  routing
  decision
  IN ------> PRE ---> ------> FORWARD -----> ----> POST -----> OUT
  interface ROUTING \          filter       /      ROUTING     interface
  DNAT     |       tracking      ^      SNAT
  REDIRECT |                     |      MASQUERADE
  165
  Linux公社 www.linuxidc.com
  v                    |
  INPUT                OUTPUT
  | filter             ^ filter,DNAT
  v                    |
  \--> Local Process --/
  user-space programs
  10.12.1.2 过滤表(Netfilter table)
  数据包在每条内建的链路中传输时按如下过滤表中的规则进行处理。
  · filter(数据包过滤器,链路中默认的过滤器)
  o   INPUT(作用于进入本机的数据包)
  o   FORWARD(作用于路由到本机的数据包)
  o   OUTPUT(作用于本地产生的数据包)
  · nat(网络地址转换)
  o   PREROUTING(作用于刚进入的待转换数据包)
  o   OUTPUT(作用于在路由之前待转换的本地产生的数据包)
  o   POSTROUTING(作用于待发出的已转换的数据包)
  · mangle (network address mangling,适合于 2.4.18 之后的内核)
  o   适用于所有 5 条链路。
  10.12.1.3 过滤目标(Netfilter target)
  防火墙规则有许多目标:
  · 4 个基本目标:
  o   ACCEPT 允许数据包通过。
  o   DROP 阻拦数据包。
  o   QUEUE 允许数据包进入用户空间(userspace)(如果内核支持的话)。
  o   RETURN 表示停止读取该链路并回到前一个(呼叫的)链路的下一条规则。
  · 扩展目标:
  o   LOG 打开内核日志。
  o   REJECT 回送错误数据包并阻拦该数据包。
  o   SNAT 修改数据包源地址,仅作用于 POSTROUTING 链路。    (仅适用于 nat 过
  滤表)
  --to-source ipaddr[-ipaddr][[UbuntuHelp:port-port]]
  o   MASQUERADE 作用和 SNAT 一样,但面向使用动态 IP 请求建立的连接(拔号
  连接)。(仅适用于 nat 过滤表)
  166
  Linux公社 www.linuxidc.com
  --to-ports port[-port]
  o  DNAT 修改数据包目的地址,仅作用于 PREROUTING、OUTPUT 链路以及由它
  们调用的用户自定义链路。(仅适用于 nat 过滤表)
  --to-destination ipaddr[-ipaddr][[UbuntuHelp:port-port]]
  o  REDIRECT 修改数据包目标地址使其发送给本机。
  --to-ports port[-port]
  10.12.1.4 Netfilter 命令
  iptables 的基本命令有:
  iptables -N chain                   # 创建一个链路
  iptables -A chain \                 # 添加链路的规则
  -t table \                 # 使用过滤表(filter, nat, mangle)
  -p protocol \              # tcp、udp、icmp 或所有,
  -s source-address[/mask] \
  --sport port[[UbuntuHelp:port]] \      # 如果 -p 是 tcp 或 udp,指定源的端口
  -d destination-address[/mask] \
  --dport port[[UbuntuHelp:port]] \      # 如果 -p 是 tcp 或 udp,指定目的地端口
  -j target \                # 如果匹配作何处理
  -i in-interface-name \     # 针对 INPUT、FORWARD、PREROUTING
  -o out-interface-name      # 针对 FORWARD、OUTPUT、POSTROUTING
  10.12.1.5 网络地址转换
  LAN 中的机器可以通过能把 LAN 地址转换为可用的 Internet 上的 IP 地址的网关来访问
  Internet 的资源。
  # apt-get install ipmasq
  执行样例规则来加强 ipmasq 的保护机制。 参阅
  /usr/share/doc/ipmasq/examples/stronger/README。 对于在 Woody 中使用 Debian 的
  kernel-image-2.4,请确认加载了相应的模块。 Sarge 里面的 ipmasq 已经修正了这个问
  题。相关配置指导请参阅 网络功能, 第 7.2.3 节。
  对于使用 2.2 版内核镜像的 Debian,可按下面的方法编辑 /etc/masq/rules 中的
  Z92timeouts.rul 文件,以保证可长时间连接远程站点(如发送大容量的 email, 等 ):
  # tcp, tcp-fin, udp
  # 2hr, 10 sec, 160 sec - default
  # 1 day, 10 min, 10 min - longer example
  $IPCHAINS -M -S 86400 600 600
  同样,如果是通过 PCMCIA NIC 访问网络,ipmasq 需要从 /etc/pcmcia/network.opts(阅
  读:/usr/share/doc/ipmasq/ipmasq.txt.gz)或 /etc/network/interfaces(阅读: 网络
  设置和 PCMCIA, 第 10.8.5 节和 启动(triggering)网络设置, 第 10.8 节) 启动。
  10.12.1.6 重定向 SMTP 连接(2.4 版内核)
  假设你将一台笔记本电脑重新配置成可连入其它的 LAN 环境,而你不想再重新配置用户邮
  件代理,即:想直接用原来的配置收发邮件。
  使用 iptables 命令向网关机器中加入下面的规则,就可以实现重定向与网关机器的 SMTP
  连接。
  # iptables -t nat -A PREROUTING -s 192.168.1.0/24 -j REDIRECT \
  -p tcp --dport smtp --to-port 25 # smtp=25, INPUT is open
  想使用更完备的重定向规则集,建议安装 ipmasq 软件包,并在 /etc/ipmasq/rules/ 目录
  中添加 M30redirect.def 文件。
  环境设置:
  eth0: 192.168.1.2/24; gateway 192.168.1.1
  eth1: 10.0.0.2/24; gateway 10.0.0.1
  该机器没有 IP 伪装机制。
  Special magic:
  ·   ip rule add from 192.168.1.2 lookup 1
  ·   ip rule add from 10.0.0.2 lookup 2
  ·   ip route add to default via 10.0.0.1 metric 0
  ·   ip route add to default via 192.168.1.1 metric 1
  ·   ip route add table 1 to 192.168.1.0/24 via eth0
  ·   ip route add table 1 to 10.0.0.2/24 via eth1
  ·   ip route add table 1 to default via 192.168.1.1
  ·   ip route add table 2 to 192.168.1.0/24 via eth0
  ·   ip route add table 2 to 10.0.0.2/24 via eth1
  ·   ip route add table 2 to default via 10.0.0.2
  第 12 章 - 系统版本控制
  12.1 并行版本系统 (CVS)
  有关的详细信息可使用 lynx 查阅 /usr/share/doc/cvs/html-cvsclient、
  /usr/share/doc/cvs/html-info、/usr/share/doc/cvsbook 或执行 info cvs 及 man cvs。
  12.1.1 安装 CVS 服务器
  以下步骤配置的服务器,仅允许“src”用户组的成员访问 CVS 仓库,并且仅“staff”用
  户组的成员才可管理 CVS,这样做可以降低管理者不小心犯错的机率。
  # cd /var/lib; umask 002 ; sudo mkdir cvs # [Woody] FSH
  # apt-get install cvs cvs-doc cvsbook
  # export CVSROOT=/var/lib/cvs
  # cd $CVSROOT
  # chown root:src . # 设置为"staff"可加强对新建项目行为的限制
  # chmod 3775 .             # 如果上面的赋值为"staff",则使用 2775
  # cvs -d /var/lib/cvs init # 在此明确地指定 -d 更安全
  # cd CVSROOT
  # chown -R root:staff .
  # chmod 2775 .
  # touch val-tags
  # chmod 664 history val-tags
  # chown root:src history val-tags
  12.1.2 CVS 会话例子
  下面我们来设置 shell 环境以便访问 CVS 仓库。
  12.1.2.1 匿名 CVS(仅用于下载)
  只读远程访问:
  $ export CVSROOT=:pserver:anonymous@cvs.sf.net:/cvsroot/qref
  $ cvs login
  $ cvs -z3 co qref
  12.1.2.2 使用本地 CVS 服务器
  通过同一台机器上的 shell 进行本地访问:
  $ export CVSROOT=/var/lib/cvs
  12.1.2.3 使用远程 CVS pserver
  非 SSH(在 cvs 中使用 RSH 协议)远程访问:
  $ export CVSROOT=:pserver:account@cvs.foobar.com:/var/lib/cvs
  $ cvs login
  易受窍听攻击。
  12.1.2.4 通过 ssh 使用远程 CVS
  通过 SSH 进行远程访问:
  $ export CVSROOT=:ext:account@cvs.foobar.com:/var/lib/cvs
  或连接 SourceForge:
  $ export CVSROOT=:ext:account@cvs.sf.net:/cvsroot/qref
  亦可使用 RSA 认证( 用更少的密码建立连接 – RSA, 第 9.5.3 节),它不需要密码提示。
  12.1.2.5 新建 CVS 档案
  要建立如下的档案,
  ITEM              VALUE                    MEANING
  source tree:      ~/project-x              All source codes
  Project name:     project-x                Name for this project
  Vendor Tag:       Main-branch              Tag for the entire branch
  Release Tag:      Release-original         Tag for a specific release
  则,
  $ cd ~/project-x                 # 进源码目录
  ... 创建源码树 ...
  $ cvs import -m "Start project-x" project-x Main-branch Release-initial
  $ cd ..; rm -R ~/project-x
  12.1.2.6 使用 CVS
  使用本地 CVS 仓库来为 project-x 工作:
  $ cd                            # 转到工作域
  $ cvs co project-x              # 从 CVS 下载源码到本地
  $ cd project-x
  ... 修改源码内容 ...
  $ cvs diff -u                   # 相当于 diff -u repository/ local/
  $ cvs up -C modified_file       # 撤消对文件的修改
  $ cvs ci -m "Describe change"   # 保存本地源码到 CVS
  $ vi newfile_added
  $ cvs add newfile_added
  $ cvs ci -m "Added newfile_added"
  $ cvs up                        # 从 CVS 合并最新版本
  ... 生成所有在 CVS 里新创建的子目录,使用
  ... "cvs up -d -P" 代替 "cvs up"
  ... 注意以 "C filename" 开头的行,这表示在更新过程中,产生了冲突
  ... 未修改的本地代码文件被重命名为 `.#filename.version'.
  ... 在 filename 里面查找 "<<<<<<<" 和 ">>>>>>>",可以找到发生冲突的地方
  $ cvs tag Release-1             # 添加 release tag
  ... 进一步修改 ...
  $ cvs tag -d Release-1          # 移除 release tag
  $ cvs ci -m "more comments"
  $ cvs tag Release-1             # 重新添加 release tag
  $ cd                            # 返回工作域
  $ cvs co -r Release-initial -d old project-x
  ... 得到原始版本到 old 目录
  $ cd old
  $ cvs tag -b Release-initial-bugfixes # 创建分支 (-b) 标签
  ... 现在可以在老版本工作 (Tag=sticky)
  $ cvs update -d -P
  ... 源代码树现在有粘滞标签 "Release-initial-bugfixes"
  ... 在这个分支下工作
  $ cvs up -d -P # 同步这个分支下其它人修改的文件
  $ cvs ci -m "check into this branch"
  $ cvs update -kk -A -d -P
  ... 删除粘滞标签,忽略从主干的更新,
  ... 不扩展关键字
  $ cvs update -kk -j Release-initial-bugfixes
  ... 从 Release-initial-bugfixes 分支移植到主干,不扩展关键字
  ... 使用编辑器修改冲突
  $ cvs ci -m "merge Release-initial-bugfixes"
  $ cd
  $ tar -cvzf old-project-x.tar.gz old      # 产 生文 档, -j 选项生成 bz2 格式的压缩 包
  $ cvs release -d old               # 删除本地源码(可选)
  应该记住的几个选项(用作 cvs 命令行的第一个参数):
  -n      虚拟运行,无实际效果
  -t      显示 cvs 活动步骤的信息
  12.1.2.7 从 CVS 取文件
  要从 CVS 获得最新版本,用“tomorrow”:
  $ cvs ex -D tomorrow module_name
  12.1.2.8 管理 CVS
  为项目添加别名(本地服务器)             :
  $ su - admin           # staff 用户组成员
  $ export CVSROOT=/var/lib/cvs
  $ cvs co CVSROOT/modules
  $ cd CVSROOT
  $ echo "px -a project-x" >>modules
  $ cvs ci -m "Now px is an alias for project-x"
  $ cvs release -d .
  $ exit                 # 按 Ctrl-D 从 su 返回
  $ cvs co -d project px
  ... 从 CVS 检出 project-x (别名:px) 到目录 project
  $ cd project
  ... 修改内容 ...
  12.1.3 CVS 常见问题及解决方法
  12.1.3.1 仓库中的文件权限
  CVS 不会覆盖当前仓库中的文件,而是用另一个文件替换它。因此,对仓库目录的写权限是
  很危险的权限。所以在新建仓库时,请运行下面的命令,确保权限合适。
  # cd /var/lib/cvs
  # chown -R root:src repository
  # chmod -R ug+rwX repository
  # chmod    2775     repository # 如果需要,当前目录和子目录
  12.1.3.2 执行标记(execution bit)
  当文件被别人取走后会保留执行标记,任何时候你遇到外出文件存在执行权限问题,可用下
  面的命令在 CVS 仓库中修改文件权限。
  # chmod ugo-x filename
  12.1.4 CVS 命令
  这儿是一些 CVS 命令的用法简介。
  {add|ad|new} [-k kflag] [-m 'message'] files...
  {admin|adm|rcs} [rcs-options] files...
  {annotate|ann} [options] [files...]
  {checkout|co|get} [options] modules...
  {commit|ci|com} [-lnR] [-m 'log_message' | -f file] \
  [-r revision] [files...]
  {diff|di|dif} [-kl] [rcsdiff_options] [[-r rev1 | -D date1] \
  [-r rev2 | -D date2]] [files...]
  {export|ex|exp} [-flNn] -r rev|-D date [-d dir] [-k kflag] module...
  {history|hi|his} [-report] [-flags] [-options args] [files...]
  {import|im|imp} [-options] repository vendortag releasetag...
  {login|logon|lgn}
  {log|lo|rlog} [-l] rlog-options [files...]
  {rdiff|patch|pa} [-flags] [-V vn] [-r t|-D d [-r t2|-D d2]] modules...
  {release|re|rel} [-d] directories...
  {remove|rm|delete} [-lR] [files...]
  {rtag|rt|rfreeze} [-falnR] [-b] [-d] [-r tag | -D date] \
  symbolic_tag modules...
  {status|st|stat} [-lR] [-v] [files...]
  {tag|ta|freeze} [-lR] [-F] [-b] [-d] [-r tag | -D date] [-f] \
  12.2 Subversion
  Subversion 是下一代版本控制系统,它将替代 CVS。当前开发者称它还处于“alpha”阶段 ,
  但对大多数用户而言它已足够稳定了。到本文档写作之时,Subversion 仅在 Debian
  unstable 版中可用。
  12.2.1 安装 Subversion 服务器
  subversion meta-package 依赖一些关联包(libapache2-svn 和 subversion-tools)来 配
  置服务器。
  12.2.1.1 创建仓库
  当前,subversion 软件包无法创建仓库,所以用户需要手工创建它们。通常可在
  /var/local/repos 下创建仓库。
  创建目录:
  # mkdir -p /var/local/repos
  创建仓库数据库:
  # svnadmin create /var/local/repos
  将仓库的写权限赋给 WWW server:
  # chown -R www-data:www-data /var/local/repos
  12.2.1.2 配置 Apache2
  通过用户认证授权访问仓库,添加(或去掉注释符)下列内容到 /etc/apache2/mods-
  available/dav_svn.conf:
  <Location /repos>
  DAV svn
  SVNPath /var/local/repos
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /etc/subversion/passwd
  <LimitExcept GET PROPFIND OPTIONS REPORT>
  Require valid-user
  </LimitExcept></Location>
  接着,使用下面的命令创建用户认证文件:
  htpasswd2 -c /etc/subversion/passwd some-username
  重启 Apache2,就可以使用 URLhttp://hostname/repos 来访问新的 Subversion 仓 库 了 。
  12.2.2 将 CVS 仓库迁移到 Subversion
  12.2.3 Subversion 用法样例
  下面的小节将教你如何在 Subversion 下使用各种命令。
  12.2.3.1 创建新的 Subversion 档案
  创建新的 subversion 档案,输入下面的命令:
  $ cd ~/your-project      # 进入源码目录
  $ cd ..
  $ svn import your-project http://localhost/repos/project-name -m "initial
  project import"
  这将在你的 Subversion 仓库下创建一个名为 project-name 的目录,用来存放你的项目文
  件。查看 http://localhost/repos/ 它是否在那儿?
  12.2.3.2 使用 subversion
  用 subversion 来管理 project-y:
  $ cd                            # 转到工作域
  $ svn co http://localhost/repos/project-y # 提取源码
  $ cd project-y
  ... 完成一些工作 ...
  $ svn diff                      # 相当于 diff -u repository/ local/
  $ svn revert modified_file      # 撤消对文件所做的修改
  $ svn ci -m "Describe changes" # 将你做的修改保存到仓库中
  $ vi newfile_added
  $ svn add newfile_added
  $ svn add new_dir               # 将所有的文件嵌套式地加到 new_dir
  $ svn add -N new_dir2           # 非嵌套式地添加目录
  $ svn ci -m "Added newfile_added, new_dir, new_dir2"
  $ svn up                        # 从仓库中合并最新的版本
  $ svn log                       # 显示所有修改记录
  $ svn copy http://localhost/repos/project-y \
  179
  Linux公社 www.linuxidc.com
  http://localhost/repos/project-y-branch \
  -m "creating my branch of project-y" # 对 project-y 进行分支
  $ svn copy http://localhost/repos/project-y \
  http://localhost/repos/proj-y_release1.0 \
  -m "project-y 1.0 release"    # 增加 release 标签
  ...... 注意分支和标签是一样。唯一的不同是
  ...... 分支可以提交,而标签不可以。
  ...... 对分支进行修改 ......
  $ # merge branched copy back to main copy
  $ svn merge http://localhost/repos/project-y \
  http://localhost/repos/project-y-branch
  $ svn co -r 4 http://localhost/repos/project-y # 得到版本 4
  第 13 章 - 编程
  不要用“test”命名可执行的测试文件。test 是一个 shell 的内建命令。
 接下来的四个小节中包含了用不同的编程语言编写的脚本样例,该脚本创建一个包含用户帐
  户信息的文本文件,调用一组进程如 newusers 程 序,将这些信息加入到/etc/passwd。每
  个脚本均需要一个输入文件,该文件应包含格式如 first_name last_name password 的 行 。
  (这些脚本并不创建真正的用户目录。)
  13.2 Shell
  理解类 Unix 系统如何工作的最好方法就是阅读 shell 脚本。在此,我们就 shell 编程做个
  简单的介绍。 参阅 Shell Mistakes 来学习更多的错误。
  13.2.1 Bash – GNU 标准交互式 shell
  Bash 参考资源:
  ·   bash(1)
  ·   info bash
  ·   LDP BASH Programming - Introduction HOWTO 作为开始信息。
  ·   mc /usr/share/doc/bash/examples/ /usr/share/doc/bash/
  (安装 bash-doc 软件包阅读样例文件。)
  · Learning the bash Shell, 2nd edition (O'Reilly)
  一个简短的程序样例(从标准输入端创建帐户信息供 newusers 使 用 ):
  #!/bin/bash
  # (C) Osamu Aoki Sun Aug 26 16:53:55 UTC 2001 Public Domain
  pid=1000;
  while read n1 n2 n3 ; do
  if [ ${n1:0:1} !== "#" ]; then
  let pid=$pid+1
  echo ${n1}_${n2}:password:${pid}:${pid}:,,,/home/${n1}_${n2}:/bin/bash
  fi
  done
 13.2.3 Shell 参数
  几个需要记住的特殊参数:
  $0      === shell 名称或 shel 脚本名称
  $1      === 第一个(1)shell 参数
  ...
  $9      === 第九个(9)shell 参数
  $#      === 位置参数的个数
  "$*"    === "$1 $2 $3 $4 ... $n"
  "$@"    === "$1" "$2" "$3" "$4" ... "$n"
  $?      === 最近执行的命令的退出状态
  $$      === 当前 shell 脚本的 PID
  $!      === 最近启动的后台作业的 PID
  需要记住的基本扩展参数:
  形式          如果设置了 var           如果没有设置 var
  ${var:-string} $var                 string
  ${var:+string} string               null
  ${var:=string} $var                 string
  (并且执行 var=string)
  ${var:?string} $var                 (返回 string 然后退出)
  在此,冒号“:”在所有运算表达式中事实上均是可选的。
  · 有“:” === 运算表达式测试“存在”和“非空”。
  · 没有“:” === 运算表达式仅测试“存在”。
  需要记住的替换参数:
  形式              结果
  ${var%suffix}   删除位于 var 结尾的 suffix 最小匹配模式
  ${var%%suffix}  删除位于 var 结尾的 suffix 最大匹配模式
  ${var#prefix}   删除位于 var 开头的 prefix 最小匹配模式
  ${var##prefix}  删除位于 var 开头的 prefix 最大匹配模式
  13.2.4 Shell 重定向
  需要记住的基本重定向(redirection)运算符(在此[n]表示定义文件描述符的可选参数)        :
  [n]> file     重定向标准输出(或 n)到 file。
  [n]>> file    重定向标准输出(或 n)到 file。
  [n]< file     将 file 重定向到标准输入(或 n)。
  [n1]>&n2      重定向标准输出(或 n1)到 n2。
  2> file >&2    重定向标准输出和错误输出到 file。
  | command     将标准输出通过管道传递给 command。
  2>&1 | command 将标准输出或错误输出通过管道传递给 command。
  在这里:
  · stdin: 标准输入 (文件描述符 === 0)
  · stdout: 标准输出 (文件描述符 === 1)
  · stderr: 标准错误 (文件描述符 === 2)
  shell 允许你通过使用 exec 内嵌一个任意的文件描述符来打开文件。
  $ echo Hello >foo
  $ exec 3<foo 4>bar # 打开文件
  $ cat <&3 >&4       # 重定向标准输入到 3,标准输出到 4
  $ exec 3<&- 4>&-    # 关闭文件
  $ cat bar
  Hello
  在这里, n<&- 和 n>&- 表示关闭文件描述符 n。
  13.2.5 Shell 条件表达式
  每条命令均可返回一个退出状态,这个状态值可用于条件表达式:
  · 成功:0 (True)
  · 错误:1–255 (False)
  注意该用法,返回值 0 用来表示“true”与计算机其它领域中常见的转换是不同的。另外`['
  等阶于使用 test 命令进行参数赋值`]'相当于一个条件表达式。
  需要记住的常用基本条件表达式:
  command && if_success_run_this_command_too || true
  command || if_not_success_run_this_command_instead
  if [ conditional_expression ]; then
  if_success_run_this_command
  else
  if_not_success_run_this_command
  fi
  当 shell 使用 -e 调用的时候, 需要使用 || true 来确保这个 shell 不会在本行意外退
  出。
  在条件表达式中使用的文件比较运算符有:
  -e file         file 存在则返回 True。
  -d file         file 存在且是一个目录则返回 True。
  -f file         如果 file 存在且是一个普通文件则返回 True。
  -w file         如果 file 存在且可写则返回 True。
  -x file         如果 file 存在且可执行则返回 True。
  file1 -nt file2 如果 file1 比 file2 新则返回 True。(指修改日期)
  file1 -ot file2 如果 file1 比 file2 旧则返回 True。(指修改日期)
  file1 -ef file2 如果两者是相同的设备和具有相同的结点(inode)数则返回 True。
  条件表达式中使用的字符串比较运算符有:
  -z str    如果 str 长度为零则返回 True。
  -n str    如果 str 长度为非零则返回 True。
  str1 ==== str2 如果字符串相等则返回 True。
  str1 === str2 如果字符串相等则返回 True。
  (使用"=="代替"="符合严格意义上的 POSIX 兼容)
  str1 !== str2 如果字符串不相等则返回 True。
  str1 < str2 如果 str1 排在 str2 之前则返回 True(与当前位置有关)。
  str1 > str2 如果 str1 排在 str2 之后则返回 True(与当前位置有关)。
  条件表达式中的算术整数比较运算符有-eq、-ne、-lt、-le、-gt 和-ge。
  13.2.6 命令行处理
  shell 按如下的方式处理脚本:
  ·   用这些元字符将其分割成 tokens:SPACE, TAB, NEWLINE, ;, (, ), <, >, |, &
  ·   如果不在"..."或'...'内就检查 keyword(循环检查)
  ·   如果不在"..."或'...'内就扩展 alias(循环检查)
  ·   如果不在"..."或'...'内就扩展 brace,a{1,2} -> a1 a2
  ·   如果不在"..."或'...'内就扩展 tilde, ~user -> user's home directory
  ·   如果不在'...'内就扩展 parameter, $PARAMETER
  ·   如果不在'...'内就扩展 command substitution, $(command)
  ·   如果不在"..."或'...'内就用$IFS 分割成 words
  ·   如果不在"..."或'...'内就扩展 pathname *?[]
  ·   查找 command
  o    function
  o   built-in
  o   file in $PATH
  · 循环
  在双单号内单引号将失效。
  在 shell 里执行 set -x 或者使用 -x 选项调用 shell, 该 shell 将会显示出所有执行
  的命令。 这对调试非常有用。
  13.3 Awk
  Awk 的参考资源:
  ·  Effective awk Programming, 3rd edition (O'Reilly)
  ·  Sed & awk, 2nd edition (O'Reilly)
  ·  mawk(1)和 gawk(1)
  ·  info gawk
  简短的程序样例(创建 newusers 命令输入):
  #!/usr/bin/awk -f
  # Script to create a file suitable for use in the 'newusers' command,
  # from a file consisting of user IDs and passwords in the form:
  # first_name last_name password
  # Copyright (c) KMSelf Sat Aug 25 20:47:38 PDT 2001
  # Distributed under GNU GPL v 2, or at your option, any later version.
  # This program is distributed WITHOUT ANY WARRANTY.
  BEGIN {
  # Assign starting UID, GID
  if ( ARGC > 2 ) {
  startuid === ARGV[1]
  delete ARGV[1]
  }
  else {
  printf( "Usage: newusers startUID file\n" \
  " where:\n" \
  "    startUID is the starting userid to add, and\n" \
  "    file is an input file in form:\n" \
  "      first_name last_name password\n" \
  )
  exit
  }
  infile === ARGV[1]
  printf( "Starting UID: %s\n\n", startuid )
  }
  /^#/ { next }
  {
  ++record
  first === $1
  last === $2
  passwd === $3
  user== substr( tolower( first ), 1, 1 ) tolower( last )
  uid === startuid + record - 1
  gid === uid
  printf( "%s:%s:%d:%d:%s %s,,/home/%s:/bin/bash\n", \
  user, passwd, uid, gid, first, last, user \
  )
  }
  185
  Linux公社 www.linuxidc.com
  Ubuntu 中有两个软件包提供了 POSIX awk:
  · mawk
  o  Priority: required
  o  Installed-Size: 228
  o  较小和较快 – 适于默认安装
  o  编译时的限制存在
  § NF === 32767
  § sprintf buffer === 1020
  · gawk
  o  Priority: optional
  o  Installed-Size: 1708
  o  较大和多特征的 – 应用了许多扩展
  § System V Release 4 version of UNIX
  § Bell Labs awk
  § GNU-specific
  13.4 Perl
  运行于类 Unix 系统上的解释器。
  Perl 参考资源:
  · perl(1)
  · Programming Perl, 3rd edition (O'Reilly)
  · The Perl Directory
  简短的程序样例(创建 newusers 命令输入):
  #!/usr/bin/perl
  # (C) Osamu Aoki Sun Aug 26 16:53:55 UTC 2001 Public Domain
  $pid=1000;
  while (<STDIN>) {
  if (/^#/) { next;}
  chop;
  $pid++;
  ($n1, $n2, $n3) === split / /;
  print $n1,"_",$n2,":", $n3, ":",$pid,
  ":",$pid,",,,/home/",$n1,"_",$n2,":/bin/bash\n"
  }
  安装 Perl 模块 module_name:
  186
  Linux公社 www.linuxidc.com
  # perl -MCPAN -e 'install module_name'
  13.5 Python
  一个不错的面向对象的解释器。
  Python 参考资源:
  · python(1)
  · Learning Python(O'Reilly).
  · Python Programming Language
  简短的程序样例(创建 newusers 命令输入):
  #! /usr/bin/env python
  import sys, string
  # (C) Osamu Aoki Sun Aug 26 16:53:55 UTC 2001 Public Domain
  # Ported from awk script by KMSelf Sat Aug 25 20:47:38 PDT 2001
  # This program is distributed WITHOUT ANY WARRANTY.
  def usages():
  print \
  "Usage: ", sys.argv[0], " start_UID [filename]\n" \
  "\tstartUID is the starting userid to add.\n" \
  "\tfilename is input filename. If not specified, standard input.\n\n" \
  "Input file format:\n"\
  "\tfirst_name last_name password\n"
  return 1
  def parsefile(startuid):
  #
  # main filtering
  #
  uid === startuid
  while 1:
  line === infile.readline()
  if not line:
  break
  if line[0] ==== '#':
  continue
  (first, last, passwd) === string.split(string.lower(line))
  # above crashes with wrong # of parameters :-)
  user === first[0] + last
  gid === uid
  lineout === "%s:%s:%d:%d:%s %s,,/home/%s:/bin/bash\n" % \
  (user, passwd, uid, gid, first, last, user)
  sys.stdout.write(lineout)
  +uid
  if <u>name</u> ==== '<u>main</u>':
  if len(sys.argv) ==== 1:
  usages()
  else:
  uid === int(sys.argv[1])
  #print "# UID start from: %d\n" % uid
  if len(sys.argv) > 1:
  infilename === string.join(sys.argv[2:])
  infile === open(infilename, 'r')
  #print "# Read file from: %s\n\n" % infilename
  else:
  infile === sys.stdin
  parsefile(uid)
  13.6 Make
  Make 参考资源:
  · info make
  · make(1)
  · Managing Projects with make, 2nd edition (O'Reilly)
  简单自动变量:
  语法规则:
  target: [ prerequisites ... ]
  [TAB] command1
  [TAB] -command2 # ignore errors
  [TAB] @command3 # suppress echoing
  在此[TAB]代表一个 TAB 符。 在完成 make 变量代换后,shell 将逐行进行解释。在行尾使
  用\可以续行。使用$$可将$加入到 shell 脚本的环境变量中。
  适用于 target 和 prerequisites 的隐含的等价规则:
  %: %.c header.h
  or,
  %.o: %.c header.h
  在此,target 包含了%字符(确切地说是其中之一),%可匹配实际的 target 文件名中任何
  非空子串。prerequisites 同样也使用%来显示它们的名字是如何关联到实际的 target 文件
  名的。
  用 Suffix rules 方法来定义 make 的隐含规则(implicit rules)已经过时。GNU make 因为
  兼容性的考虑仍支持它,但只要有可能就应该使用与之等价的模版规则(pattern rules):
  old suffix rule --> new pattern rule
  .c:             --> % : %.c
  .c.o:           --> %.o: %.c
  上述规则所使用的自动变量:
  foo.o: new1.c new2.c old1.c new3.c
  $@ ==== foo.o                         (target)
  $< ==== new1.c                        (first one)
  $? ==== new1.c new2.c new3.c          (newer ones)
  $^ ==== new1.c new2.c old1.c new3.c (all)
  $* ==== `%' matched stem in the target pattern.
  变量参考:
  foo1 :== bar    # One-time expansion
  foo2 === bar     # Recursive expansion
  foo3 +== bar    # Append
  SRCS :== $(wildcard *.c)
  OBJS :== $(foo:c=o)
  OBJS :== $(foo:%.c=%.o)
  OBJS :== $(patsubst %.c,%.o,$(foo))
  DIRS === $(dir directory/filename.ext) # Extracts "directory"
  $(notdir NAMES...), $(basename NAMES...), $(suffix NAMES...) ...
  执行 make -p -f/dev/null 可查看内部自动规则。
  13.7 C
  准备工作:
  # apt-get install glibc-doc manpages-dev libc6-dev gcc
  C 参考资源:
  ·  info libc (C library function reference)
  ·  gcc(1)
  ·  each_C_library_function_name(3)
  ·  Kernighan & Ritchie, The C Programming Language, 2nd edition (Prentice
  Hall).
  13.7.1 简单 C 编程(gcc)
  一个简单的例子,将 example.c 和库函数 libm 编译成可执行文件 run_example:
  189
  Linux公社 www.linuxidc.com
  $ cat > example.c << EOF
  #include <stdio.h>
  #include <math.h>
  #include <string.h>
  int main(int argc, char **argv, char **envp){
  double x;
  char y[11];
  x=sqrt(argc+7.5);
  strncpy(y, argv[0], 10); /* prevent buffer overflow */
  y[10] === '\0'; /* fill to make sure string ends with '\0' */
  printf("%5i, %5.3f, %10s, %10s\n", argc, x, y, argv[1]);
  return 0;
  }
  EOF
  $ gcc -Wall -g -o run_example example.c -lm
  $ ./run_example
  1, 2.915, ./run_exam,     (null)
  $ ./run_example 1234567890qwerty
  2, 3.082, ./run_exam, 1234567890qwerty
  在此,sqrt() 链接库函数 libm 需要-lm 选项。真正的库函数是位于/lib/下的 libm.so.6,
  它是 libm-2.1.3.so 的一个符号链接。
  看看输出文本中最后的参数,尽管指定了%10s,它还是多于 10 个字符。
  使用不带边界检查的指针内存操作函数如 sprintf 和 strcpy 会妨碍缓冲区溢出侦测,故使
  用 snprintf 和 strncpy。
  13.7.2 调试
  13.7.2.1 使用 gdb 进行调试
  准备工作:
  # apt-get install gdb
  gdb 参考资源:
  · info gdb (tutorial)
  · gdb(1)
  · http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html
  使用-g 选项编译程序就可使用 gdb 进行调试。许多命令都可以缩写。Tab 扩展功能和在 shell
  中的一样。
  $ gdb program
  (gdb) b 1                # 在 line 1 设置断点
  (gdb) run arg1 arg2 arg3 # 运行程序
  190
  Linux公社 www.linuxidc.com
  (gdb) next               # 下一行
  ...
  (gdb) step               # 前进一步
  ...
  (gdb) p parm             # 打印 parm
  ...
  (gdb) p parm=12          # 设置其值为 12
  在 Emacs 环境下调试程序,参阅 编辑器命令总汇(Emacs,Vim), 第 11.3.4 节。
  Ubuntu 系统上所有默认安装的二进制文件都已经进行了 strip 操作, 调试符号已经被移
  除。 为了能够让 gdb 对 Ubuntu 软件包进行调试, 相关的软件包需要使用下面的方法重
  新打包:
  · 编辑 debian/control 来改变软件包的 版本。
  · 检查打包脚本,确保使用 CFLAGS=-g-Wall 来编译二进制文件。
  · 设置 DEB_BUILD_OPTIONS=nostrip,noopt 来建立 Debian 包。
  更多信息请参阅: Policy 10.1。
  13.7.2.2 检查库函数关联关系
  使用 ldd 可查看程序与库函数的关联关系:
  $ ldd /bin/ls
  librt.so.1 ==> /lib/librt.so.1 (0x4001e000)
  libc.so.6 ==> /lib/libc.so.6 (0x40030000)
  libpthread.so.0 ==> /lib/libpthread.so.0 (0x40153000)
  /lib/ld-linux.so.2 ==> /lib/ld-linux.so.2 (0x40000000)
  可在 chrooted 环境下使用 ls 检查上述库函数在你的 chroot 环境中是否可见。
  下面的命令也很有用:
  · strace: 跟踪系统调用和消息
  · ltrace: 跟踪库函数调用
  13.7.2.3 使用内存查漏工具进行调试
  Ubuntu 中有几个内存查漏工具。
  ·  njamd
  ·  valgrind
  ·  dmalloc
  ·  electric-fence
  ·  memprof
  ·  memwatch (没有软件包,从 memwatch 获 取 。)
  ·  mpatrol
  ·  leaktracer
  · libgc6
  · 来自 Parasoft 的 Insure++(非自由软件,商业付费)
  亦可查阅 Debugging Tools for Dynamic Storage Allocation and Memory Management.
  13.7.3 Flex – 更好的 Lex
  flex 是一个快速的词法分析机生成器。
  flex 参考资源:
  · info flex (教程)
  · flex(1)
  需要提供你自己的 main()或 yywrap(),或者你的 program.l 象这样不带 library 编译
  (yywrap 是一个宏;%option main 隐含地打开了%option noyywrap):
  %option main
  %%
  .|\n    ECHO ;
  %%
  另外,还可以在 cc 命令行末尾加上-lfl 链接选项进行编译(象 AT&T-Lex 使用-ll 一 样 ),
  此时就不需要%option 了。
  13.7.4 Bison – 更好的 Yacc
  Ubuntu 中有几个软件包提供了与 Yacc 兼容的 LALR 词法生成器:
  · bison: GNU LALR parser generator
  · byacc: The Berkeley LALR parser generator
  · btyacc: Backtracking parser generator based on byacc
  bison 参考资源:
  · info bison (教程)
  · bison(1)
  需要提供自己的 main()和 yyerror()。main()调用 yyparse(),而 yyparse()调用 yylex(),
  通常由 FleX 创建。
  %%
  %%
  13.7.5 Autoconf
  autoconf 一个 shell 脚本生成工具,由它生成的脚本能自动配置软件源码包,以适用于各
  种使用全套 GNU build 系统的类 UNIX 系统。
  autoconf 会生成配置脚本 configure。configure 使用 Makefile.in 模版自动创建自定义
  Makefile。
  13.7.5.1 编译并安装程序
  Ubuntu 不会改动/usr/local/下的文件(参阅 多样性支持, 第 2.5 节)。所以如果是从源
  码编译程序,并将其安装到/usr/local/下,是不会影响到 Debian 的。
  $ cd src
  $ ./configure --prefix=/usr/local
  $ make
  $ make install # this puts the files in the system
  13.7.5.2 卸载程序
  如果仍保存有源码,对其使用了 autoconf/automake,并且记得是如何进行配置的:
  $ ./configure all-of-the-options-you-gave-it
  # make uninstall
  另一种方法是,如果可以确定安装过程将文件都放在了/usr/local/,并且该目录下没有什
  么别的重要文件,可用下面的命令将其全部删除:
  # find /usr/local -type f -print0 | xargs -0 rm -f
  如果不能确定文件安装到什么位置,最好使用 checkinstall,该命令可提供明确的卸载路
  径。
  13.8 Web
  通过下面的方法来制作一个基本的交互动态网页:
  · 使用 HTML 表单在浏览器里显示查询。
  · 填写和点击表单提交,将从浏览器传送一个将参数 编码的 URL 到服务器。例如:
  o   http://www.foo.dom/cgi-
  bin/program.pl?VAR1=VAL1&VAR2=VAL2&VAR3=VAL3
  o   http://www.foo.dom/cgi-
  bin/program.py?VAR1=VAL1&VAR2=VAL2&VAR3=VAL3
  o   http://www.foo.dom/program.php?VAR1=VAL1&VAR2=VAL2&VAR3=VAL3
  · 在 web 服务器上的 CGI 程序(任何一个 program.* 程序) 将接受编码的
  "VAR1=VAL1 VAR2=VAL2 VAR3=VAL3" 参数作为环境变量 “QUERY_STRING” 的内容,
  并执行该环境变量。
  · CGI 程序的标准输出 将作为一个交互动态网页输出到 web 浏览器。
  出于安全的考虑,最好不要手工写新的程序来分析 CGI 参数。 在 Perl (参阅 Perl, 第
  13.4 节 )、Python (参阅 Python, 第 13.5 节 ) 和 PHP 中,有即定的模块具备这些功能 。
  当需要在客户端存储数据的时候,使用 cookies。 当需要在客户端进行数据处理的时候,
  经常使用 javascript。
  更多信息,请参阅 The Common Gateway Interface、The Apache Software Foundation 和
  JavaScript。
  在浏览器地址栏里面直接输入编码的 URL http://www.google.com/search?hl=en&ie=UTF-
  8&q=CGI+tutorial,可以在 Google 搜索 “CGI tutorial”。 这也是一个查看 CGI 脚本在
  Google 服务器上执行的好方法。
  13.9 准备文档
  13.9.1 roff 排版
  传统上,roff 是主要的 Unix 文字处理系统。
  参阅 roff(7)、groff(7)、groff(1)、grotty(1)、troff(1)、groff_mdoc(7)、groff_man(7)、
  groff_ms(7)、groff_me(7)、groff_mm(7)以及 info groff。
  -me 宏提供了一个不错了说明文档。如果使用的是 groff(1.18 或更新的版本),找到
  /usr/share/doc/groff/meintro.me.gz 并执行下面的命令:
  $ zcat /usr/share/doc/groff/meintro.me.gz | \
  groff -Tascii -me - | less -R
  下面的命令将生成一个完整的纯文本文件:
  $ zcat /usr/share/doc/groff/meintro.me.gz | \
  GROFF_NO_SGR=1 groff -Tascii -me - | col -b -x > meintro.txt
  如果想打印出来,可使用 PostScript 输出:
  $ groff -Tps meintro.txt | lpr
  $ groff -Tps meintro.txt | mpage -2 | lpr
  13.9.2 SGML
  准备工作:
  # apt-get install debiandoc-sgml debiandoc-sgml-doc
  debiandoc-sgml 参考资源:
  · /usr/share/doc/debiandoc-sgml-doc
  · debiandoc-sgml(1)
  · DocBook: The Definitive Guide,作者 Walsh 和 Muellner,( O'Reilly 出 版 社 )
  (docbook-defguide 软件包)
  194
  Linux公社 www.linuxidc.com
  SGML 能管理多种格式的文档。更简单的 SGML 系统是 Debiandoc,本文档就使用到它完成的。
  只需对原始的文本文件的下列字符进行少许转换:
  ·   "<" --> <
  ·   ">" --> >
  ·   " " --> (非中断空格)
  ·   "&" --> &
  ·   "%" --> &percnt;
  ·   "(c)" --> ©
  ·   "–" --> –
  ·   "—" --> —
  设置章节为非打印注释,输入:
  <!-- State issue here ... -->
  设置章节为可控注释,输入:
  <![ %FIXME; [ State issue here ... ]]>
  在 SGML 中,仅条目的首次声明(first definition)有效。例如:
  <!entity % qref "INCLUDE"><![ %qref; [ <!entity param "Data 1"> ]]><!entity
  param "Data 2">&param;
  最终结果是“Data 1”。如果第一行使用“IGNORE”而 非“INCLUDE”,则最终结果为“Data 2”
  (第二行是一个候选声明)            。同样,重复出现的短语可分别提前在文档中定义。
  <!entity whoisthis "my">
  Hello &whoisthis; friend.
  This is &whoisthis; book.
  该定义的结果如下:
  Hello my friend.
  This is my book.
  可参阅 examples 目录中简短的 SGML 样例文件 sample.sgml。
  当 SGML 文档逐渐变大时,作为后端文本处理器使用的 TeX 偶尔会错误。参阅 TeX/LaTeX,
  第 13.9.3 节。
  13.9.3 TeX/LaTeX
  准备:
  # tasksel # select Miscellaneous --> TeX/LaTeX environment
  LaTeX 参考:
  ·   The teTeX HOWTO: The Linux-teTeX Local Guide
  ·   tex(1)
  ·   latex(1)
  ·   The TeXbook, by Donald E. Knuth, (Addison-Wesley) [66]
  ·   LaTeX - A Document Preparation System, by Leslie Lamport, (Addison-
  Wesley)
  · The LaTeX Companion, by Goossens, Mittelbach, Samarin, (Addison-Wesley)
  这是一个很强大的排字环境。许多 SGML 处理器使用 LaTeX 作为他们的后端文本处理器。
  由 lyx、lyx-xforms 和 lyx-qt 提供的 Lyx,以及由 texmacs 提供的 GNU TeXmacs 为
  LaTeX 提供了一个好的“所见及所得”的编辑环境,然而,许多人选择使用 Emacs 和 Vim 作
  为源代码编辑器。
  有许多在线资源存在:
  ·   teTeX - A Documentation Guide (tetex-doc 软件包)
  ·   A Quick Introduction to LaTeX
  ·   A Simple Guide to Latex/Lyx
  ·   Word Processing Using LaTeX
  ·   Local User Guide to teTeX/LaTeX
  当 SGML 文档不断增大后,TeX 偶尔会出错。可通过修改/etc/texmf/texmf.cnf,增加缓冲
  池的容量来解决这个问题(更好的方法是编辑/etc/texmf/texmf.d/95NonPath 然后运行
  update-texmf)。
  13.9.4 文学编程
  有文学的程序员书写包含代码的文档来代替包含文档的代码。 这种方法确保程序有一个好的文档。
  关于文学编程的更多信息,参阅 Literate Programming。
  13.9.4.1 Noweb
  准备:
  # apt-get install nowebm
  Noweb 参考:
  · Noweb --- A Simple, Extensible Tool for Literate Programming
  · noweb(1)
  这是一个类 WEB 的文学编程工具,独立于编程语言。由于提供了扩展而更简单。 [67] 当
  noweb 被调用的时候,它将程序的源代码输出到在 noweb 中提到的文件中,它还将创建一
  个用于文档排版的 TeX 文件。
  Ubuntu ifupdown 软件包是一个很好的例子。
  196
  Linux公社 www.linuxidc.com
  $ apt-get source ifupdown
  $ cd ifupdown*
  $ make ifupdown.pdf ifupdown.ps
  13.9.4.2 Doxygen
  准备:
  # apt-get install doxygen doxygen-doc doxygen-gui
  Doxygen 参考(由 doxygen 创 建 ):
  · Homepage
  · /usr/share/doc/doxygen-doc/html/index.html
  它能够为 C++、C、 Java、 IDL 和某些范围的 PHP 和 C# 程序产生 HTML、 RTF、 Unix 手
  册页、 PostScript 和 PDF(使用 LaTeX)文档。 Doxygen 与 JavaDoc (1.1)、 Qt-Doc 和
  KDOC 兼容,它有特定的设计用来与用 Troll Tech 的 Qt 工具包制作的项目兼容。 他甚至
  可以为没有文档的程序创建从属图、协作图和图形化的类分层图。输出类似于 Qt 的 文 档 。
  13.10 打包
  准备工作:
  # apt-get install debian-policy developers-reference \
  maint-guide dh-make debhelper
  # apt-get install packaging-manual # if Potato
  有关打包的参考资源:
  ·   Ubuntu 软件包管理系统, 第 2.2 节 (basics)
  ·   Debian New Maintainers' Guide (tutorial)
  ·   dh-make(1)
  ·   Debian Developer's Reference (best practice)
  ·   Debian Policy Manual (authoritative)
  ·   Packaging Manual (Potato)
  13.10.1 单个二进制文件打包
  Joey Hess 的快速和粗糙的打包法:生成一个单独的二进制包
  # mkdir -p mypkg/usr/bin mypkg/DEBIAN
  # cp binary mypkg/usr/bin
  # cat > mypkg/DEBIAN/control
  Package: mypackage
  Version: 1
  Architecture: i386
  Maintainer: Joey Hess <joeyh@debian.org>
  197
  Linux公社 www.linuxidc.com
  Description: my little package
  Don't expect much.
  ^D
  # dpkg-deb -b mypkg
  13.10.2 使用工具打包
  使用 dh_make 软件包中的 dh-make 工具创建一个基线包,接着按照 dh-make(1)中描述的方
  法打包。会用到 debian/rules 中的 debhelper。
  一个较老的方法是使用 debmake 软件包中的 deb-make。不需要 debhelper 脚本,仅需要 shell
  环境。请不要再使用这种方法。
  有关多种源码包的例子,参阅“mc”(dpkg-source -x mc_4.5.54.dsc),其中用到 Adam
  Heath( doogie@debian.org )的“sys-build.mk”以及“glibc”(dpkg-source -x
  glibc_2.2.4-1.dsc)它由后来的 Joel Klecker( espy@debian.org )所写的另一个系统打
  包。
  第 14 章 - GnuPG
  参考资源:
  · gpg(1).
  · /usr/share/doc/gnupg/README.gz
  · GNU 隐私手册位于 /usr/share/doc/gnupg-doc/GNU_Privacy_Handbook/ (安装
  gnupg-doc 软件包)
  14.1 安装 GnuPG
  # gpg --gen-key                   # 生成新的密钥
  # gpg --gen-revoke my_user_ID     # 为 my_user_ID 生成吊销密钥
  # host -l pgp.net | grep www|less # 查找 pgp keyservers
  配置文件 $HOME/.gnupg/gpg.conf(或是先前的位置 $HOME/.gnupg/options)中一个完好
  的预设 keyserver 包含:
  keyserver hkp://subkeys.pgp.net
  必须注意不能创建 2 个以上的 sub-keys,如果这样做了,pgp.net 上的 keyservers 会废
  除(corrupt)你的密钥。使用新版的 gnupg(>1.2.1-2)来处理这些废除的 subkeys。参
  阅 http://fortytwo.ch/gpg/subkeys。
  14.2 使用 GnuPG
  文件处理:
  198
  Linux公社 www.linuxidc.com
  $ gpg [options] command [args]
  $ gpg {--armor|-a} {--sign|-s} file # 对 file 签名,并保存在文本文件 file.asc 中
  $ gpg --clearsign file              # clear-sign 信息
  $ gpg --clearsign --not-dash-escaped patchfile # clear-sign patchfile
  $ gpg --verify file                 # 校验 clear-signed file
  $ gpg -o file.sig {-b|--detach-sig} file # create detached signature
  $ gpg --verify file.sig file        # 用 file.sig 校验 file
  $ gpg -o crypt_file {--recipient|-r} name {--encrypt|-e} file
  # public-key encryption intended for name
  $ gpg -o crypt_file {--symmetric|-c} file # 对称加密
  $ gpg -o file --decrypt crypt_file # 解密
  14.3 管理 GnuPG
  密钥管理:
  $ gpg --edit-key user_ID               # "help" 获得帮助,交互式
  $ gpg -o file --exports                # 将所有密钥导出到 file
  $ gpg --imports file                   # 从 file 导出所有密钥
  $ gpg --send-keys user_ID              # 将 user_ID 的密钥发送给 keyserver
  $ gpg --recv-keys user_ID              # 从 keyserver 接收 user_ID 的密钥
  $ gpg --list-keys user_ID              # 列出 user_ID 的密钥
  $ gpg --list-sigs user_ID              # 列出 user_ID 的 sig
  $ gpg --check-sigs user_ID             # 检查 user_ID 的 sig
  $ gpg --fingerprint user_ID            # 检查 user_ID 的指纹
  $ gpg --list-sigs | grep '^sig' | grep '[User id not found]' \
  | awk '{print $2}' | sort -u | xargs gpg --recv-keys # 获取未知的密钥
  # 更新所有未知 sigs.
  $ gpg --refresh-keys                   #更新本地 keyring
  Trust 代码:
  -         没指定任何 ownertrust / 还没进行计算。
  e         Trust 计算失败。
  q         没有足够的信息进行计算。
  n         该密钥不可信。
  m         最低限度的可信(Marginally trusted)。
  f         完全可信(Fully trusted)。
  u         绝对可信(Ultimately trusted)。
  下面的操作将我的 key “A8061F32” 上载到公共 keyserver hkp://subkeys.pgp.net:
  $ gpg --keyserver hkp://subkeys.pgp.net --send-keys A8061F32
  14.4 在应用程序中使用 GnuPG
  14.4.1 在 Mutt 中使用 GnuPG
  199
  Linux公社 www.linuxidc.com
  如果 GnuPG 程序速度很慢,可以将以下内容加入 ~/.muttrc 以阻止它自动启动,并使其能
  在 index 菜单下按‘S’手动启动。
  macro index S ":toggle pgp_verify_sig\n"
  set pgp_verify_sig=no
  14.4.2 在 Vim 中使用 GnuPG
  将 examples subdirectory 下的 _vimrc 文件的内容加入到 ~/.vimrc 就可以运行 GnuPG
  了。
  第 15 章 - Ubuntu 技术支持
  下列资源提供了与 Ubuntu 相关的帮助、建议和支持。在邮件列表里大呼救命之前,务必先
  好好使用这些资源自助。:)
  注意,系统中存在大量的文档,可使用 WWW 浏览器访问,或通过 dwww 或 dhelp 命令在相
  关的目录中找到它们。
  15.1 参考资料
  下列资源适用于 Ubuntu 和通用 Linux。如果它们的内容出现相互冲突,应该相信首要的
  (primary)来源而不是如本文档这样的次要来源(secondary)。
  · 安装手册(首要的)
  o   在安装和升级前阅读。
  o   网站: http://www.debian.org/releases/stable/installmanual
  o   网站: http://www.debian.org/releases/testing/installmanual(写作
  中,有时不可用)
  o   软件包: Not available in install-doc: Bug#155374
  o   文件: Debian CD under /doc/
  · 发布笔记(首要的)
  o   安装和升级前必读文档,即使你已是经验丰富。
  o   网站: http://www.debian.org/releases/stable/releasenotes
  o   网站: http://www.debian.org/releases/testing/releasenotes(写作中,
· Debian 策略手册 (首要的)
  o   Debian 的基本技术架构
  o   网站: http://www.debian.org/doc/debian-policy/
  o   软件包: debian-policy
  o   文件: /usr/share/doc/debian-policy/
  · Debian 开发者参考手册 (首要的)
  o   开发者需了解的基础知识
  o   我们中的一部分人也需要读一遍
  o   网站: http://www.debian.org/doc/manuals/developers-reference/
  o   软件包: developers-reference
  o   文件: /usr/share/doc/developers-reference/
  · Debian 新维护人员手册 (首要的)
  o   开发人员实用指南
  o   我们中的一部分需要阅读其中的打包教程
  o   网站: http://www.debian.org/doc/manuals/maint-guide/
  o   软件包: maint-guide
  o   文件: /usr/share/doc/maint-guide/
  · Debian 打包手册 (potato)
  o   potato 中的 packaging-manual 套件。(已移到 开者人员参考手册的附录
  中)
  · Unix 风格的手册页 (首要的)
  o   man package-name
  · GNU 风格的信息页 (首要的)
  o   info package-name
  · 具体每个软件包的文档 (首要的)
  o   /usr/share/doc/package-name 下可找到它们
  · LDP: Linux 文档计划 (次要的)
  o   通用 Linux HOWTOs 和 mini-HOWTOs
  o   网站: http://www.tldp.org/
  o   软件包: doc-linux-text
  o   文件: /usr/share/doc/HOWTO/
  · Linux 公报 (次要的) -- 每月一期新的内容
  o   Linux 公报
  o   网站: http://www.linuxgazette.com/
  o   软件包: lg-all or lg-latest-two
  o   文件: /usr/share/doc/lg/
  · DDP: Debian 文档计划 (次要的)
  o   Debian 特有的手册
  o   网站: http://www.debian.org/doc/
  · Debian 开发者之角 (次要的)
  o   Debian 开发者的重要信息
  o   一般使用者可以用来增长见识
  o   网站: http://www.debian.org/devel/
  · 源代码(绝对是首要的)
  o   没人会对此表示反对:-)
  o   按照 源代码, 第 2.1.15 节 的方法下载源代码
  · Internet Assigned Numbers Authority (首要的)
  o   网站: http://www.iana.org/
  o   软件包: doc-iana
  o   文件: /usr/share/doc/doc-iana/
  · Internet requests for comments (IETF 标准) (首要的)
  o   网站: http://www.ietf.org/rfc.html
  o   软件包: doc-rfc
  o   文件: /usr/share/doc/RFC/
  下列是 Unix 通用的参考资源。注意各种 Unix 系统之间存在着稍许不同。设备名称和初始
  化方式需要格外注意。
  · The UNIX Programming Environment
  o   阅读本书了解 UNIX 如何运行。
  o   作者: B. W. Kernighan and R. Pike,
  o   由 Princeton Hall Software Series 发行
  · The C Programming Language(第二版)
  o   阅读本书学习 ANSI C。
  o   作者:B. W. Kernighan and D. M. Ritchie
  o   由 Princeton Hall Software Series 发行
  · UNIX Power Tools
  o   阅读本书学习 Unix 使用技巧。
  o   作者: Jerry Peek, Tim O'Reilly and Mike Loukides
  o   由 O'Reilly and Associates 发行
  · Essential System Administration(第二版)
  o   阅读本书学习如何对各种风格的 Unix 进行系统管理。
  o   作者: Aeleen Frisch
  o   由 O'Reilly and Associates 发行
  · Linux: Rute User's Tutorial and Exposition
  o   一本很好的管理 GNU/Linux 系统的精装版在线书籍
  o   作者:Paul Sheer
  o   由 Prentice Hall 出版
  o   软件包:rutebook (from non-free)
  o   文件:/usr/share/doc/rutebook/
  · Bell Labs: Computing Sciences Research
  o   有关 Unix 历史的翔实文献
  o   主要文献:http://cm.bell-labs.com/cm/cs/
  o   技术报告精选: http://cm.bell-labs.com/cm/cs/cstr.html
  o   一些论文: http://cm.bell-labs.com/cm/cs/papers.html
  203
  Linux公社 www.linuxidc.com
  · Linux 在线通用技术支持资料
  o   Debian Planet
  o   debianHELP
  o   Linux.com
  o   The Linux Home Page at Linux Online
  o   Red Hat (commercial Linux vender) (RPM, Sys-V init)
  o   SuSE, Inc. (commercial Linux vender) (RPM, Sys-V init)
  o   Slackware (TGZ, BSD-style init)
  · Unix 在线通用向导及资料
  o   The UNIX System by The Open Group
  o   A UNIX Introductory Course from Ohio State University
  o   UNIXhelp from The University of Edinburgh
  o   Unix / Programming Information
  o   comp.unix.questions FAQ
  o   comp.unix.user-friendly FAQ
  o   FreeBSD Documentation
  o   The FreeBSD Handbook
  o   UNIX GUIDE
  o   The Unix Heritage Society
  · 自由软件项目主页
  o   GNU 计划
  o   Linux 文档计划
  o   Linux 内核归档
  o   XFree86 项目,公司
  o   GNOME
  o   K 桌面环境
  o   Red Hat 公司的 GNU 软件
  o   Mozilla
  o   FreeBSD
  o   OpenBSD
  o   NetBSD
  15.2 查词意
  Debian 中使用了大量术语和缩写,下面的命令将会解决大部分问题(要求安装 dict 软件
  包和其它相关软件包)
  $ dict put-a-weird-word-here
  15.3 查找流行的 Debian 软件包
  Debian 中有许多软件包,有时很难决定该装哪一个。参阅 Debian 软件包流行度调查结果
  可了解别人都在用什么软件。亦可安装 popularity-contest 软件包参加投票。
  15.4 Debian bug 跟踪系统
  204
  Linux公社 www.linuxidc.com
  Debian 发行版有一个 bug 跟踪系统 (BTS),它将来自用户和开发人员的错误报告的详细内
  容进行归档,每个错误都有一个编号,错误报告将一直存在于数据库中,直到获得错误已更
  正的标记。
  在发送错误报告之前请先检查一下别人是否以提交了相同的错误报告。BTS 的网站 或 其它
  地方均可找到当前未更正错误列表。参阅 检测程序错误寻求帮助, 第 6.3.1 节。
  许多严重错误的报告标记为 FTBFS。意思是“Fails To Build From Source”。
  http://www.debian.org/Bugs/Reporting 中描述了 bug 报告方法。
  15.5 邮件列表
  阅读最新的“debian-devel-announce”(英文、只读、低流量)与 Debian 保持同步。
  邮件列表“debian-user”(英文、开放、高流量)和“debian-user-language”(需向其它
  语言的用户)中有 Debian 用户最兴趣的内容。
  想了解这些邮件列表的详细信息以及如何订阅,参阅 http://lists.debian.org/。发问前
  请先搜索答案并注意遵守列表有关礼仪和规则。
  如果你不希望在回复至邮件列表时收到复本的话,你应该用 Mail-Followup-To: 作为邮件
  的标头,这是很有效的。这是邮件列表中非官方的习惯,在
  http://cr.yp.to/proto/replyto.html 有些说明。
  15.6 Internet Relay Chat (IRC)
  IRC (Internet Relay Chat) 可让你与世界各地的人进行实时聊天。在 freenode 上可找到
  与 Debian 相关的 IRC 频道。 连接它们需要一个 IRC 客户端,最流行的客户端有 XChat、
  BitchX、ircII、irssi、epic4 以及 KSirc,任何一个都能在 Debian 软件包中找到。安装
  好客户端后,需要告诉程序连接到服务器,对于绝大多数客户端,可输入:
  /server irc.debian.org
  一但连接上服务器,可输入下面的命令加入 #debian 频道
  /join #debian
  可输入下面的命令离开 #debian 频道
  /part #debian
  你可输入下面的命令退出 irc 客户端
  /quit
  要给 foo 发送一条内容为 "Hello Mr. Foo"的私人消息,请输入
  /msg foo Hello Mr. Foo
  要注意的是,你所输入的任何信息,只要不是以 / 打头,就会被当作是聊天信息而发送至
  频道上。
  注意:类似 XChat 的客户端它们用于连接服务器/频道的图形用户界面会稍有不同。
  15.7 搜索引擎
  许多搜索引擎提供有关 Debian 的文档:
  ·   Debian WWW 搜索站点.
  ·   Google: 将“site:debian.org”包含于搜索字段。
  ·   Google Groups: 新闻组搜索引擎。将“group:linux.debian.*”包含于搜索字段。
  ·   AltaVista
  例如,搜索字符串“cgi-perl”会得到更多有关该软件包的详细说明而非其 control 文件
  中的简要描述。参阅 检测程序错误寻求帮助, 第 6.3.1 节 获得相关建议。
  15.8 网站
  下列是我收集的一些特别专题讨论的零散网页地址。
  ·   IBM developerWorks: Linux
  ·   Adrian Bunk's packages to run kernel 2.4.x on potato
  ·   Linux on Laptops
  ·   Xterm FAQ
  ·   EXT3 File System mini-HOWTO
  ·   Large File Support in Linux
  ·   Window Managers for X
  ·   Linux USB Project
  ·   SuSE pages for CJK
  ·   LNX-BBC (Business-card-sized boot CD project)
  ·   Linux info by Karsten Self (partitioning, backup, browsers...)
  ·   Backup info HOWTO by Alvin Oga
  ·   Security info HOWTO by Alvin Oga
  ·   Various UNOFFICIAL sources for APT
  ·   Laptop Ethernet Configuration
  附录 A - 附录
  A.1 作者
  Debian 参考手册由 Osamu Aoki osamu#at#debian.org 发起,最初是一部个人的系统安装
  备忘录,而最终称之为“Quick Reference ...”。许多内容来自于“debian-user”邮件列
  表中的存档,同时也参考了《Debian Installation Manual》和《Debian Release Notes》。
  由 Debian Documentation Project(DDP) 的积极参与者、也是目前《The Debian FAQ》
  的主要维护者的 Josip Rodin 提议,将本文档更名为“Debian 参考手册”并 将《 The Debian
  FAQ》中一些类似参考形式的章节内容合并过来。后来摘录出一部分内容形成了《Debian 快
  速参考手册》。
  因为我不是个专家,所以不敢说对 Debian 或 Linux 了如指掌。文中有关系统安全的考虑
* config
** /etc/inittab
Example 20.1 Fedora Core 1 default /etc/inittab file
#
# inittab          This file describes how the INIT process should set up
#                  the system in a certain runlevel.
#
# Author:          Miquel van Smoorenburg, miquels@drinkel.nl.mugnet.org>
#                  Modified for RHS Linux by Marc Ewing and Donnie Barnes
#
# Default runlevel. The runlevels used by RHS are:
#    0 - halt (Do NOT set initdefault to this)
#    1 - Single user mode
#    2 - Multiuser, without NFS
#         (The same as 3, if you do not have networking)
#    3 - Full multiuser mode
#    4 - unused
#    5 - X11
#    6 - reboot (Do NOT set initdefault to this)
#
id:5:initdefault:
# System initialization.
si::sysinit:/etc/rc.d/rc.sysinit
l0:0:wait:/etc/rc.d/rc       0
l1:1:wait:/etc/rc.d/rc       1
l2:2:wait:/etc/rc.d/rc       2
l3:3:wait:/etc/rc.d/rc       3
l4:4:wait:/etc/rc.d/rc       4
l5:5:wait:/etc/rc.d/rc       5
l6:6:wait:/etc/rc.d/rc       6
# Trap CTRL-ALT-DELETE
ca::ctrlaltdel:/sbin/shutdown -t3 -r now
# When our UPS tells us power has failed, assume we have a few minutes
# of power left. Schedule a shutdown for 2 minutes from now.
# This does, of course, assume you have powered installed and your
# UPS connected and working correctly.
pf::powerfail:/sbin/shutdown -f -h +2 "Power Failure; System Shutting Down"
# If power was restored before the shutdown kicked in, cancel it.
pr:12345:powerokwait:/sbin/shutdown -c "Power Restored; Shutdown Cancelled"
454                                             Chapter 20   Open Source Web Application Servers
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
# Run xdm in runlevel 5
x:5:respawn:/etc/X11/prefdm -nodaemon
 
