#+TITLE: emacs 简介
#+DESCRIPTION: emacs 编辑器 
#+TAGS: emacs
#+CATEGORIES: 软件使用
#+DATE: <2019-06-04 22:30:51>

* emacs 
** 简介 
   最初由大神  Richard Stallman 于 1975 年在 MIT 协同盖伊·史提尔二世共同完成的一款 ~文字修改软件~ 。
   
   #+begin_verse
   他是一款可扩展的编辑器,因为他本身又是一个 ~elisp~ 程序语言,我们在写文字的时候，可以写写 ~elisp~ 脚本来增加一点快捷操作。
   他除了底层是 ~C~ 写的,其他的扩展都是 ~elisp~ 写的,扩展有很多，可以找来用用。
   键盘上的 ~Alt~ 键，在 emacs 中 称 ~Meta~ 键，简写 @@html:<kbd>@@ M @@html:</kbd>@@  (由于古老的历史) 
   初学者帮助，（help-with-tutorial）,快捷键为  @@html:<kbd>@@ C-h t @@html:</kbd>@@ 
   #+end_verse
   
   #+begin_quote
   这个编辑器的基本用法是你输入文字，看到哪些要更改的就执行要如何更改的命令，就像 ~ps~ 给选区加 ~滤镜~ 一样 , 没有那个滤镜就要自己写或者找找了。
   #+end_quote
   
#+HTML: <!-- more -->
** 选项
   | +<行号>          | 将光标移动到制定行号的行；                              |
   | q                | 不加载初始化文件                                        |
   | u<用户>          | 加载指定用户的初始化文件；                              |
   | f<函数>          | 执行指定 lisp（广泛应用于人工智能领域的编程语言）函数； |
   | l<lisp 代码文件> | 加载指定的 lisp 代码文件                                |
   | batch            | 以批处理模式运行 emacs 编辑器                           |
   | debug-init       | 程序启动时，加载调试器                                  |
   | script=file      | 执行文件                                                |
   | insert=file      | 插入文件                                                |
** 屏幕结构
   从上往下
      #+begin_verse
      - 菜单 (顶部)
      - 工具栏(顶部)
      - 窗口 (中部) [ 多个 ]
        - 滚动条
        - 模式行
      - echo area (底部)
      #+end_verse
      
** 基本编辑命令
   都可以用@@html:<kbd>@@ <tab> @@html:</kbd>@@ 补全
*** 插入文本
    可见字符( 键盘上有的字符 )可以直接输入( 用输入法 )。(~self-insert~)

    #+begin_verse
    不可见, 用 ~C-q~ ( ~quoted-insert~ ) 命令
    键盘控制键 : 如  @@html:<kbd>@@ C-q  DEL @@html:</kbd>@@ , @@html:<kbd>@@  C-q RET @@html:</kbd>@@ 
    八进制数字 : @@html:<kbd>@@ C-q  1 0 1 @@html:</kbd>@@ 插入 ~A~ 
    #+end_verse
    
    还有，就是用 ~insert-char~ 命令

*** 移动光标：将光标移动到您想要更改某些内容的位置
    #+begin_verse
    后一个字：forward-char
    前一个字：backward-char
    下一行：next-line
    上一行：previous-line
    行首： move-beginning-of-line
    行尾： move-end-of-line
    后一个词组: forward-word
    。。。
    #+end_verse

*** 删除：删除和删除文本。
    #+begin_verse
    删除光标前面的字    delete-forward-char
    删除光标后面的字 delete-char
    把光标那行后面都删掉 kill-line
    删掉光标后面词组 kill-word
    ....
    #+end_verse

*** 撤消与恢复
    #+begin_verse
    撤消   undo
    恢复(取消撤销) undo-tree-redo
    恢复整个 buffer revert-buffer
    #+end_verse

*** 文件：访问，创建和保存文件。
    访问 find-file
    保存 save-buffer
*** 帮助：询问角色的作用。
    #+begin_verse
    不会的键  describe-key
    不会的命令 describe-function
    不会的变量 describe-variable
    #+end_verse

*** 长行的显示
    长行显示截断开关 : toggle-truncate-lines 
*** 长行截断 (一段文字显示在一行了)
    自动填充: 在插入到一定长度时自动给你换行。 ~auto-fill-mode~
    截断当前(光标处)长行: ~fill-paragraph~ 
    把选中的区域 (region) 截断 ~fill-region-as-paragraph~
    设置行的长度： ~set-fill-column~

    填充前缀: 用前缀来填充截断的长行
    设置填充前缀:   ~set-fill-prefix~
    使用当前填充前缀填充长行: ~fill-paragraph~  , 插入时也会填充前缀哦。 (就是上面的截断命令)
    
*** 光标信息
    哪一行 what-line    
    模式行开关: 
       - 行号  line-number-mode
       - 列号  column-number-mode
         
     #+begin_verse
     区域信息(region)  count-words-region
     缓冲区信息  count-words
     字符信息  what-cursor-position
     高亮行 hl-line-mode
     缓冲区大小 size-indication-mode
     #+end_verse
     
     : 用原生的哦 ~emacs -q ~ ，我这装了插件有些改了不起效果
*** 数字参数
    有些命令要执行多次，可以加一个数字参数 
   @@html:<kbd>@@ M @@html:</kbd>@@ 键加一个数字 N 就能执行 N 次命令
*** 输入法
    M-x set-input-method RET TeX will allow you to write e.g. \beta to get β,
    \sum or \Sigma to get Σ etc.

    It can be toggled on and off with toggle-input-method, bound to C-\ and C-<.

** 文本操作命令
*** Mark (标记) 选中一段文本
    图形窗口下直接用鼠标选中就可以 
    #+begin_verse
    命令行下包括以下步骤
    开始标记 ~set-mark-command~
    然后执行光标移动命令，拉大选区，就可以了

    直接标记
    标记词 mark-word
    标记段 mark-paragraph  。。。
    
    交换标记开始点 ~exchange-point-and-mark~ , 可以更改选区方向
   
   #+end_verse
*** kill 和粘贴 
    用 ~kill~ 命令 删除的文本一般都保存在 ~kill-ring~ 这个地方，
    不保存在 ~kill-ring~   的命令叫 ~delete~ 命令，通常删除字，词这些删的少的。 
    
    kill 行： kill-line
    kill 选区 ~kill-region~
    复制选区 ~kill-ring-save~ ,不删，加到  ~kill-ring~ 
 
    粘贴到光标： ~yank~ ,在 ~kill-ring~ 最上面的，就是你最后一次执行 ~kill~ 的内容。
    弹出早些的 ~kill~ 的内容 : ~yank-pop~ ,多次执行就遍历 ~kill-ring~ 中的内容
    : 如果要执行 ~yank-pop~ , 上一次命令 必须是 ~yank~ 命令哦

*** 矩形区域 rectangles
    对表格很有用     

    矩形标记: rectangle-mark-mode

*** 暂存器 
    保存文本，矩形，位置和其他内容供以后使用
**** 访问寄存器内容 ~view-register~
**** 位置寄存器
     记录位置 ~point-to-register~
     跳转到位置 ~jump-to-register~

**** text registers
     拷贝到寄存器 ~copy-to-register~
     弹出寄存器内容 ~insert-register~
     内容追加 ~append-to-register~
**** rectangle registers
     copy-rectangle-to-register
     insert-register
     
**** number registers
     number-to-register
*** 搜索和替换 
    向后搜： ~isearch-forward~
    向前搜： ~isearch-backward~
    替换： ~replace-string~
*** 大小转化 [ upcase, lowcase ]
*** 键盘宏  记录键盘序列
*** 文件处理
**** 文件目录
     显示目录列表  ~list-directory~
     创建目录 ~make-directory~
     删除目录 ~delete-directory~
*** hexl  mode
    插入 16 进制     ~hexl-insert-hex-char~

** 编码 
   一般能正常的理解编码，当乱码的时候，查看下文字的编码信息 ~what-cursor-position~ 
   然后在网上查查那个数字是什么汉字 ， https://www.qqxiuzi.cn/bianma/zifuji.php ,可能会失效，网上搜个。
  
   1. 命令行编码转换用 ~iconv~ ,如  
      iconv -f 原编码 -t 转换后的编码 inputfile -o outputfile
      #+begin_src js
        iconv -f gb2312 -t utf-8 file > filenew
      #+end_src
   2. emacs 手动设置编码格式 ~set-buffer-file-coding-system~  

** 服务 (把这编辑器作为一个服务程序)
- 开启服务
  1. 在 emacs 中 server-start, 或放在 init file 中,
  2.用 --daemon 作为启动 emacs 的参数
- 设置客户端
  EDITOR=emacsclient -c
** 扩展
   #+begin_verse
  两步 1 下载，2 使用  
  有些使用前要配置下，看扩展的帮助
  #+end_verse
  
*** 列出扩展 list-packages
*** 重新安装包 package-reinstall
*** 加载扩展
    require <sysbol name>
    
    load load-path
    
    autoload (调用时加载)
    
    (load 'auto-complete-autoloads)
    包管理器 elpa(Emacs package system)
*** 字节编译 byte-recompile-directory
** 排错
   使用函数 debug-on-error,就会捕捉错误，重新执行下错误内容就捕捉到了

** 调试
   使用 GUD (Grand Unified Debugger) 提供统一接口

*** 开启 GUD 
**** gdb (开启一个多界面的调试器,IDE-like) 
**** gud-gdb 
**** perldb
**** jdb
**** pdb
**** guiler (Scheme)
**** dbx (DBX)
**** xdb (XDB)
**** sdb (SDB)
*** gdb
*** lisp debugger

