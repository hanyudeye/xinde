** erc
第一步：进入erc
M-x erc
随便输入一个用户名，密码无所谓。

第二步：进入房间（channel）
当连接上IRC服务器后，就可以使用"/join"命令加入感兴趣的房间聊天。

例如：
/join ubuntu-cn
/join fedora-cn
表示你加入了这两个房间，

第三步：聊天
上irc就是聊天的，不然干什么？？
群聊
直接输入你要发送的信息即可；
如果你要让大家都看到，同时还想让某人注意到你的信息，你可一这样：
chen:这是测试信息


私聊
私聊可以不打扰大家，算是一种礼貌吧。
/msg <你想要聊天的人> 信息
这样就可以和你想要聊天的人说话了。

基本的IRC命令
命令列表

/msg nickserv help	注冊 nickname
/nick 名字		改名字
/names [频道]		查看当前[频道]所有用户
/whois 名字		常看某人資料
/whoami			自己
/who ip			常看某IP登录的所有用戶
/Who channel		显示此频道的人
/Who *			显示参加当前频道的人
/join #房間名		加入這個房間，如果房間不存在，服務器可能會創建這個房間
/part #房間名 原因	離開房間，并留下原因
/quit 退出的原因	退出服務器，并留下原因
/away 原因		暫時離開，并留下原因
/invite 昵稱 #房間名	邀請某人到指定房間
/topic #房間名' 房間主題	如果你是房間主持人，可以改變房間的主題

/me 您要作的動作		向当前聊天室中发送一个动作 (动作使用第三人称陈述，例如 /me jumps)

/msg 昵稱(或#房間) 有要說的話	向某人發信息
/query 昵稱 要說的話	私聊
/notice 昵稱(或#房間名) 要說的話	
/list			查看服務器上所有房間及主題
/list #ubuntu-cn	列出這個房間
/list -MIN a -MAX b	查看人數大于a小于b的房間
/list * abc *	 	所有行abc字符串的房間
/flush	   		终止当前命令的输出操作
/help			显示所有IRC命令
/join			        加入/建立聊天室
/leave channel		离开某一频道
/mode +(-)i		锁住聊天室
/mode +(-)o		设定管理员权限
/knock			要求进入私人聊天室
/invite			邀请用户进入私人聊天室
/privmsg		        悄悄话
/ignore			忽略
/topic			更换聊天室主题
/kick			        把用户踢出聊天室
/quit			        退出聊天室

常用命令详解（附录）
所有的IRC命令都是由“/”引导。在不引起混淆的情况下，IRC命令允许简写。例如，/join 命令可以简写为/j，/jo或者/joi。

/nick
更改昵称的基本方法是："/n(ick) 新昵称"
您的昵称可以包含英文字母，数字，汉字及下划线等。但是，昵称不能超过50个 （每个字符和汉字都算一个字），而且不能包含$，+，！和空格。


/join
/join命令的格式是："/j(oin) 聊天室名"
如果聊天室已经存在，您就进入该聊天室。此时，/join 命令等价于聊天室列表 工具按钮中的“进入”。
如果聊天室不存在，您就建立了一个新的聊天室并进入。此时，/join 命令等价 于工具按钮中的“建聊天室”。
聊天室的名字可以包含英文字母，数字，汉字及下划线等。但是，不能超过50个 字（每个字符和汉字都算一个字），而且不能包含$，+，！和空格。



/mode

/mode +(-)i
/mode +(-)i 命令可以用来锁住（解锁）用户自建的聊天室（私人聊天室）。其 命令格式是: "/m(ode) +i 或 /m(ode) -i"
只有用户自建的聊天室才能加锁。
未经管理员邀请，其他用户不能进入私人聊天室。
/mode +(-)o
/mode +(-)o 命令可以让聊天室管理员赋予或者剥夺其他用户的管理员身份。其 命令格式是："/m(ode) +o 昵称或 /m(ode) -o 昵称"
只有聊天室管理员才能使用这个命令。

/knock
/knock 命令可以让您询问私人聊天室管理员是否可以进入该私人聊天室。其命令 格式是："/k(nock) 房间名 [消息]"

/invite
/invite 命令可以让聊天室管理员邀请其他用户进入私人聊天室。其命令格式 是: "/i(nvite) 昵称"
只有私人聊天室的管理员才能使用这个命令。


    Elimage: CLI Image Pastebin

SYNOPSIS
    curl -F 'name=@/path/to/image' http://img.vim-cn.com/
    or upload via your browser: 
DESCRIPTION
    Paste image files with command line. You can give -F more times to paste
    more images.

EXAMPLES
    $ curl -F 'name=@screenshot.png' http://img.vim-cn.com/
    http://img.vim-cn.com/97/2d8490849c8fab885218b478cc715ab0f3f4a9

URLS
    https://cfp.vim-cn.com/
        A CLI code pastebin

    https://github.com/Vim-cn/elimage

Location: http://blog.sina.com.cn/s/blog_658d7d5b0100mqar.html                                                                        
新浪博客
[loading]加载中…

加载中...

http://blog.sina.com.cn/yakun2010 [订阅][手机订阅]
首页博文目录图片关于我

个人资料
心灵在这里成长
# 心灵在这里成长
#微博

加好友发纸条

写留言加关注

  * 博客等级：[sg_trans][sg_trans]
  * 博客积分：0

  * 博客访问：5,981
  * 关注人气：2
  * 获赠金笔：0支
  * 赠出金笔：0支
  * 荣誉徽章：

相关博文

  * 
  * 

更多>>
推荐博文

  * 需要给美国鹰派上堂常识课

  * 记者暗访中学，警察急什么？

  * 第1418篇•金胖胖

  * 为何三分之一中产阶级选择让下一

  * 泰国“吃人肉”，掩盖哪些“真相

  * 年终策划： 2016

  * 骑电动车就该躱开豪车的同学吗?

  * 每年210万儿童死于装修污染？

  * 厉害了！杭州一所学校办校庆，来

  * 关注：似乎有些神秘的群体——职

查看更多>>
谁看过这篇博文
[loading]加载中…
正文字体大小：大中小

Emacs 配置文件翻译

(2010-10-10 22:47:36)
#转载▼

标签：  
        
杂谈    

索引

    * 基础知识
          o 缓冲区
          o 信息栏
          o 按键描述
          o 回显区
          o 内部命令
          o Emacs命令行
          o Emacs终端
          o Emacs文件管理器
          o 区块选择
          o 中止执行
          o 基本配置
    * 帮助系统
    * 基本操作
    * 数字参数
    * 基础编辑
          o 浏览
          o 编辑
          o 区块编辑
          o 搜索和替换
          o 其它
    * 窗格和缓冲区管理
    * 寄存器管理
    * 书签管理
    * Shell模式
    * 宏
          o 定义与运行
          o 宏轮环
          o 命名与保存
          o 宏编辑器
          o 询问执行
          o 计数器
    * 文件管理
          o 使用帮助
          o 查看
          o 标记
    * 扩展管理
    * Guns
    * web
    * ftp

基础知识

    Emacs是一个架构在编辑器上的集成环境，除了最基本的编辑功能，还可以完成文件管理、终端模拟、浏览网页、收发邮件、编译程序等工作。

    Emacs使用Elisp语言进行配置和扩展，它本身也可以作为Elisp解释器使用。

    Emacs的界面主要由三部分构成：信息栏、回显区(echo)、缓冲区(buffer)

缓冲区

    缓冲区(buffer) 类似于常规编辑器的文字编辑区。Emacs并不直接对文件进行修改，而是读取文件的内容并显示在缓冲区中，在收到保存的指令后
才将修改写入文件。

    缓冲区名称通常为它所读取文件的文件名。

信息栏

    在缓冲区之下为状态栏，类似于这种形式

    -U:**  emacs_tutor.rst   (24,0)   (reST)----7:55下午---------------

    显示当前缓冲区的状态，例如是否已保存、缓冲区名称、光标位置、主模式名称……

    标题栏也可以显示一部分信息，并且可以自由定义。

按键描述

    Emacs的功能键，通常为组合键。例如

        Emacs    实际按键    功能
        C-f    Ctrl+f    光标前进一格
        C-b    Ctrl+b    光标后退一格
        C-d    Ctrl+d    删除一个字符
        C-a    Ctrl+a    回到行首

    Emacs对按键的描述方式中， - 之前的一个字符为修饰键，表示按住该键，再按 - 后面的键。

    例如： C-a 表示按住 Ctrl 再按 a 键。 Emacs对其它一些特殊按键的描述

        *

          C-

              按住Ctrl键

        *

          M-

              按住Meta键。在PC上，Meta键通常对应 Alt 键。也可以按一次 ESC 键(Windows下对应 WIN 键)

        *

          C-M-

              同时按住Ctrl键和Meta键

        *

          S-

              Shift键

        *

          s-

              Linux下对应 WIN* 键

        *

          RET

              回车键

        *

          TAB

              Tab键

        *

          ESC

              Esc键

        *

          SPC

              空格键

        *

          DEL Backspace

              退格键

        *

          Delete

              删除键

    在后面的部分中，将统一使用Emacs对按键的描述方式。

    Emacs十分强大，上面的组合键，远不能涵盖Emacs的功能于万一。除基本的编辑功能键外，其它功能多使用按键序列：连续的按下多组快捷键

    例如： C-x C-c 表示先按下 C-x ，再按下 C-c 。也就是 Ctrl+x 后，再 Ctrl+c (退出Emacs)

    接下来 C-h t ，进入《Emacs 快捷指南》

回显区

    C-x h （先按Ctrl+x 再按h)后，您会发现状态栏和编辑器底部之间的区域出现 Mark set 字样。同时，整个缓冲区的内容都被选中。

    它是一个迷你缓冲区(minibuffer)，叫作回显区(echo area)，提示您正在进行的操作，比如 Mark set(设定标记)

    如果一个按键序列没有完成，却停止了输入。大约两秒后，回显区会显示已输入部分，以免您忘记。千万不要以为是Emacs反应迟钝：）

内部命令

    C-h k 后，回显区提示

    Describe key (or click or menu item):

    接着 C-x h ，您会发现，缓冲区被水平分割为两个。另一个名为 *help* 缓冲区中显示的内容为

    C-x h runs the command mark-whole-buffer
       which is an interactive compiled Lisp function in `simple.el'.
    It is bound to C-x h, <menu-bar> <edit> <mark-whole-buffer>.
    (mark-whole-buffer)

    Put point at beginning and mark at end of buffer.
    You probably should not use this function in Lisp programs;
    it is usually a mistake for a Lisp function to use any subroutine
    that uses or sets the mark.

    [back]

    第一行说明了 C-x h 运行的命令为 mark-whole-buffer
    第二行说明了该命令由 simple.el 这个扩展提供，绑定到 C-x h 、菜单栏-编辑-标记全部缓冲区、和命令 mark-whole-buffer
    第三行介绍了这个命令的行为：在文档末尾设置一个标记，并把光标点移动到文档起始。

    Note

    光标点假定光标为插入式（竖线），位置在覆盖式光标(方块)的左侧。

    事实上，Emacs中的相关判定以光标点为准！方块形光标只是为了减少视觉疲劳：）

    Emacs使用命令进行处理，快捷键只是一种发送命令的方法！

    一般情况下，我们用不到这么详细的说明，而且英文看起来也比较吃力。您可以使用 C-h c 以简洁模式查看说明。只在回显区显示键位和它执行的
命令：

    C-x h runs the command mark-whole-buffer

    通常这就足够了。

    如果您知道一个命令，而不知道它绑定到什么键上，您可以使用 C-h w ，也就是命令 Where-is

Emacs命令行

    由于Emacs太过强大，内部命令恒河沙数，根本不可能有同样数量的快捷键位来绑定它们！

    对于没有绑定的命令，可以使用命令行执行！

    M-x (Alt+x) 开启命令行，回显区显示为 M-x ，然后输入 newline

    这个命令默认绑定在回车键，所以它和回车键的作用一样为换行

    C-h w newline 结果是： newline is on RET

    Tip

    命令行中，可以使用 TAB 补全，使用 M-p 上翻， M-n 下翻

    在后面的部分中，统一使用 M-x command 来表示内部命令 command ；内部命令以 (command) 的形式写到配置文件中，当然配置文件稍稍复杂一点
，很少直接这么写：）

Emacs终端

    M-x shell 激活Emacs终端。可以在Emacs终端中使用外部命令。

    需要注意的是，Emacs终端是哑终端，一些类型的输出不能够正确显示。

    在Emacs终端中使用 exit 命令退出。

    M-! (Alt+Shift+1)临时执行一条外部命令，并输出在名为 *Shell Command Output* 的缓冲区中 (M-x shell-command)

    C-u M-! (Ctrl+u Alt+Shift+1)临时执行一条外部命令，并输出到光标位置。

Emacs文件管理器

    C-x d 进入Dired列表模式

    C-x C-d 获取文件列表（简洁）

    C-x C-f 打开文件，输入路径为打开目录

    详细介绍见文件管理

区块选择

    很多时候，我们需要选中缓冲区中的某一部分内容。和大多数程序一样，您可以在被选择区块的起始点按下左键，移动鼠标，在结束点释放左键，
这部分区块便被选中。

    这种方式效率并不高，而且一些场合并没有鼠标支持，例如控制台或者远程登录。

    事实上，Emacs进行区块选择的方法，是设置一个标记，标记到光标点之间的部分将被选中。

    标记的位置为 M-x set-mark-command 时，光标点所处的位置。

    M-x set-mark-command 是设置标记的内部命令，默认绑定在 C-SPC 键上。

    如果使用输入法，这个键位多半是切换输入法的快捷键。键盘指令会先被输入法拦截下来，而无法发送到Emacs。

    当然也可以使用 M-@ 来设定标记。不过 M-@ 原绑定为 M-x mark-word ，虽然差不太多，但有时并不好用；况且对于一个常用的命令来讲， M-@
键位的难度太高了……

    Emacs的键位中，几乎没有默认绑定在 WIN 键上的命令，不妨利用一下：）

    在Emacs的用户配置文件 ~/.emacs 中添加如下内容：

    ;; WIN+Space 设置标记
    (global-set-key (kbd "s-SPC") 'set-mark-command)

    重启Emacs，或者在 ~/.emacs 文件的缓冲区中执行命令 M-x eval-buffer ，便可以使配置文件立即生效：）

    在某些类型的终端中，WIN键不起作用，建议使用命令。或者绑定到 C-z (Ctrl+z)

    ;; （在注释里说明原命令和绑定，是一个良好的习惯）
    ;; C-z 设置标记 ;;  C-z:M-x iconify-or-deiconify-frame:C-z,C-x C-z
    (global-set-key (kbd "C-z") 'set-mark-command)

    C-z ，原为 M-x iconify-or-deiconify-frame 键为: C-z, C-x C-z 。绑定后，仍可以使用 C-x C-z 挂起Emacs。

中止执行

    如果想放弃一个命令，可以使用 C-g (M-x keyboard-quit)打断。

    当然了，建议您使用快捷键 C-g ，因为这时 M-x 通常是没有效果的

    ESC ESC ESC (M-x keyboard-escape-quit)可以从一些交互命令中退出。

    例如从询问替换 M-x query-replace 中退出。

    如果 C-g 不能搞定，这时多半需要连按三次 ESC

基本配置

    您已经知道了，Emacs的配置文件为 ~/.emacs 。配置文件中，以 ; 起始到行末的部分为注释。

    让我们些简单配置一下：

    ;;========================================
    ;; 外观设置
    ;;========================================

    ;;禁用工具栏
    (tool-bar-mode nil)

    ;;禁用菜单栏，F10 开启关闭菜单
    (menu-bar-mode nil)

    ;;禁用滚动栏，用鼠标滚轮代替
    ;;(scroll-bar-mode nil)

    ;;禁用启动画面
    (setq inhibit-startup-message t)

    ;;========================================
    ;; 键绑定
    ;;========================================

    ;; C-z 设置标记 ;;  C-z:M-x iconify-or-deiconify-frame:C-z,C-x C-z
    (global-set-key (kbd "C-z") 'set-mark-command)

    ;;F10显示/隐藏菜单栏 ;; M-x menu-bar-open
    ;;(global-set-key (kbd "F10") 'menu-bar-mode)

    ;;WIN+s进入Shell ;; M-x shell
    (global-set-key (kbd "s-s") 'shell)
    ;;(define-key ctl-x-map "\M-s" 'shell)

    ;;WIN+space 设置标记
    (global-set-key (kbd "s-SPC") 'set-mark-command)

    ;;========================================
    ;; 缓冲区
    ;;========================================

    ;;设定行距
    (setq default-line-spacing 4)

    ;;页宽
    (setq default-fill-column 60)

    ;;缺省模式 text-mode
    (setq default-major-mode 'text-mode)

    ;;设置删除纪录
    (setq kill-ring-max 200)

    ;;以空行结束
    (setq require-final-newline t)

    ;;语法加亮
    (global-font-lock-mode t)

    ;;高亮显示区域选择
    (transient-mark-mode t)

    ;;页面平滑滚动， scroll-margin 3 靠近屏幕边沿3行时开始滚动，可以很好的看到上下文。
    (setq scroll-margin 3
    scroll-conservatively 10000)

    ;;高亮显示成对括号，但不来回弹跳
    (show-paren-mode t)
    (setq show-paren-style 'parentheses)

    ;;鼠标指针规避光标
    (mouse-avoidance-mode 'animate)

    ;;粘贴于光标处，而不是鼠标指针处
    (setq mouse-yank-at-point t)

    ;;========================================
    ;; 回显区
    ;;========================================

    ;;闪屏报警
    (setq visible-bell t)

    ;;使用 y or n 提问
    (fset 'yes-or-no-p 'y-or-n-p)

    ;;锁定行高
    (setq resize-mini-windows nil)

    ;;递归minibuffer
    (setq enable-recursive-minibuffers t)

    ;;========================================
    ;; 状态栏
    ;;========================================

    ;;显示时间
    (display-time)
    ;;时间格式
    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
    (setq display-time-interval 10)

    ;;显示列号
    (setq column-number-mode t)

    ;;标题栏显示 %f 缓冲区完整路径 %p 页面百分数 %l 行号
    (setq frame-title-format "%f")

    ;;========================================
    ;; 编辑器设定
    ;;========================================

    ;;不生成临时文件
    ;;(setq-default make-backup-files nil)

    ;;只渲染当前屏幕语法高亮，加快显示速度
    (setq lazy-lock-defer-on-scrolling t)
    (setq font-lock-support-mode 'lazy-lock-mode)
    (setq font-lock-maximum-decoration t)

    ;;将错误信息显示在回显区
    (condition-case err
        (progn
        (require 'xxx) )
      (error
       (message "Can't load xxx-mode %s" (cdr err))))

    ;;使用X剪贴板
    (setq x-select-enable-clipboard t)
    ;;设定剪贴板内容格式    适应Firefox
    (set-clipboard-coding-system 'ctext)

帮助系统

    使用Emacs的过程中，您随时可以获取帮助

    M-x help-with-tutorial
        C-h t Emacs快捷指南
    M-x info-emacs-manual
        C-h r Emacs使用手册
    M-x info
        C-h i 在线帮助

    其它
    C-h a    M-x apropos-command    搜索命令
    C-h f    M-x describe-function    函数说明
    C-h v    M-x describe-variable    变量说明
    C-h k    M-x describe-key    键绑定说明
    C-h c    M-x describe-key-briefly    键绑定说明
    C-h w    M-x where-is    查找键绑定

        * 使用帮助时，可能会分割出其它窗格。 C-x 1 关闭其它窗格详见窗格和缓冲区管理

基本操作

    针对文件及编辑器的一些操作，绝大多数软件中，这类操作都安排在文件菜单里面。
    C-x C-c    M-x save-buffers-kill-emacs    保存退出
    C-x C-z    M-x iconify-or-deiconify-frame    挂起（最小化）
    C-x C-f    M-x find-file    打开文件、目录
    C-x C-r    M-x find-file-read-only    以只读模式打开
    C-x i    M-x insert-file    插入文件
    C-x C-s    M-x save-buffer    保存
    C-x s    M-x save-some-buffers    询问，保存所有未保存的缓冲区
    C-x C-w    M-x write-file    另存为文件
       M-x revert-buffer    恢复到原始状态

数字参数

    Emacs中可以使用 Ctrl+u 向命令传递参数。
        例如用数字作为参数，指定命令运行的次数
    C-u <#> <command>
        M-x universal-argument （通用参数）

    例如：

    C-u 10 C-f               向前10个字符
    C-u 10 M-x forward-char

    M-<#> <command>
        negative-argument （负参数）
    M-[1-9] 快速参数
        digit-argument （数字参数）

基础编辑

    几乎所有编辑器都具有的基础功能。
        这里只是一个列表，更详细的介绍，请参阅《Emacs 快捷指南》 C-h t
    使用Readline控件的程序，例如 bash ；以及其它使用Emacs风格键绑定的程序，也使用基本相同的功能键。
        如果熟悉 bash 的快捷键，这些绑定您一定驾轻就熟：）

浏览

       向前    向后    向下    向上
    字符    C-f    C-b    C-n    C-p
    单词    M-f    M-b         
    行    C-a    C-e    移动到行首或行尾，不能跨行
    句    M-a    M-e         
    段落    M-{    M-}         
    缓冲区    M-<    M->    移动到缓冲区起始或结束
    卷屏              C-v    M-v
    行号    M-g g    M-g M-g    M-x goto-line    按行号跳转
    字符位置              M-x goto-char    按字符跳转

    其它：

    C-M-l (M-x reposition-window)
        将当前行卷至页面中部
    C-l (M-x recenter)
        刷新页面，将将当前行卷至页面中部（尝试使用数字参数）

编辑

    删除
       向前    向后
    字符    C-d    M-x delete-char    DEL    M-x delete-backward-char
    单词    M-d    M-x kill-word    C-Delete / M-DEL    M-x backward-kill-word
    行    光标至行末    C-k M-x kill-line
       整行    C-S-backspace M-x kill-whole-line
       按表达式删除    C-M-k M-x kill-sexp
    区块    C-w    M-x kill-region
    空白    删除连续空格    M-x delete-horizontal-space

    Note

    上表中 DEL 实际按键为 Backspace ，PC中只有 Delete 键，而没有 DEL 键，Emacs把 Backspace 映射为 DEL

    backspace 实际按键也为 Backspace

    类似的，Emacs把PC的 Enter 键映射为 RET ; 而 RET 实际为 C-m

    可能您注意到了，Emacs进行删除时有两种处理方法， delete 和 kill

    kill
        比较类似于剪切，剪切掉的内容被依次放入剪切轮环 kill-ring ，可以召回。
    delete
        就是删除了，删除掉的内容并不能召回。但是可以通过 M-x undo 撤消删除。

    复制

    M-w (M-x kill-ring-save)
        将内容放入剪切轮环 kill-ring

    粘贴

    C-y (M-x yank)
        从剪切轮环 kill-ring 中召回最后一次放入的内容
    M-y (M-x yank-pop)

        从剪切轮环 kill-ring 中按后进先出的顺序，依次召回

            * 这个命令只能在 M-x yank 或者 M-x yank-pop 之后使用。也就是说，只能 C-y 后 M-y ， M-y 可以连续多次。

    撤消

    C-/ (M-x undo)
        撤消之前的修改（浏览部分的操作不可撤消）。

    C-_ (M-x undo)

    C-x u (M-x advertised-undo)
        advertised-unde 是 undo 命令的一个别名

        * 为了减少 undo 的次数，每插入20个字符，视为一个 undo 的单位。

    重做

    C-g M-x undo
        例如 C-g C-/ ，撤消上一次的 M-x undo 。

        *

          如果需要更多的 redo ，需要安装 redo.el 扩展

          并在配置文件中添加如下内容

              ;;---------- redo
              ;; 读取扩展
              (require 'redo)
              ;; 设置Redo的键绑定
              (global-set-key ( kbd "C-.") 'redo)

区块编辑

    关于区块的选择，可以参考区块选择

    需要补充的是，完成区块选择时，实际定义了两种区块：

        下面用 - 表示普通字符，用 X 表示被选中的字符。下面两个例子中，标记和光标点的位置相同。

        连续区块为标记和光标点之间连续的区块:

        ---XXXXXXXX
        XXXXXXXXXXX
        XXXXXXXXXXX
        XXXXXXXX---

        矩形区块为标记和光标点之间矩形的区块:

        ---XXXXX---
        ---XXXXX---
        ---XXXXX---
        ---XXXXX---

            *

              连续区块能够高亮显示，而矩形区块则是隐含的。

              下面例子，选中的矩形区块，与第一个例子相同。前面为左上-右下选择，现在为左下-右上选择

              --------XXX
              XXXXXXXXXXX
              XXXXXXXXXXX
              XXX--------

    连续区块
    C-SPC    M-x set-mark-command    在光标点处设置标记
    C-@    同上    建议使用 C-z
    M-@    M-x mark-word    在单词结尾处设置标记
    M-h    M-x mark-paragraph    选中段落
       M-x mark-end-of-sentence    在句末设置标记
    C-x h    M-x mark-whole-buffer    整个缓冲区
    C-x C-x    M-x exchange-point-and-mark    交换标记和光标点
    C-w    M-x kill-region    剪切区块
    M-w    M-x kill-ring-save    复制区块
    C-y    M-x yank    粘贴区块
    M-y    M-x yank-pop    轮环粘贴
    矩形区块
    C-x r k    M-x kill-rectangle    删除矩形区块
    C-x r y    M-x yank-rectangle    粘贴上一次删除的矩形区块
    C-x r t    M-x string-rectangle    用指定字符填充
    C-x r o    M-x open-rectangle    用空格插入
    C-x r c    M-x clear-rectangle    用空格填充
    C-x r r    M-x copy-rectangle-to-register    拷贝到寄存器中

        * C-x r y 粘贴时，召回的矩形区块，左上角对齐光标点

        *

          矩形区块的标记和光标点，水平位置相同时，矩形区块是一条垂线。
                  o 插入时，可直接使用 C-x r t 填充这条垂线，后两条命令根本用不到

        * 矩形区块经过的行，如果行尾在区块左侧，则行尾和区块之间的部分将强制填充。

搜索和替换

    Emacs中，默认使用增量搜索：在搜索对话模式中输入关键词的同时，Emacs就开始进行搜索，随着关键字的输入，不断的缩小搜索范围

    而传统的非增量搜索，则是关键词输入后，再进行搜索。
    增量搜索
    C-s    M-x isearch-forward    向前增量搜索
    C-r    M-x isearch-backward    向后增量搜索
    C-M-S    M-x isearch-forward-regexp    正则表达式向前增量搜索
    C-M-r    M-x isearch-backward-regexp    正则表达式向后增量搜索
    询问替换
    M-%    M-x query-replace    询问替换
    C-M-%    M-x query-replace-regexp    正则表达式询问替换
    搜索
       M-x search-forward    向前搜索
       M-x search-backward    向后搜索
       M-x search-forward-regexp    正则表达式向前搜索
       M-x search-backward-regexp    正则表达式向后搜索
    替换
       M-x replace-string    替换
       M-x replace-regexp    正则表达式替换

        * 增量搜索时，关键词会被一直保留。可以直接进行下一次搜索
        * 下一次增量搜索，如果之前进行了其它操作，则需要连续两次命令（快捷键），才能召回关键词。
              o 因为这种情况下，您很有可能是希望以其它关键词进行搜索
              o 同样的，没有搜索到关键词时，第一次取消，您可以重新输入关键词，连续取消两次才能取消这次搜索

        * C-g 取消搜索，回到搜索前的位置
        * RET 结束搜索，停在当前位置
              o 我倾向于使用方向键 C-b 结束搜索。拼音文字中，使用 M-b 或者 M-DEL 最好

        * 可以选中区块后，在区块内进行替换

其它

    插入控制字符

    使用 C-q ，可以在缓冲区插入一个控制字符。例如 C-q C-m = ^M

    文本换位
    字符    C-t    M-x transpose-chars
    单词    M-t    M-x transpose-words
    行    C-x C-t    M-x transpose-lines

    将TAB字符转换为空格

    选中需要转换的区域， M-x untabify

    对齐文本块

    选中需要对齐的区域， M-x indent-region

窗格和缓冲区管理

    多窗格
    C-x 2    M-x split-window-vertically    分隔出两个垂直窗格，水平分隔线
    C-x 3    M-x split-window-horizontally    分隔出两个水平窗格，垂直分隔线
    C-x 1    M-x delete-other-window    只保留当前窗格
    ESC ESC ESC    M-x keyboard-escape-quit    同上
    C-x 0    M-x delete-window    关闭当前窗格
    C-x o    M-x other-window    在下一个窗格中激活光标
    C-M-v    M-x scroll-other-window    向下卷动下一个窗格，使用负参数可以向上卷动

        * 下一个窗格垂直分隔，则先左后右；水平分隔，则先上后下。如果窗格还有子窗格，则先遍历其子窗格后，再遍历其它窗格，以此递归。

    多缓冲区
        Emacs中，打开新的缓冲区，原有缓冲区并不会关闭

    C-x C-b    M-x list-buffers    查看缓冲区列表
    C-x b    M-x switch-to-buffer    切换到其它缓冲区
    C-x k    M-x kill-buffer    关闭当前缓冲区

        *

          切换到其它缓冲区时，默认上一次使用的缓冲区。尽量用 TAB 补全
        *

          使用多窗格时，缓冲区操作只对当前窗格有效
        *

          建议使用 ibuffer.el 这个扩展。 Emacs自带，在配置文件中添加如下语句

          ;;========== ibuffer
          (require 'ibuffer)
          (global-set-key ( kbd "C-x C-b ")' ibuffer)

        *

          这一个缓冲区列表的扩展效果稍差，不过还不错。Emacs自带

          ;;CRM bufer list
          (global-set-key "\C-x\C-b" 'electric-buffer-list)

寄存器管理

    寄存器用于存贮内容，在需要时取出，插入缓冲区。

    Emacs的寄存器使用单个字符命名，可以存贮两种内容：

    光标位置和窗口状态
    C-x r SPC <寄存器名>    M-x point-to-register    存贮光标位置
    C-x r w <寄存器名>    M-x window-configuration-to-register    保存当前窗口状态
    C-x r f <寄存器名>    M-x frame-configuration-to-register    保存所有窗口状态
    C-x r j <寄存器名>    M-x jump-to-register    光标跳转
    C-x j <寄存器名>    略……    同上

    文本和数字
    C-x r s <寄存器名>    M-x copy-to-register    将连续区块拷贝到寄存器中
    C-x r r <寄存器名>    M-x copy-rectangle-to-register    将矩形区块拷贝到寄存器中
    C-u <数字> C-x r n <寄存器名>    M-x number-to-register    将数字拷贝到寄存器中
    C-x r i <寄存器名>    M-x insert-register    在缓冲区中插入寄存器内容

        *

          M-x view-register 查看寄存器内容
        *

          M-x list-registers 查看寄存器列表
        *

          寄存器中的矩形区块，以矩形区块的方式插入到缓冲区中。见区块编辑
        *

          也可以将文件插入到寄存器中 (set-register ?<寄存器名称> '(file . <文件名>)) ，示例

          M-x lisp-interaction-mode 进入交互模式，输入如下Lisp代码：
          (set-register ?e '(file . "~/.emacs"))<光标>移动此外， C-j 求值。
          M-x list-registers 查看寄存器列表，多了寄存器 e ： Register e contains the file "~/.emacs".

书签管理

    Emacs可以在当前位置创建一个书签，以便能够快速的返回。

    与存储光标位置的寄存器略有不同

            * 书签可以使用单词来命名，而不限于一个字符。起一个容易记住的名字
            * 退出Emacs后，书签不会消失，下次还可以使用

    C-x r m <name>    M-x bookmark-set    设置书签
    C-x r b <name>    M-x bookmark-jump    跳转到书签
    C-x r l    M-x bookmark-bmenu-list    书签列表
       M-x bookmark-delete    删除书签
       M-x bookmark-load    读取存储书签文件

            *

              书签默认存储在 ~/.emacs.bmk 文件中
            *

              在配置文件中，可以设置书签存储的文件

              ;; 书签文件的路径及文件名
              (setq bookmark-default-file "~/.emacs.d/.emacs.bmk")

              ;; 同步更新书签文件 ;; 或者退出时保存
              (setq bookmark-save-flag 1)

Shell模式

    M-x shell 进入Shell模式，可以完成一些简单的工作。不过有些情况下，输出会有一些问题

    事实上，这是Emacs自带的终端。它与 bash 和 sh 的兼容比较好，而 fish 之类比较现代的Shell，在Emacs终端里的效果则很差

    需要注意的是， readline-bash 的绑定 C-p C-n ，在Emacs终端需要使用 M-p M-n 。其它的键绑定，也以Emacs为准

宏

    记录一系列的操作，在需要的时候，运行一遍

    例如给一个单词加 " ，可以分解为以下操作:
        M-b 移动到词首
        "
        M-f 移动到词尾
        "

    如果要给一个词加上 " ，只要定位到这个词，运行上面的宏就可以了。

    当然，这只是最简单的宏。结合正则表达式进行匹配，以宏进行操作，可以完成许多复杂的操作

定义与运行

    C-x ( M-x kmacro-start-macro F3 M-x kmacro-start-macro-or-insert-counter
        开始录制宏
    C-x ) M-x kmacro-end-macro
        结束录制
    F4 M-x kmacro-end-or-call-macro
        播放刚录制的宏；如果正在录制宏， F4 为结束录制。
    C-x e M-x kmacro-end-and-call-macro
        播放宏

宏轮环

    与剪切轮环类似，Emacs中也有宏轮环的概念：当一个新的宏被定义，原有的宏并不消失，只是在宏轮环中的位置被挤到后面。

    C-x C-k

        进入宏轮环，以下的操作可以在宏轮环中连续进行，例如：

        C-x C-k C-p C-p C-k C-k C-k C-n C-n C-k C-p C-k C-d
    C-x C-k C-n M-x kmacro-cycle-ring-next
        在宏轮环中下翻一个宏
    C-x C-k C-p M-x kmacro-cycle-ring-previous
        在宏轮环中上翻一个宏
    C-x C-k C-d M-x kmacro-delete-ring-head
        在宏轮环中删除一个宏
    C-x C-k C-k M-x kmacro-end-or-call-macro-repeat
        直接运行宏轮环中当前的宏

命名与保存

    C-x C-k n <name> M-x kmacro-name-last-macro
        命名最后一个宏
    C-x C-k b M-x kmacro-bind-to-key
        绑定最近的一个宏。（执行时需要 C-x C-k 作为按键序列的前缀）
    M-x insert-kbd-macro

        使用Lisp代码在缓冲区中插入宏定义

            * 保存为文件，使用 M-x load-file 加载
            * 保存到配置文件中，启动时加载

宏编辑器

    C-x C-k C-e M-x kmacro-edit-macro
        使用宏编辑器打开最后一个宏
    C-x C-k e M-x edit-kbd-macro
        编辑指定名称的宏
    C-x C-k l M-x kmacro-edit-lossage
        编辑将最后100步键盘操作（不能包含鼠标操作）

询问执行

    C-x q M-x kbd-macro-query
        在播放宏时，将进行询问确认

计数器

    记录宏的执行次数

    C-x C-k C-i M-x kmacro-insert-counter
        将宏计数器的数值插入缓冲区
    C-x C-k C-c M-x kmacro-set-counter
        为宏计数器设置一个数值
    C-x C-k C-a M-x kmacro-add-counter
        给宏计数器添加一个前缀参数
    C-x C-k C-f M-x kmacro-set-format
        给宏计数器指定一个将要插入的特殊值

文件管理

    Emacs提供了 Dired 模式来管理文件系统，并且允许使用多个缓冲开启多个 Dired 。您可以使用以下命令进入：

    C-x d M-x dired
        进入Dired列表模式
    C-x C-d M-x list-directory
        获取文件列表（简洁）
    C-x C-f M-x find-file
        打开文件，没有文件名则打开目录

使用帮助

    ? M-x dired-summary
        简单帮助（回显区）
    h M-x describe-mode
        模式帮助

查看

       向下    向上
    文件    n    p
       C-n    C-p
       SPC    
    目录    >    <
    已标记    M-}    M-{
    刷新    M-G    M-x revert-buffer


* Location: http://www.cnblogs.com/qazwsxedc121/p/3203361.html                                                               
qazwsxedc121

  * 博客园
  * 首页
  * 新随笔
  * 联系
  * 订阅
  * 管理

随笔-6  文章-0  评论-5 

我的Emacs折腾经验谈(一) 一些给新人的建议

这几天都没有动力写mongodb的东西,我果然还是太懒了么~ 主要是没有一个系统的东西整理出来,加上我令人拙计的语言表达能力,这个坑只
能慢慢再补了.

最近在折腾emacs这个东西,首先说我曾经算是个极为坚定的VIM党,我在各种IDE里面基本都会要装VIM化的插件,而且我的浏览器Firefox一直
有Vimperator这个插件,现在上网如果不能用d关网页/用t开tab就会觉得难受.那么我为啥还要搞emacs呢?而且眼看着sublime一天天变得流
行起来,而emacs基本没什么新人在用,我为啥又在这个时候折腾emacs呢?

理由其实也不是很充分,但是对我而言已经够了:

 1. Emacs是用Lisp的最经典的程序了,作为试图成为Lisper的人,emacs最起码应该使用过.君不见github上最流行的lisp方言就是emacs
    lisp(虽然绝大部分repo都是大家把各自的emacs配置放上去了而已)
 2. Emacs是Hacker的选择,首先开发者RMS神不用说了(如果不知道这位的话建议不要用Emacs来进行工作,我现在觉得Emacs也确实是不太适
    合大众用的东西,只适合对于文本编辑效率极高的人群,最典型的就是码农),其次大量知名人士使用著名Emacs用户列表 ,虽说并不是别
    人用什么你就改用什么,但至少你能确定这不是一个糟糕的选择.
 3. 最近写clojure,对于括号的操作很重要,而paredit让写lisp轻松了一些.
 4. 本人相对来说还是不是特别怕折腾的

[21031038-e](附Richard Matthew Stallman照片一张)

那么就开始折腾吧,之前对于emacs的复杂程度心里有所准备,所以知道这东西不会像sublime一样开箱就能用,果然第一个遇到的问题就是:怎
么打开文件啊?

先镇定,我之前用vim的时候就是各种操作不会,都只能找菜单,这里一样先找菜单再说,然后发现选了打开文件以后是要输文件路径的(囧).估
计光是这一点就足够赶走无数的用户,真是用户交互设计的一大败笔,不过emacs这东西就不是给普通用户设计的,只有接受它的设定,才能达
到我们的目标:提高效率.

接下来学习的过程就不再叙述了,总之就是先Ctrl+h t看完了教程先,教程是英语的但是很好懂.然后就是一边开着手册一边试着编辑文件了.
就和学习一门新语言一样,不断的写程序是最快能学会的方法.

别人的Emac是这样的[21031619-5]

别人的emacs是这样的                                                         我的emacs是这样的

防治小拇指抽搐

学习的历程还是很漫长的,尤其是在Vim的肌肉记忆深深植根大脑的时候,令人愤怒的是你会发现Emacs的键位比较奇葩,不是很好按,不像Vim
有模式可以不用修饰键,Emacs里面需要大量的Ctrl Shift Alt等等,这就大大加深了小拇指的负担.有人建议装脚踏板给Ctrl和Alt,我觉得这
方案还挺好的,可惜这需求太小众,万能的淘宝都找不到合适的踏板,有一种但是看上去不给力且价格不理想.

我这里建议把Capslock键改了,我之前使用Vim的时候是Capslock和ESC交换,现在则是Capslock直接改成Ctrl,因为capslock实在没有什么用.
这样的话开vim的时候注意 Ctrl+[ 是和ESC起一样的作用的,这样就可以同时让Emac和Vim的按键都舒服许多.在Mac上还有点优势就是不需要
装额外的软件就可以把键给改了.

站在巨人的肩膀上

既然emacs是是众所周知的难于配置,自然有拯救苍生的各位大大想让更多的菜鸟能用上神器.于是乎出现了不少文章帮助菜鸟度过难关,其实
只要经常搜一下就会找到他们的博客,例如emacs中文网,李杀网等很多地方.另外还有些大大分享了他们的配置文件供我们上手快一些,我这
里用的是emacs-starter-kit, 注意它的作者是leiningen的作者,非常值得借鉴.Emacs-starter-kit的github页面上有关于如何使用的说明.
没有它的话天知道又有多少人会把光阴白白送在一些非常基础的设置之中了.

Package.el

以前的Emacs的插件管理方式非常的原始,都是直接把插件的el文件放在.emac.d文件夹下,并不区分插件和配置文件,这对于插件的管理/升级
/卸载都十分的不便,后来就有了package.el插件来帮助设置插件.最后Emacs的作者们终于在Emacs的24版中内置了插件管理,为我们省却了很
多功夫.在安装emacs-starter-kit的时候指南上就介绍我们要在init.el中写

1 (require 'package)
2 (add-to-list 'package-archives
3              '("marmalade" . "http://marmalade-repo.org/packages/") t)
4 (package-initialize)

这里第一行是说加载package.el这个包,2~3行说为package.el中加入marmalade的源来获取包,第4行是初始化包.刚开始的时候不需要明白到
底这些都是啥.只要不要随便就删掉它们就好了.

这些代码算是设置好了软件源,就跟我们在ubuntu上设apt-get的源一样.但是我在尝试sr-speedbar这个包的时候发现安装时会出一些问题,
没有办法装上去,在github上找到了sr-speedbar的代码,发现由于兼容性问题在最近的2013年才被修正过,而marmalade上的版本是2009年的,
就是说如果用marmalade的话就没有办法正确安装,我现在暂时还不会hack package中的代码(何况这样就失去了package打包安装的意义),尝
试了一下byte-recompile等指令发现还是不太会,在即将放弃这个插件之际想到,如果有别的源说不定已经更新了,由此在emacs wiki上又找
到了下面的配置

1 (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
2                          ("marmalade" . "http://marmalade-repo.org/packages/")
3                          ("melpa" . "http://melpa.milkbox.net/packages/")))

用上面这3行取代前面的2~3行代码就可以了,其实意思就是将melpa这个源加入package的软件源而已.

加入Melpa这个源以后,运行list-packages这个指令时会发现显著变慢了,然后可以看到很多版本号都变成了日期,同时后面会有[github]等
字样,这是什么意思呢?上melpa这个网站可以看到,它的原理和marmalade是不同的,它基于版本控制系统自动生成package,就是说只要作者将
代码更新了commit以后,melpa就会更新,不需要再等作者打包放到marmalade上面,而且如果原作者早就忘了更新这个事的话还有其他人帮忙
更新代码,这样显然是更好的方式,sr-speedbar就是这样做的.

所以当然立即将melpa加入->更新->搞定!

** emacs http://www.cnblogs.com/zfyouxi/p/4482108.html
配置:https://github.com/redguardtoo/emacs.d



* vimp

j(向下滚动一行）
h(向左滚动) l（向右滚动1列）
k（向上滚动一行）

这4个键就是VIM中的四个光标移动键，其实我们有时候打电脑游戏也经常会定义类似的键。这个好处就是不用怎么移动手指头就能直接滚动页面。在日常浏览中，一般也就是使用一下j（向下滚动）和k（向上滚动）

（2）打开和关闭网页
在安装Vimperator之后，它会把火狐中所有的菜单和工具栏都隐藏起来，所以，新手会感到无法下手。实际上，进入火狐后，只要按下键盘中几个字母，就可以顺利地完成浏览任务(注意大小写字母，Vimperator区分大小写):

打开特定的网址。url假如是一个网址的话，则直接打开该网址，而假如不是网址的话，则用默认的搜索引擎搜索这个关键词。如果第一个关键词是搜索关键字，则通过指定的搜索引擎搜索后面的关键词。这三条命令分别对应“该页面”“在新的标签页”“在新的窗口”打开相应的URL，并且也和快捷键o/t/w一一对应。

o
按了这个字母后，Vimperator就会在火狐的底部自动填入:open ,示意这个字母代表命令Open，即打开一个网址，所以，在这之后，只要直接输入网址，按回车就可以浏览指定的网站了，比如，按字母o之后，输入www.iteye.com然后按回车，就可以浏览Java视线网站了。

t
这个和o的用法一样，但是代表TabOpen,即在一个新的标签页中打开网站，而o则是在当前的标签页中浏览网站。

w
代表WinOpen,即在一个新窗口中打开网站。

d
代表Delete，即关闭当前正在浏览的网站所在的标签页，这个用起来可比鼠标要方便很多，尤其是在打开了很多标签页面的情况下。

u
代表Undo，即恢复最近一次被关闭的标签页面。

以上的这些字母其实都是Vimperator提供的命令模式的快捷键，但都比较好记忆。

Vimperator提供的这些命令实际上都可以先进入命令输入模式，然后输入对应的命令完成。进入命令模式的方法就是先输入冒号（:），之后火狐的底部会出现输入提示的光标，这时就可以输入对应的命令的全称后，按回车键进行确认。下面再介绍三个常用的命令。

:q
关闭当前的火狐窗口

:qa
关闭所有的火狐窗口，并退出火狐

:wq
关闭所有的火狐窗口，并保存这些窗口中打开的网站，然后退出火狐，下次启动火狐时，将恢复这些窗口中浏览的网站。

如果误进入了命令输入模式，或者在输入命令时想取消输入，只要按esc键就可以退出命令输入模式。

另外，Vimperator还会自动记忆输入过的命令，只要进入命令输入模式之后，按上下光标键，就可以调出以前输入过的命令。

（3）在页面中导航
通常最常见的就是滚动页面，当页面比较长时，鼠标并不方便，除去开始介绍的h、j、k、l四个字母之外，还可以使用下面的一个或几个字母组合进行快速导航。

gg
查看当前打开网页的最上面部分

G
查看当前打开网页的最下面部分

用鼠标点击页面中的超链是我们最常见的打开页面的方法，Vimperator为我们用键盘导航提供以下常见的方式。

f
按此字母后，Vimperator会在当前的页面中将所有的超链用黄色的数字标识，这个时候，只要输入对应的数字，就可以直接打开对应的超级链接。不过，也有的时候只会让对应的超链变成绿色，这时只要再按下回车键，就可以了。

;y23 /* 拷贝编号为23的链接地址到粘贴板 */

;b
注意第一字符是分号，这两个字符和f的功能类似，但是输入链接对应的数字后，会在后台打开对应的超链。

由于Vimperator隐藏了工具栏，所以，在浏览过的网页历史中前进或后退用鼠标就不方便了，可以使用以下几个字母进行类似的操作。

H
在历史记录中后退

L
在历史记录中前进

这两个字母其实和最初介绍的在网页中左右滚动的h和l的作用有些类似，就是大小写不同而已。

gh或gH
回到主页，这两个其实并不完全等价，后者会在一个新打开的标签页中打开主页。

其实，掌握这些之后，基本上就可以使用Vimperator了，如果有时你需要使用菜单和工具栏，可以使用以下的命令把它们再调出来。

:set guioptions=mT

其中，最前面的冒号是每一个命令开始的通用符号，而set命令用于设置Vimperator中的选项，guioptions指的就是图形用户界面的选项，而等号后面的mT分别代表menu（菜单）和Toolsbar（工具栏），这时火狐的菜单和工具栏就会出现了。

再次去掉菜单和工具栏的显示的命令是

:set guioptions=

即等号后什么都不要有即可。

有的时候，我们会在网页中或地址栏中复制一个网址到系统的剪贴板中备用，这时候，只要你在火狐中不处在编辑状态（即不在一个文本框输入文字的时候），按以下字母键

p

它的含义是put，火狐即可自动转入复制的网址中。

如果需要复制当前所在的网页的网址到剪贴板，只要使用这个字母键

y

y代表yank,复制的意思，这样，如果我们需要将当前网址拷贝到剪贴板的时候，使用这个键就非常方便了。

另外，在不同的操作系统中，复制网页中的选中文本的组合键是不同的，在Windows和Linux中，是ctrl+c，在Mac OSX中则是command+c，这使得在不同系统中使用火狐时经常容易按错键，为此，Vimperator提供了如下的一个字母键

Y

就是大写字母的y,使用这个键，就可以在选中文本后，将其复制到剪贴板。

（4）命令的提示
上面提到，VImperator的命令都是以冒号开头的一个单词，这些单词后面跟的一些参数可以使用tab键自动提示。比如，如果你想使用火狐中某个菜单，可以使用如下命令

：emenu

该命令的作用是执行某个菜单中的菜单项目，这时，就可以输完emenu后，再输入一个空格，然后按tab键，Vimperator此时会自动列出可用的菜单，继续按tab键可以在这些选项之间向后移动，回车键则执行对应的菜单项;Shift+tab则向前移动。

（5）常见的对话框调出

使用前面介绍的:set guioptions=mT调出菜单和工具栏就可以完成这个任务，也可以直接输入下面的命令。

:addo[ns]
注意，上边的中括号代表里面的字符是可选的，即只要输入addo就可以了，这个功能是打开附件组件对话框。

:pref[erences]
中括号的含义同上，打开火狐的选项对话框

:downl[oads]
中括号的含义同上，打开火狐的下载列表

:sb
这个比较好记:)，代表显示侧栏（sidebar），不过还要在命令之后给出要显示的侧栏名称，这时可以再按tab,Vimperator会提示出可用的侧栏名称，用tab键选中你要打开的，按回车就可以了。

实际上，火狐中所有的对话框都可以通过以下命令调出

:dial[og]

该命令后要跟需要打开的对话框的名字，所以接合tab键就比较方便。也就是说，先输入冒号+dial或冒号+dialog，然后再输入一个空格，之后按tab键，Vimperator会自动列出可用的对话框列表，此时可以使用tab在列表中自上向下移动，也可以使用shift+tab键反向移动，按回车键确认即可。

调用fx

的各种属性

:pref /* 调出fx的option对话框*/

:pref! /* 调出fx的about:config */

:addon /* 调出fx的扩展对话框 */

addons /* 调出fx的扩展对话框*/

:dialog checkupdates /* 调出升级对话框*/

console /* 调出控制台*/

downloads /* 调出历史下载列表*/

ZZ

保存关闭浏览器。

:res[tart]

重启浏览器。

:mkvimperatorrc!

保存设置到配置文件。

——————————————————————————————-

还有一个以分号(;)起始的Hint模式，既为扩展Hint模式。可以针对相应的hint进行不只是进入链接的别的动作，比如保存链接目标，复制链接地址，弹出右键菜单等。具体可以单击分号之后补全来看。其实这个就相当于hint模式的命令模式。

我们可以看到map命令大致分为map和noremap两类，而每一类又分为c(Command),i(insert),n(normal)三种分别对应特定的模式。后者无需多讲，前者即map和noremap是什么区别呢？map的意思就是把rhs映射至lhs，他们是属于等效关系，而noremap则是把原始的rhs映射至lhs，并不需服从rhs本身的映射。举一个简单的例子吧：

:map D d
:map d w

第一条的意思是把d重新映射给D，于是敲击D就相当于敲击了d。但是后面又有一个把d映射成w，也就是说敲击d就相当于敲击w，于是最后的结果就是敲击D之后就变成敲击w的效果，即启动:winopen命令。

:noremap D d
:noremap d w

这个就完全不一样了。第一条说明把d映射给了D，第二条是把w映射给了d，但是他们之间没有任何关系，双方映射的都是对方原始的功能，也就是说这个时候敲击D的结果就是关闭标签，而敲击d的时候是启动:winopen。因此，noremap在重新定义快捷键方面有着很重要的作用。比如有个最常用的：

:noremap q gT
:noremap w gt

q原本是宏的快捷键，w原本是新建窗口的快捷键。但是我们一般不常用，何不换成一个常用但是按起来麻烦的键盘序列？于是我们可以把gt/gT映射到 w/q，来实现通过q/w两键来切换标签。然后d关闭标签，r刷新标签的话，标签操作就能集中在一只手上了，大大地提高了效率。

修改快捷键是一个例子，那么如何给剩下的键盘序列添加快捷键呢？也很简单，举一个常用的例子：

:map :set toolbars=na8wvigation,bookmarks,addons,tabs
:map :set toolbars=none,tabs

这两条命令的意思是把，即映射Ctrl+上方向键至一条命令上，使浏览器显示三栏。然后用Ctrl+下方向键隐藏三栏。实际上在这里的命令就是一个键盘序列，就相当于你在打入快捷键的时候就相当于输入了这么一长串的命令，最后回车（最后那个Tag是回车的意思）。这样，基本上所有的浏览器操作都能通过这样的配置使Vimperator无缝地通过快捷键完成。当然，这些map命令需要写入到配置文件中去，Vimperator 才会在启动的时候自动读取并且配置好。所以调试完毕之后别忘了写进rc文件里面。

如果还有什么不懂的问题，可以通过命令获得帮助：

:help

Tags: Vimperator

Posted in 软件相关
6 个评论！ to “Vimperator常用快捷键及设置方法”

    rollom说道：	
    2011年10月6日 10:51 上午	

    对这个不怎么了解啊！
    小小鱼说道：	
    2011年10月19日 7:50 上午	

    嗯嗯 是有点弄不清楚 – –
    Philo说道：	
    2011年10月21日 1:32 下午	

    对键盘控来说 是个好东西。好像还有个Chrome版本的。
    www.tbwseo.com说道：	
    2011年10月25日 3:35 上午	

    http://www.tbwseo.com 换不换回个话 我都挂了好久了….
    Jack Huang说道：	
    2016年05月3日 10:21 上午	

    你好，我想问下怎么弄可以让我按下j键想下多移动几行？我觉得我觉默认的j下移一行速度太慢啦，但是我又不想按Ctrl+d 或者Ctrl+f。
    Tisky说道：	
    2016年08月9日 11:25 上午	

    j 配上数字：
    eg：3j
    （ 下移三行）
    其它类似

有什么想法，说两句吧

输入您的昵称 (必填)

您的邮箱 (仅管理员可见) (必填)

您的网址

    博客统计
        日志总数：888 篇
        评论总数：8588 篇
        标签数量：1767 个
        链接总数：11 个
        建站：2010-08-03
        运行：2330 天
        最后更新：2016-4-29
    热门歌单！听音乐  订阅我！订阅我

    Profile
    傻子-跸西的blog
    在这我会经常推荐一些音乐,酷站,发布一些建站资源,SEO知识,生活心得,分享最新的crack破解补丁,keygen注册机,等一些有趣很酷而且有用的东西,如果您感觉不错可以收藏或订阅它
    Email:wiwjxx@gmail.com
    最热分类Top6
    最热分类Top6
        Profile软件相关
        Profile音乐相关
        Profile建站相关
        Profile酷站推荐
        Profile雷人搞笑
        ProfileSEO相关
    更多精品共享加QQ群:163384196
    傻子最爱音乐
    Search
    搜索： 

    近期评论
        Ethan发表在《【WP-插件】wpml 多语言插件共享版》
        na发表在《【美化字体神器】MacType 1.2012.0406.0 更新发布》
        andylai发表在《【软件】ClipCache Pro 3.5 (32only)》
        李旭东发表在《【网站介绍】精品儿童教育资源 大部分为百度云盘 360云盘》
        simple发表在《【网站推荐】icebin-个人博客 主要介绍WHMCS模板,WHMCS汉化,WHMCS主机皮》
    最热文章排行
        【网站介绍】精品儿童教育资源 大部分为百度云盘 360云盘 - 34,172 次浏览
        4个epub格式电子书下载站推荐 - 21,416 次浏览
        【教程】centos安装pptpd(vpn)最详细的教程+一键安装包 - 17,768 次浏览
        Vimperator常用快捷键及设置方法 - 11,817 次浏览
        PHP开源CRM-推荐几个 - 8,708 次浏览
    免责声明
    1、这只是一个个人blog,内容是精心筛选自互联网,如果侵犯到您的利益请点击左侧QQ联系博主.
    2、长期寻求网站友情链接-QQ：55378929

王跸西的生命体验blog-WangBiXi.com © 2016 All Rights Reserved.

站内地图 | 网站归档


