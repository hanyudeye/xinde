* maven 
  Maven 是一个项目管理工具，主要用于项目构建，依赖管理，项目信息管理。
** 配置
    maven 配置文件 ~/.m2/settings.xml
*** 设置国内镜像 
     在$MAVEN_HOME/conf/settings.xml 文件，或上面的,添加,注意包含在 <settings> 中
     #+begin_src xml
       <settings xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd">
         <mirrors>
           <mirror>
             <id>alimaven</id>
             <name>aliyun maven</name>
             <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
             <mirrorOf>central</mirrorOf>        
           </mirror>
         </mirrors>
       </settings>
     #+end_src
    
    
     本地仓库,下载依赖的本地副本  ~/.m2/repository
    
** 项目结构
   #+begin_quote
   src/main/java - 存放项目.java 文件；
   src/main/resources - 存放项目资源文件；
   src/test/java - 存放测试类.java 文件；
   src/test/resources - 存放测试资源文件；
   target - 项目输出目录；
   pom.xml - Maven 核心文件（Project Object Model）；
   #+end_quote
** 常用命令
   mvn help:effective-pom 查看 Super POM 默认配置

   mvn archetype:generate 创建 Maven 项目(有配置文件 pom.xml)
   mvn archetype:generate -DgroupId=com.yano -DartifactId=MavenJavaTest -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
   mvn archetype:generate -DgroupId=com.companyname.bank -DartifactId=consumerBanking -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

   mvn clean install 生成 jar 程序
   java -jar target/test-1.0.0-BUILD-SNAPSHOT.jar  执行 jar 程序

   mvn compile 编译源代码
   mvn deploy 发布项目
   mvn test-compile 编译测试源代码
   mvn test 运行应用程序中的单元测试
   mvn site 生成项目相关信息的网站 ,在 target\site 文件夹。点击 index.html 就可以看到文档了
   mvn clean 清除项目目录中的生成结果
   mvn package 根据项目生成的 jar
   mvn install 在本地 Repository 中安装 jar
   mvn eclipse:eclipse 生成 eclipse 项目文件
   mvnjetty:run 启动 jetty 服务
   mvntomcat:run 启动 tomcat 服务
   mvn clean package -Dmaven.test.skip=true:清除以前的包后重新打包，跳过测试类

   Maven 常用命令： 
   1. 创建 Maven 的普通 java 项目： 
      mvn archetype:create 
      -DgroupId=packageName 
      -DartifactId=projectName  
   2. 创建 Maven 的 Web 项目：   
      mvn archetype:create -DgroupId=packageName -DartifactId=webappName -DarchetypeArtifactId=maven-archetype-webapp    
   3. 编译源代码：mvn compile 
   4. 编译测试代码：mvn test-compile    
   5. 运行测试：mvn test   
   6. 产生 site：mvn site   
   7. 打包：mvn package   
   8. 在本地 Repository 中安装 jar：mvn install 
   9. 清除产生的项目：mvn clean   
   10. 生成 eclipse 项目：mvn eclipse:eclipse  
   11. 生成 idea 项目：mvn idea:idea  
   12. 组合使用 goal 命令，如只打包不测试：mvn -Dtest package   
   13. 编译测试的内容：mvn test-compile  
   14. 只打 jar 包: mvn jar:jar  
   15. 只测试而不编译，也不测试编译：mvn test -skipping compile -skipping test-compile 
       ( -skipping 的灵活运用，当然也可以用于其他组合命令)  
   16. 清除 eclipse 的一些系统设置:mvn eclipse:clean  

** 创建 web 应用
   配置 jetty 插件
   打包好 war 文件后，要部署到 servlet 容器中,通常要下载 Jetty 或 Tomcat，解压分发包 到 webapps/ ,然后启动容器。
   现在可以用 maven-jetty 插件在 maven 中运行 web 应用。
   配置方法 
   
   #+begin_src xml
     <build>
       <finalName>simple-webapp</finalName>
       <plugins>
         <plugin>
           <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>9.4.11.v20180605</version>
         </plugin>
       </plugins>
     </build>
   #+end_src
   
然后运行 mvn jetty:run
在浏览器打开  http://localhost:8080
** Maven 常用命令
   mvn archetype：create 创建 Maven 项目
 mvn compile 编译源代码
 mvn deploy 发布项目
 mvn test-compile 编译测试源代码
 mvn test 运行应用程序中的单元测试
 mvn site 生成项目相关信息的网站
 mvn clean 清除项目目录中的生成结果
 mvn package 根据项目生成的 jar
 mvn install 在本地 Repository 中安装 jar
 mvn eclipse:eclipse 生成 eclipse 项目文件
 mvnjetty:run 启动 jetty 服务
 mvntomcat:run 启动 tomcat 服务
 mvn clean package -Dmaven.test.skip=true 清除以前的包后重新打包，跳过测试类

 用到最多的命令

 mvn eclipse:clean 清除 Project 中以前的编译的东西，重新再来
 mvn eclipse:eclipse 开始编译 Maven 的 Project
 mvn clean package 清除以前的包后重新打包

