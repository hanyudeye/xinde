* maven 项目管理
** 安装
   Maven 下载地址：http://maven.apache.org/download.cgi
   # wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
   # tar -xvf  apache-maven-3.3.9-bin.tar.gz
   # sudo mv -f apache-maven-3.3.9 /usr/local/
   
    在 /etc/profile 
    export MAVEN_HOME=/usr/local/apache-maven-3.3.9
    export PATH=${PATH}:${MAVEN_HOME}/bin
** 目录约定
| pom.xml                  |                                                                            |
| /src/main/java           | 项目的 java 源代码                                                         |
| /src/main/resources      | 项目的资源，比如说 property 文件，springmvc.xml                            |
| /src/test/java           | 项目的测试类，比如说 Junit 代码                                            |
| /src/test/resources      | 测试用的资源                                                               |
| /src/main/webapp/WEB-INF | web 应用文件目录，web 项目的信息，比如存放 web.xml、本地图片、jsp 视图页面 |
| /target                  | 打包输出目录                                                               |
| /target/classes          | 编译输出目录                                                               |
| /target/test-classes     | 测试编译输出目录                                                           |
| ~/.m2/repository         | Maven 默认的本地仓库目录位置                                               |
 
** 仓库 http://search.maven.org
** 常用命令
   mvn help:effective-pom 查看 Super POM 默认配置

   mvn archetype:generate 创建 Maven 项目(有配置文件 pom.xml)
   mvn archetype:generate -DgroupId=com.yano -DartifactId=MavenJavaTest -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
   mvn archetype:generate -DgroupId=com.companyname.bank -DartifactId=consumerBanking -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

   mvn clean install 生成 jar 程序
   java -jar target/test-1.0.0-BUILD-SNAPSHOT.jar  执行 jar 程序

   mvn compile 编译源代码
   mvn deploy 发布项目
   mvn test-compile 编译测试源代码
   mvn test 运行应用程序中的单元测试
   mvn site 生成项目相关信息的网站 ,在 target\site 文件夹。点击 index.html 就可以看到文档了
   mvn clean 清除项目目录中的生成结果
   mvn package 根据项目生成的 jar
   mvn install 在本地 Repository 中安装 jar
   mvn eclipse:eclipse 生成 eclipse 项目文件
   mvnjetty:run 启动 jetty 服务
   mvntomcat:run 启动 tomcat 服务
   mvn clean package -Dmaven.test.skip=true:清除以前的包后重新打包，跳过测试类

Maven 常用命令： 
1. 创建 Maven 的普通 java 项目： 
   mvn archetype:create 
   -DgroupId=packageName 
   -DartifactId=projectName  
2. 创建 Maven 的 Web 项目：   
    mvn archetype:create 
    -DgroupId=packageName    
    -DartifactId=webappName 
    -DarchetypeArtifactId=maven-archetype-webapp    
3. 编译源代码：mvn compile 
4. 编译测试代码：mvn test-compile    
5. 运行测试：mvn test   
6. 产生 site：mvn site   
7. 打包：mvn package   
8. 在本地 Repository 中安装 jar：mvn install 
9. 清除产生的项目：mvn clean   
10. 生成 eclipse 项目：mvn eclipse:eclipse  
11. 生成 idea 项目：mvn idea:idea  
12. 组合使用 goal 命令，如只打包不测试：mvn -Dtest package   
13. 编译测试的内容：mvn test-compile  
14. 只打 jar 包: mvn jar:jar  
15. 只测试而不编译，也不测试编译：mvn test -skipping compile -skipping test-compile 
      ( -skipping 的灵活运用，当然也可以用于其他组合命令)  
16. 清除 eclipse 的一些系统设置:mvn eclipse:clean  

ps： 

一般使用情况是这样，首先通过 cvs 或 svn 下载代码到本机，然后执行 mvn
eclipse:eclipse 生成 ecllipse 项目文件，然后导入到 eclipse 就行了；修改代码后执
行 mvn compile 或 mvn test 检验，也可以下载 eclipse 的 maven 插件。

mvn -version/-v  显示版本信息 
mvn archetype:generate        创建 mvn 项目 
mvn archetype:create -DgroupId=com.oreilly -DartifactId=my-app   创建 mvn 项目 

mvn package            生成 target 目录，编译、测试代码，生成测试报告，生成 jar/war 文件 
mvn jetty:run            运行项目于 jetty 上, 
mvn compile                    编译 
mvn test                    编译并测试 
mvn clean                    清空生成的文件 
mvn site                    生成项目相关信息的网站 
mvn -Dwtpversion=1.0 eclipse:eclipse        生成 Wtp 插件的 Web 项目 
mvn -Dwtpversion=1.0 eclipse:clean        清除 Eclipse 项目的配置信息(Web 项目) 
mvn eclipse:eclipse                将项目转化为 Eclipse 项目 

在应用程序用使用多个存储库 
<repositories>    
    <repository>      
        <id>Ibiblio</id>      
        <name>Ibiblio</name>      
        <url>http://www.ibiblio.org/maven/</url>    
    </repository>    
    <repository>      
        <id>PlanetMirror</id>      
        <name>Planet Mirror</name>      
        <url>http://public.planetmirror.com/pub/maven/</url>    
    </repository>  
</repositories> 

mvn deploy:deploy-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\client-0.1.0.jar -DrepositoryId=maven-repository-inner -Durl=ftp://xxxxxxx/opt/maven/repository/ 


发布第三方 Jar 到本地库中： 

mvn install:install-file -DgroupId=com -DartifactId=client -Dversion=0.1.0 -Dpackaging=jar -Dfile=d:\client-0.1.0.jar 


-DdownloadSources=true 

-DdownloadJavadocs=true 

mvn -e            显示详细错误 信息. 

mvn validate        验证工程是否正确，所有需要的资源是否可用。 
mvn test-compile    编译项目测试代码。 。 
mvn integration-test     在集成测试可以运行的环境中处理和发布包。 
mvn verify        运行任何检查，验证包是否有效且达到质量标准。     
mvn generate-sources    产生应用需要的任何额外的源代码，如 xdoclet。 

本文来自 CSDN 博客，转载请标明出处：http://blog.csdn.net/lifxue/archive/2009/10/14/4662902.aspx 

常用命令： 
mvn -v 显示版本 
mvn help:describe -Dplugin=help 使用 help 插件的  describe 目标来输出 Maven Help 插件的信息。 
mvn help:describe -Dplugin=help -Dfull 使用 Help 插件输出完整的带有参数的目标列 
mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull 获取单个目标的信息,设置  mojo 参数和  plugin 参数。此命令列出了 Compiler 插件的 compile 目标的所有信息 
mvn help:describe -Dplugin=exec -Dfull 列出所有 Maven Exec 插件可用的目标 
mvn help:effective-pom 看这个“有效的 (effective)”POM，它暴露了 Maven 的默认设置 

mvn archetype:create -DgroupId=org.sonatype.mavenbook.ch03 -DartifactId=simple -DpackageName=org.sonatype.mavenbook 创建 Maven 的普通 java 项目，在命令行使用 Maven Archetype 插件 
mvn exec:java -Dexec.mainClass=org.sonatype.mavenbook.weather.Main Exec 插件让我们能够在不往 classpath 载入适当的依赖的情况下，运行这个程序 
mvn dependency:resolve 打印出已解决依赖的列表 
mvn dependency:tree 打印整个依赖树 

mvn install -X 想要查看完整的依赖踪迹，包含那些因为冲突或者其它原因而被拒绝引入的构件，打开 Maven 的调试标记运行 
mvn install -Dmaven.test.skip=true 给任何目标添加 maven.test.skip 属性就能跳过测试 
mvn install assembly:assembly 构建装配 Maven Assembly 插件是一个用来创建你应用程序特有分发包的插件 

mvn jetty:run 调用 Jetty 插件的 Run 目标在 Jetty Servlet 容器中启动 web 应用 
mvn compile 编译你的项目 
mvn clean install 删除再编译 

mvn hibernate3:hbm2ddl 使用 Hibernate3 插件构造数据库
** 创建项目 sprintboot
  mvn archetype:generate -DgroupId=springboot
  -DartifactId=springboot-helloworld
  -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
