#+TITLE: 珍珠
#+DESCRIPTION: 一些术语的简单解释
#+TAGS: 术语
#+CATEGORIES: 术语 

* 计算机
** CGI [ Common Gateway Interface ]
   #+begin_verse
   外部应用程序（CGI 程序）与 WEB 服务器之间的接口标准
   就是 web 服务器如果开启了 CGI 接口，就能 执行外部的程序了,外部程序可以返回处理过的数据给服务器
   一般的 web 服务器 都支持 CGI
   动态网页就是这么来的，浏览器返回的不再是静态的 ~HTML~ 文件，而是 ~CGI~ 外部程序处理过的 ~HTML~ 内容
   还有就是处理表单，用的也很多
   #+end_verse
   

   处理步骤
   #+begin_verse
   ⑴通过 Internet 把用户请求送到 web 服务器。
   ⑵web 服务器接收用户请求并交给 CGI 程序处理。
   ⑶CGI 程序把处理结果传送给 web 服务器。
   ⑷web 服务器把结果送回到用户。
   #+end_verse

   编写语言: 任何语言都可以，一般是 ~Perl~ ，跨平台

   服务器配置:
   查看服务器的配置文档，一般 ~CGI~ 程序与网页文件放在同一目录
*** 环境变量列表编辑
    #+begin_verse
    SERVER_NAME：运行 CGI 序为机器名或 IP 地址。
    SERVER_INTERFACE：WWW 服务器的类型，如：CERN 型或 NCSA 型。
    SERVER_PROTOCOL：通信协议，应当是 HTTP/1.0。
    SERVER_PORT：TCP 端口，一般说来 web 端口是 80。
    HTTP_ACCEPT：HTTP 定义的浏览器能够接受的数据类型。
    HTTP_REFERER：发送表单的文件 URL。（并非所有的浏览器都传送这一变量）
    HTTP_USER-AGENT：发送表单的浏览的有关信息。
    GETWAY_INTERFACE：CGI 程序的版本，在 UNIX 下为 CGI/1.1。
    PATH_TRANSLATED：PATH_INFO 中包含的实际路径名。
    PATH_INFO：浏览器用 GET 方式发送数据时的附加路径。
    SCRIPT_NAME：CGI 程序的路径名。
    QUERY_STRING：表单输入的数据，URL 中问号后的内容。
    REMOTE_HOST：发送程序的主机名，不能确定该值。
    REMOTE_ADDR：发送程序的机器的 IP 地址。
    REMOTE_USER：发送程序的人名。
    CONTENT_TYPE：POST 发送，一般为 application/xwww-form-urlencoded。
    CONTENT_LENGTH：POST 方法输入的数据的字节数。
    #+end_verse
** IANA 管理的预留域名 [ 用于特定技术或政策 ]
   包括  http://example.org
   
   http://example.com
** irc /erc
   活跃频道 wikipedia-zh
   linuxba
   c_lang_cn
   emacs
** 事件
   一个对象行为，引起了另一个对象的行为的发生。 
   另一个对象要开启事件识别机制，并设置相应的处理方法。
   然后有一个专门处理事件控制的程序，会监控对象的行为会产生哪样的事件消息，如果有需识别的消息，就告知两一个对象。

   就像我们每天会听到很多消息，但会处理哪个消息还是由自己决定。
   而有一个人专门发给我们消息。
   
   或者我们告诉那个人我们会处理哪种消息，那个人如简析到那种消息就发给我们处理。
* ubuntu 释放 cache 内存
#!/bin/bash                                                                                                                                                                                                 

sync && echo 1 | sudo tee /proc/sys/vm/drop_caches
sync && echo 2 | sudo tee /proc/sys/vm/drop_caches
sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
然后加到 crontab 里，每小时执行一次，定时释放 cache。。。 
几天以后，发现脚本没有起作用。。。每次查看内存使用情况，发现 cache 并没有释放。。。该死机还是死机。。。 
想了想，/proc/sys/vm/drop_caches 这个路径，普通账号应该是没有权限去操作的。。。 
果断将这个脚本添加到 root 的 crontab 里，每小时跑一次。发现起作用了。。。 
距上次强制重启已经两周，完美解决。。
* linux
** 忘记密码
   按"e"进入编辑模式
   在后边加上 single 回车
   最后按"b"启动，启动后就进入了单用户模式了
   此时已经进入到单用户模式了，你可以更改 root 密码了。更密码的命令为 passwd
* 代理  
  什么是代理，就是中介呀。 我们找个中介委托他做某件事。
  so,我们跟中介交流 
** 终端下使用 lantern 代理
   就是终端要跟人交流，通过给 中介 ~lantern~  发消息要干某事， ~lantern~ 帮 终端做。
  
   在要用的终端配置代理：
   #+begin_src sh
     export http_proxy=http://127.0.0.1:42428
     export https_proxy=https://127.0.0.1:42428
   #+end_src
   #+begin_quote
   怎么配置了代理机器呀，因为消息发给代理机器的呀，代理机器通过它自己的服务器获取数据后返回给终端的。  
   #+end_quote
   
   测试是否成功
   #+begin_quote
   wget https://google.com 
   #+end_quote
** 浏览器设置代理 
   按照代理的说明配置下浏览器就好了

* 客户机如何使用宿主机 lantern 代理上网
  ip route show
  # 查看 route
  http_proxy="http://10.0.2.2:50067"
  # virtualbox 默认路由 10.0.2.2
  # lantern 端口 50067
* google 翻译
  就 Google 翻译，可以改用 http://translate.google.cn  ，这个网址在大陆一直都
  可以访问，且如果用 google-translate  的话，可以用以下的命令把 .com 改成 .cn:
  #+begin_src lisp
    (eval-after-load 'google-translate-core
      '(setq google-translate-base-url "http://translate.google.cn/translate_a/single"
             google-translate-listen-url "http://translate.google.cn/translate_tts"))

    (eval-after-load 'google-translate-tk
      '(setq google-translate--tkk-url "http://translate.google.cn/"))
#+end_src
* ABI [应用二进制接口,]
  两程序模块间的接口；通常其中一个程序模块会是库或操作系统所提供的服务，而另一边的
  模块则是用户所运行的程序。

一个 ABI 定义了机器代码如何访问数据结构与运算程序，此处所定义的界面相当低级并且
相依于硬件。而类似概念的 API 则在源代码定义这些，则较为高端，并不直接相依于硬件，
通常会是人类可阅读的代码。一个 ABI 常见的样貌即是调用约定：数据怎么成为计算程序
的输入或者从中得到输出；x86 的调用约定即是一个 ABI 的例子。
* 植物的根
  高等植物茎干下部长在土里的部分，主要功能是把植物固定在土地上，吸收土壤里的水分
  和养料，有的还能储藏养料。
* 统计一个文件中特定字符的个数,统计单词(其实是统计有多少个分隔符号) 
  统计一个文件中某个字符串的个数，其实就是在在一块沙地里面找石头，有的人看到石头
  以后，在上面做个标记（grep），然后记住自己做了多少个标记；有的人看到石头以后，把
  它挖了（tr），最后统计自己挖了多少石头；有的人看到石头以后，把它跳过去（awk），
  然后统计自己跳了多少次。

  grep 方法,-c 一行只会统计一个,-o 输出匹配到的东西
  grep -o 'WORD' <file> | wc -l
* 死机处理
  进入虚拟终端
  通常是 ~Ctrl Alt  [F2..]~,切换 tty,用 top 查看程序，然后 pkill,kill
  注销桌面系统 sudo pkill Xorg 或者 sudo restart lightdm
  
  如果切换 tty 失败，则尝试 ssh 登录此电脑
  
  重启计算机 <Ctrl><Alt><Delete>
  
  按住 Alt+SysRq，再依次按下 reisub 几个键,就会重启
  
* 写作
** 第一章 四种困难
   写作本身的困难:要不要写作
 “一本书作者”
 间歇性的作家
 不均衡的作家
 不是技巧方面的困难
 第二章 作家是什么样的人
 培养作家气质
 真假艺术家 
 作家 性格的两个方面
 “性格分离”并不总是心理变态
 双重人格的日常例子
 失望的沼泽 
 第三章 表里不一的好处 
 故事写作的过程 
 天生的作家
 意识与无意识
 作家身上的两个人 
 躲进现实面具背后 
 保留自己的想法你“最好的朋友和最严厉的批评家” 
 适当的消遣 
 朋友和书籍
 傲慢的才智 
 双重人格不冲突 
 第一个练习 
 第四章 插曲:关于听从建议 
 节省精力
 改变习惯时,想象力与意志力的对决
 替代旧习惯
 例示 
 正确的思维方式 
 第五章 约束无意识 
 无字的白日梦
 朝不费劲的写作努力
 使你的“产量”提高一倍 
 第六章 按时写作 
 开始写作
 你的承诺事关荣誉
 在你选定的任何时间开始写作
 要么成功,要么放弃
 第七章 第一次检 查
 以批评的眼光阅读你的作品 
 模仿的陷阱 
 发现你的力量给教师的一个提醒
 第八章 批评 自己的作品
 两个自我间的对话 
 建议要具体 
 批评之后的修改 
 优秀作品的条件 
 规范日常行为
 第九章 像作家一样读书
 读两遍 
 总结判断与细节分析 
 第二遍阅读 
 重要的地方 
 第十章 关于模仿
 模仿优秀的技巧 
 如何安排字数 
 对抗单调 
 选新鲜的词
 第十一章 学会重新看世界
 习惯的盲 区
 重复的原因 
 再次体验纯真的眼神 
 大街上的陌生人 
 美德的奖赏
 第十二章 原创性的源泉
 难以捉摸的品质原创性不是模仿 
 “令人吃惊的结尾” 
 诚实:原创性的源泉 
 相信你自己 
 “你的愤怒和我的愤怒” 
 一个故事,多个版本
 你不可剥夺的独特性
 一个问卷
 第十三章 作家的休闲
 文字不放假 
 无字的休闲 
 找到激励自己的方式 
 很多事都能消磨时间 
 第十四章 练习故事
 要点重述
 风格的影响力
 找到你 自己的风格
 萌芽中的故事 
 前期准备 
 充满信心地写作 
 完整的实验 
 作品搁置的时候
 批评式的阅读
 第十五章 伟大 的发现
 写作练习天才的根源 
 无意识,而不是下意识
 更高级的想象力
 与无意识和睦相处
 艺术的迷醉与作家的魔力 
 第十六章 第三个人,天才 
 作家的天性不是双重,而是三重
 神秘的天赋
 释放天才
 节奏、单调、沉默
 要擦的地板
 第十七章 作家的魔力 
 X 对于头脑就像头脑对于身体 
 保持头脑安静 
 控制练习
 故事构思逐渐成形
 魔力在运行
 诱发“艺术家的迷醉”
 告别的话 
 结论:几点实用的忠告 
 打字 
 有两台打字设备
 文具
 在书桌前:写作!
 喝咖啡上瘾的人咖啡加伴侣 
 阅读 
 购买书籍和杂志 
 参考文献 BIBLIOGRAPHY
* 开源传奇 (先用后买,淘宝商品)
* 口疮 上火，吃清淡的，买维生素 c，黄连上清片 （黄连一天两次，一次 6 片；维生素 C 一天三次，一次两片嘴含）
* 熬夜 补充能量，绿茶，花生米，杏仁，肌肉放松 
* 肯德基最划算的套餐就是周一到周五十二点到两点超值午餐
* cmake
  用来构建 c/c++ 项目
  项目需包含 CMakeLists.txt 文件
  

** 源文件夹和二进制文件夹
   CMake 可以生成构建管道 (其他类型的构建文件)
   前提是需要知道哪些是源文件夹，哪些是二进制文件夹
   二进制文件夹是 CMake 生成管道的地方，通常是在项目目录下创建一个 build 子目录
   可以创建多个使用不同构建系统或配置项的 ~build 类~ 二进制文件夹

   CMakeCache.txt
   
** 配置和生成步骤
*** 配置
  在  ~CMakeLists.txt~ 中定义构建目标
*** 生成
** 命令行运行
   -G 指定生成什么类型的管道，可以用 ~cmake --help~ 查看
   
   在 类 UNIX 环境默认生成 makefile
   #+begin_src sh
     mkdir build
     cd build
     cmake -G "Visual Studio 15 2017" ..
   #+end_src

   然后就可以构建了 ,亦可以用 cmake 来构建
   #+begin_src sh
$ make
$ make install
#+end_src
** 选项 
-S <path-to-source>
要构建的 CMake 项目的根目录的路径。
-B <path-to-build>
CMake 将用作构建目录的根目录的路径。

如果目录尚不存在，CMake 将会成功。
** CMake language
*** 命令调用
   样式为函数形式，但是参数不用逗号,而是用空格隔开
   命令名称不区分大小写
   add_executable(hello world.c) 

   if(FALSE AND (FALSE OR TRUE)) # evaluates to FALSE
*** 括号参数
    参数过长用 括号 ,算一个参数
    #+begin_verse
    message([=[
    This is the first line in a bracket argument with bracket length 1.
    No \-escape sequences or ${variable} references are evaluated.
    This is always one argument even though it contains a ; character.
    The text does not end on a closing bracket of length 0 like ]].
    It does end in a closing bracket of length 1.
    ]=])
    #+end_verse
*** 引用参数
    算一个参数
    #+begin_verse
message("This is a quoted argument containing multiple lines.
This is always one argument even though it contains a ; character.
Both \\-escape sequences and ${variable} references are evaluated.
The text does not end on an escaped double-quote like \".
It does end in an unescaped double quote.
")
    #+end_verse
*** 不带引号的参数
    多个参数
    #+begin_verse
    foreach(arg
    NoSpace
    Escaped\ Space
    This;Divides;Into;Five;Arguments
    Escaped\;Semicolon
    )
  message("${arg}")
  endforeach()
    #+end_verse
*** 变量引用¶
    ${<variable>}
    
    可以嵌套   
    ${outer_${inner_variable}_variable}
 
    环境变量 $ENV{<variable>}.
    缓存变量 $CACHE{<variable>}
*** 控制块
**** 条件 
      if()/elseif()/else()/endif() 
**** 循环
foreach()/endforeach() and while()/endwhile()
*** 命令定义
      macro()/endmacro(), and function()/endfunction()
*** 变量
    set() 和 unset()
*** 列表
    set(srcs a.c b.c c.c) # sets "srcs" to "a.c;b.c;c.c"
*** 命令
    add_executable 
    将选定的源文件添加到可执行文件中
    
    add_compile_options(<option> ...)
    添加源文件的编译选项
    
    add_custom_command
将自定义生成规则添加到生成的生成系统
* Babel 是一个帮助您在最新版本的 JavaScript 中编写代码的工具
  可以转译 es6 标准代码到 es5 格式, 并且支持 jsx 语法
* CDN( 内容分发网络) 一些公司会把他们公开的文件放置在 CDN 上供人们访问
* Ubuntu 18.04.1 挂载 ntfs 硬盘
  需要安装两个软件
#+begin_src sh
sudo apt-get install ntfs-3g
sudo apt-get install ntfs-config
#+end_src
 
打开读写权限
以下命令会弹出图形界面, 放心操作
#+begin_src js
sudo ntfs-config
#+end_src
 
 
开机自动挂载
# 找到并修改配置文件
sudo gedit /etc/fstab
 
# 添加下面的内容
#+begin_verse
/dev/sda1 /media/box ntfs-3g defaults,locale=zh_CN.UTF-8 0 0
#+end_verse
 
