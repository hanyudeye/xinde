* Hexo A fast, simple & powerful blog framework, powered by [Node.js](http://nodejs.org).
** 帮助  https://hexo.io/zh-cn/docs/writing
  创建 hexo new "My New Post"
  hexo s -g #生成并本地预览
  hexo server -p 5000 设定端口
  hexo d -g #生成并上传
** 绑定域名
   域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，
   由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，
   然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，
   这样可以保证无论是否添加www都可以访问
  [[file:image/cname.png][示例]] 
** 配置sshkey
   因为直接用用户名和密码太不安全
   
   检查本机存在的ssh秘钥  存在则有 ~/.ssh 
   生成 ssh-keygen -t rsa -C "邮件地址"
   公钥 复制到 git .ssh\id_rsa.pub
   进入个人设置 -> SSH and GPG keys -> New SSH key
   测试是否成功
   $ ssh -T git@github.com # 注意邮箱地址不用改
   
   此时你还需要配置：
$ git config --global user.name "liuxianan"// 你的github用户名，非昵称
$ git config --global user.email  "xxx@qq.com"// 填写你的github注册邮箱
** 安装
   $ npm install hexo-cli -g
   $ npm install -g hexo
** 创建博客
   $ hexo init blog
   $ cd blog
** 开启服务
   $ hexo server
** Create a new post
   $ hexo new "Hello Hexo"
** Generate static files
   $ hexo generate
** 发布
   hexo d -g #生成并上传
   deploy
** 清理 hexo clean来清理一下public的内容，然后再来重新生成和发布。
** 上传到github
首先，ssh key肯定要配置好。
其次，配置_config.yml中有关deploy的部分：

正确写法：
#+BEGIN_SRC yml
deploy:
  type: git
  repository: git@github.com:liuxianan/liuxianan.github.io.git
  branch: master
#+END_SRC
还需要安装一个插件：
npm install hexo-deployer-git --save

hexo d
** 保留CNAME、README.md等文件
   一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：
   由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。
   保留CNAME、README.md等文件 这一节，
   只要在_config.yml做如下配置就好了：
   skip_render: README.md
** 常用命令
常见命令

hexo new "postName" #新建文章
hexo new page "pageName" #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）
hexo deploy #部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本
缩写：

hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
组合命令：

hexo s -g #生成并本地预览
hexo d -g #生成并上传
* 资源文件夹
资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 ![](/images/image.jpg) 的方法访问它们。
文章资源文件夹
对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。

_config.yml
post_asset_folder: true
当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。

相对路径引用的标签插件
通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。

{% asset_path slug %}
{% asset_img slug [title] %}
{% asset_link slug [title] %}
比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](/example.jpg) ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）

正确的引用图片方式是使用下列的标签插件而不是 markdown ：

{% asset_img example.jpg This is an example image %}
通过这种方式，图片将会同时出现在文章和主页以及归档页中。
* 插件
** 站长统计 不蒜子 
*** 总计
    文件 /home/wuming/git/web/blog/themes/yilia/layout/_partial/footer.ejs
    添加
    <script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
    <span id="busuanzi_container_site_pv">本站总访问量<span id="busuanzi_value_site_pv"></span>次</span>
*** 单页面
    文件    /home/wuming/git/web/blog/themes/yilia/layout/_partial/article.ejs
    添加
    <% if ( !index ){ %>
		<span class="archive-article-date">
		阅读量 <span id="busuanzi_value_page_pv"></span>
		</span>
    <% } %>
* 主题
** NexT 参考 https://notes.iissnan.com/
*** 安装 
**** 1.下载最新 release 版本
     #+BEGIN_SRC shell
            $ mkdir themes/next
            $ curl -s https://api.github.com/repos/theme-next/hexo-theme-next/releases/latest | grep tarball_url | cut -d '"' -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1
     #+END_SRC
**** 2.指定branch 使用 git 安装：
     $ git clone --branch v6.0.0 https://github.com/theme-next/hexo-theme-next themes/next
**** 3.下载最新 master 分支
     $ git clone https://github.com/theme-next/hexo-theme-next themes/next
     
#+BEGIN_SRC shell
获取 tags 列表：

$ cd themes/next
$ git tag -l
…
v6.0.0
v6.0.1
v6.0.2
例如，假设你想要切换到 v6.0.1 这一 tag 指向的 release 版本。输入如下指令：

$ git checkout tags/v6.0.1
Note: checking out 'tags/v6.0.1'.
…
HEAD is now at da9cdd2... Release v6.0.1
然后，假设你想要切换回 master 分支，输入如下指令即可：

$ git checkout master
#+END_SRC
**** 完成配置
     在 hexo 根配置文件 _config.yml 中设置你的主题：
     theme: next
*** Hexo的Next主题配置
    使用Next主题
  将下载的代码放在myBlog/next目录下
  设置站点myBlog/_config.yml的theme字段值为next
  生成新页面hexo g
  开启服务hexo s --debug
  发布代码hexo d
  注：此时登录网站，发现是空白的，打开控制台，提示很多vendors目录下的文件404，解决办法是将next主题下即myBlog/themes/next/source下的vendors目录名改为lib，并修改myBlog/themes/next/_config.yml的_internal: vendors改为_internal: lib。

  参考：iissnan的回答

  主题配置
  主题风格设定
  通过修改next主题下的_config.yml的scheme字段，配置不同的风格。

  # Schemes
  scheme: Muse
  #scheme: Mist
  #scheme: Pisces
  本站点使用的是默认的Muse，显示效果如下：



  菜单设置
  通过修改next主题下的_config.yml的menu字段，选定显示的菜单项。

  menu:
    home: /
    categories: /categories
    about: /about
    archives: /archives
    tags: /tags
    #commonweal: /404.html
  其中，home代表主页，categories代表分类页，about代表关于页面，archives代表归档页，commonweal代表404页面（page not found时候显示的页面）。

  菜单项文本修改是在对next主题下的language文件夹下的文件进行修改，若当前语言是简体中文，直接修改language/zh-Hans.yml里的对应字段即可。

  本站点显示主页，分类页，关于页面和归档页。

  头像设置
  在主题下的source/images/下放置头像文件avatar.gif即可。

  设置文章代码主题
  Next主题总共支持5种主题，默认主题是白色的normal。通过修改next主题下的_config.yml的highlight字段，来设置代码主题。

  本站点使用的是night主题。即令highlight为night。

  添加标签页面
  前面通过修改next主题下的_config.yml文件中的menu选项，可以在主页面的菜单栏添加标签选项，但是此时点击标签，跳转的页面会显示page not found。

  添加标签页面的具体方法是：

  新建页面
  输入如下命令：

  $ cd myBlog
  $ hexo new page tags
  输入命令后，在myBlog/source下会新生成一个新的文件夹tags，在该文件夹下会有一个index.md文件。

  设置页面类型
  在上步新生成的myBlog/source/tags/index.md中添加type: "tags"，index.md文件内容如下：

  ---
  title: tags
  date: 2016-11-15 19:10:05
  type: "tags"
  ---
  设置具体文章的tags
  当要为某一篇文章添加标签，只需在myBlog/source/_post目录下的具体文章的tags中添加标签即可，如：

  ---
  title: 基于Hexo和Github搭建博客
  date: 2016-11-09
  tags: [npm, hexo, github]
  categories: 搭建博客
  ---
  本站添加为标签后的效果如下：



  添加分类页面
  步骤与添加标签页面类似，具体如下：

  新建页面
  输入如下命令：

  $ cd myBlog
  $ hexo new page categories
  输入命令后，在myBlog/source下会新生成一个新的文件夹categories，在该文件夹下会有一个index.md文件。

  设置页面类型
  在上步新生成的myBlog/source/categories/index.md中添加type: "categories"，index.md文件内容如下：

  ---
  title: categories
  date: 2016-11-15 19:11:13
  type: "categories"
  ---
  设置具体文章的categories
  当要为某一篇文章添加分类，只需在myBlog/source/_post目录下的具体文章的categories中添加分类即可，如：

  ---
  title: 基于Hexo和Github搭建博客
  date: 2016-11-09
  tags: [npm, hexo, github]
  categories: 搭建博客
  ---
  本站添加为标签后的效果如下：



  添加关于我页面
  步骤与添加标签页面类似，具体如下：

  新建页面
  $ cd myBlog
  $ hexo new page about
  输入命令后，在myBlog/source下会新生成一个新的文件夹about，在该文件夹下会有一个index.md文件。

  修改about/index.md
  本站点index.md如下：

  ---
  title: about
  date: 2016-11-15 19:08:50
  ---
  ## 关于我

  一只学习前端的小菜鸟，欢迎分享知识。

  From XDU

  QQ：847909475
  Email: 847909475@qq.com
  效果如下：



  引入第三方服务
  加入评论功能
  本站点使用的是多说。加入评论功能的步骤如下：

  登录多说，填写表单，创建站点


  图片中红框圈中的框中内容就是下一步duoshuo_shortname字段的值

  添加duoshuo_shortname
  在站点的myBlog/_config.yml中加入duoshuo_shortname字段，值为第一步红框里的内容

  加入评论后效果如下：



  加入分享功能
  本站点使用的是多说。加入分享功能的步骤如下：

  在站点的myBlog/_config.yml中加入duoshuo_share字段，值为true。

  加入分享后效果如下：


  加入站点内容搜索功能
  本站点使用的是Local Search。加入站点内容搜索功能步骤如下：

  安装hexo-generator-searchdb
  $ npm install hexo-generator-searchdb --save
  注意：安装时应在站点根目录下，即myBlog目录下

  添加search字段
  在站点myBlog/_config.yml中添加search字段，如下：

  search:
    path: search.xml
    field: post
    format: html
    limit: 10000
  效果如下：



  加入数据统计与分析功能
  本站点使用的是百度统计。加入数据统计与分析功能步骤如下：

  注册站长账号并登陆
  在这里注册站长账号，并填写信息，网站域名和网站首页以下图为例来填写，注册完成后并登陆。


  在跳转的页面中会显示下图，复制hm.js后的id值


  添加baidu_analytics字段

  在站点myBlog/_config.yml中添加search字段，值为上步复制的id值

  至此，该功能已成功加入，大约过20min后在百度统计上可以看到站点的访问情况，如下图：

*** ### 提交合并请求

提交合并请求前，请再次确认您已经查看了[你需要了解的](#before-submitting-an-issue)内容，避免提交重复的合并请求。确定相关仓库后，创建合并请求。更多详细操作过程可以查看[帮助文档](https://help.github.com/articles/creating-a-pull-request/)。

1. 进入 [hexo-theme-next](https://github.com/theme-next/hexo-theme-next) 源仓库，点击`Fork`。
2. 进入到已经`Fork`的个人仓库（`https://github.com/username/hexo-theme-next`），点击 **Clone or download** 并复制该仓库地址。选择本地文件夹，并打开 Git Bash ，输入如下命令并回车，即可完成仓库克隆。
    ```bash
    $ git clone git@github.com:username/hexo-theme-next.git
    ```
3. 进入 `hexo-theme-next` 本地文件夹，并创建分支。
    ```bash
    $ cd hexo-theme-next
    $ git checkout -b patchname
    ```
4. 本地修改并测试，推送分支。
    ```bash
    $ git add .
    $ git commit -m "add commit messamge"
    $ git push origin patchname
    ```
5. 进入 `fork` 后的仓库，切换到新提交的 `patchname` 分支，点击 `patchname` 分支右侧的 **New pull request** 。在 PR 对比页面，正确选择你需要发起合并请求的分支，然后点击 **Create pull request** ，建立一个新的合并申请并描述变动。

请认真遵守如下指南，这样我们才能更好地理解你的合并请求：

创建合并请求时，请遵守[编码规范](#coding-rules)和[提交信息规范](#commit-messages-rules)。
在标题中清晰准确地描述你的合并请求，不要加入 Issue 编号。
按照[模板](../../.github/PULL_REQUEST_TEMPLATE.md)尽可能的详细填写相关信息。
合并请求需要在所有主题样式中测试通过，并提供所表现功能的样例，如图像文件、在线演示网址等等。
<a name="creating-releases"></a>
  
