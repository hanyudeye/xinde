http://zjy.conansoft.cn/manager/home/index.html
wm
123546

好网站http://www.cppblog.com/vczh/archive/2009/04/16/80189.html

math.h 应该是声明，实现应该在 libm.so 中，然后你可以查找一下 libm.so 包的包名，发现它位于 libc6-dev 这个包，然后查找对应的源代码，如果是 Debian/Ubuntu 可以用 apt-get source libc6-dev 来下载源代码到当前目录，之后便可以查看源代码了。


然后尝试自己写个最简单的网站（登录，文章分类、发表、前后台分开等，一定要自己写，感觉不一样的），然后就是研究一个基于ci的项目
（我是看的pyrocms和ion-auth，国内的dilicms和stblog也是不错的），然后你就…入门了…^_^



	
jQuery是一个JavaScript库。简化javascript编程。
精简的供使用，压缩的供调试，测试
CDN的全称是Content Delivery Network，即内容分发网络.
google的CND 地址<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.0/jquery.min.js"></script>
 微软<script type="text/javascript" src="http://ajax.microsoft.com/ajax/jquery/jquery-1.4.min.js"></script>
 许多用户在访问其他站点时，已经从谷歌或微软加载过 jQuery。所有结果是，当他们访问您的站点时，会从缓存中加载 jQuery，这样可以减少加载时间。
 同时，大多数 CDN 都可以确保当用户向其请求文件时，会从离用户最近的服务器上返回响应，这样也可以提高加载速度。
 
 对象种类
	html 元素$("p").click(function(){$(this).hide();}
		 ID，用id属性指定	$(document).ready(function(){
		$("button").click(function(){
		$(this).hide();			});	});
		$(this)当前元素
		类$(".test").hide() ，用class指定
 
 $(document).ready(function(){

--- jQuery functions go here ----

});文档就绪函数，确保文档全部加载才执行jQuery
jQuery使用css选择器来选取HTML元素。$("p#demo") p元素的id为demo的对象


jQuery 属性选择器

jQuery 使用 XPath 表达式来选择带有给定属性的元素。
XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。
这里的路径跟Unix路径差不多，是目录层次结构的/a/b[1]  /[last()-1] /title[@lang] 	选取所有拥有名为 lang 的属性的 title 元素。
$("[href]") 选取所有带有 href 属性的元素。
$("[href='#']") 选取所有带有 href 值等于 "#" 的元素。
$("[href!='#']") 选取所有带有 href 值不等于 "#" 的元素。
$("[href$='.jpg']") 选取所有 href 值以 ".jpg" 结尾的元素。
jQuery CSS 选择器

jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性。
下面的例子把所有 p 元素的背景颜色更改为红色：
实例
$("p").css("background-color","red");

可以把自己的函数放到一个单独的文件中，引入顺序要在调用的库下面

jQuery事件
$(document).ready(function) 	将函数绑定到文档的就绪事件（当文档完成加载时）
$(selector).click(function) 	触发或将函数绑定到被选元素的点击事件
$(selector).dblclick(function) 	触发或将函数绑定到被选元素的双击事件
$(selector).focus(function) 	触发或将函数绑定到被选元素的获得焦点事件
$(selector).mouseover(function) 	触发或将函数绑定到被选元素的鼠标悬停事件
方法
$("p").hide(speed,callback).show();
speed隐藏速度 "slow|fast"，毫秒单位
toggle()此方法一会调用hide()方法，一会调用show()方法，callback回调函数
通过 jQuery，您可以实现元素的淡入淡出效果。

jQuery 拥有下面四种 fade 方法：

    fadeIn()
    fadeOut()
    fadeToggle()
    fadeTo()
jQuery 动画 - animate() 方法

jQuery animate() 方法用于创建自定义动画。
语法：

$(selector).animate({params},speed,callback);
jQuery stop() 方法

jQuery stop() 方法用于停止动画或效果，在它们完成之前。

stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。
jQuery append() 方法在被选元素的结尾插入内容。
实例

$("p").append("Some appended text.");
1毫秒等于一千分之一秒
1微秒等于一百万分之一秒（10-6秒）
1纳秒等于十亿分之一秒（10-9秒）
1皮秒等于一万亿分之一秒（10-12秒）
 选择器
    事件
    效果
    文档操作
    属性
    CSS
    AJAX
    遍历
    数据
    DOM 元素
    核心
console.log(varname);用于浏览器控制台调试
	
AJAX 是与服务器交换数据的艺术，它在不重载全部页面的情况下，实现了对部分网页的更新。
AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）,jQuery 团队为我们解决了这个难题，我们只需要一行简单的代码，就可以实现 AJAX 功能
$(selector).load('filename','返回状态’)

jQuery.ajax() 	执行异步 HTTP (Ajax) 请求。
htmlobj=$.ajax()
	htmlobj=$.ajax({url:"demo.txt",async:false});
  $("#myDiv").html(htmlobj.responseText);"回应文本"
  ajax() 方法通过 HTTP 请求加载远程数据。
  jQuery.ajax([settings])
settings 	可选。用于配置 Ajax 请求的键值对集合。可以通过 $.ajaxSetup() 设置任何选项的默认值。


success    类型：Function    请求成功后的回调函数。    参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。    这是一个 Ajax 事件。
	$.ajax(
	{
		type:"post",
		url:'index.php',
		data:config,
		datatype:"html",
		success: function(){alert('ok');}
	}

.ajaxComplete() 	当 Ajax 请求完成时注册要调用的处理程序。这是一个 Ajax 事件。
.ajaxError() 	当 Ajax 请求完成且出现错误时注册要调用的处理程序。这是一个 Ajax 事件。
.ajaxSend() 	在 Ajax 请求发送之前显示一条消息。
jQuery.ajaxSetup() 	设置将来的 Ajax 请求的默认值。
.ajaxStart() 	当首个 Ajax 请求完成开始时注册要调用的处理程序。这是一个 Ajax 事件。
.ajaxStop() 	当所有 Ajax 请求完成时注册要调用的处理程序。这是一个 Ajax 事件。
.ajaxSuccess() 	当 Ajax 请求成功完成时显示一条消息。
jQuery.get() 	使用 HTTP GET 请求从服务器加载数据。
jQuery.getJSON() 	使用 HTTP GET 请求从服务器加载 JSON 编码数据。
jQuery.getScript() 	使用 HTTP GET 请求从服务器加载 JavaScript 文件，然后执行该文件。
.load() 	从服务器加载数据，然后把返回到 HTML 放入匹配元素。
jQuery.param() 	创建数组或对象的序列化表示，适合在 URL 查询字符串或 Ajax 请求中使用。
jQuery.post() 	使用 HTTP POST 请求从服务器加载数据。
.serialize() 	将表单内容序列化为字符串。
.serializeArray() 	序列化表单元素，返回 JSON 数据结构数据。



///manager是后端控制器

 <video> 和 </video> 标签
 
