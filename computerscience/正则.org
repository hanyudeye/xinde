#+TITLE: 正则简介
#+DESCRIPTION: 正则简介
#+TAGS: 正则
#+CATEGORIES: 软件使用

* 正则表达式 
  找到符合某种规则的文字，这种规则叫 ~正则~ 。
** 任何单个文字
   ~.~  可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；
** 组里面的文字
   ~[ ]~  定义一个字符集合；[a-z]
   排除 ~[^]~
   
** 特定文字
   | 元字符 | 说明                 |
   | [\b]   | 回退（删除）一个字符 |
   | \f     | 换页符               |
   | \n     | 换行符               |
   | \r     | 回车符               |
   | \t     | 制表符               |
   | \v     | 垂直制表符           |

   \r\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \n。

   \r\n\r\n 可以匹配 Windows 下的空白行，因为它将匹配两个连续的行尾标签，而这正是两条记录之间的空白行；
 
   数字
   | \d  | 数字字符，等价于 [0-9]  |
   | \D  | 非数字字符，等价于 [^0-9]   |

   字母数字元字符
   | \w  |  大小写字母，下划线和数字，等价于 [a-zA-Z0-9\_] |
   |  \W |  对 \w 取非 |

   空白字符
   | \s | 任何一个空白字符，等价于 [\f\n\r\t\v] |
   | \S | 对 \s 取非                            |

   \x 匹配十六进制字符，\0 匹配八进制，例如 \x0A 对应 ASCII 字符 10，等价于 \n。
** 重复性文字
   ~+~  匹配 1 个或者多个字符
   ~*~ 匹配 0 个或者多个
   ~?~  匹配 0 个或者 1 个
** 特定位置的文字
*** 单词边界
    \b 只匹配位置，不匹配字符，因此 \babc\b 匹配出来的结果为 3 个字符。
*** 字符串边界
    ^ 行开头
    $ 行结尾
* 子规则
  使用  ~( )~  定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。

 #+begin_src regexr
 (19|20)\d{2}
 #+end_src

 匹配结果

 #+begin_verse
 1.  1900
 2.  2010
 3. 1020
 #+end_verse

