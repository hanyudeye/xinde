#+TITLE: 计算机工具
#+DESCRIPTION: 可供用户使用的计算机工具
#+DATE: <2019-06-02 19:45:35>
#+TAGS: shell,ubuntu
#+CATEGORIES: 软件使用

* GNU Coreutils [GNU 实用程序]
** 简介
  此 GNU 实用程序 大部分 与 ~POSIX~ 标准洁容。
  这份手册是前人写的手册的综合整理
  
#+HTML: <!-- more -->
** 通用选项 [ 以下所有选项都指向实用程序本身 ]
   #+begin_verse
   用法:  Name [选项] <操作对象>
   <操作对象>  一般是必须的，除非是解释器什么的
   #+end_verse
  
*** --help  [ 打印可用选项的简单介绍 ]
*** --version [ 显示版本信息 ]
*** -- [ 后面跟的内容都视为操作对象而非选项 ]
** 输出整个文件
   这些命令读取和写入整个文件，或者以某种方式转换它们
   : 一般写入的地方是显示器，当然你可以输出到文件
*** cat [连接和写入文件] 
    cat [OPTION] [FILE]...

    #+begin_verse
    -b 显示行号，空行不显示行号
    -E 行尾显示 "$"
    -n 所有行都显示行号,含空行
    -s 抑制多行空白的重复输出，只输出一行
    -v 显示除 LFD(换行) 和 TAB(制表) 之外的控制字符
    #+end_verse
    
    例子
    #+begin_src sh
      cat a - b
    #+end_src
    先显示文件 ~a~ 的内容，然后显示你键盘输入的内容 ,@@html:<kbd>@@ C-d @@html:</kbd>@@ 结束输入后，显示 ~b~ 的内容
    
*** tac [ 以相反方式连接和写入文件 ]
*** nl    [ 行编号和写文件 ]
    格式
    #+begin_verse
    \:\:\:
    start of header;
    \:\:
    start of body;
    \:
    start of footer.
    #+end_verse

只有包含在 body 中的内容才能编号
#+begin_verse
-b STYLE
     'a'    空行也编号
     't'     只编号非空行
     'n'    不编号
#+end_verse

*** od 	  	[ 以八进制或其他格式写入文件 ]
    选择进制
    #+begin_verse
    ‘-A RADIX’
    ‘--address-radix=RADIX’
    Select the base in which file offsets are printed.  RADIX can be
    one of the following:
    
     ‘d’
          decimal;
     ‘o’
          octal;
     ‘x’
          hexadecimal;
     ‘n’
          none (do not print offsets).
    #+end_verse

*** base32 
    以 base32 编码打印
*** base64  
    将数据转换为可打印数据
** 文件部分的输出
*** head：输出文件的第一部分
*** tail：输出文件的最后一部分
*** split：将文件拆分成碎片
*** csplit：将文件拆分为上下文确定的部分
** 文件数据统计
*** wc：打印换行符，单词和字节计数
    #+begin_verse
    -c 字节数
    -m 字数
    -w 词组
    -l 行数
    #+end_verse
    
*** sum：打印校验和和块计数 [  文件内容相同，打印的校验和也就相同 ]
    计算 16-bit checksum
*** cksum：打印 CRC 校验和和字节计数
*** b2sum：打印或检查 BLAKE2 摘要
*** md5sum：打印或检查 MD5 摘要
*** sha1sum：打印或检查 SHA-1 摘要
*** stat    打印文件信息节点(inode)内容 [ 文件属性 ]
** 对文件进行排序
*** sort  [ 排序文本文件 ] 
*** uniq  [ Uniquify 文件 ]
** 文件查找
*** rg  
    #+begin_src sh
    $ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/11.0.1/ripgrep_11.0.1_amd64.deb
    $ sudo dpkg -i ripgrep_11.0.1_amd64.deb
    #+end_src
     
*** find
    : find [path...] [expression]
    在目录里查找符合表达式的文件或目录 ,[ 后面还能加表达式进一步处理 ]
    : 第一个参数是路径
    
    指定需满足的条件 
    | name        | 文件名或目录名匹配                   |
    | iname       | 文件名或目录名匹配(大小写不同也可以) |
    | path        | 文件名或目录名匹配  ,同上差不多的    |
    | regex       | 名字匹配正则表达式                   |
    | maxdepth N  | 最大目录深度                         |
    | mindepth  N | 最少目录深度                         |
    | perm NNN    | 权限匹配                             |
    | user        | 文件主                               |
    | group       | 文件组                               |
    | empty       | 长度为 0                             |

    #+begin_src sh
      # 查找当前目录或者子目录下所有.txt 文件，但是跳过子目录 sk
      find . -path "./sk" -prune -o -name "*.txt" -print
    #+end_src


   时间戳
    + 访问时间 （-atime/天，-amin/分钟）：用户最近一次访问时间。
    + 修改时间 （-mtime/天，-mmin/分钟）：文件最后一次修改时间。
    + 变化时间 （-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。
      
  文件尺寸 size 
    + b —— 块（512 字节）
    + c —— 字节
    + w —— 字（2字节）
    + k —— 千字节
    + M —— 兆字节
    + G —— 吉字节
    
    #+begin_src sh
      # 搜索大于 10KB 的文件
      find . -type f -size +10k
    #+end_src


    条件连接符 
    | o | 或             |
    | ! | 非             |
    | a | 与，其实没必要,默认就是与的 |

    type 匹配 
    | f | 普通文件 |
    | l | 符号连接 |
    | d | 目录     |
    | c | 字符设备 |
    | b | 块设备   |
    | s | 套接字   |
    | p | Fifo     |

    
**** 后续操作
    删除 delete
    执行命令 exec   
    #+begin_src sh
      #  {} 用于与 -exec 选项结合使用来匹配所有文件，然后会被替换为相应的文件名。
      find . -type f -user root -exec chown tom {} \;
    #+end_src
    
** 字段操作
*** cut  按列打印文件
    -c N  打印第 N 列
*** paste 文件行合并
    合并两个文件 ,不是尾部插入,而是每行合并
    
    -s 把文件多行合并成一行
*** join 只合并不同部分,行首必须相同
    #+begin_verse
    $ cat file1
    a 1
    b 2
    e 5
    
    $ cat file2
    a X
    e Y
    f Z
    
    $ join file1 file2
    a 1 X
    e 5 Y

    #+end_verse
** 目录操作
** 用户信息
*** id 
*** logname
*** whoami
*** users
*** who
** 用户管理
*** 添加用户 useradd 
     useradd -m -g users -G wheel -s /bin/bash ikke 
     | d<登入目录> | 指定用户登入时的启始目录           |
     | D           | 变更预设值                         |
     | e<有效期限> | 指定帐号的有效期限                 |
     | f<缓冲天数> | 指定在密码过期后多少天即关闭该帐号 |
     | g<群组>     | 指定用户所属的群组                 |
     | G<群组>     | 指定用户所属的附加群组             |
     | m           | 自动建立用户的登入目录             |
     | M           | 不要自动建立用户的登入目录         |
     | n           | 取消建立以用户名称为名的群组       |
     | r           | 建立系统帐号                       |
     | s<shell>    | 指定用户登入后所使用的 shell       |
     | u<uid>      | 指定用户 id                        |
*** 组 
    
    #+begin_verse
    创建组织 groupadd 
    删除组织 groupdel
    #+end_verse
    
*** 忘记密码
    1. 启动时在启动的 linux 系统（或 grub 到计时结束前）上按下“e”键
    2. 选中类似“于 kernel /boot/vmlinuz-2.4.18-14 ”按“e”键
    3. 修改命令行，加入 linux single，结果如下：
       #+begin_src sh
         kernel /vmlinuz-2.6.18-8.el5  ro root=LABEL=/ rhgb quiet linux single
       #+end_src
    4. 回车返回，按 b 键,进入命令行
    5. #vi /etc/shadow 编辑 shadow 将第一行，即以 root 开头的一行中 root:后和下一个:前的内容删除
    1. #reboot 重启，root 密码为空
*** 用户通信 
    #+begin_src sh
      write USERNAME 终端
      write USERNAME  pts/0
    #+end_src
    
*** 拒绝通信 mesg n 
*** 改变登录 shell chsh 
** 系统信息
*** date 
    打印或设置系统日期和时间
*** arch 
    打印机硬件名称 
*** nproc  
    打印可用处理器的数量
*** uname
    打印系统信息 
*** hostname
    打印或设置系统名称 
*** hostid 
    打印数字主机标识符 
*** uptime
    打印系统正常运行时间和负载 
*** lsmod
    列出加载的内核模块 
** 设备管理
*** 查看设备 ls /dev/
*** 磁盘设备 
**** 显示磁盘信息 df
**** 创建, 备份磁盘 dd
     推介备份块设备,字符设备慢
***** 选项
     | bs=<字节数>    | 将 ibs（输入）与 obs（输出）设成指定的字节数； |
     | cbs=<字节数>   | 转换时，每次只转换指定的字节数；               |
     | conv=<关键字>  | 指定文件转换的方式；                           |
     | count=<区块数> | 仅读取指定的区块数；                           |
     | ibs=<字节数>   | 每次读取的字节数；                             |
     | obs=<字节数>   | 每次输出的字节数；                             |
     | of=<文件>      | 输出到文件；                                   |
     | seek=<区块数>  | 一开始输出时，跳过指定的区块数；               |
     | skip=<区块数>  | 一开始读取时，跳过指定的区块数；               |
     
     块大小
    | 单元大小         | 代码 |
    | 字节（1B） 默认  | c    |
    | 字节（2B）       | w    |
    | 块（512B）       | b    |
    | 千字节（1024B）  | k    |
    | 兆字节（1024KB） | M    |
    | 吉字节（1024MB） | G    |

***** 操作
      #+begin_src sh
        #创建一个 1 M 的文件
        dd if=/dev/zero of=sun.txt bs=1M count=1
      #+end_src
      : /dev/zero 是字符设备，推介使用块设备
      
      将本地的/dev/hdb 整盘备份到/dev/hdd
      #+begin_src sh
        dd if=/dev/hdb of=/dev/hdd
      #+end_src

      将备份文件恢复到指定盘
      #+begin_src sh
        dd if=/root/image of=/dev/hdb
      #+end_src
      
      软盘
       #+begin_src sh
         dd if=/dev/zero of=emptydisk.img bs=512 count=2880
         # 或者
         dd if=/dev/fd0 of=disk.img count=1 bs=1440k
       #+end_src

      随机数
      #+begin_src sh
      dd if=/dev/urandom bs=1 count=15|base64
      #+end_src
      
**** 磁盘分区 parted/fdisk
**** 分区格式化 创建文件系统 mkfs
     mkfs -V -t msdos -c /dev/hda5
     | t | 指定要建立何种文件系统                      |
     | v | 显示版本信息与详细的使用方法                |
     | V | 显示简要的使用方法                          |
     | c | 在制做档案系统前，检查该 partition 是否有坏轨 |
**** 更新内核的硬盘分区表信息 partprobe
**** 加载文件系统 mount
     sudo mount -t smbfs -o username=user,password='' //10.0.1.1/windowsshare /mnt 浏览 windows 共享文件夹
     
***** 文件系统类型 -t vfstype 会自动判断 
      | 光盘或光盘镜像             | iso9660 |
      | DOS fat16 文件系统         | msdos   |
      | Windows 9x fat32 文件系统  | vfat    |
      | Windows NT ntfs 文件系统   | ntfs    |
      | Mount Windows 文件网络共享 | smbfs   |
      | UNIX(LINUX) 文件网络共享   | nfs     |
***** 主要用来描述设备或档案的挂接方式 -o options
      | loop | 用来把一个文件当成硬盘分区挂接上系统 |
      | ro   | 采用只读方式挂接设备                 |
      | rw   | 采用读写方式挂接设备                 |
**** 自动加载配置文件 fstab 修改 fstab 后, 执行 mount -a 生效
***** 挂载的限制
      根目录是必须挂载的，而且一定要先于其他 mount point 被挂载。
      
      所有挂载点在同一时间只能被挂载一次
      
      所有分区在同一时间只能挂载一次
      
      若进行卸载，必须将工作目录退出挂载点（及其子目录）之外。
***** 参数
   # <file system> <mount point>   <type>  <options>       <dump>  <pass>

****** 第一列：Device：磁盘设备文件或者该设备的 Label 或者 UUID
******** 1）查看分区的 label 和 uuid
        Label 就是分区的标签，在最初安装系统时填写的挂载点就是标签的名字。可以通过查看一个分区的 superblock 中的信息找到 UUID 和 Label name。

        例如:我们要查看/dev/sda1 这个设备的 uuid 和 label name
        sudo dumpe2fs -h /dev/sda1

        对于 ntfs 文件系统 
        sudo ntfsinfo -m /dev/sdb1 
 
        只查看 UUID
        sudo blkid /dev/vda1

        要显示分区的基本信息请运行：
        $ lsblk -f
******** 2）使用设备名和 label 及 uuid 作为标识的不同
        使用设备名称（/dev/sda)来挂载分区时是被固定死的，一旦磁盘的插槽顺序发生了变
        化，就会出现名称不对应的问题。因为这个名称是会改变的。

        不过使用 label(volume name)挂载就不用担心插槽顺序方面的问题。不过要随时注意你的 Label name。至
        于 UUID，每个分区被格式化以后都会有一个 UUID 作为唯一的标识号。使用 uuid 挂载的话就
        不用担心会发生错乱的问题了。

****** 第二列：Mount point：设备的挂载点，就是你要挂载到哪个目录下。
****** 第三列：filesystem：磁盘文件系统的格式，包括 ext2、ext3、reiserfs、nfs、vfat 等
****** 第四列：parameters：文件系统的参数
       Async/sync 设置是否为同步方式运行，默认为 async

       auto - 在启动时或键入了 mount -a 命令时自动挂载。
       noauto - 只在你的命令下被挂载。

       rw/ro 是否以以只读或者读写模式挂载

       exec/noexec 限制此文件系统内是否能够进行"执行"的操作

       user/nouser 是否允许用户使用 mount 命令挂载

       suid/nosuid 是否允许 SUID 的存在

       Usrquota 启动文件系统支持磁盘配额模式

       Grpquota 启动文件系统对群组磁盘配额模式的支持

       sync - I/O 同步进行。
       async - I/O 异步进行。
    
       Defaults 同时具有 rw,suid,dev,exec,auto,nouser,async 等默认参数的设置
****** 第五列：能否被 dump 备份命令作用：dump 是一个用来作为备份的命令。通常这个参数的值为 0 或者 1
       0 代表不要做 dump 备份
       1 代表要每天进行 dump 的操作
       2 代表不定日期的进行 dump 操作
****** 第六列：是否检验扇区：开机的过程中，系统默认会以 fsck 检验我们系统是否为完整（clean）。
       0 不要检验
       1 最早检验（一般根目录会选择）
       2 1 级别检验完成之后进行检验
**** umount
**** 交换分区
***** 创建 Linux 交换分区 mkswap
***** 启用交换分区： # swapon -s
***** 禁用交换分区： # swapoff /dev/sda7
***** 用新 UUID 重新创建交换分区： # mkswap -U random /dev/sda7
***** 激活交换分区: # swapon /dev/sda7

*** 蓝牙 blueman
*** 磁盘 
**** 磁盘文件名(操作对象命名规范)
     IDE 磁盘：/dev/hd[a-d]
     SATA/SCSI/SAS 磁盘：/dev/sd[a-p]
**** 分区格式
***** MBR
      MBR 中，第一个扇区最重要，里面有主要开机记录（Master boot record, MBR）及分区
      表（partition table），其中主要开机记录占 446 bytes，分区表占 64 bytes。

      分区表只有 64 bytes，最多只能存储 4 个分区，这 4 个分区为主分区（Primary）和扩
      展分区（Extended）。其中扩展分区只有一个，它使用其它扇区用记录额外的分区表，因
      此通过扩展分区可以分出更多分区，这些分区称为逻辑分区。
***** GPT
      不同的磁盘有不同的扇区大小，例如 512 bytes 和最新磁盘的 4 k。GPT 为了兼容
      所有磁盘，在定义扇区上使用逻辑区块地址（Logical Block Address, LBA），LBA
      默认大小为 512 bytes。

      GPT 第 1 个区块记录了主要开机记录（MBR），紧接着是 33 个区块记录分区信息，
      并把最后的 33 个区块用于对分区信息进行备份。这 33 个区块第一个为 GPT 表头
      纪录，这个部份纪录了分区表本身的位置与大小和备份分区的位置，同时放置了分区
      表的校验码(CRC32)，操作系统可以根据这个校验码来判断 GPT 是否正确。若有错误，
      可以使用备份分区进行恢复。

      GPT 没有扩展分区概念，都是主分区，每个 LAB 可以分 4 个分区，因此总共可以分
      4 * 32 = 128 个分区。MBR 不支持 2.2 TB 以上的硬盘，GPT 则最多支持到
      2<sup>33</sup> TB = 8 ZB。
*** 模块 
    - rmmod 从运行的内核中移除指定的内核模块
    - insmod 将给定的模块加载到内核中
    - lsmod 显示已载入系统的模块
** 修改环境命令
*** chroot ：	  	修改根目录。
*** env      ：	  	修改环境变量。
*** nohup ：	  	免疫挂断。
*** stdbuf ：	  	修改标准流的缓冲。
*** timeout ：	  	运行时间限制。
** 任务处理 (进程处理)
   #+begin_verse
   进程:  一个个体操作数据。数据包括 (设备, 文件)，不能操作其他工具(只能通信)
   : 都是由系统监视的
   
   线程，相对自由一点，条条框框少一点。

   作业(job): 一种可控的(挂起，执行)进程,在 shell 交互中才需要(shell 只有一个交互界面,放在前台会占用命令输入界面 )，图形界面不需要。
   
   shell 将每个管道分配给一个 作业(job)。 它保存一个当前运行的作业表，可以用
   jobs 命令来列出。
   #+end_verse

*** 进程列表 ps 
**** 属性 
     | UID         | 用户 ID                                 |
     | PID         | 进程 ID                                 |
     | PPID        | 父进程 ID                               |
     | C           | CPU 占用率                              |
     | STIME       | 开始时间                                |
     | TTY         | 开始此进程的 TTY----终端设备            |
     | TIME        | 此进程运行的总时间                      |
     | CMD         | 命令名                                  |
     | 进程 ID %CPU | 进程占用 CPU 百分比                       |
     | %MEM        | 进程占用内存百分比                      |
     | VSZ         | 虚拟内存占用大小 单位：kb（killobytes） |
     | RSS         | 实际内存占用大小 单位：kb（killobytes） |
     | STAT        | 进程状态                                |
     | START       | 进程启动时刻                            |
     |             |                                         |
**** 功能 
     | e | 显示所有进程                             |
     | f | 全格式                                   |
     | h | 不显示标题                               |
     | l | 长格式                                   |
     | w | 宽输出                                   |
     | a | 显示终端上的所有进程，包括其他用户的进程 |
     | r | 只显示正在运行的进程。                   |
     | u | 以用户为主的格式来显示程序状况。         |
     | x | 显示所有程序，不以终端机来区分。         |

*** kill 
*** pkill 
*** 进程属性
    ls /proc/PID 
    cwd 进程运行目录
    exe 程序绝对路径
    cmdline 运行时的命令行命令
    environ 环境变量
    fd 打开或使用的文件的符号链接
*** 任务放在前、后台 fg bg jobs 
*** 周期任务 crontab 
     crontab [ -u user ] [ -i ] { -e | -l | -r } |
     -e 编辑 crontab 文件
     -l　列出 crontab 文件内容
     -r 删除 crontab 文件

     执行周期任务
     #+begin_src sh
       sudo service cron restart  
     #+end_src
 
     只要执行下自己的 crontab
     #+begin_src sh
     
     crontab -u USERNAME crontabfile
     #+end_src
     
       #+begin_verse
       * * * * *                  # 每隔一分钟执行一次任务  
       0 * * * *                  # 每小时的 0 点执行一次任务，比如 6:00，10:00  
       6,10 * 2 * *            # 每个月 2 号，每小时的 6 分和 10 分执行一次任务  
       0 * * * *                  # 每小时的 0 点执行一次任务，比如 6:00，10:00  
       6,10 * 2 * *            # 每个月 2 号，每小时的 6 分和 10 分执行一次任务  
       #+end_verse

** 延时
*** sleep
** 网络管理
*** route -n                  
    查看本机路由表
*** netstat -lntp              
    查看所有监听端口
*** netstat -antp             
    查看所有已建立的连接
*** ifconfig            
    查看所有网络接口的属性 
*** iptables -L               
    查看 iptables 防火墙 
*** 远程登录 ssh
    #+begin_src sh -n
      # ssh 用户名@远程服务器地址
      ssh user1@172.24.210.101
      # 指定端口
      ssh -p 2211 root@140.206.185.170
    #+end_src

    #+begin_src sh -n
      # ssh 大家族
      ssh user@ip -p22 # 默认用户名为当前用户名，默认端口为 22
      ssh-keygen # 为当前用户生成 ssh 公钥 + 私钥
      ssh-keygen -f keyfile -i -m key_format -e -m key_format # key_format: RFC4716/SSH2(default) PKCS8 PEM
      ssh-copy-id user@ip:port # 将当前用户的公钥复制到需要 ssh 的服务器的 ~/.ssh/authorized_keys，之后可以免密登录
    #+end_src
    
** 帮助文档    
*** man [manual] 
*** info
    info 文档的结构像 ~树节点~ 一样，不过文档内部还有指向别处的 ~超链接~ 
     
    |-----+----------------------------------+---------------------------|
    | TAB | 跳转到下一个超文本连接。         | 光标在链接处移动          |
    | RET | 跟随光标下的超文本连接。         | 跳转到节点(或链接 )处     |
    | l   | 移动到本窗口的最后阅读过的节点。 | 遍历历史记录(反向)        |
    | [   | 移动到本文档的上一个节点。       | 会按序遍历整个文档树      |
    | ]   | 移动到本文档的下一个节点。       | 会按序遍历整个文档树      |
    | p   | 移动到同级的上一个节点。         | 同级遍历                  |
    | n   | 移动到同级的下一个节点。         | 同级遍历                  |
    | u   | 上移一层。                       | 跳转到父节点              |
    | t   | 移到此文档的顶层节点。           | 到文档根                  |
    | d   | 跳转到 info 的根                 |                           |
    | m   | 选取由名称指定的菜单项目。       | 链接条目跳出来供你选择    |
    | f   | 按照交叉参考指定名称。           | 跳转到链接指向(别的文档 ) |
    | g   | 移动到由名字指定的节点。         | 按照节点名跳转            |
* ubuntu 发行版
** 软件包管理工具
*** dpkg 
**** deb 包的构成：
     - 数据包，包含实际安装的程序数据，文件名为 data.tar.XXX；
     - 安装信息及控制脚本包，包含 deb 的安装说明，标识，脚本等，文件名为 control.tar.gz；
     - 最后一个是 deb 文件的一些二进制数据，包括文件头等信息，一般看不到

**** 用法
     | 显示包信息                 | dpkg -I xx.deb                    |
     | 显示包文件列表             | dpkg -c xx.deb                    |
     | 安装包                     | dpkg -i xx.deb                    |
     | 安装包（指定根目录）       | dpkg --root=<directory> -i xx.deb |
     | 显示所有已安装软件         | dpkg -l                           |
     | 显示已安装包信息           | dpkg -s foo                       |
     | 显示已安装包文件列表       | dpkg -L foo                       |
     | 卸载包                     | dpkg -r foo                       |
     | 卸载软件包并删除其配置文件 | dpkg -P foo                       |
     | 重新配置已安装程序         | dpkg-reconfigure foo              |
*** 高级打包工具 apt-get Advanced Packaging Tool (解决 debian 依赖)
**** 配置
     /etc/apt/sources.list
     deb web 或[ftp 地址] [发行版名字] main/contrib/non-[free]
**** 功能 
     | apt-cache search           | 搜索包                           |
     | apt-cache show             | 获取包的相关信息                 |
     | apt-get install            | 安装包                           |
     | apt-get reinstall          | 重新安装包                       |
     | apt-get -f install         | 强制安装                         |
     | apt-get remove             | 删除包                           |
     | apt-get remove --purge     | 删除包，包括删除配置文件等       |
     | apt-get autoremove --purge | 删除包及其依赖的软件包配置文件等 |
     | apt-get update             | 更新源                           |
     | apt-get upgrade            | 更新已安装的包                   |
     | apt-get dist-upgrade       | 升级系统                         |
     | apt-cache depends          | 了解使用依赖                     |
     | apt-get source             | 下载该包的源代码                 |
*** aptitude  与 apt-get 不同的是，aptitude 在处理依赖问题上更佳一些
    | aptitude update          | 更新可用的包列表       |
    | aptitude upgrade         | 升级可用的包           |
    | aptitude dist-upgrade    | 将系统升级到新的发行版 |
    | aptitude install pkgname | 安装包                 |
    | aptitude remove pkgname  | 删除包                 |
    | aptitude purge pkgname   | 删除包及其配置文件     |
    | aptitude search string   | 搜索包                 |
    | aptitude show pkgname    | 显示包的详细信息       |
    | aptitude clean           | 删除下载的包文件       |
    | aptitude autoclean       | 仅删除过期的包文件     |
*** yum(基于 Red Hat 的系统, 自动处理依赖性关系)
    | install      | 安装 rpm 软件包                           |
    | update       | 更新 rpm 软件包                           |
    | check-update | 检查是否有可用的更新 rpm 软件包           |
    | remove       | 删除指定的 rpm 软件包                     |
    | list         | 显示软件包的信息                        |
    | search       | 检查软件包的信息                        |
    | info         | 显示指定的 rpm 软件包的描述信息和概要信息 |
    | clean        | 清理 yum 过期的缓存                       |
    | shell        | 进入 yum 的 shell 提示符                    |
    | resolvedep   | 显示 rpm 软件包的依赖关系                 |
    | localinstall | 安装本地的 rpm 软件包                     |
    | localupdate  | 显示本地 rpm 软件包进行更新               |
    | deplist      | 显示 rpm 软件包的所有依赖关系             |
*** Snap https://uappexplorer.com/snaps
    | sudo snap list                      | 查询已经安装了的软件     |
    | sudo snap find xxxx                 | 搜索要安装的 Snap 软件包 |
    | sudo snap info xxxx                 | 查看 Snap 软件的更多信息 |
    | sudo snap install xxxx              | 安装 Snap 软件包         |
    | sudo snap switch –channel=xxxx xxxx | 更换软件安装通道         |
    | sudo snap refresh xxxx              | 更新 Snap 软件包         |
    | sudo snap revert xxxx               | 还原到之前版本           |
    | sudo snap remove xxxx               | 卸载 Snap 软件           |

*** 内核管理
    #+begin_src sh
      sudo apt install linux-head-generic linux-image-genric linux-head
      sudo update-grub
    #+end_src
    
** 换字体
*** 安装到系统 /usr/share/fonts/
    #+begin_src sh -n
    wget https://github.com/fangwentong/dotfiles/raw/master/ubuntu-gui/fonts/Monaco.ttf
    sudo mkdir -p /usr/share/fonts/custom
    sudo mv Monaco.ttf /usr/share/fonts/custom
    sudo chmod 744 /usr/share/fonts/custom/Monaco.ttf

    sudo mkfontscale  #生成核心字体信息
    sudo mkfontdir
    sudo fc-cache -fv
    #+end_src
    
*** 安装到用户目录  ~/.fonts/ (安装到 ~/.local/share/fonts 原理相同)
** 用户目录配置
   ~/.config/user-dirs.dirs
** 图像视频处理
*** Kdenlive
    #+begin_verse
    速度-100，影片就倒序播放
    马赛克 固定位置
    自动遮盖  移动位置  分析
    抠图
    #+end_verse
*** 屏幕录制 kazam  simplescreenrecorder obs
*** 声音编辑 audacity
*** 字幕编辑 Aegisub
 
