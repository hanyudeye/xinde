* BIOS 行为列表         
** int $0x10 显示中断
*** 色彩显示   
 | 7    | 6  | 5  | 4  | 3    | 2  | 1  | 0  |
 | I    | R  | G  | B  | I    | R  | G  | B  |
 | 闪烁 | 背红 | 背绿 | 背蓝 | 闪烁 | 红 | 绿 | 蓝 |

    色彩混合：
    -----------------------------------------------------------
   | 混合的三种基色 | 不开启亮度位 | 开启亮度位 | 值 |
   | 红+绿+蓝       | 浅灰         | 白色       |  7 |
   | 绿+蓝          | 青色         | 浅青       |  3 |
   | 红+蓝          | 洋红         | 浅洋红     |  5 |
   | 红+绿          | 棕色         | 黄色       |  6 |
   | 无色彩         | 黑色         | 暗灰       |  0 |
*** 显示模式
    AL＝ 显示器模式，见下表所示
     
     - 可用的显示模式如下所列：
       00H：40×25 16 色 文本
       01H：40×25 16 色 文本
       02H：80×25 16 色 文本
       03H: 80×25 16 色 文本
       04H：320×200 4 色
       05H：320×200 4 色
       06H：640×200 2 色
       07H：80×25 2 色 文本
       08H：160×200 16 色
       09H：320×200 16 色
       0AH：640×200 4 色
       0BH：保留
       0CH：保留
       0DH：320×200 16 色
       0EH：640×200 16 色
       0FH：640×350 2(单色)
       10H：640×350 4 色
       10H：640×350 16 色
       11H：640×480 2 色
       12H：640×480 16 色
       13H：640×480 256 色

       对于超级 VGA 显示卡，我们可用 AX＝4F02H 和下列 BX 的值来设置其显示模式。
       BX 显示模式属性
       100H：640×400 256 色
       101H：640×480 256 色
       102H：800×600 16 色
       103H：800×600 256 色
       104H：1024×768 16 色
       105H：1024×768 256 色
       106H：1280×1024 16 色
       107H：1280×1024 256 色
       108H：80×60 文本模式
       109H：132×25 文本模式
       10AH：132×43 文 本模式
       10BH：132×50 文本模式
       10CH：132×60 文本模式

*** 详细说明
**** 功能 00H
     功能描述：设置显示器模式
     入口参数：AH＝00H

     AL＝ 显示器模式，见下表所示
     出口参数：无
     
     - 可用的显示模式如下所列：
       00H：40×25 16 色 文本
       01H：40×25 16 色 文本
      02H：80×25 16 色 文本
      03H: 80×25 16 色 文本
      04H：320×200 4 色
      05H：320×200 4 色
      06H：640×200 2 色
      07H：80×25 2 色 文本
      08H：160×200 16 色
      09H：320×200 16 色
      0AH：640×200 4 色
      0BH：保留
      0CH：保留
      0DH：320×200 16 色
      0EH：640×200 16 色
      0FH：640×350 2(单色)
      10H：640×350 4 色
      10H：640×350 16 色
      11H：640×480 2 色
      12H：640×480 16 色
      13H：640×480 256 色

      对于超级 VGA 显示卡，我们可用 AX＝4F02H 和下列 BX 的值来设置其显示模式。
      BX 显示模式属性
      100H：640×400 256 色
      101H：640×480 256 色
      102H：800×600 16 色
      103H：800×600 256 色
      104H：1024×768 16 色
      105H：1024×768 256 色
      106H：1280×1024 16 色
      107H：1280×1024 256 色
      108H：80×60 文本模式
      109H：132×25 文本模式
      10AH：132×43 文 本模式
      10BH：132×50 文本模式
      10CH：132×60 文本模式
**** 功能 01H
     功能描述：设置 光标形状
     入口参数：AH＝01H

     CH 低四位＝光标的起始行
     CL 低四位＝光标的终止行

     出口参数：无
**** 功能 02H
  功能描述：用文本坐标下设置光标位置
  入口参数：AH＝02H

  BH＝显示页码
  DH＝行(Y 坐标)
  DL＝ 列(X 坐标)

  出口参数：无
**** 功能 03H
     功能描述：在文本坐标下，读取光标各种信息
     入口参 数：AH＝03H
     BH＝显示页码

     出口参数：CH＝光标的起始行
     CL＝光标的终止行
     DH＝行(Y 坐标)
     DL＝列 (X 坐标)
**** 功能 04H
     功能描述：获取当前状态和光笔位置
     入口参数：AH＝04H

     出口参 数：AH＝00h——光笔未按下/未触发，01h——光笔已按下/已触发
     BX＝象素列(图形 X 坐标)
     CH＝象素行(图形 Y 坐标，显示模 式：04H~06H)
     CX＝象素行(图形 Y 坐标，显示模式：0DH~10H)
     DH＝字符行(文本 Y 坐标)
     DL＝字符列(文本 X 坐 标)
**** 功能 05H
     功能描述：设置显示页，即选择活动的显示页
     入口参数：AH＝05H
     AL＝显示页


     对 于 CGA、EGA、MCGA 和 VGA，其显示页如下表所列： 模式页数显示器类型
     00H、01H0~7CGA、EGA、MCGA、VGA
     02H、03H0~3CGA
     02H、03H0~7EGA、MCGA、VGA
     07H0~7EGA、VGA
     0DH0~7EGA、VGA
     0EH0~3EGA、VGA
     0FH0~1EGA、VGA
     10H0~1EGA、VGA

     对于 PCjr：
     AL＝80H——读取 CRT/CPU 页寄存 器
     81H——设置 CPU 页寄存器
     82H——设置 CRT 页寄存器
     83H——设置 CRT/CPU 页寄存器
     BH＝CRT 页(子 功能号 82H 和 83H)
     BL＝CPU 页(子功能号 81H 和 83H)

     出口参数：对于前者，无出口参数，但对 PCjr 在子功能 80H~83H 调用下，有：BH＝CRT 页
     寄存器，BL＝CPU 页寄存器
**** 功能 06H 和 07H
     功能描述：初始化屏幕或滚屏
     入口 参数：AH＝06H——向上滚屏，07H——向下滚屏
     AL＝滚动行数(0——清窗口)
     BH＝空白区域的缺省属性
     (CH、CL)＝ 窗口的左上角位置(Y 坐标，X 坐标)
     (DH、DL)＝窗口的右下角位置(Y 坐标，X 坐标)

     出口参数：无
**** 功能 08H
     功能描述：读光标处的字符及其属性
     入口参数：AH＝08H
     BH＝显示页码

     出口参数：AH＝属性
     AL＝字 符
**** 功能 09H
     功能描述：在当前光标处按指定属性显示字符
     入口参数：AH＝09H
     AL＝字符
     BH＝ 显示页码
     BL＝属性(文本模式)或颜色(图形模式)
     CX＝重复输出字符的次数

     出口参数：无
**** 功能 0AH
     功能描述：在当前光标处按原有属性显示字符
     入口参数：AH＝0AH
     AL＝字符
     BH＝显示页码
     BL＝颜色 (图形模式，仅适用于 PCjr)
     CX＝重复输出字符的次数

     出口参数：无
**** 功能 0BH
     功能描述：设置调 色板、背景色或边框
     入口参数：AH＝0BH
     设置颜色：BH＝00H，01＝颜色
     选择调色板：BH＝01H，BL＝调色板 (320×200、4 种颜色的图形模式)
  
     出口参数：无
**** 功能 0CH
     功能描述：写图形象素
     入口参 数：AH＝0CH
     AL＝象素值
     BH＝页码
     (CX、DX)＝图形坐标列(X)、行(Y)

     出口参数：无
     
	 视频显示必须处于图形模式下。像素值的范围和坐标范围与当前的图形模式有关。
	 如果 AL 的位 7 置位，新的像素同当前像素的内容进行异或运算。
**** 功能 0DH
     功能描述：读图形象素
     入口参数：AH＝0DH
     BH＝页码
     (CX、DX)＝图形坐标列(X)、行(Y)
  
     出口参数：AL＝象素值
**** 功能 0EH
     功能描述：在 Teletype 模式下显示字符
     入口参数：AH＝0EH
     AL＝ 字符
     BH＝页码
     BL＝前景色(图形模式)

     出口参数：无
**** 功能 0FH
     功能描述：读取显示器模式
     入 口参数：AH＝0FH
     出口参数：AH＝屏幕字符的列数
     AL＝显示模式(参见功能 00H 中的说明)
     BH＝页码
**** 功能 10H
     功能描述：颜色中断。
     其子功能说明如下：
     00H — 设置调色板寄存器
     01H — 设置边框颜色
     02H — 设 置调色板和边框
     03H — 触发闪烁/亮显位
     07H — 读取调色板寄存器
     08H — 读取边框颜色
     09H — 读取调 色板和边框
     10H — 设置颜色寄存器
     12H — 设置颜色寄存器块
     13H — 设置颜色页状态
     15H — 读取颜色寄 存器
     17H — 读取颜色寄存器块
     1AH — 读取颜色页状态
     1BH — 设置灰度值
**** 功能 11H
     功能描述：字体中断。
     其子功能说明如下：
     00H 装入用户字体和可编程控制器
     10H 装入用户字体和可编程控制器
     01H 装入 8×14 ROM 字体和可编程控制器
     11H 装入 8×14 ROM 字体和可编程控制器
     02H 装入 8×8 ROM 字体和可编程控制器
     12H 装入 8×8 ROM 字体和可编程控制器
     03H 设置块指示器
     04H 装入 8×16 ROM 字体和可编程控制器
     14H 装入 8×16 ROM 字体和可编程控制器
     20H 设置 INT 1Fh 字体指针
     21H 为用户字体设置 INT 43h
     22H 为 8×14 ROM 字体设置 INT 43H
     23H 为 8×8 ROM 字体设置 INT 43H
     24H 为 8×16 ROM 字体设置 INT 43H
     30H 读取字体信息
**** 功能 12H
     功能描述：显示器的配置中断。
     其子功能说明如下：
     10H — 读取配置信息
     20H — 选 择屏幕打印
     30H — 设置扫描行
     31H — 允许/禁止装入缺省调色板
     32H — 允许/禁止显示
     33H — 允许/ 禁止灰度求和
     34H — 允许/禁止光标模拟
     35H — 切换活动显示
     36H — 允许/禁止屏幕刷新
**** 功能 13H
     功能描述：在 Teletype 模式下显示字符串
     入口参数：AH＝13H
     BH＝页码
     BL＝属性(若 AL=00H 或 01H)
     CX＝显示字符串长度
     (DH、DL)＝坐标(行、列)
     ES:BP＝显示字符串的地址 
     AL＝显示输出方式
     0—— 字符串中只含显示字符，其显示属性在 BL 中。显示后，光标位置不变
     1——字符串中只含显示字符，其显示属性在 BL 中。显示后，光标位置改变
     2 ——字符串中含显示字符和显示属性。显示后，光标位置不变
     3——字符串中含显示字符和显示属性。显示后，光标位置改变
     出口参数：无
**** 功能 1AH

     功能描述：读取/设置显示组合编码，仅 PS/2 有效，在此从略
**** 功能 1BH
     功能描述：读取功能/ 状态信息，仅 PS/2 有效，在此从略

** int $0x13 磁盘中断
#+CAPTION:  int 13 磁盘操作
| AH  | 功能                  | 调用参数                                  | 返回参数                                     |
| 00  | 磁盘系统复位          | DL＝驱动器                                | CF＝0——操作成功，AH＝00H                     |
|     |                       | 00H~7FH：软盘                             | 否则，AH＝状态代码                           |
|     |                       | 80H~0FFH：硬盘                            |                                              |
| 01  | 读取磁盘系统状态      | DL＝驱动器                                | AH＝00H，AL＝状态代码，其定义如下：          |
|     |                       | 00H~7FH：软盘                             | 00H — 无错                                   |
|     |                       | 80H~0FFH：硬盘                            | 01H — 非法命令                               |
|     |                       |                                           | 02H — 地址目标未发现                         |
|     |                       |                                           | 03H — 磁盘写保护(软盘)                       |
|     |                       |                                           | 04H — 扇区未发现                             |
|     |                       |                                           | 05H — 复位失败(硬盘)                         |
|     |                       |                                           | 06H — 软盘取出(软盘)                         |
|     |                       |                                           | 07H — 错误的参数表(硬盘)                     |
|     |                       |                                           | 08H — DMA 越界(软盘)                          |
|     |                       |                                           | 09H — DMA 超过 64K 界限                         |
|     |                       |                                           | 0AH — 错误的扇区标志(硬盘)                   |
|     |                       |                                           | 0BH — 错误的磁道标志(硬盘)                   |
|     |                       |                                           | 0CH — 介质类型未发现(软盘)                   |
|     |                       |                                           | 0DH — 格式化时非法扇区号(硬盘)               |
|     |                       |                                           | 0EH — 控制数据地址目标被发现(硬盘)           |
|     |                       |                                           | 0FH — DMA 仲裁越界(硬盘)                      |
|     |                       |                                           | 10H — 不正确的 CRC 或 ECC 编码                   |
|     |                       |                                           | 11H — ECC 校正数据错(硬盘)                    |
|     |                       |                                           | 20H — 控制器失败                             |
|     |                       |                                           | 40H — 查找失败                               |
|     |                       |                                           | 80H — 磁盘超时(未响应)                       |
|     |                       |                                           | AAH — 驱动器未准备好(硬盘)                   |
|     |                       |                                           | BBH — 未定义的错误(硬盘)                     |
|     |                       |                                           | CCH — 写错误(硬盘)                           |
|     |                       |                                           | E0H — 状态寄存器错(硬盘)                     |
|     |                       |                                           | FFH — 检测操作失败(硬盘)                     |
| 02H | 读扇区                | AL＝扇区数                                | CF＝0——操作成功，AH＝00H，AL＝传输的扇区数   |
|     |                       | CH＝柱面                                  | 否则，AH＝状态代码，参见功能号 01H 中的说明    |
|     |                       | CL＝扇区                                  |                                              |
|     |                       | DH＝磁头                                  |                                              |
|     |                       | DL＝驱动器，00H~7FH：软盘；80H~0FFH：硬盘 | (#驱动器,相当于哪块磁盘)        |
|     |                       | ES:BX＝缓冲区的地址                       |                                              |
| 03H | 写扇区                | AL＝扇区数                                | CF＝0——操作成功，AH＝00H，AL＝传输的扇区数   |
|     |                       | CH＝柱面                                  | 否则，AH＝状态代码                           |
|     |                       | CL＝扇区                                  |                                              |
|     |                       | DH＝磁头                                  |                                              |
|     |                       | DL＝驱动器，00H~7FH：软盘；80H~0FFH：硬盘 |                                              |
|     |                       | ES:BX＝缓冲区的地址                       |                                              |
| 04H | 检验扇区              | AH＝04H                                   | CF＝0——操作成功，AH＝00H，AL＝被检验的扇区数 |
|     |                       | AL＝扇区数                                | 否则，AH＝状态代码                           |
|     |                       | CH＝柱面                                  |                                              |
|     |                       | CL＝扇区                                  |                                              |
|     |                       | DH＝磁头                                  |                                              |
|     |                       | DL＝驱动器，00H~7FH：软盘；80H~0FFH：硬盘 |                                              |
|     |                       | ES:BX＝缓冲区的地址                       |                                              |
| 05H | 格式化磁道            | AL＝交替(Interleave)                      | CF＝0——操作成功，AH＝00H                     |
|     |                       | CH＝柱面                                  | 否则，AH＝状态代码                           |
|     |                       | DH＝磁头                                  |                                              |
|     |                       | DL＝驱动器，00H~7FH：软盘；80H~0FFH：硬盘 |                                              |
|     |                       | ES:BX＝地址域列表的地址                   |                                              |
| 06H | 格式化坏磁道          | AL＝交替                                  | CF＝0——操作成功，AH＝00H                     |
|     |                       | CH＝柱面                                  | 否则，AH＝状态代码，参见功能号 01H 中的说明    |
|     |                       | DH＝磁头                                  |                                              |
|     |                       | DL＝80H~0FFH：硬盘                        |                                              |
|     |                       | ES:BX＝地址域列表的地址                   |                                              |
| 07H | 格式化驱动器          | AL＝交替                                  | CF＝0——操作成功，AH＝00H                     |
|     |                       | CH＝柱面                                  | 否则，AH＝状态代码，参见功能号 01H 中的说明    |
|     |                       | DL＝80H~0FFH：硬盘                        |                                              |
| 08H | 读取驱动器参数        | DL＝驱动器，00H~7FH：软盘；80H~0FFH：硬盘 | CF＝1——操作失败，AH＝状态代码                |
|     |                       |                                           | 否则，BL＝01H — 360K                        |
|     |                       |                                           | ＝02H — 1.2M                                 |
|     |                       |                                           | ＝03H — 720K                                 |
|     |                       |                                           | ＝04H — 1.44M                                |
|     |                       |                                           | CH＝柱面数的低 8 位                            |
|     |                       |                                           | CL 的位 7-6＝柱面数的高 2 位                     |
|     |                       |                                           | CL 的位 5-0＝扇区数                            |
|     |                       |                                           | DH＝磁头数                                   |
|     |                       |                                           | DL＝驱动器数                                 |
|     |                       |                                           | ES:DI＝磁盘驱动器参数表地址                  |
| 09H | 初始化硬盘参数        | DL＝80H~0FFH：硬盘                        | CF＝0——操作成功，AH＝00H 否则                 |
|     |                       |                                           | AH＝状态代码，参见功能号 01H 中的说明          |
| 0AH | 读长扇区, 每个扇区    | AL＝扇区数                                |                                              |
|     | 随带四个字节的 ECC 编码 | CH＝柱面                                  | CF＝0——操作成功，AH＝00H，AL＝传输的扇区数   |
|     |                       | CL＝扇区                                  | 否则，AH＝状态代码，参见功能号 01H 中的说明    |
|     |                       | DH＝磁头                                  |                                              |
|     |                       | DL＝80H~0FFH：硬盘                        |                                              |
|     |                       | ES:BX＝缓冲区的地址                       |                                              |
| 0BH | 写长扇区，每个扇区随  | AL＝扇区数                                | CF＝0——操作成功，AH＝00H，AL＝传输的扇区数   |
|     | 带四个字节的 ECC 编码   | CH＝柱面                                  | 否则，AH＝状态代码，参见功能号 01H 中的说明    |
|     |                       | CL＝扇区                                  |                                              |
|     |                       | DH＝磁头                                  |                                              |
|     |                       | DL＝80H~0FFH：硬盘                        |                                              |
|     |                       | ES:BX＝缓冲区的地址                       |                                              |
| 0CH | 查寻                  | CL(7-6 位)＝柱面的高 2 位                    | CF＝0——操作成功，AH＝00H，                   |
|     |                       | DH＝磁头                                  | 否则，AH＝状态代码，参见功能号 01H 中的说明    |
|     |                       | DL＝80H~0FFH：硬盘                        |                                              |
| 0DH | 硬盘系统复位          | DL＝80H~0FFH：硬盘                        | CF＝0——操作成功，AH＝00H，                   |
| 0EH | 读扇区缓冲区          | ES:BX＝缓冲区的地址                       | 出口参数：CF＝0——操作成功                    |
| 0FH | 写扇区缓冲区          | ES:BX＝缓冲区的地址                       | CF＝0——操作成功                              |
| 10H | 读取驱动器状态        | DL＝80H~0FFH：硬盘                        | CF＝0——操作成功，AH＝00H                     |
| 11H | 校准驱动器            | DL＝80H~0FFH：硬盘                        | CF＝0——操作成功，AH＝00H，                   |
| 12H | 控制器 RAM 诊断         |                                           | CF＝0——操作成功，....                        |
| 13H | 控制器驱动诊断        |                                           | CF＝0——操作成功，否则，...                   |
| 14H | 控制器内部诊断        |                                           | CF＝0——操作成功，否则                        |
| 15H | 读取磁盘类型          | DL＝驱动器，00H~7FH：软盘；               | CF＝1——操作失败，AH＝状态代码                |
|     |                       | 80H~0FFH：硬盘                            | AH＝00H — 未安装驱动器                       |
|     |                       |                                           | ＝01H — 无改变线支持的软盘驱动器             |
|     |                       |                                           | ＝02H — 带有改变线支持的软盘驱动器           |
|     |                       |                                           | ＝03H — 硬盘，CX:DX＝512 字节的扇区数         |
| 16H | 读取磁盘变化状态      | DL＝00H~7FH：软盘                         | CF＝0——磁盘未改变，AH＝00H                   |
|     |                       |                                           | 否则，AH＝06H，参见功能号 01H 中的说明         |
| 17H | 设置磁盘类型          | DL＝00H~7FH：软盘 AL＝00H — 未用          | CF＝0——操作成功，AH＝00H，                   |
|     |                       | ＝01H — 360K 在 360K 驱动器中                | 否则，AH＝状态编码，参见功能号 01H 中的说明    |
|     |                       | ＝02H — 360K 在 1.2M 驱动器中                |                                              |
|     |                       | ＝03H — 1.2M 在 1.2M 驱动器中                |                                              |
|     |                       | ＝04H — 720K 在 720K 驱动器中                |                                              |
| 18H | 设置格式化媒体类型    | CH＝柱面数                                | CF＝0——操作成功，AH＝00H，                   |
|     |                       | CL＝每磁道的扇区数                        | ES:DI＝介质类型参数表地址，                  |
|     |                       | DL＝00H~7FH：软盘                         | 否则，AH＝状态编码，参见功能号 01H 中的说明    |
| 19H | 磁头保护，仅在 PS/2    |                                           |                                              |
| 1AH | 格式化 ESDI 驱动器      | 仅在 PS/2 中有效，在此从略                  |                                              |

** int $0x16 键盘中断
| AH  | 功能                                | 调用参数                           | 返回值                           |
| 00H | 读取键盘输入                        |                                    | AL 字符的 ASCII                   |
|     | 按键按下才返回                      |                                    | AH 扫描码                        |
| 01H | 确认键盘键入字符                    |                                    | AL 字符的 ASCII                   |
|     |                                     |                                    | AH Scan code                     |
|     |                                     |                                    | ZF=1 未键入字符,无返回           |
|     |                                     |                                    | ZF=0 NZ,返回上面的               |
| 02H | Return shift-flag status            |                                    | AL Current shift status          |
|     |                                     |                                    | 7 6 5 4 3 2 1 0                  |
|     |                                     |                                    | Ins,Capa,Num,Scrol,Alt,C,左 S,右 S |
| 03H | Set typematic rate and delay        | AL 05 (subfunction number)         |                                  |
|     |                                     | BL 00H through 1FH, typematic rate |                                  |
|     |                                     | (30 charßsec to 2 char/sec)        |                                  |
|     |                                     | BH Delay rate:                     |                                  |
|     |                                     | 00h = 250 ms                       |                                  |
|     |                                     | 01h = 500 ms                       |                                  |
|     |                                     | 02h = 750 ms                       |                                  |
|     |                                     | 03h = 1000 ms                      |                                  |
|     |                                     | 04h to 07h = Reserved              |                                  |
| 05h | Add key to Keyboard buffer          | CL ASCII code                      | If Carry = 1:                    |
|     |                                     | CH Scan code                       | AL Keyboard buffer full          |
| 10h | Read extended character from buffer |                                    | AL ASCII keystroke pressed       |
|     |                                     |                                    | AH Scan code of key              |
| 11h | Return extended buffer status       |                                    | AL ASCII keystroke pressed       |
|     |                                     |                                    | AH Scan code of key              |
|     |                                     |                                    | ZF No keystroke available        |
|     |                                     |                                    | NZ Keystroke in buffer           |
| 12h | Return extended shift status        |                                    | AL Shift status:                 |
|     |                                     |                                    | Bit 7 1 = Sys Req pressed        |
|     |                                     |                                    | Bit 6 1 = Caps Lock active       |
|     |                                     |                                    | Bit 5 1 = Num Lock active        |
|     |                                     |                                    | Bit 4 1 = Scroll Lock active     |
|     |                                     |                                    | Bit 3 1 = Right Alt active       |
|     |                                     |                                    | Bit 2 1 = Right Ctrl active      |
|     |                                     |                                    | Bit 1 1 = Left Alt active        |
|     |                                     |                                    | Bit 0 1 = Left Ctrl active       |
|     |                                     |                                    | AH Extended shift status:        |
|     |                                     |                                    | Bit 7 1 = Insert active          |
|     |                                     |                                    | Bit 6 1 = Caps Lock active       |
|     |                                     |                                    | Bit 5 1 = Num Lock active        |
|     |                                     |                                    | Bit 4 1 = Scroll Lock active     |
|     |                                     |                                    | Bit 3 1 = Alt pressed            |
|     |                                     |                                    | Bit 2 1 = Ctrl pressed           |
|     |                                     |                                    | Bit 1 1 = Left Shift pressed     |
|     |                                     |                                    | Bit 0 1 = Right Shift pressed    |

* Linux 系统调用   
  ebx, ecx, edx, esi 和 edi 按照顺序存放前五个参数,返回值 eax
  locate unistd_32 /unistd_64
  [[file:/usr/include/x86_64-linux-gnu/asm/unistd_32.h][列表]] /usr/include/x86_64-linux-gnu/asm/unistd_32.h
** 进程控制
  | 指令名                 | %eax | 备注                                        |                         |
  |------------------------+------+---------------------------------------------+-------------------------|
  | fork                   |    2 | 创建一个新进程                              |                         |
  | clone                  |      | 按指定条件创建子进程                        |                         |
  | execve                 |      | 运行可执行文件                              |                         |
  | exit                   |    1 | 中止进程                                    | void _exit(int status); |
  | _exit                  |      | 立即中止当前进程                            |                         |
  | getdtablesize          |      | 进程所能打开的最大文件数                    |                         |
  | getpgid                |      | 获取指定进程组标识号                        |                         |
  | setpgid                |      | 设置指定进程组标志号                        |                         |
  | getpgrp                |      | 获取当前进程组标识号                        |                         |
  | setpgrp                |      | 设置当前进程组标志号                        |                         |
  | getpid                 |   20 | 获取进程标识号                              |                         |
  | getppid                |      | 获取父进程标识号                            |                         |
  | getpriority            |      | 获取调度优先级                              |                         |
  | setpriority            |      | 设置调度优先级                              |                         |
  | modify_ldt             |      | 读写进程的本地描述表                        |                         |
  | nanosleep              |      | 使进程睡眠指定的时间                        |                         |
  | nice                   |      | 改变分时进程的优先级                        |                         |
  | pause                  |      | 挂起进程，等待信号                          |                         |
  | personality            |      | 设置进程运行域                              |                         |
  | prctl                  |      | 对进程进行特定操作                          |                         |
  | ptrace                 |      | 进程跟踪                                    |                         |
  | sched_get_priority_max |      | 取得静态优先级的上限                        |                         |
  | sched_get_priority_min |      | 取得静态优先级的下限                        |                         |
  | sched_getparam         |      | 取得进程的调度参数                          |                         |
  | sched_getscheduler     |      | 取得指定进程的调度策略                      |                         |
  | sched_rr_get_interval  |      | 取得按 RR 算法调度的实时进程的时间片长度    |                         |
  | sched_setparam         |      | 设置进程的调度参数                          |                         |
  | sched_setscheduler     |      | 设置指定进程的调度策略和参数                |                         |
  | sched_yield            |      | 进程主动让出处理器,并将自己等候调度队列队尾 |                         |
  | vfork                  |      | 创建一个子进程，以供执行新程序              |                         |
  | wait                   |      | 等待子进程终止                              |                         |
  | waitpid                |      | 等待指定子进程终止                          |                         |
  | capget                 |      | 获取进程权限                                |                         |
  | capset                 |      | 设置进程权限                                |                         |
  | getsid                 |      | 获取会晤标识号                              |                         |
  | setsid                 |      | 设置会晤标识号                              |                         |
** 文件系统控制
*** 文件读写操作
  | 指令名    | %eax | 备注                           |                                                          |
  |-----------+------+--------------------------------+----------------------------------------------------------|
  | fcntl     |      | 文件控制                       |                                                          |
  | open      |    5 | 打开文件                       |                                                          |
  | creat     |    8 | 创建新文件                     |                                                          |
  | close     |    6 | 关闭文件描述字                 |                                                          |
  | read      |    3 | 读文件                         |                                                          |
  | write     |    4 | 写文件                         | ssize_t write(int fd, const void *buf, size_t count); |
  | readv     |      | 从文件读入数据到缓冲数组中     |                                                          |
  | writev    |      | 将缓冲数组里的数据写入文件     |                                                          |
  | pread     |      | 对文件随机读                   |                                                          |
  | pwrite    |      | 对文件随机写                   |                                                          |
  | lseek     |   19 | 移动文件指针                   |                                                          |
  | _llseek   |      | 在 64 位地址空间里移动文件指针 |                                                          |
  | dup       |   41 | 复制已打开的文件描述字         |                                                          |
  | dup2      |      | 按指定条件复制文件描述字       |                                                          |
  | flock     |      | 文件加/解锁                    |                                                          |
  | poll      |      | I/O 多路转换                   |                                                          |
  | truncate  |      | 截断文件                       |                                                          |
  | ftruncate |      | 参见 truncate                  |                                                          |
  | umask     |      | 设置文件权限掩码               |                                                          |
  | fsync     |      | 把文件在内存中的部分写回磁盘   |                                                          |
  |           |      |                                |                                                          |
*** 文件系统操作
  | 指令名   | %eax | 备注                   |
  |----------+------+------------------------|
  | access   |      | 确定文件的可存取性     |
  | chdir    |   12 | 改变当前工作目录       |
  | fchdir   |      | 参见 chdir              |
  | chmod    |      | 改变文件方式           |
  | fchmod   |      | 参见 chmod              |
  | chown    |      | 改变文件的属主或用户组 |
  | fchown   |      | 参见 chown              |
  | lchown   |      | 参见 chown              |
  | chroot   |      | 改变根目录             |
  | stat     |      | 取文件状态信息         |
  | lstat    |      | 参见 stat               |
  | fstat    |      | 参见 stat               |
  | statfs   |      | 取文件系统信息         |
  | fstatfs  |      | 参见 statfs             |
  | readdir  |      | 读取目录项             |
  | getdents |      | 读取目录项             |
  | mkdir    |   39 | 创建目录               |
  | mknod    |      | 创建索引节点           |
  | rmdir    |      | 删除目录               |
  | rename   |      | 文件改名               |
  | link     |      | 创建链接               |
  | symlink  |      | 创建符号链接           |
  | unlink   |      | 删除链接               |
  | readlink |      | 读符号链接的值         |
  | mount    |      | 安装文件系统           |
  | umount   |      | 卸下文件系统           |
  | ustat    |      | 取文件系统信息         |
  | utime    |      | 改变文件的访问修改时间 |
  | quotactl |      | 控制磁盘配额           |
  |          |      |                        |
** 系统控制
   
  | 指令名        | %eax | 备注                                     |
  | ioctl         |   54 | I/O 总控制函数                            |
  | _sysctl       |      | 读/写系统参数                            |
  | acct          |      | 启用或禁止进程记账                       |
  | getrlimit     |      | 获取系统资源上限                         |
  | setrlimit     |      | 设置系统资源上限                         |
  | getrusage     |      | 获取系统资源使用情况                     |
  | uselib        |      | 选择要使用的二进制函数库                 |
  | ioperm        |      | 设置端口 I/O 权限                          |
  | iopl          |      | 改变进程 I/O 权限级别                      |
  | outb          |      | 低级端口操作                             |
  | reboot        |      | 重新启动                                 |
  | swapon        |      | 打开交换文件和设备                       |
  | swapoff       |      | 关闭交换文件和设备                       |
  | bdflush       |      | 控制 bdflush 守护进程                      |
  | sysfs         |      | 取核心支持的文件系统类型                 |
  | sysinfo       |      | 取得系统信息                             |
  | adjtimex      |      | 调整系统时钟                             |
  | alarm         |      | 设置进程的闹钟                           |
  | getitimer     |      | 获取计时器值                             |
  | setitimer     |      | 设置计时器值                             |
  | gettimeofday  |      | 取时间和时区                             |
  | settimeofday  |      | 设置时间和时区                           |
  | stime         |      | 设置系统日期和时间                       |
  | time          |      | 取得系统时间                             |
  | times         |      | 取进程运行时间                           |
  | uname         |      | 获取当前 UNIX 系统的名称、版本和主机等信息 |
  | vhangup       |      | 挂起当前终端                             |
  | nfsservctl    |      | 对 NFS 守护进程进行控制                    |
  | vm86          |      | 进入模拟 8086 模式                         |
  | create_module |      | 创建可装载的模块项                       |
  | delete_module |      | 删除可装载的模块项                       |
  | init_module   |      | 初始化模块                               |
  | query_module  |      | 查询模块信息                             |
** 内存管理
   
  | 指令名      | %eax | 备注                         |
  | brk         |45    | 改变数据段空间的分配         |
  | mlock       |      | 内存页面加锁                 |
  | munlock     |      | 内存页面解锁                 |
  | mlockall    |      | 调用进程所有内存页面加锁     |
  | munlockall  |      | 调用进程所有内存页面解锁     |
  | mmap        |      | 映射虚拟内存页               |
  | munmap      |      | 去除内存页映射               |
  | mremap      |      | 重新映射虚拟内存地址         |
  | msync       |      | 将映射内存中的数据写回磁盘   |
  | mprotect    |      | 设置内存映像保护             |
  | getpagesize |      | 获取页面大小                 |
  | sync        |      | 将内存缓冲区数据写回硬盘     |
  | cacheflush  |      | 将指定缓冲区中的内容写回磁盘 |
  |             |      |                              |
** 网络管理
   getdomainname	取域名
   setdomainname	设置域名
   gethostid	获取主机标识号
   sethostid	设置主机标识号
   gethostname	获取本主机名称
   sethostname	设置主机名称
** socket 控制
   socketcall	socket 系统调用
   socket	建立 socket
   bind	绑定 socket 到端口
   connect	连接远程主机
   accept	响应 socket 连接请求
   send	通过 socket 发送信息
   sendto	发送 UDP 信息
   sendmsg	参见 send
   recv	通过 socket 接收信息
   recvfrom	接收 UDP 信息
   recvmsg	参见 recv
   listen	监听 socket 端口
   select	对多路同步 I/O 进行轮询
   shutdown	关闭 socket 上的连接
   getsockname	取得本地 socket 名字
   getpeername	获取通信对方的 socket 名字
   getsockopt	取端口设置
   setsockopt	设置端口参数
   sendfile	在文件或端口间传输数据
   socketpair	创建一对已联接的无名 socket
** 用户管理
   getuid	获取用户标识号
   setuid	设置用户标志号
   getgid	获取组标识号
   setgid	设置组标志号
   getegid	获取有效组标识号
   setegid	设置有效组标识号
   geteuid	获取有效用户标识号
   seteuid	设置有效用户标识号
   setregid	分别设置真实和有效的的组标识号
   setreuid	分别设置真实和有效的用户标识号
   getresgid	分别获取真实的,有效的和保存过的组标识号
   setresgid	分别设置真实的,有效的和保存过的组标识号
   getresuid	分别获取真实的,有效的和保存过的用户标识号
   setresuid	分别设置真实的,有效的和保存过的用户标识号
   setfsgid	设置文件系统检查时使用的组标识号
   setfsuid	设置文件系统检查时使用的用户标识号
   getgroups	获取后补组标志清单
   setgroups	设置后补组标志清单
** 进程间通信
   ipc	进程间通信总控制调用
*** 信号
    sigaction	设置对指定信号的处理方法
    sigprocmask	根据参数对信号集中的信号执行阻塞/解除阻塞等操作
    sigpending	为指定的被阻塞信号设置队列
    sigsuspend	挂起进程等待特定信号
    signal	参见 signal
    kill	向进程或进程组发信号
    *sigblock	向被阻塞信号掩码中添加信号,已被 sigprocmask 代替
    *siggetmask	取得现有阻塞信号掩码,已被 sigprocmask 代替
    *sigsetmask	用给定信号掩码替换现有阻塞信号掩码,已被 sigprocmask 代替
    *sigmask	将给定的信号转化为掩码,已被 sigprocmask 代替
    *sigpause	作用同 sigsuspend,已被 sigsuspend 代替
    sigvec	为兼容 BSD 而设的信号处理函数,作用类似 sigaction
    ssetmask	ANSI C 的信号处理函数,作用类似 sigaction
*** 消息
    msgctl	消息控制操作
    msgget	获取消息队列
    msgsnd	发消息
    msgrcv	取消息
*** 管道
    | pipe | 42 | 创建管道 |
    |      |    |          |
*** 信号量
    semctl	信号量控制
    semget	获取一组信号量
    semop	信号量操作
*** 共享内存
    shmctl	控制共享内存
    shmget	获取共享内存
    shmat	连接共享内存
    shmdt	拆卸共享内存

* BIOS 中断   
** 硬盘服务 int 13 硬盘服务
   中断 INT13 功能及用法分析 

INT 13H，AH=00H 软、硬盘控制器复位 

说明： 
此功能复位磁盘（软盘和硬盘）控制器板和磁盘驱动器，它在磁盘控制器 
芯片上完成复位操场作并在磁盘进行所需的操作之前做一系列用于磁盘校准的 
磁盘操作。 
当磁盘 I/O 功能调用出现错误时，需要调用此功能，此刻复位功能将使 BIOS 
象该磁盘重新插入一样检查驱动器中磁盘状态，并将磁头校准使之在应该在的 
位置上。 
此功能调用不影响软盘或硬盘上的数据。 
入口参数： 
AH=00H 指明调用复位磁盘功能。 
DL 需要复位的驱动器号。 
返回参数： 
若产生错误，进位标志 CF=1，错误码在 AH 寄存器。 
详情请见磁盘错误状态返回码一文。 
示例： 
C_SEG SEGMENT PUBLIC 
ASSUME CS:C_SEG,DS:C_SEG 
ORG 100H 
START: MOV AH, 00H 
MOV DL, 80H 
INT 13H 
;复位硬盘 C 
JC ERROR 
…… 
ERROR: …… 
C_SEG ENDS 
END START 

INT 13H，AH=02H 读扇区说明： 
调用此功能将从磁盘上把一个或更多的扇区内容读进存贮器。因为这是一个 
低级功能，在一个操作中读取的全部扇区必须在同一条磁道上（磁头号和磁道号 
相同）。BIOS 不能自动地从一条磁道末尾切换到另一条磁道开始，因此用户必须 
把跨多条磁道的读操作分为若干条单磁道读操作。 
入口参数： 
AH=02H 指明调用读扇区功能。 
AL 置要读的扇区数目，不允许使用读磁道末端以外的数值，也不允许 
使该寄存器为 0。 
DL 需要进行读操作的驱动器号。 
DH 所读磁盘的磁头号。 
CH 磁道号的低 8 位数。 
CL 低 5 位放入所读起始扇区号，位 7-6 表示磁道号的高 2 位。 
ES:BX 读出数据的缓冲区地址。 
返回参数： 
如果 CF=1，AX 中存放出错状态。读出后的数据在 ES:BX 区域依次排列。 
详情请参见磁盘错误状态返回码一文。 
示例： 
C_SEG SEGMENT PUBLIC 
ASSUME CS:C_SEG,DS:C_SEG 
ORG 100H 
START: JMP READ 
BUFFER DB 512 DUP(0) 
READ: PUSH CS 
POP ES 
MOV BX, OFFSET BUFFER 
MOV AX, 0201H 
MOV CX, 0001H 
MOV DX, 0000H 
INT 13H 
;读软盘 A, 0 面 0 道 1 扇区 
;读出后数据在 BUFFER 中 
JC ERROR 
…… 
ERROR: …… 
C_SEG ENDS 
END START 

INT 13H，AH=03H 写扇区 

说明： 
调用此功能将从磁盘上把一个或更多的扇区内容写入驱动器。因为这 
是一个低级功能，在一个写入操作中的全部扇区必须在同一条磁道上（磁 
头号和磁道号相同）。BIOS 不能自动地从一条磁道末尾切换到另一条磁道 
开始，因此用户必须把跨多条磁道的写操作分为若干条单磁道写操作。 
入口参数： 
AH=03H 指明调用写扇区功能。 
AL 置要写的扇区数目，不允许使用超出磁道末端以外的数值， 
也不允许使该寄存器为 0。 
DL 需要进行写操作的驱动器号。 
DH 所写磁盘的磁头号。 
CH 磁道号的低 8 位数。 
CL 低 5 位放入所读起始扇区号，位 7-6 表示磁道号的高 2 位。 
ES:BX 放置写入数据的存贮区地址。 
返回参数： 
如果 CF=1，AX 中存放出错状态。 
详情请参见磁盘错误状态返回码一文。 
示例： 
C_SEG SEGMENT PUBLIC 
ASSUME CS:C_SEG,DS:C_SEG 
ORG 100H 
START: JMP WRITE 
BUFFER DB 512 DUP(0FFH) 
WRITE: PUSH CS 
POP ES 
MOV BX, OFFSET BUFFER 
MOV AX, 0301H 
MOV CX, 0001H 
MOV DX, 0000H 
INT 13H 
;写入软盘 A, 0 面 0 道 1 扇区 
;把此扇区数据全部置为 0FFH 
JC ERROR 
…… 
ERROR: …… 
C_SEG ENDS 
END START 
INT 13H，AH=04H 检测扇区 

说明： 
这个功能检测磁盘上 1 个或更多的扇区。这个验证测试不是把磁盘上的 
数据和内存中的数据进行比较，而只是简单地确定读出的数据有无 CRC 错误。 
这个功能可用来验证驱动器中的软盘版。如果盘片的格式正确，CF=0。 
入口参数： 
AH=03H 指明调用检测扇区功能。 
AL 置要检测的连续扇区数目，不允许使用超出磁道末端以外的 
数值，也不允许使该寄存器为 0。 
DL 需要进行检测的驱动器号。 
DH 磁盘的磁头号。 
CH 磁道号的低 8 位数。 
CL 低 5 位放入起始扇区号，位 7-6 表示磁道号的高 2 位。 
返回参数： 
如果 CF=1，AX 中存放出错状态。CF=0，检测正确。 
详情请参见磁盘错误状态返回码一文。 
示例： 
C_SEG SEGMENT PUBLIC 
ASSUME CS:C_SEG,DS:C_SEG 
ORG 100H 
START: MOV AX, 0401H 
MOV CX, 0001H 
MOV DX, 0000H 
INT 13H 
;检测软盘 A, 0 面 0 道 1 扇区 
JC ERROR 
…… 
ERROR: …… 
C_SEG ENDS 
END START 

磁盘错误状态返回码: 

磁盘错误状态 

AH= 
00H 未出错 
01H 非法功能调用命令区。 
02H 地址标记损坏，扇区标识（ID）无效或未找到。 
03H 企图对有写保护的软盘执行写操作。 
04H 所寻找的扇区没找到。 
05H 复位操作失败。 
06H 无介质。 
07H 初始化错误，数据未存在 DMA 的 64K 缓冲区内。 
08H DMA 故障 
09H DMA 边界错误，数据未存在 DMA 的 64K 缓冲区内。 
0AH 检测出错误码率的扇区标志。 
0BH 所寻找的磁道没找到。 
0CH 介质类型没发现。 
0DH 扇区号有问题。 
0EH 发现控制数据地址标记。 
0FH 超出 DMA 边界 
10H 读磁盘时奇偶校验错，且纠错码（EDC）不能纠正。 
11H 读磁盘时奇偶校验错，但纠错码（EDC）已纠正错误。 
20H 控制器错。 
40H 查找操作无效。 
80H 超时错误，驱动器不响应。 
AAH 驱动器未准备好。 
BBH 不明错误。 
CCH 被选驱动器出现写故障。 
E0H 错误寄存器是零 
FFH 非法操作。 
** 显示服务 int 10h
*** wen
使用 BIOS 显示服务（Video Service）--INT 10H，下面主要探究字符显示模式。

BIOS 中断在保护模式下是不能用的，故不能在 Linux 中测试，所以写了个简单的 boot loader，并在虚拟机中运行程序。



1.以电传的方式写入字符串（AH=0x13）
------------------------------------------------------------------
			INT 0x10 功能 0x13
--------------------------------------------------------------
描述：
	以电传打字机的方式显示字符串
接受参数：
	AH			0x13
	AL			显示模式
	BH			视频页
	BL			属性值（如果 AL=0x00 或 0x01）
	CX			字符串的长度
	DH,DL		屏幕上显示起始位置的行、列值
	ES:BP		字符串的段:偏移地址
返回值：
	无
显示模式（AL）：
	0x00:字符串只包含字符码，显示之后不更新光标位置，属性值在 BL 中
	0x01:字符串只包含字符码，显示之后更新光标位置，属性值在 BL 中
	0x02:字符串包含字符码及属性值，显示之后不更新光标位置
	0x03:字符串包含字符码及属性值，显示之后更新光标位置
-------------------------------------------------------------------

示例：
# A bootsect, which print a string by BIOS interrupt video services(int 0x10)
.section .text
.global _start
.code16
_start:
	movw	%cx,	%ax
	movw	%ax,	%ds
	movw	%ax,	%es
	movw	$msgstr,%bp
	movw	len,	%cx
	movb	$0x05,	%dh
	movb	$0x08,	%dl
	movb	$0x01,	%al
	movb	$0x13,	%ah
	movb	$0x01,	%bl
	movb	$0x00,	%bh
	int		$0x10
1:
	jmp		1b
msgstr:
	.asciz	"Hello babyos(print by BIOS int 0x10:0x13, mode 0x01)!"
len:
	.int	. - msgstr
	.org	0x1fe,	0x90
	.word	0xaa55
makefile:
all: boot.img
boot.o: boot.s
	as -o $@ $<
boot: boot.o
	ld --oformat binary -N -Ttext 0x7c00 -o $@ $<
boot.img: boot
	dd if=boot of=boot.img bs=512 count=1
 
clean:
	rm ./boot ./boot.img ./boot.o

运行：




2.通过功能号 0x09 探究色彩控制
上面的显示为什么是红色呢？我们可以通过实验来看一下颜色控制。

------------------------------------------------------------------------
			INT 0x10 功能 0x09
-------------------------------------------------------------------
描述：
	显示字符并设置其属性
接受参数：
	AH			0x09
	AL			字符的 ASCII 码
	BH			视频页
	BL			属性值
	CX			重复次数
返回值：
	无
注意：
	在显示字符之后并不前进光标。在文本和图形模式下均可调用该功能
	显示完字符后，如果还要继续显示字符，必须调用 INT 0x10 功能 0x02 前进光标
-------------------------------------------------------------------------
 
------------------------------------------------------------------------
			INT 0x10 功能 0x02
-------------------------------------------------------------------
描述：
	把光标定位在选定视频页的特定行列位置
接受参数：
	AH			0x02
	DH，DL		行、列值
	BH			视频页
返回值：
	无
注意：
	在 80x25 模式下，DH 范围 0～24，DL 范围 0～79
-------------------------------------------------------------------------

示例：

实现一个从第 4 行～7 行，第 8 列～71 列，显示‘A’～‘Z’的程序，共显示 256 个字符，使用 BL（0～255）

C 伪代码：
cx = 0x04;
bh = 0x00;
 
dh = 0x04;
dl = 0x08;
al = 'A';
 
for (bl = 0; bl < 256; bl++)
{
	print_char();
	
	al++;
	if (al == 'Z')
		al = 'A';
	
	dl++;
	if (dl == 72)
	{
		dh++;
		dl = 4;
	}
	
	set_cursor();
}
汇编代码：
# A bootsect, which print a colorful chars by BIOS INT 0x10, 0x09
 
.section .text
.global _start
.code16
 
_start:
	movw	%cx,	%ax
	movw	%ax,	%ds
	movw	%ax,	%es
 
	movw	$0x01,	%cx		# 字符显示重复次数
	movb	$0x00,	%bh		# 视频页
	
	movb	$0x04,	%dh		# 显示起始行
	movb	$0x08,	%dl		# 显示起始列
	
	movb	$'A',	%al		# 显示字符
	movb	$0x00,	%bl		# 属性值
 
1:
	call	print_char
	incb	%al
	cmpb	$'Z',	%al
	jne		2f
	movb	$'A',	%al
2:	
	incb	%dl
	cmpb	$72,	%dl
	jne		3f
	movb	$8,		%dl
	incb	%dh
3:
	call	set_cursor
	incb	%bl
	cmp		$256,	%bl
	jne		1b
	jmp		1f
 
print_char:
	movb	$0x09,	%ah
	int		$0x10
	ret
 
set_cursor:
	movb	$0x02,	%ah
	int		$0x10
	ret
 
1:
	jmp		1b
 
	.org	0x1fe,	0x90
	.word	0xaa55

结果：


可以显式地验证色彩控制 BL：
7		6		5		4		3		2		1		0
I       R		G		B		I		R		G		B
闪烁    R		G		B		I		R		G		B

如上图所示，7～4 位为背景色，I 表示高亮，RGB 表示红绿蓝，若显卡支持闪烁，则位 7 表示是否闪烁。
色彩混合：
-----------------------------------------------------------
混合的三种基色		不开启亮度位		开启亮度位
-------------------------------------------------------
红+绿+蓝			浅灰				白色
绿+蓝				青色				浅青
红+蓝				洋红				浅洋红
红+绿				棕色				黄色
无色彩				黑色				暗灰
-----------------------------------------------------------

3.清屏
可以发现屏幕上有许多 Bochs 的打印信息，看着不爽，想办法去掉它们。

利用 0x06 号功能，上卷全部行，则可清屏。

-----------------------------------------------------------
INT 0x10 功能 0x06
------------------------------------------------------
描述：
上卷窗口
参数：
AH 6
AL 上卷的行数（0 表示全部）
BH 空白区域的视频属性
CH，CL 窗口左上角的行列位置
DH，DL 窗口右下角的行列位置
返回值：
无
------------------------------------------------------------
示例：

# A bootsect, which print a colorful chars by BIOS INT 0x10, 0x09
 
.section .text
.global _start
.code16
 
_start:
	movw	%cx,	%ax
	movw	%ax,	%ds
	movw	%ax,	%es
 
	call	clear_screen	# 清屏
 
	movw	$0x01,	%cx		# 字符显示重复次数
	movb	$0x00,	%bh		# 视频页
	
	movb	$0x04,	%dh		# 显示起始行
	movb	$0x08,	%dl		# 显示起始列
	
	movb	$'A',	%al		# 显示字符
	movb	$0x00,	%bl		# 属性值
 
1:
	call	print_char		# 打印字符
	incb	%al				# 下一个字符
	cmpb	$'Z',	%al		# 是否该重新从‘A’开始
	jne		2f
	movb	$'A',	%al
2:	
	incb	%dl				# 下一个位置
	cmpb	$72,	%dl		# 是否到下一行
	jne		3f
	movb	$8,		%dl
	incb	%dh
3:
	call	set_cursor		# 设置光标位置
	incb	%bl				# 下一种属性
	cmp		$0,		%bl		# 是否 256 种属性用完
	jne		1b
	jmp		1f				# 结束
 
clear_screen:				# 清屏函数
	movb	$0x06,	%ah		# 功能号 0x06
	movb	$0,		%al		# 上卷全部行，即清屏
	movb	$0,		%ch		# 左上角行
	movb	$0,		%ch		# 左上角列	
	movb	$24,	%dh		# 右下角行
	movb	$79,	%dl		# 右下角列
	movb	$0x07,	%bh		# 空白区域属性
	int		$0x10
	ret
 
print_char:
	movb	$0x09,	%ah		# 功能号 0x09
	int		$0x10
	ret
 
set_cursor:
	movb	$0x02,	%ah		# 功能号 0x02
	int		$0x10
	ret
 
1:
	jmp		1b
 
	.org	0x1fe,	0x90
	.word	0xaa55

结果：




4.直接写显存绘制字符串：
示例：
#---------------------------------------------------------------
# 直接写显存显示一些文字函数：
#	显示计算机当前工作的显示模式	
draw_some_text:
	# 设置 ES，DS 的值
	movw	$VIDEO_SEG_TEXT,%ax
	movw	%ax,			%es
	xorw	%ax,			%ax
	movw	%ax,			%ds
 
 
	# 计算字符显示位置的显存地址(目标地址)
	movw	$((80*TEXT_ROW+TEXT_COL) * 2),	%di
	
	# 源字符串地址
	leaw	msgstr,			%si
	
	movb	$TEXT_COLOR,	%al		# 属性值（颜色）
	movw	len,			%cx		# 显示的字符个数
 
 
draw_a_char:			
	movsb
	stosb
	loop	draw_a_char
 
 

--------------------- 
作者：孤舟钓客 
来源：CSDN 
原文：https://blog.csdn.net/guzhou_diaoke/article/details/8397658 
版权声明：本文为博主原创文章，转载请附上博文链接！
