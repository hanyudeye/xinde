* linux操作系统命令
** 系统管理
   分区,挂载分区
* ubuntu
** 安装 
   CD 安装, 分区,分区挂载，图形配置，选择语言等
   命令行，网络配置, 显示器
   远程图像界面登录 X -query 192.168.0.2
** 内核管理
    apt install linux-head-generic linux-image-genric linux-head
    sudo update-grub
** 软件管理
*** deb 软件
    安装 sudo dpkg -i *.deb  进行安装
*** apt 
    apt-get source <package> 获取源码
    apt-cache search 'expression'
    列表位于/etc/apt/sources.list
    维护好依赖, 都是 deb 文件
    路径  /var/cache/apt/archives
    
    debian系linux更新时，提示“由于没有公钥，无法验证下列签名”
    解决方法
1. 下载导入公钥
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  8B48AD6246925553
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  7638D0442B90D010
# 此处的8B48AD6246925553、7638D0442B90D010是错误提示中的：NO_PUBKEY 8B48AD6246925553  NO_PUBKEY 7638D0442B90D010 

*** aptitude    
    查找
    aptitude search package_name
    安装
    sudo aptitude install wine
    更新
    aptitude safe-upgrade   
    aptitude full-upgrade 相比上面的，不会检查包的依赖关系 
    aptitude dist-upgrade 
    卸载 
    sudo aptitude purge wine
    
    软件仓库
    /etc/apt/sources.list
    
    deb (or deb-src) address  distribution_name  package_type_list
    deb 或deb-src 的值表明了软件包的类型。deb 值说明这是一个已编译程序源，而deb-src 值则说明这
    是一个源代码的源。

    address 条目是软件仓库的Web地址。distribution_name 条目是这个特定软件仓库的发行版版本的名称
    最后，package_type_list 条目可能并不止一个词，它还表明仓库里面有什么类型的包。你可以看到
    诸如main、restricted、universe和partner这样的值。
*** yum(基于Red Hat的系统)
    列出已安装包   yum list installed
    安装 yum install package_name
    本地安装 yum localinstall package_name.rpm

    更新 yum list updates
    yum update package_name

    只删除软件包而保留配置文件和数据文件，就用如下命令：
    yum remove package_name

    要删除软件和它所有的文件，就用erase 选项：
    yum erase package_name

    yum update --skip-broken
    --skip-broken 选项允许你忽略依赖关系损坏的那个包，继续去更新其他软件包。这可能救不了损坏
    的包，但至少可以更新系统上的其他包。

*** 软件安装
**** 依赖库
**** 依赖库降级 
     libpng12-dev : Depends: libpng12-0 (= 1.2.54-1ubuntu1) but 1.2.54-1ubuntu1k1 is to be installed 
     E: Unable to correct problems, you have held broken packages
     解决办法
     sudo apt install libpng12-0=1.2.54-1ubuntu1
**** deb 软件
     安装 sudo dpkg -i *.deb  进行安装
**** apt 
     apt-get source <package> 获取源码
     apt-cache search 'expression'
     列表位于/etc/apt/sources.list
     维护好依赖, 都是 deb 文件
     路径  /var/cache/apt/archives
*** Snap
#查询已经安装了的软件 sudo snap list
#搜索要安装的Snap软件包 sudo snap find xxxx
#查看Snap软件的更多信息 sudo snap info xxxx
#安装Snap软件包 sudo snap install xxxx
#更换软件安装通道 sudo snap switch –channel=xxxx xxxx
#更新Snap软件包 sudo snap refresh xxxx
#还原到之前版本 sudo snap revert xxxx
#卸载Snap软件 sudo snap remove xxxx
当然光靠命令你想搜索什么snap软件包也是一头雾水吧！可以去uappexplorer里查询下，有什么snap软件包呢！喜欢的就都安装上。
#Uappexplorer
https://uappexplorer.com/snaps
** 任务管理
*** 任务放在前、后台
    fg bg jobs 
*** w 登录任务列表
*** ps 任务列表
   #+BEGIN_SRC conf
     -e   显示所有进程 
     -f    全格式
     -h   不显示标题
     -l    长格式
     -w     宽输出
     a    显示终端上的所有进程，包括其他用户的进程。
     r    只显示正在运行的进程。
     u 　以用户为主的格式来显示程序状况。
     x     显示所有程序，不以终端机来区分。

     ps -ef 显示出的结果：
         1.UID       用户 ID
         2.PID        进程 ID
         3.PPID      父进程 ID
         4.C           CPU 占用率
         5.STIME     开始时间
         6.TTY         开始此进程的 TTY----终端设备
         7.TIME       此进程运行的总时间
         8.CMD       命令名
   #+END_SRC
   
   init init进程是所有Linux进程的父进程
*** crontab 执行周期任务
   init init 进程是所有 Linux 进程的父进程
*** crontab 周期性执行
**** 命令
     crontab [ -u user ] file
     crontab [ -u user ] [ -i ] { -e | -l | -r } |
     -e 编辑 crontab 文件
     -l　列出 crontab 文件内容
     -r 删除 crontab 文件
**** 开启日志     
    修改 rsyslog 文件，将/etc/rsyslog.d/50-default.conf 文件中的#cron.*前的#删掉；
    重启 rsyslog 服务 service rsyslog restart；
    重启 cron 服务 service cron restart；

    more /var/log/cron.log；
    就可以查看运行时的日志文件，如果在日志文件中出现：No MTA installed, discarding output

    那么就是说，crontab 执行脚本时是不会直接错误的信息输出，而是会以邮件的形式发送到你的邮箱里，这时候就需要邮件服务器了，
    如果你没有安装邮件服务器，它就会报这个错。如果是测试，可以用下面的办法来解决：

    在每条定时脚本后面加入：
    ?
    001
    >/dev/null 2>&1
    就可以解决 No MTA installed, discarding output 的问题
**** 编辑文件, 其实编辑好后就会自动执行
    crontab -e  

    # m h  dom mon dow   command  
    */2 * * * * date >> ~/time.log  
**** 执行     
     sudo service cron restart  

     对于自己的，只要执行下自己的 crontab　文件即可
     crontab -u wuming crontabfile

 | 分钟 | 0 - 59                                                                     |
 | 小时 | 0 - 23                                                                     |
 | 天   | 1 - 31                                                                     |
 | 月   | 1 - 12                                                                     |
 | 星期 | 0 - 6   0 表示星期天                                                        |
 | 星号 | 表示任意值，比如在小时部分填写 * 代表任意小时（每小时）                    |
 | 逗号 | 可以允许在一个部分中填写多个值，比如在分钟部分填写 1,3 表示一分钟或三分钟  |
 | 斜线 | 一般配合 * 使用，代表每隔多长时间，比如在小时部分填写 */2 代表每隔两分钟。 |
\* * * * *                  # 每隔一分钟执行一次任务  
0 * * * *                  # 每小时的0点执行一次任务，比如6:00，10:00  
6,10 * 2 * *            # 每个月2号，每小时的6分和10分执行一次任务  
0 * * * *                  # 每小时的 0 点执行一次任务，比如 6:00，10:00  
6,10 * 2 * *            # 每个月 2 号，每小时的 6 分和 10 分执行一次任务  
*** pkill 杀死进程按照进程名
0 * * * *                  # 每小时的 0 点执行一次任务，比如 6:00，10:00  
6,10 * 2 * *            # 每个月 2 号，每小时的 6 分和 10 分执行一次任务  
*** pkill 可以按照进程名杀死进程
*** 进程属性
    ls /proc/PID 
    cwd 进程运行目录
    exe 程序绝对路径
    cmdline 运行时的命令行命令
    environ 环境变量
    fd 打开或使用的文件的符号链接
** 用户管理
*** 添加
     useradd -m -g users -G wheel -s /bin/bash ikke
     passwd ikke
*** 组织
**** sudo 组
      打开 /etc/sudoers 
*** 忘记密码
   1,启动时在启动的 linux 系统（或 grub 到计时结束前）上按下“e”键
   2，选中类似“于 kernel /boot/vmlinuz-2.4.18-14 ”按“e”键
   3,修改命令行，加入 linux single，结果如下：
   kernel /vmlinuz-2.6.18-8.el5  ro root=LABEL=/ rhgb quiet linux single
   4,回车返回，按 b 键,进入命令行
   5, #vi /etc/shadow 编辑 shadow
   将第一行，即以 root 开头的一行中 root:后和下一个:前的内容删除，
   第一行将类似于
   root::……
   保存
   (如果保存不了，是文件属性的问题，就chmod 755 /etc/shadow，这样就OK了)
6. #reboot重启，root密码为空
   (如果保存不了，是文件属性的问题，就 chmod 755 /etc/shadow，这样就 OK 了)
6. #reboot 重启，root 密码为空
*** 显示 w 
*** 用户通信 write USERNAME 终端
    终端通过who获取
    write wuming pts/0
*** 拒绝通信 mesg n 
** 设备管理
*** 查看设备 
    ls /dev/
*** 硬盘设备 
    查看容量 df
**** 使用 mount
     mount 用于加载文件系统到指定的加载点
    mount  [-t vfstype] [-o options] device dir
    1.-t vfstype 文件系统类型
    　　光盘或光盘镜像：iso9660
    　　DOS fat16 文件系统：msdos
    　　Windows 9x fat32 文件系统：vfat
    　　Windows NT ntfs 文件系统：ntfs
    　　Mount Windows 文件网络共享：smbfs
    　　UNIX(LINUX) 文件网络共享：nfs
    2.-o options 主要用来描述设备或档案的挂接方式。常用的参数有：
    　　loop：用来把一个文件当成硬盘分区挂接上系统
    　　ro：采用只读方式挂接设备
    　　rw：采用读写方式挂接设备
    　　iocharset：指定访问文件系统所用字符集,不能显示中文 iocharset=cp936
    3.device 要挂接(mount)的设备。
    4.dir 设备在系统上的挂接点(mount point)。
    sudo mount -t smbfs -o username=user,password='' //10.0.1.1/windowsshare /mnt 浏览 windows 共享文件夹
**** 取消使用 umount
** 文件系统
** 文件管理
*** 查看 cat less more head tac tail wc
*** 排序查看 sort uniq
*** 修改 vim/emacs
*** 新增文件 目录  mkdir
*** 删除 remove rmdir
*** 比较 diff
*** 文件类型 file 
*** 改名 mv
*** 查找文件 find whereis which
*** 编辑
**** sed 命令编辑器
***** 选项 
      sed [options] 'command' file(s)
      sed [options] -f scriptfile file(s)
      -e<script>或--expression=<script>：以选项中的指定的 script 来处理输入的文本文件；
      -f<script 文件>或--file=<script 文件>：以选项中指定的 script 文件来处理输入的文本文件；
***** 功能
      a\ 在当前行下面插入文本。
      i\ 在当前行上面插入文本。
      c\ 把选定的行改为新的文本。
      d 删除，删除选择的行。
      D 删除模板块的第一行。
      s 替换指定字符 sed 's/aa/bb/' file 注意/ 符,用来分界
      h 拷贝模板块的内容到内存中的缓冲区。
      H 追加模板块的内容到内存中的缓冲区。
      g 获得内存缓冲区的内容，并替代当前模板块中的文本。
      G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
      l 列表不能打印字符的清单。
      n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
      N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
      p 打印模板块的行。(显示两遍)
      P(大写) 打印模板块的第一行。
      q 退出 Sed。
      b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
      r file 从 file 中读行。
      t label if 分支，从最后一行开始，条件一旦满足或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
      T label 错误分支，从最后一行开始，一旦发生错误或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
      w file 写并追加模板块到 file 末尾。  
      W file 写并追加模板块的第一行到 file 末尾。  
      ! 表示后面的命令对所有没有被选定的行发生作用。  
      = 打印当前行号码。  
      # 把注释扩展到下一个换行符以前。  

      sed 替换标记
      g 表示行内全面替换。  
      p 表示打印行。  
      w 表示把行写入一个文件。  
      x 表示互换模板块中的文本和缓冲区中的文本。  
      y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
      \1 子串匹配标记
      & 已匹配字符串标记

      sed 元字符集
      ^ 匹配行开始，如：/^sed/匹配所有以 sed 开头的行。
      $ 匹配行结束，如：/sed$/匹配所有以 sed 结尾的行。
      . 匹配一个非换行符的任意字符，如：/s.d/匹配 s 后接一个任意字符，最后是 d。
      [* 匹配 0 个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟 sed 的行。
      [] 匹配一个指定范围内的字符，如/[ss]ed/匹配 sed 和 Sed。  
      [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含 A-R 和 T-Z 的一个字母开头，紧跟 ed 的行。
      \(..\) 匹配子串，保存匹配的字符，如 s/\(love\)able/\1rs，loveable 被替换成 lovers。
      & 保存搜索字符用来替换其他字符，如 s/love/**&**/，love 这成**love**。
      \< 匹配单词的开始，如:/\<love/匹配包含以 love 开头的单词的行。
      \> 匹配单词的结束，如/love\>/匹配包含以 love 结尾的单词的行。
      x\{m\} 重复字符 x，m 次，如：/0\{5\}/匹配包含 5 个 0 的行。
      x\{m,\} 重复字符 x，至少 m 次，如：/0\{5,\}/匹配至少有 5 个 0 的行。
      x\{m,n\} 重复字符 x，至少 m 次，不多于 n 次，如：/0\{5,10\}/匹配 5~10 个 0 的行。 

***** sed 用法实例
****** 替换：s
      sed 's/book/books/' file

      -n 选项和 p 命令一起使用表示只打印那些发生替换的行：
      sed -n 's/test/TEST/p' file

      直接编辑文件选项-i，会匹配 file 文件中每一行的第一个 book 替换
      为 books：
      sed -i 's/book/books/g' file
****** 全面替换标记 g
      sed 's/book/books/g' file
****** 替换 1 行中第 N 处匹配开始替换时，可以使用 /Ng：
      echo sksksksksksk | sed 's/sk/SK/2g'
      skSKSKSKSKSK
****** 使用定界符
      sed 's:test:TEXT:g'
      sed 's|test|TEXT|g'

      定界符出现在样式内部时，需要进行转义：
      sed 's/\/bin/\/usr\/local\/bin/g'

****** 删除操作：d 命令
****** 删除空白行：
      sed '/^$/d' file

****** 删除文件的第 2 行：
      sed '2d' file
****** 删除文件的第 2 行到末尾所有行：
      sed '2,$d' file
****** 删除文件最后一行：
      sed '$d' file
****** 删除文件中所有开头是 test 的行：
      sed '/^test/'d file
****** 已匹配字符串标记&
      正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之
      前所匹配到的单词：

      echo this is a test line | sed 's/\w\+/[&]/g'
      [this] [is] [a] [test] [line]

      所有以 192.168.0.1 开头的行都会被替换成它自已加 localhost：

      sed 's/^192.168.0.1/&localhost/' file
      192.168.0.1localhost
****** 子串匹配标记\1
      匹配给定样式的其中一部分：
      echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'
      this is 7 in a number

      命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\)
      用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹
      配到的第二个结果就是 \2，例如：

      echo aaa BBB | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
      BBB aaa

      love 被标记为 1，所有 loveable 会被替换成 lovers，并打印出来：

      sed -n 's/\(love\)able/\1rs/p' file
****** 组合多个表达式
      sed '表达式' | sed '表达式'

      等价于：

      sed '表达式; 表达式'

      引用

      sed 表达式可以使用单引号来引用，但是如果表达式内部包含变量字
      符串，就需要使用双引号。

      test=hello
      echo hello WORLD | sed "s/$test/HELLO"
      HELLO WORLD

      选定行的范围：,（逗号）

      所有在模板 test 和 check 所确定的范围内的行都被打印：

      sed -n '/test/,/check/p' file

      打印从第 5 行开始到第一个包含以 test 开始的行之间的所有行：

      sed -n '5,/^test/p' file

      对于模板 test 和 west 之间的行，每行的末尾用字符串 aaa bbb 替换：

      sed '/test/,/west/s/$/aaa bbb/' file

      多点编辑：e 命令

      -e 选项允许在同一行里执行多条命令：

      sed -e '1,5d' -e 's/test/check/' file

      上面 sed 表达式的第一条命令删除 1 至 5 行，第二条命令用 check 替换
      test。命令的执行顺序对结果有影响。如果两个命令都是替换命令
      ，那么第一个替换命令将影响第二个替换命令的结果。

      和 -e 等价的命令是 --expression：

      sed --expression='s/test/check/' --expression='/love/d' file

      从文件读入：r 命令

      file 里的内容被读进来，显示在与 test 匹配的行后面，如果匹配多
      行，则 file 的内容将显示在所有匹配行的下面：

      sed '/test/r file' filename

      写入文件：w 命令  

      在 example 中所有包含 test 的行都被写入 file 里：

      sed -n '/test/w file' example

      追加（行下）：a\命令

      将 this is a test line 追加到以 test 开头的行后面：

      sed '/^test/a\this is a test line' file

      在 test.conf 文件第 2 行之后插入 this is a test line：

      sed -i '2a\this is a test line' test.conf

      插入（行上）：i\命令

      将 this is a test line 追加到以 test 开头的行前面：

      sed '/^test/i\this is a test line' file

      在 test.conf 文件第 5 行之前插入 this is a test line：

      sed -i '5i\this is a test line' test.conf

      下一个：n 命令

      如果 test 被匹配，则移动到匹配行的下一行，替换这一行的 aa，变
      为 bb，并打印该行，然后继续：

      sed '/test/{ n; s/aa/bb/; }' file

      变形：y 命令

      把 1~10 行内所有 abcde 转变为大写，注意，正则表达式元字符不能使
      用这个命令：

      sed '1,10y/abcde/ABCDE/' file

      退出：q 命令

      打印完第 10 行后，退出 sed

      sed '10q' file

      保持和获取：h 命令和 G 命令

      在 sed 处理文件的时候，每一行都被保存在一个叫模式空间的临时缓
      冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将
      打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。

      sed -e '/test/h' -e '$G' file

      在这个例子里，匹配 test 的行被找到后，将存入模式空间，h 命令将
      其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的
      意思是，当到达最后一行后，G 命令取出保持缓冲区的行，然后把它
      放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾
      。在这个例子中就是追加到最后一行。简单来说，任何包含 test 的
      行都被复制并追加到该文件的末尾。

      保持和互换：h 命令和 x 命令

      互换模式空间和保持缓冲区的内容。也就是把包含 test 与 check 的行
      互换：

      sed -e '/test/h' -e '/check/x' file

      脚本 scriptfile

      sed 脚本是一个 sed 的命令清单，启动 Sed 时以-f 选项引导脚本文件名
      。Sed 对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空
      白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行
      为注释行，且不能跨行。

      sed [options] -f scriptfile file(s)

      打印奇数行或偶数行

      方法 1：

      sed -n 'p;n' test.txt  #奇数行
      sed -n 'n;p' test.txt  #偶数行

      方法 2：

      sed -n '1~2p' test.txt  #奇数行
      sed -n '2~2p' test.txt  #偶数行

      打印匹配字符串的下一行

      grep -A 1 SCC URFILE
      sed -n '/SCC/{n;p}' URFILE
      awk '/SCC/{getline; print}' URFILE
***** 修改 更改 
**** emacs 可视化编辑器
**** join 行号及行内文本同，则显示
     按两个文件的相同字段合并
**** tr 替换或删除字符
*** 查找文件内容 grep
*** 改变权限 chmod 
*** 权限 setuid 执行中文件有文件所有者权限  setgid 文件所属组权限
*** grep 文本搜索
     -C 5 foo file  显示 file 文件中匹配 foo 字串那行以及上下 5 行
     -B 5 foo file  显示 foo 及前 5 行
     -A 5 foo file  显示 foo 及后 5 行
     －c：只输出匹配行的计数。
     －I：不区分大 小写(只适用于单字符)。
     －h：查询多文件时不显示文件名。
     －l：查询多文件时只输出包含匹配字符的文件名。
     －n：显示匹配行及 行号。
     －s：不显示不存在或无匹配文本的错误信息。
     －v：显示不包含匹配文本的所有行。
     pattern 正则表达式主要参数：
     \： 忽略正则表达式中特殊字符的原有含义。
     ^：匹配正则表达式的开始行。
     $: 匹配正则表达式的结束行。
     \<：从匹配正则表达 式的行开始。
     \>：到匹配正则表达式的行结束。
     [ ]：单个字符，如[A]即 A 符合要求 。
     [ - ]：范围，如[A-Z]，即 A、B、C 一直到 Z 都符合要求 。
     .：所有的单个字符。
     $ grep ‘test’ d*
     显示所有以 d 开头的文件中包含 test 的行。
     $ grep ‘test’ aa bb cc
     显示在 aa，bb，cc 文件中匹配 test 的行。
     $ grep ‘[a-z]\{5\}’ aa
     显示所有包含每个字符串至少有 5 个连续小写字符的字符串的行。
     $ grep ‘w\(es\)t.*\1′ aa
     如果 west 被匹配，则 es 就被存储到内存中，并标记为 1，然后搜索任意个字符(.*)，这些字符后面紧跟着 另外一个 es(\1)，找到就显示该行。如果用 egrep 或 grep -E，就不用"\"号进行转义，直接写成’w(es)t.*\1′就可以了。

     grep 命令使用复杂实例
     假设您正在’/usr/src/Linux/Doc’目录下搜索带字符 串’magic’的文件：
     $ grep magic /usr/src/Linux/Doc/*
     sysrq.txt:* How do I enable the magic SysRQ key?
     sysrq.txt:* How do I use the magic SysRQ key?
     其中文件’sysrp.txt’包含该字符串，讨论的是 SysRQ 的功能。
     默认情况下，’grep’只搜索当前目录。如果 此目录下有许多子目录，’grep’会以如下形式列出：
     grep: sound: Is a directory
     这可能会使’grep’ 的输出难于阅读。这里有两种解决的办法：
     明确要求搜索子目录：grep -r
     或忽略子目录：grep -d skip
     如果有很多 输出时，您可以通过管道将其转到’less’上阅读：
     $ grep magic /usr/src/Linux/Documentation/* | less
     这样，您就可以更方便地阅读。

     -q 静静地 ，存在则返回 0, 不存在返回 1
     下面还有一些有意思的命令行参数：
     grep -i pattern files：不区分大小写地搜索。默认情况区分大小写，
     grep -l pattern files：只列出匹配的文件名，
     grep -L pattern files：列出不匹配的文件名，
     grep -w pattern files：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，
     grep -C number pattern files：匹配的上下文分别显示[number]行，
     grep pattern1 | pattern2 files：显示匹配 pattern1 或 pattern2 的行，
     grep pattern1 files | grep pattern2：显示既匹配 pattern1 又匹配 pattern2 的行。
     grep -n pattern files  即可显示行号信息
     grep -c pattern files  即可查找总行数

*** find 
    pathname -options [-print -exec -ok ...]
    关系操作
    -a and
    -or -o or
    -n not 
     : -exec：find 命令对匹配的文件执行该参数所给出的 shell 命令。相应命令的形式为'command' {  } \;，注意{   }和\；之间的空格。
     : -ok：和-exec 的作用相同，只不过以一种更为安全的模式来执行该参数所给出的 shell 命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。
     : -name   按照文件名查找文件。
     : -perm   按照文件权限来查找文件。
     : -prune  使用这一选项可以使 find 命令不在当前指定的目录中查找，如果同时使用-depth 选项，那么-prune 将被 find 命令忽略。
     : -user   按照文件属主来查找文件。
     : -group  按照文件所属的组来查找文件。
     : -mtime -n +n  按照文件的更改时间来查找文件， - n 表示文件更改时间距
     : 现在 n 天以内，+ n 表示文件更改时间距现在 n 天以前。find 命令还有-atime 和-ctime 选项，但它们都和-m time 选项。
     : -nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups 中不存在。
     : -nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd 中不存在。
     : -newer file1 ! file2  查找更改时间比文件 file1 新但比文件 file2 旧的文件。
     : -iname 忽略大小写
**** -type  查找某一类型的文件，诸如：
     + b - 块设备文件。
     + d - 目录。
     + c - 字符设备文件。
     + p - 管道文件。
     + l - 符号链接文件。
     + f - 普通文件。
**** -size n：[c] 查找文件长度为 n 块的文件，带有 c 时表示文件长度以字节计。
**** -depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
**** -fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab 中找到，该配置文件中包含了本系统中有关文件系统的信息。
**** -mount：在查找文件时不跨越文件系统 mount 点。
**** -follow：如果 find 命令遇到符号链接文件，就跟踪至链接所指向的文件。
**** -cpio：对匹配的文件使用 cpio 命令，将这些文件备份到磁带设备中。
**** time
     : -amin n   查找系统中最后 N 分钟访问的文件  -n n 天以内;+n n 天之前
     : -atime n  查找系统中最后 n*24 小时访问的文件
     : -cmin n   查找系统中最后 N 分钟被改变文件状态的文件
     : -ctime n  查找系统中最后 n*24 小时被改变文件状态的文件
     : -mmin n   查找系统中最后 N 分钟被改变文件数据的文件
     : -mtime n  查找系统中最后 n*24 小时被改变文件数据的文件
     : find  ./    -mtime    -1    -type f    -ok   ls -l    {} \;  
     : find .    -perm -007    -exec ls -l {} \;  
     : ! 否定参数
** 系统信息
*** 系统名字 hostname 
*** 日期时间 date calendar
** 任务工具
*** 终止任务 kill  
*** 任务放后台 bg
*** 调到前台 fg
*** 查看任务 ps
** 工具
*** 文本转换 unix2dos dos2unix 
*** 压缩 bzip2  -v 显示文件的详细信息 bzip -v aa.jpg 
*** 改变shell chsh 重登有效 更改的是/etc/passwd 中的shell 内容
*** 屏幕截图
   import -frame window.tif
**** shutter 
     1. 里面的快捷键命令用：shutter -s 或者 shutter –select
     2. 截取当前活动窗口：shutter -a（a 表示 active）
     3. 截取拖拉区域：shutter -s（s 是 select 之意），拖拉出矩形区域后按 Enter。 

*** 中文语音朗读 ekho
   (如果保存不了，是文件属性的问题，就 chmod 755 /etc/shadow，这样就 OK 了)
6. #reboot 重启，root 密码为空
* 应用软件
   (如果保存不了，是文件属性的问题，就 chmod 755 /etc/shadow，这样就 OK 了)
6. #reboot 重启，root 密码为空
* 软件
** 编程
*** gcc 基于 C/C++的预处理器和编译器
    -o：指定生成的输出文件,所以编译多个文件是,-o 没有意义；
    -E：仅执行编译预处理； .i
    -S：将 C 代码转换为汇编代码；.s
    -wall：显示警告信息；
    -c：仅执行编译操作，不进行连接操作。.o
**** 1. 预处理 gcc -E test.c -o test.i
     -C:
     -H:
     -include:
**** 2. 编译为汇编代码   gcc -S test.i -o test.s
     masm=intel	汇编代码 
     -std 指定使用的语言标准
**** 3. gas  gcc -c test.s -o test.o
     :-Wa,option
     :-llibrary 连接名为 library 的库文件
     :-L 指定额外路径
     :-m32
**** 4. ld  gcc test.o -o test
     :-lobjc 这个-l 选项的特殊形式用于连接 Objective C 程序.
     :-nostartfiles 不连接系统标准启动文件,而标准库文件仍然正常使用.
     :-nostdlib 不连接系统标准启动文件和标准库文件.只把指定的文件传递给连接器.
     :-static 在支持动态连接(dynamic linking)的系统上,阻止连接共享库.该选项在其他系统上无效.
     :-shared 生成一个共享目标文件,他可以和其他目标文件连接产生可执行文件.只有部分系统支持该选项.
     :-symbolic 建立共享目标文件的时候,把引用绑定到全局符号上.对所有无法解析的引用作出警
     告(除非用连接编辑选项 `-Xlinker -z -Xlinker defs'取代).只有部分系统支持该选项.
     :-u symbol 使连接器认为取消了 symbol 的符号定义,从而连接库模块以取得定义.你可以使用多
     个 `-u'选项,各自跟上不同的符号,使得连接器调入附加的库模块.
     : [-e ENTRY]|[--entry=ENTRY]	 使用 ENTRY (入口)标识符作为程序执行的开始端,而不是缺省入口.   
     : -lAR	在连 接文件列表中增加归档库文件 AR.可以多次使用这个选项. 凡指定一项 AR,ld 就会在路径列表中增加一项对 libar.a 的搜索.
     : -LSEARCHDIR   这个选项将路径 SEARCHDIR 添加到路径列表, ld 在这个列表中搜索归档库.
     可以多次使用这个选项.缺省的搜索路径集(不使用-L 时)取决于 ld 使用的
     模拟模式(emulation)及其配置.在连接脚本中,可以用 SEARCH_DIR 命令指定路径. 
     : -Tbss org
     : -Tdata org
     : -Ttext org
     把 org 作为输出文件的段起始地址 --- 特别是 --- bss,data,或 text 段.org 必须是十六进制整数. 
     : -X    删除 全部 临时的 局部符号. 大多数 目的文件 中, 这些 局部符	    号 的 名字 用 `L' 做 开头.
     : -x    删除 全部 局部符号. 
     : -m 指定仿真环境,这里要与 gcc 的选项 -m32 一致; -V 显示 支持的仿真：本机支持   elf_x86_64   
     elf32_x86_64   elf_i386   i386linux   elf_l1om   elf_k1om   i386pep   i386pe
     LDFLAGS="-L/usr/lib64 -L/lib64" 全局常量
     : 注意,如果连接器通过被编译器驱动来间接引用(比如 gcc), 那所有的连接器命令行选项前必须加上前缀'-Wl'
     gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup 
     : `-b INPUT-FORMAT'
     `--format=INPUT-FORMAT' [binary]
     'ld'可以被配置为支持多于一种的目标文件.缺省的格式是从环境变量'GNUTARGET'中得到的.
     你也可以从一个脚本中定义输入格式,使用的命令是'TARGET'. 
     : `--oformat OUTPUT-FORMAT'	  指定输出目标文件的二进制格式.一般不需要指定,ld 的缺省输出格式配置
     为/各个机器上最常用的/ 格式. output-format 是一个 字符串,BFD 库支持的格式名称:在操作系统一层了,如果是操作系统本身,加入此选项
     : [`-N']|[`--omagic']
     把 text 和 data 节设置为可读写.同时,取消数据节的页对齐,同时,取消对共享库的连接.如果输出格式
     支持 Unix 风格的 magic number, 把输出标志为'OMAGIC'. 
**** 5. 检错
     : -Wall 产生尽可能多的警告信息
     : -Werror GCC 会在所有产生警告的地方停止编译
**** 6. 库文件连接 .a .so
     : 包含文件 -I /usr/dirpath    
     : 库   -L /dirpath   -llibname  不要.a 或.so 后缀
     : 强制静态库 gcc –L /usr/dev/mysql/lib –static –lmysqlclient test.o –o test
     静态库链接时搜索路径顺序：
     1. ld 会去找 GCC 命令中的参数-L
     2. 再找 gcc 的环境变量 LIBRARY_PATH
     3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初 compile gcc 时写在程序内的

     动态链接时、执行时搜索路径顺序:
     1. 编译目标代码时指定的动态库搜索路径
     2. 环境变量 LD_LIBRARY_PATH 指定的动态库搜索路径
     3. 配置文件/etc/ld.so.conf 中指定的动态库搜索路径
     4. 默认的动态库搜索路径/lib
     5. 默认的动态库搜索路径/usr/lib
     有关环境变量：
     LIBRARY_PATH 环境变量：指定程序静态链接库文件搜索路径
     LD_LIBRARY_PATH 环境变量：指定程序动态链接库文件搜索路径
**** 7. 调试
     -g:
     -gstabs:
     -gcoff:
     -gdwarf:
**** 8. 优化
     -O0 不优化
     -fcaller-saves: 
**** 9. 目标机选项(Target Option) 交叉编译
     -b machine 
     -V version 哪个版本的 gcc
**** 10.配置相关选项(Configuration Dependent Option)
     M680x0 选项
     i386 选项
**** 11.总体选项(Overall Option)
     -x language
     明确指出后面输入文件的语言为 language (而不是从文件名后缀得到的默认选择).

**** 12.目录选项(DIRECTORY OPTION)
     :-Idir 在头文件的搜索路径列表中添加 dir 目录.
     :-Ldir 在`-l'选项的搜索路径列表中添加 dir 目录.

**** 13.C 文件与 汇编文件编译
     以下涉及到不同编译器对符号的处理问题。比如我们写个汇编文件，汇编后，汇编文件中的符号未变，但是当我们写个 C 文件再生成目标文件后，源文件中的符号前可能加了下划线，当两者之间发生引用关系时可能无法连接，此时我们会用到下面的命令。
     : --change-leading-char
     : --remove-leading-char
     : --prefix-symbols=string
*** ldconfig 动态链接库管理命令
*** readelf 用于显示 elf 格式文件的信息
    : -a       --all
**** elf header
     描述了这个 elf 文件的一些信息，如数据格式是 big-endian 或者 little-endian
     运行平台、section header 的个数等。
***** section headers 是一个表，表中的每个条目描述了一个 section，
      如 section 在文件中的偏移，大小等。
***** section 中就是 elf 文件中"真正"的信息了。

*** objdump 显示二进制文件信息
    : -a|--archive-header 列出 archive 头/列表用'ar tv'
    : -d 反汇编
    : -S|--source
    : -m MACHINE| --architecture=MACHINE
    : -G|--stabs
*** gdb 功能强大的程序调试器
**** options gdb <program> [core]|[PID]
     -d 指定远程调试时串行接口的线路速度
     -batch 以批处理模式运行
     -c 指定要分析的核心转储文件
     -cd 指定工作目录
     -d 指定搜索源文件的目录
     -e 指定要执行的文件
     -f 调试时以标准格式输出文件名和行号
     -q 安静模式
     -s 指定符号的文件名
     -se 指定符号和要执行的文件名
     -tty 设置标准输出和输入设备
     -x 从指定的文件执行 gdb 命令
**** 常用的调试命令
     shell <command>
     make <make -args>

     运行参数
     set args 设定参数
     show args 查看运行参数
     运行环境
     path<dir> 设定程序的运行路径。
     show paths 查看程序的运行路径。
     set environment varname[=value]设置环境变量。如:set env USER=hchen
     show environment[varname]查看环境变量
     工作目录
     cd <dir>相当于 shell 的 cd 命令。
     pwd 显示当前的工作目录。
     程序的输入输出
     info terminal 显示程序用到的终端的模式
     使用重定向空值程序输出。如 run>outfile
     tty 命令可以指定写输入输出的终端设备。如 tty /dev/ttyb
     列出源码 ;l 3（开始行） 根据本地文件,没有就列不出 
     设置断点 ;b filename: <行号>;break +offset -offset 当前行号前后
     b filename: <函数名称>;
     b *<函数名称>;
     b *<代码地址> 
     break...if<condition>
     调试程序 ;r 
     继续执行 ;c
     删除断点 ;clear <行号>
     删除断点 ;d <编号>
     执行一行 ;n /s
     结束循环 ;until
     p $1 ($1 为历史记录变量); 
     p <数组名>显示数组元素;
     p <*数组指针>显示数组 int a[N]的特定值：
     p &var 显示变量地址
     显示变量类型;    whatis p
     显示各类信息   info b 显示断点信息
     finish 退出函数
     info r 寄存器信息
     info local 当前函数中的局部变量信息;
     info prog 显示被调试程序的执行状态
     break *_start+1 由于 gnu 调试时忽略开始处断点, 需要在开始标签处执行一个空指令
     print/d 显示十进制数字
     print/t 显示二进制数字
     print/x 显示 16 进制数字

     x/FMT ADDRESS.
     ADDRESS is an expression for the memory address to examine.
     FMT is a repeat count followed by a format letter and a size letter.
     Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
     t(binary), f(float), a(address), i(instruction), c(char), s(string)
     and z(hex, zero padded on the left).
     Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
     The specified number of objects of the specified size are printed
     according to the format.
     7.0 版本以上 gdb 的 disas 命令可以携带/m 参数，让汇编与 c 源码同时显示：disas /m main

     使用 x 命令可以查看特定内存的值:
     x/nyz
     其中 n 为要显示的字段数
     y 时输出格式, 它可以是:
     c 用于字符, d 用于十进制, x 用于 16 进制
     z 是要显示的字段长度, 它可以是:
     b 用于字节, h 用于 16 字节, w 用于 32 位字
     如:
     x/42cb 用于显示前 42 字节
     print-stack      查看堆栈               
     u start end      反汇编内存                       
     trace on          反汇编每一条                    
     trace-reg on    每执行一条打印 cpu               
     xp /32bx 0x90000  查询从 0x90000 开始的 32 个字节内容 
*** make GNU 的工程化编译工具
*** eclipse
**** eclipse 快捷键
   1. 常用快捷键
   这是使用工具的第一步，熟练使用快捷键对于我们编写程序会起到相当大帮助，所以这里笔者列出的快捷键建议大家必须都掌握。
   Ctrl + 鼠标左键（类、方法、属性的变量名词）：定位跟踪某变量声明或定义的位置
   Ctrl + S：保存当前文件
   Ctrl + X：剪切
   Ctrl + C：复制
   Ctrl + V：粘贴
   Ctrl + D：删除当前行
   Ctrl + F：查找/替换（当前编辑窗口）
   Ctrl + H：全局搜索
   Ctrl + /：注释当前行或多行代码
   Ctrl + Shift + C：注释当前行或多行代码
   Ctrl + Shift + F：格式化当前代码
   Ctrl + Shift + O：缺少的 Import 语句被加入，多余的 Import 语句被删除（先把光标定位到需导入包的类名上）
   Ctrl + Shift + S：保存所有文件
   Ctrl + Shift + X：把当前选中的文本全部变为大写
   Ctrl + Shift + Y：把当前选中的文本全部变为小写
   Alt + /：代码智能提示
   Alt + Shift + R：重命名（包括文件名、类名、方法名、变量名等等，非常好用）
   Alt + Shift + J：生成类或方法的注释
   Alt + Shift + S：打开 Source 窗口（生成 get、set 方法，实现、覆盖接口或类的方法，很常用）
   Alt + Shift + D, J：如果有 main 方法入口，则以 Debug 方式执行代码
   Alt + Shift + X, J：如果有 main 方法入口，则以 Run 方式执行代码
 
 
   2. 插件推荐
   Eclipse 默认情况下是一个纯净版的，所以功能简单，而开源 IDE 最为强大的莫过于各种插件，通过使用插件可以帮助我们减少大量编写代码的工作量，
   也帮助我们降低了编写代码的难度，所以懂得安装必要插件，也是熟练使用 IDE 的鉴证。
   ① hibernate Tools
   Hibernate Tools 是一套全新而且完整的面向 Hibernate3 的工具集合，它包含了 Eclipse 插件和 Ant 编译流程，是 JBoss Tools 的核心组件。使用该插件能大大减少我们
   使用 Hibernate 的工作量，支持自动生成全部 Hibernate 的 xml 文件、javabean、HTML 表单文件等。
   安装地址：http://download.jboss.org/jbosstools/updates/development/indigo/
   ② spring IDE
   Spring IDE 是 Spring 官方网站推荐的 Eclipse 插件，可提供在开发 Spring 时对 Bean 定义文件进行提示、验证并以可视化的方式查看各个 Bean 之间
   的依赖关系等，对基于 spring 框架的项目开发提供了有力的支持。
   安装地址：http://dist.springsource.com/release/TOOLS/update/e3.6/
   ③ Subclipse
   Subclipse 是基于 Eclipse 的 SVN 插件，支持所有版本的 Eclipse，团队开发必备插件。
   安装地址：http://subclipse.tigris.org/update_1.8.x
   ④ Findbugs
   FindBugs 是一个能静态分析源代码中可能会出现 Bug 的 Eclipse 插件工具。它检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。
   利用这个工具，就可以在不实际运行程序的情况对软件进行分析。它可以帮助改进代码的质量。
   安装地址：http://findbugs.cs.umd.edu/eclipse/
   ⑤ Sysdeo Tomcat Launcher Plugin
   Sysdeo Tomcat Launcher Plugin 是 Tomcat 的 Eclipse 插件，帮助我们自动部署 tomcat 服务器。该插件不是必要插件，可以不装。
   下载地址：http://www.eclipsetotale.com/tomcatPlugin/tomcatPluginV33.zip
 
   插件安装方法
   插件大概有三种安装方法：
   第一种：知道在线安装地址。Eclipse→Help→Install New Software...→地址栏（Work with）中输入安装地址→
   勾选要安装的插件→Next→同意安装协议→Finish→等待安装完毕→按要求重启 Eclipse
   第二种：手动从官网下载好插件并手动与 Eclipse 集成。这种方法一般的思路是：先关闭 Eclipse，然后将下载好的插件解压后，复制到 Eclipse 安装目
   录下的 plugins 文件夹和 features 文件夹下，如果必要的话再创建一个 link 文件，再重新打开 Eclipse。
   第三种：在线搜索安装。Eclipse→Help→Eclipse Marketplace...→在搜索栏输入要查找的插件→点击 Install 按钮→等待安装完毕→按要求重启 Eclipse
   这里笔者推荐第一种，如果不知道安装地址，那么就用第三种，第二种方法有时操作错误的话就会出现问题，风险较大，所以不推荐。
 
   3. tomcat
   ① 配置
   Window→Preferences→Server→Runtime Environment→Add→Apache→选择 tomcat 版本→Next→更改显示名称（Name）
   →Browse...浏览选择事先解压好的 tomcat 文件夹→选择 jre→Finish→OK→打开 Servers 窗体→右击选择 New→Server→选择 tomcat 版本→
   选择刚配置好的 tomcat→Next→选择项目→Finish
   ② 使用心得
   当我们修改某处代码后，启动 tomcat 发现页面没有变化时，要先关掉 tomcat，右击 Servers 窗口中 tomcat 服务器图标，选择 Clean...
   来清理下编译后的源码，再启动 tomcat 来重新编译下源码。
   而且如果部署多个，或 tomcat 异常时，右击 Servers 窗口中 tomcat 服务器图标，选择 Properties，检查 General 选项右侧 Location 是否正确，
   如果不正确则点击 Switch Location。
   虽然一个 tomcat 支持同时启动多个项目，但项目多启动时会很慢，所以如果不是工程项目需要的话，建议 tomcat 只部署启动一个项目，将暂时无用的项目移除。
   当 web 项目启动加载时间过长导致 tomcat 启动失败的话，可适当延长 tomcat 启动超时的时间（默认 45 秒），双击 Servers 窗口中 tomcat
   服务器打开 tomcat 属性窗口，点击右上方 Timeouts 选项，修改 Start(in seconds)的时间。
   eclipse 默认情况下是调用 tomcat 接口模拟启动 tomcat，而不是真正启动 tomcat，所以大家经常会遇到一件怪事：启动 tomcat 后，虽然能正常进 web 项目首页，
   却仅不了 tomcat 小猫首页（即 http://localhost:8080/），并且 web 项目部署编译后生成的文件也不在 tomcat 文件目录下的 work 目录下。
   解决办法：如果 tomcat 服务器下已经部署了项目，就先要将其全部移除，即右击 Servers 窗口中 tomcat 服务器图标，选择 Add and Remove...，
   单击 Remove All 按钮，单击 Finish 按钮。之后先 Clean 清理下，再双击 tomcat 服务器图标打开属性窗口，选择左侧中间 Server Locations 选项，
   选择下方第二个单选按钮（Use Tomcat installation），并将 Deploy path 文本框中的"wtpwebapps"（默认值）改为 webapps，也就是 tomcat 中发布
   项目所在的文件夹名字，最好再将项目重新部署到 tomcat 上，启动 tomcat 后，就可以看到熟悉的小猫页面了，同时在 tomcat 文件目录下的 work 文件夹下也能
   看见熟悉的编译后的页面文件了。
   如果代码出现引入 javax.servlet.http.*报错，说明是缺少 tomcat 的 jar 包，引入即可。方法：在左侧资源管理器右击项目，选择 Build Path 下的
   Configure Build Path...，右侧点击 Add Library...按钮，选择 Server Runtime，点击 Next 后选择 tomcat，Finish。
 
   4. eclipse 常见配置
   ● 字体大小
   Window→Preferences→General→Appearance→Colors and Fonts→右侧窗口→Basic 选项→双击 Text Font
   ● 修改打开文件的编辑浏览器
   Window→Preferences→General→Editors→File Associations→选择要修改的文件类型→在下方选择编辑浏览器
   ● 显示/隐藏代码行号
   Window→Preferences→General→Editors→勾选 Show line numbers
   ● 添加自定义 jar 包 Libraries
   Window→Preferences→Java→Build Path→User Libraries→右侧点击 New...→输入名称→点击 Add JARs...→浏览选择相应的 jar 文件
   ● 配置 tomcat 等服务器
   Window→Preferences→Server→Runtime Environment→Add...→选择需要的服务器（以 tomcat 为例请见上面 tomcat 配置）
   ● 修改格式化代码的换行判定
   Window→Preferences→Java→Code Style→Formatter→右侧点击 New...→输入名称→点击 OK→在弹出的窗口选择 Line Wrapping 选项卡→修改 Maixmum line width 文本框的值（默认 80）
   ● 添加 xml 的 dtd、xsd 等 xml 语法规则文件，实现代码自动提示
   Window→Preferences→XML→XML Catalog→右侧点击 Add...→Key type 选择 Public ID→Location 浏览选择你所下载的 DTD 文件的物理位置→Key 填入 xml 文档头部 <!DOCTYPE sqlMapConfig PUBLIC 后面的那些 url 地址→OK
   ● 修改编码格式
   右击你要修改的项目/包/类→选择 Properties→在 Resource 选项右侧的 Text file encoding 下选择你需要的编码格式
   ● 相同名称（包括类名、方法名、变量名等等）以不同背景色标识出来
   见下图：

   或者按快捷键：Alt + Shift + O
 
   在 Window→Preferences 下有许多配置，这里并不可能介绍很全，所以只列出最为常用的，大家有时间可能多进这里看看，再多点点多试试就明白了。
 
 
   5. SVN
   ● 上传项目至 SVN 服务器
   右击要上传的项目→Team→Share Project...→SVN→创建新的资源库位置/使用现有的资源库→Next→（输入 URL 地址）→Next→使用项目名称作为文件夹名→Next→Finish→（输入用户名/密码）
   注意："使用项目名称作为文件夹名"时，要保证 SVN 服务器端已创建与项目名称相同的文件夹，否则会导入失败。如果 SVN 端创建的文件夹名与项目名称不符，则在该步骤选择"使用指定的模块名"以确保 SVN 服务器端与项目名称一致。
   ● 下载项目从 SVN 服务器
   在资源管理器空白处右击→Import...→选择 SVN 文件夹→从 SVN 检出项目→创建新的资源库位置/使用现有的资源库→Next→（输入 URL 地址）→Next→做为新项目检出，并使用新建项目向导进行配置→Finish→Yes→配置新建项目（如输入项目名称）→OK
   注意：这个"输入 URL 地址"与上面上传项目的不同，这个 URL 地址需要输入项目具体所在的文件夹，而上一个因为有"使用项目名称作为文件夹名"这步，所以不需要带文件夹名称。
   ● 提交、更新、还原文件
   选中需要提交的文件、jar 包、javabean 等文件然后右击→Team→选择相应的操作。（这个基本地球人看看都会，所以就不多说了）
** xclip 这个剪切板和 图形下的剪切板不是同一个
*** 保存到内部剪切板
   ls -al | xclip
*** 文件内容 到剪切板中
   xclip /etc/apt/sources.list
*** 输出到系统剪切板
   xclip -o
   
** 文件系统
*** umount 用于卸载已经加载的文件系统
*** mount 用于加载文件系统到指定的加载点
    mount  [-t vfstype] [-o options] device dir
    1.-t vfstype 文件系统类型
    　　光盘或光盘镜像：iso9660
    　　DOS fat16 文件系统：msdos
    　　Windows 9x fat32 文件系统：vfat
    　　Windows NT ntfs 文件系统：ntfs
    　　Mount Windows 文件网络共享：smbfs
    　　UNIX(LINUX) 文件网络共享：nfs
    2.-o options 主要用来描述设备或档案的挂接方式。常用的参数有：
    　　loop：用来把一个文件当成硬盘分区挂接上系统
    　　ro：采用只读方式挂接设备
    　　rw：采用读写方式挂接设备
    　　iocharset：指定访问文件系统所用字符集,不能显示中文 iocharset=cp936
    3.device 要挂接(mount)的设备。
    4.dir 设备在系统上的挂接点(mount point)。
    sudo mount -t smbfs -o username=user,password='' //10.0.1.1/windowsshare /mnt 浏览 windows 共享文件夹
** 搜索
*** grep 文本搜索
     -C 5 foo file  显示 file 文件中匹配 foo 字串那行以及上下 5 行
     -B 5 foo file  显示 foo 及前 5 行
     -A 5 foo file  显示 foo 及后 5 行
     －c：只输出匹配行的计数。
     －I：不区分大 小写(只适用于单字符)。
     －h：查询多文件时不显示文件名。
     －l：查询多文件时只输出包含匹配字符的文件名。
     －n：显示匹配行及 行号。
     －s：不显示不存在或无匹配文本的错误信息。
     －v：显示不包含匹配文本的所有行。
     pattern 正则表达式主要参数：
     \： 忽略正则表达式中特殊字符的原有含义。
     ^：匹配正则表达式的开始行。
     $: 匹配正则表达式的结束行。
     \<：从匹配正则表达 式的行开始。
     \>：到匹配正则表达式的行结束。
     [ ]：单个字符，如[A]即 A 符合要求 。
     [ - ]：范围，如[A-Z]，即 A、B、C 一直到 Z 都符合要求 。
     .：所有的单个字符。
     $ grep ‘test’ d*
     显示所有以 d 开头的文件中包含 test 的行。
     $ grep ‘test’ aa bb cc
     显示在 aa，bb，cc 文件中匹配 test 的行。
     $ grep ‘[a-z]\{5\}’ aa
     显示所有包含每个字符串至少有 5 个连续小写字符的字符串的行。
     $ grep ‘w\(es\)t.*\1′ aa
     如果 west 被匹配，则 es 就被存储到内存中，并标记为 1，然后搜索任意个字符(.*)，这些字符后面紧跟着 另外一个 es(\1)，找到就显示该行。如果用 egrep 或 grep -E，就不用"\"号进行转义，直接写成’w(es)t.*\1′就可以了。

     grep 命令使用复杂实例
     假设您正在’/usr/src/Linux/Doc’目录下搜索带字符 串’magic’的文件：
     $ grep magic /usr/src/Linux/Doc/*
     sysrq.txt:* How do I enable the magic SysRQ key?
     sysrq.txt:* How do I use the magic SysRQ key?
     其中文件’sysrp.txt’包含该字符串，讨论的是 SysRQ 的功能。
     默认情况下，’grep’只搜索当前目录。如果 此目录下有许多子目录，’grep’会以如下形式列出：
     grep: sound: Is a directory
     这可能会使’grep’ 的输出难于阅读。这里有两种解决的办法：
     明确要求搜索子目录：grep -r
     或忽略子目录：grep -d skip
     如果有很多 输出时，您可以通过管道将其转到’less’上阅读：
     $ grep magic /usr/src/Linux/Documentation/* | less
     这样，您就可以更方便地阅读。

     -q 静静地 ，存在则返回 0, 不存在返回 1
     下面还有一些有意思的命令行参数：
     grep -i pattern files：不区分大小写地搜索。默认情况区分大小写，
     grep -l pattern files：只列出匹配的文件名，
     grep -L pattern files：列出不匹配的文件名，
     grep -w pattern files：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，
     grep -C number pattern files：匹配的上下文分别显示[number]行，
     grep pattern1 | pattern2 files：显示匹配 pattern1 或 pattern2 的行，
     grep pattern1 files | grep pattern2：显示既匹配 pattern1 又匹配 pattern2 的行。
     grep -n pattern files  即可显示行号信息
     grep -c pattern files  即可查找总行数

*** find 
    pathname -options [-print -exec -ok ...]
    关系操作
    -a and
    -or -o or
    -n not 
     : -exec：find 命令对匹配的文件执行该参数所给出的 shell 命令。相应命令的形式为'command' {  } \;，注意{   }和\；之间的空格。
     : -ok：和-exec 的作用相同，只不过以一种更为安全的模式来执行该参数所给出的 shell 命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。
     : -name   按照文件名查找文件。
     : -perm   按照文件权限来查找文件。
     : -prune  使用这一选项可以使 find 命令不在当前指定的目录中查找，如果同时使用-depth 选项，那么-prune 将被 find 命令忽略。
     : -user   按照文件属主来查找文件。
     : -group  按照文件所属的组来查找文件。
     : -mtime -n +n  按照文件的更改时间来查找文件， - n 表示文件更改时间距
     : 现在 n 天以内，+ n 表示文件更改时间距现在 n 天以前。find 命令还有-atime 和-ctime 选项，但它们都和-m time 选项。
     : -nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups 中不存在。
     : -nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd 中不存在。
     : -newer file1 ! file2  查找更改时间比文件 file1 新但比文件 file2 旧的文件。
     : -iname 忽略大小写
**** -type  查找某一类型的文件，诸如：
     + b - 块设备文件。
     + d - 目录。
     + c - 字符设备文件。
     + p - 管道文件。
     + l - 符号链接文件。
     + f - 普通文件。
**** -size n：[c] 查找文件长度为 n 块的文件，带有 c 时表示文件长度以字节计。
**** -depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
**** -fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab 中找到，该配置文件中包含了本系统中有关文件系统的信息。
**** -mount：在查找文件时不跨越文件系统 mount 点。
**** -follow：如果 find 命令遇到符号链接文件，就跟踪至链接所指向的文件。
**** -cpio：对匹配的文件使用 cpio 命令，将这些文件备份到磁带设备中。
**** time
     : -amin n   查找系统中最后 N 分钟访问的文件  -n n 天以内;+n n 天之前
     : -atime n  查找系统中最后 n*24 小时访问的文件
     : -cmin n   查找系统中最后 N 分钟被改变文件状态的文件
     : -ctime n  查找系统中最后 n*24 小时被改变文件状态的文件
     : -mmin n   查找系统中最后 N 分钟被改变文件数据的文件
     : -mtime n  查找系统中最后 n*24 小时被改变文件数据的文件
     : find  ./    -mtime    -1    -type f    -ok   ls -l    {} \;  
     : find .    -perm -007    -exec ls -l {} \;  
     : ! 否定参数
*** whereis 查找二进制程序、代码等相关文件路径
** 编辑
*** sed 命令编辑器
**** 选项 
     sed [options] 'command' file(s)
     sed [options] -f scriptfile file(s)
     -e<script>或--expression=<script>：以选项中的指定的 script 来处理输入的文本文件；
     -f<script 文件>或--file=<script 文件>：以选项中指定的 script 文件来处理输入的文本文件；
**** 功能
     a\ 在当前行下面插入文本。
     i\ 在当前行上面插入文本。
     c\ 把选定的行改为新的文本。
     d 删除，删除选择的行。
     D 删除模板块的第一行。
     s 替换指定字符 sed 's/aa/bb/' file 注意/ 符,用来分界
     h 拷贝模板块的内容到内存中的缓冲区。
     H 追加模板块的内容到内存中的缓冲区。
     g 获得内存缓冲区的内容，并替代当前模板块中的文本。
     G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
     l 列表不能打印字符的清单。
     n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
     N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
     p 打印模板块的行。(显示两遍)
     P(大写) 打印模板块的第一行。
     q 退出 Sed。
     b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
     r file 从 file 中读行。
     t label if 分支，从最后一行开始，条件一旦满足或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
     T label 错误分支，从最后一行开始，一旦发生错误或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
     w file 写并追加模板块到 file 末尾。  
     W file 写并追加模板块的第一行到 file 末尾。  
     ! 表示后面的命令对所有没有被选定的行发生作用。  
     = 打印当前行号码。  
     # 把注释扩展到下一个换行符以前。  

     sed 替换标记
     g 表示行内全面替换。  
     p 表示打印行。  
     w 表示把行写入一个文件。  
     x 表示互换模板块中的文本和缓冲区中的文本。  
     y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
     \1 子串匹配标记
     & 已匹配字符串标记

     sed 元字符集
     ^ 匹配行开始，如：/^sed/匹配所有以 sed 开头的行。
     $ 匹配行结束，如：/sed$/匹配所有以 sed 结尾的行。
     . 匹配一个非换行符的任意字符，如：/s.d/匹配 s 后接一个任意字符，最后是 d。
     [* 匹配 0 个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟 sed 的行。
     [] 匹配一个指定范围内的字符，如/[ss]ed/匹配 sed 和 Sed。  
     [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含 A-R 和 T-Z 的一个字母开头，紧跟 ed 的行。
     \(..\) 匹配子串，保存匹配的字符，如 s/\(love\)able/\1rs，loveable 被替换成 lovers。
     & 保存搜索字符用来替换其他字符，如 s/love/**&**/，love 这成**love**。
     \< 匹配单词的开始，如:/\<love/匹配包含以 love 开头的单词的行。
     \> 匹配单词的结束，如/love\>/匹配包含以 love 结尾的单词的行。
     x\{m\} 重复字符 x，m 次，如：/0\{5\}/匹配包含 5 个 0 的行。
     x\{m,\} 重复字符 x，至少 m 次，如：/0\{5,\}/匹配至少有 5 个 0 的行。
     x\{m,n\} 重复字符 x，至少 m 次，不多于 n 次，如：/0\{5,10\}/匹配 5~10 个 0 的行。 

**** sed 用法实例
***** 替换：s
     sed 's/book/books/' file

     -n 选项和 p 命令一起使用表示只打印那些发生替换的行：
     sed -n 's/test/TEST/p' file

     直接编辑文件选项-i，会匹配 file 文件中每一行的第一个 book 替换
     为 books：
     sed -i 's/book/books/g' file
***** 全面替换标记 g
     sed 's/book/books/g' file
***** 替换 1 行中第 N 处匹配开始替换时，可以使用 /Ng：
     echo sksksksksksk | sed 's/sk/SK/2g'
     skSKSKSKSKSK
***** 使用定界符
     sed 's:test:TEXT:g'
     sed 's|test|TEXT|g'

     定界符出现在样式内部时，需要进行转义：
     sed 's/\/bin/\/usr\/local\/bin/g'

***** 删除操作：d 命令
***** 删除空白行：
     sed '/^$/d' file

***** 删除文件的第 2 行：
     sed '2d' file
***** 删除文件的第 2 行到末尾所有行：
     sed '2,$d' file
***** 删除文件最后一行：
     sed '$d' file
***** 删除文件中所有开头是 test 的行：
     sed '/^test/'d file
***** 已匹配字符串标记&
     正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之
     前所匹配到的单词：

     echo this is a test line | sed 's/\w\+/[&]/g'
     [this] [is] [a] [test] [line]

     所有以 192.168.0.1 开头的行都会被替换成它自已加 localhost：

     sed 's/^192.168.0.1/&localhost/' file
     192.168.0.1localhost
***** 子串匹配标记\1
     匹配给定样式的其中一部分：
     echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'
     this is 7 in a number

     命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\)
     用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹
     配到的第二个结果就是 \2，例如：

     echo aaa BBB | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
     BBB aaa

     love 被标记为 1，所有 loveable 会被替换成 lovers，并打印出来：

     sed -n 's/\(love\)able/\1rs/p' file
***** 组合多个表达式
     sed '表达式' | sed '表达式'

     等价于：

     sed '表达式; 表达式'

     引用

     sed 表达式可以使用单引号来引用，但是如果表达式内部包含变量字
     符串，就需要使用双引号。

     test=hello
     echo hello WORLD | sed "s/$test/HELLO"
     HELLO WORLD

     选定行的范围：,（逗号）

     所有在模板 test 和 check 所确定的范围内的行都被打印：

     sed -n '/test/,/check/p' file

     打印从第 5 行开始到第一个包含以 test 开始的行之间的所有行：

     sed -n '5,/^test/p' file

     对于模板 test 和 west 之间的行，每行的末尾用字符串 aaa bbb 替换：

     sed '/test/,/west/s/$/aaa bbb/' file

     多点编辑：e 命令

     -e 选项允许在同一行里执行多条命令：

     sed -e '1,5d' -e 's/test/check/' file

     上面 sed 表达式的第一条命令删除 1 至 5 行，第二条命令用 check 替换
     test。命令的执行顺序对结果有影响。如果两个命令都是替换命令
     ，那么第一个替换命令将影响第二个替换命令的结果。

     和 -e 等价的命令是 --expression：

     sed --expression='s/test/check/' --expression='/love/d' file

     从文件读入：r 命令

     file 里的内容被读进来，显示在与 test 匹配的行后面，如果匹配多
     行，则 file 的内容将显示在所有匹配行的下面：

     sed '/test/r file' filename

     写入文件：w 命令  

     在 example 中所有包含 test 的行都被写入 file 里：

     sed -n '/test/w file' example

     追加（行下）：a\命令

     将 this is a test line 追加到以 test 开头的行后面：

     sed '/^test/a\this is a test line' file

     在 test.conf 文件第 2 行之后插入 this is a test line：

     sed -i '2a\this is a test line' test.conf

     插入（行上）：i\命令

     将 this is a test line 追加到以 test 开头的行前面：

     sed '/^test/i\this is a test line' file

     在 test.conf 文件第 5 行之前插入 this is a test line：

     sed -i '5i\this is a test line' test.conf

     下一个：n 命令

     如果 test 被匹配，则移动到匹配行的下一行，替换这一行的 aa，变
     为 bb，并打印该行，然后继续：

     sed '/test/{ n; s/aa/bb/; }' file

     变形：y 命令

     把 1~10 行内所有 abcde 转变为大写，注意，正则表达式元字符不能使
     用这个命令：

     sed '1,10y/abcde/ABCDE/' file

     退出：q 命令

     打印完第 10 行后，退出 sed

     sed '10q' file

     保持和获取：h 命令和 G 命令

     在 sed 处理文件的时候，每一行都被保存在一个叫模式空间的临时缓
     冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将
     打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。

     sed -e '/test/h' -e '$G' file

     在这个例子里，匹配 test 的行被找到后，将存入模式空间，h 命令将
     其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的
     意思是，当到达最后一行后，G 命令取出保持缓冲区的行，然后把它
     放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾
     。在这个例子中就是追加到最后一行。简单来说，任何包含 test 的
     行都被复制并追加到该文件的末尾。

     保持和互换：h 命令和 x 命令

     互换模式空间和保持缓冲区的内容。也就是把包含 test 与 check 的行
     互换：

     sed -e '/test/h' -e '/check/x' file

     脚本 scriptfile

     sed 脚本是一个 sed 的命令清单，启动 Sed 时以-f 选项引导脚本文件名
     。Sed 对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空
     白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行
     为注释行，且不能跨行。

     sed [options] -f scriptfile file(s)

     打印奇数行或偶数行

     方法 1：

     sed -n 'p;n' test.txt  #奇数行
     sed -n 'n;p' test.txt  #偶数行

     方法 2：

     sed -n '1~2p' test.txt  #奇数行
     sed -n '2~2p' test.txt  #偶数行

     打印匹配字符串的下一行

     grep -A 1 SCC URFILE
     sed -n '/SCC/{n;p}' URFILE
     awk '/SCC/{getline; print}' URFILE
**** 修改 更改 
*** emacs 可视化编辑器
*** join 行号及行内文本同，则显示
    按两个文件的相同字段合并
*** tr 替换或删除字符
** 聊天
*** IRC
  /server irc.debian.org
  /join #debian
  /part #debian  离开
  /quit
  要给 foo 发送一条内容为 "Hello Mr. Foo"的私人消息,请输入
  /msg foo Hello Mr. Foo
**** irc 频道
     #linuxba 国内 linux 贴吧
     #c_lang_cn C 语言中文 irc 频道
     ##g 讲到这里，必须得推广下自己的频道，##g，作为一个大水比，同时也是小白，
     #archlinux-cn 
     #emacs
     #orz
     #debiancn
     #kali
     #osdev 操作系统开发频道
** ssh
1、复制 SSH 密钥到目标主机，开启无密码 SSH 登录
ssh-copy-id user@host
如果还没有密钥，请使用 ssh-keygen 命令生成。

2、从某主机的 80 端口开启到本地主机 2001 端口的隧道
ssh -N -L2001:localhost:80 somemachine
现在你可以直接在浏览器中输入 http://localhost:2001 访问这个网站。

3、将你的麦克风输出到远程计算机的扬声器
dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp
这样来自你麦克风端口的声音将在 SSH 目标计算机的扬声器端口输出，但遗憾的是，声音质量很差，你会听到很多嘶嘶声。

4、比较远程和本地文件
ssh user@host cat /path/to/remotefile | diff /path/to/localfile –
在比较本地文件和远程文件是否有差异时这个命令很管用。

5、通过 SSH 挂载目录/文件系统
sshfs name@server:/path/to/folder /path/to/mount/point
从 http://fuse.sourceforge.net/sshfs.html 下载 sshfs，它允许你跨网络安全挂载一个目录。

6、通过中间主机建立 SSH 连接
ssh -t reachable_host ssh unreachable_host
Unreachable_host 表示从本地网络无法直接访问的主机，但可以从 reachable_host 所在网络访问，这个命令通过到 reachable_host 的"隐藏"连接，创建起到 unreachable_host 的连接。

7、将你的 SSH 公钥复制到远程主机，开启无密码登录 – 简单的方法
ssh-copy-id username@hostname

8、直接连接到只能通过主机 B 连接的主机 A
ssh -t hostA ssh hostB
当然，你要能访问主机 A 才行。

9、创建到目标主机的持久化连接
ssh -MNf <user>@<host>
在后台创建到目标主机的持久化连接，将这个命令和你~/.ssh/config 中的配置结合使用：

Host host
ControlPath ~/.ssh/master-%r@%h:%p
ControlMaster no

所有到目标主机的 SSH 连接都将使用持久化 SSH 套接字，如果你使用 SSH 定期同步文件（使用 rsync/sftp/cvs/svn），这个命令将非常有用，因为每次打开一个 SSH 连接时不会创建新的套接字。

10、通过 SSH 连接屏幕
ssh -t remote_host screen –r
直接连接到远程屏幕会话（节省了无用的父 bash 进程）。

11、端口检测（敲门）
knock <host> 3000 4000 5000 && ssh -p <port> user@host && knock <host> 5000 4000 3000
在一个端口上敲一下打开某个服务的端口（如 SSH），再敲一下关闭该端口，需要先安装 knockd，下面是一个配置文件示例。

[options]
logfile = /var/log/knockd.log
[openSSH]
sequence = 3000,4000,5000
seq_timeout = 5
command = /sbin/iptables -A INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT
tcpflags = syn
[closeSSH]
sequence = 5000,4000,3000
seq_timeout = 5
command = /sbin/iptables -D INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT
tcpflags = syn

12、删除文本文件中的一行内容，有用的修复
ssh-keygen -R <the_offending_host>
在这种情况下，最好使用专业的工具。

13、通过 SSH 运行复杂的远程 shell 命令
ssh host -l user $(<cmd.txt)

更具移植性的版本：
ssh host -l user "`cat cmd.txt`"

14、通过 SSH 将 MySQL 数据库复制到新服务器
mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost "mysql -uUSER -pPASS NEW_DB_NAME"

通过压缩的 SSH 隧道 Dump 一个 MySQL 数据库，将其作为输入传递给 mysql 命令，我认为这是迁移数据库到新服务器最快最好的方法。

15、删除文本文件中的一行，修复"SSH 主机密钥更改"的警告
sed -i 8d ~/.ssh/known_hosts

16、从一台没有 SSH-COPY-ID 命令的主机将你的 SSH 公钥复制到服务器
cat ~/.ssh/id_rsa.pub | ssh user@machine "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
如果你使用 Mac OS X 或其它没有 ssh-copy-id 命令的*nix 变种，这个命令可以将你的公钥复制到远程主机，因此你照样可以实现无密码 SSH 登录。

17、实时 SSH 网络吞吐量测试
yes | pv | ssh $host "cat > /dev/null"

通过 SSH 连接到主机，显示实时的传输速度，将所有传输数据指向/dev/null，需要先安装 pv。
如果是 Debian：
apt-get install pv

如果是 Fedora：
yum install pv
（可能需要启用额外的软件仓库）。

18、如果建立一个可以重新连接的远程 GNU screen
ssh -t user@some.domain.com /usr/bin/screen –xRR

人们总是喜欢在一个文本终端中打开许多 shell，如果会话突然中断，或你按下了"Ctrl-a d"，远程主机上的 shell 不会受到丝毫影响，你可以重新连接，其它有用的 screen 命令有"Ctrl-a c"（打开新的 shell）和"Ctrl-a a"（在 shell 之间来回切换），请访问 http://aperiodic.net/screen/quick_reference 阅读更多关于 screen 命令的快速参考。

19、继续 SCP 大文件
rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file

它可以恢复失败的 rsync 命令，当你通过 VPN 传输大文件，如备份的数据库时这个命令非常有用，需要在两边的主机上安装 rsync。

rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file local -> remote

或

rsync –partial –progress –rsh=ssh $user@$host:$remote_file $destination_file remote -> local

20、通过 SSH W/ WIRESHARK 分析流量
ssh root@server.com ‘tshark -f "port !22″ -w -' | wireshark -k -i –

使用 tshark 捕捉远程主机上的网络通信，通过 SSH 连接发送原始 pcap 数据，并在 wireshark 中显示，按下 Ctrl+C 将停止捕捉，但也会关闭 wireshark 窗口，可以传递一个"-c #"参数给 tshark，让它只捕捉"#"指定的数据包类型，或通过命名管道重定向数据，而不是直接通过 SSH 传输给 wireshark，我建议你过滤数据包，以节约带宽，tshark 可以使用 tcpdump 替代：

ssh root@example.com tcpdump -w – ‘port !22′ | wireshark -k -i –

21、保持 SSH 会话永久打开
autossh -M50000 -t server.example.com ‘screen -raAd mysession’

打开一个 SSH 会话后，让其保持永久打开，对于使用笔记本电脑的用户，如果需要在 Wi-Fi 热点之间切换，可以保证切换后不会丢失连接。

22、更稳定，更快，更强的 SSH 客户端
ssh -4 -C -c blowfish-cbc
强制使用 IPv4，压缩数据流，使用 Blowfish 加密。

23、使用 cstream 控制带宽
tar -cj /backup | cstream -t 777k | ssh host ‘tar -xj -C /backup’

使用 bzip 压缩文件夹，然后以 777k bit/s 速率向远程主机传输。Cstream 还有更多的功能，请访问 http://www.cons.org/cracauer/cstream.html#usage 了解详情，例如：

echo w00t, i’m 733+ | cstream -b1 -t2

24、一步将 SSH 公钥传输到另一台机器
ssh-keygen; ssh-copy-id user@host; ssh user@host

这个命令组合允许你无密码 SSH 登录，注意，如果在本地机器的~/.ssh 目录下已经有一个 SSH 密钥对，ssh-keygen 命令生成的新密钥可能会覆盖它们，ssh-copy-id 将密钥复制到远程主机，并追加到远程账号的~/.ssh/authorized_keys 文件中，使用 SSH 连接时，如果你没有使用密钥口令，调用 ssh user@host 后不久就会显示远程 shell。

25、将标准输入（stdin）复制到你的 X11 缓冲区
ssh user@host cat /path/to/some/file | xclip
你是否使用 scp 将文件复制到工作用电脑上，以便复制其内容到电子邮件中？xclip 可以帮到你，它可以将标准输入复制到 X11 缓冲区，你需要做的就是点击鼠标中键粘贴缓冲区中的内容。

** softether vpn 客户端
    Please execute './vpnclient start' to run the SoftEther VPN Client Background Service.
    And please execute './vpncmd' to run the SoftEther VPN Command-Line Utility to configure SoftEther VPN Client.

  创建连接配置
  Create your connection setting using your assigned RapidVPN server details. Your file content must be similar to:
  #+BEGIN_SRC c++

***** 导入    

      1、首先建空数据库
mysql>create database abc;

2、导入数据库
方法一：
（1）选择数据库
mysql>use abc;
（2）设置数据库编码
mysql>set names utf8;
（3）导入数据（注意 sql 文件的路径）
mysql>source /home/abc/abc.sql;
方法二：
mysql -u 用户名 -p 密码 数据库名 < 数据库名.sql
#mysql -uabc_f -p abc < abc.sql

建议使用第二种方法导入。

** 中文乱码  
*** unzip 中文乱码 
    zip 中文乱码 unzip -O cp936 /-O gbk gb18030 都可以
    指定目录 -d
    或 7z 或
#+BEGIN_SRC python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import zipfile

#print "Processing File " + sys.argv[1]

file=zipfile.ZipFile(sys.argv[1],"r");
for name in file.namelist():
    utf8name=name.decode('gbk')
#    print "Extracting " + utf8name
    pathname = os.path.dirname(utf8name)
    if not os.path.exists(pathname) and pathname!= "":
        os.makedirs(pathname)
    data = file.read(name)
    if not os.path.exists(utf8name):
        fo = open(utf8name, "w")
        fo.write(data)
        fo.close
file.close()
#+END_SRC

** 重启输入法
   #!/bin/sh
   pidof fcitx | xargs kill
   pidof sogou-qimpanel | xargs kill
   nohup fcitx  1>/dev/null 2>/dev/null &
   nohup sogou-qimpanel  1>/dev/null 2>/dev/null &
** xrandr 
    关闭笔记本，开外置：xrandr --output VGA-1-1 --auto --output LVDS-1-1 --off
** 识别 usb
   最近项目需要在 Android 源码中进行开发，于是在 Virtual Box 中安装 Ubuntu，郁闷的是插上 usb 连接线，连接上手机，Ubuntu 不能自动识别连接设备。在网上搜索了很多解决办法，各抒己见，最终找到一种可行的解决方案：
   1、安装 usbmount
   $ sudo apt-get install usbmount  
   2、更改 usbmount 配置文件
   $ sudo gedit /etc/usbmount/usbmount.conf  
 3、在打开的文件中找到 FILESYSTEM，并在其中添加 vfat,ntfs
 4、FS_MOUNTOPTIONS 这个选项里加入”"-fstype= vfat,iocharset=utf8,codepage=936,umask=000,users”
 5、重启 udev
 $sudo /etc/init.d/udev restart  
 6、重启 Ubuntu
 $ sudo reboot  
 重启之后即可识别 USB。
** 服务 systemctl 
   systemctl is-enabled servicename.service #查询服务是否开机启动
   systemctl enable *.service #开机运行服务
   systemctl disable *.service #取消开机运行
 systemctl start *.service #启动服务
 systemctl stop *.service #停止服务
 systemctl restart *.service #重启服务
 systemctl reload *.service #重新加载服务配置文件
 systemctl status *.service #查询服务运行状态 
** 开机启动
   update-rc.d 使用
   update-rc.d 是一个 Perl 脚本，是用来自动升级 System V 类型初始化脚本，简单来说就是哪些东西是你想要在系统引导初始化的时候运行的，哪些是希望在关机或重启时候停止的，都可以用它来帮你设置。这些脚本的连接位于/etc/rcX.d/下（X 代表 0～6），对应脚本位于/etc/init.d/下。
   1、设置启动项：
   update-rc.d <serviceName> start <order> <runlevel>
  
 2、设置停止项：
 update-rc.d <serviceName> stop <order> <runlevel>
 设置启动和停止可以写在一起，例如：
 sudo update-rc.d <serviceName> start 20 1 2 3 4 5 . stop 60 0 6 .   
 一定要注意，写在一起的时候后面的两个“.”符号一定要有，不然报错。

 3、从所有的运行级别中删除制定的启动项
 update-rc.d -f <serviceName> remove
 示例
 根据上面的介绍，如何将一个软件安装为服务也就比较清楚了，那就是在/etc/init.d 添加一个服务的启动脚本，然后在需要启动服务的对应级别中/etc/rc[0~6].d 按照文件名格式添加一个指向/etc/init.d 的脚本符号链接。
 以 apache2 为例，默认情况下，apache2 编译安装在/usr/local/apache2，apache2 的服务器启动脚本是/usr/local/apache2/bin/apachectl，那么安装服务就是要把此 apachectl 拷贝到需要启动 apache2 服务器的运行级别对应的/etc/rc[0~6].d 目录下，一半来说 ubuntu 的运行级别为 2，所以也就是拷贝到/etc/rc2.d 下。

 sudo cp /usr/local/apache2/bin/apachectl /etc/init.d/apache2  
 如果手动添加的话：
 sudo ln -s /etc/init.d/apache2 /etc/rc2.d/S80apache2  
 重启服务器后，就可以看到 apache2 自动启动了。
 这时如果想要停止或重启 apache2 也可以使用以下命令：

 service apache2 stop  
 service apache2 restart  

** 查看错误
   vi /var/log/message
   然后查找你所需要的内容把    
   您也可以 grep warning 这样的条目
   使用 tail 和 grep 只是为了使您查看起来更方便简捷更有针对性而已哦
** 临时域名
    ./natapp -authtoken=e5eb817e91aeee83 
** emacs 中文 
   最简单的办法是替换 emacs 的启动文件，就是那个.desktop 文件 
   在/usr/share/applications/下面。
   直接改成
   Exec=env LC_CTYPE=zh_CN.UTF-8 emacs25 %F
* 网络
  已知 ip 地址，查主机名最简单的方法就是使用命令，以下是两种方法：
  1、使用 ping 命令加上参数-a 的方法反解析 IP 地址，可以得到主机名。
  2、使用 nbtstat 命令加上-a 参数再加上 IP 地址的方法。
  bunzip2 linux-2.6.13.tar.bz2 | tar xvf -
* 常用命令
** 安装包管理类
   //centos
   yum provides */libgcc_s.so.1    //根据文件名检查所属的包 
   yum search python       //查找与指定关键词相关的包
   yum info python         //查看指定包的信息
   yum list python         //查看指定包的简要信息
   yum install net-tools       //安装指定的包(net-tools 包含 netstat 和 ifconfig 命令)
   yum remove libevent     //删除指定的包
   rpm -ivh xxxx.rpm --test    //安装指定的 rpm 包，加上--test 代表只是测试
   rpm -e --nodeps openjavasdk //强行删除指定的包
   rpm -q python           //查询是否安装了该包
   rpm -ql python          //查询包安装涉及的目录
   rpm -qR python          //显示依赖项目，R=Require

   //ubuntu
   apt-cache show package  //获取包的相关信息，如说明、大小、版本等   
   apt-cache search package    //搜索软件包，同 yum search
   apt-cache showpkg package_name  //显示软件包的依赖关系信息
   apt-cache depends package_name  //显示指定软件包所依赖的软件包。
   sudo dpkg -I iptux.deb#查看 iptux.deb 软件包的详细信息，包括软件名称、版本以及大小等（其中-I 等价于--info）
   sudo dpkg -c iptux.deb#查看 iptux.deb 软件包中包含的文件结构（其中-c 等价于--contents）
   sudo dpkg -i iptux.deb#安装 iptux.deb 软件包（其中-i 等价于--install）
   sudo dpkg -l iptux#查看 iptux 软件包的信息（软件名称可通过 dpkg -I 命令查看，其中-l 等价于--list）
   sudo dpkg -L iptux#查看 iptux 软件包安装的所有文件（软件名称可通过 dpkg -I 命令查看，其中-L 等价于--listfiles）
   sudo dpkg -s iptux#查看 iptux 软件包的详细信息（软件名称可通过 dpkg -I 命令查看，其中-s 等价于--status）
   sudo dpkg -r iptux#卸载 iptux 软件包（软件名称可通过 dpkg -I 命令查看，其中-r 等价于--remove）
   注：dpkg 命令无法自动解决依赖关系。如果安装的 deb 包存在依赖包，则应避免使用此命令，或者按照依赖关系顺序安装依赖包。

** 文件管理类
   find 路径 -iname "*.jar" -exec cp {} 目标目录 \;    //find 和 cp 联动操作
** 进程\网络查看类
   ps -aux         //查看所有进程
   pgrep cron      //查询应用是否在运行，成功则返回 pid
   netstat –apn        //查看所有占用了网络端口的应用
   netstat -tl     //参数“-t”是显示 tcp 数据包的连接行为，参数“-l”是显示监听状态。如果"netstat -tl"输出结果如上面代码所示，则说明服务器端 ssh 服务已启动。
   ip addr         //查看 ip 地址
** 后台运行
linux 命令行重定向：在 shell 中，分别用 0，1，2 分别代表标准输入，标准输出，异常输出。 
在 linux 中，有个特殊的文件/dev/null，向其写入数据都会被丢弃。

 nohup ./startWebLogic.sh &  //让程序在后台运行，输出文件为 nohup.out
 nohup command > myout.file 2>&1 &   //输出文件重定向为 myout.file
 nohup command >/dev/null 2>$1 &    //×××忽略所有输出，重要×××
 jobs -l               //查看当前正在运行的 job
 fg %s                 //关闭指定的 job
** 定时运行
cron 是 linux 中用于处理定时任务的工具，关键信息格式：分时日月周

分钟　（0-59） 
小时　（0-23） 
日期　（1-31） 
月份　（1-12） 
星期　（0-7）//0 7 代表星期天 #周月日不可同时存在，否则语法错误。

*/3 * * * *    ls       #   每三分钟执行一次 ls

crontab -e      //编辑当前用户的 cron 任务
crontab -l      //列出当前用户的 cron 任务
crontab -r      //删除当前任务的 cron 任务

service crond start|stop|restart|reload //对 cron 服务进行控制

系统定时任务配置

目录位置	描述
/etc/cron.hourly	目录下的脚本会每个小时让执行一次，在每小时的 17 分钟时运行；
/etc/cron.daily	目录下的脚本会每天让执行一次，在每天的 6 点 25 分时运行；
/etc/cron.weekly	目录下的脚本会每周让执行一次，在每周第七天的 6 点 47 分时运行；
/etc/cron.mouthly	目录下的脚本会每月让执行一次，在每月 1 号的 6 点 52 分时运行；
** 创建快捷方式
linux 的快捷方式都存放于 /usr/share/applications，后缀名为.desktop,范例如下：

[Desktop Entry]
Name=eclipse
Comment=eclipse ide
Exec=/opt/eclipse_j2ee/eclipse
Icon=/opt/eclipse_j2ee/icon.xpm
Terminal=false
Type=Application
Categories=Application;Development;
StartupNotify=true
** 清理空间
   BleachBit
** 清理 boot 内核
ubuntu 使用时间长了后，积累了不少已经过期的内核，导致 boot 区不够用。
#查询
dpkg --get-selections |grep linux-image
#查看当前内核版本
uname -a
#清理指定版本内核（重要：可别把当前版本给清理了）
sudo apt-get purge linux-image-3.5.0-17-generic
#也可以使用自动删除(比较安全，定期执行下即可)
sudo apt-get autoremove

** 修改 ip 地址
ip addr #查看当前的 ip 地址
cat /etc/resolv.conf    #查看 dns 网络地址
vim /etc/sysconfig/network-scripts/ifcfg-exxx   #编辑网卡配置文件

BOOTPROTO="static" 网卡获得 ip 地址的方式，static（静态 ip 地址）dhcp（通过 dhcp 协议获取 ip）
IPADDR="192.168.211.144"
GATEWAY="192.168.211.2" #重要：虚拟机 linux 设静态 ip 必须设置 Gateway，而且一定指向 x.x.x.2 那个地址
ONBOOT="yes" 系统启动时是否设置此网络接口，设置为 yes 时，系统启动时激活此设备。默认设置为 yes
 * 企业运维命令
** 文件和目录操作命令(18 个)
ls 全拼 list，功能是列出目录的内容及其内容属性信息。
cd 全拼 change directory，功能是从当前工作目录切换到指定的工作目录。
cp 全拼 copy，其功能为复制文件或目录。
find 查找的意思，用于查找目录及目录下的文件。
mkdir 全拼 make directories，其功能是创建目录。
mv 全拼 move，其功能是移动或重命名文件。
pwd 全拼 print working directory，其功能是显示当前工作目录的绝对路径。
rename 用于重命名文件。
rm 全拼 remove，其功能是删除一个或多个文件或目录。
rmdir 全拼 remove empty directories，功能是删除空目录。
touch 创建新的空文件，改变已有文件的时间戳属性。
tree 功能是以树形结构显示目录下的内容。
basename 显示文件名或目录名。
dirname 显示文件或目录路径。
chattr 改变文件的扩展属性。
lsattr 查看文件扩展属性。
file 显示文件的类型。
md5sum 计算和校验文件的 MD5 值。
** 查看文件及内容处理命令（21 个） 
cat 全拼 concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。
tac tac 是 cat 的反向拼写，因此命令的功能为反向显示文件内容。
more 分页显示文件内容。
less 分页显示文件内容，more 命令的相反用法。
head 显示文件内容的头部。
tail 显示文件内容的尾部。
cut 将文件的每一行按指定分隔符分割并输出。
split 分割文件为不同的小片段。
paste 按行合并文件内容。
sort 对文件的文本内容排序。
uniq 去除重复行。oldboy
wc 统计文件的行数、单词数或字节数。
iconv 转换文件的编码格式。
dos2unix 将 DOS 格式文件转换成 UNIX 格式。
diff 全拼 difference，比较文件的差异，常用于文本文件。
vimdiff 命令行可视化文件比较工具，常用于文本文件。
rev 反向输出文件内容。
grep/egrep 过滤字符串，三剑客老三。
join 按两个文件的相同字段合并。
tr 替换或删除字符。
vi/vim 命令行文本编辑器。
** 文件压缩及解压缩命令（4 个）
tar 打包压缩。oldboy
unzip 解压文件。
gzip gzip 压缩工具。
zip 压缩工具。

** 信息显示命令（11 个）
   uname 显示操作系统相关信息的命令。
   hostname 显示或者设置当前系统的主机名。
   dmesg 显示开机信息，用于诊断系统故障。
   uptime 显示系统运行时间及负载。
   stat 显示文件或文件系统的状态。
   du 计算磁盘空间使用情况。
   df 报告文件系统磁盘空间的使用情况。
   top 实时显示系统资源使用情况。
   free 查看系统内存。
   date 显示与设置系统时间。
   cal 查看日历等时间信息。
** 搜索文件命令（4 个） 
which 查找二进制命令，按环境变量 PATH 路径查找。
find 从磁盘遍历查找文件或目录。
whereis 查找二进制命令，按环境变量 PATH 路径查找。
locate 从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用 updatedb 更新库。
** 用户管理命令（10 个） 
useradd 添加用户。 
usermod 修改系统已经存在的用户属性。
userdel 删除用户。 
groupadd 添加用户组。
passwd 修改用户密码。
chage 修改用户密码有效期限。
id 查看用户的 uid,gid 及归属的用户组。
su 切换用户身份。
visudo 编辑/etc/sudoers 文件的专属命令。
sudo 以另外一个用户身份（默认 root 用户）执行事先在 sudoers 文件允许的命令。

** 基础网络操作命令（11 个）
telnet 使用 TELNET 协议远程登录。
ssh 使用 SSH 加密协议远程登录。
scp 全拼 secure copy，用于不同主机之间复制文件。
wget 命令行下载文件。

ping

测试主机之间网络的连通性。

route

显示和设置 linux 系统的路由表。

ifconfig

查看、配置、启用或禁用网络接口的命令。

ifup

启动网卡。

ifdown

关闭网卡。

netstat

查看网络状态。

ss

查看网络状态。

深入网络操作命令（9 个）

nmap

网络扫描命令。

lsof

全名 list open files，也就是列举系统中已经被打开的文件。

mail

发送和接收邮件。

mutt

邮件管理命令。

nslookup

交互式查询互联网 DNS 服务器的命令。

dig

查找 DNS 解析过程。

host

查询 DNS 的命令。

traceroute

追踪数据传输路由状况。

tcpdump

命令行的抓包工具。

有关磁盘与文件系统的命令（16 个）

mount

挂载文件系统。

umount

卸载文件系统。

fsck

检查并修复 Linux 文件系统。

dd

转换或复制文件。

dumpe2fs

导出 ext2/ext3/ext4 文件系统信息。

dump

ext2/3/4 文件系统备份工具。

fdisk

磁盘分区命令，适用于 2TB 以下磁盘分区。

parted

磁盘分区命令，没有磁盘大小限制，常用于 2TB 以下磁盘分区。

mkfs

格式化创建 Linux 文件系统。

partprobe

更新内核的硬盘分区表信息。

e2fsck

检查 ext2/ext3/ext4 类型文件系统。

mkswap

创建 Linux 交换分区。

swapon

启用交换分区。

swapoff

关闭交换分区。

sync

将内存缓冲区内的数据写入磁盘。

resize2fs

调整 ext2/ext3/ext4 文件系统大小。

系统权限及用户授权相关命令（4 个）

chmod

改变文件或目录权限。

chown

改变文件或目录的属主和属组。

chgrp

更改文件用户组。

umask

显示或设置权限掩码。

查看系统用户登陆信息的命令（7 个）

whoami

显示当前有效的用户名称，相当于执行 id -un 命令。

who

显示目前登录系统的用户信息。

w

显示已经登陆系统的用户列表，并显示用户正在执行的指令。

last

显示登入系统的用户。

lastlog

显示系统中所有用户最近一次登录信息。

users

显示当前登录系统的所有用户的用户列表。

finger

查找并显示用户信息。

内置命令及其它（19 个）

echo

打印变量，或直接输出指定的字符串

printf

将结果格式化输出到标准输出。

rpm

管理 rpm 包的命令。

yum

自动化简单化地管理 rpm 包的命令。

watch

周期性的执行给定的命令，并将命令的输出以全屏方式显示。

alias

设置系统别名。

unalias

取消系统别名。

date

查看或设置系统时间。

clear

清除屏幕，简称清屏。

history

查看命令执行的历史纪录。

eject

弹出光驱。

time

计算命令执行时间。

nc

功能强大的网络工具。

xargs

将标准输入转换成命令行参数。

exec

调用并执行指令的命令。

export

设置或者显示环境变量。

unset

删除变量或函数。

type

用于判断另外一个命令是否是内置命令。

bc

命令行科学计算器

系统管理与性能监视命令(9 个)

chkconfig

管理 Linux 系统开机启动项。

vmstat

虚拟内存统计。

mpstat

显示各个可用 CPU 的状态统计。

iostat

统计系统 IO。

sar

全面地获取系统的 CPU、运行队列、磁盘 I/O、分页（交换区）、内存、CPU 中断和网络等性能数据。

ipcs

用于报告 Linux 中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。

ipcrm

用来删除一个或更多的消息队列、信号量集或者共享内存标识。

strace

用于诊断、调试 Linux 用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。

ltrace

命令会跟踪进程的库函数调用,它会显现出哪个库函数被调用。

关机/重启/注销和查看系统信息的命令（6 个）

shutdown

关机。

halt

关机。

poweroff

关闭电源。

logout

退出当前登录的 Shell。

exit

退出当前登录的 Shell。

Ctrl+d

退出当前登录的 Shell 的快捷键。

进程管理相关命令（15 个）

bg

将一个在后台暂停的命令，变成继续执行  （在后台执行）。

fg

将后台中的命令调至前台继续运行。

jobs

查看当前有多少在后台运行的命令。

kill

终止进程。

killall

通过进程名终止进程。

pkill

通过进程名终止进程。

crontab

定时任务命令。

ps

显示进程的快照。

pstree

树形显示进程。

nice/renice

调整程序运行的优先级。

nohup

忽略挂起信号运行指定的命令。

pgrep

查找匹配条件的进程。

runlevel

查看系统当前运行级别。

init

切换运行级别。

service

启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。
