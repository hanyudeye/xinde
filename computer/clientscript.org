* 对象
*** window 对象 代表一个浏览器窗口或一个框架(当前对象[全局对象]),不用加window
**** 属性
closed 	返回窗口是否已被关闭
defaultStatus 	设置或返回窗口状态栏中的默认文本
document 	对 Document 对象的只读引用。请参阅 Document 对象。
history 	对 History 对象的只读引用。请参数 History 对象。 
innerheight 	返回窗口的文档显示区的高度。
innerwidth 	返回窗口的文档显示区的宽度。
length 	设置或返回窗口中的框架数量。
location 	用于窗口或框架的 Location 对象。请参阅 Location 对象。 
name 	            设置或返回窗口的名称。
Navigator 	对 Navigator 对象的只读引用。请参数 Navigator 对象。
opener 	返回对创建此窗口的窗口的引用。 	
outerheight 	返回窗口的外部高度。 
outerwidth 	返回窗口的外部宽度。 
pageXOffset 	设置或返回当前页面相对于窗口显示区左上角的 X 位置。
pageYOffset 	设置或返回当前页面相对于窗口显示区左上角的 Y 位置。
parent 	返回父窗口。 	
Screen 	对 Screen 对象的只读引用。请参数 Screen 对象。
self 	            返回对当前窗口的引用。等价于 Window 属性。 	
status 	            设置窗口状态栏的文本。
top 	            返回最顶层的先辈窗口。
window 	window 属性等价于 self 属性，它包含了对窗口自身的引用。
screenLeft        IE、Safari 和 Opera 支持 screenLeft 和 screenTop
screenTop
screenX             Firefox 和 Safari 支持 screenX 和 screenY。   
screenY             只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。

**** 方法
alert() 	           显示带有一段消息和一个确认按钮的警告框。
blur() 	           把键盘焦点从顶层窗口移开。
clearInterval() 	取消由 setInterval() 设置的 timeout。 
clearTimeout() 取消由 setTimeout() 方法设置的 timeout。
close() 	关闭浏览器窗口。 
confirm() 	显示带有一段消息以及确认按钮和取消按钮的对话框。
createPopup() 	创建一个 pop-up 窗口
focus() 	把键盘焦点给予一个窗口
moveBy() 	可相对窗口的当前坐标把它移动指定的像素
moveTo() 	把窗口的左上角移动到一个指定的坐标。
open() 	打开一个新的浏览器窗口或查找一个已命名的窗口
print()    	打印当前窗口的内容。
prompt() 	显示可提示用户输入的对话框。 
resizeBy() 	按照指定的像素调整窗口的大小。
resizeTo() 	把窗口的大小调整到指定的宽度和高度。
scrollBy() 	按照指定的像素值来滚动内容。 
scrollTo() 	把内容滚动到指定的坐标。
setInterval() 	按照指定的周期（以毫秒计）来调用函数或计算表达式。
setTimeout() 	在指定的毫秒数后调用函数或计算表达式。
*** Navigator JavaScript对象
**** 属性
appCodeName 	返回浏览器的代码名。 
appMinorVersion 	返回浏览器的次级版本。
appName 	返回浏览器的名称。 
appVersion 	返回浏览器的平台和版本信息。
browserLanguage 	返回当前浏览器的语言。
cookieEnabled 	返回指明浏览器中是否启用 cookie 的布尔值。
cpuClass 	返回浏览器系统的 CPU 等级。 
onLine 	返回指明系统是否处于脱机模式的布尔值。
platform 	返回运行浏览器的操作系统平台。 
systemLanguage 	返回 OS 使用的默认语言。
userAgent 	返回由客户机发送服务器的 user-agent 头部的值。 
userLanguage 	返回 OS 的自然语言设置。
**** 方法
javaEnabled() 	规定浏览器是否启用 Java。
taintEnabled() 	规定浏览器是否启用数据污点 (data tainting)
*** screen
**** 属性
availHeight 	返回显示屏幕的高度 (除 Windows 任务栏之外)。
availWidth 	返回显示屏幕的宽度 (除 Windows 任务栏之外)。 
bufferDepth 	设置或返回在 off-screen bitmap buffer 中调色板的比特深度。
colorDepth 	返回目标设备或缓冲器上的调色板的比特深度。
deviceYDPI 	返回显示屏幕的每英寸垂直点数。 
fontSmoothingEnabled 	返回用户是否在显示控制面板中启用了字体平滑
height 	返回显示屏幕的高度。 
logicalXDPI 	返回显示屏幕每英寸的水平方向的常规点数。 
logicalYDPI 	返回显示屏幕每英寸的垂直方向的常规点数。 
pixelDepth 	返回显示屏幕的颜色分辨率（比特每像素）
width 	            返回显示器屏幕的宽度。 
*** history
**** 属性
length              返回浏览器历史列表中的 URL 数量
**** 方法
back() 	            加载 history 列表中的前一个 URL 	
forward() 	加载 history 列表中的下一个 URL 
go() 	            加载 history 列表中的某个具体页面 [Num|URL] e: -1 前一个页面	
*** Location
**** 属性
hash 	            设置或返回从井号 (#) 开始的 URL（锚）。
host 	            设置或返回主机名和当前 URL 的端口号。 
hostname 	设置或返回当前 URL 的主机名。 
href 	            设置或返回完整的 URL。
pathname 	设置或返回当前 URL 的路径部分。 
port 	            设置或返回当前 URL 的端口号。
protocol 	设置或返回当前 URL 的协议。 
search 	设置或返回从问号 (?) 开始的 URL（查询部分）。
**** 方法
assign() 	加载新的文档。 
reload() 	重新加载当前文档。
replace() 	用新的文档替换当前文档。 
*** document
**** 集合
all[]       	提供对文档中所有 HTML 元素的访问。 document.all[0],不会用样式,script
anchors[] 	返回对文档中所有 Anchor 对象的引用。 
applets 	返回对文档中所有 Applet 对象的引用。
forms[] 	返回对文档中所有 Form 对象引用。
images[] 	返回对文档中所有 Image 对象引用。
links[] 	            返回对文档中所有 Area 和 Link 对象引用。
**** 属性
body    	提供对 <body> 元素的直接访问。对于定义了框架集的文档，该属性引用最外层的 <frameset>。 	  	  	  	 
cookie 	设置或返回与当前文档有关的所有 cookie。
domain 	返回当前文档的域名。 	
lastModified 	返回文档被最后修改的日期和时间。 该值来自于 Last-Modified HTTP 头部，它是由 Web 服务器发送的可选项	
referrer 	返回载入当前文档的文档的 URL。
title 	            返回当前文档的标题。 
URL 	            返回当前文档的 URL。 
**** 方法
close() 	           关闭用 document.open() 方法打开的输出流，并显示选定的数据。 
getElementById() 	返回对拥有指定 id 的第一个对象的引用。
getElementsByName() 	返回带有指定名称的对象集合。 	
getElementsByTagName() 	返回带有指定标签名的对象集合。
getElementsByClassName() 	返回带有指定 class 的对象集合。
open() 	           打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。
write()    	向文档写 HTML 表达式 或 JavaScript 代码。 
writeln() 	等同于 write() 方法，不同的是在每个表达式之后写一个换行符。 
#+BEGIN_SRC javascript
<script type="text/javascript">
function createNewDoc()
  {
  var newDoc=document.open("text/html","replace");
  var txt="<html><body>学习 DOM 非常有趣！</body></html>";
  newDoc.write(txt);
  newDoc.close();
  }
</script>
#+END_SRC
*** 公共属性
className 	Sets or returns the class attribute of an element
dir 	(设置文字方向) ltr默认。从左向右的文本方向。rtl 	从右向左的文本方向。	
lang 	Sets or returns the language code for an element
title 	Sets or returns an element's advisory title 
*** Form
**** 集合
elements[] 	包含表单中所有元素的数组。
**** 属性
acceptCharset 	服务器可接受的字符集。 
action    	设置或返回表单的 action 属性。 
enctype 	设置或返回表单用来编码内容的 MIME 类型。 	
id        	设置或返回表单的 id。 
length 	返回表单中的元素数目。 
method 	设置或返回将数据发送到服务器的 HTTP 方法。
name   	设置或返回表单的名称。 
target   	设置或返回表单提交结果的 Frame 或 Window 名。

**** 方法
reset() 	把表单的所有输入元素重置为它们的默认值。 
submit() 	提交表单。
**** 事件
onreset 	在重置表单元素之前调用。 
onsubmit 	在提交表单之前调用。 
*** image
**** 属性
align    	设置或返回与内联内容的对齐方式。 
border 	设置或返回图像周围的边框。
complete 	返回浏览器是否已完成对图像的加载。 
height 	设置或返回图像的高度。 
hspace 	设置或返回图像左侧和右侧的空白。
id        	设置或返回图像的 id。
isMap  	返回图像是否是服务器端的图像映射。
longDesc 	设置或返回指向包含图像描述的文档的 URL。 
lowsrc 	设置或返回指向图像的低分辨率版本的 URL。
name   	设置或返回图像的名称。 
src       	设置或返回图像的 URL。
useMap 	设置或返回客户端图像映射的 usemap 属性的值。 
vspace 	设置或返回图像的顶部和底部的空白。 
width   	设置或返回图像的宽度。 
**** 事件
onabort 	当用户放弃图像的装载时调用的事件句柄。
onerror 	在装载图像的过程中发生错误时调用的事件句柄。
onload 	当图像装载完毕时调用的事件句柄。
*** link  元素可定义两个链接文档之间的关系,包括超链接
**** 属性
charset 	设置或返回目标 URL 的字符编码 	
disabled 	设置或返回目标 URL 是否当被禁用 	
href 	            设置或返回被链接资源的 URL 
hreflang 	设置或返回目标 URL 的基准语言 	
id 	设置或返回某个 <link> 元素的 id 	
media 	设置或返回文档显示的设备类型 	
name 	设置或返回 <link> 元素的名称 
rel 	设置或返回当前文档与目标 URL之间的关系 
rev 	设置或返回目标 URL 与当前文档之间的关系 
type 	设置或返回目标 URL 的 MIME 类型 
*** meta 元信息
**** 属性
content 	设置或返回 <meta> 元素的 content 属性的值
httpEquiv 	把 content 属性连接到一个 HTTP 头部 	
name  	把 content 属性连接到某个名称 	
scheme 	设置或返回用于解释 content 属性的值的格式 
*** Style 对象代表一个单独的样式声明。可从应用样式的文档或元素访问Style 对象
document.getElementById("id").style.property="值"
**** 属性
***** 背景
background 	在一行中设置所有的背景属性 
backgroundAttachment 	设置背景图像是否固定或随页面滚动 
backgroundColor 	设置元素的背景颜色 
backgroundImage 	设置元素的背景图像 
backgroundPosition 	设置背景图像的起始位置 
backgroundPositionX 	设置backgroundPosition属性的X坐标 
backgroundPositionY 	设置backgroundPosition属性的Y坐标 
backgroundRepeat 	设置是否及如何重复背景图像
***** 边框和边距
border             	在一行设置四个边框的所有属性 	
borderBottom  	在一行设置底边框的所有属性 
borderBottomColor 	设置底边框的颜色 	
borderBottomStyle 	设置底边框的样式 	
borderBottomWidth 	设置底边框的宽度 	
borderColor     	设置所有四个边框的颜色 (可设置四种颜色) 	
borderLeft       	在一行设置左边框的所有属性 
borderLeftColor 	设置左边框的颜色 	
borderLeftStyle 	设置左边框的样式 	
borderLeftWidth 	设置左边框的宽度 	
borderRight 	            在一行设置右边框的所有属性
borderRightColor 	设置右边框的颜色 	
borderRightStyle 	设置右边框的样式 	
borderRightWidth 	设置右边框的宽度 	
borderStyle 	            设置所有四个边框的样式 (可设置四种样式) 
borderTop 	            在一行设置顶边框的所有属性 
borderTopColor 	设置顶边框的颜色 		
borderTopStyle 	设置顶边框的样式 		
borderTopWidth 	设置顶边框的宽度 		
borderWidth 	设置所有四条边框的宽度 (可设置四种宽度) 
margin 	设置元素的边距 (可设置四个值)
marginBottom 设置元素的底边距
marginLeft 	设置元素的左边距 	
marginRight 	设置元素的右边据
marginTop 	设置元素的顶边距 	
outline 	在一行设置所有的outline属性 
outlineColor 	设置围绕元素的轮廓颜色 	
outlineStyle 	设置围绕元素的轮廓样式 	
outlineWidth 	设置围绕元素的轮廓宽度 	
padding 	设置元素的填充 (可设置四个值)
paddingBottom设置元素的下填充
paddingLeft 	设置元素的左填充
paddingRight 	设置元素的右填充
paddingTop 	设置元素的顶填充 	
***** 布局
clear    	设置在元素的哪边不允许其他的浮动元素 	
clip      	设置元素的形状 	
content 	设置元信息 	
counterIncrement 	设置其后是正数的计数器名称的列表。其中整数指示每当元素出现时计数器的增量。默认是1。
counterReset 	设置其后是正数的计数器名称的列表。其中整数指示每当元素出现时计数器被设置的值。默认是0。
cssFloat 	设置图像或文本将出现（浮动）在另一元素中的何处。 	
cursor   	设置显示的指针类型 
direction 	设置元素的文本方向 	
display 	设置元素如何被显示 	
height 	设置元素的高度 
markerOffset 	设置marker box的principal box距离其最近的边框边缘的距离
marks 	            设置是否cross marks或crop marks应仅仅被呈现于page box边缘之外 	
maxHeight 	设置元素的最大高度 	
maxWidth 	设置元素的最大宽度 	
minHeight 	设置元素的最小高度 	
minWidth 	设置元素的最小宽度 	
overflow 	规定如何处理不适合元素盒的内容 	
verticalAlign 	设置对元素中的内容进行垂直排列 
visibility 	设置元素是否可见 
width 	            设置元素的宽度
***** 列表
listStyle 	在一行设置列表的所有属性 
listStyleImage 	把图像设置为列表项标记 
listStylePosition改变列表项标记的位置 	
listStyleType 	设置列表项标记的类型
***** 定位
bottom 	设置元素的底边缘距离父元素底边缘的之上或之下的距离 	
left       	置元素的左边缘距离父元素左边缘的左边或右边的距离 	
position 	把元素放置在static, relative, absolute 或 fixed 的位置 	
right 	            置元素的右边缘距离父元素右边缘的左边或右边的距离 	
top 	            设置元素的顶边缘距离父元素顶边缘的之上或之下的距离 	
zIndex 	设置元素的堆叠次序
***** 文本
color 	设置文本的颜色 
font 	在一行设置所有的字体属性 
fontFamily 	设置元素的字体系列。
fontSize 	设置元素的字体大小。
fontSizeAdjust 	设置/调整文本的尺寸 
fontStretch 	设置如何紧缩或伸展字体
fontStyle 	设置元素的字体样式 
fontVariant 	用小型大写字母字体来显示文本 
fontWeight 	设置字体的粗细 
letterSpacing 	设置字符间距 
lineHeight 	设置行间距 
quotes 	设置在文本中使用哪种引号 
textAlign 	排列文本 
textDecoration 	设置文本的修饰 
textIndent 	缩紧首行的文本 
textShadow 	设置文本的阴影效果
textTransform 	对文本设置大写效果 
whiteSpace 	设置如何设置文本中的折行和空白符 	
wordSpacing 	设置文本中的词间距 
***** Table 
borderCollapse 	设置表格边框是否合并为单边框，或者像在标准的HTML中那样分离。 
borderSpacing 	设置分隔单元格边框的距离 
captionSide 	设置表格标题的位置 	
emptyCells 	设置是否显示表格中的空单元格
tableLayout 	设置用来显示表格单元格、行以及列的算法
*** node
**** 节点属性
***** innerHTML: 获取元素内容,很多东西
***** nodeName 规定节点的名称
***** nodeValue 规定节点的值 (文本节点有值)
***** nodeType 返回节点的类型。nodeType 是只读的
#+BEGIN_SRC 
元素 	1
属性 	2
文本 	3
注释 	8
文档 	9
#+END_SRC
: 通过使用一个元素节点的 parentNode、firstChild 以及 lastChild 属性
****  修改
***** 创建新的 HTML 元素
#+BEGIN_SRC 
var para=document.createElement("p");
var node=document.createTextNode("This is new.");
para.appendChild(node);
#+END_SRC
**** HTML DOM - 元素
***** 创建新的 HTML 元素 - appendChild()您首先必须创建该元素，然后把它追加到已有的元素上。
***** 创建新的 HTML 元素 - insertBefore()
***** 删除已有的 HTML 元素
#+BEGIN_SRC 
var child=document.getElementById("p1");
child.parentNode.removeChild(child);
#+END_SRC
***** 替换 HTML 元素
: 如需替换 HTML DOM 中的元素，请使用 replaceChild() 方法：
#+BEGIN_SRC 
var parent=document.getElementById("div1");
var child=document.getElementById("p1");
parent.replaceChild(para,child);
#+END_SRC

**** HTML DOM事件
***** window 事件属性
+ onload 页面结束加载之后触发。   
+ onresize  当浏览器窗口被调整大小时触发。 
***** FORM 事件
+ onselect      script 在元素中文本被选中后触发。            
+ onsubmit      script 在提交表单时触发。                   
***** 键盘事件
+ onkeydown  script 在用户按下按键时触发。
+ onkeypress script 在用户敲击按钮时触发。
+ onkeyup    script 当用户释放按键时触发。
***** Mouse事件
+ onclick
+ ondblclick
+ onmousedown
+ onscroll
***** Media事件
+ onabort
+ onplay
***** onmousedown、onmouseup 以及 onclick 事件
**** HTML DOM导航
***** 根节点
: document.documentElement - 全部文档
: document.body - 文档的主体

***** 节点列表
#+BEGIN_SRC 
 var x=document.getElementsByTagName("p");
可以通过下标号访问这些节点。如需访问第二个 <p>，您可以这么写：
y=x[1]; 
#+END_SRC
***** length 属性定义节点列表中节点的数量

*** console用来可以查看错误信息、打印调试信息、调试js代码，还可以当作Javascript API查看
**** log 输出变量值
**** console.dir(dom) 查看dom API
*** XML xmldoc
*** 浏览器
* HTML5 文本    
** <head>
** <body>
*** <div>
**** 实体
***** <article>>    定义文档内的文章
***** <aside>      定义页面内容之外的内容
***** <bdi>        定义与其他文本不同的文本方向
***** <details>    定义用户可查看或隐藏的额外细节
***** <dialog>     定义对话框或窗口
***** <figcaption> 定义 <figure> 元素的标题
***** <figure>     定义自包含内容，比如图示、图表、照片、代码清单
***** <footer>     定义文档或节的页脚
***** <header>     定义文档或节的页眉
***** <main>       定义文档的主内容                        
***** <mark>       定义重要或强调的内容
***** <menuitem>   定义用户能够从弹出菜单调用的命令/菜单项目
***** <meter>      定义已知范围（尺度）内的标量测量
***** <nav>        定义文档内的导航链接
***** <progress>   定义任务进度
***** <rp>         定义在不支持 ruby 注释的浏览器中显示什么
***** <rt>         定义关于字符的解释/发音（用于东亚字体）
***** <ruby>       定义 ruby 注释（用于东亚字体）
***** <section>    定义文档中的节
***** <summary>    定义 <details> 元素的可见标题 
***** <time>       定义日期/时间。
***** <wbr>        定义可能的折行（line-break）
***** <frame>      框架
****** <p>
******* <h1>
******* <!--> 
******* 格式化<b><big><em><i><code><kbd><ins>
******* <a>
******* <img>
******* <table>!!!少用
******* <ul><ol>
* 样式 CSS 样式定义如何显示 HTML 元素
** 选择器,依赖DOM
*** 派生选择器
+ li strong {a:v;b:v}  
*** id选择器
+ #red {color:red;}
*** 类选择器
+ .center {text-align: center}
*** 属性选择器
+ input [title="value"] //也可以不要value修饰

** 样式
*** CSS 框模型
  * CSS 内边距
  * CSS 边框
  * CSS 外边距
  * CSS 外边距合并
*** CSS 定位
  * CSS 相对定位
  * CSS 绝对定位
  * CSS 浮动
*** CSS 样式
  * CSS 背景
  * CSS 文本
  * CSS 字体
  * CSS 链接
  * CSS 列表
  * CSS 表格
  * CSS 轮廓

* 客户端脚本 javascript
** 对象
*** 内建对象,String;Date;Array
*** 对象构造器
#+BEGIN_SRC javascript
    function person(firstname,lastname,age,eyecolor)
    {
    this.firstname=firstname;
    this.lastname=lastname;
    this.age=age;
    this.eyecolor=eyecolor;
    }
#+END_SRC
** JavaScript for...in 语句循环遍历对象的属性。
** 日期 Date() getTime() setFullYear() toUTString getDay()
** 数组 concat() join() sort() Array()
*** RegExp 对象有 3 个方法：test()、exec() 以及 compile()。
*** window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。
****  * location.hostname 返回 web 主机的域名
****  * location.pathname 返回当前页面的路径和文件名
****  * location.port 返回 web 主机的端口（80 或 443）
****  * location.protocol 返回所使用的 web 协议（http:// 或
    https://）
****    location.href
**** location.assign()  加载新的文档
**** window.navigator 对象包含有关访问者浏览器的信息。

* 客户端脚本jQuery javascript库,简化
** 引入脚本执行<script src="my_jquery_functions.js"></script>
** jQuery 选择器 $()
*** 元素选择器 $("p")
*** #id 选择器 $("#test") 
*** .class 选择器 $(".class")
*** 选取所有元素 $("*") 	
*** document和 this
#+BEGIN_SRC javascript -n
$(document).ready(function(){
  $("button").click(function(){
    $(this).hide();
  });
});
#+END_SRC
*** 嵌套 $("a[target='_blank']") 	选取所有 target 属性值等于 "_blank" 的 <a> 元素
** jQuery 效果
*** jQuery  fade(淡出) 方法：
****    fadeIn()
****    fadeOut()
****    fadeToggle()
****    fadeTo()
*** jQuery 滑动方法
****    slideDown(speed,callback)
****    slideUp()
****    slideToggle()
*** jQuery 动画 - animate() 方法
**** $(selector).animate({params},speed,callback);
*** jQuery 停止动画
jQuery stop() 方法用于在动画或效果完成前对它们进行停止。
** jQuery HTML
*** jQuery - 获取内容和属性 | 配置
**** 获得内容 - text()、html() 以及 val()
#+BEGIN_SRC 
    text() - 设置或返回所选元素的文本内容
    html() - 设置或返回所选元素的内容（包括 HTML 标记）
    val() - 设置或返回表单字段的值
#+END_SRC
**** 获取属性值 - attr()
*** jQuery - 添加元素
****    append() - 在被选元素的结尾插入内容
****    prepend() - 在被选元素的开头插入内容
****    after() - 在被选元素之后插入内容
****    before() - 在被选元素之前插入内容
*** jQuery - 删除元素
****     remove() - 删除被选元素（及其子元素）
****    empty() - 从被选元素中删除子元素
*** jQuery - 获取并设置 CSS 类
**** jQuery addClass() 方法
#+BEGIN_SRC 
$("button").click(function(){
  $("h1,h2,p").addClass("blue");
  $("div").addClass("important");
});
#+END_SRC
**** jQuery removeClass() 方法
**** jQuery toggleClass() 方法
*** jQuery css() 方法
: css() 方法设置或返回被选元素的一个或多个样式属性。
**** 返回 CSS 属性
: css("propertyname");
**** 设置 CSS 属性
: css("propertyname","value");
**** 设置多个 CSS 属性
: css({"propertyname":"value","propertyname":"value",...});
#+BEGIN_SRC css
$("p").css({"background-color":"yellow","font-size":"200%"});
#+END_SRC
*** jQuery 尺寸
: 通过 jQuery，很容易处理元素和浏览器窗口的尺寸。
[元素(width)]padding(innerwidth)]border(outerwidth)]margin(outerwidth(true))]
****    width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。
****    height()
****    innerWidth() 方法返回元素的宽度（包括内边距）
****    innerHeight()
****    outerWidth()方法返回元素的宽度（包括内边距和边框）
****    outerHeight()
*** jQuery 遍历
**** 向上遍历 DOM 树
*****    parent()返回被选元素的直接父元素
*****    parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)
*****    parentsUntil() 返回介于两个给定元素之间的所有祖先元素
#+BEGIN_SRC 
$(document).ready(function(){
  $("span").parentsUntil("div");
});
#+END_SRC
**** jQuery 遍历 - 后代
*****  children()
*****  find()方法返回被选元素的后代元素，一路向下直到最后一个后代
#+BEGIN_SRC 
$(document).ready(function(){
  $("div").find("span");
});
#+END_SRC
**** jQuery 遍历 - 同胞(siblings)
*****    siblings()返回被选元素的所有同胞元素
*****    next()返回被选元素的下一个同胞元素
*****    nextAll()
*****    nextUntil()返回介于两个给定参数之间的所有跟随的同胞元素
*****    prev() 方向相反
*****    prevAll()
*****    prevUntil()
**** jQuery 遍历- 过滤
***** jQuery first() 方法first() 方法返回被选元素的首个元素。
***** last()
***** eq()返回被选元素中带有指定索引号的元素。从0开始
** jQuery Ajax 是与服务器交换数据的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。
*** jQuery load() 方法
**** load() 方法从服务器加载数据，并把返回的数据放入被选元素中。
: $(selector).load(URL,data,callback);
: 必需的 URL 参数规定您希望加载的 URL。
: 可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。
: 可选的 callback 参数是 load() 方法完成后所执行的函数名称。
#+BEGIN_SRC 
$("#div1").load("demo_test.txt #p1");
#+END_SRC
对象要符合DOM
#+BEGIN_SRC 
可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：
    responseTxt - 包含调用成功时的结果内容
    statusTXT - 包含调用的状态
    xhr - 包含 XMLHttpRequest 对象
下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示"外部内容加载成功！"，而如果失败，则显示错误消息：
实例
$("button").click(function(){
  $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
    if(statusTxt=="success")
      alert("外部内容加载成功!");
    if(statusTxt=="error")
      alert("Error: "+xhr.status+": "+xhr.statusText);
  });
});
#+END_SRC
*** jQuery - AJAX get() 和 post() 方法
: jQuery get() 和 post() 方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。
**** $.get() 方法通过 HTTP GET 请求从服务器上请求数据。
: $.get(URL,callback);
必需的 URL 参数规定您希望请求的 URL。
可选的 callback 参数是请求成功后所执行的函数名。
下面的例子使用 $.get() 方法从服务器上的一个文件中取回数据：
#+BEGIN_SRC 
$("button").click(function(){
  $.get("demo_test.php",function(data,status){
    alert("数据: " + data + "\n状态: " + status);
  });
});
#+END_SRC
**** $.post() 方法通过 HTTP POST 请求从服务器上请求数据。
$.post(URL,data,callback);
必需的 URL 参数规定您希望请求的 URL。
可选的 data 参数规定连同请求发送的数据。
可选的 callback 参数是请求成功后所执行的函数名。
下面的例子使用 $.post() 连同请求一起发送数据：
#+BEGIN_SRC 
$("button").click(function(){
    $.post("/try/ajax/demo_test_post.php",
    {
        name:"菜鸟教程",
        url:"http://www.runoob.com"
    },
        function(data,status){
        alert("数据: \n" + data + "\n状态: " + status);
    });
});
#+END_SRC
*** 事件
**** ready将函数绑定到文档的就绪事件
**** click /dblclick/focus/mouseover
**** onchange 事件(text 对象)
**** onmouseover 和 onmouseout 事件
