* computer (这里说的是可指令(命令)式计算机)==物质->联系(相互影响的子系统)
蓝天 白云 青山 绿水 酒店经理 快递员
** 结构
*** 硬件
**** 解释命令的东西,可被操作的东西
**** 输入(得到命令),输出(结果)
*** 软件 提供抽象
提供高级 命令
提供高级 数据
** 语言 == 命令
*** 数据结构 (搭建实际数据类型)
**** 阵列;堆栈;队列;链表;树;图;堆;散列
**** 数据存储
***** 位存储
***** 数值 
***** 数据压缩
***** 纠错
****** 整数
******* 补码
******* 余码
****** 小数
*** 数据操控
****** 程序执行
****** 其它部件
******* 控制器
******* DMA
******* 握手
******* 通信媒介
****** 流水线
****** 多处理
*** 引用机制和重用
绝大部分->命名变量
命名[函数/一组指令]
*** 设计哲学
*** 功能实现方法
机械/电脑
** 程序设计语言
*** c
*** php
*** python
** 操作系统(酒店经理)
*** 提供接口
*** 协调活动
**** 进程管理
*** 通信
*** 安全
** 网络 请求式的(带着一封协议信)(又不知道一定有人在,人与人之间关系命令不融洽吧)
*** 通信模式
**** 线路交换 (发送端和接收端建立一个特定连接,数据在这线路上传输,如电话)
**** 包交换(使用共同的连接,发送端要分割成块,每个包单独传输,如计算机)
*** 客户程序算法
**** TCP客户程序算法
1.找到希望与之通信的服务器的IP的值和协议端口号
2.创建一个套接口描述字
3.指明此连接需要一个在本地机器中的任意的未使用的协议端口
4.与服务器建立连接
5.使用应用级协议与服务器通信(请求或应答)
6.关闭连接
**** UDP客户程序算法
1.找到希望与之通信的服务器的IP的值和协议端口号
2.创建一个套接口描述字
3.指明此连接需要一个在本地机器中的任意的未使用的协议端口
4.指明数据包要发往的服务器或与服务器建立连接
5.使用应用级协议与服务器通信(请求或应答)
6.释放描述字,关闭连接

*** 服务程序算法
**** 面向连接的服务器算法
在面向连接的方法实现中,传输协议自动处理分组丢失和交付失序的问题,而服务器只要管理和
使用这些连接就可以了
1.服务器接收来自某个客户的入连接
2.通过这个连接发送所有的通信数据
3.从客户端接受请求并作出应答
4.服务器在完成交互后关闭连接
面向连接的设计要求对每个连接都有一个单独的套接口,而无连接的设计则允许从一个套接口
上与多个主机通信.
*** 套接口
套接口是网络进程的ID(包括网络地址(IP)和端口号(port))来确定某一主机的某一进程.
*** 网络基础
**** 协议
TCP 三段式握手方式传输数据(如果得不到回应就重发,每个包都如此)
UDP 则没有如此确认方式
**** 进程间通信
*** 分布式
*** 安全
** 算法
**** 结构
***** 迭代结构
***** 递归结构
**** 有效性
** 软件工程
*** 架构
*** 生命周期
*** 工程方法
**** 模块化
*** 行业工具
*** 重构
*** 质量
*** 文档编制
*** 人机界面
*** 版权
*** 个人性格
** 数据结构
*** 数组
*** 表
*** 栈
*** 队列
*** 二叉树
** 数据库
*** 关系模型
*** 面向对象模型
** 图形学
*** 建模
*** 渲染
**** 着色
*** 照明
*** 动画
** 人工智能
*** 感知
*** 推理
