* Linux应用
** 系统管理
*** 系统安全
**** syslog 系统默认的日志守护进程
**** openssl 强大的安全套接字层密码库
**** logwatch 可定制和可插入式的日志监视系统
**** lastb 列出登入系统失败的用户相关信息
**** sudo 以其他身份来执行命令
**** lastlog 显示系统中所有用户最近一次登录信息
**** logrotate 统日志进行轮转、压缩和删除
**** chroot 把根目录换成指定的目的目录
**** logsave 将命令的输出信息保存到指定的日志文件
**** last 列出目前与过去登入系统的用户相关信息

*** 进程和作业管理
**** ipcrm 删除消息队列、信号集、或者共享内存标识
**** systemctl 系统服务管理器指令
**** w 显示目前登入系统的用户信息
**** watch 周期性的方式执行给定的指令
**** pidof 查找指定名称的进程的进程号ID号
**** skill 向选定的进程发送信号冻结进程
**** pgrep 设置用户的认证信息，包括用户密码、密码过期时间等
**** renice 修改正在运行的进程的调度优先级
**** nohup 将程序以忽略挂起信号的方式运行起来
**** ipcs 分析消息队列共享内存和信号量
**** pmap 报告进程的内存映射关系
**** nice 改变程序执行的优先权等级
**** service 控制系统服务的实用工具
**** pstree 以树状图的方式展现进程之间的派生关系
**** telint 切换当前正在运行系统的运行等级
**** killall 使用进程的名称来杀死一组进程
**** runlevel 打印当前Linux系统的运行等级
**** batch 在系统不繁忙的时候执行定时任务
**** ps 报告当前系统的进程状态
**** init init进程是所有Linux进程的父进程
**** crontab 提交和管理用户的需要周期性执行的任务
**** pkill 可以按照进程名杀死进程
**** atrm 删除待执行任务队列中的指定任务
**** atq 列出当前用户的at任务列表
**** at 在指定时间执行一个任务
*** 用户和工作组管理
**** chage 修改帐号和密码的有效期限
**** id 显示用户的ID以及所属群组的ID
**** grpconv 用来开启群组的投影密码
**** pwunconv 用来关闭用户的投影密码
**** pwconv 用来开启用户的投影密码
**** nologin 拒绝用户登录系统
**** chpasswd 批量更新用户口令的工具
**** grpunconv 用来关闭群组的投影密码
**** grpck 用于验证组文件的完整性
**** groupdel 用于删除指定的工作组
**** chsh 用来更换登录系统时使用的shell
**** gpasswd Linux下工作组文件的管理工具
**** pwck 用来验证系统认证文件内容和格式的完整性
**** groupmod 更改群组识别码或名称
**** passwd 用于让用户可以更改自己的密码
**** chfn 用来改变finger命令显示的信息
**** newusers 用于批处理的方式一次创建多个命令
**** logname 用来显示用户名称
**** groups 用来打印指定用户所属的工作组
**** finger 用于查找并显示用户信息
**** su 用于切换当前用户身份到其他用户身份
**** usermod 用于修改用户的基本信息
**** groupadd 用于创建一个新的工作组
**** userdel 用于删除给定的用户以及与用户相关的文件
**** useradd 创建的新的系统用户
*** X-Windows
**** xclip 管理 X 粘贴板
**** xset 设置X-Window系统中的用户爱好的实用工具
**** xlsfonts 列出X Server使用的字体
**** xhost 制哪些X客户端能够在X服务器上显示
**** xlsatoms 列出X服务器内部所有定义的原子成分
**** xauth 显示和编辑被用于连接X服务器的认证信息
**** xlsclients 列出显示器中的客户端应用程序
**** xinit 是Linux下X-Window系统的初始化程序
**** startx 用来启动X Window
*** SELinux
**** restorecon 恢复文件的安全上下文
**** semanage 默认目录的安全上下文查询与修改
**** setsebool 修改SElinux策略内各项规则的布尔值
**** getsebool 查询SElinux策略内各项规则的布尔值
**** sesearch 查询SELinux策略的规则详情
**** seinfo 查询SELinux的策略提供多少相关规则
**** chcon 修改对象（文件）的安全上下文
*** 文件系统管理
**** repquota 报表的格式输出磁盘空间限制的状态
**** e2label 设置第二扩展文件系统的卷标
**** findfs 标签或UUID查找文件系统
**** resize2fs ext2/ext2文件系统重新设置大小
**** e2image 将处于危险状态的文件系统保存到文件中
**** tune2fs 调整或查看ext2/ext3文件系统的文件系统参数
**** sync 用于强制被改变的内容立刻写入磁盘
**** swapoff 关闭指定的交换空间
**** swapon 激活Linux系统中交换空间
**** quota 显示磁盘已使用的空间与限制
**** quotastats 显示系统当前的磁盘配额运行状态信息
**** edquota 用于编辑指定用户或工作组磁盘配额
**** quotaon 激活Linux内核中指定文件系统的磁盘配额功能
**** quotacheck 检查磁盘的使用空间与限制
**** quotaoff 关闭Linux内核中指定文件系统的磁盘配额功能
**** mkfs 用于在设备上创建Linux文件系统
**** mountpoint 用来判断指定的目录是否是加载点
**** umount 用于卸载已经加载的文件系统
**** e2fsck 用于检查第二扩展文件系统的完整性
**** dumpe2fs 用于打印“ext2/ext3”文件系统的超级块和快组信息
**** fsck 检查并且试图修复文件系统中的错误
**** mount 用于加载文件系统到指定的加载点
**** mke2fs 创建磁盘分区上的“etc2/etc3”文件系统
*** 系统关机和重启
**** halt 关闭正在运行的Linux操作系统
**** ctrlaltdel 设置组合键Ctrl+Alt+Del的功能
**** reboot 重新启动正在运行的Linux操作系统
**** shutdown 用来执行系统关机的命令
**** poweroff 用来关闭计算机操作系统并且切断系统电源
** 网络管理
*** 网络应用
**** axel 多线程下载工具
**** jwhois whois 客户端服务
**** curl 利用URL规则在命令行下工作的文件传输工具
**** wget Linux系统下载文件工具
**** telnet 登录远程主机和管理
**** rexec 运程执行Linux系统下命令
**** rsh 连接远程主机并执行命令
**** rlogin 从当前终端登录到远程Linux主机
**** mail 命令行下发送和接收电子邮件
**** mailstat 显示到达的邮件状态
**** lynx 纯文本模式的网页浏览器
**** elm 纯文本邮件客户端程序
**** mailq 显示待发送的邮件队列
**** lftpget 调用lftp指令下载指定的文件
**** elinks 纯文本界面的WWW浏览器
**** ipcalc 简单的IP地址计算器
**** lftp 优秀的文件客户端程序
*** 高级网络
**** tcpreplay 将PCAP包重新发送，用于性能或者功能测试
**** pfctl PF防火墙的配置命令
**** iptraf 实时地监视网卡流量
**** ss 获取socket统计信息
**** nstat/rtacct 监视SNMP计数器和网络接口状态 
**** lnstat 显示Linux系统的网路状态
**** arptables 管理ARP包过滤规则表
**** arpd 收集免费ARP信息
**** tcpdump 一款sniffer工具
**** ip 网络配置工具
**** ip6tables-restore 还原ip6tables表
**** ip6tables-save 保存ip6tables表配置
**** iptables Linux上常用的防火墙软件
*** 网络测试
**** hping3 测试网络及主机的安全
**** iperf 网络性能测试工具
**** host 常用的分析域名查询工具
**** tracepath 追踪目的主机经过的路由信息
**** arpwatch 监听网络上ARP的记录
**** nslookup 查询域名DNS信息的工具
**** arping 通过发送ARP协议报文测试网络
**** nc 
**** 用来设置路由器 dig
**** 域名查询工具 arp
**** 显示和修改 
**** ping 测试主机之间网络的连通性
**** traceroute 显示数据包到主机间的路径
**** netstat 查看Linux中网络系统状态信息
*** 网络安全
**** ssh-copy-id 把本地的ssh公钥文件安装到远程主机对应的账户下
**** ssh-agent ssh密钥管理器
**** ssh-add 把专用密钥添加到ssh-agent的高速缓存中
**** nmap 网络探测和安全审核
**** iptstate 显示iptables的工作状态
**** ssh-keygen 为ssh生成、管理和转换认证密钥
**** sftp-server sftp协议的服务器端程序
**** sshd openssh软件套件中的服务器守护进程
**** ssh-keyscan 收集主机公钥的使用工具
**** sftp 交互式的文件传输程序
**** ssh openssh套件中的客户端连接工具
*** 网络配置
**** mii-tool 配置网络设备协商方式的工具
**** ethtool 显示或修改以太网卡的配置信息
**** nisdomainname 显示主机NIS的域名
**** dhclient 动态获取或释放IP地址
**** domainname 显示和设置系统的NIS域名
**** ypdomainname 显示主机的NIS的域名
**** usernetctl 被允许时操作指定的网络接口
**** dnsdomainname 定义DNS系统中FQDN名称的域名
**** hostname 显示和设置系统的主机名
**** ifup 激活指定的网络接口
**** ifcfg 置Linux中的网络接口参数
**** ifconfig 配置和显示Linux系统网卡的网络参数
**** ifdown 禁用指定的网络接口
**** route 显示并设置Linux中静态路由表
*** 网络服务器
**** mysqlimport 为MySQL服务器用命令行方式导入数据
**** ftpshut 在指定的时间关闭FTP服务器
**** ftpcount 显示目前已FTP登入的用户人数
**** exportfs 管理NFS共享文件系统列表
**** apachectl Apache服务器前端控制工具
**** ab Apache服务器的性能测试工具
**** squid squid服务器守护进程
**** mysql MySQL服务器客户端工具
**** sendmail 著名电子邮件服务器
**** mysqlshow 显示MySQL中数据库相关信息
**** smbpasswd samba用户和密码管理工具
**** squidclient squid服务器的客户端管理工具
**** smbclient 交互方式访问samba服务器
**** showmount 显示NFS服务器加载的信息
**** nfsstat 列出NFS客户端和服务器的工作状态
**** mysqladmin MySQL服务器管理客户端
**** ftpwho 显示当前每个ftp会话信息
**** mysqldump MySQL数据库中备份工具
**** htdigest Apache服务器内置工具
**** htpasswd apache服务器创建密码认证文件
**** ftptop proftpd服务器的连接状态
** 软件 | 打印 | 开发 | 工具
*** 常用工具命令
**** pssh 批量管理执行
**** screen 用于命令行终端切换
**** speedtest-cli 命令行下测试服务器外网速度
**** clockdiff 检测两台linux主机的时间差
**** ntpdate 使用网络计时协议（NTP）设置日期和时间
**** rsync 远程数据同步工具
**** vdfuse VirtualBox软件挂载VDI分区文件工具
**** ngrep 方便的数据包匹配和显示工具
**** tempfile shell中给临时文件命名
**** xargs 给其他命令传递参数的一个过滤器
**** awk 文本和数据进行处理的编程语言
**** yes 重复打印指定字符串
**** date 显示或设置系统时间与日期
**** eog 显示图片
**** consoletype 输出已连接的终端类型
**** info Linux下info格式的帮助指令
**** hostid 用来打印当前主机的数字化标识
**** clear 清除当前屏幕终端上的任何信息
**** whoami 打印当前有效的用户名称
**** users 显示当前登录系统的所有用户
**** sleep 将目前动作延迟一段时间
**** md5sum 计算和校验文件报文摘要的工具程序
**** mesg 设置当前终端的写权限
**** mtools 显示mtools支持的指令
**** login 登录系统或切换用户身份
**** stty 修改终端命令行的相关设置
**** talk 让用户和其他用户聊天
**** man 查看Linux中的指令帮助
**** whatis 查询一个命令执行什么功能
**** write 向指定登录用户终端上发送信息
**** who 显示目前登录系统的用户信息
**** sum 计算文件的校验码和显示块数
**** wall 向系统当前所有打开的终端上输出信息
**** dircolors 置ls命令在显示目录或文件时所用的色彩
**** gpm 提供文字模式下的滑鼠事件处理
**** bc 算术操作精密运算工具
**** cal 显示当前日历或指定日期的日历
**** cksum 检查文件的CRC是否正确

*** 软件包管理
**** dnf 新一代的RPM软件包管理器
**** dpkg-reconfigure Debian Linux中重新配制一个已经安装的软件包
**** dpkg Debian Linux系统上安装、创建和管理软件包
**** apt-sortpkgs Debian Linux下对软件包索引文件进行排序的工具
**** apt-key 管理Debian Linux系统中的软件包密钥
**** aptitude Debian Linux系统中软件包管理工具
**** apt-get Debian Linux发行版中的APT软件包管理工具
**** ntsysv 集中管理系统的各种服务
**** chkconfig 检查或设置系统的各种服务
**** rpmsign 使用RPM软件包的签名管理工具
**** rpmdb 初始化和重建RPM数据库
**** yum 基于RPM的软件包管理器
**** dpkg-trigger Debian Linux下的软件包触发器
**** rpm RPM软件包的管理工具
**** rcconf Debian Linux下的运行等级服务配置工具
**** rpmbuild 创建RPM的二进制软件包和源码软件包
**** rpmverify 验证已安装的RPM软件包的正确性
**** rpmquery 从RPM数据库中查询软件包信息
**** patch 为开放源代码软件安装补丁程序
**** rpm2cpio 将RPM软件包转换为cpio格式的文件
**** dpkg-statoverride Debian Linux中覆盖文件的所有权和模式
**** dpkg-preconfigure Debian Linux中软件包安装之前询问问题
**** dpkg-split Debian Linux中将大软件包分割成小包
**** dpkg-query Debian Linux中软件包的查询工具
**** dpkg-divert Debian Linux中创建并管理一个转向列表
**** dpkg-deb Debian Linux下的软件包管理工具
*** 编程开发
**** gcc 基于C/C++的预处理器和编译器
-o：指定生成的输出文件,所以编译多个文件是,-o 没有意义；
-E：仅执行编译预处理； .i
-S：将C代码转换为汇编代码；.s
-wall：显示警告信息；
-c：仅执行编译操作，不进行连接操作。.o
***** 1. 预处理 gcc -E test.c -o test.i
-C:
-H:
-include:
***** 2. 编译为汇编代码   gcc -S test.i -o test.s
汇编代码	masm=intel 
***** 3. gas  gcc -c test.s -o test.o
:-Wa,option
:-llibrary 连接名为library的库文件
:-L 指定额外路径
***** 4. ld  gcc test.o -o test
:-lobjc 这个-l选项的特殊形式用于连接Objective C程序.
:-nostartfiles 不连接系统标准启动文件,而标准库文件仍然正常使用.
:-nostdlib 不连接系统标准启动文件和标准库文件.只把指定的文件传递给连接器.
:-static 在支持动态连接(dynamic linking)的系统上,阻止连接共享库.该选项在其他系统上无效.
:-shared 生成一个共享目标文件,他可以和其他目标文件连接产生可执行文件.只有部分系统支持该选项.
:-symbolic 建立共享目标文件的时候,把引用绑定到全局符号上.对所有无法解析的引用作出警
告(除非用连接编辑选项 `-Xlinker -z -Xlinker defs'取代).只有部分系统支持该选项.
:-u symbol 使连接器认为取消了symbol的符号定义,从而连接库模块以取得定义.你可以使用多
个 `-u'选项,各自跟上不同的符号,使得连接器调入附加的库模块.
: [-e ENTRY]|[--entry=ENTRY]	 使用 ENTRY (入口)标识符作为程序执行的开始端,而不是缺省入口.   
: -lAR	在连接文件列表中增加归档库文件AR.可以多次使用这个选项. 凡指定一项AR,ld 就会在路径列表中增加一项对libar.a的搜索.
: -LSEARCHDIR   这个选项将路径SEARCHDIR添加到路径列表, ld在这个列表中搜索归档库.
  可以多次使用这个选项.缺省的搜索路径集(不使用-L时)取决于ld使用的
  模拟模式(emulation)及其配置.在连接脚本中,可以用SEARCH_DIR命令指定路径. 
: -Tbss org
: -Tdata org
: -Ttext org
  把org作为输出文件的段起始地址 --- 特别是 --- bss,data,或text段.org必须是十六进制整数. 
: -X    删除 全部 临时的 局部符号. 大多数 目的文件 中, 这些 局部符	    号 的 名字 用 `L' 做 开头.
: -x    删除 全部 局部符号. 
: -m 指定仿真环境,这里要与gcc 的选项 -m32一致; -V显示 支持的仿真：本机支持   elf_x86_64   
  elf32_x86_64   elf_i386   i386linux   elf_l1om   elf_k1om   i386pep   i386pe
  LDFLAGS="-L/usr/lib64 -L/lib64" 全局常量
: 注意,如果连接器通过被编译器驱动来间接引用(比如gcc), 那所有的连接器命令行选项前必须加上前缀'-Wl'
  gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup 
: `-b INPUT-FORMAT'
  `--format=INPUT-FORMAT' [binary]
  'ld'可以被配置为支持多于一种的目标文件.缺省的格式是从环境变量'GNUTARGET'中得到的.
  你也可以从一个脚本中定义输入格式,使用的命令是'TARGET'. 
: `--oformat OUTPUT-FORMAT'	  指定输出目标文件的二进制格式.一般不需要指定,ld的缺省输出格式配置
  为/各个机器上最常用的/ 格式. output-format是一个 字符串,BFD库支持的格式名称:在操作系统一层了,如果是操作系统本身,加入此选项
: [`-N']|[`--omagic']
  把text和data节设置为可读写.同时,取消数据节的页对齐,同时,取消对共享库的连接.如果输出格式
  支持Unix风格的magic number, 把输出标志为'OMAGIC'. 
***** 5. 检错
: -Wall 产生尽可能多的警告信息
: -Werror GCC会在所有产生警告的地方停止编译
***** 6. 库文件连接 .a .so
: 包含文件 -I /usr/dirpath    
: 库   -L /dirpath   -llibname  不要.a 或.so 后缀
: 强制静态库 gcc –L /usr/dev/mysql/lib –static –lmysqlclient test.o –o test
静态库链接时搜索路径顺序：
1. ld会去找GCC命令中的参数-L
2. 再找gcc的环境变量LIBRARY_PATH
3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的

动态链接时、执行时搜索路径顺序:
1. 编译目标代码时指定的动态库搜索路径
2. 环境变量LD_LIBRARY_PATH指定的动态库搜索路径
3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径
4. 默认的动态库搜索路径/lib
5. 默认的动态库搜索路径/usr/lib
有关环境变量：
LIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径
LD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径
***** 7. 调试
-g:
-gstabs:
-gcoff:
-gdwarf:
***** 8. 优化
-O0 不优化
-fcaller-saves: 
***** 9. 目标机选项(Target Option) 交叉编译
-b machine 
-V version 哪个版本的gcc
***** 10.配置相关选项(Configuration Dependent Option)
M680x0 选项
i386选项
***** 11.总体选项(Overall Option)
-x language
明确指出后面输入文件的语言为language (而不是从文件名后缀得到的默认选择).

***** 12.目录选项(DIRECTORY OPTION)
:-Idir 在头文件的搜索路径列表中添加dir 目录.
:-Ldir 在`-l'选项的搜索路径列表中添加dir目录.

***** 13.C 文件与 汇编文件编译
以下涉及到不同编译器对符号的处理问题。比如我们写个汇编文件，汇编后，汇编文件中的符号未变，但是当我们写个C文件再生成目标文件后，源文件中的符号前可能加了下划线，当两者之间发生引用关系时可能无法连接，此时我们会用到下面的命令。
: --change-leading-char
: --remove-leading-char
: --prefix-symbols=string
**** ldconfig 动态链接库管理命令
**** readelf 用于显示elf格式文件的信息
**** objcopy拷贝一个目标文件的内容到另一个目标文件中,bfdnamels是BFD库中描述的标准格式名
: --info 显示支持的architecture 与 目标文件格式
: -I bfdname或--input-target=bfdname  用来指明源文件的格式,取值elf32-little，elf32-big等，可用用objdump –i查看相应的信息
: -O bfdname 或--output-target=bfdname 输出的格式
#+BEGIN_SRC 
-O srec 产生S记录格式文件
-O binary 产生原始的二进制文件
#+END_SRC
: -R sectionname 从输出文件中删除掉所有名为sectionname的段
: -S 不从源文件中复制重定位信息和符号信息到目标文件中
: -g 不从源文件中复制调试符号到目标文件中
: -j sectionname 或--only-section=sectionname 只将由sectionname指定的section拷贝到输出文件
: -K symbolname 保留由symbolname指定的符号信息
: -N symbolname 去除掉由symbolname指定的符号信息

**** objdump 显示二进制文件信息
**** pstack 显示每个进程的栈跟踪
**** indent 格式化C语言的源文件
**** gdb 功能强大的程序调试器
**** expr 一款表达式计算工具
**** test shell环境中测试条件表达式工具
**** php PHP语言的命令行接口
**** protoize GNU-C代码转换为ANSI-C代码
**** mktemp 创建临时文件供shell脚本使用
**** perl perl语言解释器
**** make GNU的工程化编译工具
**** ldd 打印程序或者库文件所依赖的共享库列表
**** nm 显示二进制目标文件的符号表
**** unprotoize 删除C语言源代码文件中的函数原型
**** gcov 测试程序的代码覆盖率的工具
*** 打印
**** reject 指示打印系统拒绝发往指定目标打印机的打印任务
**** lpadmin 配置CUPS套件中的打印机和类
**** cupsenable 启动指定的打印机
**** accept 指示打印系统接受发往指定目标打印机的打印任务
**** lpstat 显示CUPS中打印机的状态信息
**** cupsdisable 停止指定的打印机
**** lpc 命令行方式打印机控制程序
**** cancel 取消已存在的打印任务
**** lp 打印文件或修改排队的打印任务
**** lpq 显示打印队列中的打印任务的状态信息
**** eject 用来退出抽取式设备
**** lprm 删除打印队列中的打印任务
**** lpr 将文件发送给指定打印机进行打印
** 文件目录管理
*** 文件查找和比较
**** strings 在对象文件或二进制文件中查找可打印的字符串
**** diff 比较给定的两个文件的不同
**** cmp 比较两个文件是否有差异
**** diff3 比较3个文件不同的地方
**** locate/slocate 查找文件或目录
**** which 查找并显示给定命令的绝对路径
**** find 在指定目录下查找文件
**** whereis 查找二进制程序、代码等相关文件路径
*** 文件内容查看
**** hexdump 显示文件十六进制格式
**** od 输出文件的八进制、十六进制等格式编码的字节
**** cut 连接文件并打印到标准输出设备上
**** tail 在屏幕上显示指定文件的末尾若干行
**** head 在屏幕上显示指定文件的开头若干行
**** less 分屏上下翻页浏览文件内容
**** more 显示文件内容，每次显示一屏
*** 文件处理
**** iconv 转换文件的编码方式
**** nl 在Linux系统中计算文件内容行号
**** basename 打印目录或者文件的基本名称
**** unlink 系统调用函数unlink去删除指定的文件
**** pathchk 检查文件中不可移植的部分
**** touch 创建新的空文件
**** rename 用字符串替换的方式批量改变文件名
**** dd 复制文件并对原文件的内容进行转换和格式化处理
**** dirname 去除文件名中的非目录部分
**** updatedb 创建或更新slocate命令所必需的数据库文件
**** ln 用来为文件创件连接
**** cat 连接文件并打印到标准输出设备上
*** 文件编辑
**** nano 字符终端文本编辑器
**** sed 功能强大的流式文本编辑器
sed [options] 'command' file(s)
sed [options] -f scriptfile file(s)
-e<script>或--expression=<script>：以选项中的指定的script来处理输入的文本文件；
-f<script文件>或--file=<script文件>：以选项中指定的script文件来处理输入的文本文件；

***** sed命令
a\ 在当前行下面插入文本。
i\ 在当前行上面插入文本。
c\ 把选定的行改为新的文本。
d 删除，删除选择的行。
D 删除模板块的第一行。
s 替换指定字符 sed 's/aa/bb/' file 注意/ 符,用来分界
h 拷贝模板块的内容到内存中的缓冲区。
H 追加模板块的内容到内存中的缓冲区。
g 获得内存缓冲区的内容，并替代当前模板块中的文本。
G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
l 列表不能打印字符的清单。
n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
p 打印模板块的行。(显示两遍)
P(大写) 打印模板块的第一行。
q 退出Sed。
b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
r file 从file中读行。
t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
w file 写并追加模板块到file末尾。  
W file 写并追加模板块的第一行到file末尾。  
! 表示后面的命令对所有没有被选定的行发生作用。  
= 打印当前行号码。  
# 把注释扩展到下一个换行符以前。  

sed替换标记
g 表示行内全面替换。  
p 表示打印行。  
w 表示把行写入一个文件。  
x 表示互换模板块中的文本和缓冲区中的文本。  
y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
\1 子串匹配标记
& 已匹配字符串标记

sed元字符集
^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。
$ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。
. 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。
[* 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。
[] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。  
[^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。
\(..\) 匹配子串，保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。
& 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。
\< 匹配单词的开始，如:/\<love/匹配包含以love开头的单词的行。
\> 匹配单词的结束，如/love\>/匹配包含以love结尾的单词的行。
x\{m\} 重复字符x，m次，如：/0\{5\}/匹配包含5个0的行。
x\{m,\} 重复字符x，至少m次，如：/0\{5,\}/匹配至少有5个0的行。
x\{m,n\} 重复字符x，至少m次，不多于n次，如：/0\{5,10\}/匹配5~10个0的行。 

***** sed用法实例
替换操作：s命令

替换文本中的字符串：
sed 's/book/books/' file

-n选项和p命令一起使用表示只打印那些发生替换的行：
sed -n 's/test/TEST/p' file

直接编辑文件选项-i，会匹配file文件中每一行的第一个book替换
为books：
sed -i 's/book/books/g' file

全面替换标记g
使用后缀 /g 标记会替换每一行中的所有匹配：

sed 's/book/books/g' file
当需要从第N处匹配开始替换时，可以使用 /Ng：

echo sksksksksksk | sed 's/sk/SK/2g'
skSKSKSKSKSK

定界符
以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定
界符：
sed 's:test:TEXT:g'
sed 's|test|TEXT|g'

定界符出现在样式内部时，需要进行转义：
sed 's/\/bin/\/usr\/local\/bin/g'

删除操作：d命令
删除空白行：
sed '/^$/d' file

删除文件的第2行：
sed '2d' file

删除文件的第2行到末尾所有行：
sed '2,$d' file

删除文件最后一行：

sed '$d' file

删除文件中所有开头是test的行：

sed '/^test/'d file

已匹配字符串标记&

正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之
前所匹配到的单词：

echo this is a test line | sed 's/\w\+/[&]/g'
[this] [is] [a] [test] [line]

所有以192.168.0.1开头的行都会被替换成它自已加localhost：

sed 's/^192.168.0.1/&localhost/' file
192.168.0.1localhost

子串匹配标记\1

匹配给定样式的其中一部分：

echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'
this is 7 in a number

命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\)
用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹
配到的第二个结果就是 \2，例如：

echo aaa BBB | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
BBB aaa

love被标记为1，所有loveable会被替换成lovers，并打印出来：

sed -n 's/\(love\)able/\1rs/p' file

组合多个表达式

sed '表达式' | sed '表达式'

等价于：

sed '表达式; 表达式'

引用

sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字
符串，就需要使用双引号。

test=hello
echo hello WORLD | sed "s/$test/HELLO"
HELLO WORLD

选定行的范围：,（逗号）

所有在模板test和check所确定的范围内的行都被打印：

sed -n '/test/,/check/p' file

打印从第5行开始到第一个包含以test开始的行之间的所有行：

sed -n '5,/^test/p' file

对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：

sed '/test/,/west/s/$/aaa bbb/' file

多点编辑：e命令

-e选项允许在同一行里执行多条命令：

sed -e '1,5d' -e 's/test/check/' file

上面sed表达式的第一条命令删除1至5行，第二条命令用check替换
test。命令的执行顺序对结果有影响。如果两个命令都是替换命令
，那么第一个替换命令将影响第二个替换命令的结果。

和 -e 等价的命令是 --expression：

sed --expression='s/test/check/' --expression='/love/d' file

从文件读入：r命令

file里的内容被读进来，显示在与test匹配的行后面，如果匹配多
行，则file的内容将显示在所有匹配行的下面：

sed '/test/r file' filename

写入文件：w命令  

在example中所有包含test的行都被写入file里：

sed -n '/test/w file' example

追加（行下）：a\命令

将 this is a test line 追加到以test 开头的行后面：

sed '/^test/a\this is a test line' file

在 test.conf 文件第2行之后插入 this is a test line：

sed -i '2a\this is a test line' test.conf

插入（行上）：i\命令

将 this is a test line 追加到以test开头的行前面：

sed '/^test/i\this is a test line' file

在test.conf文件第5行之前插入this is a test line：

sed -i '5i\this is a test line' test.conf

下一个：n命令

如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变
为bb，并打印该行，然后继续：

sed '/test/{ n; s/aa/bb/; }' file

变形：y命令

把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使
用这个命令：

sed '1,10y/abcde/ABCDE/' file

退出：q命令

打印完第10行后，退出sed

sed '10q' file

保持和获取：h命令和G命令

在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓
冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将
打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。

sed -e '/test/h' -e '$G' file

在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将
其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的
意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它
放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾
。在这个例子中就是追加到最后一行。简单来说，任何包含test的
行都被复制并追加到该文件的末尾。

保持和互换：h命令和x命令

互换模式空间和保持缓冲区的内容。也就是把包含test与check的行
互换：

sed -e '/test/h' -e '/check/x' file

脚本scriptfile

sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名
。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空
白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行
为注释行，且不能跨行。

sed [options] -f scriptfile file(s)

打印奇数行或偶数行

方法1：

sed -n 'p;n' test.txt  #奇数行
sed -n 'n;p' test.txt  #偶数行

方法2：

sed -n '1~2p' test.txt  #奇数行
sed -n '2~2p' test.txt  #偶数行

打印匹配字符串的下一行

grep -A 1 SCC URFILE
sed -n '/SCC/{n;p}' URFILE
awk '/SCC/{getline; print}' URFILE
**** pico 功能强大全屏幕的文本编辑器
**** emacs 功能强大的全屏文本编辑器
***** emacs(选项)(参数)
+<行号>：启动emacs编辑器，并将光标移动到制定行号的行；
-q：启动emacs编辑器，而不加载初始化文件；
-u<用户>：启动emacs编辑器时，加载指定用户的初始化文件；
-t<文件>：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；
-f<函数>：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；
-l<lisp代码文件>：加载指定的lisp代码文件；
-batch：以批处理模式运行emacs编辑器。

***** emacs命令操作大全
基本命令
C-x C-c : 退出Emacs
C-x C-f : 打开一个文件，如果文件不存在，则创建一个文件
C-g : 取消未完成的命令

编辑
C-z (redefined): Undo；原来C-z是挂起Emacs（然后用fg命令调出）；C-x u 是默认的命令； 移动一下光标，再C-z就可以redo
M-d : 删除光标后的词语

移动光标

C-v : 向前翻页
M-v : 向后翻页
M-r : 将光标移动到屏幕中间那行
C-a : 移到行首
M-a : 移到句首，从行首到句首之间可能有空格
C-e : 移到行尾
M-e : 移到句尾
M-{ : 向上移动一段
M-} : 向下移动一段
C-right : 向前移动一个单词
C-left : 向后移动一个单词
C-up : 向前移动一段
C-down : 向后移动一段
M-< : 移到整个文本开头
M-> : 移到整个文本末尾
C-u 数字 命令 : 执行多次(数字表示次数)该命令；"M-数字 命令" 也可以
M-x goto-line : 移动到某一行
C-l : 重绘屏幕，效果就是当前编辑行移动窗口中央

Buffer 相关

C-x k : 关闭当前buffer
C-x b : 切换到前一个编辑的buffer
C-x C-b : 列出当前所有buffer
C-x C-s : 保存当前buffer
C-x s : 保存所有未保存的buffer，会提示你是否需要保存
C-x C-w : 文件另存为

拷贝与粘贴

M-space (redefined): 设置mark; C-@ 是默认命令
C-w (redefined) : 剪切一块区域；如果没有设置mark，则是剪切一行
M-w (redefined) : 拷贝一块区域；如果没有设置mark, 则是拷贝一行
C-k : 从当前位置剪切到行尾
C-y : 粘贴
M-y : 用C-y拉回最近被除去的文本后，换成 M-y可以拉回以前被除去的文本。键入多次的M-y可以拉回更早以前被除去的文本。
C-x r k : 执行矩形区域的剪切
C-x r y : 执行矩形区域的粘贴

窗口操作
C-x 0 : 关闭当前窗口
C-x 1 : 将当前窗口最大化
C-x 2 : 垂直分割窗口
C-x 3 : 水平分割窗口
M-o (redefined) : 在窗口之间切换; C-x o 是默认命令
C-x 5 1/2/3/0 : 对frame类似的操作
C-x < : 窗口内容右卷
C-x > : 窗口内容左卷（这两个命令在垂直分割窗口后比较有用）
(C-u) C-x ^ : 加高当前窗口，如果有C-u，则每次加高4行
(C-u) C-x } : 加宽当前窗口
(C-u) C-x { : 压窄当前窗口
ESC C-v : 在其它窗口进行卷屏操作

搜索和替换

C-s : 向前搜索（增量式搜索）；连续C-s，跳到下一个搜索到的目标
C-s RET : 普通搜索
C-r : 向前搜索
C-s RET C-w : 按单词查询
M-% : 查询替换，也就是替换前会询问一下
M-x replace-string : 普通替换

Tags

M-! etags .c .h : 创建TAGS文件
M-. : 跳到tag所在位置
M-x list-tags : 列出tags

书签

C-x r m : 设置书签bookmark
C-x r b : 跳到bookmark处

帮助

C-h ? : 查看帮助信息
C-h f : 查看一个函数
C-h v : 查看一个变量
C-h k : 查看一个键绑定 (C－h c 也是查看键绑定，但是信息较简略)
C-h C-f : 查看一个函数的info，非常有用
C-h i : 看Info

其它

C-M-\ : 对选中区域，按照某种格式(比如C程序)进行格式化
C-x h : 全部选中
M-! : 执行外部shell命令
M-x shell : 模拟shell的buffer
M-x term : 模拟terminal, C-c k 关闭terminal
C-x C-q : 修改buffer的只读属性
***** Emacs 插件	
# ido, 类似于helm,和helm各有千秋我都用,五五开,
# imenu 显示当前文件函数列表,可以直接跳转到那去,完全可配置
# flymake 实时语法检查,通吃所有语言
# flyspell 拼写检查,爱死了,是我见过的所有拼写检查最强大,如果你知道如何配置.
**** jed 主要用于编辑代码的编辑器
**** joe 强大的纯文本编辑器
**** ed 单行纯文本编辑器
**** ex 启动vim编辑器的ex编辑模式
**** vi 功能强大的纯文本编辑器
*** 目录基本操作
**** install 安装或升级软件或备份数据
**** tree 树状图列出目录的内容
**** popd 用于删除目录栈中的记录
**** pushd 将目录加入命令堆叠中
**** dirs 显示目录记录
**** rmdir 用来删除空目录
**** mkdir 用来创建目录
**** rm 用于删除给定的文件和目录
**** pwd 绝对路径方式显示用户当前工作目录
**** ls 显示目录内容列表
**** mv 用来对文件或目录重新命名
**** cp 将源文件或目录复制到目标文件或目录中
**** cd 切换用户当前工作目录
*** 文件权限属性设置
**** dos2unix 将DOS格式文本文件转换成Unix格式
**** setfacl 设置文件访问控制列表
**** umask 用来设置限制新建文件权限的掩码
**** lsattr 查看文件的第二扩展文件系统属性
**** chmod 用来变更文件或目录的权限
**** chown 用来变更文件或目录的拥有者或所属群组
**** chgrp 用来变更文件或目录的所属群组
**** chattr 用来改变文件属性
**** stat 用于显示文件的状态信息
**** file 用来探测给定文件的类型。
*** 文件过滤分割与合并
**** egrep 在文件内查找指定的字符串
**** fgrep 为文件搜索文字字符串
**** split 分割任意大小的文件
**** grep 强大的文本搜索工具
**** comm 两个文件之间的比较
**** printf 格式化并输出结果
**** expand 将文件的制表符转换为空白字符
**** spell 对文件进行拼写检查
**** pr 将文本文件转换成适合打印的格式
**** look 显示文件中以指定字符串开头的任意行
**** tac 将文件已行为单位的反序输出
**** wc 统计文件的字节数、字数、行数
**** fmt 读取文件后优化处理并输出
**** rev 将文件内容以字符为单位反序输出
**** diffstat 显示diff命令输出信息的柱状图
**** ispell 检查文件中出现的拼写错误
**** uniq 报告或忽略文件中的重复行
**** tee 把数据重定向到给定文件和屏幕上
**** paste 将多个文件按列队列合并
**** sort 将文件进行排序并输出
**** unexpand 将文件的空白字符转换为制表符
**** csplit 将一个大文件分割成小的碎片文件
**** fold 控制文件内容输出时所占用的屏幕宽度
**** join 两个文件中指定栏位内容相同的行连接起来
**** col 过滤控制字符
**** tr 将字符进行替换压缩和删除
**** colrm 删除文件中的指定列
*** 文件压缩与解压
**** lha 压缩或解压缩lzh格式文件
**** bzcmp 比较两个压缩包中的文件
**** bzcat 解压缩指定的.bz2文件
**** unarj 解压缩由arj命令创建的压缩包
**** zcat 显示压缩包中文件的内容
**** znew 将.Z压缩包重新转化为gzip命令压缩的.gz压缩包
**** zipsplit 将较大的zip压缩包分割成各个较小的压缩包
**** arj 用于创建和管理.arj压缩包
**** gzexe 用来压缩可执行文件
**** bzgrep 使用正则表达式搜索.bz2压缩包中文件
**** compress 使用Lempress-Ziv编码压缩数据文件
**** zfore 强制为gzip格式的压缩文件添加.gz后缀
**** bzless 增强.bz2压缩包查看器
**** bzmore 查看bzip2压缩过的文本文件的内容
**** zipinfo 用来列出压缩文件信息
**** unzip 用于解压缩由zip命令压缩的压缩包
**** bzip2recover 恢复被破坏的.bz2压缩包中的文件
**** tar Linux下的归档使用工具，用来打包和备份。
**** bunzip2 创一个bz2文件压缩包
**** gunzip 用来解压缩文件
**** bzdiff 直接比较两个.bz2压缩包中文件的不同
**** zip 可以用来解压缩文件
**** bzip2 将文件压缩成bz2格式
**** gzip 用来压缩文件
**** uncompress 用来解压.Z文件
*** 文件备份和恢复
**** cpio 用来建立、还原备份档的工具程序
**** restore 所进行的操作和dump指令相反
**** dump 用于备份ext2或者ext3文件系统
*** 文件传输
**** ftp 用来设置文件系统相关功能
**** tftp 在本机和tftp服务器之间使用TFTP协议传输文件
**** scp 加密的方式在本地主机和远程主机之间复制文件
**** ncftp 是增强的的FTP工具
**** rcp 使在两台Linux主机之间的文件复制操作更简单
** 硬件 | 监测 | 内核 | Shell
*** Shell内建命令
**** sh shell命令解释器
**** trap 指定在接收到信号后将要采取的动作
**** let 简单的计算器
**** seq 以指定增量从首数开始打印数字到尾数
**** tput 通过terminfo数据库对终端会话进行初始化和操作
**** apropos 在 whatis 数据库中查找字符串
**** set 显示或设置shell特性及shell变量
**** command 调用并执行指定的命令
**** dris 显示和清空目录堆栈中的内容
**** fc 修改历史命令并执行
**** bind 显示或设置键盘按键与其相关的功能
**** readonly 定义只读shell变量或函数
**** read 从键盘读取变量值
**** bg 用于将作业放到后台运行
**** ulimit 控制shell程序的资源
**** enable 启动或关闭shell内建命令
**** declare 声明或显示shell变量
**** wait 等待进程执行完后返回
**** builtin 执行shell内部命令
**** shopt 显示和设置shell操作选项
**** exit 退出当前的shell
**** jobs 显示Linux中的任务列表及任务状态
**** help 显示帮助信息
**** history 用于显示历史命令
**** logout 退出当前登录的Shell
**** export 设置或显示系统环境变量
**** exec 调用并执行指定的命令
**** env 显示系统中已存在的环境变量
**** unset 删除指定的shell变量或函数
**** kill 删除执行中的程序或工作
**** unalias 删除由alias设置的别名
**** type 显示指定命令的类型
**** fg 将后台作业放到前台终端运行
**** alias 用来设置指令的别名
**** echo 输出指定的字符串或者变量
*** 性能监测与优化
**** inotifywait 异步文件系统监控机制
**** nethogs 终端下的网络流量监控工具
**** ifstat 统计网络接口流量状态
**** dstat 通用的系统资源统计工具
**** ltrace 用来跟踪进程调用库函数的情况
**** iotop 用来监视磁盘I/O使用状况的工具
**** strace 跟踪系统调用和信号
**** fuser 使用文件或文件结构识别进程
**** lsof 显示Linux系统当前已打开的所有文件列表
**** tload 显示系统负载状况
**** time 统计给定命令所花费的总时间
**** vmstat 显示虚拟内存状态
**** sar 系统运行状态统计工具
**** mpstat 显示各个可用CPU的状态
**** iostat 监视系统输入输出设备和CPU的使用情况
**** free 显示内存的使用情况
**** uptime 查看Linux系统负载信息
**** top 显示或管理执行中的程序
*** 硬件管理
**** losetup 设定与控制循环（loop）设备
**** dmidecode 在Linux系统下获取有关硬件方面的信息
**** hwclock 显示与设定硬件时钟
**** cdrecord Linux系统下光盘刻录功能命令
**** setpci 查询和配置PCI设备的使用工具
**** lspci 显示当前主机的所有PCI总线信息
**** lsusb 显示本机的USB设备列表信息
**** arch 显示当前主机的硬件架构类型
**** volname 显示指定的ISO-9660格式的设备的卷名称
**** systool 显示基于总线、类和拓扑显示系统中设备的信息
*** 内核与模块管理
**** lsb_release 显示发行版本信息
**** sysctl 时动态地修改内核的运行参数
**** slabtop 实时显示内核slab内存缓存信息
**** kernelversion 打印当前内核的主版本号
**** get_module 获取Linux内核模块的详细信息
**** kexec 从当前正在运行的内核引导到一个新内核
**** dmesg 显示Linux系统启动信息
**** uname 显示Linux系统信息
**** depmod 分析可载入模块的相依性
**** bmodinfo 显示给定模块的详细信息
**** modprobe 自动处理可载入模块
**** rmmod 从运行的内核中移除指定的内核模块
**** insmod 将给定的模块加载到内核中
**** lsmod 显示已载入系统的模块
*** 磁盘管理
**** blkid 查看块设备的文件系统类型、LABEL、UUID等信息
**** du 显示每个文件和目录的磁盘使用空间
**** lsblk 列出块设备信息
**** vgremove 用于用户删除LVM卷组
**** lvresize 调整逻辑卷空间大小
**** lvremove 删除指定LVM逻辑卷
**** lvreduce 收缩逻辑卷空间
**** pvs 输出物理卷信息报表
**** pvchange 修改物理卷属性
**** pvck 检测物理卷的LVM元数据的一致性
**** pvremove 删除一个存在的物理卷
**** lvextend 扩展逻辑卷空间
**** pvdisplay 显示物理卷的属性
**** lvdisplay 显示逻辑卷属性
**** pvscan 扫描系统中所有硬盘的物理卷列表
**** lvscan 扫描逻辑卷
**** lvcreate 用于创建LVM的逻辑卷
**** pvcreate 将物理硬盘分区初始化为物理卷
**** vgconvert 转换卷组元数据格式
**** blockdev 从命令行调用区块设备控制程序
**** mkswap 建立和设置SWAP交换分区
**** vgchange 修改卷组属性
**** mknod 创建字符设备文件和块设备文件
**** mkisofs 建立ISO 9660映像文件
**** mkinitrd 建立要载入ramdisk的映像文件
**** vgreduce 从卷组中删除物理卷
**** hdparm 显示与设定硬盘的参数
**** vgextend 向卷组中添加物理卷
**** partprobe 不重启的情况下重读分区
**** vgscan 扫描并显示系统中的卷组
**** vgcreate 用于创建LVM卷组
**** fdisk 查看磁盘使用情况和磁盘分区
**** badblocks 查找磁盘中损坏的区块
**** vgdisplay 显示LVM卷组的信息
**** mkbootdisk 可建立目前系统的启动盘
**** grub 多重引导程序grub的命令行shell工具
**** convertquota 把老的配额文件转换为新的格式
**** lilo 安装核心载入开机管理程序
**** df 显示磁盘的相关信息
**** parted 磁盘分区和分区大小调整工具


* Shell 编程
** Shell 输入/输出重定向
command > file 	将输出重定向到 file。
command < file 	将输入重定向到 file。
command >> file 	将输出以追加的方式重定向到 file。
n > file 	将文件描述符为 n 的文件重定向到 file。
n >> file 	将文件描述符为 n 的文件以追加的方式重定向到 file。
n >& m 	将输出文件 m 和 n 合并。
n <& m 	将输入文件 m 和 n 合并。
<< tag 	将开始标记 tag 和结束标记 tag 之间的内容作为输入。
** Shell 文件包含
#+BEGIN_SRC 
. filename   # 注意点号(.)和文件名中间有一空格
或
source filename
#+END_SRC


* readelf
: -a       --all
  Equivalent to specifying --file-header, --program-headers, --sections, --symbols, --relocs, --dynamic, --notes and--version-info
  [1] elf header描述了这个elf文件的一些信息，如数据格式是big-endian 或者little-endian、运行平台、section header 的个数等。
  [2] section headers是一个表，表中的每个条目描述了一个section，如section在文件中的偏移，大小等。
  [3] section中就是elf文件中“真正”的信息了。

* objdump   displays information about object files
: objdump '-a,-d,-D,-e,-f,-g,-G,-h,-H,-p,-P,-r,-R,-s,-S,-t,-T,-V,-x' OBJFILE...
: 对需要编译的程序员很有用
: -a|--archive-header 列出 archive头/列表用'ar tv'
: -d反汇编
: -S|--source
: -m MACHINE| --architecture=MACHINE
: -G|--stabs
* gdb	
* samba
  创建共享目录:
  mkdir /home/xxx/share   sudo chmod 777 /home/xxx/share  说明：xxx为你的ubuntu的用户名　　　  share你可以随便起个名字做为共享文件夹	
  修改现配置文件
  sudo gedit /etc/samba/smb.conf
:  在smb.conf最后添加
	    　[share]
	     path = /home/xxx/share      
	     available = yes
	     browseable = yes
	     public = yes
             writable = yes
	     valid users =myname
	     create mask = 0700
	     directory mask =0700
	     force user =nobody
	     force group = nogroup
	     sudo smbpasswd -a myname
: 说明：valid users = myname　这个myname是自己起的，后面在添加用户名时就是添加的这个
	     另外这个[share]名字也是可以随便起的，这个是你在windows下访问时显示的名字在windows下\\162.168.160.11\share
	     就可以访问linux下/home/god/code目录下的内容了    其中162.168.160.11是你linux的IP地址,用ifconfig就可以查看到
	     samba服务器配置

* ubuntu
  休眠		 pm-hibernate
  待机	 

* grep
  排除	v

* git
** Git 工作流程
  * 克隆 Git 资源作为工作目录。
  * 在克隆的资源上添加或修改文件。
  * 如果其他人修改了，你可以更新资源。
  * 在提交前查看修改。
  * 提交修改。
  * 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交
[[../image/git1.png]]
** 配置
git config [--system,--global]
/etc/gitconfig | ~/.gitconfig
user.name = "用户名或者用户ID"
user.email = "邮箱"
git config --list 查看
*** 创建验证用的公钥
ssh-keygen -C 'you email address@gmail.com' -t rsa
: 会在用户目录 ~/.ssh/ 下建立相应的密钥文件
: 可以使用 ssh -v git@github.com 命令来测试链接是否畅通
*** 上传公钥
# Title 可以随便命名，Key 的内容拷贝自 ~/.ssh/id_rsa.pub 中的内容，完成后，可以再使用 ssh -v git@github.com 进行测试。
** 管理 工作区、暂存区和版本库
*** 创建一个版本库
git init
git clone <repo> <directory>
*** 将修改存入暂存区
git add <modified files>/git add .
*** 暂存区删除文件
git rm --cached <file>
*** 删除工作区和暂存区文件
git rm <file>
*** 取消已缓存的内容
git reset HEAD
*** 暂存区全部或指定的文件替换工作区的文件。这个操作很危险
git checkout .
git checkout -- <file>
*** 重命名
git mv 命令做得所有事情就是 git rm --cached 命令的操作，重命
名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。
*** 用 HEAD 指向的 master 分支中的全部或者部分文件替换
git checkout HEAD .
git checkout HEAD <file>
*** 提交到版本库中
git commit -m "msg"
也可以将git add与git commit用一个指令完成
git commit -a -m "msg"
*** 远程同步
git push
*** 更新本地端的repo
git pull/git pull git://github.com/tom/test.git
*** 查看状态
git status
git status -s 简短信息
git remote -v 列出服务器地址
git diff   尚未缓存的改动：
git diff --cached   查看已缓存的改动：
git diff HEAD  查看已缓存的与未缓存的所有改动：
git diff --stat   显示摘要而非整个diff
** Git 分支管理
*** 创建分支命令：
git branch (branchname)
*** 切换分支命令:
git checkout (branchname)
当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工
作目录的内容，所以多个分支不需要多个目录。
*** 合并分支命令:
git merge 
*** 列出分支基本命令：
git branch
*** 创建新分支并立即切换到该分支下，从而在该分支中操作
git checkout -b (newbranchname)
*** 删除分支命令：
git branch -d (branchname)
*** 把bug_fix这个branch和现在的branch合并
git merge bug_fix 
*** Git 查看提交历史
git log
git log --oneline 简洁--graph 拓扑图 '--reverse'逆向显示
 --author 指定用户日志
如果你要指定日期，可以执行几个选项：--since 和 --before，但
是你也可以用 --until 和 --after。
git show 可以看某次的变更
*** 查看远程分支
git branch -r # 查看远程branch
git checkout -b bug_fix_local bug_fix_remote #把本地端切换为远程的bug_fix_remote branch并命名为bug_fix_local
* emacs 
** 键盘宏
   + C-x ( 开始录制宏
   + C-x ) 录制结束
   + C-u [执行次数] C-x e 执行键盘宏
   + 录制过程：
   + 删除若干空格(左移偏移量) 命令 C-d
   + 下一行 C-n
   + 行头 C-a
** 选择块
   C-x C-q 切换为只读或者读写模式
   C-x i 插入文件
	撤销 C-/
	多行注释 C-x r t
	反注释	 C-x r k
	关闭窗口 C-x 0
	窗口移动 M-x windmove-left /right /down
	替换windows换行M-x replace-string RET C-q C-m RET RET


	gdb –annotate=3 test回车就进入了调试模式
	annotate = 0是最基本的模式和在命令行使用gdb完全一样。
	annotate = 1是单步调试模式，出现上下两个窗口，上面是gdb运行的buffer，下面是你代码的buffer，会在代码 buffer中，同步指示当前运行的语句的位置。
	annotate = 2是产生注解的模式。
	annotate = 3是信息最完整的模式。此时的 Emacs 分5个 buffer，从上到下、从左到右依次是：gdb 调试窗口、变量实时变化显示窗口、源代码窗口、栈窗口、断点信息
	无论上面的那种情况，都出现了一个现象：程序的输出不能显示，只有在程序退出的时候才显示出来。
	gdb-many-windows 切换单窗格/多窗格模式
	gdb-restore-windows 恢复窗格布局	
		
		常用的调试命令，可以简写
		命令 		意义					用法
		list 		从第一行开始列出源码（默认10行）	  l; l 3 （开始行）
		break		设置断点。				  b <行号>;b <函数名称>;b *<函数名称>;b *<代码地址>
		run		开始调试程序	  			  r
		continue   	继续执行被调试程序，直至下一个断点	  c
		clear 		删除特定行的断点 			  clear <行号>
		delete 		删除断点，编号从1开始   		  d <编号>
		next line	执行一行源程序代码，此行代码中的函数调用也一并执行。 	        n
		step line       执行一行源程序代码，如果此行代码中有函数调用，则进入该函数 	  s
		until 		结束当前循环 				   until
		print 		print p ;print $1 ($1为历史记录变量); p <数组名>显示数组元素：p <*数组指针>显示数组int a[N]的特定值：
				   	① p *a@10;② p (int [10])*10
		whatis 		可以显示某个变量的类型			    whatis p
		info 		用于显示各类信息 			    如：info b 显示断点信息;info r 寄存器信息;info local 显示当                                                                            前函数中的局部变量信息;info prog 显示被调试程序的执行状态
		quit 		退出gdb调试				    q

vim
	ngg跳到指定行	| :n 指定行 |vim +n FileName 打开文件既跳转
	:set number 显示行号 autoindent cindent(c语言自动缩进)
	:syntax on 



du	磁盘使用
	-b filename ->filename 占用多少字节 -k -m (多少K,兆)


emacs-w3m
	例如收到的一封电子邮件里有一个指向某个Web站点，或FTP站点的URL地址，于是想去看一看。 移动到该URL地址处并输入 ESC x w3-follow-URL-at-point 就会转到那个站点去。
	如果对那个站点上的东西感兴趣，则可以把它添加到收藏夹里，或者用 C-x C-w (另存为)组合键把该 主页上的内容保存到一个文件里去。
	也可以在不退出Emacs的情况下浏览自己编写的HTML文档，输入 ESC x w3-open-local RET filename RET 命令即可。

	快捷键	功能
	q	关闭窗口
	Q	直接离开
	U	打开 URL
	V	打开文件
	C-x-k	关闭当前标签页
	G	在标签页中打开一个网址
	c-c c-p	上一标签
	c-c c-n	下一标签
	S	用google进行搜索
	B	后退
	ESC I	图片另存为 
	=   	显示当前页面属性 
	N	前进
	H	主页
	R	刷新
	C-n	下一行
	C-p	向上一行
	C-b	向后
	C-f	向前
	C-v	向下滚屏
	ESC v	向上滚屏
	F   	提交表单 
	打开链接	RET
	>		向右滚屏
	<		向左滚屏
	,		向左移动一格
	.		向右移动一格
	 书签
	快捷键	功能
	a	添加当前页到书签
	ESC a	添加该URL到书签
	v   显示书签
	E   编辑书签
	C-k 删除书签
	C-_ 撤消书签
	M   用外部浏览器打开当前页面
	ESC M	用外部浏览器打开链接
	C-c C-k	停止载入

* bochs
** bximage--->创建软盘/硬盘映像
#+title:	debug command
| 断点                            | b 0x7c00         |
| 查看寄存器信息                  | info cpu         |
|                                 | r                |
|                                 | fp               |
|                                 | sreg             |
|                                 | creg             |
| 断点信息                        | info break       |
| 执行                            | c                |
|                                 | n                |
|                                 | s  N             |
| 查看堆栈                        | print-stack      |
| 查看物理地址内容                | xp /nuf addr     |
| .. 线性.......                  | x /nuf addr      |
| 查看帮助                        | help xx          |
| 反汇编内存                      | u start end      |
| 反汇编每一条                    | trace on         |
| 每执行一条打印cpu               | trace-reg on     |
| 查询从0x90000开始的32个字节内容 | xp /32bx 0x90000 |
* head
-c  xx xx字节
-n 行
* hexdump
-c 每单元以字节为单位，显示出对应的ASCII码
-C 每单元以字节为单位，同时显示十六机制和ASCII码
* qemu	
  [-fda fdb] Use file as floppy disk 0/1 image	     
* dd copies a file with a changeable I/O block size
: data defined
  if=boot.bin of=a.img bs=512 count=1 conv=notrunc
: `if=FILE'     Read from FILE instead of standard input.
: `of=FILE'     Write to FILE instead of standard output.  Unless `conv=notrunc' is given, `dd' truncates FILE to zero bytes (or the size specified with `seek=').
: ibs=BYTES 指定每次输入多少字节,默认512
: obs=BYTES 输出
: skip=N   跳过 ibs指定字节的N块东西,如果iflag=skip_bytes,则跳过N 字节,就跟ibs指定多少无关了
: seek=N 跳过obs指定字节的N块东西,如果oflag=seek_bytes,则跳过N 字节,就跟obs指定多少无关了
: count=N 复制 N 块 ibs指定的东西,如果iflag=skip_bytes,则...
: `conv=CONVERSION[,CONVERSION]...'转换
  ascii / ebcdic/ibm/block/lcase/notrunc/fsync
: iflag=FLAG[,FLAG]...
  append/cio/direct/sync/binary/text/skip_bytes/seek_bytes
  
* apt
: apt-cache search 'expression'
: apt-get source libc6-dev 下载源代码

* mount
 mount  [-t vfstype] [-o options] device dir
** 1.-t vfstype 指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常用类型有：
　　光盘或光盘镜像：iso9660
　　DOS fat16文件系统：msdos
　　Windows 9x fat32文件系统：vfat
　　Windows NT ntfs文件系统：ntfs
　　Mount Windows文件网络共享：smbfs
　　UNIX(LINUX) 文件网络共享：nfs
** 　2.-o options 主要用来描述设备或档案的挂接方式。常用的参数有：
　　loop：用来把一个文件当成硬盘分区挂接上系统
　　ro：采用只读方式挂接设备
　　rw：采用读写方式挂接设备
　　iocharset：指定访问文件系统所用字符集,不能显示中文 iocharset=cp936
** 3.device 要挂接(mount)的设备。
** 4.dir设备在系统上的挂接点(mount point)。
** sudo mount -t smbfs -o username=user,password='' //10.0.1.1/windowsshare /mnt 浏览windows 共享文件夹
* fdisk -l查看磁盘
* find	find pathname -options [-print -exec -ok ...]
  : 搜索文件,并执行操作
  : pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。
  : -print： find命令将匹配的文件输出到标准输出。
  : -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' {  } \;，注意{   }和\；之间的空格。
  : -ok：和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。

  : -name   按照文件名查找文件。
  : -perm   按照文件权限来查找文件。
  : -prune  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。
  : -user   按照文件属主来查找文件。
  : -group  按照文件所属的组来查找文件。
  : -mtime -n +n  按照文件的更改时间来查找文件， - n表示文件更改时间距
  : 现在n天以内，+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。
  : -nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。
  : -nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。
  : -newer file1 ! file2  查找更改时间比文件file1新但比文件file2旧的文件。
  : -type  查找某一类型的文件，诸如：
  + b - 块设备文件。
  + d - 目录。
  + c - 字符设备文件。
  + p - 管道文件。
  + l - 符号链接文件。
  + f - 普通文件。
  + -size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。
  + -depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
  + -fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。
  + -mount：在查找文件时不跨越文件系统mount点。
  + -follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。
  + -cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。

*** 另外,下面三个的区别:
  : -amin n   查找系统中最后N分钟访问的文件  -n n天以内;+n n天之前
  : -atime n  查找系统中最后n*24小时访问的文件
  :  -cmin n   查找系统中最后N分钟被改变文件状态的文件
  :  -ctime n  查找系统中最后n*24小时被改变文件状态的文件
  :  -mmin n   查找系统中最后N分钟被改变文件数据的文件
  :  -mtime n  查找系统中最后n*24小时被改变文件数据的文件
  : find  ./    -mtime    -1    -type f    -ok   ls -l    {} \;  
  : find .    -perm -007    -exec ls -l {} \;  

* awk
	: awk '{print $1}'

* dmesg
# linux 错误消息控制
# clear 
# 查看  一般看最后几行 tail

* fsck.vat

* Org Mode	
** 标题
*** 文章标题 #+TITLE: xx
*** 正文标题 *
** 字体
   *粗体*
   /斜体/
   +删除线+
   _下划线_
   下标: H_2 O H 2 O 
   上标: E=mc^2
   等宽字:=git=
   # 注释 
   :抽屉:
** 列表
*** 无序    -|+|*
*** 有序    1.|1
*** 描述    ::
** 内容元数据
s    #+begin_src ... #+end_src 
e    #+begin_example ... #+end_example  : 单行的例子以冒号开头
q    #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进
v    #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行
c    #+begin_center ... #+end_center 
l    #+begin_latex ... #+end_latex 
L    #+latex: 
h    #+begin_html ... #+end_html 
H    #+html: 
a    #+begin_ascii ... #+end_ascii 
A    #+ascii: 
i    #+index: line 
I    #+include: line
上面的单字母为快捷键字母，如输入一个<s 然后TAB后就变为
注释 
** 以‘#‘开头的行被看作注释，不会被导出区块注释采用如下写法：
#+BEGIN_COMMENT
  块注释
  ...
#+END_COMMENT
** 表格与图片 
对于表格和图片，可以在前面增加标题和标签的说明，以方便交叉引用。比如在表格的前面添加：
#+CAPTION: This is the caption for the next table (or link)
则在需要的地方可以通过\ref{table1}来引用该表格。 
** TODO 待办事项（TODO ）
#+beg org-mode可以利用Emacs的时间空间插入当前时间。
  输入C-c . 会出现一个日历，我们点选相应的时间即可插入
  时间前可以加DEADLINE:和SCHEDULED:表示时间的类型如：
#+end 富文本
** 代码格式化
#符合emacs 模式时
#+BEGIN_SRC emacs-lisp -n -r
     (defun org-xor (a b)          (ref:df)
        "Exclusive or."             
        (if a (not b) b))
#+END_SRC

** 格式导出与发布 
1.C-c C-e a 导出为文本文件。
2.C-c C-e h 导出为 HTML 文件 

