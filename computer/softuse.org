* Linux应用 在线文档 LDP(Linux document project)
** 系统管理
*** 系统安全
**** syslog 系统默认的日志守护进程
**** openssl 强大的安全套接字层密码库
**** logwatch 可定制和可插入式的日志监视系统
**** lastb 列出登入系统失败的用户相关信息
**** sudo 以其他身份来执行命令
sudo -i 切换为root用户
**** lastlog 显示系统中所有用户最近一次登录信息
**** logrotate 统日志进行轮转、压缩和删除
**** chroot 把根目录换成指定的目的目录
**** logsave 将命令的输出信息保存到指定的日志文件
**** last 列出目前与过去登入系统的用户相关信息

*** 进程和作业管理
**** ipcrm 删除消息队列、信号集、或者共享内存标识
**** systemctl 系统服务管理器指令
**** w 显示目前登入系统的用户信息
**** watch 周期性的方式执行给定的指令
**** pidof 查找指定名称的进程的进程号ID号　
**** skill 向选定的进程发送信号冻结进程
**** pgrep 设置用户的认证信息，包括用户密码、密码过期时间等
**** renice 修改正在运行的进程的调度优先级
**** nohup 将程序以忽略挂起信号的方式运行起来
**** ipcs 分析消息队列共享内存和信号量
**** pmap 报告进程的内存映射关系
**** nice 改变程序执行的优先权等级
**** service 控制系统服务的实用工具
**** pstree 以树状图的方式展现进程之间的派生关系
**** telint 切换当前正在运行系统的运行等级
**** killall 使用进程的名称来杀死一组进程
**** runlevel 打印当前Linux系统的运行等级
**** batch 在系统不繁忙的时候执行定时任务
**** ps 报告当前系统的进程状态
**** init init进程是所有Linux进程的父进程
**** crontab 提交和管理用户的需要周期性执行的任务
/var/spool/cron 
**** pkill 可以按照进程名杀死进程
**** atrm 删除待执行任务队列中的指定任务
**** atq 列出当前用户的at任务列表
**** at 在指定时间执行一个任务
at TIME HH:MM YYY-MM-DD /+ n {hours,days,weeks}
*** 用户和工作组管理
**** chage 修改帐号和密码的有效期限
**** id 显示用户的ID以及所属群组的ID
**** grpconv 用来开启群组的投影密码
**** pwunconv 用来关闭用户的投影密码
**** pwconv 用来开启用户的投影密码
**** nologin 拒绝用户登录系统
**** chpasswd 批量更新用户口令的工具
**** grpunconv 用来关闭群组的投影密码
**** grpck 用于验证组文件的完整性
**** groupdel 用于删除指定的工作组
**** chsh 用来更换登录系统时使用的shell
**** gpasswd Linux下工作组文件的管理工具
**** pwck 用来验证系统认证文件内容和格式的完整性
**** groupmod 更改群组识别码或名称
**** passwd 用于让用户可以更改自己的密码
**** chfn 用来改变finger命令显示的信息
**** newusers 用于批处理的方式一次创建多个命令
**** logname 用来显示用户名称
**** groups 用来打印指定用户所属的工作组
**** finger 用于查找并显示用户信息
**** su 用于切换当前用户身份到其他用户身份
**** usermod 用于修改用户的基本信息
**** groupadd 用于创建一个新的工作组
**** userdel 用于删除给定的用户以及与用户相关的文件
**** useradd 创建的新的系统用户
*** X-Windows
**** xclip 管理 X 粘贴板
**** xset 设置X-Window系统中的用户爱好的实用工具
**** xlsfonts 列出X Server使用的字体
**** xhost 制哪些X客户端能够在X服务器上显示
**** xlsatoms 列出X服务器内部所有定义的原子成分
**** xauth 显示和编辑被用于连接X服务器的认证信息
**** xlsclients 列出显示器中的客户端应用程序
**** xinit 是Linux下X-Window系统的初始化程序
**** startx 用来启动X Window
*** SELinux
**** restorecon 恢复文件的安全上下文
**** semanage 默认目录的安全上下文查询与修改
**** setsebool 修改SElinux策略内各项规则的布尔值
**** getsebool 查询SElinux策略内各项规则的布尔值
**** sesearch 查询SELinux策略的规则详情
**** seinfo 查询SELinux的策略提供多少相关规则
**** chcon 修改对象（文件）的安全上下文
*** 文件系统管理
**** repquota 报表的格式输出磁盘空间限制的状态
**** e2label 设置第二扩展文件系统的卷标
**** findfs 标签或UUID查找文件系统
**** resize2fs ext2/ext2文件系统重新设置大小
**** e2image 将处于危险状态的文件系统保存到文件中
**** tune2fs 调整或查看ext2/ext3文件系统的文件系统参数
**** sync 用于强制被改变的内容立刻写入磁盘
**** swapoff 关闭指定的交换空间
**** swapon 激活Linux系统中交换空间
**** quota 显示磁盘已使用的空间与限制
**** quotastats 显示系统当前的磁盘配额运行状态信息
**** edquota 用于编辑指定用户或工作组磁盘配额
**** quotaon 激活Linux内核中指定文件系统的磁盘配额功能
**** quotacheck 检查磁盘的使用空间与限制
**** quotaoff 关闭Linux内核中指定文件系统的磁盘配额功能
**** mkfs 用于在设备上创建Linux文件系统
**** mountpoint 用来判断指定的目录是否是加载点
**** umount 用于卸载已经加载的文件系统
**** e2fsck 用于检查第二扩展文件系统的完整性
**** dumpe2fs 用于打印“ext2/ext3”文件系统的超级块和快组信息
**** fsck 检查并且试图修复文件系统中的错误
**** mount 用于加载文件系统到指定的加载点
 mount  [-t vfstype] [-o options] device dir
 1.-t vfstype 文件系统类型
　　光盘或光盘镜像：iso9660
　　DOS fat16文件系统：msdos
　　Windows 9x fat32文件系统：vfat
　　Windows NT ntfs文件系统：ntfs
　　Mount Windows文件网络共享：smbfs
　　UNIX(LINUX) 文件网络共享：nfs
2.-o options 主要用来描述设备或档案的挂接方式。常用的参数有：
　　loop：用来把一个文件当成硬盘分区挂接上系统
　　ro：采用只读方式挂接设备
　　rw：采用读写方式挂接设备
　　iocharset：指定访问文件系统所用字符集,不能显示中文 iocharset=cp936
3.device 要挂接(mount)的设备。
4.dir设备在系统上的挂接点(mount point)。
sudo mount -t smbfs -o username=user,password='' //10.0.1.1/windowsshare /mnt 浏览windows 共享文件夹
**** mke2fs 创建磁盘分区上的“etc2/etc3”文系统
*** 系统关机和重启
**** halt 关闭正在运行的Linux操作系统
**** ctrlaltdel 设置组合键Ctrl+Alt+Del的功能
**** reboot 重新启动正在运行的Linux操作系统
**** shutdown 用来执行系统关机的命令
shutdown [-cfFhknr (参数名称)] [-t 秒数] [时间][警告信息] 
**** poweroff 用来关闭计算机操作系统并且切断系统电源
** 网络管理
*** 网络应用
**** axel 多线程下载工具
**** jwhois whois 客户端服务
**** curl 利用URL规则在命令行下工作的文件传输工具
**** wget Linux系统下载文件工具
**** telnet 登录远程主机和管理
**** rexec 运程执行Linux系统下命令
**** rsh 连接远程主机并执行命令
**** rlogin 从当前终端登录到远程Linux主机
**** mail 命令行下发送和接收电子邮件
**** mailstat 显示到达的邮件状态
**** lynx 纯文本模式的网页浏览器
**** elm 纯文本邮件客户端程序
**** mailq 显示待发送的邮件队列
**** lftpget 调用lftp指令下载指定的文件
**** elinks 纯文本界面的WWW浏览器
**** ipcalc 简单的IP地址计算器
**** lftp 优秀的文件客户端程序
*** 高级网络
**** tcpreplay 将PCAP包重新发送，用于性能或者功能测试
**** pfctl PF防火墙的配置命令
**** iptraf 实时地监视网卡流量
**** ss 获取socket统计信息
**** nstat/rtacct 监视SNMP计数器和网络接口状态 
**** lnstat 显示Linux系统的网路状态
**** arptables 管理ARP包过滤规则表
**** arpd 收集免费ARP信息
**** tcpdump 一款sniffer工具
**** ip 网络配置工具
**** ip6tables-restore 还原ip6tables表
**** ip6tables-save 保存ip6tables表配置
**** iptables Linux上常用的防火墙软件
*** 网络测试
**** hping3 测试网络及主机的安全
**** iperf 网络性能测试工具
**** host 常用的分析域名查询工具
**** tracepath 追踪目的主机经过的路由信息
**** arpwatch 监听网络上ARP的记录
**** nslookup 查询域名DNS信息的工具
**** arping 通过发送ARP协议报文测试网络
**** nc 
**** 用来设置路由器 dig
**** 域名查询工具 arp
**** 显示和修改 
**** ping 测试主机之间网络的连通性
**** traceroute 显示数据包到主机间的路径
**** netstat 查看Linux中网络系统状态信息
*** 网络安全
**** ssh-copy-id 把本地的ssh公钥文件安装到远程主机对应的账户下
**** ssh-agent ssh密钥管理器
**** ssh-add 把专用密钥添加到ssh-agent的高速缓存中
**** nmap 网络探测和安全审核
**** iptstate 显示iptables的工作状态
**** ssh-keygen 为ssh生成、管理和转换认证密钥
**** sftp-server sftp协议的服务器端程序
**** sshd openssh软件套件中的服务器守护进程
**** ssh-keyscan 收集主机公钥的使用工具
**** sftp 交互式的文件传输程序
**** ssh openssh套件中的客户端连接工具
*** 网络配置
**** mii-tool 配置网络设备协商方式的工具
**** ethtool 显示或修改以太网卡的配置信息
**** nisdomainname 显示主机NIS的域名
**** dhclient 动态获取或释放IP地址
**** domainname 显示和设置系统的NIS域名
**** ypdomainname 显示主机的NIS的域名
**** usernetctl 被允许时操作指定的网络接口
**** dnsdomainname 定义DNS系统中FQDN名称的域名
**** hostname 显示和设置系统的主机名
**** ifup 激活指定的网络接口
**** ifcfg 置Linux中的网络接口参数
**** ifconfig 配置和显示Linux系统网卡的网络参数
**** ifdown 禁用指定的网络接口
**** route 显示并设置Linux中静态路由表
*** 网络服务器
**** mysqlimport 为MySQL服务器用命令行方式导入数据
**** ftpshut 在指定的时间关闭FTP服务器
**** ftpcount 显示目前已FTP登入的用户人数
**** exportfs 管理NFS共享文件系统列表
**** apachectl Apache服务器前端控制工具
**** ab Apache服务器的性能测试工具
**** squid squid服务器守护进程
**** mysql MySQL服务器客户端工具
**** sendmail 著名电子邮件服务器
**** mysqlshow 显示MySQL中数据库相关信息
**** smbpasswd samba用户和密码管理工具
**** squidclient squid服务器的客户端管理工具
**** smbclient 交互方式访问samba服务器
**** showmount 显示NFS服务器加载的信息
**** nfsstat 列出NFS客户端和服务器的工作状态
**** mysqladmin MySQL服务器管理客户端
**** ftpwho 显示当前每个ftp会话信息
**** mysqldump MySQL数据库中备份工具
**** htdigest Apache服务器内置工具
**** htpasswd apache服务器创建密码认证文件
**** ftptop proftpd服务器的连接状态
** 软件 | 打印 | 开发 | 工具
*** 常用工具命令
**** pssh 批量管理执行
**** screen 用于命令行终端切换
**** speedtest-cli 命令行下测试服务器外网速度
**** clockdiff 检测两台linux主机的时间差
**** ntpdate 使用网络计时协议（NTP）设置日期和时间
**** rsync 远程数据同步工具
**** vdfuse VirtualBox软件挂载VDI分区文件工具
**** ngrep 方便的数据包匹配和显示工具
**** tempfile shell中给临时文件命名
**** xargs 给其他命令传递参数的一个过滤器
**** awk 文本和数据进行处理的编程语言
**** yes 重复打印指定字符串
**** date 显示或设置系统时间与日期
**** eog 显示图片
**** consoletype 输出已连接的终端类型
**** info Linux下info格式的帮助指令
**** hostid 用来打印当前主机的数字化标识
**** clear 清除当前屏幕终端上的任何信息
**** whoami 打印当前有效的用户名称
**** users 显示当前登录系统的所有用户
**** sleep 将目前动作延迟一段时间
**** md5sum 计算和校验文件报文摘要的工具程序
**** mesg 设置当前终端的写权限
**** mtools 显示mtools支持的指令
**** login 登录系统或切换用户身份
**** stty 修改终端命令行的相关设置
**** talk 让用户和其他用户聊天
**** man 查看Linux中的指令帮助
**** whatis 查询一个命令执行什么功能
**** write 向指定登录用户终端上发送信息
**** who 显示目前登录系统的用户信息
**** sum 计算文件的校验码和显示块数
**** wall 向系统当前所有打开的终端上输出信息
**** dircolors 置ls命令在显示目录或文件时所用的色彩
**** gpm 提供文字模式下的滑鼠事件处理
**** bc 算术操作精密运算工具
**** cal 显示当前日历或指定日期的日历
**** cksum 检查文件的CRC是否正确

*** 软件包管理
**** dnf 新一代的RPM软件包管理器
**** dpkg-reconfigure Debian Linux中重新配制一个已经安装的软件包
**** dpkg Debian Linux系统上安装、创建和管理软件包
**** apt-sortpkgs Debian Linux下对软件包索引文件进行排序的工具
**** apt-key 管理Debian Linux系统中的软件包密钥
**** aptitude Debian Linux系统中软件包管理工具
**** apt-get Debian Linux发行版中的APT软件包管理工具
**** ntsysv 集中管理系统的各种服务
**** chkconfig 检查或设置系统的各种服务
**** rpmsign 使用RPM软件包的签名管理工具
**** rpmdb 初始化和重建RPM数据库
**** yum 基于RPM的软件包管理器
**** dpkg-trigger Debian Linux下的软件包触发器
**** rpm RPM软件包的管理工具
**** rpmverify 验证已安装的RPM软件包的正确性
**** rpmquery 从RPM数据库中查询软件包信息
**** patch 为开放源代码软件安装补丁程序
**** rpm2cpio 将RPM软件包转换为cpio格式的文件
**** dpkg-statoverride Debian Linux中覆盖文件的所有权和模式
**** dpkg-preconfigure Debian Linux中软件包安装之前询问问题
**** dpkg-split Debian Linux中将大软件包分割成小包
**** dpkg-query Debian Linux中软件包的查询工具
*** 编程开发
**** gcc 基于C/C++的预处理器和编译器
-o：指定生成的输出文件,所以编译多个文件是,-o 没有意义；
-E：仅执行编译预处理； .i
-S：将C代码转换为汇编代码；.s
-wall：显示警告信息；
-c：仅执行编译操作，不进行连接操作。.o
***** 1. 预处理 gcc -E test.c -o test.i
-C:
-H:
-include:
***** 2. 编译为汇编代码   gcc -S test.i -o test.s
masm=intel	汇编代码 
-std 指定使用的语言标准
***** 3. gas  gcc -c test.s -o test.o
:-Wa,option
:-llibrary 连接名为library的库文件
:-L 指定额外路径
:-m32
***** 4. ld  gcc test.o -o test
:-lobjc 这个-l选项的特殊形式用于连接Objective C程序.
:-nostartfiles 不连接系统标准启动文件,而标准库文件仍然正常使用.
:-nostdlib 不连接系统标准启动文件和标准库文件.只把指定的文件传递给连接器.
:-static 在支持动态连接(dynamic linking)的系统上,阻止连接共享库.该选项在其他系统上无效.
:-shared 生成一个共享目标文件,他可以和其他目标文件连接产生可执行文件.只有部分系统支持该选项.
:-symbolic 建立共享目标文件的时候,把引用绑定到全局符号上.对所有无法解析的引用作出警
告(除非用连接编辑选项 `-Xlinker -z -Xlinker defs'取代).只有部分系统支持该选项.
:-u symbol 使连接器认为取消了symbol的符号定义,从而连接库模块以取得定义.你可以使用多
个 `-u'选项,各自跟上不同的符号,使得连接器调入附加的库模块.
: [-e ENTRY]|[--entry=ENTRY]	 使用 ENTRY (入口)标识符作为程序执行的开始端,而不是缺省入口.   
: -lAR	在连接文件列表中增加归档库文件AR.可以多次使用这个选项. 凡指定一项AR,ld 就会在路径列表中增加一项对libar.a的搜索.
: -LSEARCHDIR   这个选项将路径SEARCHDIR添加到路径列表, ld在这个列表中搜索归档库.
  可以多次使用这个选项.缺省的搜索路径集(不使用-L时)取决于ld使用的
  模拟模式(emulation)及其配置.在连接脚本中,可以用SEARCH_DIR命令指定路径. 
: -Tbss org
: -Tdata org
: -Ttext org
  把org作为输出文件的段起始地址 --- 特别是 --- bss,data,或text段.org必须是十六进制整数. 
: -X    删除 全部 临时的 局部符号. 大多数 目的文件 中, 这些 局部符	    号 的 名字 用 `L' 做 开头.
: -x    删除 全部 局部符号. 
: -m 指定仿真环境,这里要与gcc 的选项 -m32一致; -V显示 支持的仿真：本机支持   elf_x86_64   
  elf32_x86_64   elf_i386   i386linux   elf_l1om   elf_k1om   i386pep   i386pe
  LDFLAGS="-L/usr/lib64 -L/lib64" 全局常量
: 注意,如果连接器通过被编译器驱动来间接引用(比如gcc), 那所有的连接器命令行选项前必须加上前缀'-Wl'
  gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup 
: `-b INPUT-FORMAT'
  `--format=INPUT-FORMAT' [binary]
  'ld'可以被配置为支持多于一种的目标文件.缺省的格式是从环境变量'GNUTARGET'中得到的.
  你也可以从一个脚本中定义输入格式,使用的命令是'TARGET'. 
: `--oformat OUTPUT-FORMAT'	  指定输出目标文件的二进制格式.一般不需要指定,ld的缺省输出格式配置
  为/各个机器上最常用的/ 格式. output-format是一个 字符串,BFD库支持的格式名称:在操作系统一层了,如果是操作系统本身,加入此选项
: [`-N']|[`--omagic']
  把text和data节设置为可读写.同时,取消数据节的页对齐,同时,取消对共享库的连接.如果输出格式
  支持Unix风格的magic number, 把输出标志为'OMAGIC'. 
***** 5. 检错
: -Wall 产生尽可能多的警告信息
: -Werror GCC会在所有产生警告的地方停止编译
***** 6. 库文件连接 .a .so
: 包含文件 -I /usr/dirpath    
: 库   -L /dirpath   -llibname  不要.a 或.so 后缀
: 强制静态库 gcc –L /usr/dev/mysql/lib –static –lmysqlclient test.o –o test
静态库链接时搜索路径顺序：
1. ld会去找GCC命令中的参数-L
2. 再找gcc的环境变量LIBRARY_PATH
3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的

动态链接时、执行时搜索路径顺序:
1. 编译目标代码时指定的动态库搜索路径
2. 环境变量LD_LIBRARY_PATH指定的动态库搜索路径
3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径
4. 默认的动态库搜索路径/lib
5. 默认的动态库搜索路径/usr/lib
有关环境变量：
LIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径
LD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径
***** 7. 调试
-g:
-gstabs:
-gcoff:
-gdwarf:
***** 8. 优化
-O0 不优化
-fcaller-saves: 
***** 9. 目标机选项(Target Option) 交叉编译
-b machine 
-V version 哪个版本的gcc
***** 10.配置相关选项(Configuration Dependent Option)
M680x0 选项
i386选项
***** 11.总体选项(Overall Option)
-x language
明确指出后面输入文件的语言为language (而不是从文件名后缀得到的默认选择).

***** 12.目录选项(DIRECTORY OPTION)
:-Idir 在头文件的搜索路径列表中添加dir 目录.
:-Ldir 在`-l'选项的搜索路径列表中添加dir目录.

***** 13.C 文件与 汇编文件编译
以下涉及到不同编译器对符号的处理问题。比如我们写个汇编文件，汇编后，汇编文件中的符号未变，但是当我们写个C文件再生成目标文件后，源文件中的符号前可能加了下划线，当两者之间发生引用关系时可能无法连接，此时我们会用到下面的命令。
: --change-leading-char
: --remove-leading-char
: --prefix-symbols=string
**** ldconfig 动态链接库管理命令
**** readelf 用于显示elf格式文件的信息
: -a       --all
***** elf header
描述了这个elf文件的一些信息，如数据格式是big-endian 或者little-endian
运行平台、section header 的个数等。
****** section headers是一个表，表中的每个条目描述了一个section，
如section在文件中的偏移，大小等。
****** section中就是elf文件中“真正”的信息了。

**** objcopy拷贝一个目标文件的内容到另一个目标文件中,bfdnamels是BFD库中描述的标准格式名
: --info 显示支持的architecture 与 目标文件格式
: -I bfdname或--input-target=bfdname  用来指明源文件的格式,取值elf32-little，elf32-big等，可用用objdump –i查看相应的信息
: -O bfdname 或--output-target=bfdname 输出的格式
#+BEGIN_SRC 
-O srec 产生S记录格式文件
-O binary 产生原始的二进制文件
#+END_SRC
: -R sectionname 从输出文件中删除掉所有名为sectionname的段
: -S 不从源文件中复制重定位信息和符号信息到目标文件中
: -g 不从源文件中复制调试符号到目标文件中
: -j sectionname 或--only-section=sectionname 只将由sectionname指定的section拷贝到输出文件
: -K symbolname 保留由symbolname指定的符号信息
: -N symbolname 去除掉由symbolname指定的符号信息

**** objdump 显示二进制文件信息
: -a|--archive-header 列出 archive头/列表用'ar tv'
: -d反汇编
: -S|--source
: -m MACHINE| --architecture=MACHINE
: -G|--stabs
**** pstack 显示每个进程的栈跟踪
**** indent 格式化C语言的源文件
**** gdb 功能强大的程序调试器
***** options gdb <program> [core]|[PID]
-d 指定远程调试时串行接口的线路速度
-batch 以批处理模式运行
-c 指定要分析的核心转储文件
-cd 指定工作目录
-d 指定搜索源文件的目录
-e 指定要执行的文件
-f 调试时以标准格式输出文件名和行号
-q 安静模式
-s 指定符号的文件名
-se 指定符号和要执行的文件名
-tty 设置标准输出和输入设备
-x 从指定的文件执行 gdb 命令
***** 常用的调试命令
shell <command>
make <make -args>

运行参数
set args 设定参数
show args 查看运行参数
运行环境
path<dir> 设定程序的运行路径。
show paths 查看程序的运行路径。
set environment varname[=value]设置环境变量。如:set env USER=hchen
show environment[varname]查看环境变量
工作目录
cd <dir>相当于 shell 的 cd 命令。
pwd 显示当前的工作目录。
程序的输入输出
info terminal 显示程序用到的终端的模式
使用重定向空值程序输出。如 run>outfile
tty 命令可以指定写输入输出的终端设备。如 tty /dev/ttyb
列出源码 ;l 3 （开始行） 根据本地文件,没有就列不出 
设置断点 ;b filename: <行号>;break +offset -offset 当前行号前后
b filename: <函数名称>;
b *<函数名称>;
b *<代码地址> 
break...if<condition>
调试程序 ;r 
继续执行 ;c
删除断点 ; clear <行号>
删除断点 ;  d <编号>
执行一行 ;    n /s
结束循环 ;   until
p $1 ($1为历史记录变量); 
p <数组名>显示数组元素;
p <*数组指针>显示数组int a[N]的特定值：
显示变量类型;    whatis p
显示各类信息   info b 显示断点信息
finish 退出函数
info r 寄存器信息
info local 当前函数中的局部变量信息;
info prog 显示被调试程序的执行状态
break *_start+1 由于 gnu 调试时忽略开始处断点, 需要在开始标签处执行一个空指令
print/d 显示十进制数字
print/t 显示二进制数字
print/x 显示 16 进制数字

x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
  t(binary), f(float), a(address), i(instruction), c(char), s(string)
  and z(hex, zero padded on the left).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.
7.0版本以上gdb的disas命令可以携带/m参数，让汇编与c源码同时显示：disas /m main



使用 x 命令可以查看特定内存的值:
x/nyz
其中 n 为要显示的字段数
y 时输出格式, 它可以是:
c 用于字符, d 用于十进制, x 用于 16 进制
z 是要显示的字段长度, 它可以是:
b 用于字节, h 用于 16 字节, w 用于 32 位字
如:
x/42cb 用于显示前 42 字节
print-stack      查看堆栈               
u start end      反汇编内存                       
trace on          反汇编每一条                    
trace-reg on    每执行一条打印cpu               
xp /32bx 0x90000  查询从0x90000开始的32个字节内容 
**** expr 一款表达式计算工具
**** test shell环境中测试条件表达式工具
**** php PHP语言的命令行接口
**** protoize GNU-C代码转换为ANSI-C代码
**** mktemp 创建临时文件供shell脚本使用
**** perl perl语言解释器
**** make GNU的工程化编译工具
**** ldd 打印程序或者库文件所依赖的共享库列表
**** nm 显示二进制目标文件的符号表
**** unprotoize 删除C语言源代码文件中的函数原型
**** gcov 测试程序的代码覆盖率的工具
*** 打印
**** reject 指示打印系统拒绝发往指定目标打印机的打印任务
**** lpadmin 配置CUPS套件中的打印机和类
**** cupsenable 启动指定的打印机
**** accept 指示打印系统接受发往指定目标打印机的打印任务
**** lpstat 显示CUPS中打印机的状态信息
**** cupsdisable 停止指定的打印机
**** lpc 命令行方式打印机控制程序
**** cancel 取消已存在的打印任务
**** lp 打印文件或修改排队的打印任务
**** lpq 显示打印队列中的打印任务的状态信息
**** eject 用来退出抽取式设备
**** lprm 删除打印队列中的打印任务
**** lpr 将文件发送给指定打印机进行打印
** 文件目录管理
*** 文件查找和比较
**** strings 在对象文件或二进制文件中查找可打印的字符串
**** diff 比较给定的两个文件的不同
**** cmp 比较两个文件是否有差异
**** diff3 比较3个文件不同的地方
**** locate/slocate 查找文件或目录
**** which 查找并显示给定命令的绝对路径
**** find 在指定目录下查找文件
find pathname -options [-print -exec -ok ...]
  : -print： find命令将匹配的文件输出到标准输出。
  : -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' {  } \;，注意{   }和\；之间的空格。
  : -ok：和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。

  : -name   按照文件名查找文件。
  : -perm   按照文件权限来查找文件。
  : -prune  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。
  : -user   按照文件属主来查找文件。
  : -group  按照文件所属的组来查找文件。
  : -mtime -n +n  按照文件的更改时间来查找文件， - n表示文件更改时间距
  : 现在n天以内，+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。
  : -nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。
  : -nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。
  : -newer file1 ! file2  查找更改时间比文件file1新但比文件file2旧的文件。
  : -type  查找某一类型的文件，诸如：
  + b - 块设备文件。
  + d - 目录。
  + c - 字符设备文件。
  + p - 管道文件。
  + l - 符号链接文件。
  + f - 普通文件。
  + -size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。
  + -depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
  + -fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。
  + -mount：在查找文件时不跨越文件系统mount点。
  + -follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。
  + -cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。

另外,下面三个的区别:
  : -amin n   查找系统中最后N分钟访问的文件  -n n天以内;+n n天之前
  : -atime n  查找系统中最后n*24小时访问的文件
  :  -cmin n   查找系统中最后N分钟被改变文件状态的文件
  :  -ctime n  查找系统中最后n*24小时被改变文件状态的文件
  :  -mmin n   查找系统中最后N分钟被改变文件数据的文件
  :  -mtime n  查找系统中最后n*24小时被改变文件数据的文件
  : find  ./    -mtime    -1    -type f    -ok   ls -l    {} \;  
  : find .    -perm -007    -exec ls -l {} \;  

**** whereis 查找二进制程序、代码等相关文件路径
*** 文件内容查看
**** hexdump 显示文件十六进制格式
-c 每单元以字节为单位，显示出对应的ASCII码
-C 每单元以字节为单位，同时显示十六机制和ASCII码
**** od 输出文件的八进制、十六进制等格式编码的字节
**** cut 连接文件并打印到标准输出设备上
**** tail 在屏幕上显示指定文件的末尾若干行
**** head 在屏幕上显示指定文件的开头若干行
-c  xx xx字节
-n 行
**** less 分屏上下翻页浏览文件内容
**** more 显示文件内容，每次显示一屏
*** 文件处理
**** iconv 转换文件的编码方式
**** nl 在Linux系统中计算文件内容行号
**** basename 打印目录或者文件的基本名称
**** unlink 系统调用函数unlink去删除指定的文件
**** pathchk 检查文件中不可移植的部分
**** touch 创建新的空文件
**** rename 用字符串替换的方式批量改变文件名
**** dd 复制文件并对原文件的内容进行转换和格式化处理
: `if=FILE'     Read from FILE instead of standard input.
: `of=FILE'     Write to FILE instead of standard output.  Unless `conv=notrunc' is given, `dd' truncates FILE to zero bytes (or the size specified with `seek=').
: ibs=BYTES 指定每次输入多少字节,默认512
: obs=BYTES 输出
: skip=N   跳过 ibs指定字节的N块东西,如果iflag=skip_bytes,则跳过N 字节,就跟ibs指定多少无关了
: seek=N 跳过obs指定字节的N块东西,如果oflag=seek_bytes,则跳过N 字节,就跟obs指定多少无关了
: count=N 复制 N 块 ibs指定的东西,如果iflag=skip_bytes,则...
: `conv=CONVERSION[,CONVERSION]...'转换
  ascii / ebcdic/ibm/block/lcase/notrunc/fsync
: iflag=FLAG[,FLAG]...
  append/cio/direct/sync/binary/text/skip_bytes/seek_bytes
  
**** dirname 去除文件名中的非目录部分
**** updatedb 创建或更新locate命令所必需的数据库文件
一般只会对系统目录创建索引
**** ln 用来为文件创件连接
**** cat 连接文件并打印到标准输出设备上
*** 文件编辑
**** nano 字符终端文本编辑器
**** sed 功能强大的流式文本编辑器
sed [options] 'command' file(s)
sed [options] -f scriptfile file(s)
-e<script>或--expression=<script>：以选项中的指定的script来处理输入的文本文件；
-f<script文件>或--file=<script文件>：以选项中指定的script文件来处理输入的文本文件；

***** sed命令
a\ 在当前行下面插入文本。
i\ 在当前行上面插入文本。
c\ 把选定的行改为新的文本。
d 删除，删除选择的行。
D 删除模板块的第一行。
s 替换指定字符 sed 's/aa/bb/' file 注意/ 符,用来分界
h 拷贝模板块的内容到内存中的缓冲区。
H 追加模板块的内容到内存中的缓冲区。
g 获得内存缓冲区的内容，并替代当前模板块中的文本。
G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
l 列表不能打印字符的清单。
n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
p 打印模板块的行。(显示两遍)
P(大写) 打印模板块的第一行。
q 退出Sed。
b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
r file 从file中读行。
t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
w file 写并追加模板块到file末尾。  
W file 写并追加模板块的第一行到file末尾。  
! 表示后面的命令对所有没有被选定的行发生作用。  
= 打印当前行号码。  
# 把注释扩展到下一个换行符以前。  

sed替换标记
g 表示行内全面替换。  
p 表示打印行。  
w 表示把行写入一个文件。  
x 表示互换模板块中的文本和缓冲区中的文本。  
y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
\1 子串匹配标记
& 已匹配字符串标记

sed元字符集
^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。
$ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。
. 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。
[* 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。
[] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。  
[^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。
\(..\) 匹配子串，保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。
& 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。
\< 匹配单词的开始，如:/\<love/匹配包含以love开头的单词的行。
\> 匹配单词的结束，如/love\>/匹配包含以love结尾的单词的行。
x\{m\} 重复字符x，m次，如：/0\{5\}/匹配包含5个0的行。
x\{m,\} 重复字符x，至少m次，如：/0\{5,\}/匹配至少有5个0的行。
x\{m,n\} 重复字符x，至少m次，不多于n次，如：/0\{5,10\}/匹配5~10个0的行。 

***** sed用法实例
替换操作：s命令

替换文本中的字符串：
sed 's/book/books/' file

-n选项和p命令一起使用表示只打印那些发生替换的行：
sed -n 's/test/TEST/p' file

直接编辑文件选项-i，会匹配file文件中每一行的第一个book替换
为books：
sed -i 's/book/books/g' file

全面替换标记g
使用后缀 /g 标记会替换每一行中的所有匹配：

sed 's/book/books/g' file
当需要从第N处匹配开始替换时，可以使用 /Ng：

echo sksksksksksk | sed 's/sk/SK/2g'
skSKSKSKSKSK

定界符
以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定
界符：
sed 's:test:TEXT:g'
sed 's|test|TEXT|g'

定界符出现在样式内部时，需要进行转义：
sed 's/\/bin/\/usr\/local\/bin/g'

删除操作：d命令
删除空白行：
sed '/^$/d' file

删除文件的第2行：
sed '2d' file

删除文件的第2行到末尾所有行：
sed '2,$d' file

删除文件最后一行：

sed '$d' file

删除文件中所有开头是test的行：

sed '/^test/'d file

已匹配字符串标记&

正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之
前所匹配到的单词：

echo this is a test line | sed 's/\w\+/[&]/g'
[this] [is] [a] [test] [line]

所有以192.168.0.1开头的行都会被替换成它自已加localhost：

sed 's/^192.168.0.1/&localhost/' file
192.168.0.1localhost

子串匹配标记\1

匹配给定样式的其中一部分：

echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'
this is 7 in a number

命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\)
用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹
配到的第二个结果就是 \2，例如：

echo aaa BBB | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
BBB aaa

love被标记为1，所有loveable会被替换成lovers，并打印出来：

sed -n 's/\(love\)able/\1rs/p' file

组合多个表达式

sed '表达式' | sed '表达式'

等价于：

sed '表达式; 表达式'

引用

sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字
符串，就需要使用双引号。

test=hello
echo hello WORLD | sed "s/$test/HELLO"
HELLO WORLD

选定行的范围：,（逗号）

所有在模板test和check所确定的范围内的行都被打印：

sed -n '/test/,/check/p' file

打印从第5行开始到第一个包含以test开始的行之间的所有行：

sed -n '5,/^test/p' file

对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：

sed '/test/,/west/s/$/aaa bbb/' file

多点编辑：e命令

-e选项允许在同一行里执行多条命令：

sed -e '1,5d' -e 's/test/check/' file

上面sed表达式的第一条命令删除1至5行，第二条命令用check替换
test。命令的执行顺序对结果有影响。如果两个命令都是替换命令
，那么第一个替换命令将影响第二个替换命令的结果。

和 -e 等价的命令是 --expression：

sed --expression='s/test/check/' --expression='/love/d' file

从文件读入：r命令

file里的内容被读进来，显示在与test匹配的行后面，如果匹配多
行，则file的内容将显示在所有匹配行的下面：

sed '/test/r file' filename

写入文件：w命令  

在example中所有包含test的行都被写入file里：

sed -n '/test/w file' example

追加（行下）：a\命令

将 this is a test line 追加到以test 开头的行后面：

sed '/^test/a\this is a test line' file

在 test.conf 文件第2行之后插入 this is a test line：

sed -i '2a\this is a test line' test.conf

插入（行上）：i\命令

将 this is a test line 追加到以test开头的行前面：

sed '/^test/i\this is a test line' file

在test.conf文件第5行之前插入this is a test line：

sed -i '5i\this is a test line' test.conf

下一个：n命令

如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变
为bb，并打印该行，然后继续：

sed '/test/{ n; s/aa/bb/; }' file

变形：y命令

把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使
用这个命令：

sed '1,10y/abcde/ABCDE/' file

退出：q命令

打印完第10行后，退出sed

sed '10q' file

保持和获取：h命令和G命令

在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓
冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将
打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。

sed -e '/test/h' -e '$G' file

在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将
其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的
意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它
放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾
。在这个例子中就是追加到最后一行。简单来说，任何包含test的
行都被复制并追加到该文件的末尾。

保持和互换：h命令和x命令

互换模式空间和保持缓冲区的内容。也就是把包含test与check的行
互换：

sed -e '/test/h' -e '/check/x' file

脚本scriptfile

sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名
。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空
白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行
为注释行，且不能跨行。

sed [options] -f scriptfile file(s)

打印奇数行或偶数行

方法1：

sed -n 'p;n' test.txt  #奇数行
sed -n 'n;p' test.txt  #偶数行

方法2：

sed -n '1~2p' test.txt  #奇数行
sed -n '2~2p' test.txt  #偶数行

打印匹配字符串的下一行

grep -A 1 SCC URFILE
sed -n '/SCC/{n;p}' URFILE
awk '/SCC/{getline; print}' URFILE
**** pico 功能强大全屏幕的文本编辑器
**** emacs 功能强大的全屏文本编辑器
***** emacs(选项)(参数)
+<行号>：启动emacs编辑器，并将光标移动到制定行号的行；
-q：启动emacs编辑器，而不加载初始化文件；
-u<用户>：启动emacs编辑器时，加载指定用户的初始化文件；
-t<文件>：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；
-f<函数>：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；
-l<lisp代码文件>：加载指定的lisp代码文件；
-batch：以批处理模式运行emacs编辑器。

M-r : 将光标移动到屏幕中间那行
M-e : 移到句尾
M-{ : 向上移动一段
C-left : 向后移动一个单词
C-down : 向后移动一段
M-x goto-line : 移动到某一行

Buffer 相关
C-x s : 保存所有未保存的buffer，会提示你是否需要保存

拷贝与粘贴
M-space (redefined): 设置mark; C-@ 是默认命令
C-x r k : 执行矩形区域的剪切 [范围是光标处到缓冲头的一个矩形],可以选择区块
C-x r y : 执行矩形区域的粘贴

窗口操作
C-x 5 1/2/3/0 : 对frame类似的操作
C-x > : 窗口内容左卷（这两个命令在垂直分割窗口后比较有用）

搜索和替换
M-% : 查询替换，也就是替换前会询问一下
M-x replace-string : 普通替换

Tags
M-! etags .c .h : 创建TAGS文件
M-. : 跳到tag所在位置
M-x list-tags : 列出tags

书签
C-x r m : 设置书签bookmark
C-x r b : 跳到bookmark处

帮助
C-h C-f : 查看一个函数的info，非常有用

其它
C-M-\ : 对选中区域，按照某种格式(比如C程序)进行格式化
C-x h : 全部选中
M-! : 执行外部shell命令
M-x shell : 模拟shell的buffer
M-x term : 模拟terminal, C-c k 关闭terminal
C-x C-q : 修改buffer的只读属性

C-x i 插入文件
C-/ 撤销

注释
多行注释 C-x r t
反注释	 C-x r k
关闭窗口 C-x 0
窗口移动 M-x windmove-left /right /down
替换windows换行M-x replace-string RET C-q C-m RET RET

调试
gdb –annotate=3 test
无论上面的那种情况，都出现了一个现象：程序的输出不能显示，只有在程序退出的时候才显示出来。
gdb-many-windows 切换单窗格/多窗格模式
gdb-restore-windows 恢复窗格布局	
***** Emacs 插件	
# ido, 类似于helm,和helm各有千秋我都用,五五开,
# imenu 显示当前文件函数列表,可以直接跳转到那去,完全可配置
# flymake 实时语法检查,通吃所有语言
# flyspell 拼写检查,爱死了,是我见过的所有拼写检查最强大,如果你知道如何配置.
****** emacs-w3m
	C-x C-w 保存
	q	关闭窗口
	Q	直接离开
	U	打开 URL
	C-x-k	关闭当前标签页
	G	在标签页中打开一个网址
	B	后退
	ESC I	图片另存为 
	=   	显示当前页面属性 
	N	前进
	R	刷新
	F   	提交表单 
	a	添加当前页到书签
	ESC a	添加该URL到书签
	v   显示书签
	E   编辑书签
	C-k 删除书签
	C-_ 撤消书签
	M   用外部浏览器打开链接
	C-c C-k	停止载入
    C-c C-p w3m-previous-buffer    
**** jed 主要用于编辑代码的编辑器
**** joe 强大的纯文本编辑器
**** ed 单行纯文本编辑器
**** ex 启动vim编辑器的ex编辑模式
**** vi 功能强大的纯文本编辑器
*** 目录基本操作
**** install 安装或升级软件或备份数据
**** tree 树状图列出目录的内容
**** popd 用于删除目录栈中的记录
**** pushd 将目录加入命令堆叠中
**** dirs 显示目录记录
**** rmdir 用来删除空目录
**** mkdir 用来创建目录
**** rm 用于删除给定的文件和目录
**** pwd 绝对路径方式显示用户当前工作目录
**** ls 显示目录内容列表
**** mv 用来对文件或目录重新命名
**** cp 将源文件或目录复制到目标文件或目录中
**** cd 切换用户当前工作目录
*** 文件权限属性设置
**** dos2unix 将DOS格式文本文件转换成Unix格式
**** setfacl 设置文件访问控制列表
**** umask 用来设置限制新建文件权限的掩码
**** lsattr 查看文件的第二扩展文件系统属性
**** chmod 用来变更文件或目录的权限
**** chown 用来变更文件或目录的拥有者或所属群组
**** chgrp 用来变更文件或目录的所属群组
**** chattr 用来改变文件属性
**** stat 用于显示文件的状态信息
**** file 用来探测给定文件的类型。
*** 文件过滤分割与合并
**** egrep 在文件内查找指定的字符串
**** fgrep 为文件搜索文字字符串
**** split 分割任意大小的文件
**** grep 强大的文本搜索工具
**** comm 两个文件之间的比较
**** printf 格式化并输出结果
**** expand 将文件的制表符转换为空白字符
**** spell 对文件进行拼写检查
**** pr 将文本文件转换成适合打印的格式
**** look 显示文件中以指定字符串开头的任意行
**** tac 将文件已行为单位的反序输出
**** wc 统计文件的字节数、字数、行数
**** fmt 读取文件后优化处理并输出
**** rev 将文件内容以字符为单位反序输出
**** diffstat 显示diff命令输出信息的柱状图
**** ispell 检查文件中出现的拼写错误
**** uniq 报告或忽略文件中的重复行
**** tee 把数据重定向到给定文件和屏幕上
**** paste 将多个文件按列队列合并
**** sort 将文件进行排序并输出
**** unexpand 将文件的空白字符转换为制表符
**** csplit 将一个大文件分割成小的碎片文件
**** fold 控制文件内容输出时所占用的屏幕宽度
**** join 两个文件中指定栏位内容相同的行连接起来
**** col 过滤控制字符
**** tr 将字符进行替换压缩和删除
**** colrm 删除文件中的指定列
*** 文件压缩与解压
**** lha 压缩或解压缩lzh格式文件
**** bzcmp 比较两个压缩包中的文件
**** bzcat 解压缩指定的.bz2文件
**** unarj 解压缩由arj命令创建的压缩包
**** zcat 显示压缩包中文件的内容
**** znew 将.Z压缩包重新转化为gzip命令压缩的.gz压缩包
**** zipsplit 将较大的zip压缩包分割成各个较小的压缩包
**** arj 用于创建和管理.arj压缩包
**** gzexe 用来压缩可执行文件
**** bzgrep 使用正则表达式搜索.bz2压缩包中文件
**** compress 使用Lempress-Ziv编码压缩数据文件
**** zfore 强制为gzip格式的压缩文件添加.gz后缀
**** bzless 增强.bz2压缩包查看器
**** bzmore 查看bzip2压缩过的文本文件的内容
**** zipinfo 用来列出压缩文件信息
**** unzip 用于解压缩由zip命令压缩的压缩包
**** bzip2recover 恢复被破坏的.bz2压缩包中的文件
**** tar Linux下的归档使用工具，用来打包和备份。
**** bunzip2 创一个bz2文件压缩包
**** gunzip 用来解压缩文件
**** bzdiff 直接比较两个.bz2压缩包中文件的不同
**** zip 可以用来解压缩文件
**** bzip2 将文件压缩成bz2格式
**** gzip 用来压缩文件
**** uncompress 用来解压.Z文件
*** 文件备份和恢复
**** cpio 用来建立、还原备份档的工具程序
**** restore 所进行的操作和dump指令相反
**** dump 用于备份ext2或者ext3文件系统
*** 文件传输
**** ftp 用来设置文件系统相关功能
**** tftp 在本机和tftp服务器之间使用TFTP协议传输文件
**** scp 加密的方式在本地主机和远程主机之间复制文件
**** ncftp 是增强的的FTP工具
**** rcp 使在两台Linux主机之间的文件复制操作更简单

** 硬件 | 监测 | 内核 | Shell
*** Shell内建命令
**** sh shell命令解释器
declare -i a=3
-a : 数组
-f: function
-i: integer
-r:readonly
-x:通过环境输出变量

# TITLE shell 的逻辑判断式
| 功能     | 逻辑标识 | 表示意思                    |
|----------+----------+-----------------------------|
| 文件目录 | -f       | 文件是否存在                |
|          | -d       | 目录                        |
|          | -b       | block                       |
|          | -c       | character文件               |
|          | -S       | socket                      |
|          | -L       | 符号链接                    |
|          | -e       | 某个东西                    |
|----------+----------+-----------------------------|
| 程序     | -G       | 是否由GID所执行的程序所拥有 |
|          | -O       | UID                         |
|          | -p       | name pipe or FIFO           |
|----------+----------+-----------------------------|
| 文件属性 | -r       | 可读                        |
|          | -w       | 写                          |
|          | -x       | 执行                        |
|          | -s       | 非空白                      |
|          | -u       | SUID属性                    |
|          | -g       | SGID                        |
|----------+----------+-----------------------------|
| 文件间   | -nt      | 第一个比第二个新            |
|          | -ot      | 旧                          |
|          | -ef      | 同一文件(link之类)          |
|----------+----------+-----------------------------|
| 逻辑     | &&       | AND的意思                   |
|          | 两竖     | OR                          |
|----------+----------+-----------------------------|







**** trap 指定在接收到信号后将要采取的动作
**** let 简单的计算器
**** seq 以指定增量从首数开始打印数字到尾数 sequential sequence
**** tput 通过terminfo数据库对终端会话进行初始化和操作
**** apropos 在 whatis 数据库中查找字符串
**** set 显示或设置shell特性及shell变量
**** command 调用并执行指定的命令
**** dris 显示和清空目录堆栈中的内容
**** fc 修改历史命令并执行
**** bind 显示或设置键盘按键与其相关的功能
**** readonly 定义只读shell变量或函数
**** read 从键盘读取变量值
**** bg 用于将作业放到后台运行
**** ulimit 控制shell程序的资源
**** enable 启动或关闭shell内建命令
**** declare 声明或显示shell变量
**** wait 等待进程执行完后返回
**** builtin 执行shell内部命令
**** shopt 显示和设置shell操作选项
**** exit 退出当前的shell
**** jobs 显示Linux中的任务列表及任务状态
**** help 显示帮助信息
    shell 内建的 可以用匹配模式,也就是正则
    help -s 命令名  仅简短信息
**** history 用于显示历史命令
**** logout 退出当前登录的Shell
**** export 设置或显示系统环境变量
**** exec 调用并执行指定的命令
**** env 显示系统中已存在的环境变量
**** unset 删除指定的shell变量或函数
**** kill 删除执行中的程序或工作
**** unalias 删除由alias设置的别名
**** type 显示指定命令的类型
**** fg 将后台作业放到前台终端运行
**** alias 用来设置指令的别名
**** echo 输出指定的字符串或者变量
-e 识别转义
-n 不输出新行
[*] 输出目录
*** 性能监测与优化
**** inotifywait 异步文件系统监控机制
**** nethogs 终端下的网络流量监控工具
**** ifstat 统计网络接口流量状态
**** dstat 通用的系统资源统计工具
**** ltrace 用来跟踪进程调用库函数的情况
**** iotop 用来监视磁盘I/O使用状况的工具
**** strace 跟踪系统调用和信号
**** fuser 使用文件或文件结构识别进程
**** lsof 显示Linux系统当前已打开的所有文件列表
**** tload 显示系统负载状况
**** time 统计给定命令所花费的总时间
**** vmstat 显示虚拟内存状态
**** sar 系统运行状态统计工具
**** mpstat 显示各个可用CPU的状态
**** iostat 监视系统输入输出设备和CPU的使用情况
**** free 显示内存的使用情况
**** uptime 查看Linux系统负载信息
**** top 显示或管理执行中的程序
*** 硬件管理
**** losetup 设定与控制循环（loop）设备
**** dmidecode 在Linux系统下获取有关硬件方面的信息
**** hwclock 显示与设定硬件时钟
**** cdrecord Linux系统下光盘刻录功能命令
**** setpci 查询和配置PCI设备的使用工具
**** lspci 显示当前主机的所有PCI总线信息
**** lsusb 显示本机的USB设备列表信息
**** arch 显示当前主机的硬件架构类型
**** volname 显示指定的ISO-9660格式的设备的卷名称
**** systool 显示基于总线、类和拓扑显示系统中设备的信息
*** 内核与模块管理
**** lsb_release 显示发行版本信息
**** sysctl 时动态地修改内核的运行参数
**** slabtop 实时显示内核slab内存缓存信息
**** kernelversion 打印当前内核的主版本号
**** get_module 获取Linux内核模块的详细信息
**** kexec 从当前正在运行的内核引导到一个新内核
**** dmesg 显示Linux系统启动信息
# 查看  一般看最后几行 tail
**** uname 显示Linux系统信息
**** depmod 分析可载入模块的相依性
**** bmodinfo 显示给定模块的详细信息
**** modprobe 自动处理可载入模块
***** 触摸板和小红点
关闭:sudo modprobe -r psmouse
开启:sudo modprobe  psmouse
只关闭触摸板: synclient touchpadoff=1
开启:synclient touchpadoff=0
**** rmmod 从运行的内核中移除指定的内核模块
**** insmod 将给定的模块加载到内核中
**** lsmod 显示已载入系统的模块
*** 磁盘管理
**** blkid 查看块设备的文件系统类型、LABEL、UUID等信息
**** du 显示每个文件和目录的磁盘使用空间
**** lsblk 列出块设备信息
**** vgremove 用于用户删除LVM卷组
**** lvresize 调整逻辑卷空间大小
**** lvremove 删除指定LVM逻辑卷
**** lvreduce 收缩逻辑卷空间
**** pvs 输出物理卷信息报表
**** pvchange 修改物理卷属性
**** pvck 检测物理卷的LVM元数据的一致性
**** pvremove 删除一个存在的物理卷
**** lvextend 扩展逻辑卷空间
**** pvdisplay 显示物理卷的属性
**** lvdisplay 显示逻辑卷属性
**** pvscan 扫描系统中所有硬盘的物理卷列表
**** lvscan 扫描逻辑卷
**** lvcreate 用于创建LVM的逻辑卷
**** pvcreate 将物理硬盘分区初始化为物理卷
**** vgconvert 转换卷组元数据格式
**** blockdev 从命令行调用区块设备控制程序
**** mkswap 建立和设置SWAP交换分区
**** vgchange 修改卷组属性
**** mknod 创建字符设备文件和块设备文件
**** mkisofs 建立ISO 9660映像文件
**** mkinitrd 建立要载入ramdisk的映像文件
**** vgreduce 从卷组中删除物理卷
**** hdparm 显示与设定硬盘的参数
**** vgextend 向卷组中添加物理卷
**** partprobe 不重启的情况下重读分区
**** vgscan 扫描并显示系统中的卷组
**** vgcreate 用于创建LVM卷组
**** fdisk 查看磁盘使用情况和磁盘分区
-l 查看磁盘
**** badblocks 查找磁盘中损坏的区块
**** vgdisplay 显示LVM卷组的信息
**** mkbootdisk 可建立目前系统的启动盘
**** grub 多重引导程序grub的命令行shell工具
     查看分区信息 cat (hd0,6)/etc/fstab
     指定/boot所在分区 root (hd[0=n],y)
     指定Linux内核 kernel /boot/vmlinux-XX ro root=/dev/hdaX
     指定initrd文件 initrd /boot/initrdXX.img
     引导系统 boot
     menu.lst
     default=0   #默认启动哪个系统,从0开始,title 开头的是第0个系统
     timeout=5
     title Ubuntu
     root (hd0,6)
     splashimage=(hd0,6)/boot/grub/splash.xpm.gz #grub的背景画面,注释加 '#' /nosplash 没背景
     hiddenmenu # 隐藏grub菜单
     kernel XX
     initrd XX
     ---------
     title WinXP #第 1 个系统
**** convertquota 把老的配额文件转换为新的格式
**** lilo 安装核心载入开机管理程序
**** df 显示磁盘的相关信息
-ia i节点使用情况
**** parted 磁盘分区和分区大小调整工具

* Shell 编程
** Shell 输入/输出重定向
command > file 	将输出重定向到 file。
command < file 	将输入重定向到 file。
command >> file 	将输出以追加的方式重定向到 file。
n > file 	将文件描述符为 n 的文件重定向到 file。
n >> file 	将文件描述符为 n 的文件以追加的方式重定向到 file。
n >& m 	将输出文件 m 和 n 合并。
n <& m 	将输入文件 m 和 n 合并。
<< tag 	将开始标记 tag 和结束标记 tag 之间的内容作为输入。
** Shell 文件包含
#+BEGIN_SRC 
. filename   # 注意点号(.)和文件名中间有一空格
或
source filename
#+END_SRC

* samba
  创建共享目录:
  mkdir /home/xxx/share   sudo chmod 777 /home/xxx/share  说明：xxx为你的ubuntu的用户名　　　  share你可以随便起个名字做为共享文件夹	
  修改现配置文件
  sudo gedit /etc/samba/smb.conf
:  在smb.conf最后添加
	    　[share]
	     path = /home/xxx/share      
	     available = yes
	     browseable = yes
	     public = yes
             writable = yes
	     valid users =myname
	     create mask = 0700
	     directory mask =0700
	     force user =nobody
	     force group = nogroup
	     sudo smbpasswd -a myname
: 说明：valid users = myname　这个myname是自己起的，后面在添加用户名时就是添加的这个
	     另外这个[share]名字也是可以随便起的，这个是你在windows下访问时显示的名字在windows下\\162.168.160.11\share
	     就可以访问linux下/home/god/code目录下的内容了    其中162.168.160.11是你linux的IP地址,用ifconfig就可以查看到
	     samba服务器配置

* ubuntu
** Unix 的诞生
Multics
 在Dennis Ritchie帮助下,Thompson 在PDP-7上用汇编语言重写了这个游戏
unix开始用汇编写的,太慢,后改用C语言
现在UNIX和Linux好像在同一公司了
*** Linux 历史 参考了UNIX
引入了GNU 工具
** Linux应用
1. 传统服务器 LAMP(Linux, Apache, MySQL, Perl/PHP/Python)
2. 大型数据库 Oracle/DB2/postgreSQL
*** 发行版
Debian 有测试版/stable(稳定版)和不稳定版
1.升级灵活 apt-get/dpkg 方式
apt-get update/dist-upgrade
2.支持 邮件列表可以得到开发人员的免费解答(不是普通人员哦)
3.错误跟踪
** ubuntu
*** 软件类型
    main restricted(受限的,无源码) universe(社区维护) multiverse(非自由)
*** 桌面系统
**** X-Window System->WM
*** 网络服务器     
*** X-window unix 系统 GUI ,理念挺先进的
X 是一种服务,就像TCP协议一样
X服务器和X客户机之间的通信可以通过网络进行
提供用户接口: 管理接口和应用接口
*** 窗口管理
**** 焦点策略
     focus-follows-mouse
     sloppy-fucus
     click-to-focus
**** 窗口部件
*** X 的实现原理
    一个X-window 包含多个Screen,而screen 则是一个实际的Monitor或是device.
**** /etc/X11/xorg.conf 配置文件,用于X.org server man xorg.conf
xorg.conf, xorg.conf.d - configuration files for Xorg X server
#+BEGIN_SRC 
Section "section名称"
选项名称   "选项值"
选项名称   "选项值"
选项名称   "选项值"
  ...
EndSection
#+END_SRC
Files          File pathnames
ServerFlags    Server flags
Module         Dynamic module loading
Extensions     Extension enabling
InputDevice    Input device description
InputClass     Input class description
Device         Graphics device description
VideoAdaptor   Xv video adaptor description
Monitor        Monitor description
Modes          Video modes descriptions
Screen         Screen configuration
ServerLayout   Overall layout
DRI            DRI-specific configuration
Vendor         Vendor-specific configuration

** gnome应用
gnome-screenshot gimp
** web服务     WWW, Mail Server, File Server, FTP
** 软件包管理
*** dpkg
dpkg -i <package> 安装
dpkg -c <package> 列出内容
dpkg -l <package> 提取信息
dpkg -r <package> 移除以安装软件包
dpkg -P <package> 完全删除,包括配置文件
dpkg -L <package> 列出所有文件清单
*** apt-get apt-cache apt-cdrom
apt-cache showsrc <package> 查看软件信息
apt-get source <package> 获取源码
install /remove /update (更新列表)/upgrade(升级可用)/help
*** synaptic
*** 打包工具 checkinstall
** shell
*** terminals (不同的终端),终端特性文件
Linux一般vt100 或 linux
*** 有了图形后,就是xorg
出现了xterm 伪终端
*** 为了在终端运行程序,发明了shell
*** 开启远程登录服务openssh-server
*** 命令替换 $(locate XXX)= `command`
  休眠		 pm-hibernate

* git
** Git 工作流程
  * 克隆 Git 资源作为工作目录。
  * 在克隆的资源上添加或修改文件。
  * 如果其他人修改了，你可以更新资源。
  * 在提交前查看修改。
  * 提交修改。
  * 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交
[[../image/git1.png]]
** 配置
git config [--system,--global]
/etc/gitconfig | ~/.gitconfig
user.name = "用户名或者用户ID"
user.email = "邮箱"
git config --list 查看
*** 创建验证用的公钥
ssh-keygen -C 'you email address@gmail.com' -t rsa
: 会在用户目录 ~/.ssh/ 下建立相应的密钥文件
: 可以使用 ssh -v git@github.com 命令来测试链接是否畅通
*** 上传公钥
# Title 可以随便命名，Key 的内容拷贝自 ~/.ssh/id_rsa.pub 中的内容，完成后，可以再使用 ssh -v git@github.com 进行测试。
** 管理 工作区、暂存区和版本库
*** 创建一个版本库
git init <directory>
git clone git://git.kernel.org/pub/scm/git/git.git <directory>
git remote add origin git@github.com:hanyudeye/os.git
git push origin master
git push -u origin master
*** git tag
*** git branch
*** git checkout
*** 将修改存入暂存区
git add <modified files>/git add .
*** 暂存区删除文件
git rm --cached <file>
*** 删除工作区和暂存区文件
git rm <file>
*** 取消已缓存的内容
git reset HEAD
*** 暂存区全部或指定的文件替换工作区的文件。这个操作很危险
git checkout .
git checkout -- <file>
*** 重命名
git mv 命令做得所有事情就是 git rm --cached 命令的操作，重命
名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。
*** 用 HEAD 指向的 master 分支中的全部或者部分文件替换
git checkout HEAD .
git checkout HEAD <file>
*** 提交到版本库中
git commit -m "msg"
也可以将git add与git commit用一个指令完成
git commit -a -m "msg"
*** 远程同步
git push
*** 更新本地端的repo
git pull/git pull git://github.com/tom/test.git
*** 查看状态
git status
git status -s 简短信息
git remote -v 列出服务器地址
git diff   尚未缓存的改动：
git diff --cached   查看已缓存的改动：
git diff HEAD  查看已缓存的与未缓存的所有改动：
git diff --stat   显示摘要而非整个diff
 A: 你本地新增的文件（服务器上没有）.
C: 文件的一个新拷贝.
D: 你本地删除的文件（服务器上还在）.
M: 文件的内容或者mode被修改了.
R: 文件名被修改了。
T: 文件的类型被修改了。
U: 文件没有被合并(你需要完成合并才能进行提交)。
X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)。
在man git diff-files中可以查到这些标志的说明
** Git 分支管理
*** 创建分支命令：
git branch (branchname)
*** 切换分支命令:
git checkout (branchname)
当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工
作目录的内容，所以多个分支不需要多个目录。
*** 合并分支命令:
git merge 
*** 列出分支基本命令：
git branch
*** 创建新分支并立即切换到该分支下，从而在该分支中操作
git checkout -b (newbranchname)
*** 删除分支命令：
git branch -d (branchname)
*** 把bug_fix这个branch和现在的branch合并
git merge bug_fix 
*** Git 查看提交历史
git log
git log --oneline 简洁--graph 拓扑图 '--reverse'逆向显示
 --author 指定用户日志
如果你要指定日期，可以执行几个选项：--since 和 --before，但
是你也可以用 --until 和 --after。
git show 可以看某次的变更
*** 查看远程分支
git branch -r # 查看远程branch
git checkout -b bug_fix_local bug_fix_remote #把本地端切换为远程的bug_fix_remote branch并命名为bug_fix_local
** .gitignore
*** 配置语法：
　　以斜杠“/”开头表示目录；
　　以星号“*”通配多个字符；
　　以问号“?”通配单个字符
　　以方括号“[]”包含单个字符的匹配列表；
　　以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；
规则：/fd1/*
　　　　  说明：忽略根目录下的 /fd1/ 目录的全部内容；

* qemu	
  [-fda fdb] Use file as floppy disk 0/1 image	     
* du	目录或文件大小
	-b filename ->filename 占用多少字节 -k -m (多少K,兆)

* apt
: apt-cache search 'expression'
: apt-get source libc6-dev 下载源代码

* Org Mode	
*** 大纲编辑(outline)
**** 定义标题 
***** 快捷键
  | 大纲快捷键     | 说明                                    |
  |----------------+-----------------------------------------|
  | S-TAB          | 循环切换整个文档的大纲状态              |
  |----------------+-----------------------------------------|
  | TAB            | 循环切换光标所在大纲的状态              |
  | C-C C-N/P      | 下/上一标题                             |
  | C-C C-F/B      | 下/上一标题(同级)                       |
  | C-C C-U        | 跳到上一级标题                          |
  | C-C C-J        | 切换到大纲浏览状态                      |
  | M-RET          | 插入一个同级标题                        |
  | M-S-RET        | 插入一个同级TODO 标题                   |
  |----------------+-----------------------------------------|
p | M-LEFT/RIGHT   | 将当前标题升/降级                       |
  | M-S-LEFT/RIGHT | 将子树升/降级                           |
  | M-S-UP/DOWN    | 将子树上/下移                           |
  | C-C *          | 将本行设为标题/正文                     |
  | C-C C-W        | 将子树或区域移动到另一标题处（跨缓冲区) |
  | C-X N S/W      | 只显示当前子树/返回                     |
  |----------------+-----------------------------------------|
  | C-C C-X B      | 在新缓冲区显示当前分支（类似C-X N S)    |
  | C-C /          | 只列出包含搜索结果的大纲，并高亮，支    |
  |                | 持多种搜索方式                          |
  | C-C C-C        | 取消高亮                                |
  |----------------+-----------------------------------------|
  | 显示快捷键     | 说明                                    |
  |----------------+-----------------------------------------|
  | C-C L          | 保存链接                                |
  | C-C            | 创建或修改链接，可以引用已              |
  | C-L            | 保存的链接                              |
  | C-C/C-O        | 打开链接                                |
  | C-C %          | 记录内部链接地址                        |
  | C-C &          | 跳转到已记录的内部链接                  |
  |----------------+-----------------------------------------|
  更多的快捷键可以通过C-C C-X C-H查看。

***** 大纲的显示方式
M-x org-indent-mode
如果想让某个文件默认用这种方式打开，可以在文件头部增加：
    #+STARTUP: indent
    
如果希望打开所有org文件都默认用这种方式，可以在.emacs中配置
：
    (setq org-startup-indented t)
***** 超链接和图文混排
****** 创建链接
对于符合链接规则的内容，org-mode会自动将其视为链接，包括括
文件、网页、邮箱、新闻组、BBDB 数据库项、IRC 会话和记录等。
下面是一些例子：

    http://www.astro.uva.nl/~dominik            on the web
    file:/home/dominik/images/jupiter.jpg       file, absolute path
    /home/dominik/images/jupiter.jpg            same as above
    file:papers/last.pdf                        file, relative path
    file:projects.org                           another Org file
    docview:papers/last.pdf::NNN                open file in doc-view mode at page NNN
    id:B7423F4D-2E8A-471B-8810-C40F074717E9     Link to heading by ID
    news:comp.emacs                             Usenet link
    mailto:adent@galaxy.net                     Mail link
    vm:folder                                   VM folder link
    vm:folder#id                                VM message link
    wl:folder#id                                WANDERLUST message link
    mhe:folder#id                               MH-E message link
    rmail:folder#id                             RMAIL message link
    gnus:group#id                               Gnus article link
    bbdb:R.*Stallman                            BBDB link (with regexp)
    irc:/irc.com/#emacs/bob                     IRC link
    info:org:External%20links                   Info node link (with encoded space)
    
对于文件链接，可以用::后面增加定位符的方式链接到文件的特定
位置。定位符可以是行号或搜索选项。如：

    file:~/code/main.c::255                     进入到 255 行
    file:~/xx.org::My Target                    找到目标‘<<My Target>>’
    file:~/xx.org/::#my-custom-id               查找自定义 id 的项
    
除了上述的自动链接外，还可以显示指定链接，采用如下格式：

    [[link][description]]
    [[link]]
    
显示指定的链接可以不显示原始的URL而是显示对该链接的描述。这
种方式可以用相对路径链接本地文件。

对于显示指定的链接，即可以手工输入，也可以用org-mode提供的
快捷键进行编辑：

+---------------------------------------------------------+
| 快捷  |       命令        |            说明             |
|  键   |                   |                             |
|-------+-------------------+-----------------------------|
| C-c l |                   | 保存链接                    |
|-------+-------------------+-----------------------------|
| C-c   | org-insert-link   | 创建或修改链接，可以引用已  |
| C-l   |                   | 保存的链接                  |
|-------+-------------------+-----------------------------|
| C-c   | org-open-at-point | 打开链接                    |
| C-o   |                   |                             |
+---------------------------------------------------------+
                                      
+------------------------------------+
| C-c % |   | 记录内部链接地址       |
|-------+---+------------------------|
| C-c & |   | 跳转到已记录的内部链接 |
+------------------------------------+

2.2 内部链接

前面的例子都是外部链接，Org-mode还支持内部链接：

    定义锚点 #<<my-anchor>>
    [[my-anchor][内部链接]]
    
脚注可以看作是一种特殊的内部链接，但是要求具有"fn:"前缀：

    添加脚注链接 [[fn:footprint1][脚注1]]
    定义脚注 [fn:footprint1]
    
2.3 显示图片

尽管不看重"所见即所得"，但有时候能够看到图文混排的内容还是
很有必要的。通过iimage这个minor mode，可以在Org-mode中显示
图片。

下载 iimage.el 文件扔到 Emacs 的目录里，然后在 .emacs 里添
加下面的代码：

    ;; iimage mode
    (autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
    (autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
    
然后就可以用命令

M-x iimage-mode RET

在当前模式里启动 iimage 这个 minor mode。

iimage-mode目前只能显示以文件方式链接的图片。

混排超链接也是组织内容的一种非常有效的方式。Org 支持多种超
链接。对于符合要求的图片链接，可以形成图文混排。

2.4 创建链接

对于符合链接规则的内容，org-mode会自动将其视为链接，包括括
文件、网页、邮箱、新闻组、BBDB 数据库项、IRC 会话和记录等。
下面是一些例子：

    http://www.astro.uva.nl/~dominik            on the web
    file:/home/dominik/images/jupiter.jpg       file, absolute path
    /home/dominik/images/jupiter.jpg            same as above
    file:papers/last.pdf                        file, relative path
    file:projects.org                           another Org file
    docview:papers/last.pdf::NNN                open file in doc-view mode at page NNN
    id:B7423F4D-2E8A-471B-8810-C40F074717E9     Link to heading by ID
    news:comp.emacs                             Usenet link
    mailto:adent@galaxy.net                     Mail link
    vm:folder                                   VM folder link
    vm:folder#id                                VM message link
    wl:folder#id                                WANDERLUST message link
    mhe:folder#id                               MH-E message link
    rmail:folder#id                             RMAIL message link
    gnus:group#id                               Gnus article link
    bbdb:R.*Stallman                            BBDB link (with regexp)
    irc:/irc.com/#emacs/bob                     IRC link
    info:org:External%20links                   Info node link (with encoded space)
    
对于文件链接，可以用::后面增加定位符的方式链接到文件的特定
位置。定位符可以是行号或搜索选项。如：

    file:~/code/main.c::255                     进入到 255 行
    file:~/xx.org::My Target                    找到目标‘<<My Target>>’
    file:~/xx.org/::#my-custom-id               查找自定义 id 的项
    
除了上述的自动链接外，还可以显示指定链接，采用如下格式：

    [[link][description]]
    [[link]]
    
显示指定的链接可以不显示原始的URL而是显示对该链接的描述。这
种方式可以用相对路径链接本地文件。

对于显示指定的链接，即可以手工输入，也可以用org-mode提供的
快捷键进行编辑：

+---------------------------------------------------------+
| 快捷  |       命令        |            说明             |
|  键   |                   |                             |
|-------+-------------------+-----------------------------|
| C-c l |                   | 保存链接                    |
|-------+-------------------+-----------------------------|
| C-c   | org-insert-link   | 创建或修改链接，可以引用已  |
| C-l   |                   | 保存的链接                  |
|-------+-------------------+-----------------------------|
| C-c   | org-open-at-point | 打开链接                    |
| C-o   |                   |                             |
+---------------------------------------------------------+
                                      
+------------------------------------+
| C-c % |   | 记录内部链接地址       |
|-------+---+------------------------|
| C-c & |   | 跳转到已记录的内部链接 |
+------------------------------------+

2.5 内部链接

前面的例子都是外部链接，Org-mode还支持内部链接：

    定义锚点 #<<my-anchor>>
    [[my-anchor][内部链接]]
    
脚注可以看作是一种特殊的内部链接，但是要求具有"fn:"前缀：

    添加脚注链接 [[fn:footprint1][脚注1]]
    定义脚注 [fn:footprint1]
    
2.6 显示图片

尽管不看重"所见即所得"，但有时候能够看到图文混排的内容还是
很有必要的。通过iimage这个minor mode，可以在Org-mode中显示
图片。

下载 iimage.el 文件扔到 Emacs 的目录里，然后在 .emacs 里添
加下面的代码：

    ;; iimage mode
    (autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
    (autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)
    
然后就可以用命令

M-x iimage-mode RET

在当前模式里启动 iimage 这个 minor mode。

iimage-mode目前只能显示以文件方式链接的图片。

3 轻量级标记语言

前面的大纲和超链接都是使用标记来定义的。实际上，Org现在已经
成为一种专门的轻量级标记语言，与Markdown、reStructedText、
Textile、RDoc、MediaWiki等并列。

相对于重量级标记语言（如html, xml)，轻量级标记语言的语法简
单，书写容易。即使不经过渲染，也可以很容易阅读。用途越来越
广泛。比如，gitHub的README文档除了支持纯文本外，还支持丰富
的轻量级标记语言，其中就包括Org。

关于这些语言的对比，可以参考这里。下面来看一下Org还支持哪些
标记。

3.1 字体

    *粗体*
    /斜体/
    +删除线+
    _下划线_
    下标： H_2 O
    上标： E=mc^2
    等宽字：  =git=  或者 ～git～
    
3.2 表格

Org 能够很容易地处理 ASCII 文本表格。任何以‘|’为首个非空字
符的行都会被认为是表格的一部分。’|‘也是列分隔符。一个表格是
下面的样子：

    | Name  | Pone | Age |
    |-------+------+-----|
    | Peter | 1234 | 17  |
    | Anna  | 4321 | 25  |
    
你可能认为要录入这样的表格很繁琐，实际上你只需要输入表头“|
Name|Pone|Age”之后，按C-c RET,就可以生成整个表格的结构。类
似的快捷键还有很多：

3.2.1 创建和转换表格

+------------------------------------+
|  快捷键  | 命令 |       说明       |
|----------+------+------------------|
| C-c 竖线 |      | 创建或转换成表格 |
+------------------------------------+

3.2.2 调整和区域移动

+-------------------------------------------------+
| 快捷键  | 命令 |              说明              |
|---------+------+--------------------------------|
| C-c C-c |      | 调整表格，不移动光标           |
|---------+------+--------------------------------|
| TAB     |      | 移动到下一区域，必要时新建一行 |
|---------+------+--------------------------------|
| S-TAB   |      | 移动到上一区域                 |
|---------+------+--------------------------------|
| RET     |      | 移动到下一行，必要时新建一行   |
+-------------------------------------------------+

3.2.3 编辑行和列

+---------------------------------------------------------+
|     快捷键     | 命令 |              说明               |
|----------------+------+---------------------------------|
| M-LEFT/RIGHT   |      | 移动列                          |
|----------------+------+---------------------------------|
| M-UP/DOWN      |      | 移动行                          |
|----------------+------+---------------------------------|
| M-S-LEFT/RIGHT |      | 删除/插入列                     |
|----------------+------+---------------------------------|
| M-S-UP/DOWN    |      | 删除/插入行                     |
|----------------+------+---------------------------------|
| C-c -          |      | 添加水平分割线                  |
|----------------+------+---------------------------------|
| C-c RET        |      | 添加水平分割线并跳到下一行      |
|----------------+------+---------------------------------|
| C-c ^          |      | 根据当前列排序，可以选择排序方  |
|                |      | 式                              |
+---------------------------------------------------------+

3.3 段落

对于单个回车换行的文本，认为其属于同一个段落。在导出的时候
将会转化为不换行的同一段。如果要新起一个段落，需要留出一个
空行。这点与MediaWiki类似。

3.4 列表

Org 能够识别有序列表、无序列表和描述列表。

  * 无序列表项以‘-’、‘+’或者‘*‘开头。
  * 有序列表项以‘1.’或者‘1)’开头。
  * 描述列表用‘::’将项和描述分开。
  * 有序列表和无序列表都以缩进表示层级。只要对齐缩进，不管
    是换行还是分块都认为是处于当前列表项。

同一列表中的项的第一行必须缩进相同程度。当下一行的缩进与列
表项的的开头的符号或者数字相同或者更小时，这一项就结束了。
当所有的项都关上时，或者后面有两个空行时，列表就结束了。例
如：

      My favorite scenes are (in this order)
      1. The attack of the Rohirrim
      2. Eowyn's fight with the witch king
          + this was already my favorite scene in the book
          + I really like Miranda Otto.
      Important actors in this film are:
      - Elijah Wood :: He plays Frodo
      - Sean Austin :: He plays Sam, Frodo's friend.
    
将显示为：

    My favorite scenes are (in this order)
   
     1. The attack of the Rohirrim
     2. Eowyn's fight with the witch king
          o this was already my favorite scene in the book
          o I really like Miranda Otto.
   
    Important actors in this film are:
   
    Elijah Wood
        He plays Frodo
    Sean Austin
        He plays Sam, Frodo's friend.
   
3.4.1 列表操作快捷键

为了便利，org-mode也支持很多列表操作的快捷键，大部分都与大
纲的快捷键类似：

+---------------------------------------------------+
|     快捷键     | 命令 |           说明            |
|----------------+------+---------------------------|
| TAB            |      | 折叠列表项                |
|----------------+------+---------------------------|
| M-RET          |      | 插入项                    |
|----------------+------+---------------------------|
| M-S-RET        |      | 插入带复选框的项          |
|----------------+------+---------------------------|
| M-S-UP/DOWN    |      | 移动列表项                |
|----------------+------+---------------------------|
| M-LEFT/RIGHT   |      | 升/降级列表项，不包括子项 |
|----------------+------+---------------------------|
| M-S-LEFT/RIGTH |      | 升/降级列表项，包括子项   |
|----------------+------+---------------------------|
| C-c C-c        |      | 改变复选框状态            |
|----------------+------+---------------------------|
| C-c -          |      | 更换列表标记（循环切换）  |
+---------------------------------------------------+

3.5 分隔线

五条短线或以上显示为分隔线。

-----

4 标签

4.1 tag的作用

对于信息的管理，有分类(category)和标签(tag)两种方式。这两种
方式各有特点：

通常分类是固定的，很少变化，而tag随时可以增加。分类通常表现
为树状结构，比较清晰，但是树状结构过于简单，不能表达复杂的
信息。比如，如果有多个分类树，处理起来就会比较麻烦。

所以，这两种方式通常结合起来使用。比如blog系统中，通常既支
持文章的分类（树），又支持为每篇文章作tag标记。

org-mode作为最好的文档编辑利器 ，在支持文内大纲（也是树状结
构）的同时，还方便的支持tag功能。tag可以在多篇文档中共用。

4.2 标记tag

在Org-mode中，可以对标题增加tag标记。标记的格式如下：

    跟特留尼西特握手                    :苦差:薪水:逃不掉:
    
而且Org-mode的标签自动按照大纲树的结构继承。即子标题自动继
承父标题的标签。比如：

    * Meeting with the French group     :work:
    ** Summary by Frank                 :boss:notes:
    *** TODO Prepare slides for him     :action:
    
则最后一行标题具有 work, boss, notes, action 四个标签。

如果希望文档中的所有标题都具有某些标签，只需要定义文档元数
据：

    #+FILETAGS: :Peter:Boss:Secret:
    
如果手工输入标签，在标题后设置标签，键入:后，M-Tab自动提供
标签的补齐。

更方便的做法是在正文部分用C-c C-q 或直接在标题上用C-c C-c创
建标签，这种方式可以列出所有预定义的标签以便选取。

4.3 预定义tag

上面提到，除了可以输入标签外，还可以从预定义的标签中进行选
择。预定义的方式有两种：

  * 在当前文件头部定义
   
    这种方式预定义的标签只能在当前文件中使用。使用#+TAGS元数据进行标记，如：
    
        #+TAGS: { 桌面(d) 服务器(s) }  编辑器(e) 浏览器(f) 多媒体(m) 压缩(z)    
    
    每项之间必须用空格分隔，可以在括号中定义一个快捷键；花
    括号里的为标签组，只能选择一个
   
    对标签定义进行修改后，要在标签定义的位置按 C-c C-c 刷新
    才能生效。
   
  * 在配置文件中定义上面的标签定义只能在当前文件生效，如果
    要在所有的.org 文件中生效，需要在 Emacs 配置文件 .emacs
    中进行定义：

    (setq org-tag-alist '(
   
                        (:startgroup . nil)
                             ("桌面" . ?d) ("服务器" . ?s)
                        (:endgroup . nil)
                        ("编辑器" . ?e)
                        ("浏览器" . ?f) 
                        ("多媒体" . ?m)
                        ))    
    
默认情况下，org会动态维护一个Tag列表，即当前输入的标签若不
在列表中，则自动加入列表以供下次补齐使用。

为了使这几种情况（默认列表、文件预设tags，全局预设tags）同
时生效，需要在文件中增加一个空的TAGS定义：

    #+TAGS:
    
4.4 按tag搜索

使用标签可以更好的管理内容。org-mode提供了以下功能：

+---------------------------------------------------------+
|  KEYS   |                    COMMENT                    |
|---------+-----------------------------------------------|
| C-c \   | 按tag搜索标题                                 |
|---------+-----------------------------------------------|
| C-c / m | 搜索并按树状结构显示                          |
|---------+-----------------------------------------------|
| C-c a m | 按标签搜索多个文件（需要将文件加入全局agenda) |
+---------------------------------------------------------+

可以使用逻辑表达式限制条件，更准确灵活的搜索

    +     和      a+b     同时有这两个标签
    -     排除    a-b     有 a 但没有 b
    |     或      a|b     有 a 或者有 b
    &     和      a&b     同时有 a 和 b，可以用“+”替代
    
在查询视图中 C-c C-c 退出

5 导出和发布

更多： http://orgmode.org/manual/Exporting.html

Org-mode可以完美的编辑，但是最终文档可能需要发布成其他的格
式。 Org-Mode 支持多种文档的输出，包括：

  * 文本
  * 网页
  * PDF（需要 Latex 支持）
  * XOXO
  * FreeMind/Xmind
  * Docbook
  * iCalendar（苹果 iCal 文件）
  * ……

5.1 准备工作

为了更好的发布文档，还需要做一些准备工作。主要是为文档添加
一些”元数据“，使得发布的时候能更好地识别文档的内容。

5.1.1 文档元数据

具体包括：

    #+TITLE:       the title to be shown (default is the buffer name)
    #+AUTHOR:      the author (default taken from user-full-name)
    #+DATE:        a date, an Org timestamp1, or a format string for format-time-string
    #+EMAIL:       his/her email address (default from user-mail-address)
    #+DESCRIPTION: the page description, e.g. for the XHTML meta tag
    #+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
    #+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
    #+TEXT:        Some descriptive text to be inserted at the beginning.
    #+TEXT:        Several lines may be given.
    #+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
    #+BIND:        lisp-var lisp-val, e.g.: org-export-latex-low-levels itemize
                   You need to confirm using these, or configure org-export-allow-BIND
    #+LINK_UP:     the ``up'' link of an exported page
    #+LINK_HOME:   the ``home'' link of an exported page
    #+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
    #+EXPORT_SELECT_TAGS:   Tags that select a tree for export
    #+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export
    #+XSLT:        the XSLT stylesheet used by DocBook exporter to generate FO file
    
其中#+OPTIONS是复合的选项，包括：

    H:         set the number of headline levels for export
    num:       turn on/off section-numbers
    toc:       turn on/off table of contents, or set level limit (integer)
    \n:        turn on/off line-break-preservation (DOES NOT WORK)
    @:         turn on/off quoted HTML tags
    ::         turn on/off fixed-width sections
    |:         turn on/off tables
    ^:         turn on/off TeX-like syntax for sub- and superscripts.  If
               you write "^:{}", a_{b} will be interpreted, but
               the simple a_b will be left as it is.
    -:         turn on/off conversion of special strings.
    f:         turn on/off footnotes like this[1].
    todo:      turn on/off inclusion of TODO keywords into exported text
    tasks:     turn on/off inclusion of tasks (TODO items), can be nil to remove
               all tasks, todo to remove DONE tasks, or list of kwds to keep
    pri:       turn on/off priority cookies
    tags:      turn on/off inclusion of tags, may also be not-in-toc
    <:         turn on/off inclusion of any time/date stamps like DEADLINES
    *:         turn on/off emphasized text (bold, italic, underlined)
    TeX:       turn on/off simple TeX macros in plain text
    LaTeX:     configure export of LaTeX fragments.  Default auto
    skip:      turn on/off skipping the text before the first heading
    author:    turn on/off inclusion of author name/email into exported file
    email:     turn on/off inclusion of author email into exported file
    creator:   turn on/off inclusion of creator info into exported file
    timestamp: turn on/off inclusion creation time into exported file
    d:         turn on/off inclusion of drawers
    
这些元数据可以根据需要设置。建议放在文档的开头部分。如，本
文采用的元数据如下：

    #+TITLE: org-mode: 最好的文档编辑利器，没有之一
    #+AUTHOR:Holbrook Wong
    #+EMAIL: wanghaikuo@gmail.com
    #+KEYWORDS: emacs, org-mode
    #+OPTIONS: H:4 toc:t 
    
5.1.2 内容元数据

通常在行首以“#+”开头，可以有多种用途。

  * 分行区块
    默认内容不换行，需要留出空行才能换行。定义了分行的区块
    可以实现普通换行：
   
        #+BEGIN_VERSE
         Great clouds overhead
         Tiny black birds rise and fall
         Snow covers Emacs
             -- AlexSchroeder
        #+END_VERSE
        
  * 缩进区块
    通常用于引用，与默认格式相比左右都会留出缩进：
   
        #+BEGIN_QUOTE
          缩进区块
        #+END_QUOTE
        
  * 居中区块
   
        #+BEGIN_CENTER
        Everything should be made as simple as possible, \\
        but not any simpler
        #+END_CENTER
        
  * 代码区块
   
        #+BEGIN_SRC ruby
          require 'redcarpet'
          md = Redcarpet.new("Hello, world.")
          puts md.to_html
        #+END_SRC
        
  * 例子
   
        : 单行的例子以冒号开头
        
        #+BEGIN_EXAMPLE
         多行的例子
         使用区块
        #+END_EXAMPLE
        
  * 注释
    以‘#‘开头的行被看作注释，不会被导出
   
    区块注释采用如下写法：
   
        #+BEGIN_COMMENT
          块注释
          ...
         #+END_COMMENT
        
  * 表格与图片
    对于表格和图片，可以在前面增加标题和标签的说明，以方便
    交叉引用。
   
    比如在表格的前面添加：
   
        #+CAPTION: This is the caption for the next table (or link)
        #+LABEL: tbl:table1
        
    则在需要的地方可以通过
   
        \ref{table1}
        
    来引用该表格。
   
5.1.3 嵌入Html

对于导出html以及发布，嵌入html代码就很有用。比如下面的例子
适用于格式化为cnblogs的代码块：

    #+BEGIN_HTML
      <div class="cnblogs_Highlighter">
      <pre class="brush:cpp">
      int main()
      {
        return 0;
      }
      </pre>
      </div>
    #+END_HTML
    
相当于在cnblogs的网页编辑器中插入"c++"代码。

5.1.4 包含文件

当导出文档时，你可以包含其他文件中的内容。比如，想包含你的
“.emacs”文件，你可以用：

     #+INCLUDE: "~/.emacs" src emacs-lisp

可选的第二个第三个参数是组织方式（例如，“quote”，“example”
，或者“src”），如果是 “src”，语言用来格式化内容。组织方式是
可选的，如果不给出，文本会被当作 Org 模式的正常处理。用 C-c
,可以访问包含的文件。

5.1.5 嵌入 LaTex

对于需要包含数学符号和特殊方程的科学笔记，Org 模式支持嵌入
LaTeX 代码到文件中。你可以直接使用类 TeX 的宏来输入特殊符号
，输入方程，或者整个 LaTeX 环境。

    Angles are written as Greek letters \alpha, \beta and \gamma. The mass if
    the sun is M_sun = 1.989 x 10^30 kg. The radius of the sun is R_{sun} =
    6.96 x 10^8 m. If $a^2=b$ and $b=2$, then the solution must be either
    $a=+\sqrt{2}$ or $a=-\sqrt{2}$.
    \begin{equation}
    x=\sqrt{b}
    \end{equation}
    
特殊设置之后，导出 HTML 时 LaTeX 代码片断会生成图片并包含进
来。

5.2 导出

做好准备工作后，就可以导出了。使用命令：

C-c C-e

然后选择相应的格式，就可以导出对应的文件了。

5.3 发布

Org 包含一个发布管理系统，可以配置一个由相互链接的 Org 文件
组成的工程项目的自动向 HTML 转换。你也可以设置 Org，将导出
的 HTML 页面和相应的附件如图片，源代码文件等自动上传到服务
器。

下面是一个例子：

(setq org-publish-project-alist
     '(("org"
        :base-directory "~/org/"
        :publishing-directory "~/public_html"
        :section-numbers nil
        :table-of-contents nil
        :style "<link rel=\"stylesheet\"
               href=\"../other/mystyle.css\"
               type=\"text/css\"/>")))

发布相关的命令：

+------------------------------------------------+
|   命令    |                说明                |
|-----------+------------------------------------|
| C-c C-e C | 提示指明一个项目，将所有的文件发布 |
|-----------+------------------------------------|
| C-c C-e P | 发布包含当前文件的项目             |
|-----------+------------------------------------|
| C-c C-e F | 只发布当前文件                     |
|-----------+------------------------------------|
| C-c C-e E | 发布所有项目                       |
+------------------------------------------------+

Org 用时间戳来查看文件是否改变。上面的命令只发布修改过的文
件。你可以给它们加上前缀来强制重新发布所有的文件。





使用org-mode来GTD（1）— 入门
GTD，org-mode概要

GTD（Getting Things Done）是美国的商业顾问David Allen提倡的一种提高生产效率的时间管理系统。利用GTD可以缓解压力，专心地工作，学习。详细可以参考他的两部书《尽管去做：无压工作的艺术》，《结果第一：平衡工作和生活的52条原则》。

Org-Mode是为Emacs编写的个人信息管理以及编写大纲的工具。因为Emacs强大的特性，用其来实践GTD系统是再方便不过的了。这里我将介绍一些org-mode的特性。需要深入了解的可以看这里。
操作方法

收集

    调用 remember-mode (C-c r)
    选择 Todo（GTD）或者是 notes
        选择情境标签（OFFICE, HOME, READING, DVD, etc...）
        选择Todo的状态（TODO, STARTED, WAITING, etc...）
        设置任务结束时间（C-c C-d）
        设置任务的开始时间（C-c C-s）

每天的操作

    首先确认当天的任务
        确认当天所有的任务 (C-c a d)
        利用情境确认当天的预定任务 (C-c a h)
        在时间轴上确认任务 (C-c a L)
    任务由 TODO 状态转换为 DONE 状态 (C-c C-t 或者 shift+左右)
    如果有新的预定使用 remember-mode (F8) 来添加任务

周回顾

    打开 org 文件 （C-c g）
    检查 INBOX 中积攒的任务
    选择合适的项目分类 （C-c C-w）
    设置任务的结束时间 （C-c C-d）
    设置任务的开始时间（C-c C-s）

org-mode 的设置

org-mode的设置可以在 .emacs 中设置，也可以在 org 文件中设置。

先看看 org-mode 所需要的文件。

1
            2
            3
            4
            5
            6

	

~/.emacs
            ~/elisp/org-mode.el
            ~/org/gtd.org
            ~/org/notes.grg
            ~/org/someday.org
            ~/org/birthday.org

首先是在 ~/.emacs 文件中加载 org-mode.el。其中文件位于 ~/elisp/org-mode.el。

1
            2
            3
            4
            5
            6
            7
            8
            9
            10
            11
            12
            13
            14
            15
            16
            17
            18
            19
            20
            21
            22
            23
            24
            25
            26
            27
            28
            29
            30
            31
            32
            33
            34
            35
            36
            37
            38
            39
            40
            41
            42
            43
            44
            45
            46
            47
            48
            49
            50
            51
            52
            53
            54
            55
            56
            57
            58
            59
            60
            61
            62
            63
            64
            65
            66
            67
            68
            69
            70
            71
            72
            73
            74
            75
            76
            77
            78
            79
            80
            81
            82
            83
            84
            85
            86
            87
            88
            89
            90
            91
            92
            93
            94
            95
            96
            97
            98
            99
            100
            101
            102
            103
            104
            105
            106

	

(load "org-mode")
            (custom-set-variables
            ;; custom-set-variables was added by Custom.
              ;; If you edit it by hand, you could mess it up, so be careful.
              ;; Your init file should contain only one such instance.
              ;; If there is more than one, they won't work right.
             '(auto-raise-tool-bar-buttons t t)
            '(auto-resize-tool-bars t t)
            '(calendar-week-start-day 1)
            '(case-fold-search t)
            '(org-agenda-files (quote ("~/org/birthday.org" "~/org/gtd.org")))
            '(org-agenda-ndays 7)
            '(org-agenda-repeating-timestamp-show-all nil)
            '(org-agenda-restore-windows-after-quit t)
            '(org-agenda-show-all-dates t)
            '(org-agenda-skip-deadline-if-done t)
            '(org-agenda-skip-scheduled-if-done t)
            '(org-agenda-sorting-strategy (quote ((agenda time-up priority-down tag-up) (todo tag-up))))
            '(org-agenda-start-on-weekday nil)
            ;;  '(org-agenda-todo-ignore-deadlines t)
            ;;  '(org-agenda-todo-ignore-scheduled t)
            ;;  '(org-agenda-todo-ignore-with-date t)
             '(org-agenda-window-setup (quote other-window))
            '(org-deadline-warning-days 7)
            '(org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\">")
            '(org-fast-tag-selection-single-key nil)
            '(org-log-done (quote (done)))
            '(org-refile-targets (quote (("gtd.org" :maxlevel . 1) ("someday.org" :level . 1))))
            '(org-reverse-note-order nil)
            '(org-tags-column -78)
            '(org-tags-match-list-sublevels nil)
            '(org-time-stamp-rounding-minutes 5)
            '(org-use-fast-todo-selection t)
            '(org-use-tag-inheritance nil)
            '(unify-8859-on-encoding-mode t nil (ucs-tables)))
            ;; These lines only if org-mode is not part of the X/Emacs distribution.
            (autoload 'org-mode "org" "Org mode" t)
            (autoload 'org-diary "org" "Diary entries from Org mode")
            (autoload 'org-agenda "org" "Multi-file agenda from Org mode" t)
            (autoload 'org-store-link "org" "Store a link to the current location" t)
            (autoload 'orgtbl-mode "org" "Org tables as a minor mode" t)
            (autoload 'turn-on-orgtbl "org" "Org tables as a minor mode")
            (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
            (define-key global-map "\C-cl" 'org-store-link)
            (define-key global-map "\C-ca" 'org-agenda)
            ;(setq org-log-done nil)
            (setq org-log-done t)
            (setq org-agenda-include-diary nil)
            (setq org-deadline-warning-days 7)
            (setq org-timeline-show-empty-dates t)
            (setq org-insert-mode-line-in-empty-file t)
            (require 'org-install)
            (autoload 'remember "remember" nil t)
            (autoload 'remember-region "remember" nil t)
            (setq org-directory "~/org/")
            (setq org-default-notes-file "~/org/notes.org")
            (setq remember-annotation-functions '(org-remember-annotation))
            (setq remember-handler-functions '(org-remember-handler))
            (add-hook 'remember-mode-hook 'org-remember-apply-template)
            (define-key global-map "\C-cr" 'org-remember)
            (setq org-remember-templates
            '(
            ("Todo" ?t "* TODO %^{任务} %^g\n%?\nAdded: %U" "~/org/gtd.org" "INBOX")
            ("Note" ?n "\n* %U %^{笔记} %^g \n%i%?\n %a" "~/org/notes.org")
            ))
            (setq org-agenda-exporter-settings
            '((ps-number-of-columns 1)
            (ps-landscape-mode t)
            (htmlize-output-type 'css)))
            (setq org-agenda-custom-commands
            '(
            ("p" "Projects"
            ((tags "PROJECT")))
            ("h" "Office and Home Lists"
            ((agenda)
            (tags-todo "OFFICE")
            (tags-todo "HOME")
            (tags-todo "WEB")
            (tags-todo "CALL")
            ))
            ("d" "Daily Action List"
            (
            (agenda "" ((org-agenda-ndays 1)
                    (org-agenda-sorting-strategy
                     (quote ((agenda time-up priority-down tag-up) )))
                    (org-deadline-warning-days 0)
                    ))))))
            (setq org-todo-keywords '((sequence "TODO" "APPT" "STARTED" "DONE")))
            (defun gtd ()
            (interactive)
            (find-file "~/org/gtd.org"))
            (global-set-key (kbd "C-c g") 'gtd)
            (add-hook 'org-agenda-mode-hook 'hl-line-mode)

org 文件的设置 ::

~/org/gtd.rog


1
            2
            3
            4
            5
            6
            7
            8
            9
            10
            11
            12
            13
            14
            15
            16
            17
            18
            19
            20
            21
            22
            23
            24
            25

	

#+STARTUP: showall
            * INBOX
            #+CATEGORY: INBOX
            * Research
            #+CATEGORY: Research
            * Project A
            #+CATEGORY: Project A
            * Private
            #+CATEGORY: Private
            * Archive
            #+CATEGORY: Archive
            * org-mode configuration
            #+STARTUP: hidestars
            #+STARTUP: logdone
            #+PROPERTY: Effort_ALL  0:10 0:20 0:30 1:00 2:00 4:00 6:00 8:00
            #+COLUMNS: %38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}
            #+PROPERTY: Effort_ALL 0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 8:00
            #+TAGS: { OFFICE(o) HOME(h) WEB(w) DOWNTOWN(d) CALL(c) }
            #+TAGS: PROJECT(p) READING(r)
            #+TODO: TODO(t) STARTED(s) WAITING(w) APPT(a) | DONE(d) CANCELLED(c) DEFERRED(f)

~/org/notes.org


1
            2
            3
            4
            5
            6

	

#+STARTUP: showall
            #+STARTUP: hidestars
            #+TAGS: OFFICE(o) RESEARCH(r) DIARY(d) BOOK(b) FILMS(f) IDEA(i) WEB(w) COMPUTER(c)
            * 笔记
            ** [2010-02-02 星期二 18:53] 今天写博 使用org-mode来GTD（1）                    :OFFICE:

~/org/someday.org

也许某天会做的事。

1
            2
            3
            4

	

#+STARTUP: showall
            * Someday
            ** 计算机升级。
            ** 去马尔代夫旅游。

~/org/birthday.org

这里记录预先决定的日常安排。比如生日节假日。
与其他设备无缝连接

使用Emacs的tramp1可以无缝地访问远程的设备。同样也可以连接 org-mode 的文件。下面是在HOST机器上设置 org-mode 与tramp关联的方法。

比如下面设置的地方

1

	

"~/org/foo.org"

替换为

1

	

"/domain-name/org/foo.org"

如果是 Windows 的 NTEmacs 为:

1

	

"/plink:domain-name/org/foo.org"

1. TRAMP 代表”Transparent Remote (file) Access, Multiple Protocol”，他是 Emacs 的一个用于远程文件编辑的扩展包。用来访问scp/ssh/smb服务器上的文件，可以做到像读写本地文件一样编辑远程的文件。
** TODO 待办事项（TODO ）
** TODO [#A] Write letter to Sam Fortune 优先级A,b,c,a最高
tag
时间输入 范围 2pm+2
 (setq org-log-done 'time)
#+beg org-mode可以利用Emacs的时间空间插入当前时间。
  输入C-c . 会出现一个日历，我们点选相应的时间即可插入
  时间前可以加DEADLINE:和SCHEDULED:表示时间的类型如：
#+end 富文本
** 记笔记
      + 2.4 创建链接
      + 2.5 内部链接
      + 2.6 显示图片
  * 3 轻量级标记语言
      + 3.1 字体
      + 3.2 表格
          o 3.2.1 创建和转换表格
          o 3.2.2 调整和区域移动
          o 3.2.3 编辑行和列
      + 3.3 段落
      + 3.4 列表
          o 3.4.1 列表操作快捷键
      + 3.5 分隔线
  * 4 标签
      + 4.1 tag的作用
      + 4.2 标记tag
      + 4.3 预定义tag
      + 4.4 按tag搜索
  * 5 导出和发布
      + 5.1 准备工作
          o 5.1.1 文档元数据
          o 5.1.2 内容元数据
          o 5.1.3 嵌入Html
          o 5.1.4 包含文件
          o 5.1.5 嵌入 LaTex
      + 5.2 导出
      + 5.3 发布

** 标题
*** 文章标题 #+TITLE: xx
*** 正文标题 *
** 字体
   *粗体*
   /斜体/
   +删除线+
   _下划线_
   下标: H_2 O H 2 O 
   上标: E=mc^2
   等宽字:=git=
   # 注释 
   :抽屉:
** 列表
*** 无序    -|+|*
*** 有序    1.|1
*** 描述    ::
** 内容元数据
s    #+begin_src ... #+end_src 
e    #+begin_example ... #+end_example  : 单行的例子以冒号开头
q    #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进
v    #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行
c    #+begin_center ... #+end_center 
l    #+begin_latex ... #+end_latex 
L    #+latex: 
h    #+begin_html ... #+end_html 
H    #+html: 
a    #+begin_ascii ... #+end_ascii 
A    #+ascii: 
i    #+index: line 
I    #+include: line
上面的单字母为快捷键字母，如输入一个<s 然后TAB后就变为
注释 
** 以‘#‘开头的行被看作注释，不会被导出区块注释采用如下写法：
#+BEGIN_COMMENT
  块注释
  ...
#+END_COMMENT
** 表格与图片 
对于表格和图片，可以在前面增加标题和标签的说明，以方便交叉引用。比如在表格的前面添加：
#+CAPTION: This is the caption for the next table (or link)
则在需要的地方可以通过\ref{table1}来引用该表格。 
[[image.gpg]]

** 代码格式化
#符合emacs 模式时
#+BEGIN_SRC emacs-lisp -n -r
     (defun org-xor (a b)          (ref:df)
        "Exclusive or."             
        (if a (not b) b))
#+END_SRC

** 格式导出与发布 
1.C-c C-e a 导出为文本文件。
2.C-c C-e h 导出为 HTML 文件 

* linux 系统调用


1、进入HTML模式
前面讲了一些和主旨无关的话，主要目的是让你意识到学习HTML或其他标记语言的必要性。但本文不是教你如何学习HTML语言，而是讲述如何在 Emacs中利用各种HTML模式来写HTML文档，所以这里假定你已经基本掌握了HTML标记语言的使用。
让Emacs进入HTML模式很简单，直接打开一个HTML文件即可，也可以使用 M-x html-mode指令。进入 HTML模时候，Emacs的菜单栏中会出现"HTML"和"SGML"菜单，仔细观摩一下。
Emacs提供了一个简单的HTML模板来缓解一些懒人因不愿过多输入代码的抱怨情绪，C-c C-t html，然后需要输入title内容回车，即可调入该模板。C-c C-v可以调出浏览器看看当前HTML代码的显示效果。M-x html-autoview-mode，可以实现在Emacs保存HTML文档之时打开浏览器查看文档显示效果。


Emacs HTML模式提供了标签之间的光标快速移动的键盘绑定：


    C-c C-f，光标移到其当前所在位置的下一个HTML标签位置
    C-c C-b，光标移到其当前所在位置的前一个HTML标签位置 


3、隐藏/显示HTML标记
当你觉得正在编写的HTML文档中无处不在的HTML标记破坏了文档的美感，可以试试C-c Tab，暂时将HTML标记隐藏起来，只显示你的文本内容。在HTML隐藏状态下继续编辑文档，Emacs会保护其隐藏的所有标记，所以你没有必要担心会不小心把它们给删掉了，而且当你的光标移动到一个被隐藏的标记位置上时，Emacs会在Mini-buffer中显示该标记名。
在HTML标记隐藏状态下，再次C-c Tab，即可将所有被隐藏的HTML标记重新显示出来。
4、HTML模式其它一些常用的键绑定
C-c 1～6，可以自动插入h1～h6的标题。譬如键入C-c 1，就会在当前位置自动插入h1标题。
C-c Enter，可以实现在光标位置插入段落标记。这个键绑定，我不是很喜欢。因为我习惯使用 … 风格的段落标记。但是可以先使用这个键绑定作出段落标记的前一半，然后使用C-c /将其封闭。对于其它未提供闭合功能的键绑定，都可以使用这种方法。
C-c C-c h，可以实现在光标位置插入超级连接标记。C-c C-c n可以实现在光标当前位置处插入一个anchor(锚标)，以备在文档其他位置建立跳转到该位置的超级链接。这两个键盘绑定，需要在Mini-buffer中输入超级连接地址或锚标名称。动手一试便知了。
C-c C-c u，在光标位置处插入无序列表标记。C-c C-c o，在光标当前位置插入有序列表标记。C-c C-c l，在当前位置插入一个列表项。与C-c C-c p一样，所插入的标记依然是不封闭的。
C-c C-c i，在光标位置插入图像引入标记，即，需要在Mini-buffer中指定图片的 URL。
C-c C-j，在光标位置处插入换行符
。C-c C-c -，在光标位置处插入水平线标记，即。
如果想看看某个标记的解释，可以将光标移到该标记上，C-c ?，在Mini-buffer中显示解释。
想知道更多一些的键绑定功能，可以C-c C-h，看看说明。
5、HTML模式中的特殊字符输入
在HTML中，已经被用作HTML标记的字符，如果要在HTML文本中将它们显示出来，直接键入是不行的。譬如我要在HTML页面中显示，浏览器会将它视为段落标记来处理。为了解决这个问题，我们可以C-c C-n ，再键入字母p，最后再C-c C-n >来实现。通过这个小例子，应该知道C-c C-n的功用了吧。对于其它字符，只要键盘上有的，但 HTML语言已经征用了的，都可以使用这个键绑定来输入。
对于键盘上没有的字符，譬如拉丁文－1中的字符，该如何输入呢？Emacs HTML模式提供了许多语言模式。使用键绑定C-c 8可以打开SGML name entity小模式，这个键绑定是以开关方式执行的，即再次键入C-c 8即可关闭这个该模式。打开 SGML name entity小模式后，键入C-x RET k，选择语言模式，我们要使用拉丁文－1，那么就可以键入 latin-1，回车即可进入拉丁文－1字符插入模式。在向HTML文档中插入拉丁文-1字符时，使用键绑定C-x 8为前缀。譬如，我要在文档中插入"&yen;"，只需要键入C-x 8 Y即可。此时，在HTML源文件中，会将&yen;显示为其字符实体，即"& yen"，而在Mini-buffer中会同时显示所插入的实际符号"&yen;"，此时只需执行一次Undo(C-x u或C-_)，就可以将Mini-buffer中的实际符号送入到源文件中了。
可以在HTML定义的标准字符表中查找你所需要的字符实体，这个字符表可以在网上搜一搜了。

* Linux 内核
** 进程管理(process management)
** timer(定时器)
** interrupt management
** memory management
** module management
** VFS layer
** file system
** device driver
** inter-process communication
** network management
** system init
* arch linux
** install
*** pre-installation
     need 800MB of diskspace ;network;
**** 1.1 verify the boot mode
  if exist the efivars directory,then UEFI motherboard boot
  ls /sys/firmware/efi/efivars
else the system is booted in BIOS(or CSM) mode
**** 1.2 set the keyboard layout
 default console keymap is US.
all: ls /usr/share/kbd/keymaps/**/*.map.gz
layout changed: loadkeys de-latin1
console fonts: /usr/share/kbd/consolefonts/
set font: setfont
**** 1.3 connect the Internet
default wired devices: dhcpcd
different network: systemd-networkd and netctl;first stop dhcpcd@interface.service
无线 wifi-menu
**** 1.4 update the system clock
timedatectl set-ntp true
check the service status: timedatectl status
timedatectl set-timezone Asia/Shanghai
**** 1.5 partition the disks
fdisk or parted for both MBR and GPT, or
gdisk for GPT only
display partitions: lsblk or fdisk -l
/(root) directory must be available
如果要LVM,disk encryption or RAID,现在就做
**** 1.6 format the partions
mkfs,mkswap
**** 1.7 Mount the file system
mount /dev/sda1 /mnt
mount /dev/XX /mnt/boot 100MB 够了
mount /dev/xxx /mnt/home
swapon /dev/xxx
*** Installation
**** 2.1 Select the mirrors
packages to be installed from the mirror servers,need downloaded.
defined in /etc/pacman.d/mirrorlist 
**** 2.2 Install the base packages
base package group: pacstrap /mnt base base-devel
ohter packages: append their names to pacstrap or pacman
*** Configure the system
**** 3.1 Fstab (-U or -L to define by UUID or labels)
     genfstab -U /mnt >> /mnt/etc/fstab
     check the resulting file in /mnt/etc/fstab
**** 3.2 Chroot
     arch-chroot /mnt
**** Time zone
list-timezones
set: ln -s /usr/share/zoneinfo/zone/subzone /etc/localtime
generate /etc/adjtime: hwclock --systohc --utc
**** Locale
uncomment en_US.UTF-8 UTF-8 and other needed localizations in
/etc/locale.gen,and generate them with:
# locale-gen
set the LANG variable 
# echo LANG=en_US.UTF-8 > /etc/locale.conf
if required,set the console keymap and font in vconsole.conf
**** Hostname
create:
# echo myhostname >/etc/hostname
add: /etc/hosts
127.0.1.1 myhostname.localdomain myhostname
**** Network configuration
For wireless configuration, install the iw,wpa_supplicant,and dialog packages, and firmware packages.
systemctl enable dhcpcd@enp2s0.service
**** Initramfs RAM磁盘
create a new initial RAM disk with:
# mkinitcpio -p linux
**** Root password
# passwd
**** Boot loader
pacman -S grub
grub-install /dev/sda
grub-mkconfig -o /boot/grub/grub.cfg
**** 用户
useradd -m -g users -G wheel -s /bin/bash ikke
passwd ikke

安装 sudo
pacman -S sudo
打开 /etc/sudoers 文件，找到 root ALL=(ALL) ALL 并依葫芦画瓢添加 ikke ALL=(ALL) ALL 即可。

*** Reboot
# exit 
# umount -R /mnt
# reboot
*** Post-installation


     
