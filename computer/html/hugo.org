#+TITLE: hugo简介

博客框架，比较快。

#more

** 安装
** 命令使用  
   - 创建网站 hugo new site SITENAME
   - 写关于页面 hugo new about.md
   - 写文章 hugo new post/POSTNAME.md 
   - 创建主题 hugo new theme THEMENAME
   - 添加主题 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/THEMENAME
   - 使用主题 echo 'theme = "ananke"' >> config.toml
   - 启动站点 hugo server -D
   - 使用模板 hugo server --theme=hyde
** 内容 (content)
   hugo content 目录中的内容一般会映射到 URL 地址结构。
   
   当然，url 也可以是其他的组织形式，比如 slug，type，sections，path 或自己定义 url
*** sections 
    
** 模板
    大部分的网站只需要创建 */layouts/_default/single.html* 和 */layouts/_default/list.html*
*** 主要模板 
**** single 
     用户可以在前端 (front-matter)指定类型(type)和布局 (layout)，section 是根据 content 文件的位置决定，type 优先于 section.
     
     - /layouts/TYPE-or-SECTION/LAYOUT.html
     - /layouts/TYPE-or-SECTION/single.html
     - /layouts/_default/single.html
     - /themes/THEME/layouts/TYPE-or-SECTION/LAYOUT.html
     - /themes/THEME/layouts/TYPE-or-SECTION/single.html
     - /themes/THEME/layouts/_default/single.html

       结构
       #+begin_quote
       ▾ layouts/
       ▾ _default/
       single.html
       ▾ post/
       single.html
       ▾ project/
       single.html
       #+end_quote
       
     #+begin_src html
       {{ partial "header.html" . }}
       {{ partial "subheader.html" . }}
       {{ $baseurl := .Site.BaseURL }}

       <section id="main">
         <h1 id="title">{{ .Title }}</h1>
         <div>
           <article id="content">
             {{ .Content }}
           </article>
         </div>
       </section>

       <aside id="meta">
         <div>
           <section>
             <h4 id="date"> {{ .Date.Format "Mon Jan 2, 2006" }} </h4>
             <h5 id="wc"> {{ .FuzzyWordCount }} Words </h5>
           </section>
           <ul id="categories">
             {{ range .Params.topics }}
             <li><a href="{{ $baseurl }}/topics/{{ . | urlize }}">{{ . }}</a> </li>
             {{ end }}
           </ul>
           <ul id="tags">
             {{ range .Params.tags }}
             <li> <a href="{{ $baseurl }}/tags/{{ . | urlize }}">{{ . }}</a> </li>
             {{ end }}
           </ul>
         </div>
         <div>
           {{ if .Prev }}
           <a class="previous" href="{{.Prev.Permalink}}"> {{.Prev.Title}}</a>
           {{ end }}
           {{ if .Next }}
           <a class="next" href="{{.Next.Permalink}}"> {{.Next.Title}}</a>
           {{ end }}
         </div>
       </aside>

       {{ partial "disqus.html" . }}
       {{ partial "footer.html" . }}
#+end_src
**** list  
     列表页显示多个内容，! 主页有单独的模板  
***** section lists 
      - /layouts/section/SECTION.html
      - /layouts/_default/section.html
      - /layouts/_default/list.html
      - /themes/THEME/layouts/section/SECTION.html
      - /themes/THEME/layouts/_default/section.html
      - /themes/THEME/layouts/_default/list.html
***** Taxonomy Lists
      - /layouts/taxonomy/SINGULAR.html (e.g. /layouts/taxonomy/topic.html)
      - /layouts/_default/taxonomy.html
      - /layouts/_default/list.html
      - /themes/THEME/layouts/taxonomy/SINGULAR.html
      - /themes/THEME/layouts/_default/taxonomy.html
      - /themes/THEME/layouts/_default/list.html
***** Taxonomy RSS
      - /layouts/taxonomy/SINGULAR.rss.xml
      - /layouts/_default/rss.xml
      - /themes/THEME/layouts/taxonomy/SINGULAR.rss.xml
      - /themes/THEME/layouts/_default/rss.xml
***** section 示例(post.html)
      #+begin_src html
        {{ partial "header.html" . }}
        {{ partial "subheader.html" . }}

        <section id="main">
          <div>
            <h1 id="title">{{ .Title }}</h1>
            <ul id="list">
              {{ range .Data.Pages }}
              {{ .Render "li"}}
              {{ end }}
            </ul>
          </div>
        </section>

        {{ partial "footer.html" . }}
      #+end_src
***** taxonomy (tag.html)
      #+begin_src html
        {{ partial "header.html" . }}
        {{ partial "subheader.html" . }}

        <section id="main">
          <div>
            <h1 id="title">{{ .Title }}</h1>
            {{ range .Data.Pages }}
            {{ .Render "summary"}}
            {{ end }}
          </div>
        </section>

        {{ partial "footer.html" . }}
      #+end_src
**** 列表模板 list template
     hugo 中一个页面的显示需要使用多个模板。
  
***** section lists (段模板)
      /layouts/section/1,2,3.html
***** taxonomy lists (分类模板)
      /layouts/taxonomy /1,2,3.html
***** 模板例子 (tag.html)
      #+begin_src html
        {{ partial "header.html" . }}
        {{ partial "subheader.html" . }}

        <section id="main">
          <div>
            <h1 id="title">{{ .Title }}</h1>
            {{ range .Data.Pages }}
            {{ .Render "summary"}}
            {{ end }}
          </div>
        </section>

        {{ partial "footer.html" . }}
      #+end_src
***** 内容排序
      hugo 中，content 要按照 *front matter* 的信息进行排序
    
      按照日期排序 
      #+begin_src html
        {{ range .Data.Pages }}
        <li>
          <a href="{{ .Permalink }}">{{ .Title }}</a>
          <div class="meta">{{ .Date.Format "Mon, Jan 2, 2006" }}</div>
        </li>
        {{ end }}
      #+end_src
   
      - 按 weight 排序  range .Data.Pages.ByWeight
      - 按日期 range .Data.Pages.ByDate
      - 发布日期 range .Data.Pages.ByPublishDate
      - 长度 range .Data.Pages.ByLength
      - 标题 range .Data.Pages.ByTitle
      - 逆序 range .Data.Pages.ByDate.Reverse
***** 分组
***** 过滤和限制内容
******  first
       #+begin_src html
         {{ range first 10 .Data.Pages }}
         {{ .Render "summary" }}
         {{ end }}
       #+end_src
****** where
       #+begin_src html
         {{ range where .Data.Pages "Section" "post" }}
         {{ .Content }}
         {{ end }}
       #+end_src
****** 联合起来
       #+begin_src html
         {{ range first 5 (where .Data.Pages "Section" "post") }}
         {{ .Content }}
         {{ end }}
       #+end_src
**** homepage 
     主页路径  */themes/THEME/layouts/index.html*

     #+begin_src html
       <!DOCTYPE html>
       <html class="no-js" lang="en-US" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#">
         <head>
           <meta charset="utf-8">

           {{ partial "header.html" . }}

           <base href="{{ .Site.BaseURL }}">
           <title>{{ .Site.Title }}</title>
           <link rel="canonical" href="{{ .Permalink }}">

         </head>
         <body lang="en">
           王八单
           <section id="main">
             <div>
               {{ range first 10 .Data.Pages }}
               {{ .Render "summary"}}
               {{ end }}
             </div>
           </section>

           {{ partial "footer.html" . }}
     #+end_src
*** 支持模板 
**** partial templates
**** content view 
**** texonomy terms (分类术语)
     如果我们在 Front Matter 中添加以下代码

     type: review
     layout: reviewarticle
     该文章现在的寻找模板顺序为：

     #+begin_src 
     /layouts/review/reviewarticle.html
     /layouts/posts/reviewarticle.html
     /layouts/review/single.html
     /layouts/posts/single.html
     /layouts/_default/single.html
     /themes/<THEME>/layouts/review/reviewarticle.html
     /themes/<THEME>/layouts/posts/reviewarticle.html
     /themes/<THEME>/layouts/review/single.html
     /themes/<THEME>/layouts/posts/single.html
     /themes/<THEME>/layouts/_default/single.html
     #+end_src
     值得注意的是，/layouts/ 目录下模板优先级总是高于 /themes/<THEME>/layouts/ 。同理，若根目录下存在与 /themes/ 文件夹下同名的文件夹，根目录下的文件优先级总是高于 /themes/ 文件夹。

     因此，在我们只是需要别人提供的主题做一些小修改时，尤其是对于一些静态资源需要进行覆盖时，将新的文件置于根目录的文件夹下而不是直接对主题进行修改，日后需要更新主题时就无需解决 git 冲突的问题了。

     当然，如果是需要直接对 /layouts/ 目录下的模板进行修改，还是建议新建一个 git 分支进行更改。

** URL 管理
   正如前文所言，hugo 会将 content/目录下的结构反映到生成的静态网站中，但 config.toml 中的 permalinks 参数允许你自由更改内容的 URL。例如：你想从 hexo 迁移到 hugo，你可以将 permalinks 定义为下面这种形式以适应之前的 URL。

   #+begin_src 
 [permalinks]
   post = "/:year/:month/:title/"
   #+end_src
   上面的配置将改变 content/post/文件夹下所有文章的 URL。

   举个栗子，content/post/sample-entry.md 的 URL 将从默认的https://example.com/post/sample-entry/改变为https://example.com/2013/11/sample-entry/。

   所有可用的属性如下：
   #+begin_src 
 /:monthname/:day/:weekday/:weekdayname/:yearday/:section/:title/:slug/:filename/
   #+end_src
 
** 内容摘要
 Hugo 会自动提取文章的前 70 个字符作为摘要。（注意：该功能在中文环境下需要在
 config.toml 中添加 hasCJKLanguage = true 才能发挥更好的效果。）

 当然你也可以在文章内使用<!--more-->针对文章手动进行摘要提取，在<!--more-->之前
 出现的内容都会作为摘要使用，且能够保持渲染后的结构而不是纯文字版本。

** Shortcodes
 Shortcodes 帮助你在编写 markdown 时快捷的插入 HTML 代码，功能上类似于 Hexo 的标签插件。

  #+begin_src 
  {{< ref "blog/post.md" >}} => https://example.com/blog/post/
 {{< ref "post.md#tldr" >}} => https://example.com/blog/post/#tldr:caffebad
 {{< relref "post.md" >}} => /blog/post/
 {{< relref "blog/post.md#tldr" >}} => /blog/post/#tldr:caffebad
 {{< ref "#tldr" >}} => #tldr:badcaffe
 {{< relref "#tldr" >}} => #tldr:badcaffe
  #+end_src
 上述代码通过内置的 rel 与 relref 帮助你快速引用站点内的其他文章。

 注意: 如果你的 content/ 目录下有多个同名的文件，引用该文章必须使用 blog/post.md 这样的相对路径而不是只提供 post.md 这样的文件名。

 hugo 还内置了 instagram、tweet、youtube 等 Shortcodes，可以阅读官方文档了解更多信息，你使用的主题可能也会提供 Shortcodes，当然你也可以定制你自己的 Shortcodes。

** 分类系统
 默认情况下即 tags 与 categories，通常来说这已经足够我们使用了，但你也可以在 config.toml 文件中添加下面的代码来添加更多的分类。
 #+begin_src 
 [taxonomies]
   tag = "tags"
   category = "categories"
   series = "series"
 #+end_src
* 特效
** 文字逐字显示
   #+begin_src html 
     <div class="textexbox" data-textex="anime">
       内容
     </div>
     <link rel="stylesheet" href="/css/TextEx.css">
     <script src="/js/TextEx.js"></script>
   #+end_src
* shortcode
  https://blog.olowolo.com/example-site/post/shortcodes/
** Admonition
   #+begin_src 
{{% admonition note "I'm title!" false %}}
biu biu biu.

{{% admonition type="note" title="note" details="true" %}}
biu biu biu.
{{% /admonition %}}

{{% admonition example %}}
Without title.
{{% /admonition %}}

{{% /admonition %}}
   #+end_src

   
   #+begin_src 
   {{% admonition abstract abstract %}}
{{% /admonition %}}
   #+end_src

   info tip success question warning failure danger bug example quote
   
*** 图片
    center, right, left
    #+begin_src 
 ## default
 ![img](/path/to/img.gif "img")

 {{% center %}}
 ## center
 ![img](/path/to/img.gif "img")
 {{% /center %}}

 {{% right %}}
 ## right
 ![img](/path/to/img.gif "img")
 {{% /right %}}

 {{% left %}}
 ## left
 ![img](/path/to/img.gif "img")
 {{% /left %}}
    #+end_src
** 网易音乐
   #+begin_src 
{{% music id="28196554" auto="1" %}}
   #+end_src
* 包含库
---
title: Some catchy title
js: https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.2/photoswipe.js
css: https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.2/photoswipe.css
---
模板部分
如果您想将脚本作为数组提供给您，那么您也可以支持多个 include。您只需遍历并为下方的每个条目添加脚本标签 js。同样的过程适用于 CSS。

CSS 部分
{{ if .Params.css }}
<link rel="stylesheet" href="{{ .Params.css }}">
{{ end }}
JS 部分
{{ if .Params.js }}
<script src="{{ .Params.js }}"></script>
{{ end }}
* video
  <video id="video" controls="" preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png">
      <source id="mp4" src="/VID_20200324_114551.mp4" type="video/mp4">
      <p>Your user agent does not support the HTML5 Video element.</p>
    </video>
