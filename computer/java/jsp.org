* 开发环境搭建
** 服务器：Tomcat
    export JAVA_HOME=/usr/lib/jvm/jdk-11.0.1
    export JRE_HOME=${JAVA_HOME}

    CATALINA=/usr/local/apache-tomcat-5.5.29
    CLASSPATH $CATALINA/common/lib/jsp-api.jar:$CLASSPATH
    
    $CATALINA_HOME/bin/startup.sh
    访问 http://localhost:8080/
    
    停止 $CATALINA_HOME/bin/shutdown.sh
* servlet  ( 服务器类 )
** 编写你的第一个 Servlet
   我们的第一个 Servlet 是一个只拥有少量代码的简单 Servlet，目的是让你只需关注它的行为。
#+BEGIN_SRC java
  package com.howtodoinjava.servlets;

  import java.io.IOException;
  import java.io.PrintWriter;

  import javax.servlet.ServletException;
  import javax.servlet.http.HttpServlet;
  import javax.servlet.http.HttpServletRequest;
  import javax.servlet.http.HttpServletResponse;

  public class MyFirstServlet extends HttpServlet {

      private static final long serialVersionUID = -1915463532411657451L;

      @Override
      protected void doGet(HttpServletRequest request,
              HttpServletResponse response) throws ServletException, IOException 
      {
          response.setContentType("text/html;charset=UTF-8");
          PrintWriter out = response.getWriter();
          try {
              // Write some content
              out.println("<html>");
              out.println("<head>");
              out.println("<title>MyFirstServlet</title>");
              out.println("</head>");
              out.println("<body>");
              out.println("<h2>Servlet MyFirstServlet at " + request.getContextPath() + "</h2>");
              out.println("</body>");
              out.println("</html>");
          } finally {
              out.close();
          }
      }

      @Override
      protected void doPost(HttpServletRequest request,
              HttpServletResponse response) throws ServletException, IOException {
          //Do some other work
      }

      @Override
      public String getServletInfo() {
          return "MyFirstServlet";
      }
  }
#+END_SRC
为了在 web 容器里注册上面的 Servlet，你要为你的应用建一个 web.xml 入口文件。
#+BEGIN_SRC xml
<?xml version="1.0"?>
<web-app     xmlns="http://xmlns.jcp.org/xml/ns/javaee"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
 
http://xmlns.jcp.org/xml/ns/javaee/web-app_3_0.xsd"
 
            version="3.0">
 
    <welcome-file-list>
        <welcome-file>/MyFirstServlet</welcome-file>
    </welcome-file-list>
 
    <servlet>
        <servlet-name>MyFirstServlet</servlet-name>
        <servlet-class>com.howtodoinjava.servlets.MyFirstServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>MyFirstServlet</servlet-name>
        <url-pattern>/MyFirstServlet</url-pattern>
    </servlet-mapping>
 
</web-app>
#+END_SRC

上面的 Servlet 做了一些重要的事情，你可能想了解的。
MyFirstServlet 类继承了 HttpServlet。这个继承是必须的，因为所有的 Servlet 必须是要么继承了 javax.servlet.GenericServlet 的普通 Servlet，要么是继承了 javax.servlet.http.HttpServlet 的 HTTP Servlet。
重新 doGet() 和 doPost() 方法。这两个方法都已在 HttpServlet 类里定义了。当一个 GET 或 POST 请求到来时，它就会被映射到相应的方法里。例如，如果你向这个 servlet 发送一个 HTTP GET 请求，doGet()方法就会被调用。
这里也有一些其他有用的方法。你可以重写它们来在运行时控制应用。例如 getServletInfo()。
HttpServletRequest 和 HttpServletResponse 是所有 doXXX()方法的默认参数。我们会在后面的章节里详细学习这些对象。
以上所有关于简单 Servlet 的内容就是你需要知道的内容。
** Servlet 生命周期方法
   init() , service() 和 destroy()。
1) 在 Servlet 生命周期的初始化阶段，web 容器通过调用 init()方法来初始化 Servlet 实例，
并且可以传递一个实现 javax.servlet.ServletConfig 接口的对象给它。这个配置对象
（configuration object）使 Servlet 能够读取在 web 应用的 web.xml 文件里定义的名值
（name-value）初始参数。这个方法在 Servlet 实例的生命周期里只调用一次。

init 方法定义与这类似：
#+BEGIN_SRC java
public void  init() throws ServletException {
    //custom initialization code
}
#+END_SRC

通常，我们不需要重写（override）这个方法。
#+BEGIN_SRC java
protected void service(HttpServletRequest req, HttpServletResponse resp)
    throws ServletException, IOException
{
String method = req.getMethod();
 
if (method.equals(METHOD_GET)) {
    long lastModified = getLastModified(req);
    if (lastModified == -1) {
    // servlet doesn't support if-modified-since, no reason
    // to go through further expensive logic
    doGet(req, resp);
    } else {
    long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);
    if (ifModifiedSince < (lastModified / 1000 * 1000)) {
        // If the servlet mod time is later, call doGet()
                // Round down to the nearest second for a proper compare
                // A ifModifiedSince of -1 will always be less
        maybeSetLastModified(resp, lastModified);
        doGet(req, resp);
    } else {
        resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
    }
    }
 
} else if (method.equals(METHOD_HEAD)) {
    long lastModified = getLastModified(req);
    maybeSetLastModified(resp, lastModified);
    doHead(req, resp);
 
} else if (method.equals(METHOD_POST)) {
    doPost(req, resp);
 
} else if (method.equals(METHOD_PUT)) {
    doPut(req, resp);   
 
} else if (method.equals(METHOD_DELETE)) {
    doDelete(req, resp);
 
} else if (method.equals(METHOD_OPTIONS)) {
    doOptions(req,resp);
 
} else if (method.equals(METHOD_TRACE)) {
    doTrace(req,resp);
 
} else {
    //
    // Note that this means NO servlet supports whatever
    // method was requested, anywhere on this server.
    //
 
    String errMsg = lStrings.getString("http.method_not_implemented");
    Object[] errArgs = new Object[1];
    errArgs[0] = method;
    errMsg = MessageFormat.format(errMsg, errArgs);
 
    resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);
}
}
#+END_SRC

#+BEGIN_SRC java
public void destroy() {
//
}
#+END_SRC
在大多数情况下，你通常不需要在你的 Servlet 里重写这些方法。

** 使用@WebServlet 注解开发 Servlet
 如果你不喜欢使用 xml 配置而喜欢注解的话，没关系，Servlets API 同样提供了一些注解接口给你。
你可以像下面的例子一样使用 @WebServlet 注解并且不需要在 web.xml 里为 Servlet 注册任何信息。
容器会自动注册你的 Servlet 到运行环境，并且像往常一样处理它。

#+BEGIN_SRC java
package com.howtodoinjava.servlets;
 
import java.io.IOException;
import java.io.PrintWriter;
 
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
@WebServlet(name = "MyFirstServlet", urlPatterns = {"/MyFirstServlet"})
public class MyFirstServlet extends HttpServlet {
 
    private static final long serialVersionUID = -1915463532411657451L;
 
    @Override
    protected void doGet(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException
    {
        //Do some work
    }
 
    @Override
    protected void doPost(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
        //Do some other work
    }
}
#+END_SRC
** 打包和部署 Servlet 到 Tomcat 服务器
如果你在使用 IDE（例如 eclipse），那么打包和部署你的应用只需要一个简单的步骤。右击项目> Run As > Run As Server。如果还没配置服务器先配置好服务器，然后就可以准备开干了。

如果你没在使用 IDE，那么你需要做一些额外的工作。比如，使用命令提示符编译应用，使用 ANT 去生成 war 文件等等。但我相信，现在的开发者都在使用 IDE 来开发。所以我就不在这方面浪费时间了。

当你把我们的第一个 Servlet 部署到 tomcat 上并在浏览器输入“http://localhost:8080/servletexamples/MyFirstServlet”，你会得到下面的响应。

** 编写动态的 Servlet 响应内容

Java Servlets 如此有用的原因之一是 Servlet 能动态显示网页内容。这些内容可以从服务器本身、另外一个网站、或者许多其他网络可以访问的资源里获取。Servlet 不是静态网页，它们是动态的。可以说这是它们最大的优势。

让我们来举个 Servlet 例子，这个 Servlet 会显示当前日期和时间给用户并且会显示用户名和一些自定义的信息。让我们来为这个功能编写代码吧。
#+BEGIN_SRC java
package com.howtodoinjava.servlets;
 
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
 
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
@WebServlet(name = "CalendarServlet", urlPatterns = {"/CalendarServlet"})
public class CalendarServlet extends HttpServlet {
 
    private static final long serialVersionUID = -1915463532411657451L;
 
    @Override
    protected void doGet(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException
    {
 
        Map<String,String> data = getData();
 
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {
            // Write some content
            out.println("<html>");
            out.println("<head>");
            out.println("<title>CalendarServlet</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h2>Hello " + data.get("username") + ", " + data.get("message") + "</h2>");
            out.println("<h2>The time right now is : " + new Date() + "</h2>");
            out.println("</body>");
            out.println("</html>");
        } finally {
            out.close();
        }
    }
 
    //This method will access some external system as database to get user name, and his personalized message
    private Map<String, String> getData()
    {
        Map<String, String> data = new HashMap<String, String>();
        data.put("username", "Guest");
        data.put("message",  "Welcome to my world !!");
        return data;
    }
}
当你在 tomcat 里运行上面的 Servlet 并在浏览器里输入“http://localhost:8080/servletexamples/CalendarServlet”，你会得得下面的响应。


#+END_SRC

** 处理 Servlet 请求和响应
** 监听 Servlet 容器事件
** 传递 Servlet 初始化参数
** 为特定的 URL 请求添加 Servlet 过滤器
** 使用 Servlet 下载二进制文件
** 使用 RequestDispatcher.forward()转发请求到另一个 Servlet
** 使用 HttpServletResponse.sendRedirect()重定向请求到另一个 Servlet
** 使用 Servlets 读写 Cookie

** 处理 Servlet 请求和响应
Servlet 可以轻松创建一个基于请求和响应生命周期的 web 应用。它们能够提供 HTTP 响应并且可以使用同一段代码来处理业务逻辑。处理业务逻辑的能力使 Servlet 比标准的 HTML 代码更强大。
现实世界里的应用，一个 HTML 网页表单包含了要发送给 Servlet 的参数。Servlet 会以某种方式来处理这些参数并且 返回一个客户端能够识别的响应。在对象是 HttpServlet 的情况下，客户端是 web 浏览器，响应是 web 页面。<form>的 action 属性指定了使用哪个 Servlet 来处理表单里的参数值。
为了获取请求参数，需要调用 HttpServletRequest 对象的 getParameter() 方法，并且传递你要获取的输入参数的 id 给该方法。
String value1 = req.getParameter("param1");
String value1 = req.getParameter("param2");
一旦获取了参数值，它们就会在需要时被处理。对客户端的响应和我们上面部分讨论的一样。我们使用 HttpServletResponse 对象给客户端发送响应。
request 和 response 处理的基本使用可以是这样的：
#+BEGIN_SRC java
@Override
protected void doGet(HttpServletRequest request,
        HttpServletResponse response) throws ServletException, IOException
{
 
    response.setContentType("text/html;charset=UTF-8");
    PrintWriter out = response.getWriter();
 
    String username = request.getParameter("username");
    String password = request.getParameter("password");
 
    boolean success = validateUser(username, password);
 
    try {
        // Write some content
        out.println("<html>");
        out.println("<head>");
        out.println("<title>LoginServlet</title>");
        out.println("</head>");
        out.println("<body>");
 
        if(success) {
            out.println("<h2>Welcome Friend</h2>");
        }else{
            out.println("<h2>Validate your self again.</h2>");
        }
 
        out.println("</body>");
        out.println("</html>");
    } finally {
        out.close();
    }
}

#+END_SRC
为了发送内容给客户端，你需要使用从 HttpServletResponse 里获取的 PrintWriter 对象。任何写到这个对象的内容都会被写进 outputstream 里，并会把内容发送回给客户端。

** 监听 Servlet 容器事件
有时候，知道应用服务器容器（the application server container）里某些事件发生的时间是很有用的。这个概念适用于很多情况，但它通常用在开启应用时初始化应用或者关闭应用时清理应用。可以在应用里 注册一个监听器（listener）来显示应用什么时候开启或者关闭。因此，通过监听这些事件，Servlet 可以在一些事件发生时执行相应的动作。
为了创建一个基于容器事件执行动作的监听器，你必须创建一个实现 ServletContextListener 接口的类。这个类必须实现的方法有 contextInitialized() 和 contextDestroyed()。这两个方法都需要 ServletContextEvent 作为参数，并且在每次初始化或者关闭 Servlet 容器时都会被自动调用。
为了在容器注册监听器，你可以使用下面其中一个方法：
1) 利用 @WebListener 注解。
2) 在 web.xml 应用部署文件里注册监听器。
3) 使用 ServletContext 里定义的 addListener() 方法
请注意，ServletContextListener 不是 Servlet API 里唯一的监听器。这里还有一些其他的监听器，比如
#+BEGIN_SRC java
javax.servlet.ServletRequestListener
javax.servlet.ServletRequestAttrbiteListener
javax.servlet.ServletContextListener
javax.servlet.ServletContextAttributeListener
javax.servlet.HttpSessionListener
javax.servlet.HttpSessionAttributeListener
#+END_SRC
根据你要监听的事件选择他们来实现你的监听器类。比如，每当创建或销毁一个用户 session 时，HttpSessionListener 就会发出通知。
** 传递 Servlet 初始化参数
现在的大多数应用都需要设置一些在应用/控制器（controller）启动时可以传递的配置参数（configuration parameters）。Servlet 同样可以接受初始化参数，并在处理第一个请求前来使用它们来构建配置参数。
显然，你也可以在 Servlet 里硬编码配置值。但是这样做的话，在 Servlet 发生改动时你需要再次重新编译整个应用。没有人喜欢这样做。
#+BEGIN_SRC java
<web-app>
    <servlet>
        <servlet-name>SimpleServlet</servlet-name>
        <servlet-class>com.howtodoinjava.servlets.SimpleServlet</servlet-class>
 
        <!-- Servlet init param -->
        <init-param>
            <param-name>name</param-name>
            <param-value>value</param-value>
        </init-param>
 
    </servlet>
 
</web-app>

#+END_SRC
设置后，你就可以在代码里调用 getServletConfig.getInitializationParameter() 并传递参数名给该方法来使用参数。就像下面展示的代码一样：
#+BEGIN_SRC java

String value = getServletConfig().getInitParameter("name");
#+END_SRC
为特定的 URL 请求添加 Servlet 过滤器
Web 过滤器在给定的 URL 被访问时对请求进行预处理并调用相应的功能是很有用的。相 比于直接调用给定 URL 请求的 Servlet，包含相同 URL 模式的过滤器（filter）会在 Servlet 调用前被调用。这在很多情况下是很有用的。 或许最大的用处就是执行日志，验证或者其他不需要与用户交互的后台服务。
过滤器必须要实现 javax.servlet.Filter 接口。这个接口包含了 init()，descriptor()和 doFilter()这些方法。init()和 destroy()方法会被容器调用。doFilter()方法用来在过滤器类里实现逻辑任务。如果你想把过滤器组成过滤链（chain filter）或者存在多匹配给定 URL 模式的个过滤器，它们就会根据 web.xml 里的配置顺序被调用。
为了在 web.xml 里配置过滤器，需要使用<filter>和<filter-mapping> XML 元素以及相关的子元素标签。
#+BEGIN_SRC java
<filter>
    <filter-name>LoggingFilter</filter-name>
    <filter-class>LoggingFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>LogingFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

#+END_SRC
如果你要使用注解来为特定的 servlet 配置过滤器，你可以使用@WebFilter 注解。
** 使用 Servlet 下载二进制文件
几乎所有的 web 应用都必须有下载文件的功能。为了下载一个文件，Servlet 必须提供一个和下载文件
类型匹配的响应类型。同样，必须在响应头里指出该响应包含附件。就像下面的代码。
#+BEGIN_SRC java
String mimeType = context.getMimeType( fileToDownload );
response.setContentType( mimeType != null ? mimeType : "text/plain" );
response.setHeader( "Content-Disposition", "attachment; filename="" + fileToDownload + """ );
#+END_SRC
通过调用 ServletContext.getResourceAsStream() 方法并传递文件路径给该方法，你可以获取要下载的文件（文件保存在文件系统）的引用。这个方法会返回一个输入流（InputStream）对 象，我们可以用这个对象来读取文件内容。当读取文件时，我们创建一个字节缓存区（byte buffer）从文件里获取数据块。最后的工作就是读取文件内容并且把它们复制到输出流。我们使用 while 循环来完成文件的读取，这个循环直到读取了文 件的所有内容才会跳出循环。我们使用循环来读进数据块并把它写进输出流。把所有数据写进输出流后，ServletOutputStream 对象的 flush 方法就会被调用并且清空内容和释放资源。

看这段简单的代码：
#+BEGIN_SRC java
private void downloadFile(HttpServletRequest request, HttpServletResponse response, String fileToDownload) throws IOException
    {
        final int BYTES = 1024;
        int length = 0;
 
        ServletOutputStream outStream = response.getOutputStream();
        ServletContext context = getServletConfig().getServletContext();
 
        String mimeType = context.getMimeType( fileToDownload );
        response.setContentType( mimeType != null ? mimeType : "text/plain" );
        response.setHeader( "Content-Disposition", "attachment; filename="" + fileToDownload + """ );
 
        InputStream in = context.getResourceAsStream("/" + fileToDownload);
 
        byte[] bbuf = new byte[BYTES];
 
        while ((in != null) && ((length = in.read(bbuf)) != -1)) {
            outStream.write(bbuf, 0, length);
        }
 
        outStream.flush();
        outStream.close();
    }
#+END_SRC
使用 RequestDispatcher.forward()转发请求到另一个 Servlet

有时候，你的应用需要把一个 Servlet 要处理的请求转让给另外的 Servlet 来处理并完成任务。而且，转让请求时不能重定向客户端的 URL。即浏览器地址栏上的 URL 不会改变。

在 ServletContext 里已经内置了实现上面需求的方法。所以，当你获取了 ServletContext 的引用，你就可以简单地调用 getRequestDispatcher() 方法去获取用来转发请求的 RequestDispatcher 对象。当调用 getRequestDispatcher() 方法时，需要传递包含 servlet 名的字符串，这个 Servlet 就是你用来处理转让请求的 Servlet。获取 RequestDispatcher 对象后，通过传递 HttpServletRequest 和 HttpServletResponse 对象给它来调用转发方法。转发方法负责对请求进行转发。

RequestDispatcher rd = servletContext.getRequestDispatcher("/NextServlet");
rd.forward(request, response);
使用 HttpServletResponse.sendRedirect()重定向请求到另一个 Servlet

尽管有时候，你不想在 Servlet 发送重定向时通知用户，就像我们在上面那段看到的一样。但是在某些情况下，我们确实想要通知用户。当应用内的特定 URL 被访问时，你想把浏览器的 URL 重定向到另外一个。

要实现这种功能，你需要调用 HttpServletResponse 对象的 sendRedirect()方法。
httpServletResponse.sendRedirect("/anotherURL");
这个简单的重定向，与 servlet 链（servlet chaining）相反，不需要传递目标地址的 HttpRequest 对象。

** 使用 Servlet 读写 Cookie

很多应用都想在客户端机器里保存用户当前的浏览历史。目的是当用户再次使用应用时，他能够从上次离开的地方开始浏览。为了实现这个需求，通常使用 cookies。你可以把它看作是保存在客户端机器里的键值对基本数据。当使用浏览器打开应用时，应用可以对这些数据进行读写。

为了创建 cookie，需要实例化一个新的 javax.servlet.http.Cookie 对象并且为它分配名称和值。实例化 cookie 后，可以设置属性来配置 cookie。在这个例子里，我们使用 setMaxAge() 和 setHttpOnly() 方法来设置 cookie 的生命周期和防范客户端脚本。

从 Servlet3.0 API 开始，已经可以把 cookie 标记为 HTTP only 了。这使 cookie 可以防范客户端脚本的攻击，使 cookie 更加安全。
#+BEGIN_SRC 
Cookie cookie = new Cookie("sessionId","123456789");
cookie.setHttpOnly(true);
cookie.setMaxAge(-30);
response.addCookie(cookie);
#+END_SRC
这里的 response 是传递给 doXXX()方法的 HttpServletResponse 实例。

要读取服务端的 cookie 信息，使用下面代码：
#+BEGIN_SRC java
Cookie[] cookies = request.getCookies();
for(Cookie cookie : cookies)
{
    //cookie.getName();
    //cookie.getValue()
}
#+END_SRC
这就是这篇教程里关于 Servlet 技术的全部内容了。欢迎评论和回馈。
web 容器 对 web 应用程序(servlet)要求的目录架构 
当浏览器请求 Http 服务器时，将标头，请求参数、cookie
就可以专心在 Java 对象之间的互动来解决问题。
 JSP 代码被编译成 Servlet 并由 Java 虚拟机解释执行,这种编译操作仅在对 JSP 页
面的第一次请求时发生。
