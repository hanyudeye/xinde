* emacs
  选项
  +<行号>：启动emacs编辑器，并将光标移动到制定行号的行；
  -q：启动emacs编辑器，而不加载初始化文件；
  -u<用户>：启动emacs编辑器时，加载指定用户的初始化文件；
  -t<文件>：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；
  -f<函数>：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；
  -l<lisp代码文件>：加载指定的lisp代码文件；
  -batch：以批处理模式运行emacs编辑器。
  --DEBUG-init

  调试
  gdb –annotate=3 test
  无论上面的那种情况，都出现了一个现象：程序的输出不能显示，只有在程序退出的时候才显示出来。无论上面的那种情况，都出现了一个现象：程序的输出不能显示，只有在程序退出的时候才显示出来。无论上面的那种情况，都出现了一个现象：程序的输出不能显示，只有在程序退出的时候才显示出来。
  gdb-many-windows 切换单窗格/多窗格模式
  gdb-restore-windows 恢复窗格布局	
  : screen menu bar/echo area/mode line
  : text edit(许多文本，位置属性，单词，行数，列数，数组）transposed(交换)/upcase/lowercase/
  : mode SGML/HTML/PICTURE/compilation/sql/java/perl/emacs-lisp/Lisp interaction/auto save/auto-fill/ISO accents(重音）
  : copy/yank 堆栈结构 abc
  : search and replace (regular expression) vi中也是默认正则, 文件中搜索　grep
  : spell-check ispell/flyspell-mode ispell-change-directory
  : buffers read-only
  : Word Abbreviation (global-abbrev-table)
  (text-mode-abbrev-table) (setq-default abbrev-mode t) (read-abbrev-file "~/.abbrev_defs") (setq save-abbrevs t)
  : macro
  : format
  : comment
  : frame
  : latex
  : window windmove-left /right /down/up
  : markdown
  : diff
  : dired
  : Comparing Files compare-windows(高亮不同）
  : print lpr
  : calendar diary
  : holiday
  : bookmark
  : browse browse-url-of-buffer
  : shell(setq shell-file-name "/bin/zsh") .emacs_shell-name (shell初始化文件）
  : language etags etags *.[ch]
  : debug next-error
  : as work environment
  : custom(tool-bar/menu-bar/
  : 模式属性　(add-hook 'text-mode-hook 'turn-on-auto-fill)
  : 按键属性　(define-key global-map "\C-x\C-u" 'undo)
  : 输入法切换 `c-\' (toggle-input-method')
  : lisp
  : package
  : version control(vc-next-action/vc-diff/vc-print-log/vc-cnacel-version)
  : Unicode coding-system
  (setq buffer-file-coding-system 'utf-8)  默认buffer编码是utf-8,(写文件)
  (prefer-coding-system 'utf-8)   指定文件编码,此时buffer新建和读取
  (setq read-quoted-char-radix 16) insert-quoted-char 
  : info
  : browser
  : help system/key/variable/mode
  : bug
  ^                Matches the beginning of a line.
  $                Matches the end of a line.
  .                Matches any single character (like ? in filenames).
  .*               Matches any group of zero or more characters 
  \<               Matches the beginning of a word.
  \>               Matches the end of a word.
  []               Matches any character specified within the brackets; for example, [a-z]
  \s, \S           \S matches any character except whitespace.
  \d, \D           Matches any single digit, 0-9; \D matches any character but a digit.
  \w, \W           Matches any "word" character (upper- and lowercase letters, digits, and the
* Emacs mode
  # ido, 类似于helm,和helm各有千秋我都用,五五开,
  # imenu 显示当前文件函数列表,可以直接跳转到那去,完全可配置
  # flymake 实时语法检查,通吃所有语言
  # flyspell 拼写检查,爱死了,是我见过的所有拼写检查最强大,如果你知道如何配置.
** emacs-w3m
** HTML模式
   C-c C-v可以调出浏览器看看当前HTML代码的显示效果。M-x html-autoview-mode， 可以实现在Emacs保存HTML文档之时打开浏览器查看文档显示效果。
   C-c C-f，光标移到其当前所在位置的下一个HTML标签位置
   C-c C-b，光标移到其当前所在位置的前一个HTML标签位置 
   3、隐藏/显示HTML标记
   当你觉得正在编写的HTML文档中无处不在的HTML标记破坏了文档的美感，可以试试C-c Tab，暂时将HTML标记隐藏起来，只显示你的文本内容。
   4、HTML模式其它一些常用的键绑定
   C-c 1～6，可以自动插入h1～h6的标题。譬如键入C-c 1，就会在当前位置自动插入h1标题。
   C-c C-c i，在光标位置插入图像引入标记，即，需要在Mini-buffer中指定图片的 URL。
** 尽管去做,使用org-mode来GTD — 入门
   GTD，org-mode概要
   GTD（Getting Things Done）是美国的商业顾问David Allen提倡的一种提高生产效率的
   时间管理系统。利用GTD可以缓解压力，专心地工作，学习。详细可以参考他的两部书
   《尽管去做：无压工作的艺术》，《结果第一：平衡工作和生活的52条原则》。

   操作方法
   收集
   调用 remember-mode (C-c r)
   选择 Todo（GTD）或者是 notes
   选择情境标签（OFFICE, HOME, READING, DVD, etc...）
   选择Todo的状态（TODO, STARTED, WAITING, etc...）
   设置任务结束时间（C-c C-d）
   设置任务的开始时间（C-c C-s）

   每天的操作
   首先确认当天的任务
   确认当天所有的任务 (C-c a d)
   利用情境确认当天的预定任务 (C-c a h)
   在时间轴上确认任务 (C-c a L)
   任务由 TODO 状态转换为 DONE 状态 (C-c C-t 或者 shift+左右)
   如果有新的预定使用 remember-mode (F8) 来添加任务

   周回顾
   打开 org 文件 （C-c g）
   检查 INBOX 中积攒的任务
   选择合适的项目分类 （C-c C-w）
   设置任务的结束时间 （C-c C-d）
   设置任务的开始时间（C-c C-s）

   org-mode 的设置
   org-mode的设置可以在 .emacs 中设置，也可以在 org 文件中设置。

   先看看 org-mode 所需要的文件。
   ~/.emacs
   ~/elisp/org-mode.el
   ~/org/gtd.org
   ~/org/notes.grg
   ~/org/someday.org
   ~/org/birthday.org

   首先是在 ~/.emacs 文件中加载 org-mode.el。其中文件位于 ~/elisp/org-mode.el。
   #+BEGIN_SRC elisp
(load "org-mode")
            (custom-set-variables
            ;; custom-set-variables was added by Custom.
              ;; If you edit it by hand, you could mess it up, so be careful.
              ;; Your init file should contain only one such instance.
              ;; If there is more than one, they won't work right.
            '(calendar-week-start-day 1)
            '(case-fold-search t)
            '(org-agenda-files (quote ("~/org/birthday.org" "~/org/gtd.org")))
            '(org-agenda-ndays 7)
            '(org-agenda-repeating-timestamp-show-all nil)
            '(org-agenda-restore-windows-after-quit t)
            '(org-agenda-show-all-dates t)
            '(org-agenda-skip-deadline-if-done t)
            '(org-agenda-skip-scheduled-if-done t)
            '(org-agenda-sorting-strategy (quote ((agenda time-up priority-down tag-up) (todo tag-up))))
            '(org-agenda-start-on-weekday nil)
            ;;  '(org-agenda-todo-ignore-deadlines t)
            ;;  '(org-agenda-todo-ignore-scheduled t)
            ;;  '(org-agenda-todo-ignore-with-date t)
             '(org-agenda-window-setup (quote other-window))
            '(org-deadline-warning-days 7)
            '(org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\">")
            '(org-fast-tag-selection-single-key nil)
            '(org-log-done (quote (done)))
            '(org-refile-targets (quote (("gtd.org" :maxlevel . 1) ("someday.org" :level . 1))))
            '(org-reverse-note-order nil)
            '(org-tags-column -78)
            '(org-tags-match-list-sublevels nil)
            '(org-time-stamp-rounding-minutes 5)
            '(org-use-fast-todo-selection t)
            '(org-use-tag-inheritance nil)
            '(unify-8859-on-encoding-mode t nil (ucs-tables)))
            ;; These lines only if org-mode is not part of the X/Emacs distribution.
            (autoload 'org-mode "org" "Org mode" t)
            (autoload 'org-diary "org" "Diary entries from Org mode")
            (autoload 'org-agenda "org" "Multi-file agenda from Org mode" t)
            (autoload 'org-store-link "org" "Store a link to the current location" t)
            (autoload 'orgtbl-mode "org" "Org tables as a minor mode" t)
            (autoload 'turn-on-orgtbl "org" "Org tables as a minor mode")
            (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
            (define-key global-map "\C-cl" 'org-store-link)
            (define-key global-map "\C-ca" 'org-agenda)
            ;(setq org-log-done nil)
            (setq org-log-done t)
            (setq org-agenda-include-diary nil)
            (setq org-deadline-warning-days 7)
            (setq org-timeline-show-empty-dates t)
            (setq org-insert-mode-line-in-empty-file t)
            (require 'org-install)
            (autoload 'remember "remember" nil t)
            (autoload 'remember-region "remember" nil t)
            (setq org-directory "~/org/")
            (setq org-default-notes-file "~/org/notes.org")
            (setq remember-annotation-functions '(org-remember-annotation))
            (setq remember-handler-functions '(org-remember-handler))
            (add-hook 'remember-mode-hook 'org-remember-apply-template)
            (define-key global-map "\C-cr" 'org-remember)
            (setq org-remember-templates
            '(
            ("Todo" ?t "* TODO %^{任务} %^g\n%?\nAdded: %U" "~/org/gtd.org" "INBOX")
            ("Note" ?n "\n* %U %^{笔记} %^g \n%i%?\n %a" "~/org/notes.org")
            ))
            (setq org-agenda-exporter-settings
            '((ps-number-of-columns 1)
            (ps-landscape-mode t)
            (htmlize-output-type 'css)))
            (setq org-agenda-custom-commands
            '(
            ("p" "Projects"
            ((tags "PROJECT")))
            ("h" "Office and Home Lists"
            ((agenda)
            (tags-todo "OFFICE")
            (tags-todo "HOME")
            (tags-todo "WEB")
            (tags-todo "CALL")
            ))
            ("d" "Daily Action List"
            (
            (agenda "" ((org-agenda-ndays 1)
                    (org-agenda-sorting-strategy
                     (quote ((agenda time-up priority-down tag-up) )))
                    (org-deadline-warning-days 0)
                    ))))))
            (setq org-todo-keywords '((sequence "TODO" "APPT" "STARTED" "DONE")))
            (defun gtd ()
            (interactive)
            (find-file "~/org/gtd.org"))
            (global-set-key (kbd "C-c g") 'gtd)
            (add-hook 'org-agenda-mode-hook 'hl-line-mode)


   #+END_SRC
   org 文件的设置 ::

   ~/org/gtd.rog
   #+BEGIN_SRC org
#+STARTUP: showall
            * INBOX
            #+CATEGORY: INBOX
            * Research
            #+CATEGORY: Research
            * Project A
            #+CATEGORY: Project A
            * Private
            #+CATEGORY: Private
            * Archive
            #+CATEGORY: Archive
            * org-mode configuration
            #+STARTUP: hidestars
            #+STARTUP: logdone
            #+PROPERTY: Effort_ALL  0:10 0:20 0:30 1:00 2:00 4:00 6:00 8:00
            #+COLUMNS: %38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}
            #+PROPERTY: Effort_ALL 0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 8:00
            #+TAGS: { OFFICE(o) HOME(h) WEB(w) DOWNTOWN(d) CALL(c) }
            #+TAGS: PROJECT(p) READING(r)
            #+TODO: TODO(t) STARTED(s) WAITING(w) APPT(a) | DONE(d) CANCELLED(c) DEFERRED(f)
   #+END_SRC
   ~/org/notes.org
   #+BEGIN_SRC org
#+STARTUP: showall
            #+STARTUP: hidestars
            #+TAGS: OFFICE(o) RESEARCH(r) DIARY(d) BOOK(b) FILMS(f) IDEA(i) WEB(w) COMPUTER(c)
            * 笔记
            ** [2010-02-02 星期二 18:53] 今天写博 使用org-mode来GTD（1）                    :OFFICE:

   #+END_SRC
   ~/org/someday.org
   也许某天会做的事。
   #+BEGIN_SRC 
#+STARTUP: showall
            * Someday
            ** 计算机升级。
            ** 去马尔代夫旅游。
   #+END_SRC
   ~/org/birthday.org
   #+BEGIN_SRC 
这里记录预先决定的日常安排。比如生日节假日。
与其他设备无缝连接
   #+END_SRC

   使用Emacs的tramp1可以无缝地访问远程的设备。同样也可以连接 org-mode 的文件。
   下面是在HOST机器上设置 org-mode 与tramp关联的方法。

   比如下面设置的地方
   "~/org/foo.org"
   替换为
   "/domain-name/org/foo.org"

   如果是 Windows 的 NTEmacs 为:
   "/plink:domain-name/org/foo.org"

   1. TRAMP 代表”Transparent Remote (file) Access, Multiple Protocol”，
   他是 Emacs 的一个用于远程文件编辑的扩展包。用来访问scp/ssh/smb服务器上的文件，
   可以做到像读写本地文件一样编辑远程的文件。
   2. oko
** Org Mode	
   drawer/anchor
   创建链接　org-insert-link
   缩进　org-indent-mode
   (setq org-startup-indented t)
   当导出文档时，你可以包含其他文件中的内容。比如，想包含你的
   “.emacs”文件，你可以用： #+INCLUDE: "~/.emacs" src emacs-lisp
   可选的第二个第三个参数是组织方式（例如，“quote”，“example” ，或者“src”），如果是 “src”，语言用来格式化内容。组织方式是 可选的，如果不给出，文本会被当作 Org 模式的正常处理。用 C-c
   ,可以访问包含的文件。
   发布
   (setq org-publish-project-alist
   '(("org"
   :base-directory "~/org/"
   :publishing-directory "~/public_html"
   :section-numbers nil
   :table-of-contents nil
   :style "<link rel=\"stylesheet\"
   href=\"../other/mystyle.css\"
   type=\"text/css\"/>")))

   发布相关的命令：
   +------------------------------------------------+
   |   命令    |                说明                |
   |-----------+------------------------------------|
   | C-c C-e C | 提示指明一个项目，将所有的文件发布 |
   |-----------+------------------------------------|
   | C-c C-e P | 发布包含当前文件的项目             |
   |-----------+------------------------------------|
   | C-c C-e F | 只发布当前文件                     |
   |-----------+------------------------------------|
   | C-c C-e E | 发布所有项目                       |
   +------------------------------------------------+

   字体
   *粗体*
   /斜体/
   +删除线+
   _下划线_
   下标: H_2 O 
   上标: E=mc^2
   等宽字:=git=
   无序    -|+|*
   有序    1.|1
   描述    ::
**** 内容元数据
     s    #+begin_src ... #+end_src 
     e    #+begin_example ... #+end_example  : 单行的例子以冒号开头
     q    #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进
     v    #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行
     c    #+begin_center ... #+end_center 
     l    #+begin_latex ... #+end_latex 
     L    #+latex: 
     h    #+begin_html ... #+end_html 
     H    #+html: 
     a    #+begin_ascii ... #+end_ascii 
     A    #+ascii: 
     i    #+index: line 
     I    #+include: line
     上面的单字母为快捷键字母，如输入一个<s 然后TAB后就变为
**** 以‘#‘开头的行被看作注释，不会被导出区块注释采用如下写法：
     ###+BEGIN_COMMENT
     块注释
     ...
     ###+END_COMMENT
**** 表格与图片 
     对于表格和图片，可以在前面增加标题和标签的说明，以方便交叉引用。比如在表格的前面添加：
     ###+CAPTION: This is the caption for the next table (or link)
     则则则在需要的地方可以通过\ref{table1}来引用该表格。 
**** 代码格式化
     ###符合emacs 模式时
     ###+BEGIN_SRC emacs-lisp -n -r
     (defun org-xor (a b)          (ref:df)
     "Exclusive or."             
     (if a (not b) b))
     ###+END_SRC
**** 格式导出与发布 
     1.C-c C-e a 导出为文本文件。
     2.C-c C-e h 导出为 HTML 文件 
** Edebug Mode  可以调试emacs lisp source code
   1.在过程中设断点
   2.每一步停止
   3.显示数据的值
** spacemacs 
**** 主模式相关快捷键 SPC m
     模式和状态
     层
     Spacemacs 具有层的概念。层类似于 vim 中的插件。它们提供可以在 Spacemacs 中使用的 新功能。
     键位绑定约定
     SPC b . 	   缓冲区微状态。
     窗口
     SPC w v 或 :vsplit 	    在右侧打开一个垂直分割。
     SPC w s 或 :split 	    在下部打开一个水平分割。
     SPC w h/j/k/l 	    在窗口间导航。
     SPC w H/J/K/L 	    移动当前窗口。
     SPC w . 	    窗口微状态。

     文件
     Spacemacs 中所有文件命令都有 SPC f 前缀。
     SPC f f 	    打开一个缓冲区搜索当前目录中的文件。
     SPC f r 	    打开一个缓冲区在最近打开的文件中搜索。
     SPC f s 或 :w 	    保存当前文件。
     :x 	    保存当前文件并退出。
     :e <file> 	    打开<file>

     帮助系统
     Emacs 具有一个可扩展的帮助系统。所有的快捷键都有SPC h d 前缀，以允许便捷地访问帮助系统。最重要的快捷键是 SPC h d f, SPC h d k, 和 SPC h d v。同样还有 SPC <f1> 允许用户搜索文档。
     SPC h d f 	    对一个功能提示并显示其文档。
     SPC h d k 	    对一个快捷键提示并显示其绑定的内容。
     SPC h d v 	    对一个变量提示并显示其文档和当前值。
     SPC <f1> 	    搜索一个命令，功能，变量或接口，并显示其文档
     不论何时，你遇到怪异的行为或想知道是什么东西做的，这些功能是你应该首先查阅的。

     探索
     SPC f e h 	    列出所有层并允许你浏览层上的文件。
     SPC ? 	    列出所有快捷键。

     .spacemacs  文件
     SPC f e d 	                打开你的 .spacemacs
     SPC f e D 	                使用diff 通过默认模版手动更新你的 .spacemacs 

     Emacs Lisp
     变量
     设置变量是定制 Spacemacs 行为最常见的方式。语法很简单：
     (setq variable value) ; Syntax
     ;; Setting variables example
     (setq variable1 t; True
     variable2 nil ; False
     variable3 '("A" "list" "of" "things"))

     快捷键
     定义快捷键是几乎每个人都想做的事情，最好的方式就是使用内置的 define-key 函数。
     (define-key map new-keybinding function) ; Syntax
     ;; Map H to go to the previous buffer in normal mode
     (define-key evil-normal-state-map (kbd "H") 'spacemacs/previous-useful-buffer)
     ;; Mapping keybinding to another keybinding
     (define-key evil-normal-state-map (kbd "H") (kbd "^")) ; H goes to beginning of the line

     map 是你想要绑定键位到的 keymap。大多数情况下你会使用
     evil-<state-name>-state-map。其对应不同的 evil-mode 状态。例如，使用 evil-insert-state-map 映射用于插入模式的快捷键。

     使用 evil-leader/set-key 函数来映射 <Leader> 快捷键。
     (evil-leader/set-key key function) ; Syntax
     ;; Map killing a buffer to <Leader> b c
     (evil-leader/set-key "bc" 'kill-this-buffer)
     ;; Map opening a link to <Leader> o l only in org-mode
     (evil-leader/set-key-for-mode 'org-mode
     "ol" 'org-open-at-point)
  
     函数
     你可能偶尔想要定义一个函数做更复杂的定制，语法很简单：
     (defun func-name (arg1 arg2)
     "docstring"
     ;; Body
     )
     ;; Calling a function
     (func-name arg1 arg1)
     这里有个现实可用的示例函数：

     ;; This snippet allows you to run clang-format before saving
     ;; given the current file as the correct filetype.
     ;; This relies on the c-c++ layer being enabled.
     (defun clang-format-for-filetype ()
     "Run clang-format if the current file has a file extensions
     in the filetypes list."
     (let ((filetypes '("c" "cpp")))
     (when (member (file-name-extension (buffer-file-name)) filetypes)
     (clang-format-buffer))))
     ;; See http://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html for
     ;; what this line means
     (add-hook 'before-save-hook 'clang-format-for-filetype)

     激活一个层
     正如上文术语那段所说，层提供一个简单的方式来添加特性。可在 .spacemacs 文件中激活
     一个层。
     在文件中找到 dotspacemacs-configuration-layers 变量，默认情况下，它看起来应该是这样的：
     (defun dotspacemacs/layers ()
     (setq-default
     ;; ...
     dotspacemacs-configuration-layers '(;; auto-completion
     ;; better-defaults
     emacs-lisp
     ;; (git :variables
     ;;      git-gutter-use-fringe t)
     ;; markdown
     ;; org
     ;; syntax-checking
     )))

     你可以通过删除分号来取消注释这些建议的层，开箱即用。要添加一个层，就把它的名字添
     加到列表中并重启
     Emacs 或按 SPC f e R。使用 SPC f e h 来显示所有的层和他们的文档。

     创建一个层
     为了将配置分组或当配置与你的 .spacemacs 文件之间不匹配时，你可以创建一个配置层
     。Spacemacs 提供了一个内建命令用于生成层的样板文件：SPC
     :configuration-layer/create-layer。
     这条命令将会生成一个如下的文件夹：

     [layer-name]
     |__ [local]*
     | |__ [example-mode-1]
     | |     ...
     | |__ [example-mode-n]
     |__ config.el*
     |__ funcs.el*
     |__ keybindings.el*
     |__ packages.el

     [] = 文件夹
     \ * = 不是命令生成的文件

     Packages.el 文件包含你可以在 <layer-name>-packages 变量中安装的包的列表。
     所有 MELPA 仓库中的包都可以添加到这个列表中。还可以使用 :excludedt 特性将包包含
     在列表中。
     每个包都需要一个函数来初始化。这个函数必须以这种模式命名：
     <layer-name>/init-<package-name>。
     这个函数包含了包的配置。同时还有一个 pre/post-init 函数来在包加载之前或之后运行代码。它看起来想这个样子：

     (setq layer-name-packages '(example-package
     ;;这个层通过设置:excluded 属性
     ;;为真(t)来卸载example-package-2
     (example-package-2 :excluded t)))
     (defun layer-name/post-init-package ()
     ;;在这里添加另一个层的包的配置
     )
     (defun layer-name/init-example-package ()
     ;;在这里配置example-package
     )

     **注意**：只有一个层可以具有一个对于包的 init 函数。如果你想覆盖另一个层对一个包
     的配置，请使用 use-package hooks 中的 <layer-name>/pre-init 函数。
     如果 MELPA 中没有你想要的包，你必须是由一个本地包或一个包源。关于此的更多信息可以从层的剖析处获得。

     确保你添加了你的层到你的 .spacemacs 文件中，并重启 spacemacs 以激活。
     关于层的加载过程和层的工作原理的详细描述可以参考LAYERS.org。

     安装一个单独的包
     有时创建一个层会有点大材小用了，也许你仅仅想要一个包而不想维持整个层。Spacemacs
     在 .spacemacs 文件中的 dotspacemacs/layers 函数里提供了一个叫做
     dotspacemacs-additional-packages 的变量，只要在列表中添加一个包名，它就会在你重
     启的时候被安装。
     下一段来说明如何加载这个包。
     加载包
     有没有想过 Spacemacs 如何可以在仅仅几秒钟之内加载超过 100 个包呢？
     如此低的加载时间必须需要某种难以理解的黑魔法吧。还好这不是真的，多亏有了
     use-package。
     它是一个可以轻松实现对包进行延迟加载和配置的包。以下是它的基础用法：

     ;; Basic form of use-package declaration. The :defer t tells use-package to
     ;; try to lazy load the package.
     (use-package package-name
     :defer t)
     ;; The :init section is run before the package loads The :config section is
     ;; run after the package loads
     (use-package package-name
     :defer t
     :init
     (progn
     ;; Change some variables
     (setq variable1 t variable2 nil)
     ;; Define a function
     (defun foo ()
     (message "%s" "Hello, World!")))
     :config
     (progn
     ;; Calling a function that is defined when the package loads
     (function-defined-when-package-loads)))

     这只是 use-package 的一个非常基本的概述。它还有许多其他的方式来控制包的加载，就不在这里介绍了。
     卸载一个包

     Spacemacs 在 .spacemacs 文件中的 dotspacemacs/init 函数里提供了一个叫做
     dotspacemacs-excluded-packages 的变量。只要在列表中添加一个包名，它就会在你重启的时候被卸载。
     常见调整
     本段是为了想要做更多调整的人所写的。除非另有说明，所有这些设置都去你的
     .spacemacs 文件中的
     dotspacemacs/user-config 函数里完成。

     变更 escape 键
     Spacemacs 使用 [[https://github.com/syl20bnr/evil-escape][evil-escape]] 来允许从许多拥有一个快捷键的 major-modes 中跳出。
     你可以在你的 dotspacemacs/user-config 函数中像这样定制变量：
     (defun dotspacemacs/user-config ()
     ;; ...
     ;; Set escape keybinding to "jk"
     (setq-default evil-escape-key-sequence "jk"))
     更多的文档可以在 evil-escape README 中找到。

     变更配色方案
     .spacemacs 文件的 dotspacemacs/init 函数中有一个 dotspacemacs-themes 变量
     。这是一个可以用 SPC T n 键循环的主题的列表。列表中的第一个主题是在启动时加载的主题。
     以下为示例：

     (defun dotspacemacs/init
     ;; Darktooth theme is the default theme
     ;; Each theme is automatically installed.
     ;; Note that we drop the -theme from the package name.
     ;; Ex. darktooth-theme -> darktooth
     (setq-default dotspacemacs-themes '(darktooth
     soothe
     gotham)))

     可以使用 SPC T h 键列出和选择所有已安装的主题。
     非高亮搜索
     Spacemacs 模仿了默认的 vim 行为，会高亮显示搜索结果，尽管你不在它们之间进行导航。
     你可以使用 SPC s c 或 :nohlsearch 来关闭搜索结果高亮。
     若再也不需要自动高亮结果，你可以卸载 evil-search-highlight-persist 包。

     会话
     当你打开 Spacemacs 时，它不会自动恢复窗口和缓冲区。如果你常使用 vim 会话，
     你可能要在你的 .spacemacs 文件中的 dotspacemacs/user-config 里添加
     (desktop-save-mode t)，然后你就可以使用 SPC : desktop-read 加载已被保存的会话。
     桌面文件的位置可以使用 desktop-dirname 变量设置。要自动加载一个会话，就在你的
     .spacemacs 文件中添加 (desktop-read)。

     使用 visual lines 导航
     Spacemacs 使用 vim 默认 actual lines 导航，即使它们被包装了。如果你想要让 j 和 k
     的行为如 g j 和 g k 一般，将一下代码添加到你的 .spacemacs 文件：
     (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
     (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

** sql-mode
   使用emacs作为mysql的客户端
   1 配置.emacs
   (setq sql-mysql-options '("-C" "-f" "-t" "-n")) ; for windows
   (setq sql-user "root")
   (setq sql-password "")
   2 连接MySQL服务器
   1. 执行M-x sql-mysql / 在菜单中选择SQL->start SQLi session
   2. 根据提示输入用户，密码，mysql服务器地址，端口等信息。
   3. emacs会新建一个名为*SQL*的buffer
   3 连接sql文件与*SQL* buffer
   1. 打开sql文件并进入sql-mode
      直接打开sql文件
      或者
      打开一个文件后再执行M-x sql-mode
   2. 设置产品类型为mysql

      从带单中选择 SQL -> Product -> MySQL
      或
      执行M-x sql-set-product，然后输入mysql
   3. 连接sql文件与*SQL* buffer
      使用菜单 SQL -> set SQLi buffer
      或
      执行命令M-x sql-set-sqli-buffer
      然后输入想要连接的那个connection buffer，默认为*SQL* buffer
   4 使用emacs作为mysql的客户端
   在*SQL* Buffer中执行sql语句:
   直接输入SQL语句，以“;”结尾，按下回车键自动执行
   在sql文件buffer中执行sql语句
   输入SQL语句，按C-c C-c执行当前段落中的所有语句，   或者选择要执行的语句按下C-c C-b
** Emacs内置浏览器EWW 
   则可以用按 & 调用 eww-browse-with-external-browser 在外部浏览器打开当前页面. 更详细的操作指引可以 C-h m 查看.
   如果默认的按键不符合操作习惯, 可以参考下面的这样的方式去配置修改:
   (with-eval-after-load 'eww
   (custom-set-variables
   '(eww-search-prefix "https://www.google.com.hk/search?q="))
   (define-key eww-mode-map (kbd "h") 'backward-char)
   )

   另外配合 ace-link 等能很方便的切换以 ace-jump 的方式定位和跳转链接
   eww 支持 cookie 的, 它的一些网络操作走的是 url.el , 可以通过 url-cookie-list 查看 cookie , 更多功能可以参考 url package .
   eww 针对图片也有特殊处理, 可以设置 shr-max-image-proportion 定义图片显示尺寸以及 shr-blocked-images 屏蔽部分图片等.

   需要设置代理服务器的也是走 url.el 的方式, 可以设置不代理的规则等, 基本用法如下:
   (setq url-proxy-services '(("no_proxy" . "work\\.com")
   ("http" . "proxy.somedomain.com:8888")))
   url-cookie-list 命令可以列出来 Emacs 保存的 cookie 列表, 定义在 url-cookie.el 中, 其中还有定义 url-cookie-retrieve 等函数, elisp 程序获得可以类似这样 (url-cookie-retrieve "1" "/") 的用法. cookie 实际保存在变量 url-cookie-file 对应的文件, 大概内容如下:

   (setq url-cookie-storage
   '((".weibo.cn"
   [url-cookie "httponly" nil "28-Apr-2015 15:33:40 GMT" "/" ".weibo.cn" nil]
   [url-cookie "_T_WM" "XXXXXXXXXXXXXX" "28-Apr-2015 15:33:40 GMT" "/" ".weibo.cn" nil])
   ("19622"
   [url-cookie "cookie_id" "142355712384279893" "10-Feb-2016 08:32:00 GMT" "/" "19622" nil]))
   )

   eww 的使用场景
   有些 Emacs 爱好者习惯用 gnus 等在 Emacs 里收邮件, 可以配合 eww 去查看 html 邮件.
   用来访问一些比较简单的网站比如 hackernews 等效果都还可以, 另外一些编程语言的手册等基本还是可以用 eww 来查看.

** SHELL mode
   shell-command-on region
   shell-pop

* elisp
number:5489, 89e3, 54e1, and so on   
characters (+ ?a 3) (+ ?\t 2) (+ ?\c-b 1) ?a
string "hello world,\" nimeide .\" "
bool t nil false(不存在)
symbol to refer with a single quote (')
# global variable
(setq var 3) (+ var 2)  
(setq thisvar 2
       thatvar 1
       theothervar 3 )

defining functions
(defun count-words-buffer ( )
(let ((count 0))
(save-excursion
(goto-char (point-min))
(while (< (point) (point-max))
(forward-word 1)
(setq count (1+ count)))
(message "buffer contains %d words." count))))
# execute
(count-words-buffer)
# make it available for interactive use
(interactive "prompt-string")
code                                     user is prompted for :
b       name of an existing buffer
e       event (mouse action or function key press)
f       name of an existing file
n       number (integer)
s       string
(interactive "npercent: ") 
(defun replace-string (from to)
(interactive "sreplace string: \nsreplace string %s with: ")
...)

# let 设定local variable
(let ((var1 value1) (var2 value2) ... )   
statement-block)
(+ (let ((chang 2) (kuan 3)) (+ chang kuan)) 1)
(while condition           statement-block)
# message
%s                   string or symbol
%c                   character
%d                   integer
%e                   floating point in scientific notation 
%f                   floating point in decimal-point notation
%g                   floating point in whichever format yields the shortest string
for example:
(message "\"%s\" is a string, %d is a number, and %c is a character"
"hi there" 142 ?q)
(message "this book was printed in %f, also known as %e." 2004 2004)

#+begin_src lisp
(defun count-words-buffer ( )
   "count the number of words in the current buffer;
print a message in the minibuffer with the result."
   (interactive)
   (save-excursion
     (let ((count 0))
         (goto-char (point-min))
         (while (< (point) (point-max))
           (forward-word 1)
           (setq count (1+ count)))
(message "buffer contains %d words." count))))
#+end_src
arithmetic      +,-,*,/
% (remainder)  得到余数
1+ (increment)     (参数加上1)
1- (decrement)
max , min (function 返回最大/小的值)
comparison > , < , >= , <=
/= (not equal)
= (for numbers and characters)  只能是比较整数和字符
equal (for strings and other complex objects)
logic           and , or , not
(and (> 4 2) (> 3 1) (> 2 3))
statement blocks/返回值是最后一个表达式的值
(progn
statement-block) 
# let 可以省略 progn
(let (var1 var2 ...)    
statement-block)
(let ( kuai (chang 2))
(+ chang 1)
)
(if condition true-case false-block)
special character ‘$^.*+?[\’ 需要加\ 转义
(replace-regexp "\\<program\\('s\\|s\\)?\\>" "module\\1")

* c mode
- Support syntax checking via flycheck with Clang.
- Support for disassembly of code with [[https://github.com/jart/disaster][disaster]].
- Support code reformatting with [[http://clang.llvm.org/docs/ClangFormat.html][clang-format]].
- Display function or variable definition at the bottom. (when =semantic= layer
  is included)
- Display current function cursor is in at the top. See [[https://github.com/tuhdo/semantic-stickyfunc-enhance][stickyfunc-demos]] for
  demos in some programming languages. (when =semantic= layer is included)
- Support common refactoring with [[https://github.com/tuhdo/semantic-refactor][semantic-refactor]] . See [[https://github.com/tuhdo/semantic-refactor/blob/master/srefactor-demos/demos.org][srefactor-demos]] for
  demonstration of refactoring features. (when =semantic= layer is included)
- Support code navigation via cscope (when =cscope= layer is included) and gtags.
- Support auto-completion (when =auto-completion= layer is included) via
  company-clang (when =c-c++-enable-clang-support= is turned on), or
  company-ycmd (when =ycmd= layer is included).

to your =~/.spacemacs= add =c-c++= to the existing =dotspacemacs-configuration-layers= list 

By default header files are opened in =c-mode=, you can open them in =c++-mode=
by setting the variable =c-c++-default-mode-for-headers= to =c++-mode=.

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers
    '((c-c++ :variables
             c-c++-default-mode-for-headers 'c++-mode)))
#+END_SRC

*Note:* To set the variable for a given project, create a directory local
variable at the root of your project. More info on directory local variables
can be found in the [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html][dir-locals]].

To enable Clang support set the layer variable =c-c++-enable-clang-support=
to =t= in the dotfile:

#+BEGIN_SRC emacs-lisp
  (setq-default dotspacemacs-configuration-layers
    '((c-c++ :variables c-c++-enable-clang-support t)))
#+END_SRC

[[http://clang.llvm.org/docs/ClangFormat.html][clang-format]] allows reformatting either a selected region of code
(=clang-format-region=) or a whole buffer (=clang-format-buffer=) to make it
conform to a style defined in a =.clang-format= file. This file is either
located in the same directory as the file being edited, or in any of its parent
directories (otherwise a default style will be used).

You can add snippets similar to the following to bind clang-format to either a
particular mode or all modes in your =dotspacemacs/user-config= (within your
=~/.spacemacs=):

#+BEGIN_SRC emacs-lisp
  ;; Bind clang-format-region to C-M-tab in all modes:
  (global-set-key [C-M-tab] 'clang-format-region)
  ;; Bind clang-format-buffer to tab on the c++-mode only:
  (add-hook 'c++-mode-hook 'clang-format-bindings)
    (defun clang-format-bindings ()
      (define-key c++-mode-map [tab] 'clang-format-buffer))
#+END_SRC

This layer adds some fancy improvements to =company-clang=.
It includes a hook to load a projects =.clang_complete= file, which is
just a text file with one clang flag per line, a format also used by
other text editor clang plugins.

Not only does this allow proper autocomplete on projects with extra
includes and flags, but there is also support for flycheck so that it
doesn't complain about missing header files.
| Key Binding | Description                                                            |
|-------------+------------------------------------------------------------------------|
| ~SPC m g a~ | open matching file (e.g. switch between .cpp and .h)                   |
| ~SPC m g A~ | open matching file in another window (e.g. switch between .cpp and .h) |
| ~SPC m D~   | disaster: disassemble c/c++ code                                       |
| ~SPC m r~   | srefactor: refactor thing at point.                                    |
* java layer
This layer adds support for the Java language using the [[http://eclim.org][Eclim]] client/server.
** * Layer Installation
*** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =java= to the existing =dotspacemacs-configuration-layers= list in this
file.

*** Eclim
Eclim provides the ability to access Eclipse features such as code completion,
searching, code validation, and many more.
*** Installation
For installation check the [[http://eclim.org/install.html#download][official page]].

Then set the =Eclipse= and =Eclim= paths in =dotspacemacs/user-config=,
for instance:

#+BEGIN_SRC elisp
  (setq eclim-eclipse-dirs '("~/opt/eclipse")
        eclim-executable "~/opt/eclipse/eclim")
#+END_SRC

You can also configure other options, as shown below:
#+BEGIN_SRC elisp
  (setq
   ;; Use another eclimd executable
   eclimd-executable "/path/to/another/executable"
   ;; Specify the workspace to use by default
   eclimd-default-workspace "/path/to/default/eclipse/workspace"
   ;; Whether or not to block emacs until eclimd is ready
   eclimd-wait-for-process t)
#+END_SRC
*** Usage
    Start the eclim daemon with ~SPC m d s~ and stop it with ~SPC m d k~. (See
    below.)
** Key bindings
*** Java-mode
**** Project management
     | Key Binding | Description                    |
     |-------------+--------------------------------|
     | ~SPC m p b~ | Build project                  |
     | ~SPC m p c~ | Create project                 |
     | ~SPC m p d~ | Delete project                 |
     | ~SPC m p g~ | Open file in current project   |
     | ~SPC m p i~ | Import project                 |
     | ~SPC m p j~ | Information about project      |
     | ~SPC m p k~ | Close project                  |
     | ~SPC m p o~ | Open project                   |
     | ~SPC m p p~ | Open project management buffer |
     | ~SPC m p u~ | Update project                 |

**** Eclimd

     | Key Binding | Description  |
     |-------------+--------------|
     | ~SPC m d s~ | Start daemon |
     | ~SPC m d k~ | Stop daemon  |

**** Maven

     | Key Binding | Description                    |
     |-------------+--------------------------------|
     | ~SPC m m i~ | Run maven clean install        |
     | ~SPC m m I~ | Run maven install              |
     | ~SPC m m p~ | Run one already goal from list |
     | ~SPC m m r~ | Run maven goals                |
     | ~SPC m m R~ | Run one maven goal             |
     | ~SPC m m t~ | Run maven test                 |

**** Goto

     | Key Binding | Description                                 |
     |-------------+---------------------------------------------|
     | ~M-​,​~       | jump back from go to declaration/definition |
     | ~SPC m g g~ | go to declaration                           |
     | ~SPC m g t~ | go to type definition                       |

**** Refactoring

     | Key Binding | Description      |
     |-------------+------------------|
     | ~SPC m r i~ | optimize imports |
     | ~SPC m r f~ | Format file      |
     | ~SPC m r r~ | Rename symbol    |

**** Documentation, Find

     | Key Binding | Description                            |
     |-------------+----------------------------------------|
     | ~SPC m f f~ | general find in project                |
     | ~SPC m h h~ | show documentation for symbol at point |
     | ~SPC m h u~ | show usages for symbol at point        |

**** Problems

     | Key Binding | Description                                |
     |-------------+--------------------------------------------|
     | ~SPC m e a~ | set all problems for next/prev action      |
     | ~SPC m e b~ | open buffer with problems                  |
     | ~SPC m e c~ | show options with problem corrections      |
     | ~SPC m e e~ | set only errors for next/prev action       |
     | ~SPC m e f~ | set only current file for next/prev action |
     | ~SPC m e n~ | go to next problem                         |
     | ~SPC m e o~ | open buffer with problems                  |
     | ~SPC m e p~ | go to previous problem                     |
     | ~SPC m e w~ | set warnings for next/prev action          |

**** Tests

     | Key Binding | Description                                                   |
     |-------------+---------------------------------------------------------------|
     | ~SPC m t t~ | run JUnit tests for current method or current file or project |

*** Problems buffer

    | Key Binding | Description                         |
    |-------------+-------------------------------------|
    | ~RET~       | go to problem place                 |
    | ~a~         | show all problems                   |
    | ~e~         | show only errors                    |
    | ~f~         | show problems only for current file |
    | ~g~         | refresh problems                    |
    | ~q~         | quit                                |
    | ~w~         | show only warnings                  |

*** Projects buffer

    | Key Binding | Description                                |
    |-------------+--------------------------------------------|
    | ~RET~       | go to current project                      |
    | ~c~         | go to problem place                        |
    | ~D~         | delete project                             |
    | ~g~         | refresh buffer                             |
    | ~i~         | info about current project                 |
    | ~I~         | import existing project into the workspace |
    | ~m~         | mark current project                       |
    | ~M~         | mark all projects                          |
    | ~N~         | create new project                         |
    | ~o~         | open project                               |
    | ~p~         | update project                             |
    | ~q~         | quit                                       |
    | ~R~         | rename current project                     |
    | ~u~         | unmark current project                     |
    | ~U~         | unmark all projects                        |
* eclim
  Getting Started
  Creating your first project
  Adding project source directories
  Writing code in your new project
  Android Users
  Maven Users

  Once you've installed eclim, the next step is to create your first project after which you can then start writing code and
  familiarizing yourself with eclim's features.

First make sure eclimd is running (see the eclimd docs if you are unsure how to start eclimd).
Creating your first project

Once you've got eclimd running, open an instance of vim and create your project like so:

Note
: Android Users: the android section below contains additional info regarding the creation of android projects.
: Maven Users: you may refer to the maven section below for an alternate way to create a java project.

:ProjectCreate /path/to/my_project -n java
This example creates a project with a java nature (-n java), but the same method can be used to create a project for other 
languages by simply changing the nature accordingly:

:ProjectCreate /path/to/my_java_project -n android
:ProjectCreate /path/to/my_c_project -n c
:ProjectCreate /path/to/my_cpp_project -n c++
:ProjectCreate /path/to/my_groovy_project -n groovy
:ProjectCreate /path/to/my_java_project -n java
:ProjectCreate /path/to/my_php_project -n php
:ProjectCreate /path/to/my_python_project -n python
:ProjectCreate /path/to/my_ruby_project -n ruby
:ProjectCreate /path/to/my_scala_project -n scala
The path supplied to the :ProjectCreate command will be the path to the root of your project. This path may or may not exist. If it does not exist it will be created for you. After you've created your project, there will be a .project file added to your project's root along with another file where references to your project's source directories and any third party libraries your project uses reside. The name of this file will vary depending on your project's nature, but in all cases eclim will provide you with commands to manage this file:

java, android - .classpath file
php, ruby - .buildpath file
c, c++ - .cproject, managed via the :CProjectConfigs command
python - .pydevproject file
Once you've created your project you can use the :ProjectList command to list the available projects and you should see your newly created one in the list.

my_project - open   - /path/to/my_project
The :ProjectList result is in the form of projectName - (open|closed) - /project/root/path. When you create projects, the last path element will be used for the project name. If that element contains any spaces, these will be converted to underscores.

Adding project source directories
Before you can start writing code, you will first need to create and register your project's source directories. If you created your project from an existing code base, then this step may have been perform automatically for you, but you should validate the settings to be sure.

We will use a java project in this example but the steps for other languages are very similar. Please see the relevant docs for your language for more details:

java and android
php and ruby
c and c++
python
For the purpose of this example we will assume that you will store your source files at:

/path/to/my_project/src/java
So, given that location, you will need to open the file /path/to/my_project/.classpath in Vim.

vim /path/to/my_project/.classpath
To add the source directory simply execute the following

:NewSrcEntry src/java
This will add the necessary entry to the end of your .classpath file. The contents of this file should now look something like this:

<?xml version="1.0" encoding="UTF-8"?>
<classpath>
<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
<classpathentry kind="output" path="bin"/>
<classpathentry kind="src" path="src/java"/>
</classpath>
Now that your source directory is setup, you can proceed to edit java files in that directory and make use of the java functionality provided by eclim.

Writing code in your new project
Now that you have a project created, you can start writing code and utilize the features that eclim provides.

Note

Below we'll walk through a trivial java example, but some of the steps apply to all the languages that eclim supports, although the command names may differ a bit. For additional docs on working with the language of your choice, please see the relevant section of the docs:

c/c++
java
php
python
ruby
etc.
Lets get started writing our first java application using eclim.

First, navigate to your new project's source directory (src/java in this example) and create any necessary package directories:

$ cd /path/to/my_project/src/java
$ mkdir -p org/test/
Then start editing your first java source file:

$ vim org/test/TestMain.java
package org.test;

public class TestMain
{
public static final void main(String[] args)
{

}
}
You can start to use some of the core features now. For example, lets add the following code to the main method so we can test eclim's source code validation:

System.
Then save the file and note that an error marker is placed in the left margin of your file and when the cursor is on that line an error message is printed at the bottom of your vim window. You can also run :lopen to view all the errors in the file at once.

Now lets try out code completion. Place your cursor on the '.' of 'System.' and start insert mode in vim using 'a', then follow the example below:

System.<ctrl-x><ctrl-u>             // starts the completion mode
System.<ctrl-n>                     // cycle through the completion suggestions
System.out                          // assuming you chose the 'out' suggestion
System.out.p<ctrl-x><ctrl-u>        // now start completion again
System.out.p<ctrl-n>                // hit <ctrl-n> until you get 'println'
System.out.println(
System.out.println("Hello World");  // finish up the example code.
After saving the file you should have no more validation errors, so now we can run the code like so:

:Java
After running the :Java command in vim you should now see your output in a new split window.

This only scratches the surface on the number of java features that eclim provides, but hopefully this example was enough to get you started.

Android Users
Creating an android project is the same as creating a regular java project, but you use the android nature instead:

:ProjectCreate /path/to/my_project -n android
This will result in a series of prompts for you to input your project's information:

Note: at any point in this process you can use Ctrl+C to cancel the project creation.

First you will be asked to choose the target android platform. If you have only one platform installed on your system, this prompt will be skipped and that platform will be used when creating the project. If you have no platforms installed then you will receive an error directing you to install a platform using the Android SDK Manager. If you install a new platform you will need to either restart eclipse/eclimd or run the eclim supplied :AndroidReload command.
Next you will be asked to supply a package name (Ex: com.mycompany.myapp).
Then you will need to supply a name for your application.
The next prompt will ask you if you are creating a library project or not. Most likely you are not, so type 'n' here to proceed.
Lastly, if you are not creating a library project, you will be asked whether or not you want to have a new android activity created for you and if so, you will be asked for the name of that activity.
Once you've finished supplying the necessary information, your android project will be created. An android project is simply a specialized java project, so you can now leverage all the eclim provided java functionality while developing your app.

Maven Users
Creating your first project with maven can be accomplished using the same method as any other java project, or you can utilize some of maven's built in features to get your project started.

Run maven's generate archetype to create the project directory and samples:

$ mvn archetype:generate
Once you've created the initial project directory, cd into that directory and run the following command to generate the necessary eclipse files:

$ cd <project_dir>
$ mvn eclipse:eclipse
Now you can start an instance of vim at the project's root directory and run the following commands to:

set the necessary eclipse classpath variable to point to your maven repository.
import your new project into eclipse.
$ vim
:MvnRepo
:ProjectImport /path/to/new/project
Source / Back to top
© Copyright 2005 - 2012, Eric Van Dewoestine
Last updated on Jul 21, 2016
Created using Sphinx 1.3.6 with the Bootstrap Theme 
