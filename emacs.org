* emacs
** 选项
  +<行号>：启动emacs编辑器，并将光标移动到制定行号的行；
  -q：启动emacs编辑器，而不加载初始化文件；
  -u<用户>：启动emacs编辑器时，加载指定用户的初始化文件；
  -t<文件>：启动emacs编辑器时，把指定的文件作为中端，不适用标准输入（stdin）与标准输出（stdout）；
  -f<函数>：执行指定lisp（广泛应用于人工智能领域的编程语言）函数；
  -l<lisp代码文件>：加载指定的lisp代码文件；
  -batch：以批处理模式运行emacs编辑器。
  --DEBUG-init

** 调试
  gdb –annotate=3 test
  无论上面的那种情况，都出现了一个现象：程序的输出不能显示，只有在程序退出的时候才显示出来。无论上面的那种情况，都出现了一个现象：程序的输出不能显示，
  只有在程序退出的时候才显示出来。无论上面的那种情况，都出现了一个现象：程序的输出不能显示，只有在程序退出的时候才显示出来。
  gdb-many-windows 切换单窗格/多窗格模式
  gdb-restore-windows 恢复窗格布局	
** 功能
  : screen menu bar/echo area/mode line
  : text edit(许多文本，位置属性，单词，行数，列数，数组）transposed(交换)/upcase/lowercase/
  : mode SGML/HTML/PICTURE/compilation/sql/java/perl/emacs-lisp/Lisp interaction/auto save/auto-fill/ISO accents(重音）
  : copy/yank 堆栈结构 abc
  : search and replace (regular expression) vi中也是默认正则, 文件中搜索　grep
  : spell-check ispell/flyspell-mode ispell-change-directory
  : buffers read-only
  : Word Abbreviation (global-abbrev-table)
  (text-mode-abbrev-table) (setq-default abbrev-mode t) (read-abbrev-file "~/.abbrev_defs") (setq save-abbrevs t)
  : macro
  : format
  : comment
  : frame
  : latex
  : window windmove-left /right /down/up
  : markdown
  : diff
  : dired
  : Comparing Files compare-windows(高亮不同）
  : print lpr
  : calendar diary
  : holiday
  : bookmark
  : browse browse-url-of-buffer
  : shell(setq shell-file-name "/bin/zsh") .emacs_shell-name (shell初始化文件）
  : language etags etags *.[ch]
  : debug next-error
  : as work environment
  : custom(tool-bar/menu-bar/
  : 模式属性　(add-hook 'text-mode-hook 'turn-on-auto-fill)
  : 按键属性　(define-key global-map "\C-x\C-u" 'undo)
  : 输入法切换 `c-\' (toggle-input-method')
  : lisp
  : package
  : version control(vc-next-action/vc-diff/vc-print-log/vc-cnacel-version)
  : Unicode coding-system
  (setq buffer-file-coding-system 'utf-8)  默认buffer编码是utf-8,(写文件)
  (prefer-coding-system 'utf-8)   指定文件编码,此时buffer新建和读取
  (setq read-quoted-char-radix 16) insert-quoted-char 
  : info
  : browser
  : help system/key/variable/mode
  : bug
  ^                Matches the beginning of a line.
  $                Matches the end of a line.
  .                Matches any single character (like ? in filenames).
  .*               Matches any group of zero or more characters 
  \<               Matches the beginning of a word.
  \>               Matches the end of a word.
  []               Matches any character specified within the brackets; for example, [a-z]
  \s, \S           \S matches any character except whitespace.
  \d, \D           Matches any single digit, 0-9; \D matches any character but a digit.
  \w, \W           Matches any "word" character (upper- and lowercase letters, digits, and the
** 强大的编辑器功能
    纯键盘操作
    删除(删除一个词,删除一个段落),
    变换(两个字母,两个单词), 光标移动, 联想, 搜索(正则表达式, occur)
    occur(全文搜索, 列表展示)
    doctor
** 代码查看功能
**** etags
**** 高亮显示
** 任务计划,org模式
**** todo, done
**** agenda视图模式
**** 事件提醒
** 文件比较ediff
** 计算器功能calc
** 发布blog
** 通讯录bbdb
** 发送邮件和使用mailist, usenet
** 按内容搜索grep
** 记账ledger
** 英文拼写检查
** 支持词典功能
** 十六进制查看和编辑文件hexl-mode
** svn版本控制功能psvn.el
* Emacs mode
** ido, 类似于helm,和helm各有千秋我都用,五五开,
** imenu 显示当前文件函数列表,可以直接跳转到那去,完全可配置
** flymake 实时语法检查,通吃所有语言
** flyspell 拼写检查,爱死了,是我见过的所有拼写检查最强大,如果你知道如何配置.
** emacs-w3m
** HTML模式
   C-c C-v可以调出浏览器看看当前HTML代码的显示效果。M-x html-autoview-mode， 可以实现在Emacs保存HTML文档之时打开浏览器查看文档显示效果。
   C-c C-f，光标移到其当前所在位置的下一个HTML标签位置
   C-c C-b，光标移到其当前所在位置的前一个HTML标签位置 
   3、隐藏/显示HTML标记
   当你觉得正在编写的HTML文档中无处不在的HTML标记破坏了文档的美感，可以试试C-c Tab，暂时将HTML标记隐藏起来，只显示你的文本内容。
   4、HTML模式其它一些常用的键绑定
   C-c 1～6，可以自动插入h1～h6的标题。譬如键入C-c 1，就会在当前位置自动插入h1标题。
   C-c C-c i，在光标位置插入图像引入标记，即，需要在Mini-buffer中指定图片的 URL。
** 尽管去做,使用org-mode来GTD — 入门
   GTD，org-mode概要
   GTD（Getting Things Done）是美国的商业顾问David Allen提倡的一种提高生产效率的
   时间管理系统。利用GTD可以缓解压力，专心地工作，学习。详细可以参考他的两部书
   《尽管去做：无压工作的艺术》，《结果第一：平衡工作和生活的52条原则》。

   操作方法
   收集
   调用 remember-mode (C-c r)
   选择 Todo（GTD）或者是 notes
   选择情境标签（OFFICE, HOME, READING, DVD, etc...）
   选择Todo的状态（TODO, STARTED, WAITING, etc...）
   设置任务结束时间（C-c C-d）
   设置任务的开始时间（C-c C-s）

   每天的操作
   首先确认当天的任务
   确认当天所有的任务 (C-c a d)
   利用情境确认当天的预定任务 (C-c a h)
   在时间轴上确认任务 (C-c a L)
   任务由 TODO 状态转换为 DONE 状态 (C-c C-t 或者 shift+左右)
   如果有新的预定使用 remember-mode (F8) 来添加任务

   周回顾
   打开 org 文件 （C-c g）
   检查 INBOX 中积攒的任务
   选择合适的项目分类 （C-c C-w）
   设置任务的结束时间 （C-c C-d）
   设置任务的开始时间（C-c C-s）

   org-mode 的设置
   org-mode的设置可以在 .emacs 中设置，也可以在 org 文件中设置。

   先看看 org-mode 所需要的文件。
   ~/.emacs
   ~/elisp/org-mode.el
   ~/org/gtd.org
   ~/org/notes.grg
   ~/org/someday.org
   ~/org/birthday.org

   首先是在 ~/.emacs 文件中加载 org-mode.el。其中文件位于 ~/elisp/org-mode.el。
   #+BEGIN_SRC elisp
(load "org-mode")
            (custom-set-variables
            ;; custom-set-variables was added by Custom.
              ;; If you edit it by hand, you could mess it up, so be careful.
              ;; Your init file should contain only one such instance.
              ;; If there is more than one, they won't work right.
            '(calendar-week-start-day 1)
            '(case-fold-search t)
            '(org-agenda-files (quote ("~/org/birthday.org" "~/org/gtd.org")))
            '(org-agenda-ndays 7)
            '(org-agenda-repeating-timestamp-show-all nil)
            '(org-agenda-restore-windows-after-quit t)
            '(org-agenda-show-all-dates t)
            '(org-agenda-skip-deadline-if-done t)
            '(org-agenda-skip-scheduled-if-done t)
            '(org-agenda-sorting-strategy (quote ((agenda time-up priority-down tag-up) (todo tag-up))))
            '(org-agenda-start-on-weekday nil)
            ;;  '(org-agenda-todo-ignore-deadlines t)
            ;;  '(org-agenda-todo-ignore-scheduled t)
            ;;  '(org-agenda-todo-ignore-with-date t)
             '(org-agenda-window-setup (quote other-window))
            '(org-deadline-warning-days 7)
            '(org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\">")
            '(org-fast-tag-selection-single-key nil)
            '(org-log-done (quote (done)))
            '(org-refile-targets (quote (("gtd.org" :maxlevel . 1) ("someday.org" :level . 1))))
            '(org-reverse-note-order nil)
            '(org-tags-column -78)
            '(org-tags-match-list-sublevels nil)
            '(org-time-stamp-rounding-minutes 5)
            '(org-use-fast-todo-selection t)
            '(org-use-tag-inheritance nil)
            '(unify-8859-on-encoding-mode t nil (ucs-tables)))
            ;; These lines only if org-mode is not part of the X/Emacs distribution.
            (autoload 'org-mode "org" "Org mode" t)
            (autoload 'org-diary "org" "Diary entries from Org mode")
            (autoload 'org-agenda "org" "Multi-file agenda from Org mode" t)
            (autoload 'org-store-link "org" "Store a link to the current location" t)
            (autoload 'orgtbl-mode "org" "Org tables as a minor mode" t)
            (autoload 'turn-on-orgtbl "org" "Org tables as a minor mode")
            (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
            (define-key global-map "\C-cl" 'org-store-link)
            (define-key global-map "\C-ca" 'org-agenda)
            ;(setq org-log-done nil)
            (setq org-log-done t)
            (setq org-agenda-include-diary nil)
            (setq org-deadline-warning-days 7)
            (setq org-timeline-show-empty-dates t)
            (setq org-insert-mode-line-in-empty-file t)
            (require 'org-install)
            (autoload 'remember "remember" nil t)
            (autoload 'remember-region "remember" nil t)
            (setq org-directory "~/org/")
            (setq org-default-notes-file "~/org/notes.org")
            (setq remember-annotation-functions '(org-remember-annotation))
            (setq remember-handler-functions '(org-remember-handler))
            (add-hook 'remember-mode-hook 'org-remember-apply-template)
            (define-key global-map "\C-cr" 'org-remember)
            (setq org-remember-templates
            '(
            ("Todo" ?t "* TODO %^{任务} %^g\n%?\nAdded: %U" "~/org/gtd.org" "INBOX")
            ("Note" ?n "\n* %U %^{笔记} %^g \n%i%?\n %a" "~/org/notes.org")
            ))
            (setq org-agenda-exporter-settings
            '((ps-number-of-columns 1)
            (ps-landscape-mode t)
            (htmlize-output-type 'css)))
            (setq org-agenda-custom-commands
            '(
            ("p" "Projects"
            ((tags "PROJECT")))
            ("h" "Office and Home Lists"
            ((agenda)
            (tags-todo "OFFICE")
            (tags-todo "HOME")
            (tags-todo "WEB")
            (tags-todo "CALL")
            ))
            ("d" "Daily Action List"
            (
            (agenda "" ((org-agenda-ndays 1)
                    (org-agenda-sorting-strategy
                     (quote ((agenda time-up priority-down tag-up) )))
                    (org-deadline-warning-days 0)
                    ))))))
            (setq org-todo-keywords '((sequence "TODO" "APPT" "STARTED" "DONE")))
            (defun gtd ()
            (interactive)
            (find-file "~/org/gtd.org"))
            (global-set-key (kbd "C-c g") 'gtd)
            (add-hook 'org-agenda-mode-hook 'hl-line-mode)


   #+END_SRC
   org 文件的设置 ::

   ~/org/gtd.rog
   #+BEGIN_SRC org
#+STARTUP: showall
            * INBOX
            #+CATEGORY: INBOX
            * Research
            #+CATEGORY: Research
            * Project A
            #+CATEGORY: Project A
            * Private
            #+CATEGORY: Private
            * Archive
            #+CATEGORY: Archive
            * org-mode configuration
            #+STARTUP: hidestars
            #+STARTUP: logdone
            #+PROPERTY: Effort_ALL  0:10 0:20 0:30 1:00 2:00 4:00 6:00 8:00
            #+COLUMNS: %38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}
            #+PROPERTY: Effort_ALL 0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 8:00
            #+TAGS: { OFFICE(o) HOME(h) WEB(w) DOWNTOWN(d) CALL(c) }
            #+TAGS: PROJECT(p) READING(r)
            #+TODO: TODO(t) STARTED(s) WAITING(w) APPT(a) | DONE(d) CANCELLED(c) DEFERRED(f)
   #+END_SRC
   ~/org/notes.org
   #+BEGIN_SRC org
#+STARTUP: showall
            #+STARTUP: hidestars
            #+TAGS: OFFICE(o) RESEARCH(r) DIARY(d) BOOK(b) FILMS(f) IDEA(i) WEB(w) COMPUTER(c)
            * 笔记
            ** [2010-02-02 星期二 18:53] 今天写博 使用org-mode来GTD（1）                    :OFFICE:

   #+END_SRC
   ~/org/someday.org
   也许某天会做的事。
   #+BEGIN_SRC 
#+STARTUP: showall
            * Someday
            ** 计算机升级。
            ** 去马尔代夫旅游。
   #+END_SRC
   ~/org/birthday.org
   #+BEGIN_SRC 
这里记录预先决定的日常安排。比如生日节假日。
与其他设备无缝连接
   #+END_SRC

   使用Emacs的tramp1可以无缝地访问远程的设备。同样也可以连接 org-mode 的文件。
   下面是在HOST机器上设置 org-mode 与tramp关联的方法。

   比如下面设置的地方
   "~/org/foo.org"
   替换为
   "/domain-name/org/foo.org"

   如果是 Windows 的 NTEmacs 为:
   "/plink:domain-name/org/foo.org"

   1. TRAMP 代表”Transparent Remote (file) Access, Multiple Protocol”，
   他是 Emacs 的一个用于远程文件编辑的扩展包。用来访问scp/ssh/smb服务器上的文件，
   可以做到像读写本地文件一样编辑远程的文件。
   2. oko
** Org Mode	
   drawer/anchor
   创建链接　org-insert-link
   缩进　org-indent-mode
   (setq org-startup-indented t)
   当导出文档时，你可以包含其他文件中的内容。比如，想包含你的
   “.emacs”文件，你可以用： #+INCLUDE: "~/.emacs" src emacs-lisp
   可选的第二个第三个参数是组织方式（例如，“quote”，“example” ，或者“src”），如果是 “src”，语言用来格式化内容。组织方式是 可选的，如果不给出，文本会被当作 Org 模式的正常处理。用 C-c
   ,可以访问包含的文件。
   发布
   (setq org-publish-project-alist
   '(("org"
   :base-directory "~/org/"
   :publishing-directory "~/public_html"
   :section-numbers nil
   :table-of-contents nil
   :style "<link rel=\"stylesheet\"
   href=\"../other/mystyle.css\"
   type=\"text/css\"/>")))

   发布相关的命令：
   +------------------------------------------------+
   |   命令    |                说明                |
   |-----------+------------------------------------|
   | C-c C-e C | 提示指明一个项目，将所有的文件发布 |
   |-----------+------------------------------------|
   | C-c C-e P | 发布包含当前文件的项目             |
   |-----------+------------------------------------|
   | C-c C-e F | 只发布当前文件                     |
   |-----------+------------------------------------|
   | C-c C-e E | 发布所有项目                       |
   +------------------------------------------------+

   字体
   *粗体*
   /斜体/
   +删除线+
   _下划线_
   下标: H_2 O 
   上标: E=mc^2
   等宽字:=git=
   无序    -|+|*
   有序    1.|1
   描述    ::
**** 内容元数据
     s    #+begin_src ... #+end_src 
     e    #+begin_example ... #+end_example  : 单行的例子以冒号开头
     q    #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进
     v    #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行
     c    #+begin_center ... #+end_center 
     l    #+begin_latex ... #+end_latex 
     L    #+latex: 
     h    #+begin_html ... #+end_html 
     H    #+html: 
     a    #+begin_ascii ... #+end_ascii 
     A    #+ascii: 
     i    #+index: line 
     I    #+include: line
     上面的单字母为快捷键字母，如输入一个<s 然后TAB后就变为
**** 以‘#‘开头的行被看作注释，不会被导出区块注释采用如下写法：
     ###+BEGIN_COMMENT
     块注释
     ...
     ###+END_COMMENT
**** 表格与图片 
     对于表格和图片，可以在前面增加标题和标签的说明，以方便交叉引用。比如在表格的前面添加：
     ###+CAPTION: This is the caption for the next table (or link)
     则则则在需要的地方可以通过\ref{table1}来引用该表格。 
**** 代码格式化
     ###符合emacs 模式时
     ###+BEGIN_SRC emacs-lisp -n -r
     (defun org-xor (a b)          (ref:df)
     "Exclusive or."             
     (if a (not b) b))
     ###+END_SRC
**** 格式导出与发布 
     1.C-c C-e a 导出为文本文件。
     2.C-c C-e h 导出为 HTML 文件 
** Edebug Mode  可以调试emacs lisp source code
   1.在过程中设断点
   2.每一步停止
   3.显示数据的值
** spacemacs 
 主模式相关快捷键 SPC m
     模式和状态
     层
     Spacemacs 具有层的概念。层类似于 vim 中的插件。它们提供可以在 Spacemacs 中使用的 新功能。
     键位绑定约定
     SPC b . 	   缓冲区微状态。
     窗口
     SPC w v 或 :vsplit 	    在右侧打开一个垂直分割。
     SPC w s 或 :split 	    在下部打开一个水平分割。
     SPC w h/j/k/l 	    在窗口间导航。
     SPC w H/J/K/L 	    移动当前窗口。
     SPC w . 	    窗口微状态。

     文件
     Spacemacs 中所有文件命令都有 SPC f 前缀。
     SPC f f 	    打开一个缓冲区搜索当前目录中的文件。
     SPC f r 	    打开一个缓冲区在最近打开的文件中搜索。
     SPC f s 或 :w 	    保存当前文件。
     :x 	    保存当前文件并退出。
     :e <file> 	    打开<file>

     帮助系统
     Emacs 具有一个可扩展的帮助系统。所有的快捷键都有SPC h d 前缀，以允许便捷地访问帮助系统。
     最重要的快捷键是 SPC h d f, SPC h d k, 和 SPC h d v。同样还有 SPC <f1> 允许用户搜索文档。
     SPC h d f 	    对一个功能提示并显示其文档。
     SPC h d k 	    对一个快捷键提示并显示其绑定的内容。
     SPC h d v 	    对一个变量提示并显示其文档和当前值。
     SPC <f1> 	    搜索一个命令，功能，变量或接口，并显示其文档
     不论何时，你遇到怪异的行为或想知道是什么东西做的，这些功能是你应该首先查阅的。

     探索
     SPC f e h 	    列出所有层并允许你浏览层上的文件。
     SPC ? 	    列出所有快捷键。

     .spacemacs  文件
     SPC f e d 	                打开你的 .spacemacs
     SPC f e D 	                使用diff 通过默认模版手动更新你的 .spacemacs 

     Emacs Lisp
     变量
     设置变量是定制 Spacemacs 行为最常见的方式。语法很简单：
     (setq variable value) ; Syntax
     ;; Setting variables example
     (setq variable1 t; True
     variable2 nil ; False
     variable3 '("A" "list" "of" "things"))

     快捷键
     定义快捷键是几乎每个人都想做的事情，最好的方式就是使用内置的 define-key 函数。
     (define-key map new-keybinding function) ; Syntax
     ;; Map H to go to the previous buffer in normal mode
     (define-key evil-normal-state-map (kbd "H") 'spacemacs/previous-useful-buffer)
     ;; Mapping keybinding to another keybinding
     (define-key evil-normal-state-map (kbd "H") (kbd "^")) ; H goes to beginning of the line

     map 是你想要绑定键位到的 keymap。大多数情况下你会使用
     evil-<state-name>-state-map。其对应不同的 evil-mode 状态。例如，使用 evil-insert-state-map 映射用于插入模式的快捷键。

     使用 evil-leader/set-key 函数来映射 <Leader> 快捷键。
     (evil-leader/set-key key function) ; Syntax
     ;; Map killing a buffer to <Leader> b c
     (evil-leader/set-key "bc" 'kill-this-buffer)
     ;; Map opening a link to <Leader> o l only in org-mode
     (evil-leader/set-key-for-mode 'org-mode
     "ol" 'org-open-at-point)
  
     函数
     你可能偶尔想要定义一个函数做更复杂的定制，语法很简单：
     (defun func-name (arg1 arg2)
     "docstring"
     ;; Body
     )
     ;; Calling a function
     (func-name arg1 arg1)
     这里有个现实可用的示例函数：

     ;; This snippet allows you to run clang-format before saving
     ;; given the current file as the correct filetype.
     ;; This relies on the c-c++ layer being enabled.
     (defun clang-format-for-filetype ()
     "Run clang-format if the current file has a file extensions
     in the filetypes list."
     (let ((filetypes '("c" "cpp")))
     (when (member (file-name-extension (buffer-file-name)) filetypes)
     (clang-format-buffer))))
     ;; See http://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html for
     ;; what this line means
     (add-hook 'before-save-hook 'clang-format-for-filetype)

     激活一个层
     正如上文术语那段所说，层提供一个简单的方式来添加特性。可在 .spacemacs 文件中激活
     一个层。
     在文件中找到 dotspacemacs-configuration-layers 变量，默认情况下，它看起来应该是这样的：
     (defun dotspacemacs/layers ()
     (setq-default
     ;; ...
     dotspacemacs-configuration-layers '(;; auto-completion
     ;; better-defaults
     emacs-lisp
     ;; (git :variables
     ;;      git-gutter-use-fringe t)
     ;; markdown
     ;; org
     ;; syntax-checking
     )))

     你可以通过删除分号来取消注释这些建议的层，开箱即用。要添加一个层，就把它的名字添
     加到列表中并重启
     Emacs 或按 SPC f e R。使用 SPC f e h 来显示所有的层和他们的文档。

     创建一个层
     为了将配置分组或当配置与你的 .spacemacs 文件之间不匹配时，你可以创建一个配置层
     。Spacemacs 提供了一个内建命令用于生成层的样板文件：SPC
     :configuration-layer/create-layer。
     这条命令将会生成一个如下的文件夹：

     [layer-name]
     |__ [local]*
     | |__ [example-mode-1]
     | |     ...
     | |__ [example-mode-n]
     |__ config.el*
     |__ funcs.el*
     |__ keybindings.el*
     |__ packages.el

     [] = 文件夹
     \ * = 不是命令生成的文件

     Packages.el 文件包含你可以在 <layer-name>-packages 变量中安装的包的列表。
     所有 MELPA 仓库中的包都可以添加到这个列表中。还可以使用 :excludedt 特性将包包含
     在列表中。
     每个包都需要一个函数来初始化。这个函数必须以这种模式命名：
     <layer-name>/init-<package-name>。
     这个函数包含了包的配置。同时还有一个 pre/post-init 函数来在包加载之前或之后运行代码。它看起来想这个样子：

     (setq layer-name-packages '(example-package
     ;;这个层通过设置:excluded 属性
     ;;为真(t)来卸载example-package-2
     (example-package-2 :excluded t)))
     (defun layer-name/post-init-package ()
     ;;在这里添加另一个层的包的配置
     )
     (defun layer-name/init-example-package ()
     ;;在这里配置example-package
     )

     **注意**：只有一个层可以具有一个对于包的 init 函数。如果你想覆盖另一个层对一个包
     的配置，请使用 use-package hooks 中的 <layer-name>/pre-init 函数。
     如果 MELPA 中没有你想要的包，你必须是由一个本地包或一个包源。关于此的更多信息可以从层的剖析处获得。

     确保你添加了你的层到你的 .spacemacs 文件中，并重启 spacemacs 以激活。
     关于层的加载过程和层的工作原理的详细描述可以参考LAYERS.org。

     安装一个单独的包
     有时创建一个层会有点大材小用了，也许你仅仅想要一个包而不想维持整个层。Spacemacs
     在 .spacemacs 文件中的 dotspacemacs/layers 函数里提供了一个叫做
     dotspacemacs-additional-packages 的变量，只要在列表中添加一个包名，它就会在你重
     启的时候被安装。
     下一段来说明如何加载这个包。
     加载包
     有没有想过 Spacemacs 如何可以在仅仅几秒钟之内加载超过 100 个包呢？
     如此低的加载时间必须需要某种难以理解的黑魔法吧。还好这不是真的，多亏有了
     use-package。
     它是一个可以轻松实现对包进行延迟加载和配置的包。以下是它的基础用法：

     ;; Basic form of use-package declaration. The :defer t tells use-package to
     ;; try to lazy load the package.
     (use-package package-name
     :defer t)
     ;; The :init section is run before the package loads The :config section is
     ;; run after the package loads
     (use-package package-name
     :defer t
     :init
     (progn
     ;; Change some variables
     (setq variable1 t variable2 nil)
     ;; Define a function
     (defun foo ()
     (message "%s" "Hello, World!")))
     :config
     (progn
     ;; Calling a function that is defined when the package loads
     (function-defined-when-package-loads)))

     这只是 use-package 的一个非常基本的概述。它还有许多其他的方式来控制包的加载，就不在这里介绍了。
     卸载一个包

     Spacemacs 在 .spacemacs 文件中的 dotspacemacs/init 函数里提供了一个叫做
     dotspacemacs-excluded-packages 的变量。只要在列表中添加一个包名，它就会在你重启的时候被卸载。
     常见调整
     本段是为了想要做更多调整的人所写的。除非另有说明，所有这些设置都去你的
     .spacemacs 文件中的
     dotspacemacs/user-config 函数里完成。

     变更 escape 键
     Spacemacs 使用 [[https://github.com/syl20bnr/evil-escape][evil-escape]] 来允许从许多拥有一个快捷键的 major-modes 中跳出。
     你可以在你的 dotspacemacs/user-config 函数中像这样定制变量：
     (defun dotspacemacs/user-config ()
     ;; ...
     ;; Set escape keybinding to "jk"
     (setq-default evil-escape-key-sequence "jk"))
     更多的文档可以在 evil-escape README 中找到。

     变更配色方案
     .spacemacs 文件的 dotspacemacs/init 函数中有一个 dotspacemacs-themes 变量
     。这是一个可以用 SPC T n 键循环的主题的列表。列表中的第一个主题是在启动时加载的主题。
     以下为示例：

     (defun dotspacemacs/init
     ;; Darktooth theme is the default theme
     ;; Each theme is automatically installed.
     ;; Note that we drop the -theme from the package name.
     ;; Ex. darktooth-theme -> darktooth
     (setq-default dotspacemacs-themes '(darktooth
     soothe
     gotham)))

     可以使用 SPC T h 键列出和选择所有已安装的主题。
     非高亮搜索
     Spacemacs 模仿了默认的 vim 行为，会高亮显示搜索结果，尽管你不在它们之间进行导航。
     你可以使用 SPC s c 或 :nohlsearch 来关闭搜索结果高亮。
     若再也不需要自动高亮结果，你可以卸载 evil-search-highlight-persist 包。

     会话
     当你打开 Spacemacs 时，它不会自动恢复窗口和缓冲区。如果你常使用 vim 会话，
     你可能要在你的 .spacemacs 文件中的 dotspacemacs/user-config 里添加
     (desktop-save-mode t)，然后你就可以使用 SPC : desktop-read 加载已被保存的会话。
     桌面文件的位置可以使用 desktop-dirname 变量设置。要自动加载一个会话，就在你的
     .spacemacs 文件中添加 (desktop-read)。

     使用 visual lines 导航
     Spacemacs 使用 vim 默认 actual lines 导航，即使它们被包装了。如果你想要让 j 和 k
     的行为如 g j 和 g k 一般，将一下代码添加到你的 .spacemacs 文件：
     (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
     (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

** sql-mode
   使用emacs作为mysql的客户端
   1 配置.emacs
   (setq sql-mysql-options '("-C" "-f" "-t" "-n")) ; for windows
   (setq sql-user "root")
   (setq sql-password "")
   2 连接MySQL服务器
   1. 执行M-x sql-mysql / 在菜单中选择SQL->start SQLi session
   2. 根据提示输入用户，密码，mysql服务器地址，端口等信息。
   3. emacs会新建一个名为*SQL*的buffer
   3 连接sql文件与*SQL* buffer
   1. 打开sql文件并进入sql-mode
      直接打开sql文件
      或者
      打开一个文件后再执行M-x sql-mode
   2. 设置产品类型为mysql

      从带单中选择 SQL -> Product -> MySQL
      或
      执行M-x sql-set-product，然后输入mysql
   3. 连接sql文件与*SQL* buffer
      使用菜单 SQL -> set SQLi buffer
      或
      执行命令M-x sql-set-sqli-buffer
      然后输入想要连接的那个connection buffer，默认为*SQL* buffer
   4 使用emacs作为mysql的客户端
   在*SQL* Buffer中执行sql语句:
   直接输入SQL语句，以“;”结尾，按下回车键自动执行
   在sql文件buffer中执行sql语句
   输入SQL语句，按C-c C-c执行当前段落中的所有语句，   或者选择要执行的语句按下C-c C-b
** Emacs内置浏览器EWW 
   则可以用按 & 调用 eww-browse-with-external-browser 在外部浏览器打开当前页面. 更详细的操作指引可以 C-h m 查看.
   如果默认的按键不符合操作习惯, 可以参考下面的这样的方式去配置修改:
   (with-eval-after-load 'eww
   (custom-set-variables
   '(eww-search-prefix "https://www.google.com.hk/search?q="))
   (define-key eww-mode-map (kbd "h") 'backward-char)
   )

   另外配合 ace-link 等能很方便的切换以 ace-jump 的方式定位和跳转链接
   eww 支持 cookie 的, 它的一些网络操作走的是 url.el , 可以通过 url-cookie-list 查看 cookie , 更多功能可以参考 url package .
   eww 针对图片也有特殊处理, 可以设置 shr-max-image-proportion 定义图片显示尺寸以及 shr-blocked-images 屏蔽部分图片等.

   需要设置代理服务器的也是走 url.el 的方式, 可以设置不代理的规则等, 基本用法如下:
   (setq url-proxy-services '(("no_proxy" . "work\\.com")
   ("http" . "proxy.somedomain.com:8888")))
   url-cookie-list 命令可以列出来 Emacs 保存的 cookie 列表, 定义在 url-cookie.el 中, 其中还有定义 url-cookie-retrieve 等函数, elisp 程序获得可以类似这样 (url-cookie-retrieve "1" "/") 的用法. cookie 实际保存在变量 url-cookie-file 对应的文件, 大概内容如下:

   (setq url-cookie-storage
   '((".weibo.cn"
   [url-cookie "httponly" nil "28-Apr-2015 15:33:40 GMT" "/" ".weibo.cn" nil]
   [url-cookie "_T_WM" "XXXXXXXXXXXXXX" "28-Apr-2015 15:33:40 GMT" "/" ".weibo.cn" nil])
   ("19622"
   [url-cookie "cookie_id" "142355712384279893" "10-Feb-2016 08:32:00 GMT" "/" "19622" nil]))
   )

   eww 的使用场景
   有些 Emacs 爱好者习惯用 gnus 等在 Emacs 里收邮件, 可以配合 eww 去查看 html 邮件.
   用来访问一些比较简单的网站比如 hackernews 等效果都还可以, 另外一些编程语言的手册等基本还是可以用 eww 来查看.

** SHELL mode
   shell-command-on region
   shell-pop

** version control
   You can check the status of your file by pressing ~SPC g s~. 


