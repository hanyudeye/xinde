* include (包含操作)
** 简单方式  (load-file "~/elisp/foo.el")
 但我们还要注意性能，一般在打开文件时加载，所以要做复杂的判断
** require 方式(lisp 文件有一个属性)
   
#+BEGIN_SRC emacs-lisp
  ;;有此属性
  ;; Your code goes here ...

  (provide 'my-feature)
#+END_SRC

To have Emacs load this file, call =require=, as such:

#+BEGIN_SRC emacs-lisp
  (require 'my-feature)
#+END_SRC

这种方式会做一系列判断，(在 load-path 变量)会检查 el,elc 文件，会判断是否已加载过.
这种方式普遍，作者写的严谨，依赖都会写.

显示路径 SPC h d v load-path
(add-to-list 'load-path "/some/path/")
** Auto-loading
   require 列表还是很长很慢
   
   如果函数被定义为自动加载属性，那么只有函数被使用时，会被自动加载(第一次执行会轻微延时)

   当调用函数时，先执行文件  (autoload 'some-function "some-file")
   
   SPC h d f some-function 可以显示函数的属性 为 auto-loaded 函数
   
   文件样式 helm-autoloads.el
#+BEGIN_SRC emacs-lisp
  ;;;###autoload  ;;这个是 magic 注释,自动生成
  (defun my-function ()
    ;; Source code...
    )
#+END_SRC
自动加载的不光函数，还有 macros, major or minor modes, groups, classes, and so on.
还有下面的文件
#+BEGIN_SRC emacs-lisp
  ;;;###autoload
  (require 'helm)
#+END_SRC
*** Eval after load

当加载后要配置变量，可以用下面的函数
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'helm
       ;; Code
       )
#+END_SRC

*** Use-package(这个功能强大)
    https://github.com/jwiegley/use-package
   方式 1  
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :defer t
    :init
    ;; Code to execute before Helm is loaded
    :config
    ;; Code to execute after Helm is loaded
    )
#+END_SRC

模式场景
#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :mode "\\.rb\\'")
#+END_SRC

* layer (操作集合)
** 层的内容
- declare additional layers 层定义
- the packages list and configuration  包的列表和配置
- all functions used in the layer should be declared here  函数定义
- layer specific configuration 层的特定配置
- general key bindings 键盘绑定

** layers.el
   #+BEGIN_SRC emacs-lisp
     ;; 层 A 依赖层 B
     (configuration-layer/declare-layer 'B)
     ;;效果就像 B 加入了层配置变量
     ;; dotspacemacs-configuration-layers
#+END_SRC

** packages.el
#+BEGIN_SRC emacs-lisp
    ;; 包列表
      (defconst mylayer-packages
        '(
          ;; Get the package from MELPA, ELPA, etc.
          some-package
          (some-package :location elpa)

          ;; A local package
          (some-package :location local)

          ;; A local package to be built with Quelpa
          (some-package :location (recipe :fetcher local))

          ;; A package recipe
          (some-package :location (recipe
                                   :fetcher github
                                   :repo "some/repo"))

          ;; An excluded package
          (some-package :excluded t)
          ))
  ;; Local packages should reside at <layer>/local/<package>/
#+END_SRC

For each included package, you may define one or more of the following
functions, which are called in order by Spacemacs to initialize the package.
1. =<layer>/pre-init-<package>=
2. =<layer>/init-<package>=
3. =<layer>/post-init-<package>=

*Note:* A package will not be installed unless at least one layer defines an
=init= function for it. That is to say, in a certain sense, the =init= function
does mandatory setup while the =pre-init= and =post-init= functions do optional
setup. This can be used for managing cross-layer dependencies, which we will
discuss later.

** funcs.el
#+BEGIN_SRC emacs-lisp
  (when (configuration-layer/package-used-p 'my-package)
    (defun spacemacs/my-package-enable () ...)
    (defun spacemacs/my-package-disable () ...))
#+END_SRC

** config.el
** keybindings.el
* Case study: auto-completion
Spacemacs provides a layer called =auto-completion= which provides
auto-completion features in many modes. It does this using the package
=company=. This layer owns the =company= package, so it defines a function
called =auto-completion/init-company=.

When a user enables the =auto-completion= layer, Spacemacs locates it and finds
=company= in the list of packages. Provided that =company= is not excluded,
either by the user or another layer, Spacemacs then locates and runs the =init=
function for =company=. This function includes a call to =use-package= that sets
up the basic configuration.

However, auto-completion is a two-horse game. By its very nature, it is specific
to the major mode in question. It is pointless to expect the =auto-completion=
layer to include configuration for each conceivable major mode, and equally
futile to expect each programming language layer (python, ruby, etc.) to fully
configure =company= on their own.

This is solved using the =post-init= functions. The Python layer, for example,
includes the =company= package and defines a function called
=python/post-init-company=. This function is called after
=auto-completion/init-company=, but it is not called if
- the =auto-completion= layer is not enabled, in which case no =init= function
  for =company= will be found, or
- the =company= package is excluded either by the user or another layer

As such, =python/post-init-company= is the /only/ safe place to put
configuration related to =company= in Python mode.

If the Python layer had defined an =init= function for =company=, that package
would have been installed even if the =auto-completion= layer had been disabled,
which is not what we want.

* Layer tips and tricks
** Cross-dependencies
Spacemacs provides a couple of additional useful functions you can use to check
whether other layers or packages are included.
- check if a layer is enabled
- check if a package is or will be installed

These are useful in some cases, but usually you can get the desired result just
by using =post-init= functions.

For layers that require another layers to be enabled, use the functions
=configuration-layer/declare-layer= and =configuration-layer/declare-layers= to
ensure that layers are enabled even if the user has not enabled them explicitly.
Calls to these functions must go in the =layers.el= file.

** Shadowing
Shadowing is the operation of replacing a used layer by another one. For
instance if a used layer A can shadow a used layer B and the layer A is listed
after the layer B in the dotfile then the layer A replaces the layer B and it is
like only the layer A is being used.

Examples of this mechanism are helm/ivy layers or neotree/treemacs layers.

A layer can shadow other layers by calling in its =layers.el= file the function
=configuration-layer/declare-shadow-relation=. This function declares a
=can-shadow= relation between all the layers.

=can-shadow= is a commutative relation, if layer A can shadow layer B then layer
B can shadow layer A.

The =shadow= operator is a binary operator accepting two layer names, it is not
commutative and the order of the operands is determined by the order of the
layers in the dotfile (like the ownership stealing mechanism).

If =:can-shadow= property is set explicitly to =nil= in the dotfile then the
layer won’t shadow any layer.

For instance to install both ivy and helm layer:

#+BEGIN_SRC emacs-lisp
  (setq dotspacemacs-configuration-layers
   '(
     ivy
     (helm :can-shadow nil)
     )
#+END_SRC

note that due to the commutative relation =can-shadow= the above example can
also be written like this (in this case, =:can-shadow= should be read
=:can-be-shawdowed=):

#+BEGIN_SRC emacs-lisp
  (setq dotspacemacs-configuration-layers
  '(
    (ivy :can-shadow nil)
    helm
    )
#+END_SRC

We will prefer the first form as it is more intuitive.

** Use-package init and config
In the vast majority of cases, a package =init= function should do nothing but
call to =use-package=. Again, in the vast majority of cases, all the
configuration you need to do should be doable within the =:init= or =:config=
blocks of such a call.

What goes where? Since =:init= is executed before load and =:config= after,
these rules of thumb apply.

In =:config= should be
- Anything that requires the package to be already loaded.
- Anything that takes a long time to run, which would ruin startup performance.

The =:init= block should contain setup for the entry points to the package. This
includes key bindings, if the package should be loaded manually by the user, or
hooks, if the package should be loaded upon some event. It is not unusual to
have both!

** Use-package hooks
Spacemacs includes a macro for adding more code to the =:init= or =:config=
blocks of a call to =use-package=, after the fact. This is useful for =pre-init=
or =post-init= functions to “inject” code into the =use-package= call of the
=init= function.

#+BEGIN_SRC emacs-lisp
  (spacemacs|use-package-add-hook helm
    :pre-init
    ;; Code
    :post-init
    ;; Code
    :pre-config
    ;; Code
    :post-config
    ;; Code
    )
#+END_SRC

Since a call to =use-package= may evaluate the =:init= block immediately, any
function that wants to inject code into this block must run =before= the call to
=use-package=. Further, since this call to =use-package= typically takes place
in the =init-<package>= function, calls to =spacemacs|use-package-add-hook=
*always* happen in the =pre-init-<package>= functions, and not in
=post-init-<package>=.

** Best practices
If you break any of these rules, you should know what you are doing and have a
good reason for doing it.

*** Package ownership
Each package should be owned by one layer only. The layer that owns the
package should define its =init= function. Other layers should rely on
=pre-init= or =post-init= functions.

*** Localize your configuration
*Each function can only assume the existence of one package.* With some
exceptions, the =pre-init=, =init= and =post-init= functions can /only/
configure exactly the package they are defined for. Since the user can exclude
an arbitrary set of packages, there is no /a priori/ safe way to assume that
another package is included. Use =configuration-layer/package-usedp= if you
must.

This can be very challenging, so please take this as a guideline and not
something that is absolute. It is quite possible for the user to break her
Spacemacs installation by excluding the wrong packages, and it is not our
intention to prevent this at all costs.

*** Load ordering
In Spacemacs, layers are loaded in order of inclusion in the dotfile, and
packages are loaded in alphabetical order. In the rare cases where you make use
of this property, you should make sure to document it well. Many will assume
that layers can be included in arbitrary order (which is true in most cases),
and that packages can be renamed without problems (which is also in most cases).

Preferably, write your layer so that it is independent of load ordering. The
=pre= - and =post-init= functions are helpful, together with
=configuration-layer/package-usedp=.

*** No require
Do not use require. If you find yourself using =require=, you are almost
certainly doing something wrong. Packages in Spacemacs should be loaded through
auto-loading, and not explicitly by you. Calls to =require= in package init
functions will cause a package to be loaded upon startup. Code in an =:init=
block of =use-package= should not cause anything to be loaded, either. If you
need a =require= in a =:config= block, that is a sign that some other package is
missing appropriate auto-loads.

*** Auto-load everything
Defer everything. You should have a very good reason not to defer the loading
of a package.
* layer
** spacemacs-project  
   配置文件 .projectile 
   排除相对目录/文件 - /path/to/somefile 
  
   排除文件 -.dot
   
   例子    
   # .agignore
   folder
   file.txt
   *.js
** html-mode
   web-mode  编辑  css 和 html
   编辑 Sass/Scss 和 Less
*** 编译 Less
  C-c C-c         less-css-compile
  C-M-q           prog-indent-sexp

  emmet-mode 自动生成 html css
 evil-matchit 在 Tags 中导航 用 %
 slim 和 pug 模板 用 slim-mode 和 pug-mode 编辑
 急着看，用 impatient-mode
** lsp java
*** LSP Mode commands
  lsp-execute-code-action - Execute code action.
  lsp-rename - Rename symbol at point
  lsp-describe-thing-at-point - Display help for the thing at point.
  lsp-goto-type-definition - Go to type definition
  lsp-goto-implementation - Go to implementation
  lsp-restart-workspace - Restart project
  lsp-format-buffer - Format current buffer
  lsp-symbol-highlight - Highlight all relevant references to the symbol under point.
  lsp-workspace-folders-add - Add workspace folder
  lsp-workspace-folders-remove - Remove workspace folder
  lsp-workspace-folders-switch - Switch workspace folder
*** LSP Java commands
  lsp-java-organize-imports - Organize imports
  lsp-java-build-project - Perform partial or full build for the projects
  lsp-java-update-project-configuration - Update project configuration
  lsp-java-actionable-notifications - Resolve actionable notifications
  lsp-java-update-user-settings - Update user settings (Check the options in the table bellow.)
  lsp-java-update-server - Update server instalation.
  Refactoring
  LSP Java provides rich set of refactorings via Eclipse JDT Language Server code actions and some of them are bound to Emacs commands:

  lsp-java-extract-to-constant - Extract constant refactoring
  lsp-java-add-unimplemented-methods - Extract constant refactoring
  lsp-java-create-parameter - Create parameter refactoring
  lsp-java-create-field - Create field refactoring
  lsp-java-create-local - Create local refactoring
  lsp-java-extract-method - Extract method refactoring
  lsp-java-add-import - Add missing import
  Treemacs
  lsp-java provides experimental integration with treemacs which provides option to navigate through package dependecies, namespaces, classes and resources.

  lsp-java-treemacs-register activates lsp-java/treemacs integration.
  lsp-java-treemacs-unregister deactivates lsp-java/treemacs integration.
  lsp-java-update-project-uris refresh the project URIs.
  Classpath browsing
  lsp-java the command lsp-java-classpath-browse which allows users to browse the structure of current projects classpath. From that view the users could go to the particular item. Classpath

  Spring Initializr

  lsp-java provides a frontend for Spring Initializr which simplifies the creation
  of Spring Boot projects directly from Emacs via lsp-java-spring-initializr.
  Create Spring boot project

  Supported settings
  lsp-java-server-install-dir - Install directory for eclipsejdtls-server
  lsp-java-java-path - Path of the java executable
  lsp-java-workspace-dir - LSP java workspace directory
  lsp-java-workspace-cache-dir - LSP java workspace cache directory
  lsp-java-vmargs - Specifies extra VM arguments used to launch the Java Language Server
  lsp-java-incomplete-classpath - Specifies the severity of the message when the classpath is incomplete for a Java file
  lsp-java-update-build-configuration - Specifies how modifications on build files update the Java classpath/configuration
  lsp-java-import-exclusions - Configure glob patterns for excluding folders
  lsp-java-favorite-static-members - Defines a list of static members or types with static members
  lsp-java-import-order - Defines the sorting order of import statements
  lsp-java-trace-server - Traces the communication between Emacs and the Java language server
  lsp-java-enable-file-watch - Defines whether the client will monitor the files for changes
  lsp-java-format-enabled - Specifies whether or not formatting is enabled on the language server
  lsp-java-format-settings-url - Specifies the file path to the formatter xml url
  lsp-java-format-settings-profile - Specifies the formatter profile name
  lsp-java-format-comments-enabled - Preference key used to include the comments during the formatting
  lsp-java-save-action-organize-imports - Organize imports on save
  lsp-java-bundles - List of bundles that will be loaded in the JDT server
  lsp-java-import-gradle-enabled - Enable/disable the Gradle importer
  lsp-java-import-maven-enabled - Enable/disable the Maven importer
  lsp-java-auto-build - Enable/disable the 'auto build'
  lsp-java-progress-report - [Experimental] Enable/disable progress reports from background processes on the server
  lsp-java-completion-guess-arguments - When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
  Additional packages
  lsp-ui : Flycheck, documentation and code actions support.
  company-lsp : LSP company backend.
  treemacs : Project viewer.
  FAQ
  LSP Java is showing to many debug messages, how to stop that? Add the following configuration.
  (setq lsp-inhibit-message t)
  lsp-ui does not display all of the actions on the current point(e. g "Extract constant")? LSP UI by default sends current line bounds for action region which breaks forces JDT server to return only "Extract method action."
  (setq lsp-ui-sideline-update-mode 'point)
  LSP Java does not provide completion, go to definition for some of the files?
  When particular file is not part of imported project Eclipse JDT Language Server could not calculate the current classpath.
*** 快捷键
 重启服务   lsp-restart-workspace
**** Code intelligence shorcuts
 | Key binding   | Description                           |
 |---------------+---------------------------------------|
 | ~SPC m g g~   | Go to definition                      |
 | ~SPC m g r~   | 查引用                   |
 | ~SPC m g R~   | Peek references using ~lsp-ui~        |
 | ~SPC m g d~   | Goto type definition                  |
 | ~SPC m g a~   | Search type in project                |
 | ~SPC m g A~   | Search type in project using ~lsp-ui~ |
 | ~SPC m h h~   | Describe thing at point               |
 | ~SPC m e l~   | List project errors/warnings          |
 | ~SPC m p u~   | Refresh user settings                 |
 | ~SPC m e a~   | Execute code action                   |
 | ~SPC m q r~   | Restart workspace                     |
 | ~SPC m r o i~ | Organize imports                      |
 | ~SPC m r r~   | Rename symbol                         |
 | ~SPC m r a i~ | Add import                            |
 | ~SPC m r a m~ | Add unimplemented methods             |
 | ~SPC m r c p~ | Create parameter                      |
 | ~SPC m r c f~ | Create field                          |
 | ~SPC m r e c~ | Extract constant                      |
 | ~SPC m r e l~ | Extract local                         |
 | ~SPC m r e m~ | Extract method                        |
 | ~SPC m c c~   | Build project                         |
 | ~SPC m a n~   | Actionable notifications              |
 | ~SPC m =~     | Format code                           |
**** Debugger shorcuts

 | Key binding   | Description                     |
 |---------------+---------------------------------|
 | ~SPC m d t t~ | Debug test method               |
 | ~SPC m d t c~ | Debug test class                |
 | ~SPC m d j~   | Debug java class(main method).  |
 |---------------+---------------------------------|
 | ~SPC m t t~   | Run test method                 |
 | ~SPC m t c~   | Run test class                  |
 |---------------+---------------------------------|
 | ~SPC m d d d~ | start debugging                 |
 | ~SPC m d d l~ | debug last configuration        |
 | ~SPC m d d r~ | debug recent configuration      |
 |---------------+---------------------------------|
 | ~SPC m d c~   | continue                        |
 | ~SPC m d i~   | step in                         |
 | ~SPC m d o~   | step out                        |
 | ~SPC m d s~   | next step                       |
 | ~SPC m d v~   | inspect value at point          |
 | ~SPC m d r~   | restart frame                   |
 |---------------+---------------------------------|
 | ~SPC m d .~   | debug transient state           |
 |---------------+---------------------------------|
 | ~SPC m d a~   | abandon current session         |
 | ~SPC m d A~   | abandon all process             |
 |---------------+---------------------------------|
 | ~SPC m d e e~ | eval                            |
 | ~SPC m d e r~ | eval region                     |
 | ~SPC m d e t~ | eval value at point             |
 |---------------+---------------------------------|
 | ~SPC m d S s~ | switch session                  |
 | ~SPC m d S t~ | switch thread                   |
 | ~SPC m d S f~ | switch frame                    |
 |---------------+---------------------------------|
 | ~SPC m d I i~ | inspect                         |
 | ~SPC m d I r~ | inspect region                  |
 | ~SPC m d I t~ | inspect value at point          |
 |---------------+---------------------------------|
 | ~SPC m d b b~ | toggle a breakpoint             |
 | ~SPC m d b c~ | change breakpoint condition     |
 | ~SPC m d b l~ | change breakpoint log condition |
 | ~SPC m d b h~ | change breakpoint hit count     |
 | ~SPC m d b a~ | add a breakpoint                |
 | ~SPC m d b d~ | delete a breakpoint             |
 | ~SPC m d b D~ | clear all breakpoints           |
 |---------------+---------------------------------|
 | ~SPC m d '_~  | Run debug REPL                  |
 |---------------+---------------------------------|
 | ~SPC m d w l~ | list local variables            |
 | ~SPC m d w o~ | goto output buffer if present   |
 | ~SPC m d w s~ | list sessions                   |
 | ~SPC m d w b~ | list breakpoints                |

** Speed Reading 幻灯片 单行浏览
    | ~SPC a R~ | Start Spray   |
    | ~SPC~     | Pause Spray   |
    | ~h~       | Backward word |
    | ~l~       | Forward word  |
    | ~f~       | Faster speed  |
    | ~s~       | Slower speed  |
    | ~q~       | Quit Spray    |
** cscope  代码浏览
Before using any helm-cscope commands, remember to create a Cscope index file.
Do it by running the command =cscope-index-files= for C and C++ projects, or the
command =cscope/run-pycscope= for Python projects, bound to ~SPC m g i~.

使用前先建立索引文件 

| ~SPC m g =~ | Find assignments to a symbol                  |
| ~SPC m g c~ | find which functions are called by a function |
| ~SPC m g C~ | find where a function is called               |
| ~SPC m g d~ | find global definition of a symbol            |
| ~SPC m g e~ | search regular expression                     |
| ~SPC m g f~ | find a file                                   |
| ~SPC m g F~ | find which files include a file               |
| ~SPC m g i~ | create Cscope index                           |
| ~SPC m g r~ | find references of a symbol                   |
| ~SPC m g x~ | search text                                   |

** 英汉转换 [[file:~/.emacs.d/private/companyenglish/][layers]]
   打开英语提示 (toggle-company-english-helper)
** php larer
   需要初始化工程 
   cd /root/of/project
   touch .ac-php-conf.json
   
   然后执行 Inside of spacemacs run:
   = ac-php-remake-tags-all =

  | 查关键词  | php-search-documentation |
  | 浏览手册  | php-browse-manual        |
  | 标记函数  | mark-defun               |
  | 跳到定义  | ~SPC m g g~              |
  | jump back | ~C-t~                    |
** debug layer
   java -agentlib:jdwp=transport=dt_socket,server=y,address=<port> <class>
 | ~SPC m d d~ | open cmd buffer      |
 | ~bb~        | set break            |
 | ~bc~        | clear break          |
 | ~bd~        | delete break         |
 | ~bs~        | disable break        |
 | ~be~        | enable break         |
 | ~c~         | continue             |
 | ~i~         | step into            |
 | ~J~         | jump to current line |
 | ~o~         | step out             |
 | ~q~         | quit debug           |
 | ~r~         | restart              |
 | ~s~         | step over            |
 | ~S~         | goto cmd buffer      |
 | ~v~         | eval variable        |
** sql layer
 #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layers '(
     (sql :variables
          sql-capitalize-keywords t
          sql-capitalize-keywords-blacklist '("name" "varchar"))))
 #+END_SRC
*** 键盘绑定
  | 显示*SQL*buffer| ~SPC m b b~ |
  | 显示数据库中的表 | ~SPC m l a~ |
  | 显示表信息       | ~SPC m l t~ |
  | 发送 buffer 执行   | ~SPC m s b~ |
  | 发送选区执行     | ~SPC m s r~ |

** html layer
*** 键盘绑定  
**** Web 文件
     | 实时预览     | ~SPC m i~   |
     | 到对应标签   | ~SPC m g b~ |
     | 到子标签     | ~SPC m g c~ |
     | 导航到父标签 | ~SPC m g p~ |
**** CSS/SCSS
     | quickly navigate CSS rules | ~SPC m g h~ |
**** [[file:~/book/program/cheatsheet-a5.pdf][emmet-mode]] 
*** 缩略元素 C-j 扩展
    - HTML abbreviations
      - Basic tags
        a                       <a href=""></a>
        a.x                    <a class="x" href=""></a>
        a#q.x               <a id="q" class="x" href=""></a>
        a#q.x.y.z          <a id="q" class="x y z" href=""></a>
        #q                     <div id="q"> </div>
        .x                       <div class="x"> </div>
        #q.x                   <div id="q" class="x"> </div>
        #q.x.y.z              <div id="q" class="x y z"> </div>
      - Empty tags
        a/                       <a href=""/>
        a/.x                     <a class="x" href=""/>
        a/#q.x                   <a id="q" class="x" href=""/>
        a/#q.x.y.z               <a id="q" class="x y z" href=""/>
        Self-closing tags
        input[type=text]         <input type="text" name="" value=""/>
        img                      <img src="" alt=""/>
        img>metadata/*2          <img src="" alt=""> <metadata/> <metadata/> </img>
      - Siblings
          a+b                      <a href=""></a> <b></b>
          a+b+c                    <a href=""></a> <b></b> <c></c>
          a.x+b                    <a class="x" href=""></a> <b></b>
          a#q.x+b                  <a id="q" class="x" href=""></a> <b></b>
          a#q.x.y.z+b              <a id="q" class="x y z" href=""></a> <b></b>
          a#q.x.y.z+b#p.l.m.n      <a id="q" class="x y z" href=""></a> <b id="p" class="l m n"></b>
      - Tag expansion
          table+                   <table> <tr> <td> </td> </tr> </table>
          dl+                      <dl> <dt></dt> <dd></dd> </dl>
          ul+                      <ul> <li></li> </ul>
          ul++ol+                  <ul> <li></li> </ul> <ol> <li></li> </ol>
          ul#q.x.y[m=l]            <ul id="q" class="x y" m="l"> <li></li> </ul>
      - Parent > child
         a>b                      <a href=""><b></b></a>
         a>b>c                    <a href=""><b><c></c></b></a>
         a.x>b                    <a class="x" href=""><b></b></a>
         a#q.x>b                  <a id="q" class="x" href=""><b></b></a>
         a#q.x.y.z>b              <a id="q" class="x y z" href=""><b></b></a>
         a#q.x.y.z>b#p.l.m.n      <a id="q" class="x y z" href=""><b id="p" class="l m n"></b></a>
         #q>.x                    <div id="q"> <div class="x"> </div> </div>
         a>b+c                    <a href=""> <b></b> <c></c> </a>
         a>b+c>d                  <a href=""> <b></b> <c><d></d></c> </a>
      - Climb-up
         a>b^c                    <a href=""><b></b></a><c></c>
         a>b>c^d                  <a href=""> <b><c></c></b> <d></d> </a>
         a>b>c^^d                 <a href=""><b><c></c></b></a> <d></d>
      - Multiplication
           a*1                      <a href=""></a>
           a*2                      <a href=""></a> <a href=""></a>
           a/*2                     <a href=""/> <a href=""/>
           a*2+b*2                  <a href=""></a> <a href=""></a> <b></b> <b></b>
           a*2>b*2                  <a href=""> <b></b> <b></b> </a> <a href=""> <b></b> <b></b> </a>
           a>b*2                    <a href=""> <b></b> <b></b> </a>
           a#q.x>b#q.x*2            <a id="q" class="x" href=""> <b id="q" class="x"></b> <b id="q" class="x"></b> </a>
           a#q.x>b/#q.x*2           <a id="q" class="x" href=""> <b id="q" class="x"/> <b id="q" class="x"/> </a>
      - Item numbering
           ul>li.item$*3            <ul> <li class="item1"></li> <li class="item2"></li> <li class="item3"></li> </ul>
           ul>li.item$$$*3          <ul> <li class="item001"></li> <li class="item002"></li> <li class="item003"></li> </ul>
           ul>li.item$@-*3          <ul> <li class="item3"></li> <li class="item2"></li> <li class="item1"></li> </ul>
           ul>li.item$@3*3          <ul> <li class="item3"></li> <li class="item4"></li> <li class="item5"></li> </ul>
           ul>li.item$@-3*3         <ul> <li class="item5"></li> <li class="item4"></li> <li class="item3"></li> </ul>
           a$b$@-/*5                <a1b5/> <a2b4/> <a3b3/> <a4b2/> <a5b1/>
           a.$*2>b.$$@-*3           <a class=\"1\" href=""> <b class=\"03\"></b> <b class=\"02\"></b> <b class=\"01\"></b> </a> <a class=\"2\" href=""> <b class=\"03\"></b> <b class=\"02\"></b> <b class=\"01\"></b> </a>
      - Properties
           b[x]                     <b x=""></b>
           b[x=]                    <b x=""></b>
           b[x=""]                  <b x=""></b>
           b[x=y]                   <b x="y"></b>
           b[x="y"]                 <b x="y"></b>
           b[x="()"]                <b x="()"></b>
           b[x m]                   <b x="" m=""></b>
           b[x= m=""]               <b x="" m=""></b>
           b[x=y m=l]               <b x="y" m="l"></b>
           b/[x=y m=l]              <b x="y" m="l"/>
           b#foo[x=y m=l]           <b id="foo" x="y" m="l"></b>
           b.foo[x=y m=l]           <b class="foo" x="y" m="l"></b>
           b#foo.bar.mu[x=y m=l]    <b id="foo" class="bar mu" x="y" m="l"></b>
           b/#foo.bar.mu[x=y m=l]   <b id="foo" class="bar mu" x="y" m="l"/>
           b[x=y]+b                 <b x="y"></b> <b></b>
           b[x=y]+b[x=y]            <b x="y"></b> <b x="y"></b>
           b[x=y]>b                 <b x="y"><b></b></b>
           b[x=y]>b[x=y]            <b x="y"><b x="y"></b></b>
           b[x=y]>b[x=y]+c[x=y]     <b x="y"> <b x="y"></b> <c x="y"></c> </b>
      - Parentheses
         (a)                      <a href=""></a>
         (a)+(b)                  <a href=""></a> <b></b>
         a>(b)                    <a href=""><b></b></a>
         (a>b)>c                  <a href=""><b></b></a>
         (a>b)+c                  <a href=""><b></b></a> <c></c>
         z+(a>b)+c+k              <z></z> <a href=""><b></b></a> <c></c> <k></k>
         (x)*2                    <x></x> <x></x>
         ((x)*2)                  <x></x> <x></x>
         ((x))*2                  <x></x> <x></x>
         (x>b)*2                  <x><b></b></x> <x><b></b></x>
         (x+b)*2                  <x></x> <b></b> <x></x> <b></b>
      - Text
          a{Click me}              <a href="">Click me</a>
          a>{Click me}*2           <a href=""> Click me Click me </a>
          x{click}+b{here}         <x>click</x> <b>here</b>
          span>{click}+b{here}     <span> click <b>here</b> </span>
          p>{Click}+span{here}+{ to continue} <p> Click <span>here</span> to continue </p>
          p{Click}+span{here}+{ to continue} <p> Click </p> <span>here</span> to continue
      - Filter: HTML with comments
          a.b|c                    <!-- .b --> <a class="b" href=""></a> <!-- /.b -->
          #a>.b|c                  <!-- #a --> <div id="a"> <!-- .b --> <div class="b"> </div> <!-- /.b --> </div> <!-- /#a -->
    - CSS abbreviations
      - Basic Usage
        - p1-2!+m10e+bd1#2s        padding: 1px 2px !important; margin: 10em; border: 1px #222 solid;
      - Keywords
         m                        margin: ;
         bg+                      background: #fff url() 0 0 no-repeat;
         c                        color: #000;
** Yasnippet 片段
   创建片段  yas-new-snippet
| ~M-/~       | 展开片段 Expand a snippet if text before point is a prefix of a snippet            |
| ~SPC i s~   | 列出片段 List all current yasnippets for inserting                                 |
| ~SPC i S c~ | 创建片段 create a snippet from an active region                                    |
| ~SPC i S e~ | Expand the snippet just created with ~SPC i y~                                     |
| ~SPC i S w~ | 保存片段 Write the snippet inside =private/snippets= directory for future sessions |

** bibtex
| ~SPC m T x~ | org-preview-latex-fragment                    |
| ~SPC m j~ / ~g j~ / ~C-j~ | Next entry                                 |
| ~SPC m k~ / ~g k~ / ~C-k~ | Previous entry                             |
| ~SPC m p~                 | Open PDF                                   |
| ~SPC m n~                 | Open notes                                 |
| ~SPC m b~                 | Open browser                               |
| ~SPC m i~                 | Insert new entry                           |
| ~SPC m s~                 | Sort entry                                 |
| ~SPC m h~                 | Various actions on entry                   |
| ~SPC m l a~               | Lookup and add arXiv paper (don’t get PDF) |
| ~SPC m l A~               | Lookup and add arXiv paper (download PDF)  |
| ~SPC m l d~               | Lookup and add paper by DOI                |
| ~SPC m l i~               | Lookup and add book by ISBN                |
| ~SPC m l p~               | Lookup and add paper by PMID               |

In addition, =org-mode=, =latex-mode= and =markdown-mode= all have the following
key binding added:

| Key binding   | Description                                |
|---------------+--------------------------------------------|
| ~SPC m i c~   | Insert citation                            |
** latex
| Key binding   | Description                                |
|---------------+--------------------------------------------|
| ~SPC m -~     | recenter output buffer                     |
| ~SPC m ​,​~     | TeX command on master file                 |
| ~SPC m .~     | mark LaTeX environment                     |
| ~SPC m *~     | mark LaTeX section                         |
| ~SPC m %~     | comment or uncomment a paragraph           |
| ~SPC m ;~     | comment or uncomment a region              |
| ~SPC m a~     | run all commands (compile and open viewer) |
| ~SPC m b~     | build                                      |
| ~SPC m c~     | close LaTeX environment                    |
| ~SPC m e~     | insert LaTeX environment                   |
| ~SPC m i i~   | insert =\item=                             |
| ~SPC m k~     | kill TeX job                               |
| ~SPC m l~     | recenter output buffer                     |
| ~SPC m m~     | insert LaTeX macro                         |
| ~SPC m s~     | insert LaTeX section                       |
| ~SPC m v~     | view output                                |
| ~SPC m h d~   | TeX documentation, can be very slow        |
| ~SPC m f e~   | fill LaTeX environment                     |
| ~SPC m f p~   | fill LaTeX paragraph                       |
| ~SPC m f r~   | fill LaTeX region                          |
| ~SPC m f s~   | fill LaTeX section                         |
| ~SPC m p r~   | preview region                             |
| ~SPC m p b~   | preview buffer                             |
| ~SPC m p d~   | preview document                           |
| ~SPC m p e~   | preview environment                        |
| ~SPC m p s~   | preview section                            |
| ~SPC m p p~   | preview at point                           |
| ~SPC m p f~   | cache preamble for preview                 |
| ~SPC m p c~   | clear previews                             |
| ~SPC m v~     | view                                       |
| ~SPC m x b~   | make font bold                             |
| ~SPC m x B~   | make font medium weight                    |
| ~SPC m x c~   | make font monospaced (for code)            |
| ~SPC m x e~   | make font emphasised                       |
| ~SPC m x i~   | make font italic                           |
| ~SPC m x o~   | make font oblique                          |
| ~SPC m x r~   | remove font properties                     |
| ~SPC m x f a~ | use calligraphic font                      |
| ~SPC m x f c~ | use small-caps font                        |
| ~SPC m x f f~ | use sans serif font                        |
| ~SPC m x f n~ | use normal font                            |
| ~SPC m x f r~ | use serif font                             |
| ~SPC m x f u~ | use upright font                           |

Folding
Available only when =latex-enable-folding= is non nil.

| Key binding | Description          |
|-------------+----------------------|
| ~SPC m z =~ | fold TeX math        |
| ~SPC m z b~ | fold TeX buffer      |
| ~SPC m z e~ | fold TeX environment |
| ~SPC m z m~ | fold TeX macro       |
| ~SPC m z r~ | fold TeX region      |

RefTeX

| Key binding   | Description                           |
|---------------+---------------------------------------|
| ~SPC m r c~   | reftex-citation                       |
| ~SPC m r g~   | reftex-grep-document                  |
| ~SPC m r i~   | reftex-index-selection-or-word        |
| ~SPC m r I~   | reftex-display-index                  |
| ~SPC m r TAB~ | reftex-index                          |
| ~SPC m r l~   | reftex-label                          |
| ~SPC m r p~   | reftex-index-phrase-selection-or-word |
| ~SPC m r P~   | reftex-index-visit-phrases-buffer     |
| ~SPC m r r~   | reftex-reference                      |
| ~SPC m r s~   | reftex-search-document                |
| ~SPC m r t~   | reftex-toc                            |
| ~SPC m r T~   | reftex-toc-recenter                   |
| ~SPC m r v~   | reftex-view-crossref                  |
** google translate
   翻译 google-translate-at-point-reverse  SPC x g t
   反向翻译 google-translate-query-translate-reverse 
   支持列表 google-translate-supported-languages
   

   定义输出方向 
   google-translate-output-destination
   nil  弹出缓冲区
   echo-area 
   popup  弹出窗口
   kill-ring 

** w3m 浏览器
| 打开网址      | SPC a w o |
| 打开文件      | SPC a w f |
| 搜索          | SPC a w s |
| Helm w3m 书签 | SPC a w b |

** epub
   | Key binding | Description         |
| ~g V~       | View content source |

Hint: use ~SPC w c~ to center the buffer.

** c-c++
   反汇编 disaster
   代码格式化 clang-format
   反射 smeantic-refactor
   代码导航 cscope
   自动补全 auto-completion
   调试器 realgud 

   | ~SPC m g a~ | open matching file                                            |
   |             | (e.g. switch between .cpp and .h, requires a project to work) |
   | ~SPC m g A~ | open matching file in another window                          |
   |             | (e.g. switch between .cpp and .h, requires a project to work) |
   | ~SPC m D~   | disaster: disassemble c/c++ code                              |
   | ~SPC m r .~ | srefactor: refactor thing at point.                           |

*** 通用编译
    编译 compile
*** 导航 [ goto ]

| Key binding | Description               |
|-------------+---------------------------|
| ~SPC m g &~ | find references (address) |
| ~SPC m g R~ | find references (read)    |
| ~SPC m g W~ | find references (write)   |
| ~SPC m g c~ | find callers              |
| ~SPC m g C~ | find callees              |
| ~SPC m g v~ | vars                      |
| ~SPC m g f~ | find file at point (ffap) |
| ~SPC m g F~ | ffap other window         |

**** goto/hierarchy

| Key binding   | Description                 |
|---------------+-----------------------------|
| ~SPC m g h b~ | base class(es)              |
| ~SPC m g h d~ | derived class(es) [ccls]    |
| ~SPC m g h c~ | call hierarchy              |
| ~SPC m g h C~ | call hierarchy (inv)        |
| ~SPC m g h i~ | inheritance hierarchy       |
| ~SPC m g h I~ | inheritance hierarchy (inv) |

**** goto/member

| Key binding   | Description             |
|---------------+-------------------------|
| ~SPC m g m h~ | member hierarchy        |
| ~SPC m g m t~ | member types [ccls]     |
| ~SPC m g m f~ | member functions [ccls] |
| ~SPC m g m v~ | member variables [ccls] |

*** 调试[ debugger ]
 | Key binding   | Description                     |
 |---------------+---------------------------------|
 | ~SPC m d d d~ | start debugging                 |
 | ~SPC m d d l~ | debug last configuration        |
 | ~SPC m d d r~ | debug recent configuration      |
 |---------------+---------------------------------|
 | ~SPC m d c~   | continue                        |
 | ~SPC m d i~   | step in                         |
 | ~SPC m d o~   | step out                        |
 | ~SPC m d s~   | next step                       |
 | ~SPC m d v~   | inspect value at point          |
 | ~SPC m d r~   | restart frame                   |
 |---------------+---------------------------------|
 | ~SPC m d .~   | debug transient state           |
 |---------------+---------------------------------|
 | ~SPC m d a~   | abandon current session         |
 | ~SPC m d A~   | abandon all process             |
 |---------------+---------------------------------|
 | ~SPC m d e e~ | eval                            |
 | ~SPC m d e r~ | eval region                     |
 | ~SPC m d e t~ | eval value at point             |
 |---------------+---------------------------------|
 | ~SPC m d S s~ | switch session                  |
 | ~SPC m d S t~ | switch thread                   |
 | ~SPC m d S f~ | switch frame                    |
 |---------------+---------------------------------|
 | ~SPC m d I i~ | inspect                         |
 | ~SPC m d I r~ | inspect region                  |
 | ~SPC m d I t~ | inspect value at point          |
 |---------------+---------------------------------|
 | ~SPC m d b b~ | toggle a breakpoint             |
 | ~SPC m d b c~ | change breakpoint condition     |
 | ~SPC m d b l~ | change breakpoint log condition |
 | ~SPC m d b h~ | change breakpoint hit count     |
 | ~SPC m d b a~ | add a breakpoint                |
 | ~SPC m d b d~ | delete a breakpoint             |
 | ~SPC m d b D~ | clear all breakpoints           |
 |---------------+---------------------------------|
 | ~SPC m d '_~  | Run debug REPL                  |
 |---------------+---------------------------------|
 | ~SPC m d w l~ | list local variables            |
 | ~SPC m d w o~ | goto output buffer if present   |
 | ~SPC m d w s~ | list sessions                   |
 | ~SPC m d w b~ | list breakpoints                |
** semantic 显示定义 [ ] 
   底部显示定义
   顶部显示函数
   支持 refactor

| ~SPC m r~ | srefactor: refactor thing at point. |
** debug 
| Key binding | Description     |
|-------------+-----------------|
| ~SPC m d d~ | open cmd buffer |


| Key binding | Description          |
|-------------+----------------------|
| ~bb~        | set break            |
| ~bc~        | clear break          |
| ~bd~        | delete break         |
| ~bs~        | disable break        |
| ~be~        | enable break         |
| ~c~         | continue             |
| ~i~         | step into            |
| ~J~         | jump to current line |
| ~o~         | step out             |
| ~q~         | quit debug           |
| ~r~         | restart              |
| ~s~         | step over            |
| ~S~         | goto cmd buffer      |
| ~v~         | eval variable        |
** 调试服务 [ dap,Debug Adapter Protocol ] 
** 调试管理器 [ realgud ] [ 每个语言不同调试器 ]
   自动调试 set annotate 1
** emoji 
* mode
** 绘图模式 artist-mode
   Shift+中键 选择画什么图形
   Shift+ 右键 删除一个区域
   
  | 操作       | 无 shift                                                                                    | shift                                                                             |
  | pen        | 单击，在鼠标点填充一个“填充符号”，默认为”.”；按下左键，拖动，抬起，绘制填充符号组成的线 | 单击，在鼠标点填充一个“o”；按下左键，拖动，抬起，绘制一条从初始点到最终点的直线 |
  | Line       | 任意方向的线                                                                                | 直线                                                                              |
  | Rectangle  | 矩形                                                                                        | 正方形 1                                                                          |
  | Poly-line  | 任意方向的多边形                                                                            | 每条线都是直线的多边形                                                            |
  | Ellipses   | 椭圆                                                                                        | 圆 2                                                                              |
  | Text       | 文本                                                                                        | 覆盖式文本                                                                        |
  | Spray-can  | 喷雾器 3                                                                                    | 设置喷雾器的大小                                                                  |
  | Erase      | 橡皮，擦掉一个字符                                                                          | 擦掉矩形内字符                                                                    |
  | Vaporize   | 擦除一行                                                                                    | 擦除所有相连的行                                                                  |
  | Cut        | 剪切矩形                                                                                    | 剪切正方形                                                                        |
  | copy       | 复制矩形                                                                                    | 复制正方形                                                                        |
  | paste      | 粘贴                                                                                        | 粘贴                                                                              |
  | Flood-fill | 填充工具，填充                                                                              | 填充                                                                              |
** hackernews
