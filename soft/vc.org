#+TITLE: 版本控制简介 
#+DESCRIPTION: 版本控制
#+TAGS[]: git
#+CATEGORIES[]: 技术
#+DATE: 2019-12-25T06:23:31+08:00

备份工具，比如你做了一个椅子，然后用这工具备份一下，误删以后可以用这工具恢复（不能误删椅子的备份）。然后呢，你的椅子可能不是很完美，还要修修改改，这是你可以同时备份椅子的新的版本，如此而已。

# more   
基本概念
- 仓库 (存放"椅子"的地方)
- 基线 (基本的椅子)
- 分支 (基本椅子分出来的具体功能的椅子，如人体工学椅，躺椅。。)
- 冲突 (多人合作修改同一把椅子，给出的提示)
  
下面以比较流行的 ~git~ 为例说明吧

* git 
** 初始配置
   设置一下仓库作者的个人信息什么的 
   #+begin_src 
   git config [--system,--global, --list]
   
   用户名 user.name = "用户名"
   邮箱 user.email = "邮箱"
   #+end_src
   
*** 配置 SSH 远程传输
       创建 SSH Key：
       #+begin_src shell
         $ ssh-keygen -t rsa -C "youremail@example.com"
       #+end_src
       然后把公钥 id_rsa.pub 的内容复制到 Github "Account settings" 的 SSH Keys 中。
       : 可以使用 ssh -v git@github.com 命令来测试链接是否畅通
** 用法
*** 初始化版本系统 
    #+begin_src sh
      git init <DIR>
    #+end_src
    
*** 暂存区管理
    #+begin_quote
    暂存区保存你历史记录的一个缓存区，为的就是让你"多此一举"，进行下一步确认是否保存快照
    #+end_quote
**** 把文件加入暂存区 
      #+begin_src sh
        git add <modified files>
        git add . 
      #+end_src
**** 删除暂存区里的文件,如需纳入版本库，需要重新添加   
     #+begin_src sh
       git rm --cached <file> 
     #+end_src
 
**** 重置暂存,就是恢复成未暂存的状态
      #+begin_src sh
        git reset HEAD <file> 
        #+end_src
**** 改名文件
     #+begin_src sh
     git mv [file-original] [file-renamed]
     #+end_src

*** 本地库管理
**** 保存到本地库   
     #+begin_src sh
       git commit -m "msg"
     #+end_src

**** 撤销 [ 恢复到修改前] 
     #+begin_src sh
       git checkout <file>
       # 从另一个分支恢复修改 
       git checkout <branch>  <file>
     #+end_src
     
**** 反转(用本地版本库的东西替换掉本地的文件,再执行一次反过来)
     #+begin_src sh
       git revert HEAD                  撤销前一次 commit
       git revert HEAD^               撤销前前一次 commit
       git revert commit-id（比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。
       git revert 是提交一个新的版本，将需要 revert 的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。
     #+end_src
     
**** 分支管理
***** 创建分支 
      #+begin_src sh
        git branch <BRANCHNAME> 
        # 从某分支创建分支 
        git checkout -b <ALTERNATE> <BRANCHNAME> 
      #+end_src

***** 切换分支 
      #+begin_src sh
        git checkout <BRANCHNAME> 
      #+end_src
***** 合并分支
****** 直接合并 把两条分支上的历史轨迹合并 
       #+begin_src sh
       git merge
       #+end_src
       
****** 压合合并 如果想把某个分支的提交作为一个整体记录时，可以使用压合合并。
       #+begin_src sh
       git merge --squash <BRANCH>
       #+end_src
****** 拣选合并 只需合并某个提交，而不是全部改动.
       #+begin_src sh
       git cherry-pick <ID>
       #+end_src
***** 修改分支名称
#+begin_src sh
git branch -m <BRANCHNAME> <NEWBRANCHNAME> 
#+end_src
***** 删除分支 
      #+begin_src sh
        git branch -d <BRANCHNAME> 
      #+end_src
***** stash(储藏) 
      可以先用 git stash save xxx 来保存工作区的内容，然后新建 一个分支并调用 git stash pop
      
**** 分支的变基 rebase
     #+begin_src shell
       git checkout experiment
       git rebase master
     #+end_src

*** 远程仓库管理
**** 克隆远程到本地仓库
     #+begin_src sh
     git clone RESP
     git clone --depth=1 RESP 只克隆最新的
     #+end_src
**** 添加远程源 
     #+begin_src sh
       git remote add origin https://github.com/hanyudeye/test.git 
     #+end_src
     
**** 远程同步
     #+begin_src sh
       git push -u origin master
       # 将本地分支上的提交推送到远程某分支 
       git push origin <BRANCH>:<REMOTEBRANCH>
     #+end_src
**** 更新本地
     #+begin_src sh
     git pull
     git pull git://github.com/tom/test.git
     #+end_src
**** 查看远程分支情况
     #+begin_src sh 
     git branch -r # 查看远程 branch
     git checkout -b bug_fix_local bug_fix_remote #把本地端切换为远程的 bug_fix_remote branch 并命名为 bug_fix_local
     #+end_src
**** 修改远程仓库 
***** 修改
     #+begin_src sh
     git remote  set-url origin [url]
     #+end_src
***** 先删后加
     #+begin_src sh
     git remote rm origin
     git remote add origin [url]
     #+end_src
**** 强制覆盖本地
     #+begin_src sh
     git fetch --all
     git reset --hard origin/master
     git pull
     #+end_src
*** 日志查看
**** 仓库状态 
     #+begin_src sh
     git status
     git status -s 简短信息
     git remote -v 列出服务器地址
     #+end_src
**** 查看提交历史
     #+begin_src sh
       git log
       git log --oneline 简洁--graph 拓扑图 '--reverse'逆向显示
     #+end_src
     --author 指定用户日志
     如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。
**** 查看某次提交的内容   
#+begin_src sh
git show <id>
#+end_src
**** 更详细的信息 
     #+begin_src sh 
       git blame <FILE>
       # 具体行的细节
       git blame -L 12,13 <FILE>
     #+end_src
*** 比较区别
    #+begin_src sh
      比较修改文件与暂存区的区别  git diff <FILE>
      比较暂存区和版本库的区别 git diff --cached <FILE>   
      比较不同版本区别 git diff <HEAD>

      git diff branch1 branch2 --stat   //显示出所有有差异的文件列表
      git diff branch1 branch2 文件名(带路径)   //显示指定文件的详细差异
      git diff branch1 branch2                   //显示出所有有差异的文件的详细差异
         #+end_src

*** TAG  
    #+begin_quote
    这是版本信息
    #+end_quote
**** 某个分支创建标签
     #+begin_src sh
       git tag  [ TAG ] [BRANCH] 
       git tag 1.0  [branch] 
     #+end_src
     
**** 查看可发布版本 
     #+begin_src sh
       git tag 
     #+end_src
**** 签出标签
     #+begin_src sh
       git checkout 1.0
     #+end_src

*** 使用 Git 子模块跟踪外部版本库
    #+begin_src 
    添加子模块 git submodule add <RESP> <MODULENAME>
    显示子模块 git submodule
    
    克隆含子模块的版本库
    还要初始化子模块  git submodule init <MODULENAME>
    然后更细 git submodule update <MODULENAME>
    #+end_src
** gitignore 忽略文件
   #+begin_src 
   以斜杠“/”开头表示目录； 
   以星号“*”通配多个字符；
   以问号“?”通配单个字符
   以方括号“[]”包含单个字符的匹配列表；
   以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；
   规则：/fd1/*
   说明：忽略根目录下的 /fd1/ 目录的全部内容；根目录指项目的的根目录
   #+end_src
* github
  免费给你放照片的地方，如果想要隐私，就要付费了啊
** 主要功能

   #+begin_src 
   Git 仓库
   Issue
   Wiki
   Pull Request
   社交功能，follow(关注), star(赞)，Organization (组织)
   #+end_src

