* ELF 文件类型
  | 结构    |
  |---------|
  | ELF 头  |
  | .text   |
  | .rodata |
  | .data   |
  | .bss    |
  | .symtab |
  | .....   |

种类型的 ELF 文件：
可重定位文件:用户和其他目标文件一起创建可执行文件或者共享目标文件,例如 lib*.a 文件。

可执行文件：用于生成进程映像，载入内存执行,例如编译好的可执行文件 a.out。

共享目标文件：用于和其他共享目标文件或者可重定位文件一起生成 elf 目标文件或者和执行文件一起创建进程映像，例如 lib*.so 文件。

ELF 文件作用：

ELF 文件参与程序的连接(建立一个程序)和程序的执行(运行一个程序)，所以可以从不同的角度来看待 elf 格式的文件：

如果用于编译和链接（可重定位文件），则编译器和链接器将把 elf 文件看作是节头表描述的节的集合,程序头表可选。

如果用于加载执行（可执行文件），则加载器则将把 elf 文件看作是程序头表描述的段的集合，一个段可能包含多个节，节头表可选。

如果是共享文件，则两者都含有。

ELF 文件总体组成：

elf 文件头描述 elf 文件的总体信息。包括：系统相关，类型相关，加载相关，链接相关。

系统相关表示：elf 文件标识的魔术数，以及硬件和平台等相关信息，增加了 elf 文件的移植性,使交叉编译成为可能。
类型相关就是前面说的那个类型。
加载相关：包括程序头表相关信息。
链接相关：节头表相关信息。
* 执行文件结构
** ELF32 文件结构
#+BEGIN_SRC c
#define EI_NIDENT    16
typedef struct elf32_hdr{
  unsigned char    e_ident[EI_NIDENT];  //开始的 16 个字节
  Elf32_Half    e_type;  //文件类型
  Elf32_Half    e_machine;  //运行的机器类型
  Elf32_Word    e_version;  //版本
  Elf32_Addr    e_entry;  //程序入口地址
  Elf32_Off    e_phoff;  //程序头表在文件中的偏移
  Elf32_Off    e_shoff;  //节头表在文件中的偏移
  Elf32_Word    e_flags;  //标记
  Elf32_Half    e_ehsize;  //elf 文件头大小
  Elf32_Half    e_phentsize;  //程序头表项的大小
  Elf32_Half    e_phnum;  //程序头表中表项项的个数
  Elf32_Half    e_shentsize;  //节头表项大小
  Elf32_Half    e_shnum;  //节头表中表项的个数
  Elf32_Half    e_shstrndx;  //节头表的字符串节所在节头表中下标
} Elf32_Ehdr;
#+END_SRC
节头表项对应的代码定义为：
#+BEGIN_SRC c
typedef struct elf32_shdr {
  Elf32_Word    sh_name;  //节的名字，在符号表中的下标
  Elf32_Word    sh_type;  //节的类型，描述符号，代码，数据，重定位等
  Elf32_Word    sh_flags;  //读写执行标记
  Elf32_Addr    sh_addr;  //节在执行时的虚拟地址
  Elf32_Off    sh_offset;  //节在文件中的偏移量
  Elf32_Word    sh_size;  //节的大小
  Elf32_Word    sh_link;  //其它节的索引
  Elf32_Word    sh_info;  //节的其它信息
  Elf32_Word    sh_addralign;  //节对齐
  Elf32_Word    sh_entsize;  //节拥有固定大小项的大小
} Elf32_Shdr;
#+END_SRC
