* ff
#
#  _ _____                    __ _       
# (_)___ /    ___ ___  _ __  / _(_) __ _ 
# | | |_ \   / __/ _ \| '_ \| |_| |/ _` |
# | |___) | | (_| (_) | | | |  _| | (_| |
# |_|____/   \___\___/|_| |_|_| |_|\__, |
#                                  |___/ 
#
# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!
 
set $mod Mod4
 
# Font for window titles. Will also be used by the bar unless a different font
font pango:DejaVu Sans Mono Book 11,FontAwesome 11
#font xft:Noto Sans 11
#font pango:Source Code Variable Regular 12
#
#font pango:Liberation Mono Bold 12
#font pango:Terminus Bold 13
#font pango:Inconsolata Medium 13
#font pango:SNFS Display Regular 12
#font pango:Cantarell Regular 12
#font pango:Courier Prime Regular 14
 
#
## Coloring Taken from https://github.com/bookercodes/dotfiles/blob/ubuntu/.i3/config
#
set $bg-color 	         #2f343f
set $inactive-bg-color   #2f343f
set $text-color          #f3f4f5
set $inactive-text-color #676E7D
set $urgent-bg-color     #dc3225
 
# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod
 
# swith to urgent workspace:
bindsym $mod+u [urgent=latest] focus
 
# start a terminal
bindsym $mod+Return exec i3-sensible-terminal
 
# kill focused window
bindsym $mod+Shift+q kill
 
# use rofi instead of dmenu 
bindsym $mod+d exec rofi -combi-modi "run#ssh" -show combi -lines 8 -eh 1 -width 30 -padding 30 -bw 2 -font "DejaVu Sans Mono Bold 15"
 
# Printscreen calls scrot and selects the window/container which is in focus
bindsym --release $mod+Print exec scrot -q 100 -u '%Y-%m-%d_%H%M%S_$wx$h_rootwin_scrot.png' -e 'mv $f ~/Shots/'
 
# Printscreen to grab the full screen
bindsym --release Print exec scrot -q '%Y-%m-%d_%H%M%S_$wx$h_infocus_scrot.png' -e 'mv $f ~/Shots/'
 
# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+odiaeresis focus right
 
# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right
 
# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+odiaeresis move right
 
# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
 
# split in horizontal orientation
bindsym $mod+h split h
 
# split in vertical orientation
bindsym $mod+v split v
 
# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle
 
# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split
 
# toggle tiling / floating
bindsym $mod+Shift+space floating toggle
 
# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle
 
# focus the parent container
bindsym $mod+a focus parent
 
# focus the child container
#bindsym $mod+d focus child
 
 
hide_edge_borders both
# set site of border
for_window [class=".*"] border pixel 1
 
# Hide titlebar
#new_window pixel
 
# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 1: 
set $ws2 2: 
set $ws3 3: 
set $ws4 4: 
set $ws5 5: 
set $ws6 6: 
set $ws7 7:
set $ws8 8:
set $ws9 9:
set $ws10 10:
 
# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10
 
# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10
 
# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 
 
set $i3exit ~/.config/i3/scripts/i3exit
bindsym $mod+Shift+x exec --no-startup-id xautolock -locknow -nowlocker "$i3exit lock"
 
set $mode_system System (l) lock, (e) logout, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id $i3exit lock, mode "default"
    bindsym e exec --no-startup-id $i3exit logout, mode "default"
    #bindsym s exec --no-startup-id $i3exit suspend, mode "default"
    #bindsym h exec --no-startup-id $i3exit hibernate, mode "default"
    bindsym r exec --no-startup-id $i3exit reboot, mode "default"
    bindsym Shift+s exec --no-startup-id $i3exit shutdown, mode "default"
 
    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+Pause mode "$mode_system"
 
# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode
 
        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym odiaeresis resize grow width 10 px or 10 ppt
 
        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt
 
        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}
 
bindsym $mod+r mode "resize"
 
# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
#
bar {
        status_command ~/src/bumblebee-status/bumblebee-status -m mpd spacer indicator spacer battery spacer cpu spacer nic brightness spacer pasink pasource spacer weather spacer time -p indicator.include="Capslock" -p weather.location="Dublin" -p time.format="%a %h %d, %H:%M" -p nic.states="^down" -p nic.format="{ip} {ssid}" -t solarized-dark-awesome
        colors {
                background $bg-color
                separator #757575
                #                  border             background         text
                focused_workspace  $bg-color          $bg-color          $text-color
                inactive_workspace $inactive-bg-color $inactive-bg-color $inactive-text-color
                urgent_workspace   $urgent-bg-color   $urgent-bg-color   $text-color
        }
}
 
 
# window colors
#                       border              background         text                 indicator
client.focused          $bg-color           $bg-color          $text-color          #00ff00
client.unfocused        $inactive-bg-color $inactive-bg-color $inactive-text-color #00ff00
client.focused_inactive $inactive-bg-color $inactive-bg-color $inactive-text-color #00ff00
client.urgent           $urgent-bg-color    $urgent-bg-color   $text-color          #00ff00
 
 
# Pulse Audio controls
# using numeric sink id format might interfere when pavucontrol & friends
# modify the default sink. to get the name check with "pactl list sinks"
 
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo +5% #increase sound volume
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo -5% #decrease sound volume
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo toggle # mute sound
 
bindsym XF86MonBrightnessUp exec brightnessctl -d intel_backlight s +10% # increase screen brightness
bindsym XF86MonBrightnessDown exec brightnessctl -d intel_backlight s 10%- # decrease screen brightness
 
# Media player controls
bindsym $mod+t exec mpc toggle
bindsym $mod+q exec mpc stop
bindsym $mod+n exec mpc next
bindsym $mod+p exec mpc prev
bindsym $mod+x exec mpc stop
 
# workspace 5 video applications
for_window [title="VLC media player"] move workspace $ws4
for_window [class="vlc"] move workspace $ws4
 
# workspace 5 reserved for GIMP
for_window [title="GIMP Startup"] move workspace $ws5
for_window [class="Gimp"] move workspace $ws5
 
# workspace 6 for chat applications
for_window [title="ricochet"] move workspace $ws6
for_window [class="Signal"] move workspace $ws6
for_window [title="Skype"] move workspace $ws6
 
###
# autostart applications:
 
exec_always --no-startup-id xautolock -corners +00- -time 30 -locker "$i3exit lock"
 
exec_always --no-startup-id feh --bg-scale ~/Pictures/wallpapers/tape-bw.png
 
exec_always --no-startup-id mpd ~/.config/mpd/mpd.conf
exec_always --no-startup-id unclutter
exec_always --no-startup-id dunst -conf ~/.config/dunst/dunstrc
exec --no-startup-id i3-msg 'exec /usr/bin/keepassxc'
 
## Workspace 1:
exec --no-startup-id i3-msg 'workspace $ws1; append_layout ~/.config/i3/workspace-1.json'
exec --no-startup-id i3-msg 'workspace $ws1; exec i3-sensible-terminal'
exec --no-startup-id i3-msg 'workspace $ws1; exec i3-sensible-terminal'
exec --no-startup-id i3-msg 'workspace $ws1; exec i3-sensible-terminal'
 
## Workspace 2:
exec --no-startup-id i3-msg 'workspace $ws2; exec firefox'
 
## Workspace 3:
....


* ve set up i3 with the MATE desktop, they play together nicely.

我已经设置了 i3和 MATE 桌面，它们在一起运行得很好。

Steps to set it up:

设置步骤:

I started from a ubuntu server installation 我从安装 ubuntu 服务器开始
Install MATE Desktop environment: 安装 MATE 桌面环境:sudo apt install ubuntu-mate-desktop dconf-editor and reboot (you should now be able to log into ubuntu MATE) 并重新启动(您现在应该能够登录到 ubuntu MATE)
Open 打开dconf-editor:
org > mate > desktop > session > required-components. Change 。改变windowmanager from 从marco to 到i3.
org > mate > desktop > session and in 进去required-component-list, delete ，删除filemanager.
org > mate > mate-menu, remove 、移除hot-key
com > solus-project > brisk-menu, remove 、移除hot-key
Install 安装https://github.com/city41/mate-i3-applet for a nice workspace indicator 一个很好的工作空间指示器
Use the following color scheme to match with the MATE colors (in ~/.config/i3/config):

使用以下配色方案来匹配 MATE 颜色(在 ~/. config/i3/config 中) :

bar {
    tray_output None
    mode invisible
    colors {
        background #000000
        statusline #ffffff
        separator #666666

        focused_workspace  #4c7899 #285577 #ffffff
        active_workspace   #333333 #5f676a #ffffff
        inactive_workspace #333333 #222222 #888888
        urgent_workspace   #2f343a #900000 #ffffff
        binding_mode       #2f343a #900000 #ffffff
    }
}
Sources:

* 配置窗口管理器 i3
It's more comfortable without mouse
You thought that having icons everywhere on your desktop with a beautiful start menu was the better and only way to interact with your computer?

你认为在你的桌面上到处都有漂亮的开始菜单图标是与你的计算机交互的更好和唯一的方式吗？

Many Linux distributions, and many Operating Systems (OS) in general, like Windows or macOS, have their own desktop environment. It’s basically a set of icons, windows, toolbars, widgets, wallpaper and other functionalities which give to the users “easy” ways to do what they want.

许多 Linux 发行版和许多操作系统(OS)通常都有自己的桌面环境，比如 Windows 或 macOS。它基本上是一组图标、窗口、工具栏、小部件、壁纸和其他功能，让用户可以“轻松”地做他们想做的事情。

These desktops are meant to be used by everybody. But everybody has different needs when using a computer ; a developer won’t have the same needs as a designer.

这些台式机是为所有人准备的。但是每个人在使用电脑的时候都有不同的需求，开发人员和设计人员的需求是不一样的。

If you use the terminal pretty often (and you should), a desktop environment might be useless for you, even if you don’t realize it. Thanks to the terminal, a developer have already access to a powerful tool to get things done, without the need of a full blown desktop.

如果你经常使用终端(你应该这样做) ，桌面环境对你来说可能是无用的，即使你没有意识到这一点。多亏了这个终端，开发者已经可以使用一个强大的工具来完成任务，而不需要一个成熟的桌面。

Today, I’ll show you an alternative: the i3 windows manager (i3wm). It will give you a great flexibility and a increased control on your system, without even using the mouse!

今天，我将向您展示一个替代品: i3 windows 管理器(i3wm)。它将给你一个很大的灵活性和增加对您的系统的控制，甚至不用鼠标！

“But I love my mouse!” you might think, while sadness feel your heart. Trust me, if your fingers don’t have to leave your keyboard, your happiness will go through the roof. You just need to experiment to see if it works for you, and i3 is perfect for that. It became an essential tool for me when I began to build my Mouseless Development Environment.

“但是我爱我的老鼠! ”你可能会想，当悲伤感动你的心时。相信我，如果你的手指不需要离开键盘，你的幸福就会飞涨。你只需要进行实验，看看它是否适合你，i3是完美的。当我开始构建我的无鼠开发环境时，它就成为了我的一个必不可少的工具。

Note 注意
If you want to know how to build a complete Mouseless Development Environment, it’s the 如果你想知道如何构建一个完整的无鼠开发环境，那么可以参考subject of the book I’m writing 我正在写的书的主题.
In this article, we will:

在本文中，我们将:

Learn how to install i3. 学习如何安装 i3
Learn why using i3 can be very efficient. 了解为什么使用 i3是非常有效的
Learn how work i3. 学习如何工作 i3
Write a scalable i3 config. 编写一个可伸缩的 i3配置
Are you ready to see an alternative reality to the desktop environment world? Follow me, then!

你准备好看到桌面环境世界的另一个现实世界了吗? 那就跟我来吧！

Final result (low resolution)
i3 config final result 3 config final result
Installing i3
安装 i3
First things first: i3 is only available for Linux. Sorry, fellow Mac users.

首先: i3只能在 Linux 上使用，对不起，Mac 用户们。

If you already have a Linux distribution installed and you want to try i3, you might be able to do it on top of your actual desktop. Depending on your distribution, it will be more or less easy.

如果您已经安装了 Linux 发行版，并且希望尝试 i3，那么您可以在实际桌面上进行此操作。根据您的发行版本，这将或多或少地变得简单。

Using Lubuntu with i3, for example, is pretty straightforward: the option to log in with i3 will be given automatically after install. If you use another distribution, you might have to do some minor configuration.

比如，使用 Lubuntu 和 i3，就非常简单: 安装完成后，用 i3登录的选项就会自动提供。如果您使用另一个发行版，您可能需要做一些小的配置。

You can use as well virtual machines to install Linux and try i3 on top of Windows, macOS or whatever else you have. The free Virtualbox is the best option if you want to take this path. Tested and approved!

你也可以使用虚拟机来安装 Linux，并在 Windows、 macOS 或者其他任何你拥有的东西上尝试 i3。如果你想走这条路，免费的 Virtualbox 是最好的选择。测试和批准！

To install i3 itself, simply use your package manager. For example:

要安装 i3本身，只需使用你的包管理器。例如:

Debian / Ubuntu / Lubuntu: Debian/Ubuntu/Lubuntu:sudo apt-get install i3
Arch Linux: sudo pacman -S i3
After installing and launching i3, a popup will ask you if you would like to create a config file automatically. Answer with a big “yes”. We will directly modify this config below.

在安装和启动 i3之后，弹出窗口会问你是否想自动创建一个配置文件。回答大大的“是”。我们将在下面直接修改这个配置。

The talkative i3 might ask you as well if mod4 is the modifier you want. Again, answer “yes”. We will come back to this modifier later.

健谈的 i3可能也会问你 mod4是否是你想要的修饰语。同样，回答“是”。我们稍后会回来讨论这个修饰语。

Why Using i3?
为什么使用 i3？
Light But Powerful
轻而有力
The first advantage using a Windows Manager (WM) instead of a full desktop environment is its lightness. i3 doesn’t use much resource, which let you spare memory and CPU for everything else. In short, it doesn’t get in your way.

使用 Windows 管理器(WM)代替完整的桌面环境的第一个优点是它的轻便。I3没有使用太多的资源，这使得您可以将内存和 CPU 分配给其他任何东西。简而言之，它不会妨碍你。

My experience show me that we never have enough resource, especially if you’re used to run 23098832 docker containers at the same time. Many desktop environment (Unity?) are very heavy and buggy nowadays.

我的经验告诉我，我们从来没有足够的资源，特别是如果你习惯于同时运行23098832个码头容器。许多桌面环境(Unity?)现在都很重而且马车很多。

The simplicity of i3 will procure to your mind the peace it deserves to focus on more important problems. You know, your code for example.

I3的简单性会使你的心灵获得平静，这种平静值得你去关注更重要的问题。你知道，比如你的代码。

Minimalist
极简主义者
A desktop environment has many functionalities we don’t necessarily use. The funny thing is: I didn’t know it was a problem before trying something as light as i3.

桌面环境有许多我们不一定使用的功能。有趣的是: 在尝试像 i 3这样轻的东西之前，我并不知道这是个问题。

My experience with i3 is very similar to my experience with Vim: IDE and desktop environments come with a full package of software and options you didn’t choose by yourself. In the contrary, Vim, tmux or i3 come with a pretty blank state you need to personalize.

我使用 i3的经历与我使用 Vim 的经历非常相似: IDE 和桌面环境提供了一个完整的软件包和选项，这些都不是你自己选择的。相反，Vim、 tmux 或 i3带有一个非常空白的状态，您需要个性化。

Instead of trying to shut off cumbersome functionalities (which is not always possible), you just add the functionalities you truly need.

您只需添加您真正需要的功能，而不是试图关闭累赘的功能(这并不总是可能的)。

A Windows Manager like i3 showed me that a status bar and an application launcher are enough. Thankfully, i3 comes with both.

像 i3这样的 Windows 管理器向我展示了一个状态栏和一个应用程序启动器就足够了。值得庆幸的是，i3两者都有。

Flexible
灵活
Another annoyance with regular desktop environments: the windows positioning, especially when you open a new window.

常规桌面环境的另一个烦恼是: 窗口的位置，尤其是当您打开一个新窗口时。

It always felt random to me, which means that you always need to position your windows manually after opening them with the sacrosanct mouse. We’re all used to do this, of course; it doesn’t mean that there are no better, more efficient and comfortable ways to manage windows.

我总是觉得它是随机的，这意味着你总是需要用神圣不可侵犯的鼠标打开你的窗口后手动定位。当然，我们都习惯于这样做; 这并不意味着没有更好、更有效、更舒适的方法来管理窗口。

The great i3 will always position windows following a specific layout. No surprise, windows positioning become highly consistent.

伟大的 i3将始终定位窗口后，一个特定的布局。毫无疑问，窗口定位变得高度一致。

Even better, you can change this layout easily with specific keystrokes. It might look constraining at first glance, but at the end it makes the system way simpler than traditional desktop environments. It’s faster, too.

更好的是，你可以通过特定的按键轻松改变这个布局。乍一看，它可能看起来有些局限，但最终它使系统的方式比传统的桌面环境简单。它也更快。

This is one of the greatest strength of i3. Stop spending your time moving windows and get important things done!

这是 i3最大的优点之一。不要把时间浪费在移动窗口上，把重要的事情做完！

Finally, as many tools I use on a daily basis, you can configure easily i3 to answer your own personal needs. As stated above, you can change any keystroke you want, launch specific application at startup, always launch specific applications on specific virtual desktop (called workspaces) and configure everything you need.

最后，像我每天使用的许多工具一样，您可以轻松地配置 i3来满足您自己的个人需求。如上所述，您可以更改任何您想要的击键方式，启动特定的应用程序，始终在特定的虚拟桌面(称为工作区)上启动特定的应用程序，并配置您需要的一切。

This article will show a possible config for i3 while explaining each step, for you to be able to personalize it afterward.

本文将在解释每个步骤时显示一个可能的 i3配置，以便您能够在之后对其进行个性化设置。

The Mouse Is Not Your Best Friend
鼠标不是你最好的朋友
Long time readers of The Valuable Dev won’t be surprised to see that i3 can be entirely used without a mouse. Having your hand constantly on your keyboard is a comfort you can’t give away after tasting it for enough time.

长期阅读 The Valuable Dev 的读者不会惊讶地发现 i3可以完全不用鼠标就可以使用。让你的手不停地放在键盘上是一种安慰，在品尝了足够的时间之后，你不能放弃它。

To be honest with you, this is one of the most profound discovery I made regarding my programming workflow for the last decade.

老实说，这是过去十年我在编程工作流方面最深刻的发现之一。

With i3, it’s quick to launch applications, move windows through workspaces, resizing them, and do many other actions using a couple of keystrokes.

使用 i3，可以很快地启动应用程序，在工作空间中移动窗口，调整它们的大小，以及使用几个按键执行许多其他操作。

How To Use i3?
如何使用 i3？
Writing Your Own Cheatsheet
写你自己的作弊表
Writing i3’s keystrokes somewhere as you learn and modify them is helpful. Not only for i3, but for any application using keystrokes extensively such as Vim or tmux.

在学习和修改 i3键盘输入的过程中，在某个地方写 i3键盘输入是有帮助的。不仅适用于 i3，而且适用于任何广泛使用击键的应用程序，如 Vim 或 tmux。

In order to do so, I personally use Joplin, a free, open source, and powerful note taking application, similar to evernote, to write every keystroke I need. It serves as my reference when I forget what keystroke do what action.

为了做到这一点，我个人使用了 Joplin，一个免费的，开源的，功能强大的笔记应用程序，类似于 evernote，来记录我需要的每一个按键。当我忘记按什么键做什么动作时，它可以作为我的参考。

General Organisation
一般组织
Like tmux, i3 store its information in a tree data structure. Let’s see what each node can represent.

与 tmux 一样，i3将其信息存储在树数据结构中。

Final i3 config
Workspaces
工作区
At the top of the tree data structure, you’ll find the workspace. It’s simply the equivalent of a virtual desktop. You can have as many workspaces as you want.

在树数据结构的顶部，您将找到工作区。它简直就是一个虚拟桌面。您可以拥有任意多的工作区。

Creating a workspace is simple: you just need to switch to it and create containers in it to make it persistent. More on that below.

创建一个工作空间很简单: 您只需切换到它并在其中创建容器以使其持久化。更多内容请见下文。

Containers
货柜
A container contains one or multiple windows. Its windows will be positioned depending on the container’s layout.

一个容器包含一个或多个窗口。它的窗口将根据容器的布局定位。

There are three different layouts possible:

有三种不同的布局可能:

Split - Each window share the container space and are split horizontally (splith) or vertically (splitv). This is the default layout. 分割-每个窗口共享容器空间，水平分割(分割)或垂直分割(分割)。这是默认的布局
Stacked - The focused window is visible and the other ones are stacked behind. You can change the window’s focus via keystrokes easily. You have access to the list of windows open too, at the top of the container itself. 堆叠-聚焦的窗口是可见的，其他的堆叠在后面。你可以通过敲击键盘轻松改变窗口的焦点。您还可以访问在容器本身顶部打开的窗口列表
Tabbed - This layout is similar as the stacked layout, except that the windows’ list is vertically split, and not horizontally. 选项卡-这种布局类似于堆叠布局，除了窗口的列表是垂直拆分，而不是水平
Note that a container can contain other containers as well; however, in practice, you won’t often think about containers but more about windows.

请注意，容器也可以包含其他容器; 然而，在实践中，您通常不会考虑容器，而是更多地考虑窗口。

Windows
窗户
A window, where an application is running, can be created in a container. It will automatically position itself and be in focus, depending on the container’s layout. You can move them around or even change the layout of the container using keystrokes.

可以在容器中创建运行应用程序的窗口。它将根据容器的布局自动定位自己并聚焦。您可以移动它们，甚至可以使用按键更改容器的布局。

There are two different sorts of windows: fixed windows (by default) and floating windows. You can precise which application should use a floating window. In that case, the window will act like any other window in any other desktop environment: you can focus on them and move them with your mouse.

有两种不同类型的窗口: 固定窗口(默认情况下)和浮动窗口。您可以精确地选择应该使用浮动窗口的应用程序。在这种情况下，该窗口将像任何其他桌面环境中的其他窗口一样: 您可以关注它们并用鼠标移动它们。

Note that a floating window is not affected by a container’s layout.

请注意，浮动窗口不受容器布局的影响。

Floating windows are useful for applications which don’t need a fullscreen window, like pop ups or color grabbers, for example.

浮动窗口对于不需要全屏窗口的应用程序很有用，例如弹出窗口或彩色抓取器。

The Default Shortcuts
默认快捷方式
Like tmux or Vim, i3 use a special key for (almost) every keystroke. This key is called a modifier. By default, it’s the windows or cmd key. On most keyboard, it has a Windows sign on it.

像 tmux 或 Vim 一样，i3在(几乎)每次击键时都使用一个特殊的键。这个键称为修饰符。默认情况下，它是窗口或 cmd 键。在大多数键盘上，它都有一个 Windows 标志。

You can change this modifier in the config. Personally, I like to use the windows key.

你可以在配置中修改这个修饰符。我个人喜欢使用 windows 键。

In this article, the modifier key will be designed as $mod for every keystroke using it.

在本文中，修改键将被设计为每次击键使用它的 $mod。

Enough mumbling, let’s practice. I strongly advise you now to have i3 open to follow along with me, and to try the modifications we do by yourself.

别再咕哝了，我们开始练习。我强烈建议你现在让 i3开放跟随我，并且尝试我们自己做的修改。

Let’s create a new terminal by typing $mod + Enter. You know what? Let’s create another one! Hit $mod + Enter again. As you can see, the default layout of your container will automatically fit the two windows running two terminals on your workspace.

让我们通过输入 $mod + Enter 来创建一个新的终端。你知道吗？让我们再创造一个！再次点击 $mod + Enter。如您所见，您的容器的默认布局将自动适合您工作区中运行两个终端的两个窗口。

Now, try to focus on the second windows by using $mod + arrow key. Simple, isn’t it?

现在，尝试使用 $mod + 箭头键关注第二个窗口，很简单，不是吗？

You can now move the windows around and see how they resize themselves automatically: hit $mod + shift + arrow key.

现在你可以移动窗口，看看它们是如何自动调整自己的大小: 点击 $mod + shift + 箭头键。

You might think at that point that this system is totally dumb. Don’t lie! I was pretty disappointed the first time I tried it, since I was very much used to move my windows around with my mouse. Now, it’s difficult for me to use something else than a window manager like i3!

在这一点上，你可能会认为这个系统是完全愚蠢的。不要撒谎！我第一次尝试的时候非常失望，因为我已经习惯了用鼠标移动窗户。现在，我很难使用像 i3这样的窗口管理器以外的东西了！

Let’s try to change the layout of your container. You can use:

让我们尝试改变你的容器的布局。你可以使用:

$mod + e - Switch to - 切换至split 分裂 layout (splith or splitv depending on your screen) 布局(splith 或 splitv 取决于您的屏幕)
$mod + s - Switch to - 切换至stacked 堆积的 layout 布局
$mod + w - Switch to - 切换至tabbed 标签 layout 布局
You can try to create and move windows using each layout to see the differences.

您可以尝试使用每个布局来创建和移动窗口以查看差异。

Finally, let’s see other useful keystrokes which will be essential to write and try our new i3 config:

最后，让我们看看其他有用的键盘输入，这些对于编写和尝试我们的新 i3配置是必不可少的:

$mod + shift + r - Reload i3 config. You need to use it each time you modify your config file, to apply the changes to your current i3 session. - 重新加载 i3配置。您需要在每次修改配置文件时使用它，以便将更改应用于当前的 i3会话
$mod + shift + e - Logout and quit i3. We will modify that later. - 注销并退出 i3。我们稍后将修改它
i3 Config
3 Config
Config Files
配置文件
Different config files will be loaded by i3 in a precise order, overriding each other:

不同的配置文件将由 i3按照精确的顺序加载，并相互覆盖:

~/.config/i3/config (or (或$XDG_CONFIG_HOME/i3/config if set) (如设定)
~/.i3/config
/etc/xdg/i3/config (or (或$XDG_CONFIG_DIRS/i3/config if set) (如设定)
/etc/i3/config
If you choose to generate your config file when you run i3 for the first time, you’ll need to modify the file ~/.i3/config.

如果在第一次运行 i3时选择生成配置文件，则需要修改文件 ~/。I3/config.

Default i3 Config
默认 i3配置
Let’s dive a bit more into i3’s config, for you to understand its possibilities. First, open your config file with whatever editor you want.

让我们更深入地研究一下 i3的配置，让您了解它的可能性。首先，用你想要的编辑器打开你的配置文件。

We’ll review in this subsection the beginning of the config file.

我们将在这个小节中回顾配置文件的开头。

If you want a good and complete documentation of i3, it’s just here. This article is a quick overview of i3 for you to understand why it can be useful for you. After that, the documentation should be your reference for everything else.

如果你想要一个完整的 i3文档，它就在这里。本文是 i3的一个快速概述，可以帮助您理解 i3为什么对您有用。在此之后，文档应该成为其他所有内容的参考。

The first line of the config will define your modifier key ($mod), as I explained above. You can modify it if you like here.

配置的第一行将定义修改键($mod) ，正如我前面解释的那样。如果你喜欢这里，你可以修改它。

You can see that you can define variable in i3’s config using the keyword set followed by the variable name ($mod here) and its value (Mod4). It’s very practical not to have to modify every single keystroke each time you change your modifier.

您可以看到，您可以在 i3的 config 中使用关键字集，后面跟着变量名(这里是 $mod)及其值(Mod4)来定义变量。这是非常实际的，不必修改每次击键修改器每次修改。

To see every possible value for i3’s modifier key, you can run in your terminal xmodmap.

要查看 i3的修改键的每个可能值，可以在终端 xmodmap 中运行。

Below in the file, you’ll see the line bindsym $mod+Return exec i3-sensible-terminal. bindsym allows you to bind a symbol to a command. Internally, a symbol is mapped to a keycode (a key on your keyboard). To see this mapping, you can run in your terminal xmodmap -pke | less.

在下面的文件中，您将看到行 bindsym $mod + Return exec i3-sensible-terminal。Bindsym 允许您将符号绑定到命令。在内部，符号映射到键码(键盘上的一个键)。要查看此映射，可以在终端 xmodmap-pke | less 中运行。

Here, the symbol Return is used. If you prefer using directly a keycode instead of a symbol, you can use the command bindcode instead of bindsym.

在这里，使用了返回符号。如果您更喜欢直接使用键码而不是符号，那么可以使用命令 bindcode 而不是 bindsym。

This keystroke will execute (using the command exec) i3-sensible-terminal, a wrapper script which will try to find and open an instance of your terminal.

此击键将执行(使用命令 exec) i3-sensible-terminal，这是一个包装器脚本，它将尝试查找并打开终端的实例。

Let’s continue our exploration. Below you’ll find the line bindsym $mod+Shift+q kill, which allows you to kill a window. Depending on the application running in that window, some operation might be done before closing. For example, Firefox will save the current session.

让我们继续探索。下面你会找到行 bindsym $mod + Shift + q kill，它允许你关闭一个窗口。根据在该窗口中运行的应用程序，可能在关闭之前执行某些操作。例如，Firefox 将保存当前会话。

Program Launcher
程序启动器
With i3, there is no start menu where you can find the applications installed on your system. Instead, you can launch your favorite software using a program launcher.

在 i3中，没有开始菜单，您可以找到安装在系统上的应用程序。相反，你可以使用程序启动器来启动你喜欢的软件。

The line bindsym $mod+d exec dmenu_run define a keystroke to launch dmenu, a simple and powerful application to create menus. We will use it again below.

行 bindsym $mod + d exec dmenu _ run 定义了一个按键来启动 dmenu，这是一个简单而强大的创建菜单的应用程序。我们将在下面再次使用它。

To launch the program launcher, simply hit $mod+d. You’ll see at the top of your screen a discrete bar appearing. From there, you can search an application and launch it by searching it and hitting Enter.

要启动程序启动器，只需点击 $mod + d，你会在屏幕顶部看到一个离散的栏。从那里，您可以搜索一个应用程序，并启动它，搜索它并按回车键。

If you don’t like this way of launching software, you can add your own launcher or even a start menu if you want later.

如果你不喜欢这种启动软件的方式，你可以添加你自己的启动器，甚至一个开始菜单，如果你想以后。

Focusing and Moving i3 Windows
对焦和移动 i/3窗口
You can focus or move the different windows in your current workspace using $mod+jkl; or $mod+shift+jkl;. However, since I use Vim pretty extensively, I like to use hjkl to move around. Don’t forget that many other CLI uses these keys as well!

你可以使用 $mod + jkl 或者 $mod + shift + jkl 来集中或移动当前工作区中的不同窗口。但是，由于我经常使用 Vim，所以我喜欢使用 hjkl 来移动。不要忘记许多其他 CLI 也使用这些键！

We will now modify i3 default config. Don’t forget to hit $mod + shift + r to apply the changes.

我们现在将修改 i3默认配置，不要忘记点击 $mod + shift + r 来应用这些修改。

Let’s modify the binding for focusing windows as following:

让我们将聚焦窗口的绑定修改如下:

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right
Below in the file, you’ll find the keystrokes to move windows. You can change them as well:

在下面的文件中，你可以找到移动窗口的按键，你也可以改变它们:

bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right
That’s all! Now, you can use Vim keys to change focus or move your windows.

现在，您可以使用 Vim 键改变焦点或移动窗口。

Splitting i3 Containers
分割 i3容器
Two windows in a container split horizontally
Two windows in a container split horizontally 容器中的两个窗口水平分割
Sometimes, you’ll want to open new windows on the side or below the windows already open. By default, to open a windows horizontally, we would need to hit $mod+h. However, we use this keystroke to focus windows.

有时候，你会想打开侧面或者下面已经打开的新窗口。默认情况下，要水平打开一个窗口，我们需要点击 $mod + h，但是，我们使用这个击键来聚焦窗口。

Let reconfigure the splits as following:

让我们重新配置的分裂如下:

# split in horizontal orientation
bindsym $mod+Ctrl+h split v

# split in vertical orientation
bindsym $mod+Ctrl+v split h
Note that changing orientation will create a new container. You can see its delimitation by changing its layout. I personally like to have only one container (it’s easier to manage). Therefore, I never use these keystrokes.

注意，改变方向将创建一个新的容器。你可以通过改变它的布局来看到它的分界线。我个人喜欢只有一个容器(它更容易管理)。因此，我从不使用这些按键。

We can now continue to modify our config: let’s go into the workspace section.

现在我们可以继续修改我们的配置: 让我们进入工作区部分。

Workspaces
工作区
Defining Workspaces
定义工作区
You can open and switch to workspaces with the same keystrokes. Here’s the default config you’ll normally find in your current config file:

您可以使用相同的按键打开和切换到工作区。下面是默认配置，你通常会在当前配置文件中找到:

# Define names for default *workspaces* for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10
What does it mean?

这意味着什么？

The first part defines the variables for each 第一部分为每个变量定义了变量workspace 工作空间. You have 10 of them by default. 。你有10个他们默认
The second part define keystrokes to switch to these 第二部分定义了切换到这些按键的方法workspaces 工作区.
The third part define keystrokes to move 第三部分定义了要移动的按键windows 窗户 to specific 特定的workspace 工作空间.
From there, you can configure your workspaces as you wish. Here’s my own config as an example:

从那里，你可以随意配置你的工作空间:

set $terms "1: terms"
set $web "2: web"
set $db "3: db"
set $file_manager "4: files"
set $mail "5: mails"
set $documents "6: documents"
set $mindmap "7: mindmap"

# switch to workspace
bindsym $mod+1 workspace $terms
bindsym $mod+2 workspace $web
bindsym $mod+3 workspace $db
bindsym $mod+4 workspace $file_manager
bindsym $mod+5 workspace $mail
bindsym $mod+6 workspace $documents
bindsym $mod+7 workspace $mindmap
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $terms
bindsym $mod+Shift+2 move container to workspace $web
bindsym $mod+Shift+3 move container to workspace $db
bindsym $mod+Shift+4 move container to workspace $file_manager
bindsym $mod+Shift+5 move container to workspace $mail
bindsym $mod+Shift+6 move container to workspace $documents
bindsym $mod+Shift+7 move container to workspace $mindmap
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10
If you have Font Awesome installed, you can even add some fancy icons.

如果你安装了 Font Awesome，你甚至可以添加一些奇特的图标。

Another functionality I find practical: the possibility to come back to your last workspace with the same keystroke. For example, if you are on the workspace 1 and you hit $mod+2, you’ll switch to workspace 2.

我发现的另一个实用功能是: 可以用相同的击键方式返回到上一个工作区。例如，如果您在工作区1上，点击 $mod + 2，您将切换到工作区2。

Then, if you hit $mod+2 again, you’ll go back to your previous workspace, workspace 1.

然后，如果你再次点击 $mod + 2，你就会回到之前的工作区，工作区1。

To enable this functionality, you need to add to your config:

要启用这个功能，你需要在你的配置文件中添加:

`workspace_auto_back_and_forth yes`
Opening Applications in a Specific Workspace
在特定工作区中打开应用程序
You have as well the possibility to always assign precise application to defined workspaces. Let’s say that you always want to open Firefox in the workspace 2, $web, from the example just above. You can add in your config:

您还可以总是将精确的应用程序分配给定义的工作区。假设您总是希望在 workspace 2中打开 Firefox，从上面的例子中可以看到 $web。你可以添加你的配置:

assign [class="firefox" instance="Navigator"] → $web
You can assign the application using its class (its general identifier), its instance (an identifier which is specific to some windows), or both.

您可以使用应用程序的类(其通用标识符)、实例(特定于某些窗口的标识符)或两者来分配应用程序。

To get the class name and the instance name of a precise application’ window, you need to run the application itself, open a terminal and run the following:

要获取类名和精确应用程序窗口的实例名，您需要运行应用程序本身，打开一个终端并运行以下命令:

xprop | grep WM_CLASS
Then, click on the window where the application is running. Something similar to the following line will appear in your terminal:

然后，单击运行应用程序的窗口。在您的终端中将出现类似于下列行的内容:

WM_CLASS(STRING) = "Navigator", "firefox"
The first element is always the instance, the second always the class. Be careful: the case matters.

第一个元素总是实例，第二个总是类。注意: 大小写很重要。

Resizing i3 Windows
调整 i 3 Windows 的大小
If you continue to go through the config, you’ll find keystrokes for fullscreen and diverse ways to reload i3’s config.

如果你继续进行配置，你会发现全屏的按键和重新加载 i3配置的不同方式。

Below, you’ll find keystrokes to resize windows. Let’s modify them, again to match the Vim key bindings hjlk.

下面，您将看到调整窗口大小的按键。

bindsym h resize shrink width 10 px or 10 ppt
bindsym j resize grow height 10 px or 10 ppt
bindsym k resize shrink height 10 px or 10 ppt
bindsym l resize grow width 10 px or 10 ppt
You’ll notice that your first need to go in mode resize before being able to resize. It means that you first need to hit $mod+r (you’ll see the word resize appearing at the bottom of the screen), then you can use $mod + hjkl.

您将注意到，在能够调整大小之前，您首先需要进入模式调整大小。这意味着你首先需要点击 $mod + r (你会在屏幕底部看到调整大小这个词) ，然后你可以使用 $mod + hjkl。

We can as well set focus_follows_mouse to no. Otherwise, each time you’ll hover on a windows, it will be automatically focused. Pretty annoying to me.

我们也可以设置 focus follow mouse 为 no。否则，每次你将鼠标悬停在一个窗口上，它将自动聚焦。我觉得很烦人。

Locking Screen
锁定屏幕
To lock your screen for your coworkers not sending embarrassing messages on Slack on your behalf, you’ll need the software i3lock. You can try to launch it to see if it’s installed; if it’s not, simply install it.

为了锁定你的屏幕，防止你的同事以你的名义在 Slack 上发送尴尬信息，你需要使用软件 i3lock。您可以尝试启动它来查看它是否已经安装; 如果没有，只需安装它。

By default, the lock screen is a boring white screen which will destroy your eyes. If you don’t care, you can let it as it is.

默认情况下，锁定屏幕是一个无聊的白色屏幕，会破坏你的眼睛。如果你不在乎，你可以随它去。

Otherwise, you can configure it to display a wonderful wallpaper as follow:

否则，你可以配置它来显示一个美妙的壁纸如下:

set $i3lockwall i3lock -i /path/to/my-wonderful-image.png -t
It’s important to note that you can only use png files with i3lock. No jpeg supported!

需要注意的是，您只能使用带有 i3lock 的 png 文件。不支持 jpeg！

My own wallpaper is a bit more complex. I use a script to take a screenshot of the current screen, automatically “pixelize” it, save it, and use it as a lock screen. With a lock screen that good, every coworker will pray your skills and your swag. Expect a big salary increase, too.

我自己的壁纸要复杂一些。我使用一个脚本截取当前屏幕的屏幕，自动“像素化”它，保存它，并使用它作为锁屏。有了这么好的锁定屏幕，每个同事都会为你的技能和成果祈祷。预计工资也会大幅上涨。

To run the script, you’ll need to install imagemagick and scrot. Here it is:

要运行这个脚本，你需要安装 imagemagick 和 scrot:

img=/tmp/i3lock.png

scrot $img
convert $img -scale 10% -scale 1000% $img

i3lock -u -i $img
Simply save this script somewhere (I like to have a script subdirectory in ~/.config/i3) and create a new variable in the i3 config file:

只需将这个脚本保存在某个地方(我希望在 ~/中有一个脚本子目录)。Config/i3)并在 i3配置文件中创建一个新变量:

set $i3lockwall sh ~/.config/i3/scripts/lock.sh
Finally, add a keystroke to lock your screen:

最后，添加一个按键来锁定你的屏幕:

bindsym $mod+Ctrl+Shift+l exec --no-startup-id $i3lockwall
We’ll see that it’s possible to lock your screen using dmenu as well (you know, the software we use already for our application launcher). More on that below.

我们将看到使用 dmenu 锁定屏幕也是可能的(您知道，我们已经使用的应用程序启动程序的软件)。更多内容请见下文。

Last but certainly not least: to unlock your computer, type your user’s password and press Enter.

最后但肯定不是最不重要的: 解锁您的计算机，键入您的用户的密码，并按回车。

Lock, Shutdown and Reboot Menu
锁定，关闭和重新启动菜单
Let’s find and delete the following line:

让我们查找并删除以下行:

bindsym Mod1+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"
This allows you to log out of i3. However, we’ll now implement a better way to do so.

这允许您退出 i3。但是，我们现在将实现一种更好的方法来实现这一点。

Let’s create a menu with dmenu to have a nice and discrete way to lock your screen, log out i3, suspend your computer, hibernate, reboot, shutdown everything, or conquering the world.

让我们用 dmenu 创建一个菜单，它可以很好地锁定屏幕、退出 i3、挂起计算机、休眠、重启、关闭所有功能，或者征服世界。

Simply add the following to your config:

只需在你的配置中添加以下内容:

# shutdown / restart / suspend...
set $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (Ctrl+s) shutdown

mode "$mode_system" {
    bindsym l exec --no-startup-id $i3lockwall, mode "default"
    bindsym e exec --no-startup-id i3-msg exit, mode "default"
    bindsym s exec --no-startup-id $i3lockwall && systemctl suspend, mode "default"
    bindsym h exec --no-startup-id $i3lockwall && systemctl hibernate, mode "default"
    bindsym r exec --no-startup-id systemctl reboot, mode "default"
    bindsym Ctrl+s exec --no-startup-id systemctl poweroff -i, mode "default"

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+BackSpace mode "$mode_system"
Now, after reloading the config, if you hit $mod+BackSpace, you’ll see at the bottom of your screen a message which precise what you can do. You can hit l, e, s, h, r or Ctrl+s depending on what you want to do.

现在，在重新加载配置之后，如果你点击 $mod + BackSpace，你会在屏幕底部看到一条信息，这条信息可以精确地显示你能做什么。你可以按 l，e，s，h，r 或者 Ctrl + s，这取决于你想要做什么。

If you want to just close the menu, hit Escape or Return.

如果你只想关闭菜单，点击退出或返回。

Wallpaper
墙纸
When you switch to a workspace which doesn’t have any window yet, it’s nice to have a wonderful wallpaper. The easiest solution: using feh, a simple software which can display images.

当你切换到一个还没有窗口的工作空间时，有一个漂亮的壁纸是很好的。最简单的解决方案: 使用 feh，一个简单的软件，可以显示图像。

First, You need to install it.

首先，你需要安装它。

Then, you can add to your config:

然后，你可以添加你的配置:

exec --no-startup-id feh --no-fehbg --bg-fill '/path/to/your-favorite-holiday-picture.jpg'
Don’t use ~ if you want to point to your home directory. The variable $HOME will normally work.

如果你想指向你的主目录，不要使用 ~ 。变量 $HOME 正常工作。

Floating windows
浮动窗口
Some applications are easier to use with floating windows. In short, it’s a window you can move with your mouse.

一些应用程序更容易使用浮动窗口。简而言之，它是一个你可以用鼠标移动的窗口。

For example, pop-up and task dialog should be floating. To do so, add these two lines in your config file:

例如，弹出窗口和任务对话框应该是浮动的，为此，在配置文件中添加以下两行:

# floating pop up automatically
for_window [window_role="pop-up"] floating enable
for_window [window_role="task_dialog"] floating enable
You can specify what application should be open with a floating window automatically, using the class and instance of the application, as explained above (see the workspace section).

您可以使用应用程序的类和实例，自动指定使用浮动窗口打开哪个应用程序，如上所述(请参阅工作空间部分)。

For example:

例如:

for_window [class="Keepassx"] floating enable
Thanks to this line, the application Keepassx will automatically be opened in a floating window.

多亏了这一行，应用程序 keepasx 将在一个浮动窗口中自动打开。

Colors and Style
颜色和风格
You can configure colors and style for i3 directly in the config file. If you have your terminal colors defined in the Xresources file (typically ~/.Xresources), you can reuse them directly with i3 if you use the set_from_resource directive.

您可以直接在配置文件中为 i3配置颜色和样式。如果您在 Xresources 文件中定义了终端颜色(通常是 ~/。Xresources) ，如果您使用 set_from _ resource 指令，则可以直接使用 i3重用它们。

For example, set_from_resource $foreground foreground #C6C6C6 will define a variable $foreground which will use the foreground color defined in Xresources or, if it’s not defined, the fallback color #C6C6C6.

例如，set _ from _ resource $foreground # c6c6c6将定义一个变量 $foreground，该变量将使用 Xresources 中定义的前景色，或者，如果没有定义，则使用 fallback 颜色 # c6c6c6。

You can then use the variable $foreground everywhere you need it in the config. Here’s an example of my own:

然后你可以在配置文件中使用 $foreground 变量，下面是我自己的一个例子:

# get color from XResource config - variable_name XResource fallback

# special
set_from_resource $foreground foreground #C6C6C6
set_from_resource $background background #1C1C1C
set_from_resource $cursorColor cursorColor #C6C6C6

# black
set_from_resource $black1 color0 #303030
set_from_resource $black2 color8 #444444
set $trueblack #000000

# red
set_from_resource $red1 color1 #d75f5f
set_from_resource $red2 color9 #d75f5f

# green
set_from_resource $green1 color2 #87AF87
set_from_resource $green2 color10 #87AF87

# yellow
set_from_resource $yellow1 color3 #ffd75f
set_from_resource $yellow2 color11 #ffd75f

# blue
set_from_resource $blue1 color4 #87afd7
set_from_resource $blue2 color12 #87afd7

# magenta
set_from_resource $cyan1 color5 #afafd7
set_from_resource $cyan2 color13 #afafd7

# cyan
set_from_resource $cyan1 color6 #afd7ff
set_from_resource $cyan2 color14 #afd7ff

# white
set_from_resource $white1 color7 #4E4E4E
set_from_resource $white2 color15 #ffffff

Instead of set_from_resource, you can of course define your own variables, such as set $black #000000.

当然，您可以定义自己的变量，而不是 set _ from _ resource，比如 set $black # 000000。

Config of the i3 Bar
I3 Bar 的配置
You can configure the status bar at the bottom of the screen too of course, using a different config file. You’ll find below an example you can copy in a new file, for example ~/.config/i3/i3status.conf. Feel free to modify it, of course.

当然，您也可以使用不同的配置文件在屏幕底部配置状态栏。下面是一个可以复制到新文件中的示例，例如 ~/。Config/i3/i3status.自信。当然，你可以自由地修改它。

You can customize the data displayed in the bar using shell scripts, too.

您还可以使用 shell 脚本自定义在条形图中显示的数据。

# i3status configuration file.
# see "man i3status" for documentation.

# It is important that this file is edited as UTF-8.
# The following line should contain a sharp s:
# ß
# If the above line is not correctly displayed, fix your editor first!

general {
    interval = 1
    colors = true
    color_good="#FFFFFF"
    color_degraded="#ffd75f"
    color_bad="#d75f5f"
}

order += "volume master"
order += "battery 0"
order += "disk /"
order += "disk /home"
order += "cpu_usage"
order += "load"
order += "tztime local"

tztime local {
        format = " %Y-%m-%d %H:%M:%S "
}

disk "/home" {
     format = " %avail "
}

disk "/" {
     format = " %avail "
}

cpu_usage {
    format = " %usage "
}

load {
    format = " %5min 5min "
}

volume master {
    format = " %volume "
    format_muted = " %volume "
    device = "default"
    mixer = "Master"
    mixer_idx = 0
}

battery 0 {
    format = "%status %percentage "
    format_down = " DOWN "
    status_chr = " CHARGING "
    status_bat = " BATTERY "
    status_unk = " UNKNOWN "
    #last_full_capacity = true
    status_full = " FULL "
    path = "/sys/class/power_supply/BAT%d/uevent"
}
To use this status bar, you need to specify the file path in i3 config file. Normally, the block bar { is already there, you just need to modify it according to your needs.

要使用这个状态栏，您需要在 i3配置文件中指定文件路径。通常情况下，块条{已经存在，您只需要根据需要修改它。

For example:

例如:

bar {
    status_command i3status --config ~/.i3/i3status.conf
    # Disable all tray icons
    tray_output none
    colors {
        background $black2
        statusline $white2
        separator $white2 

        #                  border background text
        focused_workspace  $background $background $red1
        active_workspace   $black2 $black1 $white2
        inactive_workspace $black1 $black2 $foreground
        urgent_workspace   $red1 $red1 $white2
        binding_mode       $background $red2 $white2
    }
}

You can notice that we use the color variables defined above, to make the bar even prettier! Wonderful.

您可以注意到，我们使用上面定义的颜色变量，使酒吧更漂亮。

Managing Your Screen
管理你的屏幕
If you have two, three or 389 screens, you might notice that you have no way to configure them.

如果您有两个、三个或389个屏幕，您可能会注意到您无法配置它们。

Installing arandr can help you in that regard. You need to install it.

安装 arandr 可以在这方面帮助您，您需要安装它。

Then, let’s make its window floating:

然后，让我们让它的窗口浮动:

for_window [class="Arandr"] floating enable
You can now run it (using your application launcher, remember?) and configure your screen orientation and placement as you wish.

您现在可以运行它(使用您的应用程序启动器，记得吗?) ，并按照您的愿望配置您的屏幕方向和位置。

This is nice and all, but this config is not persistent. Here’s a way to fix that:

虽然这个配置很好，但是它并不是持久的，这里有一个方法来解决这个问题:

Configure 配置arandr as you wish 如你所愿
Save the layout from 保存布局arandr. This will create a script similar to the following: 。这将创建一个类似于以下的脚本:
xrandr --output VGA-1 --off --output eDP-1 --primary --mode 1600x900 --pos 0x0 --rotate normal --output HDMI-2 --off --output HDMI-1 --off --output DP-2 --off --output DP-1 --off
I then use dmenu to create a menu to manage my different screen config. For example, you can add in the i3’s config:

然后我使用 dmenu 创建一个菜单来管理我的不同屏幕配置。例如，你可以添加 i3的配置:

set $mode_display Config monitor resolution - My first config (d) - My second config (t)

mode "$mode_display" {
    bindsym d exec --no-startup-id xrandr --output VGA-1 --off --output eDP-1 --primary --mode 1600x900 --pos 0x0 --rotate normal --output HDMI-2 --off --output HDMI-1 --off --output DP-2 --off --output DP-1 --off && ~/.fehbg, mode "default"
    bindsym t exec --no-startup-id xrandr --output eDP-1 --primary --mode 1600x900 --pos 0x809 --rotate normal --output VGA-1 --mode 1920x1080 --pos 2800x420 --rotate normal --output DP-1 --off --output HDMI-1 --mode 1920x1200 --pos 1600x0 --rotate left --output DP-2 --off --output HDMI-2 --off

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+x mode "$mode_display"
First, we set a variable 首先，我们设置一个变量$mode_display which will display the menu we want. 它会显示我们想要的菜单
Then, we bind 然后，我们绑定d and 及t to the content of the script created before. 之前创建的脚本的内容
With this method, you can create many screen conifg and switch from one to another easily.

使用这种方法，您可以创建许多屏幕连接，并轻松地从一个切换到另一个。

Final config of i3
i3 final config 3 final config
Will You Stick With i3?
你会坚持使用 i 3吗？
That’s all folks! With this first overview of i3, you should be able to do whatever you want without having a cumbersome desktop environment going in your way.

这就是所有的人！通过对 i3的第一次概述，您应该能够做任何您想做的事情，而不会有一个烦琐的桌面环境阻碍您的工作。

In this article, we learned:

在这篇文章中，我们了解到:

i3 is a very light and minimalist I3是一个非常轻巧的简约主义者windows 窗户 manager, yet powerful and flexible. 经理，但是权力很大，很灵活
What are 什么是workspaces 工作区, containers 容器, fixed and floating ，固定和浮动windows 窗户.
How to configure i3. 如何配置 i3
How to configure the lock screen 如何配置锁定屏幕i3lock.
How to create a shutdown menu. 如何创建一个关闭菜单
How to personalize the status bar. 如何个性化状态栏
How to manage your screen config with 如何管理你的屏幕配置arandr 阿兰德尔.
There’s much more to discover about i3 and I invite you again to go through its very complete documentation.

关于 i3还有很多东西需要了解，我邀请您再次浏览它非常完整的文档。

Related Sources 相关资料来源
i3 official documentation I3官方文件
My personal config 我的个人配置 - Matthieu Cneude - Matthieu cneide
Monthly Email
每月电邮
Last article, updates, and resources.

最后一篇文章、更新和资源。

your-email@example.com
 
You can reply to any email if you have any question, comment, or suggestion. I'll write back personnaly.

如果你有任何问题、意见或建议，你可以回复任何电子邮件。我会亲自回复。

Share this post 分享这篇文章  
Share Your Knowledge 分享你的知识

How did I Replace PhpStorm by Vim in my Heart
An Overview of a Mouseless Development Environment
The Valuable Dev All right reserved - 2020
         
Proudly generated by HUGO
