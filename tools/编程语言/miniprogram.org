** thinkphp3
*** 目录   
- [[file:article_0/index_u56.html][微信小程序开发教程手册文档]]
- [[file:article_1/index_u28.html][体验微信小程序]]
- [[file:article_2/index_u35.html][微信小程序 框架]]
- [[file:article_3/index_u19.html][MINA 目录结构]]
- [[file:article_4/index_u99.html][小程序配置]]
- [[file:article_5/index_u54.html][逻辑层(App Service)]]
- [[file:article_6/index_u97.html][微信小程序 注册程序]]
- [[file:article_7/index_u75.html][微信小程序 场景值]]
- [[file:article_8/index_u95.html][微信小程序 注册页面]]
- [[file:article_9/index_u64.html][微信小程序 路由]]
- [[file:article_10/index_u1.html][微信小程序 模块化]]
- [[file:article_11/index_u87.html][小程序 API]]
- [[file:article_12/index_u27.html][视图层(View)]]
- [[file:article_13/index_u30.html][微信小程序 WXML]]
- [[file:article_14/index_u12.html][微信小程序 数据绑定]]
- [[file:article_15/index_u21.html][微信小程序 列表渲染]]
- [[file:article_16/index_u62.html][微信小程序 条件渲染]]
- [[file:article_17/index_u92.html][微信小程序 模板]]
- [[file:article_18/index_u6.html][微信小程序 事件]]
- [[file:article_19/index_u73.html][微信小程序 引用]]
- [[file:article_20/index_u93.html][微信小程序 WXS]]
- [[file:article_21/index_u72.html][微信小程序 WXS模块]]
- [[file:article_22/index_u44.html][微信小程序 变量]]
- [[file:article_23/index_u39.html][微信小程序 注释]]
- [[file:article_24/index_u9.html][微信小程序 运算符]]
- [[file:article_25/index_u20.html][微信小程序 语句]]
- [[file:article_26/index_u55.html][微信小程序 数据类型]]
- [[file:article_27/index_u88.html][微信小程序 基础类库]]
- [[file:article_28/index_u67.html][微信小程序 WXSS]]
- [[file:article_29/index_u10.html][微信小程序 组件]]
- [[file:article_30/index_u63.html][微信小程序 基础库]]
- [[file:article_31/index_u8.html][微信小程序 兼容]]
- [[file:article_32/index_u51.html][微信小程序 运行机制]]
- [[file:article_33/index_u61.html][性能]]
- [[file:article_34/index_u17.html][微信小程序 性能Trace工具]]
- [[file:article_35/index_u34.html][微信小程序 优化建议]]
- [[file:article_36/index_u48.html][微信小程序 组件]]
- [[file:article_37/index_u96.html][wxapp视图容器 view]]
- [[file:article_38/index_u50.html][wxapp视图容器 scroll-view]]
- [[file:article_39/index_u94.html][wxapp视图容器 swiper]]
- [[file:article_40/index_u46.html][wxapp视图容器 movable-area]]
- [[file:article_41/index_u59.html][wxapp视图容器 cover-view]]
- [[file:article_42/index_u16.html][wxapp内容组件 icon]]
- [[file:article_43/index_u41.html][wxapp内容组件 text]]
- [[file:article_44/index_u60.html][wxapp内容组件 rich-text]]
- [[file:article_45/index_u23.html][wxapp内容组件 progress]]
- [[file:article_46/index_u85.html][表单组件]]
- [[file:article_47/index_u81.html][wxapp表单组件 button]]
- [[file:article_48/index_u15.html][wxapp表单组件 checkbox]]
- [[file:article_49/index_u31.html][wxapp表单组件 form]]
- [[file:article_50/index_u2.html][wxapp表单组件 input]]
- [[file:article_51/index_u70.html][wxapp表单组件 label]]
- [[file:article_52/index_u100.html][wxapp表单组件 picker]]
- [[file:article_53/index_u40.html][wxapp表单组件 picker-view]]
- [[file:article_54/index_u49.html][wxapp表单组件 radio]]
- [[file:article_55/index_u42.html][wxapp表单组件 slider]]
- [[file:article_56/index_u82.html][wxapp表单组件 switch]]
- [[file:article_57/index_u58.html][wxapp表单组件 textarea]]
- [[file:article_58/index_u13.html][wxapp导航 navigator]]
- [[file:article_59/index_u84.html][wxapp媒体组件 audio]]
- [[file:article_60/index_u14.html][wxapp媒体组件 image]]
- [[file:article_61/index_u89.html][wxapp媒体组件 video]]
- [[file:article_62/index_u4.html][wxapp媒体组件 camera]]
- [[file:article_63/index.html][wxapp地图 map]]
- [[file:article_64/index_u76.html][wxapp画布 canvas]]
- [[file:article_65/index_u91.html][wxapp开放数据 open-data]]
- [[file:article_66/index_u57.html][wxapp承载网页 web-view]]
- [[file:article_67/index_u45.html][wxapp客服会话 contact-button]]
- [[file:article_68/index_u25.html][API]]
- [[file:article_69/index_u68.html][网络]]
- [[file:article_70/index_u11.html][微信小程序API 发起请求]]
- [[file:article_71/index_u18.html][微信小程序API 上传、下载]]
- [[file:article_72/index_u29.html][微信小程序API Websocket]]
- [[file:article_73/index_u52.html][微信小程序API 图片]]
- [[file:article_74/index_u65.html][微信小程序API 录音]]
- [[file:article_75/index_u66.html][微信小程序API 音频播放控制]]
- [[file:article_76/index_u101.html][微信小程序API 音乐播放控制]]
- [[file:article_77/index_u71.html][微信小程序API 背景音频播放管理]]
- [[file:article_78/index_u90.html][微信小程序API 音频组件控制]]
- [[file:article_79/index_u77.html][微信小程序API 视频]]
- [[file:article_80/index_u36.html][微信小程序API 视频组件控制]]
- [[file:article_81/index_u53.html][微信小程序API 相机组件控制]]
- [[file:article_82/index_u79.html][微信小程序API 文件]]
- [[file:article_83/index_u98.html][微信小程序API 数据缓存]]
- [[file:article_84/index_u22.html][微信小程序API 获取位置]]
- [[file:article_85/index_u74.html][微信小程序API 查看位置]]
- [[file:article_86/index_u7.html][微信小程序API 地图组件控制]]
- [[file:article_87/index_u32.html][设备]]
- [[file:article_88/index_u83.html][微信小程序API 系统信息]]
- [[file:article_89/index_u5.html][微信小程序API 网络状态]]
- [[file:article_90/index_u78.html][微信小程序API 加速度计]]
- [[file:article_91/index_u24.html][微信小程序API 罗盘]]
- [[file:article_92/index_u37.html][微信小程序API 拨打电话]]
- [[file:article_93/index_u38.html][微信小程序API 扫码]]
- [[file:article_94/index_u86.html][微信小程序API 剪贴板]]
- [[file:article_95/index_u43.html][微信小程序API 蓝牙]]
- [[file:article_96/index_u47.html][微信小程序API iBeacon]]
- [[file:article_97/index_u80.html][微信小程序API 屏幕亮度]]
- [[file:article_98/index_u26.html][微信小程序API 用户截屏事件]]
- [[file:article_99/index_u3.html][微信小程序API 振动]]

*** 3. 编写代码
**** 创建小程序实例
点击开发者工具左侧导航的“编辑”，我们可以看到这个项目，已经初始化并包含了一些简单的代码文件。最关键也是必不可少的，是
app.js、app.json、app.wxss
这三个。其中，=.js=后缀的是脚本文件，=.json=后缀的文件是配置文件，=.wxss=后缀的是样式表文件。微信小程序会读取这些文件，并生成[[file:weixinapp-app.html][小程序实例]]。

下面我们简单了解这三个文件的功能，方便修改以及从头开发自己的微信小程序。

app.js是小程序的脚本代码。我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。调用框架提供的丰富的
API，如本例的同步存储及同步读取本地数据。想了解更多可用 API，可参考
[[file:hpm41q8p.html][API 文档]]

#+BEGIN_EXAMPLE
    //app.js
    App({
      onLaunch: function () {
        //调用API从本地缓存中获取数据
        var logs = wx.getStorageSync('logs') || []
        logs.unshift(Date.now())
        wx.setStorageSync('logs', logs)
      },
      getUserInfo:function(cb){
        var that = this;
        if(this.globalData.userInfo){
          typeof cb == "function" && cb(this.globalData.userInfo)
        }else{
          //调用登录接口
          wx.login({
            success: function () {
              wx.getUserInfo({
                success: function (res) {
                  that.globalData.userInfo = res.userInfo;
                  typeof cb == "function" && cb(that.globalData.userInfo)
                }
              })
            }
          });
        }
      },
      globalData:{
        userInfo:null
      }
    })
#+END_EXAMPLE

app.json
是对整个小程序的全局配置。我们可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。注意该文件不可添加任何注释。更多可配置项可参考[[file:hw9k1q8m.html][配置详解]]

#+BEGIN_EXAMPLE
    {
      "pages":[
        "pages/index/index",
        "pages/logs/logs"
      ],
      "window":{
        "backgroundTextStyle":"light",
        "navigationBarBackgroundColor": "#fff",
        "navigationBarTitleText": "WeChat",
        "navigationBarTextStyle":"black"
      }
    }
#+END_EXAMPLE

app.wxss 是整个小程序的公共样式表。我们可以在页面组件的 class
属性上直接使用 app.wxss 中声明的样式规则。

#+BEGIN_EXAMPLE
    /**app.wxss**/
    .container {
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: space-between;
      padding: 200rpx 0;
      box-sizing: border-box;
    }
#+END_EXAMPLE

**** 创建页面
在这个教程里，我们有两个页面，index 页面和 logs
页面，即欢迎页和小程序启动日志的展示页，他们都在 pages
目录下。微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的
pages 中，且 pages 中的第一个页面是小程序的首页。

每一个[[file:weixinapp-page.html][小程序页面]]是由同路径下同名的四个不同后缀文件的组成，如：index.js、index.wxml、index.wxss、index.json。=.js=后缀的文件是脚本文件，=.json=后缀的文件是配置文件，=.wxss=后缀的是样式表文件，=.wxml=后缀的文件是页面结构文件。

index.wxml 是页面的结构文件：

#+BEGIN_EXAMPLE
    <!--index.wxml-->
    <view class="container">
      <view  bindtap="bindViewTap" class="userinfo">
        <image class="userinfo-avatar" src="{{userInfo.avatarUrl}}" background-size="cover"></image>
        <text class="userinfo-nickname">{{userInfo.nickName}}</text>
      </view>
      <view class="usermotto">
        <text class="user-motto">{{motto}}</text>
      </view>
    </view>
#+END_EXAMPLE

本例中使用了[[file:sp6z1q8q.html][=<view/>=]]、[[file:weixinapp-image.html][=<image/>=]]、[[file:weixinapp-text.html][=<text/>=]]来搭建页面结构，绑定数据和交互处理函数。

index.js
是页面的脚本文件，在这个文件中我们可以监听并处理页面的生命周期函数、获取小程序实例，声明并处理数据，响应页面交互事件等。

#+BEGIN_EXAMPLE
    //index.js
    //获取应用实例
    var app = getApp()
    Page({
      data: {
        motto: 'Hello World',
        userInfo: {}
      },
      //事件处理函数
      bindViewTap: function() {
        wx.navigateTo({
          url: '../logs/logs'
        })
      },
      onLoad: function () {
        console.log('onLoad')
        var that = this
        //调用应用实例的方法获取全局数据
        app.getUserInfo(function(userInfo){
          //更新数据
          that.setData({
            userInfo:userInfo
          })
        })
      }
    })
#+END_EXAMPLE

index.wxss 是页面的样式表：

#+BEGIN_EXAMPLE
    /**index.wxss**/
    .userinfo {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .userinfo-avatar {
      width: 128rpx;
      height: 128rpx;
      margin: 20rpx;
      border-radius: 50%;
    }

    .userinfo-nickname {
      color: #aaa;
    }

    .usermotto {
      margin-top: 200px;
    }
#+END_EXAMPLE

页面的样式表是非必要的。当有页面样式表时，页面的样式表中的样式规则会层叠覆盖
app.wxss
中的样式规则。如果不指定页面的样式表，也可以在页面的结构文件中直接使用
app.wxss 中指定的样式规则。

index.json 是页面的配置文件：

页面的配置文件是非必要的。当有页面的配置文件时，配置项在该页面会覆盖
app.json 的 window
中相同的配置项。如果没有指定的页面配置文件，则在该页面直接使用 app.json
中的默认配置。

logs 的页面结构

#+BEGIN_EXAMPLE
    <!--logs.wxml-->
    <view class="container log-list">
      <block wx:for="{{logs}}" wx:for-item="log">
        <text class="log-item">{{index + 1}}. {{log}}</text>
      </block>
    </view>
#+END_EXAMPLE

logs 页面使用 [[file:weixinapp-list.html#block-wxfor][=<block/>=]]
控制标签来组织代码，在 =<block/>= 上使用
[[file:weixinapp-list.html#wxfor][=wx:for=]] 绑定 =logs= 数据，并将
=logs= 数据循环展开节点。

#+BEGIN_EXAMPLE
    //logs.js
    var util = require('../../utils/util.js')
    Page({
      data: {
        logs: []
      },
      onLoad: function () {
        this.setData({
          logs: (wx.getStorageSync('logs') || []).map(function (log) {
            return util.formatTime(new Date(log))
          })
        })
      }
    })
#+END_EXAMPLE

运行结果如下：

[[file:feed_0/article_0/images/img2_u1.png]]\\

*** 4. 手机预览
开发者工具左侧菜单栏选择"项目"，点击"预览"，扫码后即可在微信客户端中体验。

[[file:feed_0/article_1/images/img1_u2.png]]\\

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/9wou1q8j.html]]

\\
\\
| [[../index_u33.html#article_0][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u28.html>>

| [[../article_2/index_u35.html][下一项]] |
[[../index_u33.html#article_1][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_0/index_u56.html][上一项]] |

--------------

下载微信客户端版本号：6.3.27
及以上，只有小程序绑定的开发者有权限扫码体验。

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

源码下载：

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

- [[https://mp.weixin.qq.com/debug/wxadoc/dev/demo/demo.zip][下载源码
  版本20170111]]\\

[[file:feed_0/article_1/images/img1_u2.png]]\\

[[file:attachments/image/20160929/1475118666160936.png][[[file:feed_0/article_1/images/img2.jpg]]]]\\

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/3u9c1qhw.html]]

\\
\\
| [[../index_u33.html#article_1][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u35.html>>

| [[../article_3/index_u19.html][下一项]] |
[[../index_u33.html#article_2][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_1/index_u28.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 id="mina" class="calibre16">
#+END_HTML

框架

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生APP体验的服务。\\

框架提供了自己的视图层描述语言[[file:weixinapp-wxml.html][WXML]]和[[file:weixinapp-wxss.html][WXSS]]，以及基于[[file:javascript][JavaScript]]的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。

\\

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

响应的数据绑定

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

框架的核心是一个响应的数据绑定系统。

整个系统分为两块[[file:vuis1q9m.html][视图层(View)]]和[[file:47tz1q8n.html][逻辑层(App
Service)]]

框架可以让数据与视图非常简单地保持同步。当做数据修改的时候，只需要在逻辑层修改数据，视图层就会做相应的更新。

通过这个简单的例子来看：

#+BEGIN_EXAMPLE
    <!-- Thie is our View -->
    <view> Hello {{name}}! </view>
    <button bindtap="changeName"> Click me! </button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // This is our App Service.
    // This is our data.
    var helloData = {
      name: 'WeChat'
    }

    // Register a Page.
    Page({
      data: helloData,
      changeName: function(e) {
        // sent data change to view.
        this.setData({
          name: 'MINA'
        })
      }
    })
#+END_EXAMPLE

- 开发者通过框架将逻辑层数据中的=name=与视图层的=name=进行了绑定，所以在页面一打开的时候会显示=Hello WeChat!=
- 当点击按钮的时候，视图层会发送=changeName=的事件给逻辑层，逻辑层找到对应的事件处理函数
- 逻辑层执行了=setData=的操作，将name从=weChat=变为=MINA=，因为该数据和视图层已经绑定了，从而视图层会自动响应改变为=Hello MINA!=
  。

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

[[file:vuis1q9m.html][页面管理]]

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

框架管理了整个*小程序*的页面路由，可以做到页面间的无缝切换，并给以页面完整的生命周期。开发者需要做的只是将页面的数据，方法，生命周期函数注册进框架中，其他的一切复杂的操作都交由框架处理。

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

[[file:itz51q8o.html][基础组件]]

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

框架提供了一套基础的组件，这些组件自带微信风格的样式以及特殊的逻辑，开发者可以通过组合基础组件，创建出强大的*微信小程序*
。

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

[[file:hpm41q8p.html][丰富的API]]

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

框架提供丰富的微信原生API，可以方便的调起微信提供的能力，如获取[[file:weixinapp-open.html][用户信息]]，[[file:weixinapp-apidate.html][本地存储]]，[[file:uvq81qdh.html][支付功能]]等。

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/wgt21q8k.html]]

\\
\\
| [[../index_u33.html#article_2][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u19.html>>

| [[../article_4/index_u99.html][下一项]] |
[[../index_u33.html#article_3][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_2/index_u35.html][上一项]] |

--------------

* 文件结构
MINA程序包含一个描述整体程序的app和多个描述各自页面的page。

一个MINA程序主体部分由三个文件组成，必须放在项目的根目录，如下：

| 文件       | 必需   | 作用               |
|------------+--------+--------------------|
| app.js     | 是     | 小程序逻辑         |
| app.json   | 是     | 小程序公共设置     |
| app.wxss   | 否     | 小程序公共样式表   |

一个MINA页面由四个文件组成，分别是：

| 文件类型   | 必须   | 作用         |
|------------+--------+--------------|
| wxml       | 是     | 页面结构     |
| wxss       | 否     | 页面样式表   |
| json       | 否     | 页面配置     |
| js         | 是     | 页面逻辑     |

注意：为了方便开发者减少配置项，我们规定描述页面的这四个文件必须具有相同的路径与文件名。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/1g7f1q8l.html]]

\\
\\
| [[../index_u33.html#article_3][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u99.html>>

| [[../article_5/index_u54.html][下一项]] |
[[../index_u33.html#article_4][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_3/index_u19.html][上一项]] |

--------------

** 配置
   :PROPERTIES:
   :CUSTOM_ID: index_u99.html#配置
   :CLASS: calibre16
   :END:

--------------

我们使用=app.json=文件来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多
tab 等。

以下是一个包含了所有配置选项的简单配置=app.json= ：

#+BEGIN_EXAMPLE
    {
      "pages": [
        "pages/index/index",
        "pages/logs/index"
      ],  
    "window": {
        "navigationBarTitleText": "Demo"
      },
      "tabBar": {
        "list": [{
          "pagePath": "pages/index/index",
          "text": "首页"
        }, {
          "pagePath": "pages/logs/logs",
          "text": "日志"
        }]
      },
      "networkTimeout": {
        "request": 10000,
        "downloadFile": 10000
      },
      "debug": true
    }
#+END_EXAMPLE

app.json 配置项列表
| 属性                                                 | 类型           | 必填   | 描述                      |
|------------------------------------------------------+----------------+--------+---------------------------|
| [[#index_u99.html#pages][pages]]                     | String Array   | 是     | 设置页面路径              |
| [[#index_u99.html#window][window]]                   | Object         | 否     | 设置默认页面的窗口表现    |
| [[#index_u99.html#tabBar][tabBar]]                   | Object         | 否     | 设置底部 tab 的表现       |
| [[#index_u99.html#networkTimeout][networkTimeout]]   | Object         | 否     | 设置网络超时时间          |
| [[#index_u99.html#debug][debug]]                     | Boolean        | 否     | 设置是否开启 debug 模式   |

*** pages
    :PROPERTIES:
    :CUSTOM_ID: index_u99.html#pages
    :CLASS: calibre11
    :END:

接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。每一项代表对应页面的【路径+文件名】信息，*数组的第一项代表小程序的初始页面。小程序中新增/减少页面，都需要对
pages 数组进行修改。*

文件名不需要写文件后缀，因为框架会自动去寻找路径=.json=,=.js=,=.wxml=,=.wxss=的四个文件进行整合。

如开发目录为：

#+BEGIN_QUOTE
  pages/

  pages/index/index.wxml

  pages/index/index.js

  pages/index/index.wxss

  pages/logs/logs.wxml

  pages/logs/logs.js

  app.js

  app.json

  app.wxss
#+END_QUOTE

则，我们需要在 app.json 中写

#+BEGIN_EXAMPLE
    {
      "pages":[
        "pages/index/index"
        "pages/logs/logs"
      ]
    }
#+END_EXAMPLE

*** window
    :PROPERTIES:
    :CUSTOM_ID: index_u99.html#window
    :CLASS: calibre11
    :END:

用于设置小程序的状态栏、导航条、标题、窗口背景色。

| 属性                           | 类型       | 默认值    | 描述                                                                                                                         |
|--------------------------------+------------+-----------+------------------------------------------------------------------------------------------------------------------------------|
| navigationBarBackgroundColor   | HexColor   | #000000   | 导航栏背景颜色，如"#000000"                                                                                                  |
| navigationBarTextStyle         | String     | white     | 导航栏标题颜色，仅支持 black/white                                                                                           |
| navigationBarTitleText         | String     |           | 导航栏标题文字内容                                                                                                           |
| backgroundColor                | HexColor   | #ffffff   | 窗口的背景色                                                                                                                 |
| backgroundTextStyle            | String     | dark      | 下拉背景字体、loading 图的样式，仅支持 dark/light                                                                            |
| enablePullDownRefresh          | Boolean    | false     | 是否开启下拉刷新，详见[[http://caibaojian.com/weixinapp/weixinapp-page.html#页面相关事件处理函数][页面相关事件处理函数]]。   |
| onReachBottomDistance          | Number     | 50        | 页面上拉触底事件触发时距页面底部距离，单位为px                                                                               |

*注：HexColor（十六进制颜色值），如"#ff00ff"*

如 app.json ：

#+BEGIN_EXAMPLE
    {
      "window":{
        "navigationBarBackgroundColor": "#ffffff",
        "navigationBarTextStyle": "black",
        "navigationBarTitleText": "微信接口功能演示",
        "backgroundColor": "#eeeeee",
        "backgroundTextStyle": "light"
      }
    } 
#+END_EXAMPLE

[[file:feed_0/article_4/images/img1.jpg]]

\\

*** tabBar
    :PROPERTIES:
    :CUSTOM_ID: index_u99.html#tabBar
    :CLASS: calibre11
    :END:

如果我们的小程序是一个多 tab
应用（客户端窗口的底部有tab栏可以切换页面），那么我们可以通过 tabBar
配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。

Tip：

1. 当设置 position 为 top 时，将不会显示 icon

2. tabBar 是一个数组，*只能配置最少2个、最多5个 tab*，tab
按数组的顺序排序。

*属性说明：*

| 属性              | 类型       | 必填   | 默认值   | 描述                                                   |
|-------------------+------------+--------+----------+--------------------------------------------------------|
| color             | HexColor   | 是     |          | tab 上的文字默认颜色                                   |
| selectedColor     | HexColor   | 是     |          | tab 上的文字选中时的颜色                               |
| backgroundColor   | HexColor   | 是     |          | tab 的背景色                                           |
| borderStyle       | String     | 否     | black    | tabbar上边框的颜色， 仅支持 black/white                |
| list              | Array      | 是     |          | tab 的列表，详见 list 属性说明，最少2个、最多5个 tab   |
| position          | String     | 否     | bottom   | 可选值 bottom、top                                     |

其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：

| 属性               | 类型     | 必填   | 说明                                                                                               |
|--------------------+----------+--------+----------------------------------------------------------------------------------------------------|
| pagePath           | String   | 是     | 页面路径，必须在 pages 中先定义                                                                    |
| text               | String   | 是     | tab 上按钮文字                                                                                     |
| iconPath           | String   | 否     | 图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效            |
| selectedIconPath   | String   | 否     | 选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效   |

[[file:feed_0/article_1/images/img1_u2.png]]\\

** networkTimeout
   :PROPERTIES:
   :CLASS: calibre16
   :END:

可以设置各种网络请求的超时时间。

*属性说明：*

| 属性            | 类型     | 必填   | 说明                                                                               |
|-----------------+----------+--------+------------------------------------------------------------------------------------|
| request         | Number   | 否     | [[file:weixinapp-network-request.html][wx.request]]的超时时间，单位毫秒            |
| connectSocket   | Number   | 否     | [[file:weixinapp-network-socket.html][wx.connectSocket]]的超时时间，单位毫秒       |
| uploadFile      | Number   | 否     | [[file:4g8s1q9c.html#wxuploadfileobject][wx.uploadFile]]的超时时间，单位毫秒       |
| downloadFile    | Number   | 否     | [[file:4g8s1q9c.html#wxdownloadfileobject][wx.downloadFile]]的超时时间，单位毫秒   |

*** debug
    :PROPERTIES:
    :CUSTOM_ID: index_u99.html#debug
    :CLASS: calibre11
    :END:

可以在开发者工具中开启 debug 模式，在开发者工具的控制台面板，调试信息以
info
的形式给出，其信息有=Page的注册=，=页面路由=，=数据更新=，=事件触发=
。可以帮助开发者快速定位一些常见的问题。

** page.json
   :PROPERTIES:
   :CUSTOM_ID: index_u99.html#pagejson
   :CLASS: calibre16
   :END:

每一个小程序页面也可以使用=.json=文件来对本页面的窗口表现进行配置。页面的配置比=app.json=全局配置简单得多，只是设置
app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window
中相同的配置项。

页面的=.json=只能设置=window=相关的配置项，以决定本页面的窗口表现，所以无需写=window=这个键，如：

| 属性                           | 类型       | 默认值    | 描述                                                                                                                         |
|--------------------------------+------------+-----------+------------------------------------------------------------------------------------------------------------------------------|
| navigationBarBackgroundColor   | HexColor   | #000000   | 导航栏背景颜色，如"#000000"                                                                                                  |
| navigationBarTextStyle         | String     | white     | 导航栏标题颜色，仅支持 black/white                                                                                           |
| navigationBarTitleText         | String     |           | 导航栏标题文字内容                                                                                                           |
| backgroundColor                | HexColor   | #ffffff   | 窗口的背景色                                                                                                                 |
| backgroundTextStyle            | String     | dark      | 下拉背景字体、loading 图的样式，仅支持 dark/light                                                                            |
| enablePullDownRefresh          | Boolean    | false     | 是否开启下拉刷新，详见[[http://caibaojian.com/weixinapp/weixinapp-page.html#页面相关事件处理函数][页面相关事件处理函数。]]   |
| disableScroll                  | Boolean    | false     | 设置为 true 则页面整体不能上下滚动；只在 page.json 中有效，无法在 app.json 中设置该项                                        |

\\

#+BEGIN_EXAMPLE
    {
      "navigationBarBackgroundColor": "#ffffff",
      "navigationBarTextStyle": "black",
      "navigationBarTitleText": "微信接口功能演示",
      "backgroundColor": "#eeeeee",
      "backgroundTextStyle": "light"
    }
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/hw9k1q8m.html]]

\\
\\
| [[../index_u33.html#article_4][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u54.html>>

| [[../article_6/index_u97.html][下一项]] |
[[../index_u33.html#article_5][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_4/index_u99.html][上一项]] |

--------------

** 逻辑层(App Service)
   :PROPERTIES:
   :CUSTOM_ID: index_u54.html#逻辑层app-service
   :CLASS: calibre16
   :END:

--------------

小程序开发框架的逻辑层是由JavaScript编写。

逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。在
[[file:javascript][JavaScript]]
的基础上，我们做了一些修改，以方便地开发小程序。

- 增加 [[file:weixinapp-app.html][App]] 和
  [[file:weixinapp-page.html][Page]] 方法，进行程序和页面的注册。
- 提供丰富的 [[file:hpm41q8p.html][API]]，如扫一扫，支付等微信特有能力。
- 每个页面有独立的[[file:weixinapp-module.html#文件作用域][作用域]]，并提供[[file:weixinapp-module.html#模块化][模块化]]能力。
- 由于框架并非运行在浏览器中，所以 JavaScript 在 web
  中一些能力都无法使用，如 document，window 等。
- 开发者写的所有代码最终将会打包成一份
  JavaScript，并在小程序启动的时候运行，直到小程序销毁。类似
  ServiceWorker，所以逻辑层也称之为 App Service。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/47tz1q8n.html]]

\\
\\
| [[../index_u33.html#article_5][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u97.html>>

| [[../article_7/index_u75.html][下一项]] |
[[../index_u33.html#article_6][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_5/index_u54.html][上一项]] |

--------------

** App
   :PROPERTIES:
   :CUSTOM_ID: index_u97.html#app
   :CLASS: calibre16
   :END:

** App()
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

=App()=函数用来注册一个小程序。接受一个object参数，其指定小程序的生命周期函数等。

*object参数说明：*

**

| 属性       | 类型       | 描述                             | 触发时机                                                                   |
|------------+------------+----------------------------------+----------------------------------------------------------------------------|
| onLaunch   | Function   | 生命周期函数--监听小程序初始化   | 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）                    |
| onShow     | Function   | 生命周期函数--监听小程序显示     | 当小程序启动，或从后台进入前台显示，会触发 onShow                          |
| onHide     | Function   | 生命周期函数--监听小程序隐藏     | 当小程序从前台进入后台，会触发 onHide                                      |
| onError    | Function   | 错误监听函数                     | 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息   |
| 其他       | Any        | \\                               | 开发者可以添加任意的函数或数据到 Object 参数中，用 =this= 可以访问         |

*前台、后台定义：*当用户点击左上角关闭，或者按了设备 Home
键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。需要注意的是：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。

*关闭小程序(基础库版本1.1.0开始支持)：*当用户从扫一扫、转发等入口([[http://caibaojian.com/weixinapp/weixinapp-scene.html][场景值]]为1007,
1008, 1011,
1025)进入小程序，且没有置顶小程序的情况下退出，小程序会被销毁。*小程序运行机制在基础库版本 1.4.0 有所改变*：上一条关闭逻辑在新版本已不适用，[[http://caibaojian.com/weixinapp/weixinapp-operating-mechanism.html][详情]]

*示例代码：*

#+BEGIN_EXAMPLE
    App({
      onLaunch: function(options) { 
        // Do something initial when launch.
      },
      onShow: function(options) {
          // Do something when show.
      },
      onHide: function() {
          // Do something when hide.
      },
      onError: function(msg) {
        console.log(msg)
      },
      globalData: 'I am global data'
    })
#+END_EXAMPLE

*** onLaunch, onShow 参数
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 字段                     | 类型     | 说明                                                                                                                |
|--------------------------+----------+---------------------------------------------------------------------------------------------------------------------|
| path                     | String   | 打开小程序的路径                                                                                                    |
| query                    | Object   | 打开小程序的query                                                                                                   |
| scene                    | Number   | 打开小程序的场景值                                                                                                  |
| shareTicket              | String   | shareTicket，详见 [[http://caibaojian.com/weixinapp/weixinapp-api-share.html#获取更多转发信息][获取更多转发信息]]   |
| referrerInfo             | Object   | 当场景为由另一个小程序打开时，返回此字段                                                                            |
| referrerInfo.appId       | String   | 来源小程序的 appId                                                                                                  |
| referrerInfo.extraData   | Object   | 来源小程序传过来的数据                                                                                              |

场景值 [[http://caibaojian.com/weixinapp/weixinapp-scene.html][详见]]。

** getApp()
   :PROPERTIES:
   :CUSTOM_ID: index_u97.html#getApp()
   :CLASS: calibre16
   :END:

--------------

我们提供了全局的=getApp()=函数，可以获取到小程序实例。

#+BEGIN_EXAMPLE
    // other.js
    var appInstance = getApp()
    console.log(appInstance.globalData) // I am global data
#+END_EXAMPLE

*注意：*

=App()=必须在app.js中注册，且不能注册多个。

不要在定义于=App()=内的函数中调用=getApp()=，使用=this=就可以拿到app实例。

不要在onLaunch的时候调用=getCurrentPage()=，此时page还没有生成。

通过=getApp()=获取实例之后，不要私自调用生命周期函数。

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-app.html]]

\\
\\
| [[../index_u33.html#article_6][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u75.html>>

| [[../article_8/index_u95.html][下一项]] |
[[../index_u33.html#article_7][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_6/index_u97.html][上一项]] |

--------------

* 
  :PROPERTIES:
  :CLASS: calibre44
  :END:

** 场景值
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

--------------

当前支持的场景值有：

| 场景值ID   | 说明                                                                                                                    |
|------------+-------------------------------------------------------------------------------------------------------------------------|
| 1001       | 发现栏小程序主入口                                                                                                      |
| 1005       | 顶部搜索框的搜索结果页                                                                                                  |
| 1006       | 发现栏小程序主入口搜索框的搜索结果页                                                                                    |
| 1007       | 单人聊天会话中的小程序消息卡片                                                                                          |
| 1008       | 群聊会话中的小程序消息卡片                                                                                              |
| 1011       | 扫描二维码                                                                                                              |
| 1012       | 长按图片识别二维码                                                                                                      |
| 1013       | 手机相册选取二维码                                                                                                      |
| 1014       | 小程序模版消息                                                                                                          |
| 1017       | 前往体验版的入口页                                                                                                      |
| 1019       | 微信钱包                                                                                                                |
| 1020       | 公众号 profile 页相关小程序列表                                                                                         |
| 1022       | 聊天顶部置顶小程序入口                                                                                                  |
| 1023       | 安卓系统桌面图标                                                                                                        |
| 1024       | 小程序 profile 页                                                                                                       |
| 1025       | 扫描一维码                                                                                                              |
| 1026       | 附近小程序列表                                                                                                          |
| 1028       | 我的卡包                                                                                                                |
| 1029       | 卡券详情页                                                                                                              |
| 1031       | 长按图片识别一维码                                                                                                      |
| 1032       | 手机相册选取一维码                                                                                                      |
| 1034       | 微信支付完成页                                                                                                          |
| 1035       | 公众号自定义菜单                                                                                                        |
| 1036       | App 分享消息卡片                                                                                                        |
| 1037       | 小程序打开小程序                                                                                                        |
| 1038       | 从另一个小程序返回                                                                                                      |
| 1039       | 摇电视                                                                                                                  |
| 1042       | 添加好友搜索框的搜索结果页                                                                                              |
| 1043       | 公众号模板消息                                                                                                          |
| 1044       | 带 shareTicket 的小程序消息卡片（[[http://caibaojian.com/weixinapp/weixinapp-api-share.html#获取更多转发信息][详情]])   |
| 1047       | 扫描小程序码                                                                                                            |
| 1048       | 长按图片识别小程序码                                                                                                    |
| 1049       | 手机相册选取小程序码                                                                                                    |
| 1052       | 卡券的适用门店列表                                                                                                      |
| 1053       | 搜一搜的结果页                                                                                                          |
| 1056       | 音乐播放器菜单                                                                                                          |
| 1058       | 公众号文章                                                                                                              |
| 1059       | 体验版小程序绑定邀请页                                                                                                  |
| 1067       | 公众号文章广告                                                                                                          |
| 1068       | 附近小程序列表广告                                                                                                      |

可以在 App
的 =onLaunch= 和 =onShow= 中获取。 [[http://caibaojian.com/weixinapp/weixinapp-app.html][详见]]

*Tip*: 由于Android系统限制，目前还无法获取到按 Home 键退出到桌面，然后从桌面再次进小程序的场景值，对于这种情况，会保留上一次的场景值。

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-scene.html]]

\\
\\
| [[../index_u33.html#article_7][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u95.html>>

| [[../article_9/index_u64.html][下一项]] |
[[../index_u33.html#article_8][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_7/index_u75.html][上一项]] |

--------------

** Page
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#page
   :CLASS: calibre16
   :END:

--------------

=Page()= 函数用来注册一个页面。接受一个 object
参数，其指定页面的初始数据、生命周期函数、事件处理函数等。

*object 参数说明：*

| 属性                                   | 类型       | 描述                                                                               |
|----------------------------------------+------------+------------------------------------------------------------------------------------|
| [[#index_u95.html#初始化数据][data]]   | Object     | 页面的初始数据                                                                     |
| onLoad                                 | Function   | 生命周期函数--监听页面加载                                                         |
| onReady                                | Function   | 生命周期函数--监听页面初次渲染完成                                                 |
| onShow                                 | Function   | 生命周期函数--监听页面显示                                                         |
| onHide                                 | Function   | 生命周期函数--监听页面隐藏                                                         |
| onUnload                               | Function   | 生命周期函数--监听页面卸载                                                         |
| onPullDownRefresh                      | Function   | 页面相关事件处理函数--监听用户下拉动作                                             |
| onReachBottom                          | Function   | 页面上拉触底事件的处理函数                                                         |
| onShareAppMessage                      | Function   | 用户点击右上角转发                                                                 |
| onPageScroll                           | Function   | 页面滚动触发事件的处理函数                                                         |
| 其他                                   | Any        | 开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 =this= 可以访问   |

*示例代码：*

#+BEGIN_EXAMPLE
    //index.js
    Page({
      data: {
        text: "This is page data."
      },
      onLoad: function(options) {
        // Do some initialize when page load.
      },
      onReady: function() {
        // Do something when page ready.
      },
      onShow: function() {
        // Do something when page show.
      },
      onHide: function() {
        // Do something when page hide.
      },
      onUnload: function() {
        // Do something when page close.
      },
      onPullDownRefresh: function() {
        // Do something when pull down.
      },
      onReachBottom: function() {
        // Do something when page reach bottom.
      },
      onShareAppMessage: function () {
       // return custom share data when user share.
      },
      onPageScroll: function() {
        // Do something when page scroll
      },
      // Event handler.
      viewTap: function() {
        this.setData({
          text: 'Set some data for updating view.'
        })
      },
      customData: {
        hi: 'MINA'
      }
    })
#+END_EXAMPLE

** 初始化数据
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#初始化数据
   :CLASS: calibre16
   :END:

--------------

初始化数据将作为页面的第一次渲染。data 将会以 JSON
的形式由逻辑层传至渲染层，所以其数据必须是可以转成 JSON
的格式：字符串，数字，布尔值，对象，数组。

渲染层可以通过 [[../view/wxml][WXML]] 对数据进行绑定。

*示例代码：*

\\

#+BEGIN_EXAMPLE
    <view>{{text}}</view>
    <view>{{array[0].msg}}</view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        text: 'init data',
        array: [{msg: '1'}, {msg: '2'}]
      }
    })
#+END_EXAMPLE

** 
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#生命周期函数
   :CLASS: calibre16
   :END:

** 生命周期函数
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

- =onLoad=: 页面加载

  - 一个页面只会调用一次，可以在 onLoad 中获取打开当前页面所调用的 query
    参数。

- =onShow=: 页面显示

  - 每次打开页面都会调用一次。

- =onReady=: 页面初次渲染完成

  - 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。
  - 对界面的设置如=wx.setNavigationBarTitle=请在=onReady=之后设置。详见[[#index_u95.html#生命周期][生命周期]]

- =onHide=: 页面隐藏

  - 当=navigateTo=或底部=tab=切换时调用。

- =onUnload=: 页面卸载

  - 当=redirectTo=或=navigateBack=的时候调用。

生命周期的调用以及页面的路由方式[[file:route.html][详见]]

*onLoad参数*

| 类型     | 说明                                      |
|----------+-------------------------------------------|
| Object   | 其他页面打开当前页面所调用的 query 参数   |

** 页面相关事件处理函数
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#页面相关事件处理函数
   :CLASS: calibre16
   :END:

--------------

- =onPullDownRefresh=: 下拉刷新

  - 监听用户下拉刷新事件。
  - 需要在=config=的[[../config.html#window][=window=]]选项中开启=enablePullDownRefresh=。
  - 当处理完数据刷新后，[[../../api/pulldown.html#wxstoppulldownrefresh][=wx.stopPullDownRefresh=]]可以停止当前页面的下拉刷新。

- =onReachBottom=: 上拉触底

  - 监听用户下拉触底事件。

- =onPageScroll=: 页面滚动

  - 监听用户滑动页面事件。
  - 参数为 Object，包含以下字段：

| 字段        | 类型     | 说明                                   |
|-------------+----------+----------------------------------------|
| scrollTop   | Number   | 页面在垂直方向已滚动的距离（单位px）   |

- =onShareAppMessage=: 用户转发

  - 只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮
  - 用户点击转发按钮的时候会调用
  - 此事件需要 return 一个 Object，用于自定义转发内容

*自定义转发字段*

| 字段    | 说明       | 默认值                                      |
|---------+------------+---------------------------------------------|
| title   | 转发标题   | 当前小程序名称                              |
| path    | 转发路径   | 当前页面 path ，必须是以 / 开头的完整路径   |

*示例代码*

#+BEGIN_EXAMPLE
    Page({
      onShareAppMessage: function () {
        return {
          title: '自定义转发标题',
          path: '/page/user?id=123'
        }
      }
    })
#+END_EXAMPLE

** 
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#事件处理函数
   :CLASS: calibre16
   :END:

\\

#+BEGIN_HTML
  </h2>
#+END_HTML

** 事件处理函数
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

除了初始化数据和生命周期函数，Page
中还可以定义一些特殊的函数：事件处理函数。在渲染层可以在组件中加入[[../view/wxml/event.html][事件绑定]]，当达到触发事件时，就会执行
Page 中定义的事件处理函数。

*示例代码：*

#+BEGIN_EXAMPLE
    <view bindtap="viewTap"> click me </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      viewTap: function() {
        console.log('view tap')
      }
    })
#+END_EXAMPLE

** Page.prototype.route
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#pageprototyperoute
   :CLASS: calibre16
   :END:

--------------

=route= 字段可以获取到当前页面的路径。

** Page.prototype.setData()
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#pageprototypesetdata
   :CLASS: calibre16
   :END:

--------------

=setData= 函数用于将数据从逻辑层发送到视图层，同时改变对应的 =this.data=
的值。

** setData() 参数格式
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#setdata-参数格式
   :CLASS: calibre16
   :END:

--------------

接受一个对象，以 key，value 的形式表示将 this.data 中的 key
对应的值改变成 value。

其中 key 可以非常灵活，以数据路径的形式给出，如
=array[2].message=，=a.b.c.d=，并且不需要在 this.data 中预先定义。

*注意：*

1. *直接修改 this.data 而不调用 this.setData
   是无法改变页面的状态的，还会造成数据不一致*
2. *单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据*。

*示例代码：*

#+BEGIN_EXAMPLE
    <!--index.wxml-->
    <view>{{text}}</view>
    <button bindtap="changeText"> Change normal data </button>
    <view>{{num}}</view>
    <button bindtap="changeNum"> Change normal num </button>
    <view>{{array[0].text}}</view>
    <button bindtap="changeItemInArray"> Change Array data </button>
    <view>{{object.text}}</view>
    <button bindtap="changeItemInObject"> Change Object data </button>
    <view>{{newField.text}}</view>
    <button bindtap="addNewField"> Add new data </button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    //index.js
    Page({
      data: {
        text: 'init data',
        num: 0,
        array: [{text: 'init data'}],
        object: {
          text: 'init data'
        }
      },
      changeText: function() {
        // this.data.text = 'changed data'  // bad, it can not work
        this.setData({
          text: 'changed data'
        })
      },
      changeNum: function() {
        this.data.num = 1
        this.setData({
          num: this.data.num
        })
      },
      changeItemInArray: function() {
        // you can use this way to modify a danamic data path
        this.setData({
          'array[0].text':'changed data'
        })
      },
      changeItemInObject: function(){
        this.setData({
          'object.text': 'changed data'
        });
      },
      addNewField: function() {
        this.setData({
          'newField.text': 'new data'
        })
      }
    })
#+END_EXAMPLE

*以下内容你不需要立马完全弄明白，不过以后它会有帮助。*

** 生命周期
   :PROPERTIES:
   :CUSTOM_ID: index_u95.html#生命周期
   :CLASS: calibre16
   :END:

--------------

下图说明了 Page 实例的生命周期。

[[file:feed_0/article_8/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png]]

\\

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-page.html]]

\\
\\
| [[../index_u33.html#article_8][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u64.html>>

| [[../article_10/index_u1.html][下一项]] |
[[../index_u33.html#article_9][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_8/index_u95.html][上一项]] |

--------------

* 页面路由
  :PROPERTIES:
  :CLASS: calibre44
  :END:

在小程序中所有页面的路由全部由框架进行管理。

*** 页面栈
    :PROPERTIES:
    :CLASS: calibre11
    :END:

框架以栈的形式维护了当前的所有页面。当发生路由切换的时候，页面栈的表现如下：

| 路由方式     | 页面栈表现                                 |
|--------------+--------------------------------------------|
| 初始化       | 新页面入栈                                 |
| 打开新页面   | 新页面入栈                                 |
| 页面重定向   | 当前页面出栈，新页面入栈                   |
| 页面返回     | 页面不断出栈，直到目标返回页，新页面入栈   |
| Tab 切换     | 页面全部出栈，只留下新的 Tab 页面          |
| 重加载       | 页面全部出栈，只留下新的页面               |

*** getCurrentPages()
    :PROPERTIES:
    :CLASS: calibre11
    :END:

=getCurrentPages()=函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。

*Tip：不要尝试修改页面栈，会导致路由以及页面状态错误。*

*** 路由方式
    :PROPERTIES:
    :CLASS: calibre11
    :END:

对于路由的触发方式以及页面生命周期函数如下：

| 路由方式     | 触发时机                                                                                                                                                                                                                                               | 路由前页面   | 路由后页面           |
|--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------+----------------------|
| 初始化       | 小程序打开的第一个页面                                                                                                                                                                                                                                 |              | onLoad, onSHow       |
| 打开新页面   | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigatetoobject][=wx.navigateTo=]] 或使用组件 [[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="navigateTo"/>=]]                             | onHide       | onLoad, onShow       |
| 页面重定向   | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxredirecttoobject][=wx.redirectTo=]] 或使用组件 [[https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html][=<navigator open-type="redirectTo"/>=]]                   | onUnload     | onLoad, onShow       |
| 页面返回     | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigatebackobject][=wx.navigateBack=]] 或使用组件[[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="navigateBack">=]]或用户按左上角返回按钮   | onUnload     | onShow               |
| Tab 切换     | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxswitchtabobject][=wx.switchTab=]] 或使用组件 [[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="switchTab"/>=]] 或用户切换 Tab                 |              | 各种情况请参考下表   |
| 重启动       | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxrelaunchobject][=wx.reLaunch=]] 或使用组件 [[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="reLaunch"/>=]]                                   | onUnload     | onLoad, onShow       |

Tab 切换对应的生命周期（以 A、B 页面为 Tabbar 页面，C 是从 A
页面打开的页面，D 页面是从 C 页面打开的页面为例）：

| 当前页面          | 路由后页面      | 触发的生命周期（按顺序）                             |
|-------------------+-----------------+------------------------------------------------------|
| A                 | A               | Nothing happend                                      |
| A                 | B               | A.onHide(), B.onLoad(), B.onShow()                   |
| A                 | B（再次打开）   | A.onHide(), B.onShow()                               |
| C                 | A               | C.onUnload(), A.onShow()                             |
| C                 | B               | C.onUnload(), B.onLoad(), B.onShow()                 |
| D                 | B               | D.onUnload(), C.onUnload(), B.onLoad(), B.onShow()   |
| D（从转发进入）   | A               | D.onUnload(), A.onLoad(), A.onShow()                 |
| D（从转发进入）   | B               | D.onUnload(), B.onLoad(), B.onShow()                 |

*Tips：*

- =navigateTo=,=redirectTo=只能打开非 tabBar 页面。
- =switchTab= 只能打开 tabBar 页面。
- =reLaunch= 可以打开任意页面。
- 页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有
  tabBar。
- 调用页面路由带的参数可以在目标页面的=onLoad=中获取。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/route.html]]

\\
\\
| [[../index_u33.html#article_9][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u1.html>>

| [[../article_11/index_u87.html][下一项]] |
[[../index_u33.html#article_10][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_9/index_u64.html][上一项]] |

--------------

** 文件作用域
   :PROPERTIES:
   :CUSTOM_ID: index_u1.html#文件作用域
   :CLASS: calibre16
   :END:

在JavaScript文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。

通过全局函数[[file:weixinapp-app.html#getApp%28%29][=getApp()=]]可以获取全局的应用实例，如果需要全局的数据可以在=App()=中设置，如：

#+BEGIN_EXAMPLE
    // app.js
    App({
      globalData: 1
    })
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // a.js
    // The localValue can only be used in file a.js.
    var localValue = 'a'
    // Get the app instance.
    var app = getApp()
    // Get the global data and change it.
    app.globalData++
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // b.js
    // You can redefine localValue in file b.js, without interference with the localValue in a.js.
    var localValue = 'b'
    // If a.js it run before b.js, now the globalData shoule be 2.
    console.log(getApp().globalData)
#+END_EXAMPLE

** 模块化
   :PROPERTIES:
   :CUSTOM_ID: index_u1.html#模块化
   :CLASS: calibre16
   :END:

我们可以将一些公共的代码抽离成为一个单独的js文件，作为一个模块。模块只有通过=module.exports=或者 =exports=才能对外暴露接口。

需要注意的是：

- =exports=是=module.exports=的一个引用，因此在模块里边随意更改=exports=的指向会造成未知的错误。所以我们更推荐开发者采用=module.exports=来暴露模块接口，除非你已经清晰知道这两者的关系。
- 小程序目前不支持直接引入=node_modules=，开发者需要使用到=node_modules=时候建议拷贝出相关的代码到小程序的目录中。

\\
#+BEGIN_EXAMPLE
    // common.js
    function sayHello(name) {
      console.log('Hello ${name} !')
    }
    function sayGoodbye(name) {
      console.log('Goodbye ${name} !')
    }

    module.exports.sayHello = sayHello
    exports.sayGoodbye = sayGoodbye
#+END_EXAMPLE

在需要使用这些模块的文件中，使用=require(path)=将公共代码引入。

#+BEGIN_EXAMPLE
    var common = require('common.js')
    Page({
      helloMINA: function() {
        common.sayHello('MINA')
      }
      goodbyeMINA: function() {
        common.sayGoodbye('MINA')
      }
    })
#+END_EXAMPLE

** Tips
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. tip：=require=暂时不支持绝对路径\\

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-module.html]]

\\
\\
| [[../index_u33.html#article_10][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u87.html>>

| [[../article_12/index_u27.html][下一项]] |
[[../index_u33.html#article_11][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_10/index_u1.html][上一项]] |

--------------

** 小程序API
   :PROPERTIES:
   :CUSTOM_ID: index_u87.html#api
   :CLASS: calibre16
   :END:

小程序开发框架MINA提供丰富的微信原生API，可以方便的调起微信提供的能力，如获取[[file:weixinapp-open.html][用户信息]]，[[file:weixinapp-apidate.html][本地存储]]，[[file:uvq81qdh.html][支付功能]]等。

详细介绍请参考[[file:hpm41q8p.html][微信小程序API文档]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api.html]]

\\
\\
| [[../index_u33.html#article_11][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u27.html>>

| [[../article_13/index_u30.html][下一项]] |
[[../index_u33.html#article_12][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_11/index_u87.html][上一项]] |

--------------

** 视图层
   :PROPERTIES:
   :CUSTOM_ID: index_u27.html#视图层
   :CLASS: calibre16
   :END:

--------------

- MINA的视图层由WXML与WXSS编写。\\
- 将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。\\
- WXML(WeiXin Markup language)用于描述页面的结构。\\
- WXSS(WeiXin Style Sheet)用于描述页面的样式。\\
- 组件(Component)是视图的基本组成单元。\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/vuis1q9m.html]]

\\
\\
| [[../index_u33.html#article_12][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u30.html>>

| [[../article_14/index_u12.html][下一项]] |
[[../index_u33.html#article_13][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_12/index_u27.html][上一项]] |

--------------

** WXML
   :PROPERTIES:
   :CUSTOM_ID: index_u30.html#wxml
   :CLASS: calibre16
   :END:

--------------

WXML(WeiXin Markup
Language)是框架设计的一套标签语言，结合[[file:itz51q8o.html][基础组件]]、[[file:weixinapp-event.html][事件系统]]，可以构建出页面的结构。

用以下一些简单的例子来看看WXML具有什么能力：

** [[file:weixinapp-data.html][数据绑定]]
   :PROPERTIES:
   :CUSTOM_ID: index_u30.html#数据绑定
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_EXAMPLE
    <!--wxml-->
    <view> {{message}} </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // page.js
    Page({
      data: {
        message: 'Hello MINA!'
      }
    })
#+END_EXAMPLE

** [[file:weixinapp-list.html][列表渲染]]
   :PROPERTIES:
   :CUSTOM_ID: index_u30.html#列表渲染
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_EXAMPLE
    <!--wxml-->
    <view wx:for-items="{{array}}"> {{item}} </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // page.js
    Page({
      data: {
        array: [1, 2, 3, 4, 5]
      }
    })
#+END_EXAMPLE

** [[file:weixinapp-conditional.html][条件渲染]]
   :PROPERTIES:
   :CUSTOM_ID: index_u30.html#条件渲染
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_EXAMPLE
    <!--wxml-->
    <view wx:if="{{view == 'WEBVIEW'}}"> WEBVIEW </view>
    <view wx:elif="{{view == 'APP'}}"> APP </view>
    <view wx:else="{{view == 'MINA'}}"> MINA </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // page.js
    Page({
      data: {
        view: 'MINA'
      }
    })
#+END_EXAMPLE

** [[file:weixinapp-template.html][模板]]
   :PROPERTIES:
   :CUSTOM_ID: index_u30.html#模板
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_EXAMPLE
    <!--wxml-->
    <template name="staffName">
      <view>
        FirstName: {{firstName}}, LastName: {{lastName}}
      </view>
    </template>

    <template is="staffName" data="{{...staffA}}"></template>
    <template is="staffName" data="{{...staffB}}"></template>
    <template is="staffName" data="{{...staffC}}"></template>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // page.js
    Page({
      data: {
        staffA: {firstName: 'Hulk', lastName: 'Hu'},
        staffB: {firstName: 'Shang', lastName: 'You'},
        staffC: {firstName: 'Gideon', lastName: 'Lin'}
      }
    })
#+END_EXAMPLE

** [[http://caibaojian.com/weixinapp/weixinapp-event.html][事件]]
   :PROPERTIES:
   :CUSTOM_ID: index_u30.html#事件
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_EXAMPLE
    <view bindtap="add"> {{count}} </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        count: 1
      },
      add: function(e) {
        this.setData({
          count: this.data.count + 1
        })
      }
    })
#+END_EXAMPLE

具体的能力以及使用方式在以下章节查看：

[[file:weixinapp-data.html][数据绑定]]、[[file:weixinapp-list.html][列表渲染]]、[[file:weixinapp-conditional.html][条件渲染]]、[[file:weixinapp-template.html][模板]]、[[http://caibaojian.com/weixinapp/weixinapp-event.html][事件]]、[[file:weixinapp-import.html][引用]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-wxml.html]]

\\
\\
| [[../index_u33.html#article_13][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u12.html>>

| [[../article_15/index_u21.html][下一项]] |
[[../index_u33.html#article_14][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_13/index_u30.html][上一项]] |

--------------

** 数据绑定
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#数据绑定
   :CLASS: calibre16
   :END:

WXML中的动态数据均来自对应Page的data。

** 简单绑定
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#简单绑定
   :CLASS: calibre16
   :END:

数据绑定使用"Mustache"语法（双大括号）将变量包起来，可以作用于：

** 内容
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#内容
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view> {{ message }} </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        message: 'Hello MINA!'
      }
    })
#+END_EXAMPLE

** 组件属性(需要在双引号之内)
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#组件属性需要在双引号之内
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view id="item-{{id}}"> </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        id: 0
      }
    })
#+END_EXAMPLE

** 控制属性(需要在双引号之内)
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#控制属性需要在双引号之内
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view wx:if="{{condition}}"> </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        condition: true
      }
    })
#+END_EXAMPLE

** 关键字(需要在双引号之内)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

=true=：boolean 类型的 true，代表真值。

=false=： boolean 类型的 false，代表假值。

#+BEGIN_EXAMPLE
    <checkbox checked="{{false}}"> </checkbox>
#+END_EXAMPLE

/特别注意：不要直接写 =checked="false"=，其计算结果是一个字符串，转成
boolean 类型后代表真值。/

\\

** 运算
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#运算
   :CLASS: calibre16
   :END:

可以在={{}}=内进行简单的运算，支持的有如下几种方式：

** 三元运算
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#三元运算
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view hidden="{{flag ? true : false}}"> Hidden </view>
#+END_EXAMPLE

** 算数运算
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#算数运算
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view> {{a + b}} + {{c}} + d </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        a: 1,
        b: 2,
        c: 3
      }
    })
#+END_EXAMPLE

view中的内容为=3 + 3 + d=。

** 逻辑判断
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#逻辑判断
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view wx:if="{{length > 5}}"> </view>
#+END_EXAMPLE

** 字符串运算
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#字符串运算
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view>{{"hello" + name}}</view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data:{
        name:"MINA"
      }
    })
#+END_EXAMPLE

*** 数据路径运算
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_EXAMPLE
    <view>{{object.key}} {{array[0]}}</view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        object: {
          key: 'Hello '
        },
        array: ['MINA']
      }
    })
#+END_EXAMPLE

** 组合
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#组合
   :CLASS: calibre16
   :END:

也可以在Mustache内直接进行组合，构成新的对象或者数组。

** 数组
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#数组
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view wx:for-items="{{[zero, 1, 2, 3, 4]}}"> {{item}} </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        zero: 0
      }
    })
#+END_EXAMPLE

最终组合成数组[0, 1, 2, 3, 4]。

** 对象
   :PROPERTIES:
   :CUSTOM_ID: index_u12.html#对象
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <template is="objectCombine" data="{{for: a, bar: b}}"></template>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        a: 1,
        b: 2
      }
    })
#+END_EXAMPLE

最终组合成的对象是={for: 1, bar: 2}=

也可以用扩展运算符=...=来将一个对象展开

#+BEGIN_EXAMPLE
    <template is="objectCombine" data="{{...obj1, ...obj2, e: 5}}"></template>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        obj1: {
          a: 1,
          b: 2
        },
        obj2: {
          c: 3,
          d: 4
        }
      }
    })
#+END_EXAMPLE

最终组合成的对象是={a: 1, b: 2, c: 3, d: 4, e: 5}=

如果对象的key和value相同，也可以间接地表达。

#+BEGIN_EXAMPLE
    <template is="objectCombine" data="{{foo, bar}}"></template>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        foo: 'my-foo',
        bar: 'my-bar'
      }
    })
#+END_EXAMPLE

最终组合成的对象是={foo: 'my-foo', bar:'my-bar'}=。

*注意：*上述方式可以随意组合，但是如有存在变量名相同的情况，后边的会覆盖前面，如：

#+BEGIN_EXAMPLE
    <template is="objectCombine" data="{{...obj1, ...obj2, a, c: 6}}"></template>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        obj1: {
          a: 1,
          b: 2
        },
        obj2: {
          b: 3,
          c: 4
        },
        a: 5
      }
    })
#+END_EXAMPLE

最终组合成的对象是 ={a: 5, b: 3, c: 6}=。

*注意：* 花括号和引号之间如果有空格，将最终被解析成为字符串

#+BEGIN_EXAMPLE
    <view wx:for="{{[1,2,3]}} ">
      {{item}}
    </view>
#+END_EXAMPLE

等同于

#+BEGIN_EXAMPLE
    <view wx:for="{{[1,2,3] + ' '}}">
      {{item}}
    </view>
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-data.html]]

\\
\\
| [[../index_u33.html#article_14][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u21.html>>

| [[../article_16/index_u62.html][下一项]] |
[[../index_u33.html#article_15][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_14/index_u12.html][上一项]] |

--------------

** wx:for
   :PROPERTIES:
   :CUSTOM_ID: index_u21.html#wxfor
   :CLASS: calibre16
   :END:

--------------

在组件上使用 =wx:for=
控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。

默认数组的当前项的下标变量名默认为 =index=，数组当前项的变量名默认为
=item=

#+BEGIN_EXAMPLE
    <view wx:for="{{array}}">
      {{index}}: {{item.message}}
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        array: [{
          message: 'foo',
        }, {
          message: 'bar'
        }]
      }
    })
#+END_EXAMPLE

使用 =wx:for-item= 可以指定数组当前元素的变量名，

使用 =wx:for-index= 可以指定数组当前下标的变量名：

#+BEGIN_EXAMPLE
    <view wx:for="{{array}}" wx:for-index="idx" wx:for-item="itemName">
      {{idx}}: {{itemName.message}}
    </view>
#+END_EXAMPLE

=wx:for= 也可以嵌套，下边是一个九九乘法表

#+BEGIN_EXAMPLE
    <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="i">
      <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="j">
        <view wx:if="{{i <= j}}">
          {{i}} * {{j}} = {{i * j}}
        </view>
      </view>
    </view>
#+END_EXAMPLE

** block wx:for
   :PROPERTIES:
   :CUSTOM_ID: index_u21.html#block-wxfor
   :CLASS: calibre16
   :END:

--------------

类似 =block wx:if=，也可以将 =wx:for=
用在=<block/>=标签上，以渲染一个包含多节点的结构块。例如：

#+BEGIN_EXAMPLE
    <block wx:for="{{[1, 2, 3]}}">
      <view> {{index}}: </view>
      <view> {{item}} </view>
    </block>
#+END_EXAMPLE

** wx:key
   :PROPERTIES:
   :CUSTOM_ID: index_u21.html#wxkey
   :CLASS: calibre16
   :END:

--------------

如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如
=<input/>= 中的输入内容，=<switch/>= 的选中状态），需要使用 =wx:key=
来指定列表中项目的唯一的标识符。

=wx:key= 的值以两种形式提供

1. 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property
   的值需要是列表中唯一的字符串或数字，且不能动态改变。
2. 保留关键字 =*this= 代表在 for 循环中的 item 本身，这种表示需要 item
   本身是一个唯一的字符串或者数字，如：

当数据改变触发渲染层重新渲染的时候，会校正带有 key
的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。

*如不提供 =wx:key=，会报一个 =warning=，
如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。*

*示例代码：*

#+BEGIN_EXAMPLE
    <switch wx:for="{{objectArray}}" wx:key="unique" style="display: block;"> {{item.id}} </switch>
    <button bindtap="switch"> Switch </button>
    <button bindtap="addToFront"> Add to the front </button>

    <switch wx:for="{{numberArray}}" wx:key="*this" style="display: block;"> {{item}} </switch>
    <button bindtap="addNumberToFront"> Add to the front </button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        objectArray: [
          {id: 5, unique: 'unique_5'},
          {id: 4, unique: 'unique_4'},
          {id: 3, unique: 'unique_3'},
          {id: 2, unique: 'unique_2'},
          {id: 1, unique: 'unique_1'},
          {id: 0, unique: 'unique_0'},
        ],
        numberArray: [1, 2, 3, 4]
      },
      switch: function(e) {
        const length = this.data.objectArray.length
        for (let i = 0; i < length; ++i) {
          const x = Math.floor(Math.random() * length)
          const y = Math.floor(Math.random() * length)
          const temp = this.data.objectArray[x]
          this.data.objectArray[x] = this.data.objectArray[y]
          this.data.objectArray[y] = temp
        }
        this.setData({
          objectArray: this.data.objectArray
        })
      },
      addToFront: function(e) {
        const length = this.data.objectArray.length
        this.data.objectArray = [{id: length, unique: 'unique_' + length}].concat(this.data.objectArray)
        this.setData({
          objectArray: this.data.objectArray
        })
      },
      addNumberToFront: function(e){
        this.data.numberArray = [ this.data.numberArray.length + 1 ].concat(this.data.numberArray)
        this.setData({
          numberArray: this.data.numberArray
        })
      }
    })
#+END_EXAMPLE

*注意：*

当 =wx:for= 的值为字符串时，会将字符串解析成字符串数组

#+BEGIN_EXAMPLE
    <view wx:for="array">
      {{item}}
    </view>
#+END_EXAMPLE

等同于

#+BEGIN_EXAMPLE
    <view wx:for="{{['a','r','r','a','y']}}">
      {{item}}
    </view>
#+END_EXAMPLE

*注意：* 花括号和引号之间如果有空格，将最终被解析成为字符串

#+BEGIN_EXAMPLE
    <view wx:for="{{[1,2,3]}} ">
      {{item}}
    </view>
#+END_EXAMPLE

等同于

#+BEGIN_EXAMPLE
    <view wx:for="{{[1,2,3] + ' '}}" >
      {{item}}
    </view>
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-list.html]]

\\
\\
| [[../index_u33.html#article_15][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u62.html>>

| [[../article_17/index_u92.html][下一项]] |
[[../index_u33.html#article_16][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_15/index_u21.html][上一项]] |

--------------

** wx:if
   :PROPERTIES:
   :CUSTOM_ID: index_u62.html#wxif
   :CLASS: calibre16
   :END:

在框架中，我们用=wx:if="{{condition}}"=来判断是否需要渲染该代码块：

#+BEGIN_EXAMPLE
    <view wx:if="{{condition}}"> True </view>
#+END_EXAMPLE

也可以用=wx:elif=和=wx:else=来添加一个else块：

#+BEGIN_EXAMPLE
    <view wx:if="{{length > 5}}"> 1 </view>
    <view wx:elif="{{length > 2}}"> 2 </view>
    <view wx:else> 3 </view>
#+END_EXAMPLE

** block wx:if
   :PROPERTIES:
   :CUSTOM_ID: index_u62.html#block-wxif
   :CLASS: calibre16
   :END:

因为=wx:if=是一个控制属性，需要将它添加到一个标签上。但是如果我们想一次性判断多个组件标签，我们可以使用一个=<block/>=标签将多个组件包装起来，并在上边使用=wx:if=控制属性。

#+BEGIN_EXAMPLE
    <block wx:if="{{true}}">
      <view> view1 </view>
      <view> view2 </view>
    </block>
#+END_EXAMPLE

*注意：*=<block/>=并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。

** =wx:if=vs=hidden=
   :PROPERTIES:
   :CUSTOM_ID: index_u62.html#wxif-vs-hidden
   :CLASS: calibre16
   :END:

因为=wx:if=之中的模板也可能包含数据绑定，所以当=wx:if=的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。

同时=wx:if=也是*惰性的*，如果在初始渲染条件为=false=，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。

相比之下，=hidden=就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。

一般来说，=wx:if=有更高的切换消耗而=hidden=有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用=hidden=更好，如果在运行时条件不大可能改变则=wx:if=较好。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-conditional.html]]

\\
\\
| [[../index_u33.html#article_16][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u92.html>>

| [[../article_18/index_u6.html][下一项]] |
[[../index_u33.html#article_17][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_16/index_u62.html][上一项]] |

--------------

** 模板
   :PROPERTIES:
   :CUSTOM_ID: index_u92.html#模板
   :CLASS: calibre16
   :END:

--------------

WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。

** 定义模板
   :PROPERTIES:
   :CUSTOM_ID: index_u92.html#定义模板
   :CLASS: calibre16
   :END:

--------------

使用name属性，作为模板的名字。然后在=<template/>=内定义代码片段，如：

#+BEGIN_EXAMPLE
    <!--
      index: int
      msg: string
      time: string
    -->
    <template name="msgItem">
      <view>
        <text> {{index}}: {{msg}} </text>
        <text> Time: {{time}} </text>
      </view>
    </template>
#+END_EXAMPLE

** 使用模板
   :PROPERTIES:
   :CUSTOM_ID: index_u92.html#使用模板
   :CLASS: calibre16
   :END:

--------------

使用is属性，声明需要的使用的模板，然后将模板所需要的data传入，如：

#+BEGIN_EXAMPLE
    <template is="msgItem" data="{{...item}}"/>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        item: {
          index: 0,
          msg: 'this is a template',
          time: '2016-09-15'
        }
      }
    })
#+END_EXAMPLE

is属性可以使用Mustache语法，来动态决定具体需要渲染哪个模板：

#+BEGIN_EXAMPLE
    <template name="odd">
      <view> odd </view>
    </template>
    <template name="even">
      <view> even </view>
    </template>

    <block wx:for="{{[1, 2, 3, 4, 5]}}">
        <template is="{{item % 2 == 0 ? 'even' : 'odd'}}"/>
    </block>
#+END_EXAMPLE

*** 模板的作用域
    :PROPERTIES:
    :CUSTOM_ID: index_u92.html#模板的作用域
    :CLASS: calibre11
    :END:

模板拥有自己的作用域，只能使用data传入的数据。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-template.html]]

\\
\\
| [[../index_u33.html#article_17][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u6.html>>

| [[../article_19/index_u73.html][下一项]] |
[[../index_u33.html#article_18][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_17/index_u92.html][上一项]] |

--------------

** 什么是事件
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#什么是事件
   :CLASS: calibre16
   :END:

--------------

- 事件是视图层到逻辑层的通讯方式。
- 事件可以将用户的行为反馈到逻辑层进行处理。
- 事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。
- 事件对象可以携带额外信息，如id, dataset, touches。

** 事件的使用方式
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#事件的使用方式
   :CLASS: calibre16
   :END:

--------------

- 在组件中绑定一个事件处理函数。

如=bindtap=，当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数。

#+BEGIN_EXAMPLE
    <view id="tapTest" data-hi="WeChat" bindtap="tapName"> Click me! </view>
#+END_EXAMPLE

- 在相应的Page定义中写上相应的事件处理函数，参数是event。

#+BEGIN_EXAMPLE
    Page({
      tapName: function(event) {
        console.log(event)
      }
    })
#+END_EXAMPLE

- 可以看到log出来的信息大致如下

  #+BEGIN_EXAMPLE
      {
      "type": "tap",
      "timeStamp":895,
      "target": {
        "id": "tapTest",
        "dataset": {
         "hi": "WeChat"
        }
      },
      "currentTarget": {
        "id": "tapTest",
        "dataset": {
          "hi": "WeChat"
        }
      },
      "detail": {
        "x":53,
        "y":14
      },
      "touches": [{
        "identifier":0,
        "pageX":53,
        "pageY":14,
        "clientX":53,
        "clientY":14,
      }],
      "changedTouches": [{
        "identifier":0,
        "pageX":53,
        "pageY":14,
        "clientX":53,
        "clientY":14,
      }],
      }
  #+END_EXAMPLE

** 事件详解
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#事件详解
   :CLASS: calibre16
   :END:

*** 事件分类
    :PROPERTIES:
    :CUSTOM_ID: index_u6.html#事件分类
    :CLASS: calibre11
    :END:

事件分为冒泡事件和非冒泡事件

1. 冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。
2. 非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。

WXML的冒泡事件列表：

| 类型          | 触发条件                               |
|---------------+----------------------------------------|
| touchstart    | 手指触摸动作开始                       |
| touchmove     | 手指触摸后移动                         |
| touchcancel   | 手指触摸动作被打断，如来电提醒，弹窗   |
| touchend      | 手指触摸动作结束                       |
| tap           | 手指触摸后马上离开                     |
| longtap       | 手指触摸后，超过350ms再离开            |

*注：除上表之外的其他组件自定义事件都是非冒泡事件，如[[file:m8x71q8z.html][=<form/>=]]的=submit=事件，[[file:3glu1q92.html][=<input/>=]]的=input=事件，[[file:weixinapp-scroll-view.html][=<scroll-view/>=]]的=scroll=事件，(详见各个[[file:itz51q8o.html][组件]])*

** 事件绑定
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#事件绑定
   :CLASS: calibre16
   :END:

--------------

事件绑定的写法同组件的属性，以key、value的形式。

- key以=bind=或=catch=开头，然后跟上事件的类型，如=bindtap=,
  =catchtouchstart=
- value是一个字符串，需要在对应的Page中定义同名的函数。不然当触发事件的时候会报错。

=bind=事件绑定不会阻止冒泡事件向上冒泡，=catch=事件绑定可以阻止冒泡事件向上冒泡。

如在下边这个例子中，点击inner
view会先后触发=handleTap3=和=handleTap2=(因为tap事件会冒泡到middle
view，而middle view阻止了tap事件冒泡，不再向父节点传递)，点击middle
view会触发=handleTap2=，点击outter view会触发=handleTap1=。

#+BEGIN_EXAMPLE
    <view id="outter" bindtap="handleTap1">
      outer view
      <view id="middle" catchtap="handleTap2">
        middle view
        <view id="inner" bindtap="handleTap3">
          inner view
        </view>
      </view>
    </view>
#+END_EXAMPLE

** 事件对象
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#事件对象
   :CLASS: calibre16
   :END:

--------------

如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。

*BaseEvent基础事件对象属性列表：*

| 属性                                              | 类型      | 说明                             |
|---------------------------------------------------+-----------+----------------------------------|
| [[#index_u6.html#type][type]]                     | String    | 事件类型                         |
| [[#index_u6.html#timestamp][timeStamp]]           | Integer   | 事件生成时的时间戳               |
| [[#index_u6.html#target][target]]                 | Object    | 触发事件的组件的一些属性值集合   |
| [[#index_u6.html#currenttarget][currentTarget]]   | Object    | 当前组件的一些属性值集合         |

** CustomEvent 自定义事件对象属性列表（继承 BaseEvent）：\\
   :PROPERTIES:
   :CLASS: calibre16
   :END:

| 属性                                | 类型     | 说明         |
|-------------------------------------+----------+--------------|
| [[#index_u6.html#detail][detail]]   | Object   | 额外的信息   |

*TouchEvent 触摸事件对象属性列表（继承 BaseEvent）：*

| 属性                                                | 类型    | 说明                                           |
|-----------------------------------------------------+---------+------------------------------------------------|
| [[#index_u6.html#touches][touches]]                 | Array   | 触摸事件，当前停留在屏幕中的触摸点信息的数组   |
| [[#index_u6.html#changedTouches][changedTouches]]   | Array   | 触摸事件，当前变化的触摸点信息的数组           |

*特殊事件：=<canvas/>=中的触摸事件不可冒泡，所以没有 currentTarget。*

\\

** type
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#type
   :CLASS: calibre16
   :END:

**** 通用事件类型
     :PROPERTIES:
     :CUSTOM_ID: index_u6.html#通用事件类型
     :CLASS: calibre12
     :END:

** timeStamp
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#timestamp
   :CLASS: calibre16
   :END:

该页面打开到触发事件所经过的毫秒数。

** target
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#target
   :CLASS: calibre16
   :END:

触发事件的源组件。

| 属性                                  | 类型     | 说明                                              |
|---------------------------------------+----------+---------------------------------------------------|
| id                                    | String   | 事件源组件的id                                    |
| tagName                               | String   | 当前组件的类型                                    |
| [[#index_u6.html#dataset][dataset]]   | Object   | 事件源组件上由=data-=开头的自定义属性组成的集合   |

** currentTarget
   :PROPERTIES:
   :CUSTOM_ID: index_u6.html#currenttarget
   :CLASS: calibre16
   :END:

事件绑定的当前组件。

| 属性                                  | 类型     | 说明                                            |
|---------------------------------------+----------+-------------------------------------------------|
| id                                    | String   | 当前组件的id                                    |
| tagName                               | String   | 当前组件的类型                                  |
| [[#index_u6.html#dataset][dataset]]   | Object   | 当前组件上由=data-=开头的自定义属性组成的集合   |

*说明： target 和 currentTarget 可以参考上例中，点击 inner view
时，=handleTap3= 收到的事件对象 target 和 currentTarget 都是
inner，而 =handleTap2= 收到的事件对象 target 就是 inner，currentTarget
就是 middle。*

***** 
      :PROPERTIES:
      :CUSTOM_ID: index_u6.html#dataset
      :CLASS: calibre54
      :END:

*** dataset
    :PROPERTIES:
    :CLASS: calibre11
    :END:

在组件中可以定义数据，这些数据将会通过事件传递给
SERVICE。书写方式：以=data-=开头，多个单词由连字符=-=链接，不能有大写(大写会自动转成小写)如=data-element-type=，最终在
event.target.dataset 中会将连字符转成驼峰=elementType=。

*示例：*

#+BEGIN_EXAMPLE
    <view data-alpha-beta="1" data-alphaBeta="2" bindtap="bindViewTap"> DataSet Test </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      bindViewTap:function(event){
        event.target.dataset.alphaBeta === 1 // - 会转为驼峰写法
        event.target.dataset.alphabeta === 2 // 大写会转为小写
      }
    })
#+END_EXAMPLE

*** touches
    :PROPERTIES:
    :CUSTOM_ID: index_u6.html#touches
    :CLASS: calibre11
    :END:

touches 是一个数组，每个元素为一个 Touch 对象（canvas 触摸事件中携带的
touches 是 CanvasTouch 数组）。 表示当前停留在屏幕上的触摸点。

**** Touch 对象
     :PROPERTIES:
     :CLASS: calibre12
     :END:

| 属性               | 类型     | 说明                                                                   |
|--------------------+----------+------------------------------------------------------------------------|
| identifier         | Number   | 触摸点的标识符                                                         |
| pageX, pageY       | Number   | 距离文档左上角的距离，文档的左上角为原点 ，横向为X轴，纵向为Y轴        |
| clientX, clientY   | Number   | 距离页面可显示区域（屏幕除去导航条）左上角距离，横向为X轴，纵向为Y轴   |

**** CanvasTouch 对象
     :PROPERTIES:
     :CLASS: calibre12
     :END:

| 属性         | 类型     | 说明                                                                     | 特殊说明   |
|--------------+----------+--------------------------------------------------------------------------+------------|
| identifier   | Number   | 触摸点的标识符                                                           |            |
| x, y         | Number   | 距离 Canvas 左上角的距离，Canvas 的左上角为原点 ，横向为X轴，纵向为Y轴   |            |

*** changedTouches
    :PROPERTIES:
    :CUSTOM_ID: index_u6.html#changedTouches
    :CLASS: calibre11
    :END:

changedTouches 数据格式同
touches。表示有变化的触摸点，如从无变有（touchstart），位置变化（touchmove），从有变无（touchend、touchcancel）。

*** detail
    :PROPERTIES:
    :CUSTOM_ID: index_u6.html#detail
    :CLASS: calibre11
    :END:

自定义事件所携带的数据，如表单组件的提交事件会携带用户的输入，媒体的错误事件会携带错误信息，详见[[file:itz51q8o.html][组件]]定义中各个事件的定义。

点击事件的=detail= 带有的 x, y 同 pageX, pageY
代表距离文档左上角的距离。\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-event.html]]

\\
\\
| [[../index_u33.html#article_18][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u73.html>>

| [[../article_20/index_u93.html][下一项]] |
[[../index_u33.html#article_19][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_18/index_u6.html][上一项]] |

--------------

** 引用
   :PROPERTIES:
   :CUSTOM_ID: index_u73.html#引用
   :CLASS: calibre16
   :END:

WXML提供两种文件引用方式=import=和=include=。

*** import
    :PROPERTIES:
    :CUSTOM_ID: index_u73.html#import
    :CLASS: calibre11
    :END:

=import=可以在该文件中使用目标文件定义的=template=，如：

在item.wxml中定义了一个叫=item=的=template=：

#+BEGIN_EXAMPLE
    <!-- item.wxml -->
    <template name="item">
      <text>{{text}}</text>
    </template>
#+END_EXAMPLE

在index.wxml中引用了item.wxml，就可以使用=item=模板：

#+BEGIN_EXAMPLE
    <import src="item.wxml"/>
    <template is="item" data="{{text: 'forbar'}}"/>
#+END_EXAMPLE

** import的作用域
   :PROPERTIES:
   :CUSTOM_ID: index_u73.html#import的作用域
   :CLASS: calibre16
   :END:

--------------

import有作用域的概念，即只会import目标文件中定义的template，而不会import目标文件import的template。

*如：C import B，B import
A，在C中可以使用B定义的=template=，在B中可以使用A定义的=template=，但是C不能使用A定义的=template=*。

#+BEGIN_EXAMPLE
    <!-- A.wxml -->
    <template name="A">
      <text> A template </text>
    </template>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- B.wxml -->
    <import src="a.wxml"/>
    <template name="B">
      <text> B template </text>
    </template>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- C.wxml -->
    <import src="b.wxml"/>
    <template is="A"/>  <!-- Error! Can not use tempalte when not import A. -->
    <template is="B"/>
#+END_EXAMPLE

*** include
    :PROPERTIES:
    :CUSTOM_ID: index_u73.html#include
    :CLASS: calibre11
    :END:

=include=可以将目标文件除了=<template/>=的整个代码引入，相当于是拷贝到=include=位置，如：

#+BEGIN_EXAMPLE
    <!-- index.wxml -->
    <include src="header.wxml"/>
    <view> body </view>
    <include src="footer.wxml"/>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- header.wxml -->
    <view> header </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- footer.wxml -->
    <view> footer </view>
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-import.html]]

\\
\\
| [[../index_u33.html#article_19][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u93.html>>

| [[../article_21/index_u72.html][下一项]] |
[[../index_u33.html#article_20][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_19/index_u73.html][上一项]] |

--------------

** WXS
   :PROPERTIES:
   :CLASS: calibre16
   :END:

WXS（WeiXin
Script）是小程序的一套脚本语言，结合 WXML，可以构建出页面的结构。

*** 注意:
    :PROPERTIES:
    :CLASS: calibre11
    :END:

1. wxs 不依赖于运行时的基础库版本，可以在所有版本的小程序中运行。
2. wxs 与 javascript 是不同的语言，有自己的语法，并不和 javascript
   一致。
3. wxs 的运行环境和其他 javascript 代码是隔离的，wxs 中不能调用其他
   javascript 文件中定义的函数，也不能调用小程序提供的API。
4. wxs 函数不能作为组件的事件回调。
5. 由于运行环境的差异，在 iOS 设备上小程序内的 wxs 会比 javascript
   代码快 2 ~ 20 倍。在 android 设备上二者运行效率无差异。

以下是一些使用 WXS 的简单示例：

*** 页面渲染
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_EXAMPLE
    <!--wxml-->
    <wxs module="m1">
    var msg = "hello world";

    module.exports.message = msg;
    </wxs>

    <view> {{m1.message}} </view>
#+END_EXAMPLE

页面输出：

#+BEGIN_EXAMPLE
    hello world
#+END_EXAMPLE

*** 数据处理
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_EXAMPLE
    // page.js
    Page({
      data: {
        array: [1, 2, 3, 4, 5, 1, 2, 3, 4]
      }
    })
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!--wxml-->
    <!-- 下面的 getMax 函数，接受一个数组，且返回数组中最大的元素的值 -->
    <wxs module="m1">
    var getMax = function(array) {
      var max = undefined;
      for (var i = 0; i < array.length; ++i) {
        max = max === undefined ? 
          array[i] : 
          (max >= array[i] ? max : array[i]);
      }
      return max;
    }

    module.exports.getMax = getMax;
    </wxs>

    <!-- 调用 wxs 里面的 getMax 函数，参数为 page.js 里面的 array -->
    <view> {{m1.getMax(array)}} </view>
#+END_EXAMPLE

页面输出：

#+BEGIN_EXAMPLE
    5
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-t71j2czl.html]]

\\
\\
| [[../index_u33.html#article_20][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u72.html>>

| [[../article_22/index_u44.html][下一项]] |
[[../index_u33.html#article_21][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_20/index_u93.html][上一项]] |

--------------

** WXS 模块
   :PROPERTIES:
   :CLASS: calibre16
   :END:

WXS 代码可以编写在 wxml
文件中的 <wxs> 标签内，或以 .wxs 为后缀名的文件内。

*** 模块
    :PROPERTIES:
    :CLASS: calibre11
    :END:

每一个 .wxs 文件和 <wxs> 标签都是一个单独的模块。

每个模块都有自己独立的作用域。即在一个模块里面定义的变量与函数，默认为私有的，对其他模块不可见。

一个模块要想对外暴露其内部的私有变量与函数，只能通过 module.exports 实现。

*** .wxs 文件
    :PROPERTIES:
    :CLASS: calibre11
    :END:

在微信开发者工具里面，右键可以直接创建 .wxs 文件，在其中直接编写 WXS
脚本。

示例代码：

#+BEGIN_EXAMPLE
    // /pages/comm.wxs

    var foo = "'hello world' from comm.wxs";
    var bar = function(d) {
      return d;
    }
    module.exports = {
      foo: foo,
      bar: bar
    };
#+END_EXAMPLE

上述例子在 /pages/comm.wxs 的文件里面编写了 WXS
代码。该 .wxs 文件可以被其他的 .wxs 文件 或 WXML 中的 <wxs> 标签引用。

*** module 对象
    :PROPERTIES:
    :CLASS: calibre11
    :END:

每个 wxs 模块均有一个内置的 module 对象。

**** 属性
     :PROPERTIES:
     :CLASS: calibre12
     :END:

- exports: 通过该属性，可以对外共享本模块的私有变量与函数。

示例代码：

#+BEGIN_EXAMPLE
    // /pages/tools.wxs

    var foo = "'hello world' from tools.wxs";
    var bar = function (d) {
      return d;
    }
    module.exports = {
      FOO: foo,
      bar: bar,
    };
    module.exports.msg = "some msg";
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- page/index/index.wxml -->

    <wxs src="./../tools.wxs" module="tools" />
    <view> {{tools.msg}} </view>
    <view> {{tools.bar(tools.FOO)}} </view>
#+END_EXAMPLE

页面输出：

#+BEGIN_EXAMPLE
    some msg
    'hello world' from tools.wxs
#+END_EXAMPLE

*** require 函数
    :PROPERTIES:
    :CLASS: calibre11
    :END:

在.wxs模块中引用其他 wxs 文件模块，可以使用 require 函数。

引用的时候，要注意如下几点：

- 只能引用 .wxs 文件模块，且必须使用相对路径。
- wxs 模块均为单例，wxs 模块在第一次被引用时，会自动初始化为单例对象。多个页面，多个地方，多次引用，使用的都是同一个 wxs 模块对象。
- 如果一个 wxs 模块在定义之后，一直没有被引用，则该模块不会被解析与运行。

示例代码：

#+BEGIN_EXAMPLE
    // /pages/tools.wxs

    var foo = "'hello world' from tools.wxs";
    var bar = function (d) {
      return d;
    }
    module.exports = {
      FOO: foo,
      bar: bar,
    };
    module.exports.msg = "some msg";
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // /pages/logic.wxs

    var tools = require("./tools.wxs");

    console.log(tools.FOO);
    console.log(tools.bar("logic.wxs"));
    console.log(tools.msg);
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- /page/index/index.wxml -->

    <wxs src="./../logic.wxs" module="logic" />
#+END_EXAMPLE

控制台输出：

#+BEGIN_EXAMPLE
    'hello world' from tools.wxs
    logic.wxs
    some msg
#+END_EXAMPLE

*** <wxs> 标签
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 属性名   | 类型     | 默认值   | 说明                                                                           |
|----------+----------+----------+--------------------------------------------------------------------------------|
| module   | String   |          | 当前 =<wxs>= 标签的模块名。必填字段。                                          |
| src      | String   |          | 引用 .wxs 文件的相对路径。仅当本标签为*单闭合标签*或*标签的内容为空*时有效。   |

**** module 属性
     :PROPERTIES:
     :CLASS: calibre12
     :END:

module 属性是当前 <wxs> 标签的模块名。在单个 wxml
文件内，建议其值唯一。有重复模块名则按照先后顺序覆盖（后者覆盖前者）。不同文件之间的
wxs 模块名不会相互覆盖。

module 属性值的命名必须符合下面两个规则：

- 首字符必须是：字母（a-zA-Z），下划线（_）
- 剩余字符可以是：字母（a-zA-Z），下划线（_）， 数字（0-9）

示例代码：

#+BEGIN_EXAMPLE
    <!--wxml-->

    <wxs module="foo">
    var some_msg = "hello world";
    module.exports = {
        msg : some_msg,
    }
    </wxs>
    <view> {{foo.msg}} </view>
#+END_EXAMPLE

页面输出：

#+BEGIN_EXAMPLE
    hello world
#+END_EXAMPLE

上面例子声明了一个名字为 foo 的模块，将 some_msg 变量暴露出来，供当前页面使用。

**** src 属性
     :PROPERTIES:
     :CLASS: calibre12
     :END:

src 属性可以用来引用其他的 wxs 文件模块。

引用的时候，要注意如下几点：

- 只能引用 .wxs 文件模块，且必须使用相对路径。
- wxs 模块均为单例，wxs 模块在第一次被引用时，会自动初始化为单例对象。多个页面，多个地方，多次引用，使用的都是同一个 wxs 模块对象。
- 如果一个 wxs 模块在定义之后，一直没有被引用，则该模块不会被解析与运行。

示例代码：

#+BEGIN_EXAMPLE
    // /pages/index/index.js

    Page({
      data: {
        msg: "'hello wrold' from js",
      }
    })
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- /pages/index/index.wxml -->

    <wxs src="./../comm.wxs" module="some_comms"></wxs>
    <!-- 也可以直接使用单标签闭合的写法
    <wxs src="./../comm.wxs" module="some_comms" />
    -->

    <!-- 调用 some_comms 模块里面的 bar 函数，且参数为 some_comms 模块里面的 foo -->
    <view> {{some_comms.bar(some_comms.foo)}} </view>
    <!-- 调用 some_comms 模块里面的 bar 函数，且参数为 page/index/index.js 里面的 msg -->
    <view> {{some_comms.bar(msg)}} </view>
#+END_EXAMPLE

页面输出：

#+BEGIN_EXAMPLE
    'hello world' from comm.wxs
    'hello wrold' from js
#+END_EXAMPLE

上述例子在文件 /page/index/index.wxml 中通过 <wxs> 标签引用了 /page/comm.wxs 模块。

*** 注意
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- <wxs> 模块只能在定义模块的 WXML
  文件中被访问到。使用 <include> 或 <import> 时，<wxs> 模块不会被引入到对应的
  WXML 文件中。
- <template> 标签中，只能使用定义该 <template> 的 WXML
  文件中定义的 <wxs> 模块。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-nvg32czm.html]]

\\
\\
| [[../index_u33.html#article_21][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u44.html>>

| [[../article_23/index_u39.html][下一项]] |
[[../index_u33.html#article_22][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_21/index_u72.html][上一项]] |

--------------

** 概念
   :PROPERTIES:
   :CLASS: calibre16
   :END:

- WXS 中的变量均为值的引用。
- 没有声明的变量直接赋值使用，会被定义为全局变量。
- 如果只声明变量而不赋值，则默认值为 undefined。
- var表现与javascript一致，会有变量提升。

#+BEGIN_EXAMPLE
    var foo = 1;
    var bar = "hello world";
    var i; // i === undefined
#+END_EXAMPLE

上面代码，分别声明了 foo、 bar、 i 三个变量。然后，foo 赋值为数值 1 ，bar 赋值为字符串 "hello
wolrd"。

** 变量名
   :PROPERTIES:
   :CLASS: calibre16
   :END:

变量命名必须符合下面两个规则：

- 首字符必须是：字母（a-zA-Z），下划线（_）
- 剩余字符可以是：字母（a-zA-Z），下划线（_）， 数字（0-9）

** 保留标识符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

以下标识符不能作为变量名：

#+BEGIN_EXAMPLE
    delete 
    void 
    typeof

    null 
    undefined 
    NaN 
    Infinity 
    var

    if 
    else 

    true 
    false

    require

    this 
    function 
    arguments
    return

    for
    while
    do
    break
    continue
    switch
    case
    default
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-tlay2czn.html]]

\\
\\
| [[../index_u33.html#article_22][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u39.html>>

| [[../article_24/index_u9.html][下一项]] |
[[../index_u33.html#article_23][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_22/index_u44.html][上一项]] |

--------------

WXS 主要有 3 种注释的方法。\\

示例代码：

#+BEGIN_EXAMPLE
    <!-- wxml -->
    <wxs module="sample">
    // 方法一：单行注释
    /*
    方法二：多行注释
    */
    /*
    方法三：结尾注释。即从 /* 开始往后的所有 WXS 代码均被注释
    var a = 1;
    var b = 2;
    var c = "fake";
    </wxs>
#+END_EXAMPLE

上述例子中，所有 WXS 代码均被注释掉了。

#+BEGIN_QUOTE
  方法三 和 方法二 的唯一区别是，没有 */ 结束符。
#+END_QUOTE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-rv312czo.html]]

\\
\\
| [[../index_u33.html#article_23][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u9.html>>

| [[../article_25/index_u20.html][下一项]] |
[[../index_u33.html#article_24][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_23/index_u39.html][上一项]] |

--------------

** 基本运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10, b = 20;

    // 加法运算
    console.log(30 === a + b);
    // 减法运算
    console.log(-10 === a - b);
    // 乘法运算
    console.log(200 === a * b);
    // 除法运算
    console.log(0.5 === a / b);
    // 取余运算
    console.log(10 === a % b);
#+END_EXAMPLE

- 加法运算（+）也可以用作字符串的拼接。

#+BEGIN_EXAMPLE
    var a = '.w' , b = 'xs';

    // 字符串拼接
    console.log('.wxs' === a + b);
#+END_EXAMPLE

** 一元运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10, b = 20;

    // 自增运算
    console.log(10 === a++);
    console.log(12 === ++a);
    // 自减运算
    console.log(12 === a--);
    console.log(10 === --a);
    // 正值运算
    console.log(10 === +a);
    // 负值运算
    console.log(0-10 === -a);
    // 否运算
    console.log(-11 === ~a);
    // 取反运算
    console.log(false === !a);
    // delete 运算
    console.log(true === delete a.fake);
    // void 运算
    console.log(undefined === void a);
    // typeof 运算
    console.log("number" === typeof a);
#+END_EXAMPLE

** 位运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10, b = 20;

    // 左移运算
    console.log(80 === (a << 3));
    // 无符号右移运算
    console.log(2 === (a >> 2));
    // 带符号右移运算
    console.log(2 === (a >>> 2));
    // 与运算
    console.log(2 === (a & 3));
    // 异或运算
    console.log(9 === (a ^ 3));
    // 或运算
    console.log(11 === (a | 3));
#+END_EXAMPLE

** 比较运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10, b = 20;

    // 小于
    console.log(true === (a < b));
    // 大于
    console.log(false === (a > b));
    // 小于等于
    console.log(true === (a <= b));
    // 大于等于
    console.log(false === (a >= b));
#+END_EXAMPLE

** 等值运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10, b = 20;

    // 等号
    console.log(false === (a == b));
    // 非等号
    console.log(true === (a != b));
    // 全等号
    console.log(false === (a === b));
    // 非全等号
    console.log(true === (a !== b));
#+END_EXAMPLE

** 赋值运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10;

    a = 10; a *= 10;
    console.log(100 === a);
    a = 10; a /= 5;
    console.log(2 === a);
    a = 10; a %= 7;
    console.log(3 === a);
    a = 10; a += 5;
    console.log(15 === a);
    a = 10; a -= 11;
    console.log(-1 === a);
    a = 10; a <<= 10;
    console.log(10240 === a);
    a = 10; a >>= 2;
    console.log(2 === a);
    a = 10; a >>>= 2;
    console.log(2 === a);
    a = 10; a &= 3;
    console.log(2 === a);
    a = 10; a ^= 3;
    console.log(9 === a);
    a = 10; a |= 3;
    console.log(11 === a);
#+END_EXAMPLE

** 二元逻辑运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10, b = 20;

    // 逻辑与
    console.log(20 === (a && b));
    // 逻辑或
    console.log(10 === (a || b));
#+END_EXAMPLE

** 其他运算符
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例代码：

#+BEGIN_EXAMPLE
    var a = 10, b = 20;

    //条件运算符
    console.log(20 === (a >= 10 ? a + 10 : b + 10));
    //逗号运算符
    console.log(20 === (a, b));
#+END_EXAMPLE

** 运算符优先级
   :PROPERTIES:
   :CLASS: calibre16
   :END:

| 优先级   | 运算符                | 说明         | 结合性     |
|----------+-----------------------+--------------+------------|
| 20       | =(= ... =)=           | 括号         | n/a        |
| 19       | ... =.= ...           | 成员访问     | 从左到右   |
|          | ... =[= ... =]=       | 成员访问     | 从左到右   |
|          | ... =(= ... =)=       | 函数调用     | 从左到右   |
| 17       | ... =++=              | 后置递增     | n/a        |
|          | ... =--=              | 后置递减     | n/a        |
| 16       | =!= ...               | 逻辑非       | 从右到左   |
|          | =~= ...               | 按位非       | 从右到左   |
|          | =+= ...               | 一元加法     | 从右到左   |
|          | =-= ...               | 一元减法     | 从右到左   |
|          | =++= ...              | 前置递增     | 从右到左   |
|          | =--= ...              | 前置递减     | 从右到左   |
|          | =typeof= ...          | typeof       | 从右到左   |
|          | =void= ...            | void         | 从右到左   |
|          | =delete= ...          | delete       | 从右到左   |
| 14       | ... =*= ...           | 乘法         | 从左到右   |
|          | ... =/= ...           | 除法         | 从左到右   |
|          | ... =%= ...           | 取模         | 从左到右   |
| 13       | ... =+= ...           | 加法         | 从左到右   |
|          | ... =-= ...           | 减法         | 从左到右   |
| 12       | ... =<<= ...          | 按位左移     | 从左到右   |
|          | ... =>>= ...          | 按位右移     | 从左到右   |
|          | ... =>>>= ...         | 无符号右移   | 从左到右   |
| 11       | ... =<= ...           | 小于         | 从左到右   |
|          | ... =<== ...          | 小于等于     | 从左到右   |
|          | ... =>= ...           | 大于         | 从左到右   |
|          | ... =>== ...          | 大于等于     | 从左到右   |
| 10       | ... ==== ...          | 等号         | 从左到右   |
|          | ... =!== ...          | 非等号       | 从左到右   |
|          | ... ===== ...         | 全等号       | 从左到右   |
|          | ... =!=== ...         | 非全等号     | 从左到右   |
| 9        | ... =&= ...           | 按位与       | 从左到右   |
| 8        | ... =^= ...           | 按位异或     | 从左到右   |
| 7        | ... =｜= ...          | 按位或       | 从左到右   |
| 6        | ... =&&= ...          | 逻辑与       | 从左到右   |
| 5        | ... =｜｜= ...        | 逻辑或       | 从左到右   |
| 4        | ... =?= ... =:= ...   | 条件运算符   | 从右到左   |
| 3        | ... === ...           | 赋值         | 从右到左   |
|          | ... =+== ...          | 赋值         | 从右到左   |
|          | ... =-== ...          | 赋值         | 从右到左   |
|          | ... =*== ...          | 赋值         | 从右到左   |
|          | ... =/== ...          | 赋值         | 从右到左   |
|          | ... =%== ...          | 赋值         | 从右到左   |
|          | ... =<<== ...         | 赋值         | 从右到左   |
|          | ... =>>== ...         | 赋值         | 从右到左   |
|          | ... =>>>== ...        | 赋值         | 从右到左   |
|          | ... =&== ...          | 赋值         | 从右到左   |
|          | ... =^== ...          | 赋值         | 从右到左   |
|          | ... =｜== ...         | 赋值         | 从右到左   |
| 0        | ... =,= ...           | 逗号         | 从左到右   |

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-68xl2czp.html]]

\\
\\
| [[../index_u33.html#article_24][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u20.html>>

| [[../article_26/index_u55.html][下一项]] |
[[../index_u33.html#article_25][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_24/index_u9.html][上一项]] |

--------------

** if 语句
   :PROPERTIES:
   :CLASS: calibre16
   :END:

在 WXS 中，可以使用以下格式的 if 语句 ：

- if (expression) statement ： 当 expression 为 truthy
  时，执行 statement。
- if (expression) statement1 else statement2 : 当 expression 为 truthy
  时，执行 statement1。 否则，执行 statement2
- if ... else if ... else
  statementN 通过该句型，可以在 statement1 ~ statementN 之间选其中一个执行。

示例语法：

#+BEGIN_EXAMPLE
    // if ...

    if (表达式) 语句;

    if (表达式) 
      语句;

    if (表达式) {
      代码块;
    }


    // if ... else 

    if (表达式) 语句;
    else 语句;

    if (表达式) 
      语句;
    else 
      语句;

    if (表达式) {
      代码块;
    } else {
      代码块;
    }

    // if ... else if ... else ...

    if (表达式) {
      代码块;
    } else if (表达式) {
      代码块;
    } else if (表达式) {
      代码块;
    } else {
      代码块;
    }
#+END_EXAMPLE

** switch 语句
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例语法：

#+BEGIN_EXAMPLE
    switch (表达式) {
      case 变量:
        语句;
      case 数字:
        语句;
        break;
      case 字符串:
        语句;
      default:
        语句;
    }
#+END_EXAMPLE

- default 分支可以省略不写。
- case 关键词后面只能使用：变量，数字，字符串。

示例代码：

#+BEGIN_EXAMPLE
    var exp = 10;

    switch ( exp ) {
    case "10":
      console.log("string 10");
      break;
    case 10:
      console.log("number 10");
      break;
    case exp:
      console.log("var exp");
      break;
    default:
      console.log("default");
    }
#+END_EXAMPLE

输出：

#+BEGIN_EXAMPLE
    number 10
#+END_EXAMPLE

** for 语句
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例语法：

#+BEGIN_EXAMPLE
    for (语句; 语句; 语句)
      语句;

    for (语句; 语句; 语句) {
      代码块;
    }
#+END_EXAMPLE

- 支持使用 break，continue 关键词。

示例代码：

#+BEGIN_EXAMPLE
    for (var i = 0; i < 3; ++i) {
      console.log(i);
      if( i >= 1) break;
    }
#+END_EXAMPLE

输出：

#+BEGIN_EXAMPLE
    0
    1
#+END_EXAMPLE

** while 语句
   :PROPERTIES:
   :CLASS: calibre16
   :END:

示例语法：

#+BEGIN_EXAMPLE
    while (表达式)
      语句;

    while (表达式){
      代码块;
    }

    do {
      代码块;
    } while (表达式)
#+END_EXAMPLE

- 当表达式为 true 时，循环执行语句或代码块。
- 支持使用 break，continue 关键词。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-4pb62czq.html]]

\\
\\
| [[../index_u33.html#article_25][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u55.html>>

| [[../article_27/index_u88.html][下一项]] |
[[../index_u33.html#article_26][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_25/index_u20.html][上一项]] |

--------------

** 数据类型
   :PROPERTIES:
   :CLASS: calibre16
   :END:

WXS 语言目前共有以下几种数据类型：

- number ： 数值
- string ：字符串
- boolean：布尔值
- object：对象
- function：函数
- array : 数组
- date：日期
- regexp：正则

** number
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

number 包括两种数值：整数，小数。

#+BEGIN_EXAMPLE
    var a = 10;
    var PI = 3.141592653589793;
#+END_EXAMPLE

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 "Number"。

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- toString
- toLocaleString
- valueOf
- toFixed
- toExponential
- toPrecision

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

** string
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

string 有两种写法：

#+BEGIN_EXAMPLE
    'hello world';
    "hello world";
#+END_EXAMPLE

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 "String"。
- length

#+BEGIN_QUOTE
  除constructor外属性的具体含义请参考 ES5 标准。
#+END_QUOTE

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- toString
- valueOf
- charAt
- charCodeAt
- concat
- indexOf
- lastIndexOf
- localeCompare
- match
- replace
- search
- slice
- split
- substring
- toLowerCase
- toLocaleLowerCase
- toUpperCase
- toLocaleUpperCase
- trim

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

** boolean
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

布尔值只有两个特定的值：true 和 false。

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 "Boolean"。

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- toString
- valueOf

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

** object
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

object 是一种无序的键值对。使用方法如下所示：

#+BEGIN_EXAMPLE
    var o = {} //生成一个新的空对象

    //生成一个新的非空对象
    o = {
      'string'  : 1,  //object 的 key 可以是字符串
      const_var : 2,  //object 的 key 也可以是符合变量定义规则的标识符
      func      : {}, //object 的 value 可以是任何类型
    };

    //对象属性的读操作
    console.log(1 === o['string']);
    console.log(2 === o.const_var);

    //对象属性的写操作
    o['string']++;
    o['string'] += 10;
    o.const_var++;
    o.const_var += 10;

    //对象属性的读操作
    console.log(12 === o['string']);
    console.log(13 === o.const_var);
#+END_EXAMPLE

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 "Object"。

#+BEGIN_EXAMPLE
    console.log("Object" === {k:"1",v:"2"}.constructor)
#+END_EXAMPLE

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- toString：返回字符串 "[object Object]"。

** function
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

function 支持以下的定义方式：

#+BEGIN_EXAMPLE
    //方法 1
    function a (x) {
      return x;
    }

    //方法 2
    var b = function (x) { 
      return x;
    }
#+END_EXAMPLE

function 同时也支持以下的语法（匿名函数，闭包等）：

#+BEGIN_EXAMPLE
    var a = function (x) {
      return function () { return x;}
    }

    var b = a(100);
    console.log( 100 === b() );
#+END_EXAMPLE

*** arguments
    :PROPERTIES:
    :CLASS: calibre11
    :END:

function 里面可以使用 arguments 关键词。该关键词目前只支持以下的属性：

- length: 传递给函数的参数个数。
- [index]: 通过 index 下标可以遍历传递给函数的每个参数。

示例代码：

#+BEGIN_EXAMPLE
    var a = function(){
        console.log(3 === arguments.length);
        console.log(100 === arguments[0]);
        console.log(200 === arguments[1]);
        console.log(300 === arguments[2]);
    };
    a(100,200,300);
#+END_EXAMPLE

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 "Function"。
- length：返回函数的形参个数。

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- toString：返回字符串 "[function Function]"。

示例代码：

#+BEGIN_EXAMPLE
    var func = function (a,b,c) { }

    console.log("Function" === func.constructor);
    console.log(3 === func.length);
    console.log("[function Function]" === func.toString());
#+END_EXAMPLE

** array
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

array 支持以下的定义方式：

#+BEGIN_EXAMPLE
    var a = [];      //生成一个新的空数组

    a = [1,"2",{},function(){}];  //生成一个新的非空数组，数组元素可以是任何类型
#+END_EXAMPLE

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 "Array"。
- length

#+BEGIN_QUOTE
  除constructor外属性的具体含义请参考 ES5 标准。
#+END_QUOTE

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- toString
- concat
- join
- pop
- push
- reverse
- shift
- slice
- sort
- splice
- unshift
- indexOf
- lastIndexOf
- every
- some
- forEach
- map
- filter
- reduce
- reduceRight

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

** date
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

生成 date 对象需要使用 getDate函数, 返回一个当前时间的对象。

#+BEGIN_EXAMPLE
    getDate()
    getDate(milliseconds)
    getDate(datestring)
    getDate(year, month[, date[, hours[, minutes[, seconds[, milliseconds]]]]])
#+END_EXAMPLE

- 参数milliseconds: 从1970年1月1日00:00:00
  UTC开始计算的毫秒数datestring: 日期字符串，其格式为："month day, year
  hours:minutes:seconds"

示例代码：

#+BEGIN_EXAMPLE
    var date = getDate(); //返回当前时间对象

    date = getDate(1500000000000);
    // Fri Jul 14 2017 10:40:00 GMT+0800 (中国标准时间)
    date = getDate('2017-7-14');
    // Fri Jul 14 2017 00:00:00 GMT+0800 (中国标准时间)
    date = getDate(2017, 6, 14, 10, 40, 0, 0);
    // Fri Jul 14 2017 10:40:00 GMT+0800 (中国标准时间)
#+END_EXAMPLE

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 “Date”。

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- parse
- UTC
- now
- toString
- toDateString
- toTimeString
- toLocaleString
- toLocaleDateString
- toLocaleTimeString
- valueOf
- getTime
- getFullYear
- getUTCFullYear
- getMonth
- getUTCMonth
- getDate
- getUTCDate
- getDay
- getUTCDay
- getHours
- getUTCHours
- getMinutes
- getUTCMinutes
- getSeconds
- getUTCSeconds
- getMilliseconds
- getUTCMilliseconds
- getTimezoneOffset
- setTime
- setMilliseconds
- setUTCMilliseconds
- setSeconds
- setUTCSeconds
- setMinutes
- setUTCMinutes
- setHours
- setUTCHours
- setDate
- setUTCDate
- setMonth
- setUTCMonth
- setFullYear
- setUTCFullYear
- toUTCString
- toISOString
- toJSON

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

** regexp
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 语法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

生成 regexp 对象需要使用 getRegExp函数。

#+BEGIN_EXAMPLE
    getRegExp(pattern[, flags])
#+END_EXAMPLE

- 参数：pattern:
  正则表达式的内容。flags：修饰符。该字段只能包含以下字符:g: globali:
  ignoreCasem: multiline。

示例代码：

#+BEGIN_EXAMPLE
    var a = getRegExp("x", "img");
    console.log("x" === a.source);
    console.log(true === a.global);
    console.log(true === a.ignoreCase);
    console.log(true === a.multiline);
#+END_EXAMPLE

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- constructor：返回字符串 "RegExp"。
- source
- global
- ignoreCase
- multiline
- lastIndex

#+BEGIN_QUOTE
  除constructor外属性的具体含义请参考 ES5 标准。
#+END_QUOTE

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- exec
- test
- toString

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

** 数据类型判断
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** constructor 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

数据类型的判断可以使用 constructor 属性。

示例代码：

#+BEGIN_EXAMPLE
    var number = 10;
    console.log( "Number" === number.constructor );

    var string = "str";
    console.log( "String" === string.constructor );

    var boolean = true;
    console.log( "Boolean" === boolean.constructor );

    var object = {};
    console.log( "Object" === object.constructor );

    var func = function(){};
    console.log( "Function" === func.constructor );

    var array = [];
    console.log( "Array" === array.constructor );

    var date = getDate();
    console.log( "Date" === date.constructor );

    var regexp = getRegExp();
    console.log( "RegExp" === regexp.constructor );
#+END_EXAMPLE

*** typeof
    :PROPERTIES:
    :CLASS: calibre11
    :END:

使用 typeof 也可以区分部分数据类型。

示例代码：

#+BEGIN_EXAMPLE
    var number = 10;
    var boolean = true;
    var object = {};
    var func = function(){};
    var array = [];
    var date = getDate();
    var regexp = getRegExp();

    console.log( 'number' === typeof number );
    console.log( 'boolean' === typeof boolean );
    console.log( 'object' === typeof object );
    console.log( 'function' === typeof func );
    console.log( 'object' === typeof array );
    console.log( 'object' === typeof date );
    console.log( 'object' === typeof regexp );

    console.log( 'undefined' === typeof undefined );
    console.log( 'object' === typeof null );
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-54te2czr.html]]

\\
\\
| [[../index_u33.html#article_26][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u88.html>>

| [[../article_28/index_u67.html][下一项]] |
[[../index_u33.html#article_27][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_26/index_u55.html][上一项]] |

--------------

** console\\
   :PROPERTIES:
   :CLASS: calibre16
   :END:

console.log 方法用于在 console
窗口输出信息。它可以接受多个参数，将它们的结果连接起来输出。

** Math
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- E
- LN10
- LN2
- LOG2E
- LOG10E
- PI
- SQRT1_2
- SQRT2

#+BEGIN_QUOTE
  以上属性的具体使用请参考 ES5 标准。
#+END_QUOTE

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- abs
- acos
- asin
- atan
- atan2
- ceil
- cos
- exp
- floor
- log
- max
- min
- pow
- random
- round
- sin
- sqrt
- tan

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

** JSON
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- stringify(object): 将 object 对象转换为 JSON 字符串，并返回该字符串。
- parse(string): 将 JSON 字符串转化成对象，并返回该对象。

示例代码：

#+BEGIN_EXAMPLE
    console.log(undefined === JSON.stringify());
    console.log(undefined === JSON.stringify(undefined));
    console.log("null"===JSON.stringify(null));

    console.log("111"===JSON.stringify(111));
    console.log('"111"'===JSON.stringify("111"));
    console.log("true"===JSON.stringify(true));
    console.log(undefined===JSON.stringify(function(){}));


    console.log(undefined===JSON.parse(JSON.stringify()));
    console.log(undefined===JSON.parse(JSON.stringify(undefined)));
    console.log(null===JSON.parse(JSON.stringify(null)));

    console.log(111===JSON.parse(JSON.stringify(111)));
    console.log("111"===JSON.parse(JSON.stringify("111")));
    console.log(true===JSON.parse(JSON.stringify(true)));

    console.log(undefined===JSON.parse(JSON.stringify(function(){})));
#+END_EXAMPLE

** Number
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- MAX_VALUE
- MIN_VALUE
- NEGATIVE_INFINITY
- POSITIVE_INFINITY

#+BEGIN_QUOTE
  以上属性的具体使用请参考 ES5 标准。
#+END_QUOTE

** Global
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** 属性
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- NaN
- Infinity
- undefined

#+BEGIN_QUOTE
  以上属性的具体使用请参考 ES5 标准。
#+END_QUOTE

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- parseInt
- parseFloat
- isNaN
- isFinite
- decodeURI
- decodeURIComponent
- encodeURI
- encodeURIComponent

#+BEGIN_QUOTE
  以上方法的具体使用请参考 ES5 标准。
#+END_QUOTE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-igcf2czs.html]]

\\
\\
| [[../index_u33.html#article_27][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u67.html>>

| [[../article_29/index_u10.html][下一项]] |
[[../index_u33.html#article_28][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_27/index_u88.html][上一项]] |

--------------

** WXSS
   :PROPERTIES:
   :CUSTOM_ID: index_u67.html#wxss
   :CLASS: calibre16
   :END:

WXSS(WeiXin Style Sheets)是一套样式语言，用于描述WXML的组件样式。

WXSS用来决定[[file:weixinapp-wxml.html][WXML]]的组件应该怎么显示。

为了适应广大的前端开发者，我们的WXSS具有CSS大部分特性。同时为了更适合开发微信小程序，我们对CSS进行了扩充以及修改。

与css相比我们扩展的特性有：

- [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_28/weixinapp-wxss.xhtml#尺寸单位][尺寸单位]]
- [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_28/weixinapp-wxss.xhtml#样式导入][样式导入]]

** 尺寸单位
   :PROPERTIES:
   :CUSTOM_ID: index_u67.html#尺寸单位
   :CLASS: calibre16
   :END:

- rpx（responsive pixel）:
  可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在iPhone6上，屏幕宽度为375px，共有750个物理像素，则750rpx
  = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。

| 设备           | rpx换算px (屏幕宽度/750)   | px换算rpx (750/屏幕宽度)   |
|----------------+----------------------------+----------------------------|
| iPhone5        | 1rpx = 0.42px              | 1px = 2.34rpx              |
| iPhone6        | 1rpx = 0.5px               | 1px = 2rpx                 |
| iPhone6 Plus   | 1rpx = 0.552px             | 1px = 1.81rpx              |

*建议：*开发微信小程序时设计师可以用iPhone6作为视觉稿的标准。

*注意：* 在较小的屏幕上不可避免的会有一些毛刺，请在开发时尽量避免这种情况。\\

** 样式导入
   :PROPERTIES:
   :CLASS: calibre16
   :END:

使用=@import=语句可以导入外联样式表，=@import=跟需要导入的外联样式表的相对路径，用=;=表示语句结束。

*示例代码：*

#+BEGIN_EXAMPLE
    /** common.wxss **/
    .small-p{
      padding:5px;
    }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    /** app.wxss **/
    @import "common.wxss";
    .middle-p {
      padding:15px;
    }
#+END_EXAMPLE

** 内联样式
   :PROPERTIES:
   :CUSTOM_ID: index_u67.html#内联样式
   :CLASS: calibre16
   :END:

框架组件上支持使用style、class属性来控制组件的样式。

- style：静态的样式统一写到class中。style接收动态的样式，在运行时会进行解析，请尽量避免将静态的样式写进style中，以免影响渲染速度。

#+BEGIN_EXAMPLE
    <view style="color:{{color}};" />
#+END_EXAMPLE

- class：用于指定样式规则，其属性值是样式规则中类选择器名(样式类名)的集合，样式类名不需要带上=.=，样式类名之间用空格分隔。

#+BEGIN_EXAMPLE
    <view class="normal_view" />
#+END_EXAMPLE

** 选择器
   :PROPERTIES:
   :CUSTOM_ID: index_u67.html#选择器
   :CLASS: calibre16
   :END:

目前支持的选择器有：

| 选择器             | 样例                | 样例描述                                     |
|--------------------+---------------------+----------------------------------------------|
| .class             | =.intro=            | 选择所有拥有class="intro"的组件              |
| #id                | =#firstname=        | 选择拥有id="firstname"的组件                 |
| element            | =view=              | 选择所有view组件                             |
| element, element   | =view= =checkbox=   | 选择所有文档的view组件和所有的checkbox组件   |
| ::after            | =view::after=       | 在view组件后边插入内容                       |
| ::before           | =view::before=      | 在view组件前边插入内容                       |

** 全局样式与局部样式
   :PROPERTIES:
   :CUSTOM_ID: index_u67.html#全局样式与局部样式
   :CLASS: calibre16
   :END:

定义在app.wxss中的样式为全局样式，作用于每一个页面。在page的wxss文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖app.wxss中相同的选择器。

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-wxss.html]]

\\
\\
| [[../index_u33.html#article_28][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u10.html>>

| [[../article_30/index_u63.html][下一项]] |
[[../index_u33.html#article_29][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_28/index_u67.html][上一项]] |

--------------

** 基础组件
   :PROPERTIES:
   :CUSTOM_ID: index_u10.html#基础组件
   :CLASS: calibre16
   :END:

--------------

框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。

详细介绍请参考[[file:itz51q8o.html][组件文档]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-component.html]]

\\
\\
| [[../index_u33.html#article_29][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u63.html>>

| [[../article_31/index_u8.html][下一项]] |
[[../index_u33.html#article_30][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_29/index_u10.html][上一项]] |

--------------

*** 基础库与客户端之间的关系
    :PROPERTIES:
    :CLASS: calibre11
    :END:

小程序的能力需要微信客户端来支撑，每一个基础库都只能在对应的客户端版本上运行，高版本的基础库无法兼容低版本的微信客户端。

关于基础库的兼容方法，可以查看「[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]」章节。

*** 基础库更新时机
    :PROPERTIES:
    :CLASS: calibre11
    :END:

为了避免新版本的基础库给线上小程序带来未知的影响，微信客户端都是携带
*上一个稳定版* 的基础库发布的。

在新版本客户端发布后，我们再通过后台灰度新版本基础库，灰度时长一般为 12
小时，在灰度结束后，用户设备上才会有新版本的基础库。

以微信 6.5.8 为例，客户端在发布时携带的是 1.1.1 基础库(6.5.7
上已全量的稳定版)发布，在 6.5.8 发布后，我们再通过后台灰度 1.2.0
基础库。

*** 基础库版本分布
    :PROPERTIES:
    :CLASS: calibre11
    :END:

**** iOS
     :PROPERTIES:
     :CLASS: calibre12
     :END:

| 基础库版本   | 用户占比   |
|--------------+------------|
| 1.4.0        | 1.88%      |
| 1.3.0        | 80.74%     |
| 1.2.6        | 0.00%      |
| 1.2.5        | 7.29%      |
| 1.2.4        | 0.00%      |
| 1.2.3        | 0.00%      |
| 1.2.2        | 0.00%      |
| 1.2.1        | 0.00%      |
| 1.2.0        | 0.00%      |
| 1.1.1        | 6.75%      |
| 1.1.0        | 0.00%      |
| 1.0.1        | 3.34%      |
| 1.0.0        | 0.00%      |

(数据截止 2017-07-10)

**** Android
     :PROPERTIES:
     :CLASS: calibre12
     :END:

| 基础库版本   | 用户占比   |
|--------------+------------|
| 1.4.0        | 3.20%      |
| 1.3.0        | 51.24%     |
| 1.2.6        | 0.00%      |
| 1.2.5        | 37.03%     |
| 1.2.4        | 0.58%      |
| 1.2.3        | 0.00%      |
| 1.2.2        | 0.02%      |
| 1.2.1        | 0.00%      |
| 1.2.0        | 0.00%      |
| 1.1.1        | 4.33%      |
| 1.1.0        | 0.00%      |
| 1.0.1        | 2.05%      |
| 1.0.0        | 1.55%      |

(数据截止 2017-07-10)

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-client-lib.html]]

\\
\\
| [[../index_u33.html#article_30][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u8.html>>

| [[../article_32/index_u51.html][下一项]] |
[[../index_u33.html#article_31][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_30/index_u63.html][上一项]] |

--------------

小程序的功能不断的增加，但是旧版本的微信客户端并不支持新功能，所以在使用这些新能力的时候需要做兼容。

文档会在组件，API等页面描述中带上各个功能所支持的版本号。

可以通过=wx.getSystemInfo=或者=wx.getSystemInfoSync=获取到小程序的基础库版本号。

也可以通过=wx.canIUse=
[[http://caibaojian.com/weixinapp/weixinapp-device.html#wxcanIUse][详情]]
来判断是否可以在该基础库版本下直接使用对应的API或者组件\\

*** 兼容方式 - 接口
    :PROPERTIES:
    :CLASS: calibre11
    :END:

对于新增的 API，可以用以下代码来判断是否支持用户的手机。

#+BEGIN_EXAMPLE
    if (wx.openBluetoothAdapter) {
      wx.openBluetoothAdapter()
    } else {
      // 如果希望用户在最新版本的客户端上体验您的小程序，可以这样子提示
      wx.showModal({
        title: '提示',
        content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'
      })
    }
#+END_EXAMPLE

*** 兼容方式 - 参数
    :PROPERTIES:
    :CLASS: calibre11
    :END:

对于 API 的参数或者返回值有新增的参数，可以判断用以下代码判断。

#+BEGIN_EXAMPLE
    wx.showModal({
      success: function(res) {
        if (wx.canIUse('showModal.cancel')) {
          console.log(res.cancel)
        }
      }
    })
#+END_EXAMPLE

*** 兼容方式 - 组件
    :PROPERTIES:
    :CLASS: calibre11
    :END:

对于组件，新增的属性在旧版本上不会被处理，不过也不会报错。如果特殊场景需要对旧版本做一些降级处理，可以这样子做。

#+BEGIN_EXAMPLE
    Page({
      data: {
        canIUse: wx.canIUse('button.open-type.contact')
      }
    })
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <button wx:if="{{canIUse}}" open-type="contact"> 客服消息 </button>
    <contact-button wx:else></contact-button>
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/compatibility.html]]

\\
\\
| [[../index_u33.html#article_31][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u51.html>>

| [[../article_33/index_u61.html][下一项]] |
[[../index_u33.html#article_32][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_31/index_u8.html][上一项]] |

--------------

*** 运行机制
    :PROPERTIES:
    :CLASS: calibre11
    :END:

- 小程序没有重启的概念\\
- 当小程序进入后台，客户端会维持一段时间的运行状态，超过一定时间后（目前是5分钟）会被微信主动销毁\\
- 置顶的小程序不会被微信主动销毁\\
- 当收到系统内存告警也会进行小程序的销毁\\

*** 再次打开逻辑
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

用户打开小程序的预期有以下两类场景：

A. 打开首页：
[[http://caibaojian.com/weixinapp/weixinapp-scene.html][场景值]]有 1001,
1019, 1022, 1023, 1038, 1056

B. 打开小程序指定的某个页面： 场景值为除 A 以外的其他

当再次打开一个小程序逻辑如下：

| 上一次的场景   | 当前打开的场景   | 效果                                                                |
|----------------+------------------+---------------------------------------------------------------------|
| A              | A                | 保留原来的状态                                                      |
| B              | A                | 清空原来的页面栈，打开首页（相当于执行 wx.reLaunch 到首页）         |
| A 或 B         | B                | 清空原来的页面栈，打开指定页面（相当于执行 wx.reLaunch 到指定页）   |

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-operating-mechanism.html]]

\\
\\
| [[../index_u33.html#article_32][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u61.html>>

| [[../article_34/index_u17.html][下一项]] |
[[../index_u33.html#article_33][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_32/index_u51.html][上一项]] |

--------------

目前，我们提供了两种性能分析工具，和几个性能优化上的建议，开发者可以参考使用。

1. [[http://caibaojian.com/weixinapp/weixinapp-tools.html][分析工具]]

2. [[http://caibaojian.com/weixinapp/weixinapp-tips.html][优化建议]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-sfhd27xu.html]]

\\
\\
| [[../index_u33.html#article_33][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u17.html>>

| [[../article_35/index_u34.html][下一项]] |
[[../index_u33.html#article_34][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_33/index_u61.html][上一项]] |

--------------

微信 Andoid 6.5.10 开始，我们提供了 Trace
导出工具，开发者可以在开发者工具 Trace Panel 中使用该功能。

** 使用方法
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. PC 上需要先安装=adb=工具，可以参考一些主流教程进行安装，Mac 上可使用
   brew 直接安装。
2. 确定=adb=工具已成功安装后，在开发者工具上打开 Trace Panel，将 Android
   手机通过 USB 连接上 PC，点击「Choose
   Devices」，此时手机上可能弹出连接授权框，请点击「允许」。
3. 选择设备后，在手机上打开你需要调试的开发版小程序，通过右上角菜单，打开性能监控面板，重启小程序；
4. 重启后，在小程序上进行操作，完成操作后，通过右上角菜单，导出 Trace
   数据；
5. 此时开发者工具 Trace Panel 上会自动拉取 Trace 文件，选择你要分析的
   Trace 文件即可；

#+BEGIN_QUOTE
  可以通过=adb devices=命令确定设备是否已和 PC 建立起连接
#+END_QUOTE

[[file:feed_0/article_34/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/performance/trace-tool.png?t=2017712]]

* 性能面板
  :PROPERTIES:
  :CLASS: calibre44
  :END:

从微信 6.5.8
开始，我们提供了性能面板让开发者了解小程序的性能。开发者可以在开发版小程序下打开性能面板，打开方法：进入开发版小程序，进入右上角更多按钮，点击「显示性能窗口」。

[[file:feed_0/article_34/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/performance/panel.jpg?t=2017712]]

** 性能面板指标说明
   :PROPERTIES:
   :CLASS: calibre16
   :END:

| 指标           | 说明                                                    |
|----------------+---------------------------------------------------------|
| CPU            | 小程序进程的 CPU 占用率，仅 Android 下提供              |
| 内存           | 小程序进程的内存占用（Total Pss)，仅 Android 下提供     |
| 启动耗时       | 小程序启动总耗时                                        |
| 下载耗时       | 小程序包下载耗时，首次打开或资源包需更新时会进行下载    |
| 页面切换耗时   | 小程序页面切换的耗时                                    |
| 帧率/FPS       |                                                         |
| 首次渲染耗时   | 页面次首次渲染的耗时                                    |
| 再次渲染耗时   | 页面再次渲染的耗时（通常由开发者的 setData 操作触发）   |
| 数据缓存       | 小程序通过 Storage 接口储存的缓存大小                   |

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-tools.html]]

\\
\\
| [[../index_u33.html#article_34][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u34.html>>

| [[../article_36/index_u48.html][下一项]] |
[[../index_u33.html#article_35][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_34/index_u17.html][上一项]] |

--------------

* setData
  :PROPERTIES:
  :CLASS: calibre44
  :END:

=setData=是小程序开发中使用最频繁的接口，也是最容易引发性能问题的接口。在介绍常见的错误用法前，先简单介绍一下=setData=背后的工作原理。

** 工作原理
   :PROPERTIES:
   :CLASS: calibre16
   :END:

小程序的视图层目前使用 WebView 作为渲染载体，而逻辑层是由独立的
JavascriptCore 作为运行环境。在架构上，WebView 和 JavascriptCore
都是独立的模块，并不具备数据直接共享的通道。当前，视图层和逻辑层的数据传输，实际上通过两边提供的=evaluateJavascript=所实现。即用户传输的数据，需要将其转换为字符串形式传递，同时把转换后的数据内容拼接成一份
JS 脚本，再通过执行 JS 脚本的形式传递到两边独立环境。

而=evaluateJavascript=的执行会受很多方面的影响，数据到达视图层并不是实时的。同一进程内的
WebView 实际上会共享一个 JS VM，如果 WebView 内 JS
线程正在执行渲染或其他逻辑，会影响 evaluateJavascript
脚本的实际执行时间，另外多个 WebView 也会抢占 JS VM 的执行权限；另外还有
JS 本身的编译执行耗时，都是影响数据传输速度的因素。

** 常见的 setData 操作错误
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*1. 频繁的去 setData*

在我们分析过的一些案例里，部分小程序会非常频繁（毫秒级）的去=setData=，其导致了两个后果：

- Android 下用户在滑动时会感觉到卡顿，操作反馈延迟严重，因为 JS
  线程一直在编译执行渲染，未能及时将用户操作事件传递到逻辑层，逻辑层亦无法及时将操作处理结果及时传递到视图层；
- 渲染有出现延时，由于 WebView 的 JS
  线程一直处于忙碌状态，逻辑层到页面层的通信耗时上升，视图层收到的数据消息时距离发出时间已经过去了几百毫秒，渲染的结果并不实时；

*2. 每次 setData 都传递大量新数据*

由=setData=的底层实现可知，我们的数据传输实际是一次=evaluateJavascript=脚本过程，当数据量过大时会增加脚本的编译执行时间，占用
WebView JS 线程。

*3. 后台态页面进行 setData*

当页面进入后台态（用户不可见），不应该继续去进行=setData=，后台态页面的渲染用户是无法感受的，另外后台态页面去=setData=也会抢占前台页面的执行。

* 图片资源
  :PROPERTIES:
  :CLASS: calibre44
  :END:

目前图片资源的主要性能问题在于大图片和长列表图片上，这两种情况都有可能导致
iOS 客户端内存占用上升，从而触发系统回收小程序页面。

** 图片对内存的影响
   :PROPERTIES:
   :CLASS: calibre16
   :END:

在 iOS 上，小程序的页面是由多个 WKWebView
组成的，在系统内存紧张时，会回收掉一部分
WKWebView。从过去我们分析的案例来看，大图片和长列表图片的使用会引起
WKWebView 的回收。

** 图片对页面切换的影响
   :PROPERTIES:
   :CLASS: calibre16
   :END:

除了内存问题外，大图片也会造成页面切换的卡顿。我们分析过的案例中，有一部分小程序会在页面中引用大图片，在页面后退切换中会出现掉帧卡顿的情况。

当前我们建议开发者尽量减少使用大图片资源。

* 代码包大小的优化
  :PROPERTIES:
  :CLASS: calibre44
  :END:

小程序一开始时代码包限制为
1MB，但我们收到了很多反馈说代码包大小不够用，经过评估后我们放开了这个限制，增加到
2MB
。代码包上限的增加对于开发者来说，能够实现更丰富的功能，但对于用户来说，也增加了下载流量和本地空间的占用。

开发者在实现业务逻辑同时也有必要尽量减少代码包的大小，因为代码包大小直接影响到下载速度，从而影响用户的首次打开体验。除了代码自身的重构优化外，还可以从这两方面着手优化代码大小：

*控制代码包内图片资源*

小程序代码包经过编译后，会放在微信的 CDN 上供用户下载，CDN 开启了 GZIP
压缩，所以用户下载的是压缩后的 GZIP 包，其大小比代码包原体积会更小。
但我们分析数据发现，不同小程序之间的代码包压缩比差异也挺大的，部分可以达到
30%，而部分只有
80%，而造成这部分差异的一个原因，就是图片资源的使用。GZIP
对基于文本资源的压缩效果最好，在压缩较大文件时往往可高达 70%-80%
的压缩率，而如果对已经压缩的资源（例如大多数的图片格式）则效果甚微。

*及时清理没有使用到的代码和资源*

在日常开发的时候，我们可能引入了一些新的库文件，而过了一段时间后，由于各种原因又不再使用这个库了，我们常常会只是去掉了代码里的引用，而忘记删掉这类库文件了。目前小程序打包是会将工程下所有文件都打入代码包内，也就是说，这些没有被实际使用到的库文件和资源也会被打入到代码包里，从而影响到整体代码包的大小。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-tips.html]]

\\
\\
| [[../index_u33.html#article_35][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u48.html>>

| [[../article_37/index_u96.html][下一项]] |
[[../index_u33.html#article_36][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_35/index_u34.html][上一项]] |

--------------

** 基础组件
   :PROPERTIES:
   :CUSTOM_ID: index_u48.html#基础组件
   :CLASS: calibre16
   :END:

--------------

框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。

什么是组件：

- 组件是视图层的基本组成单元。
- 组件自带一些功能与微信风格的样式。
- 一个组件通常包括=开始标签=和=结束标签=，=属性=用来修饰这个组件，=内容=在两个标签之内。

  #+BEGIN_EXAMPLE
      <tagname property="value">
        Content goes here ...
      </tagename>
  #+END_EXAMPLE

  *注意：所有组件与属性都是小写，以连字符=-=连接*

** 属性类型
   :PROPERTIES:
   :CUSTOM_ID: index_u48.html#属性类型
   :CLASS: calibre16
   :END:

--------------

| 类型           | 描述             | 注解                                                                                                                                               |
|----------------+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------|
| Boolean        | 布尔值           | 组件写上该属性，不管该属性等于什么，其值都为=true=，只有组件上没有写该属性时，属性值才为=false=。如果属性值为变量，变量的值会被转换为Boolean类型   |
| Number         | 数字             | =1=, =2.5=                                                                                                                                         |
| String         | 字符串           | ="string"=                                                                                                                                         |
| Array          | 数组             | =[ 1, "string" ]=                                                                                                                                  |
| Object         | 对象             | ={ key: value }=                                                                                                                                   |
| EventHandler   | 事件处理函数名   | ="handlerName"=是[[file:weixinapp-page.html][Page]]中定义的事件处理函数名                                                                          |
| Any            | 任意属性         |                                                                                                                                                    |

** 共同属性类型
   :PROPERTIES:
   :CUSTOM_ID: index_u48.html#共同属性类型
   :CLASS: calibre16
   :END:

--------------

所有组件都有的属性：

| 属性名           | 类型           | 描述             | 注解                                       |
|------------------+----------------+------------------+--------------------------------------------|
| id               | String         | 组件的唯一标示   | 保持整个页面唯一                           |
| class            | String         | 组件的样式类     | 在对应的wxss中定义的样式类                 |
| style            | String         | 组件的内联样式   | 可以动态设置的内联样式                     |
| hidden           | Boolean        | 组件是否显示     | 所有组件默认显示                           |
| data-*           | Any            | 自定义属性       | 组件上触发的事件时，会发送给事件处理函数   |
| bind* / catch*   | EventHandler   | 组件的事件       | 详见[[file:weixinapp-event.html][事件]]    |

** 特殊属性
   :PROPERTIES:
   :CUSTOM_ID: index_u48.html#特殊属性
   :CLASS: calibre16
   :END:

--------------

几乎所有组件都有各自定义的属性，可以对该组件的功能或样式进行修饰，请参考各个[[#index_u48.html#组件列表][组件]]的定义。

** 组件列表
   :PROPERTIES:
   :CUSTOM_ID: index_u48.html#组件列表
   :CLASS: calibre16
   :END:

--------------

基础组件分为以下八大类：

*视图容器(View Container)：*

| 组件名                                             | 说明               |
|----------------------------------------------------+--------------------|
| [[file:sp6z1q8q.html][view]]                       | 视图容器           |
| [[file:weixinapp-scroll-view.html][scroll-view]]   | 可滚动视图容器     |
| [[file:weixinapp-swiper.html][swiper]]             | 可滑动的视图容器   |

*基础内容(Basic Content)：*

| 组件名                                       | 说明     |
|----------------------------------------------+----------|
| [[file:rmcw1q8t.html][icon]]                 | 图标     |
| [[file:weixinapp-text.html][text]]           | 文字     |
| [[file:weixinapp-progress.html][progress]]   | 进度条   |

*表单(Form)：*

| 标签名                                                      | 说明             |
|-------------------------------------------------------------+------------------|
| [[file:9w841q8w.html][button]]                              | 按钮             |
| [[file:m8x71q8z.html][form]]                                | 表单             |
| [[file:3glu1q92.html][input]]                               | 输入框           |
| [[file:oj6e1q8x.html][checkbox]]                            | 多项选择器       |
| [[file:gqhd1q96.html][radio]]                               | 单项选择器       |
| [[file:d9mw1q95.html][picker]]                              | 列表选择器       |
| [[file:weixinapp-component-pickerview.html][picker-view]]   | 内嵌列表选择器   |
| [[file:hk941q97.html][slider]]                              | 滑动选择器       |
| [[file:anr21q99.html][switch]]                              | 开关选择器       |
| [[file:vn371q94.html][label]]                               | 标签             |

*导航(Navigation)：*\\

| 组件名                                         | 说明         |
|------------------------------------------------+--------------|
| [[file:weixinapp-navigator.html][navigator]]   | 应用内跳转   |

*多媒体(Media)：*

| 组件名                                 | 说明   |
|----------------------------------------+--------|
| [[file:weixinapp-audio.html][audio]]   | 音频   |
| [[file:weixinapp-image.html][image]]   | 图片   |
| [[file:weixinapp-video.html][video]]   | 视频   |

*地图(Map)：*

| 组件名                             | 说明   |
|------------------------------------+--------|
| [[file:weixinapp-map.html][map]]   | 地图   |

*画布(Canvas)：*

| 组件名                                   | 说明   |
|------------------------------------------+--------|
| [[file:weixinapp-canvas.html][canvas]]   | 画布   |

*客服会话：*

| 组件名                                                            | 说明               |
|-------------------------------------------------------------------+--------------------|
| [[file:weixinapp-component-contactbutton.html][contact-button]]   | 进入客服会话按钮   |

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/itz51q8o.html]]

\\
\\
| [[../index_u33.html#article_36][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u96.html>>

| [[../article_38/index_u50.html][下一项]] |
[[../index_u33.html#article_37][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_36/index_u48.html][上一项]] |

--------------

** view
   :PROPERTIES:
   :CUSTOM_ID: index_u96.html#view
   :CLASS: calibre16
   :END:

--------------

视图容器。

| 属性名             | 类型     | 默认值   | 说明                                                             |
|--------------------+----------+----------+------------------------------------------------------------------|
| hover-class        | String   | none     | 指定按下去的样式类。当 =hover-class="none"= 时，没有点击态效果   |
| hover-start-time   | Number   | 50       | 按住后多久出现点击态，单位毫秒                                   |
| hover-stay-time    | Number   | 400      | 手指松开后点击态保留时间，单位毫秒                               |

\\
*示例：*

#+BEGIN_EXAMPLE
    <view class="section">
      <view class="section__title">flex-direction: row</view>
      <view class="flex-wrp" style="flex-direction:row;">
        <view class="flex-item bc_green">1</view>
        <view class="flex-item bc_red">2</view>
        <view class="flex-item bc_blue">3</view>
      </view>
    </view>
    <view class="section">
      <view class="section__title">flex-direction: column</view>
      <view class="flex-wrp" style="height: 300px;flex-direction:column;">
        <view class="flex-item bc_green">1</view>
        <view class="flex-item bc_red">2</view>
        <view class="flex-item bc_blue">3</view>
      </view>
    </view>
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]\\

**** Bug & Tip
     :PROPERTIES:
     :CLASS: calibre12
     :END:

1. =tip=: 如果需要使用滚动视图，请使用
   [[file:weixinapp-scroll-view.html][scroll-view]]

[[file:weixinapp-scroll-view.html][\\
]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/sp6z1q8q.html]]

\\
\\
| [[../index_u33.html#article_37][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u50.html>>

| [[../article_39/index_u94.html][下一项]] |
[[../index_u33.html#article_38][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_37/index_u96.html][上一项]] |

--------------

** scroll-view
   :PROPERTIES:
   :CUSTOM_ID: index_u50.html#scroll-view
   :CLASS: calibre16
   :END:

--------------

可滚动视图区域。

| 属性名                  | 类型          | 默认值   | 说明                                                                                            |
|-------------------------+---------------+----------+-------------------------------------------------------------------------------------------------|
| scroll-x                | Boolean       | false    | 允许横向滚动                                                                                    |
| scroll-y                | Boolean       | false    | 允许纵向滚动                                                                                    |
| upper-threshold         | Number        | 50       | 距顶部/左边多远时（单位px），触发 scrolltoupper 事件                                            |
| lower-threshold         | Number        | 50       | 距底部/右边多远时（单位px），触发 scrolltolower 事件                                            |
| scroll-top              | Number        |          | 设置竖向滚动条位置                                                                              |
| scroll-left             | Number        |          | 设置横向滚动条位置                                                                              |
| scroll-into-view        | String        |          | 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素              |
| scroll-with-animation   | Boolean       | false    | 在设置滚动条位置时使用动画过渡                                                                  |
| enable-back-to-top      | Boolean       | false    | iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向                                 |
| bindscrolltoupper       | EventHandle   |          | 滚动到顶部/左边，会触发 scrolltoupper 事件                                                      |
| bindscrolltolower       | EventHandle   |          | 滚动到底部/右边，会触发 scrolltolower 事件                                                      |
| bindscroll              | EventHandle   |          | 滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}   |

使用竖向滚动时，需要给=<scroll-view/>=一个固定高度，通过
[[file:weixinapp-wxss.html][WXSS]] 设置 height。

*示例代码：*

#+BEGIN_EXAMPLE
    <view class="section">
      <view class="section__title">vertical scroll</view>
      <scroll-view scroll-y style="height: 200px;" bindscrolltoupper="upper" bindscrolltolower="lower" bindscroll="scroll" scroll-into-view="{{toView}}" scroll-top="{{scrollTop}}">
        <view id="green" class="scroll-view-item bc_green"></view>
        <view id="red"  class="scroll-view-item bc_red"></view>
        <view id="yellow" class="scroll-view-item bc_yellow"></view>
        <view id="blue" class="scroll-view-item bc_blue"></view>
      </scroll-view>

      <view class="btn-area">
        <button size="mini" bindtap="tap">click me to scroll into view </button>
        <button size="mini" bindtap="tapMove">click me to scroll</button>
      </view>
    </view>
    <view class="section section_gap">
      <view class="section__title">horizontal scroll</view>
      <scroll-view class="scroll-view_H" scroll-x="true" style="width: 100%">
        <view id="green" class="scroll-view-item_H bc_green"></view>
        <view id="red"  class="scroll-view-item_H bc_red"></view>
        <view id="yellow" class="scroll-view-item_H bc_yellow"></view>
        <view id="blue" class="scroll-view-item_H bc_blue"></view>
      </scroll-view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    var order = ['red', 'yellow', 'blue', 'green', 'red']
    Page({
      data: {
        toView: 'red',
        scrollTop: 100
      },
      upper: function(e) {
        console.log(e)
      },
      lower: function(e) {
        console.log(e)
      },
      scroll: function(e) {
        console.log(e)
      },
      tap: function(e) {
        for (var i = 0; i < order.length; ++i) {
          if (order[i] === this.data.toView) {
            this.setData({
              toView: order[i + 1]
            })
            break
          }
        }
      },
      tapMove: function(e) {
        this.setData({
          scrollTop: this.data.scrollTop + 10
        })
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]

**** Bug & Tip
     :PROPERTIES:
     :CLASS: calibre12
     :END:

1. =tip=:
   请勿在=scroll-view=中使用=textarea=、=map=、=canvas=、=video=组件
2. =tip=: =scroll-into-view=的优先级高于=scroll-top=
3. =tip=:
   在滚动=scroll-view=时会阻止页面回弹，所以在=scroll-view=中滚动，是无法触发=onPullDownRefresh=
4. =tip=:
   若要使用下拉刷新，请使用页面的滚动，而不是=scroll-view=，这样也能通过点击顶部状态栏回到页面顶部

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-scroll-view.html]]

\\
\\
| [[../index_u33.html#article_38][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u94.html>>

| [[../article_40/index_u46.html][下一项]] |
[[../index_u33.html#article_39][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_38/index_u50.html][上一项]] |

--------------

** swiper
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

滑块视图容器。

| 属性名                   | 类型          | 默认值              | 说明                                                                                  | 最低版本                                                        |
|--------------------------+---------------+---------------------+---------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| indicator-dots           | Boolean       | false               | 是否显示面板指示点                                                                    |                                                                 |
| indicator-color          | Color         | rgba(0, 0, 0, .3)   | 指示点颜色                                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| indicator-active-color   | Color         | #000000             | 当前选中的指示点颜色                                                                  | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| autoplay                 | Boolean       | false               | 是否自动切换                                                                          |                                                                 |
| current                  | Number        | 0                   | 当前所在页面的 index                                                                  |                                                                 |
| interval                 | Number        | 5000                | 自动切换时间间隔                                                                      |                                                                 |
| duration                 | Number        | 500                 | 滑动动画时长                                                                          |                                                                 |
| circular                 | Boolean       | false               | 是否采用衔接滑动                                                                      |                                                                 |
| vertical                 | Boolean       | false               | 滑动方向是否为纵向                                                                    |                                                                 |
| bindchange               | EventHandle   |                     | current 改变时会触发 change 事件，event.detail = {current: current, source: source}   |                                                                 |

\\

从公共库v1.4.0开始，=change=事件返回=detail=中包含一个=source=字段，表示导致变更的原因，可能值如下：

- =autoplay=自动播放导致swiper变化；
- =touch=用户划动引起swiper变化；
- 其他原因将用空字符串表示。

*注意*：其中只可放置=<swiper-item/>=组件，否则会导致未定义的行为。

** swiper-item
   :PROPERTIES:
   :CLASS: calibre16
   :END:

仅可放置在=<swiper/>=组件中，宽高自动设置为100%。

示例代码：

#+BEGIN_EXAMPLE
    <swiper indicator-dots="{{indicatorDots}}"
      autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}">
      <block wx:for="{{imgUrls}}">
        <swiper-item>
          <image src="{{item}}" class="slide-image" width="355" height="150"/>
        </swiper-item>
      </block>
    </swiper>
    <button bindtap="changeIndicatorDots"> indicator-dots </button>
    <button bindtap="changeAutoplay"> autoplay </button>
    <slider bindchange="intervalChange" show-value min="500" max="2000"/> interval
    <slider bindchange="durationChange" show-value min="1000" max="10000"/> duration
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        imgUrls: [
          'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg',
          'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg',
          'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg'
        ],
        indicatorDots: false,
        autoplay: false,
        interval: 5000,
        duration: 1000
      },
      changeIndicatorDots: function(e) {
        this.setData({
          indicatorDots: !this.data.indicatorDots
        })
      },
      changeAutoplay: function(e) {
        this.setData({
          autoplay: !this.data.autoplay
        })
      },
      intervalChange: function(e) {
        this.setData({
          interval: e.detail.value
        })
      },
      durationChange: function(e) {
        this.setData({
          duration: e.detail.value
        })
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-swiper.html]]

\\
\\
| [[../index_u33.html#article_39][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u46.html>>

| [[../article_41/index_u59.html][下一项]] |
[[../index_u33.html#article_40][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_39/index_u94.html][上一项]] |

--------------

** movable-area
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

=movable-view= 的可移动区域

*注意：movable-area 必须设置width和height属性，不设置默认为10px*

** movable-view
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

可移动的视图容器，在页面中可以拖拽滑动

| 属性名          | 类型      | 默认值   | 说明                                                                                                |
|-----------------+-----------+----------+-----------------------------------------------------------------------------------------------------|
| direction       | String    | none     | movable-view的移动方向，属性值有all、vertical、horizontal、none                                     |
| inertia         | Boolean   | false    | movable-view是否带有惯性                                                                            |
| out-of-bounds   | Boolean   | false    | 超过可移动区域后，movable-view是否还可以移动                                                        |
| x               | Number    |          | 定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画           |
| y               | Number    |          | 定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画           |
| damping         | Number    | 20       | 阻尼系数，用于控制x或y改变时的动画和过界回弹的动画，值越大移动越快                                  |
| friction        | Number    | 2        | 摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动越快停止；必须大于0，否则会被设置成默认值   |

#+BEGIN_QUOTE
  movable-view 必须设置width和height属性，不设置默认为10px

  movable-view 默认为绝对定位，top和left属性为0px

  当movable-view小于movable-area时，movable-view的移动范围是在movable-area内；当movable-view大于movable-area时，movable-view的移动范围必须包含movable-area（x轴方向和y轴方向分开考虑）
#+END_QUOTE

*注意*：movable-view必须在=<movable-area/>=组件中，并且必须是直接子节点，否则不能移动。

*示例代码：*

#+BEGIN_EXAMPLE
    <view class="section">
      <view class="section__title">movable-view区域小于movable-area</view>
      <movable-area style="height: 200px;width: 200px;background: red;">
        <movable-view style="height: 50px; width: 50px; background: blue;" x="{{x}}" y="{{y}}" direction="all">
        </movable-view>
      </movable-area>
      <view class="btn-area">
        <button size="mini" bindtap="tap">click me to move to (30px, 30px)</button>
      </view>
      <view class="section__title">movable-view区域大于movable-area</view>
      <movable-area style="height: 100px;width: 100px;background: red;" direction="all">
        <movable-view style="height: 200px; width: 200px; background: blue;">
        </movable-view>
      </movable-area>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        x: 0,
        y: 0
      },
      tap: function(e) {
        this.setData({
          x: 30,
          y: 30
        });
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-movable-view.html]]

\\
\\
| [[../index_u33.html#article_40][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u59.html>>

| [[../article_42/index_u16.html][下一项]] |
[[../index_u33.html#article_41][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_40/index_u46.html][上一项]] |

--------------

** cover-view
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

覆盖在原生组件之上的文本视图，可覆盖的原生组件包括=map=、=video=、=canvas=，支持嵌套。

| 属性名   |
|----------|
| 无       |

** cover-image
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

覆盖在原生组件之上的图片视图，可覆盖的原生组件同=cover-view=，支持嵌套在cover-view里。

| 属性名   | 类型     | 默认值   | 说明                                                 |
|----------+----------+----------+------------------------------------------------------|
| src      | String   |          | 图标路径，支持临时路径。暂不支持base64与网络地址。   |

***** Bug & Tips
      :PROPERTIES:
      :CLASS: calibre54
      :END:

1. =tip=:
   只可嵌套在原生组件=map=、=video=、=canvas=内，避免嵌套在其他组件内。
2. =tip=: 事件模型遵循冒泡模型，但不会冒泡到原生组件。
3. =tip=: 文本建议都套上cover-view标签，避免排版错误。
4. =tip=:
   只支持基本的定位、布局、文本样式。不支持设置单边的border、opacity、background-image等。
5. =tip=: 建议子节点不要溢出父节点
6. =tip=: 暂不支持css动画。

*示例：*

#+BEGIN_EXAMPLE
    <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" controls="{{false}}" event-model="bubble">
      <cover-view class="controls">
        <cover-view class="play" bindtap="play">
          <cover-image class="img" src="/path/to/icon_play" />
        </cover-view>
        <cover-view class="pause" bindtap="pause">
          <cover-image class="img" src="/path/to/icon_pause" />
        </cover-view>
        <cover-view class="time">00:00</cover-view>
      </cover-view>
    </video>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    .controls {
      position: relative;
      top: 50%;
      height: 50px;
      margin-top: -25px;
      display: flex;
    }
    .play,.pause,.time {
      flex: 1;
      height: 100%;
    }
    .time {
      text-align: center;
      background-color: rgba(0, 0, 0, .5);
      color: white;
      line-height: 50px;
    }
    .img {
      width: 40px;
      height: 40px;
      margin: 5px auto;
    }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      onReady() {
        this.videoCtx = wx.createVideoContext('myVideo')
      },
      play() {
        this.videoCtx.play()
      },
      pause() {
        this.videoCtx.pause()
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-cover-view.html]]

\\
\\
| [[../index_u33.html#article_41][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u16.html>>

| [[../article_43/index_u41.html][下一项]] |
[[../index_u33.html#article_42][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_41/index_u59.html][上一项]] |

--------------

** icon
   :PROPERTIES:
   :CUSTOM_ID: index_u16.html#icon
   :CLASS: calibre16
   :END:

--------------

图标。

| 属性名   | 类型     | 默认值   | 说明                                                                                                   |
|----------+----------+----------+--------------------------------------------------------------------------------------------------------|
| type     | String   |          | icon的类型，有效值：success, success_no_circle, info, warn, waiting, cancel, download, search, clear   |
| size     | Number   | 23       | icon的大小，单位px                                                                                     |
| color    | Color    |          | icon的颜色，同css的color                                                                               |

*示例：*

#+BEGIN_EXAMPLE
    <view class="group">
      <block wx:for="{{iconSize}}">
        <icon type="success" size="{{item}}"/>
      </block>
    </view>

    <view class="group">
      <block wx:for="{{iconType}}">
        <icon type="{{item}}" size="40"/>
      </block>
    </view>


    <view class="group">
      <block wx:for="{{iconColor}}">
        <icon type="success" size="40" color="{{item}}"/>
      </block>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        iconSize: [20, 30, 40, 50, 60, 70],
        iconColor: [
          'red', 'orange', 'yellow', 'green', 'rgb(0,255,255)', 'blue', 'purple'
        ],
        iconType: [
          'success', 'success_no_circle', 'info', 'warn', 'waiting', 'cancel', 'download', 'search', 'clear'
        ]
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]

\\
\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/rmcw1q8t.html]]

\\
\\
| [[../index_u33.html#article_42][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u41.html>>

| [[../article_44/index_u60.html][下一项]] |
[[../index_u33.html#article_43][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_42/index_u16.html][上一项]] |

--------------

**** 
     :PROPERTIES:
     :CLASS: calibre12
     :END:

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

text 

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

文本。

| 属性名       | 类型      | 默认值   | 说明           | 最低版本                                                        |
|--------------+-----------+----------+----------------+-----------------------------------------------------------------|
| selectable   | Boolean   | false    | 文本是否可选   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| space        | String    | false    | 显示连续空格   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| decode       | Boolean   | false    | 是否解码       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*space 有效值：*

| 值     | 说明                     |
|--------+--------------------------|
| ensp   | 中文字符空格一半大小     |
| emsp   | 中文字符空格大小         |
| nbsp   | 根据字体设置的空格大小   |

***** Tips
      :PROPERTIES:
      :CLASS: calibre54
      :END:

- decode可以解析的有=&nbsp;==&lt;= =&gt;==&amp;==&apos;==&ensp;==&emsp;=
- 各个操作系统的空格标准并不一致。
- =<text/>= 组件内只支持=<text/>=嵌套。
- 除了文本节点以外的其他节点都无法长按选中。

*示例：*

#+BEGIN_EXAMPLE
    <view class="btn-area">
      <view class="body-view">
        <text>{{text}}</text>
        <button bindtap="add">add line</button>
        <button bindtap="remove">remove line</button>
      </view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    var initData = 'this is first line\nthis is second line'
    var extraLine = [];
    Page({
      data: {
        text: initData
      },
      add: function(e) {
        extraLine.push('other line')
        this.setData({
          text: initData + '\n' + extraLine.join('\n')
        })
      },
      remove: function(e) {
        if (extraLine.length > 0) {
          extraLine.pop()
          this.setData({
            text: initData + '\n' + extraLine.join('\n')
          })
        }
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_43/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/pic/text.png?t=2017329]]

\\
** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=:=text= 的长按复制功能尚未实现。\\

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-text.html]]

\\
\\
| [[../index_u33.html#article_43][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u60.html>>

| [[../article_45/index_u23.html][下一项]] |
[[../index_u33.html#article_44][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_43/index_u41.html][上一项]] |

--------------

** rich-text
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

富文本。

| 属性    | 类型             | 默认值   | 说明                     | 最低版本                                                        |
|---------+------------------+----------+--------------------------+-----------------------------------------------------------------|
| nodes   | Array / String   | []       | 节点列表 / HTML String   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

支持默认事件，包括：=tap=、=touchstart=、=touchmove=、=touchcancel=、=touchend=和=longtap=

*nodes 属性推荐使用 Array 类型，由于组件会将 String 类型转换为 Array
类型，因而性能会有所下降*

*\\
*

nodes

现支持两种节点，通过type来区分，分别是元素节点和文本节点，默认是元素节点，在富文本区域里显示的HTML节点

*元素节点：type = node*

| 属性       | 说明         | 类型     | 必填   | 备注                                     |
|------------+--------------+----------+--------+------------------------------------------|
| name       | 标签名       | String   | 是     | 支持部分受信任的HTML节点                 |
| attrs      | 属性         | Object   | 否     | 支持部分受信任的属性，遵循Pascal命名法   |
| children   | 子节点列表   | Array    | 否     | 结构和nodes一致                          |

*文本节点：type = text*

| 属性   | 说明   | 类型     | 必填   | 备注           |
|--------+--------+----------+--------+----------------|
| text   | 文本   | String   | 是     | 支持entities   |

受信任的HTML节点及属性

全局支持class和style属性，*不支持id属性*。

| 节点         | 属性                              |
|--------------+-----------------------------------|
| a            |                                   |
| abbr         |                                   |
| b            |                                   |
| blockquote   |                                   |
| br           |                                   |
| code         |                                   |
| col          | span，width                       |
| colgroup     | span，width                       |
| dd           |                                   |
| del          |                                   |
| div          |                                   |
| dl           |                                   |
| dt           |                                   |
| em           |                                   |
| fieldset     |                                   |
| h1           |                                   |
| h2           |                                   |
| h3           |                                   |
| h4           |                                   |
| h5           |                                   |
| h6           |                                   |
| hr           |                                   |
| i            |                                   |
| img          | alt，src，height，width           |
| ins          |                                   |
| label        |                                   |
| legend       |                                   |
| li           |                                   |
| ol           | start，type                       |
| p            |                                   |
| q            |                                   |
| span         |                                   |
| strong       |                                   |
| sub          |                                   |
| sup          |                                   |
| table        | width                             |
| tbody        |                                   |
| td           | colspan，height，rowspan，width   |
| tfoot        |                                   |
| th           | colspan，height，rowspan，width   |
| thead        |                                   |
| tr           |                                   |
| ul           |                                   |

*示例：*

#+BEGIN_EXAMPLE
    <!-- rich-text.wxml -->
    <rich-text nodes="{{nodes}}" bindtap="tap"></rich-text>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // rich-text.js
    Page({
      data: {
        nodes: [{
          name: 'div',
          attrs: {
            class: 'div_class',
            style: 'line-height: 60px; color: red;'
          },
          children: [{
            type: 'text',
            text: 'Hello&nbsp;World!'
          }]
        }]
      },
      tap() {
        console.log('tap')
      }
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: nodes 不推荐使用 String 类型，性能会有所下降。
2. =tip=:=rich-text=组件内屏蔽所有节点的事件。
3. =tip=: attrs 属性不支持 id ，支持 class 。
4. =tip=: name 属性大小写不敏感。
5. =tip=: 如果使用了不受信任的HTML节点，该节点及其所有子节点将会被移除。
6. =tip=: img 标签仅支持网络图片。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-rich-text.html]]

\\
\\
| [[../index_u33.html#article_44][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u23.html>>

| [[../article_46/index_u85.html][下一项]] |
[[../index_u33.html#article_45][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_44/index_u60.html][上一项]] |

--------------

*** 
    :PROPERTIES:
    :CLASS: calibre11
    :END:

** progress
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

进度条。

| 属性名            | 类型      | 默认值      | 说明                                                      | 最低版本                                                        |
|-------------------+-----------+-------------+-----------------------------------------------------------+-----------------------------------------------------------------|
| percent           | Float     | 无          | 百分比0~100                                               |                                                                 |
| show-info         | Boolean   | false       | 在进度条右侧显示百分比                                    |                                                                 |
| stroke-width      | Number    | 6           | 进度条线的宽度，单位px                                    |                                                                 |
| color             | Color     | #09BB07     | 进度条颜色 （请使用 activeColor）                         |                                                                 |
| activeColor       | Color     |             | 已选择的进度条的颜色                                      |                                                                 |
| backgroundColor   | Color     |             | 未选择的进度条的颜色                                      |                                                                 |
| active            | Boolean   | false       | 进度条从左往右的动画                                      |                                                                 |
| active-mode       | String    | backwards   | backwards: 动画从头播；forwards：动画从上次结束点接着播   | [[http://caibaojian.com/weixinapp/compatibility.html][1.7.0]]   |

*\\
示例：*\\
#+BEGIN_EXAMPLE
    <progress percent="20" show-info />
    <progress percent="40" stroke-width="12" />
    <progress percent="60" color="pink" />
    <progress percent="80" active />
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-progress.html]]

\\
\\
| [[../index_u33.html#article_45][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u85.html>>

| [[../article_47/index_u81.html][下一项]] |
[[../index_u33.html#article_46][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_45/index_u23.html][上一项]] |

--------------

1.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    button]]

2.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    checkbox]]

3.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    form]]

4.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    input]]

5.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    label]]

6.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    picker]]

7.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    radio-group]]

8.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    slider]]

9.  

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    switch]]

10. 

    //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
    textarea]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/w1k71qay.html]]

\\
\\
| [[../index_u33.html#article_46][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u81.html>>

| [[../article_48/index_u15.html][下一项]] |
[[../index_u33.html#article_47][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_46/index_u85.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

button

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

按钮。

| 属性名                   | 类型      | 默认值         | 说明                                                                                                                                                                               | 最低版本                                                        |
|--------------------------+-----------+----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| size                     | String    | default        | 按钮的大小                                                                                                                                                                         |                                                                 |
| type                     | String    | default        | 按钮的样式类型                                                                                                                                                                     |                                                                 |
| plain                    | Boolean   | false          | 按钮是否镂空，背景色透明                                                                                                                                                           |                                                                 |
| disabled                 | Boolean   | false          | 是否禁用                                                                                                                                                                           |                                                                 |
| loading                  | Boolean   | false          | 名称前是否带 loading 图标                                                                                                                                                          |                                                                 |
| form-type                | String    |                | 用于 =<form/>= 组件，点击分别会触发 =<form/>= 组件的 submit/reset 事件                                                                                                             |                                                                 |
| open-type                | String    |                | 微信开放能力                                                                                                                                                                       | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| hover-class              | String    | button-hover   | 指定按钮按下去的样式类。当 =hover-class="none"= 时，没有点击态效果                                                                                                                 |                                                                 |
| hover-start-time         | Number    | 20             | 按住后多久出现点击态，单位毫秒                                                                                                                                                     |                                                                 |
| hover-stay-time          | Number    | 70             | 手指松开后点击态保留时间，单位毫秒                                                                                                                                                 |                                                                 |
| session-from             | String    |                | open-type="contact"时有效：用户从该按钮进入会话时，开发者将收到带上本参数的事件推送。本参数可用于区分用户进入客服会话的来源。                                                      | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| bindgetuserinfoHandler   | Handler   |                | open-type="getUserInfo"时有效：用户点击该按钮时，会返回获取到的用户信息，从返回参数的detail中获取到的值同[[http://caibaojian.com/weixinapp/weixinapp-open.html][wx.getUserInfo]]   | [[http://caibaojian.com/weixinapp/compatibility.html][1.3.0]]   |

*注：button-hover默认为{background-color:rgba(0,0,0,0.1);opacity:0.7;}*
*size 有效值：*

| 值        | 说明   |
|-----------+--------|
| default   |        |
| mini      |        |

*type 有效值：*

| 值        | 说明   |
|-----------+--------|
| primary   |        |
| default   |        |
| warn      |        |

*form-type 有效值：*

| 值       | 说明       |
|----------+------------|
| submit   | 提交表单   |
| reset    | 重置表单   |

*open-type 有效值：*

| 值            | 说明                                                                                                            | 最低版本                                                                            |
|---------------+-----------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------|
| contact       | 打开客服会话                                                                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]                       |
| share         | 触发用户转发，使用前建议先阅读[[http://caibaojian.com/weixinapp/weixinapp-api-share.html#使用指引][使用指引]]   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]                       |
| getUserInfo   | 获取用户信息，可以从bindgetuserinfo回调中获取到用户信                                                           | [[https://mp.weixin.qq.com/debug/wxadoc/dev/framework/compatibility.html][1.3.0]]   |

*示例代码：*

#+BEGIN_EXAMPLE
    /** wxss **/
    /** 修改button默认的点击态样式类**/
    .button-hover {
      background-color: red;
    }
    /** 添加自定义button点击态样式类**/
    .other-button-hover {
      background-color: blue;
    }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <button type="default" size="{{defaultSize}}" loading="{{loading}}" plain="{{plain}}"
            disabled="{{disabled}}" bindtap="default" hover-class="other-button-hover"> default </button>
    <button type="primary" size="{{primarySize}}" loading="{{loading}}" plain="{{plain}}"
            disabled="{{disabled}}" bindtap="primary"> primary </button>
    <button type="warn" size="{{warnSize}}" loading="{{loading}}" plain="{{plain}}"
            disabled="{{disabled}}" bindtap="warn"> warn </button>
    <button bindtap="setDisabled">点击设置以上按钮disabled属性</button>
    <button bindtap="setPlain">点击设置以上按钮plain属性</button>
    <button bindtap="setLoading">点击设置以上按钮loading属性</button>
    <button open-type="contact">进入客服会话</button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    var types = ['default', 'primary', 'warn']
    var pageObject = {
      data: {
        defaultSize: 'default',
        primarySize: 'default',
        warnSize: 'default',
        disabled: false,
        plain: false,
        loading: false
      },
      setDisabled: function(e) {
        this.setData({
          disabled: !this.data.disabled
        })
      },
      setPlain: function(e) {
        this.setData({
          plain: !this.data.plain
        })
      },
      setLoading: function(e) {
        this.setData({
          loading: !this.data.loading
        })
      }
    }

    for (var i = 0; i < types.length; ++i) {
      (function(type) {
        pageObject[type] = function(e) {
          var key = type + 'Size'
          var changedData = {}
          changedData[key] =
            this.data[key] === 'default' ? 'mini' : 'default'
          this.setData(changedData)
        }
      })(types[i])
    }

    Page(pageObject)
#+END_EXAMPLE

\\

[[file:feed_0/article_1/images/img1_u2.png]]\\

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/9w841q8w.html]]

\\
\\
| [[../index_u33.html#article_47][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u15.html>>

| [[../article_49/index_u31.html][下一项]] |
[[../index_u33.html#article_48][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_47/index_u81.html][上一项]] |

--------------

** 微信小程序表单组件 checkbox
   :PROPERTIES:
   :CLASS: calibre16
   :END:

** checkbox-group
   :PROPERTIES:
   :CLASS: calibre16
   :END:

多项选择器，内部由多个=checkbox=组成。

| 属性名       | 类型          | 默认值   | 说明                                                                                                |
|--------------+---------------+----------+-----------------------------------------------------------------------------------------------------|
| bindchange   | EventHandle   |          | <checkbox-group/>中选中项发生改变是触发change事件，detail = {value:[选中的checkbox的value的数组]}   |

** checkbox
   :PROPERTIES:
   :CLASS: calibre16
   :END:

多选项目。

| 属性名     | 类型      | 默认值   | 说明                                                                                 |
|------------+-----------+----------+--------------------------------------------------------------------------------------|
| value      | String    |          | <checkbox/>标识，选中时触发<checkbox-group/>的change事件，并携带<checkbox/>的value   |
| disabled   | Boolean   | false    | 是否禁用                                                                             |
| checked    | Boolean   | false    | 当前是否选中，可用来设置默认选中                                                     |
| color      | Color     |          | checkbox的颜色，同css的color                                                         |
|            |           |          |                                                                                      |

*示例：*

#+BEGIN_EXAMPLE
    <checkbox-group bindchange="checkboxChange">
        <label class="checkbox" wx:for-items="{{items}}">
            <checkbox value="{{item.name}}" checked="{{item.checked}}"/>{{item.value}}
        </label>
    </checkbox-group>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        items: [
          {name: 'USA', value: '美国'},
          {name: 'CHN', value: '中国', checked: 'true'},
          {name: 'BRA', value: '巴西'},
          {name: 'JPN', value: '日本'},
          {name: 'ENG', value: '英国'},
          {name: 'TUR', value: '法国'},
        ]
      },
      checkboxChange: function(e) {
        console.log('checkbox发生change事件，携带value值为：', e.detail.value)
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_48/images/img1_u1.png]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/oj6e1q8x.html]]

\\
\\
| [[../index_u33.html#article_48][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u31.html>>

| [[../article_50/index_u2.html][下一项]] |
[[../index_u33.html#article_49][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_48/index_u15.html][上一项]] |

--------------

** 微信小程序form
   :PROPERTIES:
   :CLASS: calibre16
   :END:

表单，将组件内的用户输入的=<switch/>= =<input/>= =<checkbox/>=
=<slider/>= =<radio/>= =<picker/>= 提交。\\

当点击=<form/>=表单中 formType 为 submit
的=<button/>=组件时，会将表单组件中的 value
值进行提交，需要在表单组件中加上 name 来作为 key。

| 属性名          | 类型          | 说明                                                                                      |
|-----------------+---------------+-------------------------------------------------------------------------------------------|
| report-submit   | Boolean       | 是否返回formId用于发送[[file:weixinapp-notice.html][模板消息]]                            |
| bindsubmit      | EventHandle   | 携带form中的数据触发submit事件，event.detail = { value : {"name":"value"} , formId:"" }   |
| bindreset       | EventHandle   | 表单重置时会触发reset事件                                                                 |

** *示例代码：*
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <form bindsubmit="formSubmit" bindreset="formReset">
        <view class="section section_gap">
            <view class="section__title">switch</view>
            <switch name="switch"/>
        </view>
        <view class="section section_gap">
            <view class="section__title">slider</view>
            <slider name="slider" show-value ></slider>
        </view>

        <view class="section">
            <view class="section__title">input</view>
            <input name="input" placeholder="please input here" />
        </view>
        <view class="section section_gap">
            <view class="section__title">radio</view>
            <radio-group name="radio-group">
                <label><radio value="radio1"/>radio1</label>
                <label><radio value="radio2"/>radio2</label>
            </radio-group>
        </view>
        <view class="section section_gap">
            <view class="section__title">checkbox</view>
            <checkbox-group name="checkbox">
                <label><checkbox value="checkbox1"/>checkbox1</label>
                <label><checkbox value="checkbox2"/>checkbox2</label>
            </checkbox-group>
        </view>
        <view class="btn-area">
            <button formType="submit">Submit</button>
            <button formType="reset">Reset</button>
        </view>
    </form>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      formSubmit: function(e) {
        console.log('form发生了submit事件，携带数据为：', e.detail.value)
      },
      formReset: function() {
        console.log('form发生了reset事件')
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_49/images/img1_u3.png]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/m8x71q8z.html]]

\\
\\
| [[../index_u33.html#article_49][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u2.html>>

| [[../article_51/index_u70.html][下一项]] |
[[../index_u33.html#article_50][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_49/index_u31.html][上一项]] |

--------------

** input
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

输入框。\\

| 属性名              | 类型          | 默认值                | 说明                                                                                                                   | 最低版本                                                        |
|---------------------+---------------+-----------------------+------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| value               | String        |                       | 输入框的初始内容                                                                                                       |                                                                 |
| type                | String        | "text"                | input 的类型                                                                                                           |                                                                 |
| password            | Boolean       | false                 | 是否是密码类型                                                                                                         |                                                                 |
| placeholder         | String        |                       | 输入框为空时占位符                                                                                                     |                                                                 |
| placeholder-style   | String        |                       | 指定 placeholder 的样式                                                                                                |                                                                 |
| placeholder-class   | String        | "input-placeholder"   | 指定 placeholder 的样式类                                                                                              |                                                                 |
| disabled            | Boolean       | false                 | 是否禁用                                                                                                               |                                                                 |
| maxlength           | Number        | 140                   | 最大输入长度，设置为 -1 的时候不限制最大长度                                                                           |                                                                 |
| cursor-spacing      | Number        | 0                     | 指定光标与键盘的距离，单位 px 。取 input 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离        |                                                                 |
| auto-focus          | Boolean       | false                 | (即将废弃，请直接使用 focus )自动聚焦，拉起键盘                                                                        |                                                                 |
| focus               | Boolean       | false                 | 获取焦点                                                                                                               |                                                                 |
| confirm-type        | String        | "done"                | 设置键盘右下角按钮的文字                                                                                               | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| confirm-hold        | Boolean       | false                 | 点击键盘右下角按钮时是否保持键盘不收起                                                                                 | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| bindinput           | EventHandle   |                       | 当键盘输入时，触发input事件，event.detail = {value: value}，处理函数可以直接 return 一个字符串，将替换输入框的内容。   |                                                                 |
| bindfocus           | EventHandle   |                       | 输入框聚焦时触发，event.detail = {value: value}                                                                        |                                                                 |
| bindblur            | EventHandle   |                       | 输入框失去焦点时触发，event.detail = {value: value}                                                                    |                                                                 |
| bindconfirm         | EventHandle   |                       | 点击完成按钮时触发，event.detail = {value: value}                                                                      |                                                                 |

*type 有效值：*

| 值       | 说明                 |
|----------+----------------------|
| text     | 文本输入键盘         |
| number   | 数字输入键盘         |
| idcard   | 身份证输入键盘       |
| digit    | 带小数点的数字键盘   |

*confirm-type 有效值：*

| 值       | 说明                   |
|----------+------------------------|
| send     | 右下角按钮为“发送”     |
| search   | 右下角按钮为“搜索”     |
| next     | 右下角按钮为“下一个”   |
| go       | 右下角按钮为“前往”     |
| done     | 右下角按钮为“完成”     |

\\

*示例代码：*

#+BEGIN_EXAMPLE
    <!--input.wxml-->
    <view class="section">
        <input placeholder="这是一个可以自动聚焦的input" auto-focus/>
    </view>
    <view class="section">
        <input placeholder="这个只有在按钮点击的时候才聚焦" focus="{{focus}}" />
        <view class="btn-area">
            <button bindtap="bindButtonTap">使得输入框获取焦点</button>
        </view>
    </view>
    <view class="section">
        <input  maxlength="10" placeholder="最大输入长度10" />
    </view>
    <view class="section">
        <view class="section__title">你输入的是：{{inputValue}}</view>
        <input  bindinput="bindKeyInput" placeholder="输入同步到view中"/>
    </view>
    <view class="section">
        <input  bindinput="bindReplaceInput" placeholder="连续的两个1会变成2" />
    </view>
    <view class="section">
        <input password type="number" />
    </view>
    <view class="section">
        <input password type="text" />
    </view>
    <view class="section">
        <input type="digit" placeholder="带小数点的数字键盘"/>
    </view>
    <view class="section">
        <input type="idcard" placeholder="身份证输入键盘" />
    </view>
    <view class="section">
        <input placeholder-style="color:red" placeholder="占位符字体是红色的" />
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    //input.js
    Page({
      data:{
        focus:false,
        inputValue:""
      },
      bindButtonTap:function(){
        this.setData({
          focus: true
        })
      },
      bindKeyInput:function(e){
        this.setData({
          inputValue:e.detail.value
        })
      },
      bindReplaceInput:function(e){
        var value = e.detail.value;
        var pos = e.detail.cursor;
        if(pos != -1){
          //光标在中间
          var left = e.detail.value.slice(0,pos);
          //计算光标的位置
          pos = left.replace(/11/g,'2').length;
        }

        //直接返回对象，可以对输入进行过滤处理，同时可以控制光标的位置
        return {
          value:value.replace(/11/g,'2'),
          cursor:pos
        }

        //或者直接返回字符串,光标在最后边
        //return value.replace(/11/g,'2'),
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_50/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/pic/input.png?t=2017329]]\\

*** Bug & Tip
    :PROPERTIES:
    :CLASS: calibre11
    :END:

1. =bug= : 微信版本=6.3.30=, focus 属性设置无效；
2. =bug= : 微信版本=6.3.30=, placeholder 在聚焦时出现重影问题；
3. =tip= : input 组件是一个 native 组件，字体是系统字体，所以无法设置
   font-family；
4. =tip= : 在 input 聚焦期间，避免使用 css 动画；

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/3glu1q92.html]]

\\
\\
| [[../index_u33.html#article_50][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u70.html>>

| [[../article_52/index_u100.html][下一项]] |
[[../index_u33.html#article_51][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_50/index_u2.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

label

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

用来改进表单组件的可用性，使用=for=属性找到对应的=id=，或者将控件放在该标签下，当点击时，就会触发对应的控件。

=for=优先级高于内部控件，内部有多个控件的时候默认触发第一个控件。

目前可以绑定的控件有：=<button/>=, =<checkbox/>=, =<radio/>=,
=<switch/>=。

| 属性名   | 类型     | 说明           |
|----------+----------+----------------|
| for      | String   | 绑定控件的id   |

*示例代码：*

#+BEGIN_EXAMPLE
    <view class="section section_gap">
    <view class="section__title">表单组件在label内</view>
    <checkbox-group class="group" bindchange="checkboxChange">
        <view class="label-1" wx:for-items="{{checkboxItems}}">
            <label>
                <checkbox hidden value="{{item.name}}" checked="{{item.checked}}"></checkbox>
                <view class="label-1__icon">
                    <view class="label-1__icon-checked" style="opacity:{{item.checked ? 1: 0}}"></view>
                </view>
                <text class="label-1__text">{{item.value}}</text>
            </label>
        </view>
    </checkbox-group>
    </view>

    <view class="section section_gap">
    <view class="section__title">label用for标识表单组件</view>
    <radio-group class="group" bindchange="radioChange">
        <view class="label-2" wx:for-items="{{radioItems}}">
            <radio id="{{item.name}}" hidden value="{{item.name}}" checked="{{item.checked}}"></radio>
            <view class="label-2__icon">
                <view class="label-2__icon-checked" style="opacity:{{item.checked ? 1: 0}}"></view>
            </view>
            <label class="label-2__text" for="{{item.name}}"><text>{{item.name}}</text></label>
        </view>
    </radio-group>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        checkboxItems: [
          {name: 'USA', value: '美国'},
          {name: 'CHN', value: '中国', checked: 'true'},
          {name: 'BRA', value: '巴西'},
          {name: 'JPN', value: '日本', checked: 'true'},
          {name: 'ENG', value: '英国'},
          {name: 'TUR', value: '法国'},
        ],
        radioItems: [
          {name: 'USA', value: '美国'},
          {name: 'CHN', value: '中国', checked: 'true'},
          {name: 'BRA', value: '巴西'},
          {name: 'JPN', value: '日本'},
          {name: 'ENG', value: '英国'},
          {name: 'TUR', value: '法国'},
        ],
        hidden: false
      },
      checkboxChange: function(e) {
        var checked = e.detail.value
        var changed = {}
        for (var i = 0; i < this.data.checkboxItems.length; i ++) {
          if (checked.indexOf(this.data.checkboxItems[i].name) !== -1) {
            changed['checkboxItems['+i+'].checked'] = true
          } else {
            changed['checkboxItems['+i+'].checked'] = false
          }
        }
        this.setData(changed)
      },
      radioChange: function(e) {
        var checked = e.detail.value
        var changed = {}
        for (var i = 0; i < this.data.radioItems.length; i ++) {
          if (checked.indexOf(this.data.radioItems[i].name) !== -1) {
            changed['radioItems['+i+'].checked'] = true
          } else {
            changed['radioItems['+i+'].checked'] = false
          }
        }
        this.setData(changed)
      }
    })
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    .label-1, .label-2{
        margin-bottom: 15px;
    }
    .label-1__text, .label-2__text {
        display: inline-block;
        vertical-align: middle;
    }

    .label-1__icon {
        position: relative;
        margin-right: 10px;
        display: inline-block;
        vertical-align: middle;
        width: 18px;
        height: 18px;
        background: #fcfff4;
    }

    .label-1__icon-checked {
        position: absolute;
        top: 3px;
        left: 3px;
        width: 12px;
        height: 12px;
        background: #1aad19;
    }


    .label-2__icon {
        position: relative;
        display: inline-block;
        vertical-align: middle;
        margin-right: 10px;
        width: 18px;
        height: 18px;
        background: #fcfff4;
        border-radius: 50px;
    }

    .label-2__icon-checked {
        position: absolute;
        left: 3px;
        top: 3px;
        width: 12px;
        height: 12px;
        background: #1aad19;
        border-radius: 50%;
    }

    .label-4_text{
        text-align: center;
        margin-top: 15px;
    }
#+END_EXAMPLE

[[file:feed_0/article_51/images/img1_u5.png]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/vn371q94.html]]

\\
\\
| [[../index_u33.html#article_51][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u100.html>>

| [[../article_53/index_u40.html][下一项]] |
[[../index_u33.html#article_52][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_51/index_u70.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

picker

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

从底部弹起的滚动选择器，现支持五种选择器，通过mode来区分，分别是普通选择器，多列选择器，时间选择器，日期选择器，省市区选择器，默认是普通选择器。

*普通选择器：mode=selector*

| 属性名       | 类型                   | 默认值   | 说明                                                                                          |
|--------------+------------------------+----------+-----------------------------------------------------------------------------------------------|
| range        | Array / Object Array   | []       | mode为 selector 或 multiSelector 时，range 有效                                               |
| range-key    | String                 |          | 当 range 是一个 Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容   |
| value        | Number                 | 0        | value 的值表示表示选择了 range 中的第几个（下标从 0 开始）。                                  |
| bindchange   | EventHandle            |          | value 改变时触发 change 事件，event.detail = {value: value}                                   |
| disabled     | Boolean                | false    | 是否禁用                                                                                      |

*\\
*

*多列选择器：mode =
multiSelector*（最低版本：[[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]）

| 属性名             | 类型                           | 默认值   | 说明                                                                                                                                                            | 最低版本   |
|--------------------+--------------------------------+----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| range              | 二维Array / 二维Object Array   | []       | mode为 selector 或 multiSelector 时，range 有效。二维数组，长度表示多少列，数组的每项表示每列的数据，如=[["a","b"], ["c","d"]]=                                 |            |
| range-key          | String                         |          | 当 range 是一个 二维Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容                                                                 |            |
| value              | Array                          | []       | value 每一项的值表示选择了 range 对应项中的第几个（下标从 0 开始）                                                                                              |            |
| bindchange         | EventHandle                    |          | value 改变时触发 change 事件，event.detail = {value: value}                                                                                                     |            |
| bindcolumnchange   | EventHandle                    |          | 某一列的值改变时触发 columnchange 事件，event.detail = {column: column, value: value}，column 的值表示改变了第几列（下标从0开始），value 的值表示变更值的下标   |            |
| disabled           | Boolean                        | false    | 是否禁用                                                                                                                                                        |            |

\\
*时间选择器：mode=time*

| 属性名       | 类型          | 默认值   | 说明                                                          |
|--------------+---------------+----------+---------------------------------------------------------------|
| value        | String        |          | 表示选中的时间，格式为"hh:mm"                                 |
| start        | String        |          | 表示有效时间范围的开始，字符串格式为"hh:mm"                   |
| end          | String        |          | 表示有效时间范围的结束，字符串格式为"hh:mm"                   |
| bindchange   | EventHandle   |          | value 改变时触发 change 事件，event.detail = {value: value}   |
| disabled     | Boolean       | false    | 是否禁用                                                      |

*\\
*

*日期选择器：mode=date*

| 属性名       | 类型          | 默认值   | 说明                                                          |
|--------------+---------------+----------+---------------------------------------------------------------|
| value        | String        | 0        | 表示选中的日期，格式为"YYYY-MM-DD"                            |
| start        | String        |          | 表示有效日期范围的开始，字符串格式为"YYYY-MM-DD"              |
| end          | String        |          | 表示有效日期范围的结束，字符串格式为"YYYY-MM-DD"              |
| fields       | String        | day      | 有效值 year,month,day，表示选择器的粒度                       |
| bindchange   | EventHandle   |          | value 改变时触发 change 事件，event.detail = {value: value}   |
| disabled     | Boolean       | false    | 是否禁用                                                      |

*\\
*

*fields 有效值：*

| 值      | 说明               |
|---------+--------------------|
| year    | 选择器粒度为年     |
| month   | 选择器粒度为月份   |
| day     | 选择器粒度为天     |

*\\
*

*省市区选择器：mode =
region*（最低版本：[[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]）

| 属性名       | 类型          | 默认值   | 说明                                                          |
|--------------+---------------+----------+---------------------------------------------------------------|
| value        | Array         | []       | 表示选中的省市区，默认选中每一列的第一个值                    |
| bindchange   | EventHandle   |          | value 改变时触发 change 事件，event.detail = {value: value}   |
| disabled     | Boolean       | false    | 是否禁用                                                      |

\\
** *示例代码：*
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_EXAMPLE
    <view class="section">
        <view class="section__title">普通选择器</view>
        <picker bindchange="bindPickerChange" value="{{index}}" range="{{array}}">
            <view class="picker">
                当前选择: {{array[index]}}
            </view>
        </picker>
    </view>
    <view class="section">
        <view class="section__title">多列选择器</view>
        <picker mode="multiSelector" bindchange="bindMultiPickerChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}"
         <view class="picker">
           当前选择: {{multiArray[0][multiIndex[0]]}},{{multiArray[1][multiIndex[1]]}},{{multiArray[2][multiIndex[2]]}}
         </view>
        </picker>
    </view>
    <view class="section">
        <view class="section__title">时间选择器</view>
        <picker mode="time" value="{{time}}" start="09:01" end="21:01" bindchange="bindTimeChange">
            <view class="picker">
                当前选择: {{time}}
            </view>
        </picker>
    </view>

    <view class="section">
        <view class="section__title">日期选择器</view>
        <picker mode="date" value="{{date}}" start="2015-09-01" end="2017-09-01" bindchange="bindDateChange">
            <view class="picker">
                当前选择: {{date}}
            </view>
        </picker>
    </view>
    <view class="section">
        <view class="section__title">省市区选择器</view>
        <picker mode="region" bindchange="bindRegionChange" value="{{region}}">
          <view class="picker">
            当前选择: {{region[0]}},{{region[1]}},{{region[2]}}
          </view>
        </picker>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        array: ['美国', '中国', '巴西', '日本'],
        objectArray: [
          {
            id: 0,
            name: '美国'
          },
          {
            id: 1,
            name: '中国'
          },
          {
            id: 2,
            name: '巴西'
          },
          {
            id: 3,
            name: '日本'
          }
        ],
        index: 0,
        multiArray: [['无脊柱动物', '脊柱动物'], ['扁性动物', '线形动物', '环节动物', '软体动物', '节肢动物'], ['猪肉绦虫', '吸血虫']],
        objectMultiArray: [
          [
            {
              id: 0,
              name: '无脊柱动物'
            },
            {
              id: 1,
              name: '脊柱动物'
            }
          ], [
            {
              id: 0,
              name: '扁性动物'
            },
            {
              id: 1,
              name: '线形动物'
            },
            {
              id: 2,
              name: '环节动物'
            },
            {
              id: 3,
              name: '软体动物'
            },
            {
              id: 3,
              name: '节肢动物'
            }
          ], [
            {
              id: 0,
              name: '猪肉绦虫'
            },
            {
              id: 1,
              name: '吸血虫'
            }
          ]
        ],
        multiIndex: [0, 0, 0],
        date: '2016-09-01',
        time: '12:01',
        region: ['广东省', '广州市', '海珠区']
      },
      bindPickerChange: function(e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          index: e.detail.value
        })
      },
      bindMultiPickerChange: function (e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          multiIndex: e.detail.value
        })
      },
      bindMultiPickerColumnChange: function (e) {
        console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
        var data = {
          multiArray: this.data.multiArray,
          multiIndex: this.data.multiIndex
        };
        data.multiIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
          case 0:
            switch (data.multiIndex[0]) {
              case 0:
                data.multiArray[1] = ['扁性动物', '线形动物', '环节动物', '软体动物', '节肢动物'];
                data.multiArray[2] = ['猪肉绦虫', '吸血虫'];
                break;
              case 1:
                data.multiArray[1] = ['鱼', '两栖动物', '爬行动物'];
                data.multiArray[2] = ['鲫鱼', '带鱼'];
                break;
            }
            data.multiIndex[1] = 0;
            data.multiIndex[2] = 0;
            break;
          case 1:
            switch (data.multiIndex[0]) {
              case 0:
                switch (data.multiIndex[1]) {
                  case 0:
                    data.multiArray[2] = ['猪肉绦虫', '吸血虫'];
                    break;
                  case 1:
                    data.multiArray[2] = ['蛔虫'];
                    break;
                  case 2:
                    data.multiArray[2] = ['蚂蚁', '蚂蟥'];
                    break;
                  case 3:
                    data.multiArray[2] = ['河蚌', '蜗牛', '蛞蝓'];
                    break;
                  case 4:
                    data.multiArray[2] = ['昆虫', '甲壳动物', '蛛形动物', '多足动物'];
                    break;
                }
                break;
              case 1:
                switch (data.multiIndex[1]) {
                  case 0:
                    data.multiArray[2] = ['鲫鱼', '带鱼'];
                    break;
                  case 1:
                    data.multiArray[2] = ['青蛙', '娃娃鱼'];
                    break;
                  case 2:
                    data.multiArray[2] = ['蜥蜴', '龟', '壁虎'];
                    break;
                }
                break;
            }
            data.multiIndex[2] = 0;
            console.log(data.multiIndex);
            break;
        }
        this.setData(data);
      },
      bindDateChange: function(e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          date: e.detail.value
        })
      },
      bindTimeChange: function(e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          time: e.detail.value
        })
      },
      bindRegionChange: function (e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          region: e.detail.value
        })
      }
    })
#+END_EXAMPLE

\\

[[file:feed_0/article_1/images/img1_u2.png]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/d9mw1q95.html]]

\\
\\
| [[../index_u33.html#article_52][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u40.html>>

| [[../article_54/index_u49.html][下一项]] |
[[../index_u33.html#article_53][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_52/index_u100.html][上一项]] |

--------------

** picker-view
   :PROPERTIES:
   :CUSTOM_ID: index_u40.html#picker-view
   :CLASS: calibre16
   :END:

--------------

嵌入页面的滚动选择器

| 属性名            | 类型          | 说明                                                                                                                                                                 | 最低版本                                                        |
|-------------------+---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| value             | NumberArray   | 数组中的数字依次表示 picker-view 内的 picker-view-colume 选择的第几项（下标从 0 开始），数字大于 picker-view-column 可选项长度时，选择最后一项。                     |                                                                 |
| indicator-style   | String        | 设置选择器中间选中框的样式                                                                                                                                           |                                                                 |
| indicator-class   | String        | 设置选择器中间选中框的类名                                                                                                                                           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| bindchange        | EventHandle   | 当滚动选择，value 改变时触发 change 事件，event.detail = {value: value}；value为数组，表示 picker-view 内的 picker-view-column 当前选择的是第几项（下标从 0 开始）   |                                                                 |

*注意*：其中只可放置=<picker-view-column/>=组件，其他节点不会显示。

** picker-view-column
   :PROPERTIES:
   :CLASS: calibre16
   :END:

仅可放置于=<picker-view />=中，其孩子节点的高度会自动设置成与picker-view的选中框的高度一致。

*示例代码：*

#+BEGIN_EXAMPLE
    <view>
      <view>{{year}}年{{month}}月{{day}}日</view>
      <picker-view indicator-style="height: 50px;" style="width: 100%; height: 300px;" value="{{value}}" bindchange="bindChange">
        <picker-view-column>
          <view wx:for="{{years}}" style="line-height: 50px">{{item}}年</view>
        </picker-view-column>
        <picker-view-column>
          <view wx:for="{{months}}" style="line-height: 50px">{{item}}月</view>
        </picker-view-column>
        <picker-view-column>
          <view wx:for="{{days}}" style="line-height: 50px">{{item}}日</view>
        </picker-view-column>
      </picker-view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    const date = new Date()
    const years = []
    const months = []
    const days = []

    for (let i = 1990; i <= date.getFullYear(); i++) {
      years.push(i)
    }

    for (let i = 1 ; i <= 12; i++) {
      months.push(i)
    }

    for (let i = 1 ; i <= 31; i++) {
      days.push(i)
    }

    Page({
      data: {
        years: years,
        year: date.getFullYear(),
        months: months,
        month: 2,
        days: days,
        day: 2,
        year: date.getFullYear(),
        value: [9999, 1, 1],
      },
      bindChange: function(e) {
        const val = e.detail.value
        this.setData({
          year: this.data.years[val[0]],
          month: this.data.months[val[1]],
          day: this.data.days[val[2]]
        })
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-component-pickerview.html]]

\\
\\
| [[../index_u33.html#article_53][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u49.html>>

| [[../article_55/index_u42.html][下一项]] |
[[../index_u33.html#article_54][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_53/index_u40.html][上一项]] |

--------------

** 微信小程序单选框radio
   :PROPERTIES:
   :CUSTOM_ID: index_u49.html#radio-group
   :CLASS: calibre16
   :END:

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

radio-group

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

单项选择器，内部由多个=<radio/>=组成。

| 属性名       | 类型          | 默认值   | 说明                                                                                           |
|--------------+---------------+----------+------------------------------------------------------------------------------------------------|
| bindchange   | EventHandle   |          | <radio-group/>中的选中项发生变化时触发change事件，event.detail = {value: 选中项radio的value}   |

** radio
   :PROPERTIES:
   :CUSTOM_ID: index_u49.html#radio
   :CLASS: calibre16
   :END:

--------------

单选项目

| 属性名     | 类型      | 默认值   | 说明                                                                                          |
|------------+-----------+----------+-----------------------------------------------------------------------------------------------|
| value      | String    |          | =<radio/>=标识。当该=<radio/>=选中时，=<radio-group/>= 的change 事件会携带=<radio/>=的value   |
| checked    | Boolean   | false    | 当前是否选中                                                                                  |
| disabled   | Boolean   | false    | 是否禁用                                                                                      |
| color      | Color     |          | radio的颜色，同css的color                                                                     |

\\
#+BEGIN_EXAMPLE
    <radio-group class="radio-group" bindchange="radioChange">
        <label class="radio" wx:for="{{items}}">
            <radio value="{{item.name}}" checked="{{item.checked}}"/>{{item.value}}
        </label>
    </radio-group>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({ 
      data: {
        items: [
          {name: 'USA', value: '美国'},
          {name: 'CHN', value: '中国', checked: 'true'},
          {name: 'BRA', value: '巴西'},
          {name: 'JPN', value: '日本'},
          {name: 'ENG', value: '英国'},
          {name: 'TUR', value: '法国'},
        ]
      },
      radioChange: function(e) {
        console.log('radio发生change事件，携带value值为：', e.detail.value)
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_54/images/img1_u4.png]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/gqhd1q96.html]]

\\
\\
| [[../index_u33.html#article_54][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u42.html>>

| [[../article_56/index_u82.html][下一项]] |
[[../index_u33.html#article_55][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_54/index_u49.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 id="slider" class="calibre16">
#+END_HTML

slider

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

滑动选择器。

| 属性名            | 类型          | 默认值    | 说明                                                      | 最低版本                                                        |
|-------------------+---------------+-----------+-----------------------------------------------------------+-----------------------------------------------------------------|
| min               | Number        | 0         | 最小值                                                    |                                                                 |
| max               | Number        | 100       | 最大值                                                    |                                                                 |
| step              | Number        | 1         | 步长，取值必须大于 0，并且可被(max - min)整除             |                                                                 |
| disabled          | Boolean       | false     | 是否禁用                                                  |                                                                 |
| value             | Number        | 0         | 当前取值                                                  |                                                                 |
| color             | Color         | #e9e9e9   | 背景条的颜色（请使用 backgroundColor）                    |                                                                 |
| selected-color    | Color         | #1aad19   | 已选择的颜色（请使用 activeColor）                        |                                                                 |
| activeColor       | Color         | #1aad19   | 已选择的颜色                                              |                                                                 |
| backgroundColor   | Color         | #e9e9e9   | 背景条的颜色                                              |                                                                 |
| show-value        | Boolean       | false     | 是否显示当前 value                                        |                                                                 |
| bindchange        | EventHandle   |           | 完成一次拖动后触发的事件，event.detail = {value: value}   |                                                                 |
| bindchanging      | EventHandle   |           | 拖动过程中触发的事件，event.detail = {value: value}       | [[http://caibaojian.com/weixinapp/compatibility.html][1.7.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    <view class="section section_gap">
        <text class="section__title">设置left/right icon</text>
        <view class="body-view">
            <slider bindchange="slider1change" left-icon="cancel" right-icon="success_no_circle"/>
        </view>
    </view>

    <view class="section section_gap">
        <text class="section__title">设置step</text>
        <view class="body-view">
            <slider bindchange="slider2change" step="5"/>
        </view>
    </view>

    <view class="section section_gap">
        <text class="section__title">显示当前value</text>
        <view class="body-view">
            <slider bindchange="slider3change" show-value/>
        </view>
    </view>

    <view class="section section_gap">
        <text class="section__title">设置最小/最大值</text>
        <view class="body-view">
            <slider bindchange="slider4change" min="50" max="200" show-value/>
        </view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    var pageData = {}
    for(var i = 1; i < 5; ++i) {
      (function (index) {
        pageData['slider' + index + 'change'] = function(e) {
          console.log('slider' + 'index' + '发生 change 事件，携带值为', e.detail.value)
        }
      })(i);
    }
    Page(pageData)
#+END_EXAMPLE

[[file:feed_0/article_55/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/pic/slider.png?t=2017329]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/hk941q97.html]]

\\
\\
| [[../index_u33.html#article_55][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u82.html>>

| [[../article_57/index_u58.html][下一项]] |
[[../index_u33.html#article_56][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_55/index_u42.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 id="switch" class="calibre16">
#+END_HTML

switch

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

开关选择器。

| 属性名       | 类型          | 默认值   | 说明                                                          |
|--------------+---------------+----------+---------------------------------------------------------------|
| checked      | Boolean       | false    | 是否选中                                                      |
| type         | String        | switch   | 样式，有效值：switch, checkbox                                |
| bindchange   | EventHandle   |          | checked 改变时触发change事件，event.detail={ value:checked}   |
| color        | Color         |          | switch的颜色，同css的color                                    |

#+BEGIN_EXAMPLE
    <view class="body-view">
        <switch checked bindchange="switch1Change"/>
        <switch bindchange="switch2Change"/>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    page({
      switch1Checked: function (e){    console.log('switch1 发生 change 事件，携带值为', e.detail.value)  },
      switch2Change: function (e){    console.log('switch2 发生 change 事件，携带值为', e.detail.value)
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/anr21q99.html]]

\\
\\
| [[../index_u33.html#article_56][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u58.html>>

| [[../article_58/index_u13.html][下一项]] |
[[../index_u33.html#article_57][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_56/index_u82.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

textarea

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

多行输入框。

| 属性名              | 类型          | 默认值                 | 说明                                                                                                                  |
|---------------------+---------------+------------------------+-----------------------------------------------------------------------------------------------------------------------|
| value               | String        |                        | 输入框的内容                                                                                                          |
| placeholder         | String        |                        | 输入框为空时占位符                                                                                                    |
| placeholder-style   | String        |                        | 指定 placeholder 的样式                                                                                               |
| placeholder-class   | String        | textarea-placeholder   | 指定 placeholder 的样式类                                                                                             |
| disabled            | Boolean       | false                  | 是否禁用                                                                                                              |
| maxlength           | Number        | 140                    | 最大输入长度，设置为 -1 的时候不限制最大长度                                                                          |
| auto-focus          | Boolean       | false                  | 自动聚焦，拉起键盘。                                                                                                  |
| focus               | Boolean       | false                  | 获取焦点                                                                                                              |
| auto-height         | Boolean       | false                  | 是否自动增高，设置auto-height时，style.height不生效                                                                   |
| fixed               | Boolean       | false                  | 如果 textarea 是在一个=position:fixed=的区域，需要显示指定属性 fixed 为 true                                          |
| cursor-spacing      | Number        | 0                      | 指定光标与键盘的距离，单位 px 。取 textarea 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离    |
| bindfocus           | EventHandle   |                        | 输入框聚焦时触发，event.detail = {value: value}                                                                       |
| bindblur            | EventHandle   |                        | 输入框失去焦点时触发，event.detail = {value: value}                                                                   |
| bindlinechange      | EventHandle   |                        | 输入框行数变化时调用，event.detail = {height: 0, heightRpx: 0, lineCount: 0}                                          |
| bindinput           | EventHandle   |                        | 当键盘输入时，触发 input 事件，event.detail = {value: value}， *bindinput 处理函数的返回值并不会反映到 textarea 上*   |
| bindconfirm         | EventHandle   |                        | 点击完成时， 触发 confirm 事件，event.detail = {value: value}                                                         |

*示例代码：*\\

#+BEGIN_EXAMPLE
    <!--textarea.wxml-->
    <view class="section">
      <textarea bindblur="bindTextAreaBlur" auto-height placeholder="自动变高" />
    </view>
    <view class="section">
      <textarea placeholder="placeholder颜色是红色的" placeholder-style="color:red;"  />
    </view>
    <view class="section">
      <textarea placeholder="这是一个可以自动聚焦的textarea" auto-focus />
    </view>
    <view class="section">
      <textarea placeholder="这个只有在按钮点击的时候才聚焦" focus="{{focus}}" />
      <view class="btn-area">
        <button bindtap="bindButtonTap">使得输入框获取焦点</button>
      </view>
    </view><view class="section">
      <form bindsubmit="bindFormSubmit">    <textarea placeholder="form 中的 textarea" name="textarea"/>    <button form-type="submit"> 提交 </button>  </form></view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    //textarea.js
    Page({
      data: {
        height: 20,
        focus: false
      },
      bindButtonTap: function() {
        this.setData({
          focus: true
        })
      },
      bindTextAreaBlur: function(e) {
        console.log(e.detail.value)
      },  bindFormSubmit: function(e) {    console.log(e.detail.value.textarea)  }
    })
#+END_EXAMPLE

**** 
     :PROPERTIES:
     :CLASS: calibre12
     :END:

**** Bug & Tip\\
     :PROPERTIES:
     :CLASS: calibre12
     :END:

1. =bug=:
   微信版本=6.3.30=，=textarea=在列表渲染时，新增加的=textarea=在自动聚焦时的位置计算错误。
2. =tip=:=textarea=
   的=blur=事件会晚于页面上的=tap=事件，如果需要在=button=的点击事件获取=textarea=，可以使用=form=的=bindsubmit=。
3. =tip=:
   不建议在多行文本上对用户的输入进行修改，所以=textarea=的=bindinput=处理函数并不会将返回值反映到=textarea=上。
4. =tip=:=textarea=组件是由客户端创建的原生组件，它的层级是最高的。
5. =tip=: 请勿在=scroll-view=中使用=textarea=组件。
6. =tip=:=css=动画对=textarea=组件无效。

\\

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/1k7h1ug9.html]]

\\
\\
| [[../index_u33.html#article_57][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u13.html>>

| [[../article_59/index_u84.html][下一项]] |
[[../index_u33.html#article_58][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_57/index_u58.html][上一项]] |

--------------

** navigator
   :PROPERTIES:
   :CUSTOM_ID: index_u13.html#navigator
   :CLASS: calibre16
   :END:

--------------

页面链接。

| 属性名             | 类型     | 默认值            | 说明                                                           |
|--------------------+----------+-------------------+----------------------------------------------------------------|
| url                | String   |                   | 应用内的跳转链接                                               |
| open-type          | String   | navigate          | 跳转方式                                                       |
| delta              | Number   |                   | 当 open-type 为 'navigateBack' 时有效，表示回退的层数          |
| hover-class        | String   | navigator-hover   | 指定点击时的样式类，当=hover-class="none"=时，没有点击态效果   |
| hover-start-time   | Number   | 50                | 按住后多久出现点击态，单位毫秒                                 |
| hover-stay-time    | Number   | 600               | 手指松开后点击态保留时间，单位毫秒                             |

*open-type 有效值：*

| 值             | 说明                          | 最低版本                                                        |
|----------------+-------------------------------+-----------------------------------------------------------------|
| navigate       | 对应=wx.navigateTo=的功能     |                                                                 |
| redirect       | 对应=wx.redirectTo=的功能     |                                                                 |
| switchTab      | 对应=wx.switchTab=的功能      |                                                                 |
| reLaunch       | 对应=wx.reLaunch=的功能       | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| navigateBack   | 对应=wx.navigateBack=的功能   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

*注：=navigator-hover=默认为={background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}=,
=<navigator/>=的子节点背景色应为透明色*

**示例代码：*\\
*

#+BEGIN_EXAMPLE
    /** wxss **/
    /** 修改默认的navigator点击态 **/
    .navigator-hover {
        color:blue;
    }
    /** 自定义其他点击态样式类 **/
    .other-navigator-hover {
        color:red;
    }
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- sample.wxml -->
    <view class="btn-area">
      <navigator url="/page/navigate/navigate?title=navigate" hover-class="navigator-hover">跳转到新页面</navigator>
      <navigator url="../../redirect/redirect/redirect?title=redirect" open-type="redirect" hover-class="other-navigator-hover">在当前页打开</navigator>
      <navigator url="/page/index/index" open-type="switchTab" hover-class="other-navigator-hover">切换 Tab</navigator>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- navigator.wxml -->
    <view style="text-align:center"> {{title}} </view>
    <view> 点击左上角返回回到之前页面 </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    <!-- redirect.wxml -->
    <view style="text-align:center"> {{title}} </view>
    <view> 点击左上角返回回到上级页面 </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // redirect.js navigator.js
    Page({
      onLoad: function(options) {
        this.setData({
          title: options.title
        })
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-navigator.html]]

\\
\\
| [[../index_u33.html#article_58][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u84.html>>

| [[../article_60/index_u14.html][下一项]] |
[[../index_u33.html#article_59][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_58/index_u13.html][上一项]] |

--------------

** audio
   :PROPERTIES:
   :CUSTOM_ID: index_u84.html#audio
   :CLASS: calibre16
   :END:

--------------

音频。

| 属性名           | 类型          | 默认值     | 说明                                                                                  |
|------------------+---------------+------------+---------------------------------------------------------------------------------------|
| id               | String        |            | audio 组件的唯一标识符                                                                |
| src              | String        |            | 要播放音频的资源地址                                                                  |
| loop             | Boolean       | false      | 是否循环播放                                                                          |
| controls         | Boolean       | true       | 是否显示默认控件                                                                      |
| poster           | String        |            | 默认控件上的音频封面的图片资源地址，如果 controls 属性值为 false 则设置 poster 无效   |
| name             | String        | 未知音频   | 默认控件上的音频名字，如果 controls 属性值为 false 则设置 name 无效                   |
| author           | String        | 未知作者   | 默认控件上的作者名字，如果 controls 属性值为 false 则设置 author 无效                 |
| binderror        | EventHandle   |            | 当发生错误时触发 error 事件，detail = {errMsg: MediaError.code}                       |
| bindplay         | EventHandle   |            | 当开始/继续播放时触发play事件                                                         |
| bindpause        | EventHandle   |            | 当暂停播放时触发 pause 事件                                                           |
| bindtimeupdate   | EventHandle   |            | 当播放进度改变时触发 timeupdate 事件，detail = {currentTime, duration}                |
| bindended        | EventHandle   |            | 当播放到末尾时触发 ended 事件                                                         |

*MediaError.code*

| 返回错误码                     | 描述                 |
|--------------------------------+----------------------|
| MEDIA_ERR_ABORTED              | 获取资源被用户禁止   |
| MEDIA_ERR_NETWORD              | 网络错误             |
| MEDIA_ERR_DECODE               | 解码错误             |
| MEDIA_ERR_SRC_NOT_SUPPOERTED   | 不合适资源           |

*示例代码：*

#+BEGIN_EXAMPLE
    <!-- audio.wxml -->
    <audio poster="{{poster}}" name="{{name}}" author="{{author}}" src="{{src}}" id="myAudio" controls loop></audio>

    <button type="primary" bindtap="audioPlay">播放</button>
    <button type="primary" bindtap="audioPause">暂停</button>
    <button type="primary" bindtap="audio14">设置当前播放时间为14秒</button>
    <button type="primary" bindtap="audioStart">回到开头</button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // audio.js
    Page({
      onReady: function (e) {
        // 使用 wx.createAudioContext 获取 audio 上下文 context
        this.audioCtx = wx.createAudioContext('myAudio')
      },
      data: {
        poster: 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000',
        name: '此时此刻',
        author: '许巍',
        src: 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&fromtag=46',
      },
      audioPlay: function () {
        this.audioCtx.play()
      },
      audioPause: function () {
        this.audioCtx.pause()
      },
      audio14: function () {
        this.audioCtx.seek(14)
      },
      audioStart: function () {
        this.audioCtx.seek(0)
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]

相关api：[[file:weixinapp-api-audio.html][wx.createAudioContext]]

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-audio.html]]

\\
\\
| [[../index_u33.html#article_59][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u14.html>>

| [[../article_61/index_u89.html][下一项]] |
[[../index_u33.html#article_60][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_59/index_u84.html][上一项]] |

--------------

** 微信小程序image
   :PROPERTIES:
   :CUSTOM_ID: index_u14.html#image
   :CLASS: calibre16
   :END:

--------------

图片。

| 属性名      | 类型          | 默认值          | 说明                                                                                                            |
|-------------+---------------+-----------------+-----------------------------------------------------------------------------------------------------------------|
| src         | String        |                 | 图片资源地址                                                                                                    |
| mode        | String        | 'scaleToFill'   | 图片裁剪、缩放的模式                                                                                            |
| binderror   | HandleEvent   |                 | 当错误发生时，发布到AppService的事件名，事件对象event.detail = { errMsg: 'something wrong' }                    |
| bindload    | HandleEvent   |                 | 当图片载入完毕时，发布到AppService的事件名，事件对象event.detail = {height:'图片高度px', width:'图片宽度px'\\   |
|             |               |                 | }                                                                                                               |

*注：image组件默认宽度300px、高度225px*

*mode 有效值：*

mode有13种模式，其中4中是缩放模式，9种是裁剪模式。

| 模式   | 值             | 说明                                                                                                                         |
|--------+----------------+------------------------------------------------------------------------------------------------------------------------------|
| 缩放   | scaleToFill    | 不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素                                                                  |
| 缩放   | aspectFit      | 保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。                                         |
| 缩放   | aspectFill     | 保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。   |
| 缩放   | widthFix       | 宽度不变，高度自动变化，保持原图宽高比不变                                                                                   |
| 裁剪   | top            | 不缩放图片，只显示图片的顶部区域                                                                                             |
| 裁剪   | bottom         | 不缩放图片，只显示图片的底部区域                                                                                             |
| 裁剪   | center         | 不缩放图片，只显示图片的中间区域                                                                                             |
| 裁剪   | left           | 不缩放图片，只显示图片的左边区域                                                                                             |
| 裁剪   | right          | 不缩放图片，只显示图片的右边区域                                                                                             |
| 裁剪   | top left       | 不缩放图片，只显示图片的左上边区域                                                                                           |
| 裁剪   | top right      | 不缩放图片，只显示图片的右上边区域                                                                                           |
| 裁剪   | bottom left    | 不缩放图片，只显示图片的左下边区域                                                                                           |
| 裁剪   | bottom right   | 不缩放图片，只显示图片的右下边区域                                                                                           |

\\
*示例：*

#+BEGIN_EXAMPLE
    <view class="page">
      <view class="page__hd">
        <text class="page__title">image</text>
        <text class="page__desc">图片</text>
      </view>
      <view class="page__bd">
        <view class="section section_gap" wx:for="{{array}}" wx:for-item="item">
          <view class="section__title">{{item.text}}</view>
          <view class="section__ctn">
            <image style="width: 200px; height: 200px; background-color: #eeeeee;" mode="{{item.mode}}" src="{{src}}"></image>
          </view>
        </view>
      </view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        array: [{
          mode: 'scaleToFill',
          text: 'scaleToFill：不保持纵横比缩放图片，使图片完全适应'
        }, {
          mode: 'aspectFit',
          text: 'aspectFit：保持纵横比缩放图片，使图片的长边能完全显示出来'
        }, {
          mode: 'aspectFill',
          text: 'aspectFill：保持纵横比缩放图片，只保证图片的短边能完全显示出来'
        }, {
          mode: 'top',
          text: 'top：不缩放图片，只显示图片的顶部区域'
        }, {
          mode: 'bottom',
          text: 'bottom：不缩放图片，只显示图片的底部区域'
        }, {
          mode: 'center',
          text: 'center：不缩放图片，只显示图片的中间区域'
        }, {
          mode: 'left',
          text: 'left：不缩放图片，只显示图片的左边区域'
        }, {
          mode: 'right',
          text: 'right：不缩放图片，只显示图片的右边边区域'
        }, {
          mode: 'top left',
          text: 'top left：不缩放图片，只显示图片的左上边区域'
        }, {
          mode: 'top right',
          text: 'top right：不缩放图片，只显示图片的右上边区域'
        }, {
          mode: 'bottom left',
          text: 'bottom left：不缩放图片，只显示图片的左下边区域'
        }, {
          mode: 'bottom right',
          text: 'bottom right：不缩放图片，只显示图片的右下边区域'
        }],
        src: '../../resources/cat.jpg'
      },
      imageError: function(e) {
        console.log('image3发生error事件，携带值为', e.detail.errMsg)
      }
    })
#+END_EXAMPLE

原图

[[file:feed_0/article_60/images/img1_u1.jpg]]\\

*scaleToFill*

不保持纵横比缩放图片，使图片完全适应

[[file:feed_0/article_60/images/img2.png]]\\

*aspectFit*

保持纵横比缩放图片，使图片的长边能完全显示出来

[[file:feed_0/article_60/images/img3.png]]\\

*aspectFill*

保持纵横比缩放图片，只保证图片的短边能完全显示出来

[[file:feed_0/article_60/images/img4.png]]\\

*top*

不缩放图片，只显示图片的顶部区域

[[file:feed_0/article_60/images/img5.png]]\\

*bottom*

不缩放图片，只显示图片的底部区域

[[file:feed_0/article_60/images/img6.png]]\\

*center*

不缩放图片，只显示图片的中间区域

[[file:feed_0/article_60/images/img7.png]]\\

*left*

不缩放图片，只显示图片的左边区域

[[file:feed_0/article_60/images/img8.png]]\\

*right*

不缩放图片，只显示图片的右边边区域

[[file:feed_0/article_60/images/img9.png]]\\

*top left*

不缩放图片，只显示图片的左上边区域

[[file:feed_0/article_60/images/img10.png]]\\

*top right*

不缩放图片，只显示图片的右上边区域

[[file:feed_0/article_60/images/img11.png]]\\

*bottom left*

不缩放图片，只显示图片的左下边区域

[[file:feed_0/article_60/images/img12.png]]\\

*bottom right*

不缩放图片，只显示图片的右下边区域

[[file:feed_0/article_60/images/img13.png]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-image.html]]

\\
\\
| [[../index_u33.html#article_60][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u89.html>>

| [[../article_62/index_u4.html][下一项]] |
[[../index_u33.html#article_61][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_60/index_u14.html][上一项]] |

--------------

** video
   :PROPERTIES:
   :CUSTOM_ID: index_u89.html#video
   :CLASS: calibre16
   :END:

--------------

视频。

| 属性名                 | 类型           | 默认值    | 说明                                                                                                                    | 最低版本                                                        |
|------------------------+----------------+-----------+-------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| src                    | String         |           | 要播放视频的资源地址                                                                                                    |                                                                 |
| initial-time           | Number         |           | 指定视频初始播放位置                                                                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.0]]   |
| duration               | Number         |           | 指定视频时长                                                                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| controls               | Boolean        | true      | 是否显示默认播放控件（播放/暂停按钮、播放进度、时间）                                                                   |                                                                 |
| danmu-list             | Object Array   |           | 弹幕列表                                                                                                                |                                                                 |
| danmu-btn              | Boolean        | false     | 是否显示弹幕按钮，只在初始化时有效，不能动态变更                                                                        |                                                                 |
| enable-danmu           | Boolean        | false     | 是否展示弹幕，只在初始化时有效，不能动态变更                                                                            |                                                                 |
| autoplay               | Boolean        | false     | 是否自动播放                                                                                                            |                                                                 |
| loop                   | Boolean        | false     | 是否循环播放                                                                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| muted                  | Boolean        | false     | 是否静音播放                                                                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| page-gesture           | Boolean        | false     | 在非全屏模式下，是否开启亮度与音量调节手势                                                                              | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.0]]   |
| direction              | Number         |           | 设置全屏时视频的方向，不指定则根据宽高比自动判断。有效值为 0（正常竖向）, 90（屏幕逆时针90度）, -90（屏幕顺时针90度）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.7.0]]   |
| bindplay               | EventHandle    |           | 当开始/继续播放时触发play事件                                                                                           |                                                                 |
| bindpause              | EventHandle    |           | 当暂停播放时触发 pause 事件                                                                                             |                                                                 |
| bindended              | EventHandle    |           | 当播放到末尾时触发 ended 事件                                                                                           |                                                                 |
| bindtimeupdate         | EventHandle    |           | 播放进度变化时触发，event.detail = {currentTime, duration} 。触发频率 250ms 一次                                        |                                                                 |
| bindfullscreenchange   | EventHandle    |           | 当视频进入和退出全屏是触发，event.detail = {fullScreen, direction}，direction取为 vertical 或 horizontal                | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| objectFit              | String         | contain   | 当视频大小与 video 容器大小不一致时，视频的表现形式。contain：包含，fill：填充，cover：覆盖                             |                                                                 |
| poster                 | String         |           | 视频封面的图片网络资源地址，如果 controls 属性值为 false 则设置 poster 无效                                             | \\                                                              |

\\
video标签认宽度300px、高度225px，设置宽高需要通过wxss设置width和height。

*示例代码：*\\

#+BEGIN_EXAMPLE
    <view class="section tc">
      <video src="{{src}}"   controls ></video>
      <view class="btn-area">
        <button bindtap="bindButtonTap">获取视频</button>
      </view>
    </view>

    <view class="section tc">
      <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" danmu-list="{{danmuList}}" enable-danmu danmu-btn controls></video>
      <view class="btn-area">
        <button bindtap="bindButtonTap">获取视频</button>
        <input bindblur="bindInputBlur"/>
        <button bindtap="bindSendDanmu">发送弹幕</button>
      </view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    function getRandomColor () {
      let rgb = []
      for (let i = 0 ; i < 3; ++i){
        let color = Math.floor(Math.random() * 256).toString(16)
        color = color.length == 1 ? '0' + color : color
        rgb.push(color)
      }
      return '#' + rgb.join('')
    }

    Page({
      onReady: function (res) {
        this.videoContext = wx.createVideoContext('myVideo')
      },
      inputValue: '',
        data: {
            src: '',
        danmuList: [
          {
            text: '第 1s 出现的弹幕',
            color: '#ff0000',
            time: 1
          },
          {
            text: '第 3s 出现的弹幕',
            color: '#ff00ff',
            time: 3
        }]
        },
      bindInputBlur: function(e) {
        this.inputValue = e.detail.value
      },
      bindButtonTap: function() {
        var that = this
        wx.chooseVideo({
          sourceType: ['album', 'camera'],
          maxDuration: 60,
          camera: ['front','back'],
          success: function(res) {
            that.setData({
              src: res.tempFilePath
            })
          }
        })
      },
      bindSendDanmu: function () {
        this.videoContext.sendDanmu({
          text: this.inputValue,
          color: getRandomColor()
        })
      }
    })
#+END_EXAMPLE

[[file:feed_0/article_1/images/img1_u2.png]]

相关api：[[file:weixinapp-api-video.html][wx.createVideoContext]]

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=:=video=组件是由客户端创建的原生组件，它的层级是最高的。
2. =tip=: 请勿在=scroll-view=中使用=video=组件。
3. =tip=:=css=动画对=video=组件无效。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-video.html]]

\\
\\
| [[../index_u33.html#article_61][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u4.html>>

| [[../article_63/index.html][下一项]] |
[[../index_u33.html#article_62][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_61/index_u89.html][上一项]] |

--------------

** camera
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_QUOTE
  基础库 1.6.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

系统相机。

需要用户授权 scope.camera

| 属性名            | 类型          | 默认值   | 说明                                         |
|-------------------+---------------+----------+----------------------------------------------|
| device-position   | String        | back     | 前置或后置，值为front, back                  |
| flash             | String        | auto     | 闪光灯，值为auto, on, off                    |
| bindstop          | EventHandle   |          | 摄像头在非正常终止时触发，如退出后台等情况   |
| binderror         | EventHandle   |          | 用户不允许使用摄像头时触发                   |

相关api：[[http://caibaojian.com/weixinapp/weixinapp-c2u72j31.html][wx.createCameraContext]]

***** Bug & Tip
      :PROPERTIES:
      :CLASS: calibre54
      :END:

1. tip: camera 组件是由客户端创建的原生组件，它的层级是最高的，不能通过
   z-index 控制层级。可使用 cover-view cover-image覆盖在上面。
2. tip: 同一页面只能插入一个 camera 组件。
3. tip:
   请勿在 scroll-view、swiper、picker-view、movable-view 中使用 camera 组件。

示例：

#+BEGIN_EXAMPLE
    <!-- camera.wxml -->
    <camera device-position="back" flash="off" binderror="error" style="width: 100%; height: 300px;"></camera>
    <button type="primary" bindtap="takePhoto">拍照</button>
    <view>预览</view>
    <image mode="widthFix" src="{{src}}"></image>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // camera.js
    Page({
        takePhoto() {
            const ctx = wx.createCameraContext()
            ctx.takePhoto({
                quality: 'high',
                success: (res) => {
                    this.setData({
                        src: res.tempImagePath
                    })
                }
            })
        },
        error(e) {
            console.log(e.detail)
        }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-fxj12j2z.html]]

\\
\\
| [[../index_u33.html#article_62][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index.html>>

| [[../article_64/index_u76.html][下一项]] |
[[../index_u33.html#article_63][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_62/index_u4.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

微信小程序map

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

地图。

| 属性名             | 类型          | 默认值   | 说明                             | 最低版本                                                        |
|--------------------+---------------+----------+----------------------------------+-----------------------------------------------------------------|
| longitude          | Number        |          | 中心经度                         |                                                                 |
| latitude           | Number        |          | 中心纬度                         |                                                                 |
| scale              | Number        | 16       | 缩放级别，取值范围为5-18         |                                                                 |
| markers            | Array         |          | 标记点                           |                                                                 |
| covers             | Array         |          | *即将移除，请使用 markers*       |                                                                 |
| polyline           | Array         |          | 路线                             |                                                                 |
| circles            | Array         |          | 圆                               |                                                                 |
| controls           | Array         |          | 控件                             |                                                                 |
| include-points     | Array         |          | 缩放视野以包含所有给定的坐标点   |                                                                 |
| show-location      | Boolean       |          | 显示带有方向的当前定位点         |                                                                 |
| bindmarkertap      | EventHandle   |          | 点击标记点时触发                 |                                                                 |
| bindcallouttap     | EventHandle   |          | 点击标记点对应的气泡时触发       | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| bindcontroltap     | EventHandle   |          | 点击控件时触发                   |                                                                 |
| bindregionchange   | EventHandle   |          | 视野发生变化时触发               |                                                                 |
| bindtap            | EventHandle   |          | 点击地图时触发                   |                                                                 |

*注意: covers 属性即将移除，请使用 markers 替代*\\
** markers
   :PROPERTIES:
   :CLASS: calibre16
   :END:

标记点用于在地图上显示标记的位置

| 属性        | 说明                                   | 类型     | 必填   | 备注                                                                                      | 最低版本                                                        |
|-------------+----------------------------------------+----------+--------+-------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| id          | 标记点id                               | Number   | 否     | marker点击事件回调会返回此id                                                              |                                                                 |
| latitude    | 纬度                                   | Number   | 是     | 浮点数，范围 -90 ~ 90                                                                     |                                                                 |
| longitude   | 经度                                   | Number   | 是     | 浮点数，范围 -180 ~ 180                                                                   |                                                                 |
| title       | 标注点名                               | String   | 否     |                                                                                           |                                                                 |
| iconPath    | 显示的图标                             | String   | 是     | 项目目录下的图片路径，支持相对路径写法，以'/'开头则表示相对小程序根目录；也支持临时路径   |                                                                 |
| rotate      | 旋转角度                               | Number   | 否     | 顺时针旋转的角度，范围 0 ~ 360，默认为 0                                                  |                                                                 |
| alpha       | 标注的透明度                           | Number   | 否     | 默认1，无透明                                                                             |                                                                 |
| width       | 标注图标宽度                           | Number   | 否     | 默认为图片实际宽度                                                                        |                                                                 |
| height      | 标注图标高度                           | Number   | 否     | 默认为图片实际高度                                                                        |                                                                 |
| callout     | 自定义标记点上方的气泡窗口             | Object   | 否     | {content, color, fontSize, borderRadius, bgColor, padding, boxShadow, display}            | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| label       | 为标记点旁边增加标签                   | Object   | 否     | {color, fontSize, content, x, y}，可识别换行符，x,y原点是marker对应的经纬度               | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| anchor      | 经纬度在标注图标的锚点，默认底边中点   | Object   | 否     | {x, y}，x表示横向(0-1)，y表示竖向(0-1)。{x: .5, y: 1} 表示底边中点                        | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*marker 上的气泡 callout*

| 属性           | 说明                                | 类型     |
|----------------+-------------------------------------+----------|
| content        | 文本                                | String   |
| color          | 文本颜色                            | String   |
| fontSize       | 文字大小                            | Number   |
| borderRadius   | callout边框圆角                     | Number   |
| bgColor        | 背景色                              | String   |
| padding        | 文本边缘留白                        | Number   |
| display        | 'BYCLICK':点击显示; 'ALWAYS':常显   | String   |

*polyline*

指定一系列坐标点，从数组第一项连线至最后一项

| 属性          | 说明           | 类型      | 必填   | 备注                                                | 最低版本                                                        |
|---------------+----------------+-----------+--------+-----------------------------------------------------+-----------------------------------------------------------------|
| points        | 经纬度数组     | Array     | 是     | [{latitude: 0, longitude: 0}]                       |                                                                 |
| color         | 线的颜色       | String    | 否     | 8位十六进制表示，后两位表示alpha值，如：#000000AA   |                                                                 |
| width         | 线的宽度       | Number    | 否     |                                                     |                                                                 |
| dottedLine    | 是否虚线       | Boolean   | 否     | 默认false                                           |                                                                 |
| arrowLine     | 带箭头的线     | Boolean   | 否     | 默认false，开发者工具暂不支持该属性                 | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| borderColor   | 线的边框颜色   | String    | 否     |                                                     | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| borderWidth   | 线的厚度       | Number    | 否     |                                                     | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*circles*

在地图上显示圆

| 属性          | 说明         | 类型     | 必填   | 备注                                                |
|---------------+--------------+----------+--------+-----------------------------------------------------|
| latitude      | 纬度         | Number   | 是     | 浮点数，范围 -90 ~ 90                               |
| longitude     | 经度         | Number   | 是     | 浮点数，范围 -180 ~ 180                             |
| color         | 描边的颜色   | String   | 否     | 8位十六进制表示，后两位表示alpha值，如：#000000AA   |
| fillColor     | 填充颜色     | String   | 否     | 8位十六进制表示，后两位表示alpha值，如：#000000AA   |
| radius        | 半径         | Number   | 是     |                                                     |
| strokeWidth   | 描边的宽度   | Number   | 否     |                                                     |

*controls*

在地图上显示控件，控件不随着地图移动

| 属性        | 说明               | 类型      | 必填   | 备注                                                                                      |
|-------------+--------------------+-----------+--------+-------------------------------------------------------------------------------------------|
| id          | 控件id             | Number    | 否     | 在控件点击事件回调会返回此id                                                              |
| position    | 控件在地图的位置   | Object    | 是     | 控件相对地图位置                                                                          |
| iconPath    | 显示的图标         | String    | 是     | 项目目录下的图片路径，支持相对路径写法，以'/'开头则表示相对小程序根目录；也支持临时路径   |
| clickable   | 是否可点击         | Boolean   | 否     | 默认不可点击                                                                              |

*position*

| 属性     | 说明                   | 类型     | 必填   | 备注             |
|----------+------------------------+----------+--------+------------------|
| left     | 距离地图的左边界多远   | Number   | 否     | 默认为0          |
| top      | 距离地图的上边界多远   | Number   | 否     | 默认为0          |
| width    | 控件宽度               | Number   | 否     | 默认为图片宽度   |
| height   | 控件高度               | Number   | 否     | 默认为图片高度   |

\\
地图组件的经纬度必填, 如果不填经纬度则默认值是北京的经纬度。
*示例：*

#+BEGIN_EXAMPLE
    <!-- map.wxml -->
    <map id="map" longitude="113.324520" latitude="23.099994" scale="14" controls="{{controls}}" bindcontroltap="controltap" markers="{{markers}}" bindmarkertap="markertap" polyline="{{polyline}}" bindregionchange="regionchange" show-location style="width: 100%; height: 300px;"></map>
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

#+BEGIN_EXAMPLE
    // map.js
    Page({
      data: {
        markers: [{
          iconPath: "/resources/others.png",
          id: 0,
          latitude: 23.099994,
          longitude: 113.324520,
          width: 50,
          height: 50
        }],
        polyline: [{
          points: [{
            longitude: 113.3245211,
            latitude: 23.10229
          }, {
            longitude: 113.324520,
            latitude: 23.21229
          }],
          color:"#FF0000DD",
          width: 2,
          dottedLine: true
        }],
        controls: [{
          id: 1,
          iconPath: '/resources/location.png',
          position: {
            left: 0,
            top: 300 - 50,
            width: 50,
            height: 50
          },
          clickable: true
        }]
      },
      regionchange(e) {
        console.log(e.type)
      },
      markertap(e) {
        console.log(e.markerId)
      },
      controltap(e) {
        console.log(e.controlId)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  </h2>
#+END_HTML

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=:=map=组件是由客户端创建的原生组件，它的层级是最高的。
2. =tip=: 请勿在=scroll-view=中使用=map=组件。
3. =tip=:=css=动画对=map=组件无效。
4. =tip=:=map=组件使用的经纬度是火星坐标系，调用=wx.getLocation=接口需要指定=type=为=gcj02=

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-map.html]]

\\
\\
| [[../index_u33.html#article_63][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u76.html>>

| [[../article_65/index_u91.html][下一项]] |
[[../index_u33.html#article_64][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_63/index.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 id="canvas" class="calibre16">
#+END_HTML

canvas

--------------

画布。

#+BEGIN_HTML
  </h2>
#+END_HTML

| 属性名            | 类型          | 默认值   | 说明                                                                  |
|-------------------+---------------+----------+-----------------------------------------------------------------------|
| canvas-id         | String        |          | canvas 组件的唯一标识符                                               |
| disable-scroll    | Boolean       | false    | 当在 canvas 中移动时且有绑定手势事件时，禁止屏幕滚动以及下拉刷新      |
| bindtouchstart    | EventHandle   |          | 手指触摸动作开始                                                      |
| bindtouchmove     | EventHandle   |          | 手指触摸后移动                                                        |
| bindtouchend      | EventHandle   |          | 手指触摸动作结束                                                      |
| bindtouchcancel   | EventHandle   |          | 手指触摸动作被打断，如来电提醒，弹窗                                  |
| bindlongtap       | EventHandle   |          | 手指长按 500ms 之后触发，触发了长按事件后进行移动不会触发屏幕的滚动   |
| binderror         | EventHandle   |          | 当发生错误时触发 error 事件，detail = {errMsg: 'something wrong'}     |

*注：*

1. *canvas标签默认宽度300px、高度225px*

2. *同一页面中的canvas-id不可重复，如果使用一个已经出现过的canvas-id，该canvas标签对应的画布将被隐藏并不再正常工作*

*示例代码：*

#+BEGIN_EXAMPLE
    <!-- canvas.wxml -->
    <canvas style="width: 300px; height: 200px;" canvas-id="firstCanvas"></canvas>
    <!-- 当使用绝对定位时，文档流后边的canvas的显示层级高于前边的canvas-->
    <canvas style="width: 400px; height: 500px;" canvas-id="secondCanvas"></canvas>
    <!-- 因为canvas-id与前一个canvas重复，该canvas不会显示，并会发送一个错误事件到AppService -->
    <canvas style="width: 400px; height: 500px;" canvas-id="secondCanvas" binderror="canvasIdErrorCallback"></canvas>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // canvas.js
    Page({
      canvasIdErrorCallback: function (e) {
        console.error(e.detail.errMsg)
      },
      onReady: function (e) {
        //使用wx.createContext获取绘图上下文context
        var context = wx.createCanvasContext('firstCanvas')

        context.setStrokeStyle("#00ff00")
        context.setLineWidth(5)
        context.rect(0,0,200,200)
        context.stroke()
        context.setStrokeStyle ("#ff0000")
        context.setLineWidth(2)
        context.moveTo(160,100)
        context.arc(100,100,60,0,2*Math.PI,true)
        context.moveTo(140,100)
        context.arc(100,100,40,0,Math.PI,false)
        context.moveTo(85,80)
        context.arc(80,80,5,0,2*Math.PI,true)
        context.moveTo(125,80)
        context.arc(120,80,5,0,2*Math.PI,true)
        context.stroke()
        context.draw()
      }
    })
#+END_EXAMPLE

相关api：[[http://caibaojian.com/weixinapp/weixinapp-api-canvas-context.html][wx.createCanvasContext]]

\\

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=:=canvas=组件是由客户端创建的原生组件，它的层级是最高的。
2. =tip=: 请勿在=scroll-view=中使用=canvas=组件。
3. =tip=:=css=动画对=canvas=组件无效。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-canvas.html]]

\\
\\
| [[../index_u33.html#article_64][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u91.html>>

| [[../article_66/index_u57.html][下一项]] |
[[../index_u33.html#article_65][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_64/index_u76.html][上一项]] |

--------------

** open-data
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

用于展示微信开放的数据。

| 属性名     | 类型     | 默认值   | 说明                               |
|------------+----------+----------+------------------------------------|
| type       | String   |          | 开放数据类型                       |
| open-gid   | String   |          | 当 type="groupName" 时生效, 群id   |

*type 有效值：*

| 值          | 说明         | 最低版本                                                        |
|-------------+--------------+-----------------------------------------------------------------|
| groupName   | 拉取群名称   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*Tips:* 只有当前用户在此群内才能拉取到群名称

#+BEGIN_EXAMPLE
    <open-data type="groupName" open-gid="xxxxxx"></open-data>
#+END_EXAMPLE

*Tips:* 关于open-gid的获取请查看
[[http://caibaojian.com/weixinapp/weixinapp-api-share.html#wxgetshareinfoobject][转发]]

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-open-data.html]]

\\
\\
| [[../index_u33.html#article_65][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u57.html>>

| [[../article_67/index_u45.html][下一项]] |
[[../index_u33.html#article_66][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_65/index_u91.html][上一项]] |

--------------

** web-view
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.6.4
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

web-view
组件是一个可以用来承载网页的容器，会自动铺满整个小程序页面。个人类型与海外类型的小程序暂不支持使用。

| 属性名   | 类型     | 默认值   | 说明                                                                                          |
|----------+----------+----------+-----------------------------------------------------------------------------------------------|
| src      | String   | none     | webview 指向网页的链接。需登录[[https://mp.weixin.qq.com/][小程序管理后台]]配置域名白名单。   |

示例代码：

#+BEGIN_EXAMPLE
    <!-- wxml -->
    <!-- 指向微信公众平台首页的web-view -->
    <web-view src="https://mp.weixin.qq.com/"></web-view>
#+END_EXAMPLE

*** 相关接口 1
    :PROPERTIES:
    :CLASS: calibre11
    :END:

<web-view/>网页中可使用[[https://res.wx.qq.com/open/js/jweixin-1.3.0.js][JSSDK
1.3.0]]提供的接口返回小程序页面。 支持的接口有：

| 接口名                        | 说明                   | 最低版本                                                        |
|-------------------------------+------------------------+-----------------------------------------------------------------|
| wx.miniProgram.navigateTo     | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.4]]   |
| wx.miniProgram.navigateBack   | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.4]]   |
| wx.miniProgram.switchTab      | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.5]]   |
| wx.miniProgram.reLaunch       | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.5]]   |
| wx.miniProgram.redirectTo     | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.5]]   |

示例代码：

#+BEGIN_EXAMPLE
    <!-- html -->
    <script type="text/javascript" src="https://res.wx.qq.com/open/js/jweixin-1.3.0.js"></script>

    // javascript
    wx.miniProgram.navigateTo({url: '/path/to/page'})
#+END_EXAMPLE

*** 相关接口 2
    :PROPERTIES:
    :CLASS: calibre11
    :END:

<web-view/>网页中仅支持以下JSSDK接口：

| 接口模块               | 接口说明             | 具体接口             |
|------------------------+----------------------+----------------------|
| 判断客户端是否支持js   |                      | checkJSApi           |
| 图像接口               | 拍照或上传           | chooseImage          |
|                        | 预览图片             | previewImage         |
|                        | 上传图片             | uploadImage          |
|                        | 下载图片             | downloadImage        |
|                        | 获取本地图片         | getLocalImgData      |
| 音频接口               | 开始录音             | startRecord          |
|                        | 停止录音             | stopRecord           |
|                        | 监听录音自动停止     | onVoiceRecordEnd     |
|                        | 播放语音             | playVoice            |
|                        | 暂停播放             | pauseVoice           |
|                        | 停止播放             | stopVoice            |
|                        | 监听语音播放完毕     | onVoicePlayEnd       |
|                        | 上传接口             | uploadVoice          |
|                        | 下载接口             | downloadVoice        |
| 智能接口               | 识别音频             | translateVoice       |
| 设备信息               | 获取网络状态         | getNetworkType       |
| 地理位置               | 使用内置地图         | getLocation          |
|                        | 获取地理位置         | openLocation         |
| 摇一摇周边             | 开启ibeacon          | startSearchBeacons   |
|                        | 关闭ibeacon          | stopSearchBeacons    |
|                        | 监听ibeacon          | onSearchBeacons      |
| 微信扫一扫             | 调起微信扫一扫       | scanQRCode           |
| 微信卡券               | 拉取使用卡券列表     | chooseCard           |
|                        | 批量添加卡券接口     | addCard              |
|                        | 查看微信卡包的卡券   | openCard             |
| 长按识别               | 小程序圆形码         | 无                   |

***** 相关接口 3
      :PROPERTIES:
      :CLASS: calibre54
      :END:

用户分享时可获取当前<web-view/>的URL，即在onShareAppMessage回调中返回webViewUrl参数。

示例代码：

#+BEGIN_EXAMPLE
    Page({
      onShareAppMessage(options) {
        console.log(options.webViewUrl)
      }
    })
#+END_EXAMPLE

***** 相关接口 4
      :PROPERTIES:
      :CLASS: calibre54
      :END:

在网页内可通过window.__wxjs_environment变量判断是否在小程序环境。

示例代码：

#+BEGIN_EXAMPLE
    // web-view下的页面内
    wx.ready(function() {
        console.log(window.__wxjs_environment === 'miniprogram') // true
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. 网页内iframe的域名也需要配置到域名白名单。
2. 开发者工具上，可以在 <web-view/> 组件上通过右键 -
   调试，打开 <web-view/> 组件的调试。
3. 每个页面只能有一个<web-view/>，<web-view/>会自动铺满整个页面，并覆盖其他组件。
4. <web-view/>网页与小程序之间不支持除JSSDK提供的接口之外的通信。
5. 在iOS中，若存在JSSDK接口调用无响应的情况，可在<web-view/>的src后面加个#wechat_redirect解决。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-czb82j95.html]]

\\
\\
| [[../index_u33.html#article_66][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u45.html>>

| [[../article_68/index_u25.html][下一项]] |
[[../index_u33.html#article_67][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_66/index_u57.html][上一项]] |

--------------

** contact-button
   :PROPERTIES:
   :CUSTOM_ID: index_u45.html#contact-button
   :CLASS: calibre16
   :END:

--------------

客服会话按钮，用于在页面上显示一个客服会话按钮，用户点击该按钮后会进入客服会话。

| 属性名         | 类型     | 默认值         | 说明                                                                                                 |
|----------------+----------+----------------+------------------------------------------------------------------------------------------------------|
| size           | Number   | 18             | 会话按钮大小，有效值 18-27，单位：px                                                                 |
| type           | String   | default-dark   | 会话按钮的样式类型                                                                                   |
| session-from   | String   |                | 用户从该按钮进入会话时，开发者将收到带上本参数的事件推送。本参数可用于区分用户进入客服会话的来源。   |

*type 有效值：*

| 值              | 说明   |
|-----------------+--------|
| default-dark    |        |
| default-light   |        |

\\
*示例代码*

#+BEGIN_EXAMPLE
    <contact-button 
      type="default-light" 
      size="20"
      session-from="weapp"
    >
    </contact-button>
#+END_EXAMPLE

相关api：[[http://caibaojian.com/weixinapp/weixinapp-api-custommsg-receive.html][详见客服消息接口文档]]

相关组件：[[http://caibaojian.com/weixinapp/9w841q8w.html][button]]
组件通过设置 open-type="contact" 亦可进入客服会话\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-component-contactbutton.html]]

\\
\\
| [[../index_u33.html#article_67][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u25.html>>

| [[../article_69/index_u68.html][下一项]] |
[[../index_u33.html#article_68][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_67/index_u45.html][上一项]] |

--------------

* API
  :PROPERTIES:
  :CUSTOM_ID: index_u25.html#api
  :CLASS: calibre44
  :END:

框架提供丰富的微信原生API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。

*说明：*

- wx.on开头的API是监听某个事件发生的API接口，接受一个CALLBACK函数作为参数。当该事件触发时，会调用CALLBACK函数。
- 如未特殊约定，其他API接口都接受一个OBJECT作为参数。
- OBJECT中可以指定success,fail,complete来接收接口调用结果。

| 参数名     | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*API列表：*

*网络API列表：*

| API                                                                                      | 说明                |
|------------------------------------------------------------------------------------------+---------------------|
| [[file:weixinapp-network-request.html][wx.request]]                                      | 发起网络请求        |
| [[file:4g8s1q9c.html][wx.uploadFile]]                                                    | 上传文件            |
| [[file:4g8s1q9c.html#wxdownloadfileobject][wx.downloadFile]]                             | 下载文件            |
| [[file:weixinapp-network-socket.html#wxconnectsocketobject][wx.connectSocket]]           | 创建WebSocket连接   |
| [[file:weixinapp-network-socket.html#wxonsocketopencallback][wx.onSocketOpen]]           | 监听WebSocket打开   |
| [[file:weixinapp-network-socket.html#wxonsocketerrorcallback][wx.onSocketError]]         | 监听WebSocket错误   |
| [[file:weixinapp-network-socket.html#wxsendsocketmessageobject][wx.sendSocketMessage]]   | 发送WebSocket消息   |
| [[file:weixinapp-network-socket.html#wxonsocketmessagecallback][wx.onSocketMessage]]     | 接受WebSocket消息   |
| [[file:weixinapp-network-socket.html#wxclosesocket][wx.closeSocket]]                     | 关闭WebSocket连接   |
| [[file:weixinapp-network-socket.html#wxonsocketclosecallback][wx.onSocketClose]]         | 监听WebSocket关闭   |

*媒体API列表：*

| API                                                                                                                      | 说明                       |
|--------------------------------------------------------------------------------------------------------------------------+----------------------------|
| [[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]                                                | 从相册选择图片，或者拍照   |
| [[file:weixinapp-media-picture.html#wxpreviewimageobject][wx.previewImage]]                                              | 预览图片                   |
| [[file:weixinapp-media-record.html#wxstartrecordobject][wx.startRecord]]                                                 | 开始录音                   |
| [[file:weixinapp-media-record.html#wxstoprecord][wx.stopRecord]]                                                         | 结束录音                   |
| [[file:weixinapp-media-voice.html#wxplayvoice][wx.playVoice]]                                                            | 播放语音                   |
| [[file:weixinapp-media-voice.html#wxpausevoice][wx.pauseVoice]]                                                          | 暂停播放语音               |
| [[file:weixinapp-media-voice.html#wxstopvoice][wx.stopVoice]]                                                            | 结束播放语音               |
| [[file:weixinapp-media-background-audio.html#wxgetbackgroundaudioplayerstateobject][wx.getBackgroundAudioPlayerState]]   | 获取音乐播放状态           |
| [[file:weixinapp-media-background-audio.html#wxplaybackgroundaudioobject][wx.playBackgroundAudio]]                       | 播放音乐                   |
| [[file:weixinapp-media-background-audio.html#wxpausebackgroundaudio][wx.pauseBackgroundAudio]]                           | 暂停播放音乐               |
| [[file:weixinapp-media-background-audio.html#wxseekbackgroundaudioobject][wx.seekBackgroundAudio]]                       | 控制音乐播放进度           |
| [[file:weixinapp-media-background-audio.html#wxstopbackgroundaudio][wx.stopBackgroundAudio]]                             | 停止播放音乐               |
| [[file:weixinapp-media-background-audio.html#wxonbackgroundaudioplaycallback][wx.onBackgroundAudioPlay]]                 | 监听音乐开始播放           |
| [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiopausecallback][wx.onBackgroundAudioPause]]               | 监听音乐暂停               |
| [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiostopcallback][wx.onBackgroundAudioStop]]                 | 监听音乐结束               |
| [[file:weixinapp-media-video.html][wx.chooseVideo]]                                                                      | 从相册选择视频，或者拍摄   |

*文件 API 列表：*

| API                                                                                                     | 说明                   |
|---------------------------------------------------------------------------------------------------------+------------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]                                    | 保存文件               |
| [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfilelistobject][wx.getSavedFileList]]   | 获取已保存的文件列表   |
| [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfileinfoobject][wx.getSavedFileInfo]]   | 获取已保存的文件信息   |
| [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxremovesavedfileobject][wx.removeSavedFile]]     | 删除已保存的文件信息   |
| [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxopendocumentobject][wx.openDocument]]           | 打开文件               |

*数据 API 列表：*

| API                                                                                                       | 说明                     |
|-----------------------------------------------------------------------------------------------------------+--------------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageobject][wx.getStorage]]              | 获取本地数据缓存         |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstoragesynckey][wx.getStorageSync]]         | 获取本地数据缓存         |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstorageobject][wx.setStorage]]              | 设置本地数据缓存         |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstoragesynckeydata][wx.setStorageSync]]     | 设置本地数据缓存         |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfoobject][wx.getStorageInfo]]      | 获取本地缓存的相关信息   |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfosync][wx.getStorageInfoSync]]    | 获取本地缓存的相关信息   |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestorageobject][wx.removeStorage]]        | 删除本地缓存内容         |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestoragesynckey][wx.removeStorageSync]]   | 删除本地缓存内容         |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstorage][wx.clearStorage]]                | 清理本地数据缓存         |
| [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstoragesync][wx.clearStorageSync]]        | 清理本地数据缓存         |

*位置 API 列表：*

| API                                                                                                     | 说明               |
|---------------------------------------------------------------------------------------------------------+--------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-location.html][wx.getLocation]]                             | 获取当前位置       |
| [[http://caibaojian.com/weixinapp/weixinapp-location.html#wxchooselocationobject][wx.chooseLocation]]   | 打开地图选择位置   |
| [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][wx.openLocation]]                        | 打开内置地图       |
| [[http://caibaojian.com/weixinapp/weixinapp-api-map.html][wx.createMapContext]]                         | 地图组件控制       |

*设备 API 列表：*

| API                                                                                                                       | 说明                 |
|---------------------------------------------------------------------------------------------------------------------------+----------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-api-device.html][wx.getNetworkType]]                                          | 获取网络类型         |
| [[http://caibaojian.com/weixinapp/weixinapp-api-device.html#wxonnetworkstatuschangecallback][wx.onNetworkStatusChange]]   | 监听网络状态变化     |
| [[http://caibaojian.com/weixinapp/weixinapp-device.html][wx.getSystemInfo]]                                               | 获取系统信息         |
| [[http://caibaojian.com/weixinapp/weixinapp-device.html#wxgetsysteminfosync][wx.getSystemInfoSync]]                       | 获取系统信息         |
| [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html][wx.onAccelerometerChange]]                            | 监听加速度数据       |
| [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstartaccelerometerobject][wx.startAccelerometer]]    | 开始监听加速度数据   |
| [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstopaccelerometerobject][wx.stopAccelerometer]]      | 停止监听加速度数据   |
| [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html][wx.onCompassChange]]                                        | 监听罗盘数据         |
| [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstartcompassobject][wx.startCompass]]                      | 开始监听罗盘数据     |
| [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstopcompassobject][wx.stopCompass]]                        | 停止监听罗盘数据     |
| [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html][wx.setClipboardData]]                                         | 设置剪贴板内容       |
| [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html#wxgetclipboarddataobject][wx.getClipboardData]]                | 获取剪贴板内容       |
| [[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html][wx.makePhoneCall]]                                        | 拨打电话             |
| [[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html][wx.scanCode]]                                              | 扫码                 |

*界面 API 列表：*

| API                                                                                                             | 说明                 |
|-----------------------------------------------------------------------------------------------------------------+----------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-react.html][wx.showToast]]                                          | 显示提示框           |
| [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowloadingobject][wx.showLoading]]                    | 显示加载提示框       |
| [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxhidetoast][wx.hideToast]]                              | 隐藏提示框           |
| [[http://caibaojian.com/weixinapp/weixinapp-react.html#loentarget][wx.hideLoading]]                             | 隐藏提示框           |
| [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowmodalobject][wx.showModal]]                        | 显示模态弹窗         |
| [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowactionsheetobject][wx.showActionSheet]]            | 显示菜单列表         |
| [[http://caibaojian.com/weixinapp/weixinapp-ui.html][wx.setNavigationBarTitle]]                                 | 设置当前页面标题     |
| [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxshownavigationbarloading][wx.showNavigationBarLoading]]   | 显示导航条加载动画   |
| [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxhidenavigationbarloading][wx.hideNavigationBarLoading]]   | 隐藏导航条加载动画   |
| [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html][wx.navigateTo]]                                   | 新窗口打开页面       |
| [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxredirecttoobject][wx.redirectTo]]                | 原窗口打开页面       |
| [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxswitchtabobject][wx.switchTab]]                  | 切换到 tabbar 页面   |
| [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigateback][wx.navigateBack]]                  | 退回上一个页面       |
| [[http://caibaojian.com/weixinapp/tcga1qcz.html][wx.createAnimation]]                                           | 动画                 |
| [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-context.html][wx.createCanvasContext]]                   | 创建绘图上下文       |
| [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-drawcanvas.html][wx.drawCanvas]]                         | 绘图                 |
| [[http://caibaojian.com/weixinapp/weixinapp-api-pulldown.html#wxstoppulldownrefresh][wx.stopPullDownRefresh]]   | 停止下拉刷新动画     |

*WXML节点信息 API 列表：*

| API                                                                                                                                  | 说明                     |
|--------------------------------------------------------------------------------------------------------------------------------------+--------------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html][wx.createSelectorQuery]]                                           | 创建查询请求             |
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectselector][selectorQuery.select]]                 | 根据选择器选择单个节点   |
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectallselector][selectorQuery.selectAll]]           | 根据选择器选择全部节点   |
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectviewport][selectorQuery.selectViewport]]         | 选择显示区域             |
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefboundingclientrectcallback][nodesRef.boundingClientRect]]   | 获取布局位置和尺寸       |
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefscrolloffsetcallback][nodesRef.scrollOffset]]               | 获取滚动位置             |
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesreffieldsfieldscallback][nodesRef.fields]]                     | 获取任意字段             |
| [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryexeccallback][selectorQuery.exec]]                     | 执行查询请求             |

*开放接口：*

| API                                                                                     | 说明               |
|-----------------------------------------------------------------------------------------+--------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-api-login.html][wx.login]]                  | 登录               |
| [[http://caibaojian.com/weixinapp/weixinapp-open.html][wx.getUserInfo]]                 | 获取用户信息       |
| [[http://caibaojian.com/weixinapp/weixinapp-address.html][wx.chooseAddress]]            | 获取用户收货地址   |
| [[http://caibaojian.com/weixinapp/uvq81qdh.html][wx.requestPayment]]                    | 发起微信支付       |
| [[http://caibaojian.com/weixinapp/weixinapp-card.html][wx.addCard]]                     | 添加卡券           |
| [[http://caibaojian.com/weixinapp/weixinapp-card.html#wxopencardobject][wx.openCard]]   | 打开卡券           |

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/hpm41q8p.html]]

\\
\\
| [[../index_u33.html#article_68][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u68.html>>

| [[../article_70/index_u11.html][下一项]] |
[[../index_u33.html#article_69][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_68/index_u25.html][上一项]] |

--------------

每个微信小程序需要事先设置一个通讯域名，小程序可以跟指定的域名与进行网络通信。包括普通
HTTPS 请求（wx.request）、 WebSocket
通信（wx.connectSocket）、上传文件（wx.uploadFile）和下载文件（wx.downloadFile)。

*网络API列表：*

| API                                                                                                                 | 说明                  |
|---------------------------------------------------------------------------------------------------------------------+-----------------------|
| [[http://caibaojian.com/weixinapp/weixinapp-network-request.html][wx.request]]                                      | 发起网络请求          |
| [[http://caibaojian.com/weixinapp/4g8s1q9c.html][wx.uploadFile]]                                                    | 上传文件              |
| [[http://caibaojian.com/weixinapp/4g8s1q9c.html#wxdownloadfileobject][wx.downloadFile]]                             | 下载文件              |
| [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html][wx.connectSocket]]                                 | 创建 WebSocket 连接   |
| [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketopencallback][wx.onSocketOpen]]           | 监听 WebSocket 打开   |
| [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketerrorcallback][wx.onSocketError]]         | 监听 WebSocket 错误   |
| [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxsendsocketmessageobject][wx.sendSocketMessage]]   | 发送 WebSocket 消息   |
| [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketmessagecallback][wx.onSocketMessage]]     | 接受 WebSocket 消息   |
| [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxclosesocket][wx.closeSocket]]                     | 关闭 WebSocket 连接   |
| [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketclosecallback][wx.onSocketClose]]         | 监听 WebSocket 关闭   |

**** Tip
     :PROPERTIES:
     :CLASS: calibre12
     :END:

1. =tip=: 网络请求的 referer
   是不可以设置的，格式固定为https://servicewechat.com/{appid}/{version}/page-frame.html，其中={appid}=为小程序的
   appid，={version}=为小程序的版本号，版本号为 0 表示为开发版。
2. =tip=: 小程序进入后台运行后（非置顶聊天），如果 5s
   内网络请求没有结束，会回调错误信息 "fail
   interrupted"；在回到前台之前，网络请求接口调用都会无法调用。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/alqz1q9b.html]]

\\
\\
| [[../index_u33.html#article_69][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u11.html>>

| [[../article_71/index_u18.html][下一项]] |
[[../index_u33.html#article_70][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_69/index_u68.html][上一项]] |

--------------

** wx.request(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u11.html#wxrequestobject
   :CLASS: calibre16
   :END:

--------------

*OBJECT参数说明：*\\

| 参数名     | 类型             | 必填   | 说明                                                                              |
|------------+------------------+--------+-----------------------------------------------------------------------------------|
| url        | String           | 是     | 开发者服务器接口地址                                                              |
| data       | Object、String   | 否     | 请求的参数                                                                        |
| header     | Object           | 否     | 设置请求的 header , header 中不能设置 Referer                                     |
| method     | String           | 否     | 默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT         |
| dataType   | String           | 否     | 默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse   |
| success    | Function         | 否     | 收到开发者服务成功返回的回调函数，res = {data: '开发者服务器返回的内容'}          |
| fail       | Function         | 否     | 接口调用失败的回调函数                                                            |
| complete   | Function         | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                  |

*success返回参数说明：*

| 参数         | 类型                        | 说明                                      | 最低版本                                                        |
|--------------+-----------------------------+-------------------------------------------+-----------------------------------------------------------------|
| data         | Object/String/ArrayBuffer   | 开发者服务器返回的数据                    |                                                                 |
| statusCode   | Number                      | 开发者服务器返回的 HTTP 状态码            |                                                                 |
| header       | Object                      | 开发者服务器返回的 HTTP Response Header   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*data 数据说明* 最终发送给服务器的数据是 String 类型，如果传入的 data
不是 String 类型，会被转换成 String 。转换规则如下：\\

- 对于 header['content-type'] 为 'application/json' 的数据，会对数据进行
  JSON 序列化
- 对于 header['content-type'] 为 'application/x-www-form-urlencoded'
  的数据，会将数据转换成 query string
  （encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...）

*示例代码：*

#+BEGIN_EXAMPLE
    wx.request({
      url: 'test.php', //仅为示例，并非真实的接口地址
      data: {
         x: '' ,
         y: ''
      },
      header:{
          "Content-Type":"application/json"
      },
      success: function(res) {
         console.log(res.data)
      }
    })
#+END_EXAMPLE

**

*返回值：*

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个=requestTask=对象，通过=requestTask=，可中断请求任务。

*requestTask 对象的方法列表：*

| 方法    | 参数   | 说明           | 最低版本                                                        |
|---------+--------+----------------+-----------------------------------------------------------------|
| abort   |        | 中断请求任务   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*示例代码：*

#+BEGIN_EXAMPLE
    const requestTask = wx.request({
      url: 'test.php', //仅为示例，并非真实的接口地址
      data: {
         x: '' ,
         y: ''
      },
      header: {
          'content-type': 'application/json'
      },
      success: function(res) {
        console.log(res.data)
      }
    })

    requestTask.abort() // 取消请求任务
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: content-type 默认为 'application/json'
2. =bug=:
   开发者工具=0.10.102800=版本，=header=的=content-type=设置异常；
3. =tip=: 客户端的 HTTPS TLS 版本为1.2，但=Android=的部分机型还未支持
   TLS 1.2，所以请确保 HTTPS 服务器的 TLS 版本支持1.2及以下版本；
4. =tip=: 要注意 method 的 value 必须为大写（例如：GET）；
5. =tip=: url 中不能有端口；
6. =tip=: request 的默认超时时间和最大超时时间都是 60s
7. =tip=: request 的最大并发数是 5
8. =tip=: 网络请求的 referer 是不可以设置的，格式固定为
   https://servicewechat.com/{appid}/{version}/page-frame.html，其中={appid}=为小程序的
   appid，={version}=为小程序的版本号，版本号为 0 表示为开发版。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-network-request.html]]

\\
\\
| [[../index_u33.html#article_70][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u18.html>>

| [[../article_72/index_u29.html][下一项]] |
[[../index_u33.html#article_71][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_70/index_u11.html][上一项]] |

--------------

** wx.uploadFile(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u18.html#wxuploadfileobject
   :CLASS: calibre16
   :END:

--------------

将本地资源上传到开发者服务器。如页面通过
[[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]
等接口获取到一个本地资源的临时文件路径后，可通过此接口将本地资源上传到指定服务器。客户端发起一个HTTPS
POST请求，其中=Content-Type=为=multipart/form-data=。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                  |
|------------+------------+--------+-----------------------------------------------------------------------|
| url        | String     | 是     | 开发者服务器url                                                       |
| filePath   | String     | 是     | 要上传文件资源的路径                                                  |
| name       | String     | 是     | 文件对应的key , 开发者在服务器端通过这个key可以获取到文件二进制内容   |
| header     | Object     | 否     | HTTP 请求 Header，header中不能设置Referer                             |
| formData   | Object     | 否     | HTTP 请求中其他额外的form data                                        |
| success    | Function   | 否     | 接口调用成功的回调函数                                                |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

*success返回参数说明：*

| 参数         | 类型     | 说明                     |
|--------------+----------+--------------------------|
| data         | String   | 开发者服务器返回的数据   |
| statusCode   | Number   | HTTP状态码               |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.chooseImage({
      success:function(res){
        var tempFilePaths = res.tempFilePaths
        wx.uploadFile({
          url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
          filePath: tempFilePaths[0],
          name:"file",
          formData:{
            "user":"test"
          }      success: function(res){        var data = res.data        //do something      }
        })
      }
    })
#+END_EXAMPLE

*返回值：*

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个=uploadTask=对象，通过=uploadTask=，可监听上传进度变化事件，以及取消上传任务。

** uploadTask
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*uploadTask 对象的方法列表：*

| 方法               | 参数       | 说明               | 最低版本                                                        |
|--------------------+------------+--------------------+-----------------------------------------------------------------|
| onProgressUpdate   | callback   | 监听上传进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| abort              |            | 中断上传任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*onProgressUpdate 返回参数说明：*

| 参数                       | 类型     | 说明                                   |
|----------------------------+----------+----------------------------------------|
| progress                   | Number   | 上传进度百分比                         |
| totalBytesSent             | Number   | 已经上传的数据长度，单位 Bytes         |
| totalBytesExpectedToSend   | Number   | 预期需要上传的数据总长度，单位 Bytes   |

*示例代码：*

#+BEGIN_EXAMPLE
    const uploadTask = wx.uploadFile({
        url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
        filePath: tempFilePaths[0],
        name: 'file',
        formData:{
            'user': 'test'
        },
        success: function(res){
            var data = res.data
            //do something
        }
    })

    uploadTask.onProgressUpdate((res) => {
        console.log('上传进度', res.progress)
        console.log('已经上传的数据长度', res.totalBytesSent)
        console.log('预期需要上传的数据总长度', res.totalBytesExpectedToSend)
    })

    uploadTask.abort() // 取消上传任务
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: 最大并发限制是 10 个
2. =tip=: 默认超时时间和最大超时时间都是 60s

\\
** wx.downloadFile(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u18.html#wxdownloadfileobject
   :CLASS: calibre16
   :END:

--------------

下载文件资源到本地。客户端直接发起一个HTTP
GET请求，返回文件的本地临时路径。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 必填                                                                            |
|------------+------------+--------+---------------------------------------------------------------------------------|
| url        | String     | 是     | 下载资源的 url                                                                  |
| header     | Object     | 否     | HTTP 请求 Header                                                                |
| success    | Function   | 否     | 下载成功后以 tempFilePath 的形式传给页面，res={tempFilePath:'文件的临时路径'}   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                          |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

*示例代码:*

#+BEGIN_EXAMPLE
    wx.downloadFile({
      url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
      success: function(res) {
        wx.playVoice({
          filePath: res.tempFilePath
        })
      }
    })
#+END_EXAMPLE

*返回值：*

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个=downloadTask=对象，通过=downloadTask=，可监听下载进度变化事件，以及取消下载任务。

** downloadTask
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*downloadTask 对象的方法列表：*

| 方法               | 参数       | 说明               | 最低版本                                                        |
|--------------------+------------+--------------------+-----------------------------------------------------------------|
| onProgressUpdate   | callback   | 监听下载进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| abort              |            | 中断下载任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*onProgressUpdate 返回参数说明：*

| 参数                        | 类型     | 说明                                   |
|-----------------------------+----------+----------------------------------------|
| progress                    | Number   | 下载进度百分比                         |
| totalBytesWritten           | Number   | 已经下载的数据长度，单位 Bytes         |
| totalBytesExpectedToWrite   | Number   | 预期需要下载的数据总长度，单位 Bytes   |

*示例代码：*

#+BEGIN_EXAMPLE
    const downloadTask = wx.downloadFile({
        url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
        success: function(res) {
            wx.playVoice({
                filePath: res.tempFilePath
            })
        }
    })

    downloadTask.onProgressUpdate((res) => {
        console.log('下载进度', res.progress)
        console.log('已经下载的数据长度', res.totalBytesWritten)
        console.log('预期需要下载的数据总长度', res.totalBytesExpectedToWrite)
    })

    downloadTask.abort() // 取消下载任务
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: 最大并发限制是 10 个
2. =tip=: 默认超时时间和最大超时时间都是 60s
3. =tip=: 网络请求的 referer 是不可以设置的，格式固定为
   https://servicewechat.com/{appid}/{version}/page-frame.html，其中={appid}=为小程序的
   appid，={version}=为小程序的版本号，版本号为 0 表示为开发版。
4. =tip=: 6.5.3 以及之前版本的 iOS 微信客户端=header=设置无效

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/4g8s1q9c.html]]

\\
\\
| [[../index_u33.html#article_71][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u29.html>>

| [[../article_73/index_u52.html][下一项]] |
[[../index_u33.html#article_72][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_71/index_u18.html][上一项]] |

--------------

** wx.connectSocket(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u29.html#wxconnectsocketobject
   :CLASS: calibre16
   :END:

--------------

创建一个
[[https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket][WebSocket]]
连接；*一个微信小程序同时只能有一个 WebSocket 连接，如果当前已存在一个
WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。*

*OBJECT参数说明：*

| 参数        | 类型          | 必填   | 说明                                                                        | 最低版本                                                        |
|-------------+---------------+--------+-----------------------------------------------------------------------------+-----------------------------------------------------------------|
| url         | String        | 是     | 开发者服务器接口地址，必须是 wss 协议，且域名必须是后台配置的合法域名       |                                                                 |
| data        | Object        | 否     | 请求的数据                                                                  |                                                                 |
| header      | Object        | 否     | HTTP Header , header 中不能设置 Referer                                     |                                                                 |
| method      | String        | 否     | 默认是GET，有效值： OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT   |                                                                 |
| protocols   | StringArray   | 否     | 子协议数组                                                                  | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| success     | Function      | 否     | 接口调用成功的回调函数                                                      |                                                                 |
| fail        | Function      | 否     | 接口调用失败的回调函数                                                      |                                                                 |
| complete    | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                            |                                                                 |

\\
*示例代码：*
#+BEGIN_EXAMPLE
    wx.connectSocket({  
      url: 'test.php',
      data:{
        x: '',
        y: ''
      },
      header:{ 
        'content-type': 'application/json'
      },  protocols: ['protocol1'],
      method:"GET"
    })
#+END_EXAMPLE

\\
** wx.onSocketOpen(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u29.html#wxonsocketopencallback
   :CLASS: calibre16
   :END:

--------------

监听WebSocket连接打开事件。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })
    wx.onSocketOpen(function(res) {
      console.log('WebSocket连接已打开！')
    })
#+END_EXAMPLE

\\
** wx.onSocketError(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u29.html#wxonsocketerrorcallback
   :CLASS: calibre16
   :END:

--------------

监听WebSocket错误。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })
    wx.onSocketOpen(function(res){
      console.log('WebSocket连接已打开！')
    })
    wx.onSocketError(function(res){
      console.log('WebSocket连接打开失败，请检查！')
    })
#+END_EXAMPLE

\\
** wx.sendSocketMessage(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u29.html#wxsendsocketmessageobject
   :CLASS: calibre16
   :END:

--------------

通过 WebSocket 连接发送数据，需要先
[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][wx.connectSocket]]，并在
[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxonsocketopencallback][wx.onSocketOpen]]
回调之后才能发送。

*OBJECT参数说明：*

| 参数       | 类型                 | 必填   | 说明                                               |
|------------+----------------------+--------+----------------------------------------------------|
| data       | String/ArrayBuffer   | 是     | 需要发送的内容                                     |
| success    | Function             | 否     | 接口调用成功的回调函数                             |
| fail       | Function             | 否     | 接口调用失败的回调函数                             |
| complete   | Function             | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    var socketOpen = false
    var socketMsgQueue = []
    wx.connectSocket({
      url: 'test.php'
    })

    wx.onSocketOpen(function(res) {
      socketOpen = true
      for (var i = 0; i < socketMsgQueue.length; i++){
         sendSocketMessage(socketMsgQueue[i])
      }
      socketMsgQueue = []
    })

    function sendSocketMessage(msg) {
      if (socketOpen) {
        wx.sendSocketMessage({
          data:msg
        })
      } else {
         socketMsgQueue.push(msg)
      }
    }
#+END_EXAMPLE

\\
** wx.onSocketMessage(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u29.html#wxonsocketmessagecallback
   :CLASS: calibre16
   :END:

--------------

监听WebSocket接受到服务器的消息事件。

*CALLBACK返回参数：*

| 参数   | 类型                 | 说明               |
|--------+----------------------+--------------------|
| data   | String/ArrayBuffer   | 服务器返回的消息   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })

    wx.onSocketMessage(function(res) {
      console.log('收到服务器内容：' + res.data)
    })
#+END_EXAMPLE

\\
** wx.closeSocket(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u29.html#wxclosesocket
   :CLASS: calibre16
   :END:

--------------

关闭WebSocket连接。

| 参数       | 类型       | 必填   | 说明                                                                                                                  | 最低版本                                                        |
|------------+------------+--------+-----------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| code       | Number     | 否     | 一个数字值表示关闭连接的状态号，表示连接被关闭的原因。如果这个参数没有被指定，默认的取值是1000 （表示正常连接关闭）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| reason     | String     | 否     | 一个可读的字符串，表示连接被关闭的原因。这个字符串必须是不长于123字节的UTF-8 文本（不是字符）                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                                                                |                                                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                                                                |                                                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                                      |                                                                 |

\\
** wx.onSocketClose(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u29.html#wxonsocketclosecallback
   :CLASS: calibre16
   :END:

--------------

监听WebSocket关闭。

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })

    //注意这里有时序问题，
    //如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。
    //必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。
    wx.onSocketOpen(function() {
      wx.closeSocket()
    })

    wx.onSocketClose(function(res) {
      console.log('WebSocket 已关闭！')
    })
#+END_EXAMPLE

*返回值：*

#+BEGIN_QUOTE
  基础库 1.7.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个 SocketTask。

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: createSocket 链接默认和最大超时时间都是 60s
2. =tip=: 网络请求的 referer 是不可以设置的，格式固定为
   https://servicewechat.com/{appid}/{version}/page-frame.html，其中={appid}=为小程序的
   appid，={version}=为小程序的版本号，版本号为 0 表示为开发版。

--------------

** SocketTask
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.7.0 开始支持，低版本需做兼容处理
#+END_QUOTE

WebSocket
任务，可通过[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][ wx.connectSocket() ]]接口创建返回。

*** 方法
    :PROPERTIES:
    :CLASS: calibre11
    :END:

***** SocketTask.send(OBJECT)
      :PROPERTIES:
      :CLASS: calibre54
      :END:

通过 WebSocket 连接发送数据。

OBJECT参数说明：

| 参数       | 类型                 | 必填   | 说明                                               |
|------------+----------------------+--------+----------------------------------------------------|
| data       | String/ArrayBuffer   | 是     | 需要发送的内容                                     |
| success    | Function             | 否     | 接口调用成功的回调函数                             |
| fail       | Function             | 否     | 接口调用失败的回调函数                             |
| complete   | Function             | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

***** SocketTask.close(OBJECT)
      :PROPERTIES:
      :CLASS: calibre54
      :END:

关闭 WebSocket 连接。

OBJECT参数说明：

| 参数       | 类型       | 必填   | 说明                                                                                                                  |
|------------+------------+--------+-----------------------------------------------------------------------------------------------------------------------|
| code       | Number     | 否     | 一个数字值表示关闭连接的状态号，表示连接被关闭的原因。如果这个参数没有被指定，默认的取值是1000 （表示正常连接关闭）   |
| reason     | String     | 否     | 一个可读的字符串，表示连接被关闭的原因。这个字符串必须是不长于123字节的UTF-8 文本（不是字符）                         |
| success    | Function   | 否     | 接口调用成功的回调函数                                                                                                |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                                                                |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                                      |

***** SocketTask.onOpen(CALLBACK)
      :PROPERTIES:
      :CLASS: calibre54
      :END:

监听 WebSocket 连接打开事件。

***** SocketTask.onOpen(CALLBACK)
      :PROPERTIES:
      :CLASS: calibre54
      :END:

监听 WebSocket 连接关闭事件。

***** SocketTask.onError(CALLBACK)
      :PROPERTIES:
      :CLASS: calibre54
      :END:

监听 WebSocket 错误。

CALLBACK返回参数：

| 参数     | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 错误信息   |

***** SocketTask.onMessage(CALLBACK)
      :PROPERTIES:
      :CLASS: calibre54
      :END:

监听WebSocket接受到服务器的消息事件。

CALLBACK返回参数：

| 参数   | 类型                 | 说明               |
|--------+----------------------+--------------------|
| data   | String/ArrayBuffer   | 服务器返回的消息   |

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-network-socket.html]]

\\
\\
| [[../index_u33.html#article_72][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u52.html>>

| [[../article_74/index_u65.html][下一项]] |
[[../index_u33.html#article_73][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_72/index_u29.html][上一项]] |

--------------

** wx.chooseImage(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u52.html#wxchooseimageobject
   :CLASS: calibre16
   :END:

--------------

从本地相册选择图片或使用相机拍照。

*OBJECT参数说明：*

| 参数         | 类型          | 必填   | 说明                                                |
|--------------+---------------+--------+-----------------------------------------------------|
| count        | Number        | 否     | 最多可以选择的图片张数，默认9                       |
| sizeType     | StringArray   | 否     | "original"原图，"compressed"压缩图，默认二者都有    |
| sourceType   | StringArray   | 否     | "album"从相册选图，"camera"使用相机，默认二者都由   |
| success      | Function      | 是     | 成功则返回图片的本地文件路径列表tempFilePaths       |
| fail         | Function      | 否     | 接口调用失败的回调函数                              |
| complete     | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

*success返回参数说明：*

| 参数            | 类型          | 说明                                         | 最低版本                                                        |
|-----------------+---------------+----------------------------------------------+-----------------------------------------------------------------|
| tempFilePaths   | StringArray   | 图片的本地文件路径列表                       |                                                                 |
| tempFiles       | ObjectArray   | 图片的本地文件列表，每一项是一个 File 对象   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*File 对象结构如下:*

| 字段   | 类型     | 说明                    |
|--------+----------+-------------------------|
| path   | String   | 本地文件路径            |
| size   | Number   | 本地文件大小，单位：B   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    wx.chooseImage({
        count: 1, // 默认9
        sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
        sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
        success: function (res) {
              // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
            var tempFilePaths = res.tempFilePaths
        }
    })
#+END_EXAMPLE

** wx.previewImage(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u52.html#wxpreviewimageobject
   :CLASS: calibre16
   :END:

--------------

预览图片。

*OBJECT参数说明：*

| 参数       | 类型          | 必填   | 说明                                               |
|------------+---------------+--------+----------------------------------------------------|
| current    | String        | 否     | 当前显示图片的链接，不填则默认为urls的第一张       |
| urls       | StringArray   | 是     | 需要预览的图片链接列表                             |
| success    | Function      | 否     | 接口调用成功的回调函数                             |
| fail       | Function      | 否     | 接口调用失败的回调函数                             |
| complete   | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.previewImage({
        current: '', // 当前显示图片的http链接
        urls: [] // 需要预览的图片http链接列表
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getImageInfo(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

获取图片信息。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                   |
|------------+------------+--------+------------------------------------------------------------------------|
| src        | String     | 是     | 图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                       |

*success返回参数说明：*

| 参数     | 类型     | 说明                 |
|----------+----------+----------------------|
| width    | Number   | 图片宽度，单位px     |
| height   | Number   | 图片高度 单位px      |
| path     | String   | 返回图片的本地路径   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getImageInfo({
      src: 'images/a.jpg',
      success: function (res) {
        console.log(res.width)
        console.log(res.height)
      }
    })

    wx.chooseImage({
      success: function (res) {
        wx.getImageInfo({
          src: res.tempFilePaths[0],
          success: function (res) {
            console.log(res.width)
            console.log(res.height)
          }
        })
      }
    })
#+END_EXAMPLE

** \\
   :PROPERTIES:
   :CLASS: calibre16
   :END:

** wx.saveImageToPhotosAlbum(OBJECT)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

保存图片到系统相册，需要用户授权（scope.writePhotosAlbum），详见
[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                                                       |
|------------+------------+--------+----------------------------------------------------------------------------|
| filePath   | String     | 是     | 图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                     |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                     |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                           |

*success返回参数说明：*

| 参数名   | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 调用结果   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.saveImageToPhotosAlbum({
        success(res) {
        }
    })
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-media-picture.html]]

\\
\\
| [[../index_u33.html#article_73][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u65.html>>

| [[../article_75/index_u66.html][下一项]] |
[[../index_u33.html#article_74][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_73/index_u52.html][上一项]] |

--------------

** wx.startRecord(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u65.html#wxstartrecordobject
   :CLASS: calibre16
   :END:

--------------

开始录音。当主动调用wx.stopRecord，或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。当用户离开小程序时，此接口无法调用。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                                  |
|------------+------------+--------+---------------------------------------------------------------------------------------|
| success    | Function   | 否     | 录音成功后调用，返回录音文件的临时文件路径，res={tempFilePath:"录音文件的临时路径"}   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                                |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                      |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

*success返回参数说明：*

| 参数           | 说明                 |
|----------------+----------------------|
| tempFilePath   | 录音文件的临时路径   |

\\
** wx.stopRecord()
   :PROPERTIES:
   :CUSTOM_ID: index_u65.html#wxstoprecord
   :CLASS: calibre16
   :END:

--------------

主动调用停止录音。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.starRecord({
      success:function(res){
         var tempFilePath = res.tempFilePath
      },
      fail:function(res){
         //录音失败
      }
    })
    setTimeout(function(){  
      //结束录音  
      wx.stopRecord()
    },10000)
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=:=wx.startRecord=接口需要用户授权，请兼容用户拒绝授权的场景。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-media-record.html]]

\\
\\
| [[../index_u33.html#article_74][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u66.html>>

| [[../article_76/index_u101.html][下一项]] |
[[../index_u33.html#article_75][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_74/index_u65.html][上一项]] |

--------------

** wx.playVoice(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u66.html#wxplayvoiceobject
   :CLASS: calibre16
   :END:

--------------

开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| filePath   | String     | 是     | 需要播放的语音文件的文件路径                       |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startRecord({
      success:function(res){
        var tempFilePath = res.tempFilePath
        wx.playVoice({
          filePath:tempFilePath,
          complete:function(){
          } 
        })
      }
    })
#+END_EXAMPLE

** wx.pauseVoice()
   :PROPERTIES:
   :CUSTOM_ID: index_u66.html#wxpausevoice
   :CLASS: calibre16
   :END:

--------------

暂停正在播放的语音。再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用wx.stopVoice。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startRecord({
      success:function(res){
        var tempFilePath = res.tempFilePath
          wx.playVoice({
          filePath: tempFilePath
        })

        setTimeout(function(){
            //暂停播放
          wx.pauseVoice()
        },5000)
      }
    })
#+END_EXAMPLE

** wx.stopVoice()
   :PROPERTIES:
   :CUSTOM_ID: index_u66.html#wxstopvoice
   :CLASS: calibre16
   :END:

--------------

结束播放语音。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startRecord({
      success:function(res){
        var tempFilePath = res.tempFilePath
        wx.playVoice({
          filePath:tempFilePath
        })

        setTimeout(function(){
          wx.stopVoice()
        },5000)
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-media-voice.html]]

\\
\\
| [[../index_u33.html#article_75][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u101.html>>

| [[../article_77/index_u71.html][下一项]] |
[[../index_u33.html#article_76][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_75/index_u66.html][上一项]] |

--------------

** wx.getBackgroundAudioPlayerState(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxgetbackgroundaudioplayerstateobject
   :CLASS: calibre16
   :END:

--------------

获取音乐播放状态。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

\\
*success返回参数说明：*

| 参数              | 说明                                                              |
|-------------------+-------------------------------------------------------------------|
| duration          | 选定音频的长度（单位：s），只有在当前有音乐播放时返回             |
| currentPosition   | 选定音频的播放位置（单位：s），只有在当前有音乐播放时返回         |
| status            | 播放状态（2：没有音乐在播放，1：播放中，0：暂停中）               |
| downloadPercent   | 音频的下载进度（整数，80 代表 80%），只有在当前有音乐播放时返回   |
| dataUrl           | 歌曲数据链接，只有在当前有音乐播放时返回                          |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getBackgroundAudioPlayerState({
        success:function(res){
            var status = res.status
            var dataUrl = res.dataUrl
            var currentPosition = res.currentPosition
            var duration = res.duration
            var downloadPercent = res.downloadPercent
        }
    })
#+END_EXAMPLE

** wx.playBackgroundAudio(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxplaybackgroundaudioobject
   :CLASS: calibre16
   :END:

--------------

使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户点击“显示在聊天顶部”时，音乐不会暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。

*OBJECT参数说明*

| 参数          | 类型       | 必填   | 说明                                               |
|---------------+------------+--------+----------------------------------------------------|
| dataUrl       | String     | 是     | 音乐链接                                           |
| title         | String     | 否     | 音乐标题                                           |
| coverImgUrl   | String     | 否     | 封面URL                                            |
| success       | Function   | 否     | 接口调用成功的回调函数                             |
| fail          | Function   | 否     | 接口调用失败的回调函数                             |
| complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码*\\

#+BEGIN_EXAMPLE
    wx.playBackgroundAudio({
        dataUrl: '',
        title: '',
        coverImgUrl: ''
    })
#+END_EXAMPLE

** wx.pauseBackgroundAudio()
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxpausebackgroundaudio
   :CLASS: calibre16
   :END:

--------------

暂停播放音乐。

*示例代码*

#+BEGIN_EXAMPLE
    wx.pauseBackgroundAudio()
#+END_EXAMPLE

** wx.seekBackgroundAudio(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxseekbackgroundaudioobject
   :CLASS: calibre16
   :END:

--------------

控制音乐播放进度。

*OBJECT参数说明*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| position   | Number     | 是     | 音乐位置，单位：秒                                 |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码*\\

#+BEGIN_EXAMPLE
    wx.seekBackgroundAudio({
        position: 30
    })
#+END_EXAMPLE

** wx.stopBackgroundAudio()
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxstopbackgroundaudio
   :CLASS: calibre16
   :END:

--------------

停止播放音乐。

*示例代码*

#+BEGIN_EXAMPLE
    wx.stopBackgroundAudio()
#+END_EXAMPLE

** wx.onBackgroundAudioPlay(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxonbackgroundaudioplaycallback
   :CLASS: calibre16
   :END:

--------------

监听音乐播放。

** wx.onBackgroundAudioPause(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxonbackgroundaudiopausecallback
   :CLASS: calibre16
   :END:

--------------

监听音乐暂停。

** wx.onBackgroundAudioStop(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u101.html#wxonbackgroundaudiostopcallback
   :CLASS: calibre16
   :END:

--------------

监听音乐停止。

\\

** bug & tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =bug=:=iOS==6.3.30=wx.seekBackgroundAudio 会有短暂延迟

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-media-background-audio.html]]

\\
\\
| [[../index_u33.html#article_76][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u71.html>>

| [[../article_78/index_u90.html][下一项]] |
[[../index_u33.html#article_77][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_76/index_u101.html][上一项]] |

--------------

** wx.getBackgroundAudioManager()
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取*全局唯一*的背景音频管理器=backgroundAudioManager=

** backgroundAudioManager
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*backgroundAudioManager 对象的属性列表：*

| 属性          | 类型      | 说明                                                                                                        | 只读   |
|---------------+-----------+-------------------------------------------------------------------------------------------------------------+--------|
| duration      | Number    | 当前音频的长度（单位：s），只有在当前有合法的 src 时返回                                                    | 是     |
| currentTime   | Number    | 当前音频的播放位置（单位：s），只有在当前有合法的 src 时返回                                                | 是     |
| paused        | Boolean   | 当前是是否暂停或停止状态，true 表示暂停或停止，false 表示正在播放                                           | 是     |
| src           | String    | 音频的数据源，默认为空字符串，*当设置了新的 src 时，会自动开始播放* ，目前支持的格式有 m4a, aac, mp3, wav   | 否     |
| startTime     | Number    | 音频开始播放的位置（单位：s）                                                                               | 否     |
| buffered      | Number    | 音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲。                                                | 是     |
| title         | String    | 音频标题，用于做原生音频播放器音频标题。原生音频播放器中的分享功能，分享出去的卡片标题，也将使用该值。      | 否     |
| epname        | String    | 专辑名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
| singer        | String    | 歌手名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
| coverImgUrl   | String    | 封面图url，用于做原生音频播放器背景图。原生音频播放器中的分享功能，分享出去的卡片配图及背景也将使用该图。   | 否     |
| webUrl        | String    | 页面链接，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                    | 否     |

*backgroundAudioManager 对象的方法列表：*

| 方法           | 参数       | 说明                                                         |
|----------------+------------+--------------------------------------------------------------|
| play           |            | 播放                                                         |
| pause          |            | 暂停                                                         |
| stop           |            | 停止                                                         |
| seek           | position   | 跳转到指定位置，单位 s                                       |
| onCanplay      | callback   | 背景音频进入可以播放状态，但不保证后面可以流畅播放           |
| onPlay         | callback   | 背景音频播放事件                                             |
| onPause        | callback   | 背景音频暂停事件                                             |
| onStop         | callback   | 背景音频停止事件                                             |
| onEnded        | callback   | 背景音频自然播放结束事件                                     |
| onTimeUpdate   | callback   | 背景音频播放进度更新事件                                     |
| onPrev         | callback   | 用户在系统音乐播放面板点击上一曲事件（iOS only）             |
| onNext         | callback   | 用户在系统音乐播放面板点击下一曲事件（iOS only）             |
| onError        | callback   | 背景音频播放错误事件                                         |
| onWaiting      | callback   | 音频加载中事件，当音频因为数据不足，需要停下来加载时会触发   |

*errcode 说明*

| errCode   | 说明       |
|-----------+------------|
| 10001     | 系统错误   |
| 10002     | 网络错误   |
| 10003     | 文件错误   |
| 10004     | 格式错误   |
| -1        | 未知错误   |

*示例代码：*

#+BEGIN_EXAMPLE
    const backgroundAudioManager = wx.getBackgroundAudioManager()

    backgroundAudioManager.title = '此时此刻'
    backgroundAudioManager.epname = '此时此刻'
    backgroundAudioManager.singer = '汪峰'
    backgroundAudioManager.coverImgUrl = 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'
    backgroundAudioManager.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46' // 设置了 src 之后会自动播放 
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-getbackgroundaudiomanager.html]]

\\
\\
| [[../index_u33.html#article_77][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u90.html>>

| [[../article_79/index_u77.html][下一项]] |
[[../index_u33.html#article_78][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_77/index_u71.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.createAudioContext(audioId)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

创建并返回 audio 上下文=audioContext=对象

** *audioContext*
   :PROPERTIES:
   :CLASS: calibre16
   :END:

=audioContext=通过 audioId 跟一个 audio 组件绑定，通过它可以操作一个
audio 组件。

*audioContext对象的方法列表：*

| 方法     | 参数       | 说明                     |
|----------+------------+--------------------------|
| setSrc   | src        | 音频的地址               |
| play     | 无         | 播放                     |
| pause    | 无         | 暂停                     |
| seek     | position   | 跳转到指定位置，单位 s   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    <!-- audio.wxml --><audio  src="{{src}}" id="myAudio" ></audio>

    <button type="primary" bindtap="audioPlay">播放</button>
    <button type="primary" bindtap="audioPause">暂停</button>
    <button type="primary" bindtap="audio14">设置当前播放时间为14秒</button>
    <button type="primary" bindtap="audioStart">回到开头</button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // audio.js
    Page({
      onReady: function (e) {
        // 使用 wx.createAudioContext 获取 audio 上下文 context
        this.audioCtx = wx.createAudioContext('myAudio')    this.audioCtx.setSrc('http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&fromtag=46')
        this.audioCtx.play()
      },
      data: {    src: ''
      },
      audioPlay: function () {
        this.audioCtx.play()
      },
      audioPause: function () {
        this.audioCtx.pause()
      },
      audio14: function () {
        this.audioCtx.seek(14)
      },
      audioStart: function () {
        this.audioCtx.seek(0)
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-audio.html]]

\\
\\
| [[../index_u33.html#article_78][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u77.html>>

| [[../article_80/index_u36.html][下一项]] |
[[../index_u33.html#article_79][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_78/index_u90.html][上一项]] |

--------------

** wx.chooseVideo(OBJECT)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

拍摄视频或从手机相册中选视频，返回视频的临时文件路径。

*OBJECT参数说明：*

| 参数          | 类型          | 必填   | 说明                                                                     |
|---------------+---------------+--------+--------------------------------------------------------------------------|
| sourceType    | StringArray   | 否     | "album"从相册选视频，"camera"使用相机拍摄，默认为：['album', 'camera']   |
| maxDuration   | Number        | 否     | 拍摄视频最长拍摄时间，单位秒。最长支持60秒                               |
| camera        | String        | 否     | 默认调起的为前置还是后置摄像头。front: 前置，back: 后置，默认 back       |
| success       | Function      | 否     | 接口调用成功，返回视频文件的临时文件路径，详见返回参数说明               |
| fail          | Function      | 否     | 接口调用失败的回调函数                                                   |
| complete      | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                         |

*success返回参数说明：*

| 参数           | 说明                     |
|----------------+--------------------------|
| tempFilePath   | 选定视频的临时文件路径   |
| duration       | 选定视频的时间长度       |
| size           | 选定视频的数据量大小     |
| height         | 返回选定视频的长         |
| width          | 返回选定视频的宽         |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*\\
*示例代码：*

#+BEGIN_EXAMPLE
    <view class="container">
        <video src="{{src}}"></video>
        <button bindtap="bindButtonTap">获取视频</button>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
        bindButtonTap:function(){
            var that = this
            wx.chooseVideo({
                sourceType: ['album','camera'],
                maxDuration:60,
          camera: 'back',
                success: function(res){
                    that.setData({
                        src:res.tempFilePath
                    })
                }
            })
        }
    })
#+END_EXAMPLE

** wx.saveVideoToPhotosAlbum(OBJECT)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

保存视频到系统相册，需要用户授权（scope.writePhotosAlbum），详见
[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                                   |
|------------+------------+--------+--------------------------------------------------------|
| filePath   | String     | 是     | 视频文件路径，可以是临时文件路径也可以是永久文件路径   |
| success    | Function   | 否     | 接口调用成功的回调函数                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）       |

*success返回参数说明：*

| 参数名   | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 调用结果   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.saveVideoToPhotosAlbum({
        success(res) {
        }
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: camera 参数在部分 Android 手机下由于系统 ROM 不支持无法生效

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-media-video.html]]

\\
\\
| [[../index_u33.html#article_79][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u36.html>>

| [[../article_81/index_u53.html][下一项]] |
[[../index_u33.html#article_80][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_79/index_u77.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.createVideoContext(videoId)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

创建并返回 video 上下文=videoContext=对象

** videoContext
   :PROPERTIES:
   :CLASS: calibre16
   :END:

=videoContext=通过 videoId 跟一个 video 组件绑定，通过它可以操作一个
video 组件。

*videoContext对象的方法列表：*

| 方法                | 参数       | 说明                                              | 最低版本                                                        |
|---------------------+------------+---------------------------------------------------+-----------------------------------------------------------------|
| play                | 无         | 播放                                              |                                                                 |
| pause               | 无         | 暂停                                              |                                                                 |
| seek                | position   | 跳转到指定位置，单位 s                            |                                                                 |
| sendDanmu           | danmu      | 发送弹幕，danmu 包含两个属性 text, color。        |                                                                 |
| playbackRate        | rate       | 设置倍速播放，支持的倍率有 0.5/0.8/1.0/1.25/1.5   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| requestFullScreen   | 无         | 进入全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| exitFullScreen      | 无         | 退出全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    <view class="section tc">  <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400"   enable-danmu danmu-btn controls></video>
      <view class="btn-area">
        <input bindblur="bindInputBlur"/>
        <button bindtap="bindSendDanmu">发送弹幕</button>
      </view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    function getRandomColor () {
      let rgb = []
      for (let i = 0 ; i < 3; ++i){
        let color = Math.floor(Math.random() * 256).toString(16)
        color = color.length == 1 ? '0' + color : color
        rgb.push(color)
      }
      return '#' + rgb.join('')
    }

    Page({
      onReady: function (res) {
        this.videoContext = wx.createVideoContext('myVideo')
      },
      inputValue: '',
      bindInputBlur: function(e) {
        this.inputValue = e.detail.value
      },
      bindSendDanmu: function () {
        this.videoContext.sendDanmu({
          text: this.inputValue,
          color: getRandomColor()
        })
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-video.html]]

\\
\\
| [[../index_u33.html#article_80][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u53.html>>

| [[../article_82/index_u79.html][下一项]] |
[[../index_u33.html#article_81][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_80/index_u36.html][上一项]] |

--------------

** wx.createCameraContext(this)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_QUOTE
  基础库 1.6.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

创建并返回 camera
上下文 cameraContext 对象，cameraContext 与页面的 camera 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 <camera/> 组件。
在自定义组件下，第一个参数传入组件实例this，以操作组件内 <camera/> 组件

*** cameraContext
    :PROPERTIES:
    :CLASS: calibre11
    :END:

cameraContext 对象的方法列表：

| 方法          | 参数     | 说明                               |
|---------------+----------+------------------------------------|
| takePhoto     | OBJECT   | 拍照，可指定质量，成功则返回图片   |
| startRecord   | OBJECT   | 开始录像                           |
| stopRecord    | OBJECT   | 结束录像，成功则返回封面与视频     |

takePhoto 的 OBJECT 参数列表：

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| quality    | String     | 否     | 成像质量，值为high, normal, low，默认normal        |
| success    | Function   | 否     | 接口调用成功的回调函数 ，res = { tempImagePath }   |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

startRecord 的 OBJECT 参数列表：

| 参数              | 类型       | 必填   | 说明                                                                      |
|-------------------+------------+--------+---------------------------------------------------------------------------|
| success           | Function   | 否     | 接口调用成功的回调函数                                                    |
| fail              | Function   | 否     | 接口调用失败的回调函数                                                    |
| complete          | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                          |
| timeoutCallback   | Function   | 否     | 超过30s或页面onHide时会结束录像，res = { tempThumbPath, tempVideoPath }   |

stopRecord 的 OBJECT 参数列表：

| 参数       | 类型       | 必填   | 说明                                                              |
|------------+------------+--------+-------------------------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数 ，res = { tempThumbPath, tempVideoPath }   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                            |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                  |

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-c2u72j31.html]]

\\
\\
| [[../index_u33.html#article_81][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u79.html>>

| [[../article_83/index_u98.html][下一项]] |
[[../index_u33.html#article_82][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_81/index_u53.html][上一项]] |

--------------

** 
   :PROPERTIES:
   :CUSTOM_ID: index_u79.html#wxsaveFileobject
   :CLASS: calibre16
   :END:

** wx.saveFile(OBJECT)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

保存文件到本地。

** 
   :PROPERTIES:
   :CLASS: calibre16
   :END:

*** *OBJECT参数说明：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

**
| 参数           | 类型       | 必填   | 说明                                                          |
|----------------+------------+--------+---------------------------------------------------------------|
| tempFilePath   | String     | 是     | 需要保存的文件的临时路径                                      |
| success        | Function   | 否     | 返回文件的保存路径，res = {savedFilePath: '文件的保存路径'}   |
| fail           | Function   | 否     | 接口调用失败的回调函数                                        |
| complete       | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）              |

*success返回参数说明：*

| 参数            | 说明             |
|-----------------+------------------|
| savedFilePath   | 文件的保存路径   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    wx.chooseImage({
      success: function(res) {
        var tempFilePath = res.tempFilePath
        wx.saveFile({
          tempFilePath: tempFilePath[0],
          success: function(res) {
            var savedFilePath = res.savedFilePath
          }
        })
      }
    })
#+END_EXAMPLE

** bug & tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: 本地文件存储的大小限制为 10M

\\

** wx.getFileInfo(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u79.html#wxgetFileInfo
   :CLASS: calibre16
   :END:

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取文件信息

*OBJECT参数说明：*

| 参数名            | 类型       | 必填   | 说明                                                |
|-------------------+------------+--------+-----------------------------------------------------|
| filePath          | String     | 是     | 本地文件路径                                        |
| digestAlgorithm   | String     | 否     | 计算文件摘要的算法，默认值 md5，有效值：md5，sha1   |
| success           | Function   | 否     | 接口调用成功的回调函数                              |
| fail              | Function   | 否     | 接口调用失败的回调函数                              |
| complete          | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

*success返回参数说明：*

| 参数名   | 类型     | 说明                                              |
|----------+----------+---------------------------------------------------|
| size     | Number   | 文件大小，单位：B                                 |
| digest   | String   | 按照传入的 digestAlgorithm 计算得出的的文件摘要   |
| errMsg   | String   | 调用结果                                          |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getFileInfo({
        success(res) {
            console.log(res.size)
            console.log(res.digest)
        }
    })
#+END_EXAMPLE

\\

** 
   :PROPERTIES:
   :CUSTOM_ID: index_u79.html#wxgetSavedFileListobject
   :CLASS: calibre16
   :END:

** wx.getSavedFileList(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u79.html#wxgetsavedfilelistobject
   :CLASS: calibre16
   :END:

--------------

获取本地已保存的文件列表

*** *OBJECT参数说明：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 参数       | 类型       | 必填   | 说明                                                      |
|------------+------------+--------+-----------------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                    |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

*** *success返回参数说明：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 参数       | 类型           | 说明           |
|------------+----------------+----------------|
| errMsg     | String         | 接口调用结果   |
| fileList   | Object Array   | 文件列表       |

*** *fileList中的项目说明：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 键           | 类型     | 说明                                                           |
|--------------+----------+----------------------------------------------------------------|
| filePath     | String   | 文件的本地路径                                                 |
| createTime   | Number   | 文件的保存时的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |
| size         | Number   | 文件大小，单位B                                                |

*** *示例代码：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_EXAMPLE
    wx.getSavedFileList({
      success: function(res) {
        console.log(res.fileList)
      }
    })
#+END_EXAMPLE

\\

#+BEGIN_HTML
  <h2 id="wxgetsavedfileinfoobject" class="calibre16">
#+END_HTML

wx.getSavedFileInfo(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用
[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_82/weixinapp-file.xhtml#wxgetFileInfo][wx.getFileInfo]]
接口。\\

*** *OBJECT参数说明：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 参数       | 类型       | 必填   | 说明                                                      |
|------------+------------+--------+-----------------------------------------------------------|
| filePath   | String     | 是     | 文件路径                                                  |
| success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                    |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

*** *success返回参数说明：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 参数         | 类型     | 说明                                                           |
|--------------+----------+----------------------------------------------------------------|
| errMsg       | String   | 接口调用结果                                                   |
| size         | Number   | 文件大小，单位B                                                |
| createTime   | Number   | 文件的保存是的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |

*** *示例代码：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_EXAMPLE
    wx.getSavedFileInfo({
      filePath: 'wxfile://somefile', //仅做示例用，非真正的文件路径
      success: function(res) {
        console.log(res.size)
        console.log(res.createTime)
      }
    })
#+END_EXAMPLE

\\

#+BEGIN_HTML
  <h2 id="wxremovesavedfileobject" class="calibre16">
#+END_HTML

wx.removeSavedFile(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

删除本地存储的文件

*** *OBJECT参数说明：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| filePath   | String     | 是     | 需要删除的文件路径                                 |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*** *示例代码：*
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_EXAMPLE
    wx.getSavedFileList({
      success: function(res) {
        if (res.fileList.length > 0){
          wx.removeSavedFile({
            filePath: res.fileList[0].filePath,
            complete: function(res) {
              console.log(res)
            }
          })
        }
      }
    })
#+END_EXAMPLE

\\

#+BEGIN_HTML
  <h2 id="wxopendocumentobject" class="calibre16">
#+END_HTML

wx.openDocument(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx

*OBJECT参数说明：*

| 参数       | 说明       | 必填   | 说明                                                                          | 最低版本                                                        |
|------------+------------+--------+-------------------------------------------------------------------------------+-----------------------------------------------------------------|
| filePath   | String     | 是     | 文件路径，可通过 downFile 获得                                                |                                                                 |
| fileType   | String     | 否     | 文件类型，指定文件类型打开文件，有效值 doc, xls, ppt, pdf, docx, xlsx, pptx   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                        |                                                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                        |                                                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                              |                                                                 |

*** 示例代码
    :PROPERTIES:
    :CLASS: calibre11
    :END:

#+BEGIN_EXAMPLE
    wx.downloadFile({  url: 'http://example.com/somefile.pdf',
      success: function (res) {
        var filePath = res.tempFilePath 
        wx.openDocument({
          filePath: filePath,
          success: function (res) {
            console.log('打开文档成功')
          }
        })
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-file.html]]

\\
\\
| [[../index_u33.html#article_82][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u98.html>>

| [[../article_84/index_u22.html][下一项]] |
[[../index_u33.html#article_83][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_82/index_u79.html][上一项]] |

--------------

每个微信小程序都可以有自己的本地缓存，可以通过wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。同一个微信用户，同一个小程序
storage 上限为 10MB。localStorage 以用户维度隔离，同一台设备上，A
用户无法读取到 B 用户的数据。

*注意：*
localStorage是永久存储的，但是我们不建议将关键信息全部存在localStorage，以防用户换设备的情况。

** wx.setStorage(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u98.html#wxsetstorageobject
   :CLASS: calibre16
   :END:

--------------

将数据存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个异步接口。

*OBJECT参数说明：*

| 参数       | 类型            | 必填   | 说明                                               |
|------------+-----------------+--------+----------------------------------------------------|
| key        | String          | 是     | 本地缓存中的指定的 key                             |
| data       | Object/String   | 是     | 需要存储的内容                                     |
| success    | Function        | 否     | 接口调用成功的回调函数                             |
| fail       | Function        | 否     | 接口调用失败的回调函数                             |
| complete   | Function        | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码*

#+BEGIN_EXAMPLE
    wx.setStorage({
      key:"key"
      data:"value"
    })
#+END_EXAMPLE

** wx.setStorageSync(KEY,DATA)
   :PROPERTIES:
   :CUSTOM_ID: index_u98.html#wxsetstoragesynckeydata
   :CLASS: calibre16
   :END:

--------------

将data存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个同步接口。

*参数说明：*

| 参数   | 类型            | 必填   | 说明                    |
|--------+-----------------+--------+-------------------------|
| key    | String          | 是     | 本地缓存中的指定的key   |
| data   | Object/String   | 是     | 需要存储的内容          |

*示例代码*

#+BEGIN_EXAMPLE
    try {
       wx.setStorageSync("key","value")
    } catch (e) {
    }
#+END_EXAMPLE

** wx.getStorage(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u98.html#wxgetstorageobject
   :CLASS: calibre16
   :END:

--------------

从本地缓存中异步获取指定key对应的内容。

*OBJECT参数说明：*\\

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| key        | String     | 是     | 本地缓存中的指定的 key                             |
| success    | Function   | 是     | 接口调用的回调函数,res = {data: key对应的内容}     |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数   | 类型     | 说明            |
|--------+----------+-----------------|
| data   | String   | key对应的内容   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getStorage({
      key:'key',
      success: function(res){
          console.log(res.data)
      } 
    })
#+END_EXAMPLE

** wx.getStorageSync(KEY)
   :PROPERTIES:
   :CUSTOM_ID: index_u98.html#wxgetstoragesynckey
   :CLASS: calibre16
   :END:

--------------

从本地缓存中同步获取指定key对应的内容。

*参数说明：*

| 参数   | 类型     | 必填   | 说明                    |
|--------+----------+--------+-------------------------|
| key    | String   | 是     | 本地缓存中的指定的key   |

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var value = wx.getStorageSync('key')
      if (value) {
          // Do something with return value
      }
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxgetstorageinfoobject" class="calibre16">
#+END_HTML

wx.getStorageInfo(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

异步获取当前storage的相关信息

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 接口调用的回调函数，详见返回参数说明               |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数          | 类型           | 说明                         |
|---------------+----------------+------------------------------|
| keys          | String Array   | 当前storage中所有的key       |
| currentSize   | Number         | 当前占用的空间大小, 单位kb   |
| limitSize     | Number         | 限制的空间大小，单位kb       |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getStorageInfo({
      success: function(res) {
        console.log(res.keys)
        console.log(res.currentSize)
        console.log(res.limitSize)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxgetstorageinfosync" class="calibre16">
#+END_HTML

wx.getStorageInfoSync

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

同步获取当前storage的相关信息

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var res = wx.getStorageInfoSync()
      console.log(res.keys)
      console.log(res.currentSize)
      console.log(res.limitSize)
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxremovestorageobject" class="calibre16">
#+END_HTML

wx.removeStorage(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

从本地缓存中异步移除指定 key 。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| key        | String     | 是     | 本地缓存中的指定的 key                             |
| success    | Function   | 是     | 接口调用的回调函数                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.removeStorage({
      key: 'key',
      success: function(res) {
        console.log(res.data)
      } 
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxremovestoragesynckey" class="calibre16">
#+END_HTML

wx.removeStorageSync(KEY)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

从本地缓存中同步移除指定 key 。

*参数说明：*

| 参数   | 类型     | 必填   | 说明                     |
|--------+----------+--------+--------------------------|
| key    | String   | 是     | 本地缓存中的指定的 key   |

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      wx.removeStorageSync('key')
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE

** wx.clearStorage()
   :PROPERTIES:
   :CUSTOM_ID: index_u98.html#wxclearstorage
   :CLASS: calibre16
   :END:

--------------

清理本地数据缓存。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.clearStorage()
#+END_EXAMPLE

** wx.clearStorageSync()
   :PROPERTIES:
   :CUSTOM_ID: index_u98.html#wxclearstoragesync
   :CLASS: calibre16
   :END:

--------------

同步清理本地数据缓存

*示例代码：*

#+BEGIN_EXAMPLE
    try {
        wx.clearStorageSync()
    } catch(e) {
      // Do something when catch error
    }
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: 本地数据存储的大小限制为 10MB

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-apidate.html]]

\\
\\
| [[../index_u33.html#article_83][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u22.html>>

| [[../article_85/index_u74.html][下一项]] |
[[../index_u33.html#article_84][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_83/index_u98.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getLocation(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                               |
|------------+------------+--------+--------------------------------------------------------------------|
| type       | String     | 否     | 默认为"wgs84"返回gps坐标，"gcj02"返回可用于wx.openLocation的坐标   |
| success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                   |

*success返回参数说明：*

| 参数                 | 说明                                           | 最低版本                                                        |
|----------------------+------------------------------------------------+-----------------------------------------------------------------|
| latitude             | 纬度，浮点数，范围为-90~90，负数表示南纬       |                                                                 |
| longitude            | 经度，浮点数，范围为-180~180，负数表示西经     |                                                                 |
| speed                | 速度，浮点数，单位m/s                          |                                                                 |
| accuracy             | 位置的精确度                                   |                                                                 |
| altitude             | 高度，单位 m                                   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| verticalAccuracy     | 垂直精度，单位 m（Android 无法获取，返回 0）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| horizontalAccuracy   | 水平精度，单位 m                               | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    wx.getLocation({
      type: 'wgs84',
      success: function(res) {
        var latitude = res.latitude
        var longitude = res.longitude
        var speed = res.speed
        var accuracy = res.accuracy
      }
    })
#+END_EXAMPLE

\\

** 
   :PROPERTIES:
   :CUSTOM_ID: index_u22.html#wxchooselocationobject
   :CLASS: calibre16
   :END:

** wx.chooseLocation(OBJECT)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

打开地图选择位置。

需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]] scope.userLocation\\

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                 |
|------------+------------+--------+------------------------------------------------------|
| success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
| cancel     | Function   | 否     | 用户取消时调用                                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                               |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

*success返回参数说明：*

| 参数        | 说明                                         |
|-------------+----------------------------------------------|
| name        | 位置名称                                     |
| address     | 详细地址                                     |
| latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
| longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

\\
\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-location.html]]

\\
\\
| [[../index_u33.html#article_84][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u74.html>>

| [[../article_86/index_u7.html][下一项]] |
[[../index_u33.html#article_85][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_84/index_u22.html][上一项]] |

--------------

** wx.getLocation(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u74.html#wxgetlocationobject
   :CLASS: calibre16
   :END:

--------------

获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                  |
|------------+------------+--------+-----------------------------------------------------------------------|
| type       | String     | 否     | 默认为 wgs84 返回 gps 坐标，gcj02 返回可用于=wx.openLocation=的坐标   |
| success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。                    |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

*success返回参数说明：*

| 参数                 | 说明                                           | 最低版本                                                        |
|----------------------+------------------------------------------------+-----------------------------------------------------------------|
| latitude             | 纬度，浮点数，范围为-90~90，负数表示南纬       |                                                                 |
| longitude            | 经度，浮点数，范围为-180~180，负数表示西经     |                                                                 |
| speed                | 速度，浮点数，单位m/s                          |                                                                 |
| accuracy             | 位置的精确度                                   |                                                                 |
| altitude             | 高度，单位 m                                   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| verticalAccuracy     | 垂直精度，单位 m（Android 无法获取，返回 0）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| horizontalAccuracy   | 水平精度，单位 m                               | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getLocation({
      type: 'wgs84',
      success: function(res) {
        var latitude = res.latitude
        var longitude = res.longitude
        var speed = res.speed
        var accuracy = res.accuracy
      }
    })
#+END_EXAMPLE

** wx.chooseLocation(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u74.html#wxchooselocationobject
   :CLASS: calibre16
   :END:

--------------

打开地图选择位置。

需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
scope.userLocation

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                 |
|------------+------------+--------+------------------------------------------------------|
| success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
| fail       | Function   | 否     | 接口调用失败的回调函数                               |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

*success返回参数说明：*

| 参数        | 说明                                         |
|-------------+----------------------------------------------|
| name        | 位置名称                                     |
| address     | 详细地址                                     |
| latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
| longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

** wx.openLocation(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u74.html#wxopenlocationobject
   :CLASS: calibre16
   :END:

--------------

使用微信内置地图查看位置。

需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
scope.userLocation

*OBJECT参数说明：*

| 参数        | 类型       | 必填   | 说明                                               |
|-------------+------------+--------+----------------------------------------------------|
| latitude    | Float      | 是     | 纬度，范围为-90~90，负数表示南纬                   |
| longitude   | Float      | 是     | 经度，范围为-180~180，负数表示西经                 |
| scale       | INT        | 否     | 缩放比例，范围5~18，默认为18                       |
| name        | String     | 否     | 位置名                                             |
| address     | String     | 否     | 地址的详细说明                                     |
| success     | Function   | 否     | 接口调用成功的回调函数                             |
| fail        | Function   | 否     | 接口调用失败的回调函数                             |
| complete    | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getLocation({
      type: 'gcj02', //返回可以用于wx.openLocation的经纬度
      success: function(res) {
        var latitude = res.latitude
        var longitude = res.longitude
        wx.openLocation({
          latitude: latitude,
          longitude: longitude,
          scale: 28
        })
      }
    })
#+END_EXAMPLE

*** Bug & Tip
    :PROPERTIES:
    :CUSTOM_ID: index_u74.html#bug--tip
    :CLASS: calibre11
    :END:

1. =bug=: =iOS= =6.3.30= type 参数不生效，只会返回 wgs84 类型的坐标信息

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-openlocation.html]]

\\
\\
| [[../index_u33.html#article_85][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u7.html>>

| [[../article_87/index_u32.html][下一项]] |
[[../index_u33.html#article_86][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_85/index_u74.html][上一项]] |

--------------

** wx.createMapContext(mapId)
   :PROPERTIES:
   :CUSTOM_ID: index_u7.html#wxcreatemapcontextmapid
   :CLASS: calibre16
   :END:

--------------

创建并返回 map
上下文 =mapContext= 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 =<map/>= 组件\\

\\

*mapContext*

=mapContext=通过 mapId
跟一个=<map/>=组件绑定，通过它可以操作对应的=<map/>=组件。

*mapContext 对象的方法列表*

| 方法                | 参数     | 说明                                                                                                                                           | 最低版本                                                        |
|---------------------+----------+------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------|
| getCenterLocation   | OBJECT   | 获取当前地图中心的经纬度，返回的是 gcj02 坐标系，可以用于 [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][=wx.openLocation=]]   |                                                                 |
| moveToLocation      | 无       | 将地图中心移动到当前定位点，需要配合map组件的show-location使用                                                                                 |                                                                 |
| translateMarker     | OBJECT   | 平移marker，带动画                                                                                                                             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| includePoints       | OBJECT   | 缩放视野展示所有经纬度                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| getRegion           | OBJECT   | 获取当前地图的视野范围                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| getScale            | OBJECT   | 获取当前地图的缩放级别                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*getCenterLocation 的 OBJECT 参数列表*

| 参数       | 类型       | 必填   | 说明                                                                    |
|------------+------------+--------+-------------------------------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数 ，res = { longitude: "经度", latitude: "纬度"}   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                  |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                        |

*translateMarker 的 OBJECT 参数列表*

| 参数           | 类型       | 必填   | 说明                                             |
|----------------+------------+--------+--------------------------------------------------|
| markerId       | Number     | 是     | 指定marker                                       |
| destination    | Object     | 是     | 指定marker移动到的目标点                         |
| autoRotate     | Boolean    | 是     | 移动过程中是否自动旋转marker                     |
| rotate         | Number     | 是     | marker的旋转角度                                 |
| duration       | Number     | 否     | 动画持续时长，默认值1000ms，平移与旋转分别计算   |
| animationEnd   | Function   | 否     | 动画结束回调函数                                 |
| fail           | Function   | 否     | 接口调用失败的回调函数                           |

*includePoints 的 OBJECT 参数列表*

| 参数      | 类型    | 必填   | 说明                                                                                                                                                    |
|-----------+---------+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------|
| points    | Array   | 是     | 要显示在可视区域内的坐标点列表，[{latitude, longitude}]                                                                                                 |
| padding   | Array   | 否     | 坐标点形成的矩形边缘到地图边缘的距离，单位像素。格式为[上,右,下,左]，安卓上只能识别数组第一项，上下左右的padding一致。开发者工具暂不支持padding参数。   |

*getRegion 的 OBJECT 参数列表*

| 参数       | 类型       | 必填   | 说明                                                                           |
|------------+------------+--------+--------------------------------------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数，res = {southwest, northeast}，西南角与东北角的经纬度   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                         |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                               |

*getScale 的 OBJECT 参数列表*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数，res = {scale}              |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

\\

*示例代码：*

**

#+BEGIN_EXAMPLE
    <!-- map.wxml -->
    <map id="myMap" show-location />

    <button type="primary" bindtap="getCenterLocation">获取位置</button>
    <button type="primary" bindtap="moveToLocation">移动位置</button>
    <button type="primary" bindtap="translateMarker">移动标注</button>
    <button type="primary" bindtap="includePoints">缩放视野展示所有经纬度</button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // map.js
    Page({
      onReady: function (e) {
        // 使用 wx.createMapContext 获取 map 上下文
        this.mapCtx = wx.createMapContext('myMap')
      },
      getCenterLocation: function () {
        this.mapCtx.getCenterLocation({
          success: function(res){
            console.log(res.longitude)
            console.log(res.latitude)
          }
        })
      },
      moveToLocation: function () {
        this.mapCtx.moveToLocation()
      },
      translateMarker: function() {
        this.mapCtx.translateMarker({
          markerId: 0,
          autoRotate: true,
          duration: 1000,
          destination: {
            latitude:23.10229,
            longitude:113.3345211,
          },
          animationEnd() {
            console.log('animation end')
          }
        })
      },
      includePoints: function() {
        this.mapCtx.includePoints({
          padding: [10],
          points: [{
            latitude:23.10229,
            longitude:113.3345211,
          }, {
            latitude:23.00229,
            longitude:113.3345211,
          }]
        })
      }
    })
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-map.html]]

\\
\\
| [[../index_u33.html#article_86][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u32.html>>

| [[../article_88/index_u83.html][下一项]] |
[[../index_u33.html#article_87][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_86/index_u7.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

微信小程序API设备概览

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

- [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][系统信息]]------（[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][wx.getSystemInfo]]、[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfosync][wx.getSystemInfoSync]]）\\
- [[file:weixinapp-api-device.html][网络状态]]------（[[file:weixinapp-api-device.html#wxgetnetworktypeobject][wx.getNetworkType]]）\\
- [[file:weixinapp-api-accelerometer.html][重力感应]]------（[[file:weixinapp-api-accelerometer.html#wxonaccelerometerchangecallback][wx.onAccelerometerChange]]）\\
- [[file:weixinapp-api-campass.html][罗
  盘]]------（[[file:weixinapp-api-campass.html#wxoncompasschangecallback][wx.onCompassChange]]）\\
- [[file:weixinapp-api-phonecall.html][拨打电话]]------（[[file:weixinapp-api-phonecall.html#wxmakephonecallobject][wx.makePhoneCall]]）\\
- [[file:weixinapp-api-scancode.html][扫
  码]]------（[[file:weixinapp-api-scancode.html#wxscancodeobject][wx.scanCode]]）\\

** wx.getSystemInfo(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u32.html#wxgetsysteminfoobject
   :CLASS: calibre16
   :END:

--------------

获取系统信息。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 接口调用成功的回调                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success回调参数说明：*

| 属性           | 说明             |
|----------------+------------------|
| model          | 手机型号         |
| pixelRatio     | 设备像素比       |
| windowWidth    | 窗口宽度         |
| windowHeight   | 窗口高度         |
| language       | 微信设置的语言   |
| version        | 微信版本号       |
| system         | 操作系统版本     |
| platform       | 客户端平台       |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getSystemInfo({
      success: function(res) {
        console.log(res.model)
        console.log(res.pixelRatio)
        console.log(res.windowWidth)
        console.log(res.windowHeight)
        console.log(res.language)
        console.log(res.version)
        console.log(res.platform)
      }
    })
#+END_EXAMPLE

\\
** wx.getSystemInfoSync()
   :PROPERTIES:
   :CUSTOM_ID: index_u32.html#wxgetsysteminfosync
   :CLASS: calibre16
   :END:

--------------

获取系统信息同步接口

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var res = wx.getSystemInfoSync()
      console.log(res.model)
      console.log(res.pixelRatio)
      console.log(res.windowWidth)
      console.log(res.windowHeight)
      console.log(res.language)
      console.log(res.version)
      console.log(res.platform)
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-o1xc1xz3.html]]

\\
\\
| [[../index_u33.html#article_87][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u83.html>>

| [[../article_89/index_u5.html][下一项]] |
[[../index_u33.html#article_88][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_87/index_u32.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getSystemInfo(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

获取系统信息。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 接口调用成功的回调                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success回调参数说明：*

| 参数              | 说明                                                                | 最低版本                                                        |
|-------------------+---------------------------------------------------------------------+-----------------------------------------------------------------|
| model             | 手机型号                                                            |                                                                 |
| pixelRatio        | 设备像素比                                                          |                                                                 |
| screenWidth       | 屏幕宽度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| screenHeight      | 屏幕高度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| windowWidth       | 可使用窗口宽度                                                      |                                                                 |
| windowHeight      | 可使用窗口高度                                                      |                                                                 |
| language          | 微信设置的语言                                                      |                                                                 |
| version           | 微信版本号                                                          |                                                                 |
| system            | 操作系统版本                                                        |                                                                 |
| platform          | 客户端平台                                                          |                                                                 |
| fontSizeSetting   | 用户字体大小设置。以“我-设置-通用-字体大小”中的设置为准，单位：px   | [[http://caibaojian.com/weixinapp/compatibility.html][1.5.0]]   |
| SDKVersion        | 客户端基础库版本                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    wx.getSystemInfo({
      success: function(res) {
        console.log(res.model)
        console.log(res.pixelRatio)
        console.log(res.windowWidth)
        console.log(res.windowHeight)
        console.log(res.language)
        console.log(res.version)
        console.log(res.platform)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxgetsysteminfosync" class="calibre16">
#+END_HTML

wx.getSystemInfoSync()

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

获取系统信息同步接口

*同步返回参数说明：*

| 参数           | 说明               | 最低版本                                                        |
|----------------+--------------------+-----------------------------------------------------------------|
| model          | 手机型号           |                                                                 |
| pixelRatio     | 设备像素比         |                                                                 |
| screenWidth    | 屏幕宽度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| screenHeight   | 屏幕高度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| windowWidth    | 可使用窗口宽度     |                                                                 |
| windowHeight   | 可使用窗口高度     |                                                                 |
| language       | 微信设置的语言     |                                                                 |
| version        | 微信版本号         |                                                                 |
| system         | 操作系统版本       |                                                                 |
| platform       | 客户端平台         |                                                                 |
| SDKVersion     | 客户端基础库版本   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var res = wx.getSystemInfoSync()
      console.log(res.model)
      console.log(res.pixelRatio)
      console.log(res.windowWidth)
      console.log(res.windowHeight)
      console.log(res.language)
      console.log(res.version)
      console.log(res.platform)
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxcanIUse" class="calibre16">
#+END_HTML

wx.canIUse(String)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

判断小程序的API，回调，参数，组件等是否在当前版本可用。

*String参数说明：* 使用=${API}.${method}.${param}.${options}=或者=${component}.${attribute}.${option}=方式来调用，例如：

- =${API}=代表 API 名字
- =${method}=代表调用方式，有效值为=return=, =success=, =object=, =callback=
- =${param}=代表参数或者返回值
- =${options}=代表参数的可选值
- =${component}=代表组件名字
- =${attribute}=代表组件属性
- =${option}=代表组件属性的可选值

例子：

#+BEGIN_EXAMPLE
    wx.canIUse('openBluetoothAdapter')wx.canIUse('getSystemInfoSync.return.screenWidth')
    wx.canIUse('getSystemInfo.success.screenWidth')
    wx.canIUse('showToast.object.image')
    wx.canIUse('onCompassChange.callback.direction')
    wx.canIUse('request.object.method.GET')
    wx.canIUse('contact-button')
    wx.canIUse('text.selectable')
    wx.canIUse('button.open-type.contact')
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-device.html]]

\\
\\
| [[../index_u33.html#article_88][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u5.html>>

| [[../article_90/index_u78.html][下一项]] |
[[../index_u33.html#article_89][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_88/index_u83.html][上一项]] |

--------------

** wx.getNetworkType(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u5.html#wxgetnetworktypeobject
   :CLASS: calibre16
   :END:

--------------

获取网络类型。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 接口调用成功，返回网络类型 networkType             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数          | 说明       |
|---------------+------------|
| networkType   | 网络类型   |

#+BEGIN_EXAMPLE
    wx.getNetworkType({
      success: function(res) {
        // 返回网络类型, 有效值：
        // wifi/2g/3g/4g/unknown(Android下不常见的网络类型)/none(无网络)
        var networkType = res.networkType
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxonnetworkstatuschangecallback" class="calibre16">
#+END_HTML

wx.onNetworkStatusChange(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听网络状态变化。

*CALLBACK返回参数：*

| 参数          | 类型      | 说明                 |
|---------------+-----------+----------------------|
| isConnected   | Boolean   | 当前是否有网络连接   |
| networkType   | String    | 网络类型             |

*networkType 有效值：*

| 值        | 说明                        |
|-----------+-----------------------------|
| wifi      | wifi 网络                   |
| 2g        | 2g 网络                     |
| 3g        | 3g 网络                     |
| 4g        | 4g 网络                     |
| none      | 无网络                      |
| unknown   | Android下不常见的网络类型   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onNetworkStatusChange(function(res) {
      console.log(res.isConnected)
      console.log(res.networkType)
    })
#+END_EXAMPLE

\\
\\
\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-device.html]]

\\
\\
| [[../index_u33.html#article_89][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u78.html>>

| [[../article_91/index_u24.html][下一项]] |
[[../index_u33.html#article_90][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_89/index_u5.html][上一项]] |

--------------

** wx.onAccelerometerChange(CALLBACK)
   :PROPERTIES:
   :CUSTOM_ID: index_u78.html#wxonaccelerometerchangecallback
   :CLASS: calibre16
   :END:

--------------

监听重力感应数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopAccelerometer=停止监听。\\

*CALLBACK返回参数：*

| 参数   | 类型     | 说明   |
|--------+----------+--------|
| x      | Number   | X 轴   |
| y      | Number   | Y 轴   |
| z      | Number   | Z 轴   |

**

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onAccelerometerChange(function(res) {
      console.log(res.x)
      console.log(res.y)
      console.log(res.z)
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxstartaccelerometerobject" class="calibre16">
#+END_HTML

wx.startAccelerometer(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

  微信客户端 6.5.6 版本开始支持
#+END_QUOTE

开始监听加速度数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startAccelerometer()
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxstopaccelerometerobject" class="calibre16">
#+END_HTML

wx.stopAccelerometer(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

  微信客户端 6.5.6 版本开始支持
#+END_QUOTE

停止监听加速度数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.stopAccelerometer()
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html]]

\\
\\
| [[../index_u33.html#article_90][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u24.html>>

| [[../article_92/index_u37.html][下一项]] |
[[../index_u33.html#article_91][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_90/index_u78.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onCompassChange(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopCompass=停止监听。\\

*CALLBACK返回参数：*

| 参数        | 类型     | 说明             |
|-------------+----------+------------------|
| direction   | Number   | 面对的方向度数   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onCompassChange(function (res) {
      console.log(res.direction)
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxstartcompassobject" class="calibre16">
#+END_HTML

wx.startCompass(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

开始监听罗盘数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startCompass()
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxstopcompassobject" class="calibre16">
#+END_HTML

wx.stopCompass(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

停止监听罗盘数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.stopCompass()
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-campass.html]]

\\
\\
| [[../index_u33.html#article_91][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u37.html>>

| [[../article_93/index_u38.html][下一项]] |
[[../index_u33.html#article_92][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_91/index_u24.html][上一项]] |

--------------

** wx.makePhoneCall(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u37.html#wxmakephonecallobject
   :CLASS: calibre16
   :END:

--------------

*OBJECT参数说明：*

| 参数          | 类型       | 必填   | 说明                                               |
|---------------+------------+--------+----------------------------------------------------|
| phoneNumber   | String     | 是     | 需要拨打的电话号码                                 |
| success       | Function   | 否     | 接口调用成功的回调                                 |
| fail          | Function   | 否     | 接口调用失败的回调函数                             |
| complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.makePhoneCall({
      phoneNumber: '1340000' //仅为示例，并非真实的电话号码
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html]]

\\
\\
| [[../index_u33.html#article_92][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u38.html>>

| [[../article_94/index_u86.html][下一项]] |
[[../index_u33.html#article_93][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_92/index_u37.html][上一项]] |

--------------

** wx.scanCode(OBJECT)
   :PROPERTIES:
   :CUSTOM_ID: index_u38.html#wxscancodeobject
   :CLASS: calibre16
   :END:

--------------

调起客户端扫码界面，扫码成功后返回对应的结果

*Object 参数说明：*

| 参数             | 类型       | 必填   | 说明                                                 | 最低版本                                                        |
|------------------+------------+--------+------------------------------------------------------+-----------------------------------------------------------------|
| onlyFromCamera   | Boolean    | 否     | 是否只能从相机扫码，不允许从相册选择图片             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| success          | Function   | 否     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |                                                                 |
| fail             | Function   | 否     | 接口调用失败的回调函数                               |                                                                 |
| complete         | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |                                                                 |

*success返回参数说明：*

| 参数       | 说明                                                                          |
|------------+-------------------------------------------------------------------------------|
| result     | 所扫码的内容                                                                  |
| scanType   | 所扫码的类型                                                                  |
| charSet    | 所扫码的字符集                                                                |
| path       | 当所扫的码为当前小程序的合法二维码时，会返回此字段，内容为二维码携带的 path   |

*示例代码：*

#+BEGIN_EXAMPLE
    // 允许从相机和相册扫码
    wx.scanCode({
      success: (res) => {
        console.log(res)
      }
    })

    // 只允许从相机扫码
    wx.scanCode({
      onlyFromCamera: true,
      success: (res) => {
        console.log(res)
      }
    })
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html]]

\\
\\
| [[../index_u33.html#article_93][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u86.html>>

| [[../article_95/index_u43.html][下一项]] |
[[../index_u33.html#article_94][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_93/index_u38.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.setClipboardData(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

设置系统剪贴板的内容。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| data       | String     | 是     | 需要设置的内容                                     |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.setClipboardData({
      data: 'data',
      success: function(res) {
        wx.getClipboardData({
          success: function(res) {
            console.log(res.data) // data
          }
        })
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 id="wxgetclipboarddataobject" class="calibre16">
#+END_HTML

wx.getClipboardData(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取系统剪贴板内容

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数   | 类型     | 说明           |
|--------+----------+----------------|
| data   | String   | 剪贴板的内容   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getClipboardData({
      success: function(res){
        console.log(res.data)
      }
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-clipboard.html]]

\\
\\
| [[../index_u33.html#article_94][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u43.html>>

| [[../article_96/index_u47.html][下一项]] |
[[../index_u33.html#article_95][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_94/index_u86.html][上一项]] |

--------------

** 蓝牙适配器接口
   :PROPERTIES:
   :CLASS: calibre16
   :END:

--------------

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

  iOS 微信客户端 6.5.6 版本开始支持，Android 客户端暂不支持
#+END_QUOTE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.openBluetoothAdapter(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

初始化蓝牙适配器

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 成功则返回成功初始化信息                           |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.openBluetoothAdapter({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: 由于系统的问题，目前仅在 mac 版的开发工具上支持蓝牙调试
2. =tip=: 基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.closeBluetoothAdapter(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

关闭蓝牙模块。调用该方法将断开所有已建立的链接并释放系统资源

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 成功则返回成功关闭模块信息                         |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.closeBluetoothAdapter({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getBluetoothAdapterState(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取本机蓝牙适配器状态

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数          | 类型      | 说明                       |
|---------------+-----------+----------------------------|
| discovering   | Boolean   | 是否正在搜索设备           |
| available     | Boolean   | 蓝牙适配器是否可用         |
| errMsg        | String    | 成功：ok，错误：详细信息   |

**** *示例代码：*\\
     :PROPERTIES:
     :CUSTOM_ID: index_u43.html#adapterstate
     :CLASS: calibre12
     :END:

#+BEGIN_EXAMPLE
    wx.getBluetoothAdapterState({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onBluetoothAdapterStateChange(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听蓝牙适配器状态变化事件

*CALLBACK参数说明：*

| 参数          | 类型      | 说明                         |
|---------------+-----------+------------------------------|
| available     | boolean   | 蓝牙适配器是否可用           |
| discovering   | boolean   | 蓝牙适配器是否处于搜索状态   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onBluetoothAdapterStateChange(function(res) {
      console.log(`adapterState changed, now is`, res)
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.startBluetoothDevicesDiscovery(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用
stop 方法停止搜索。

*OBJECT参数说明：*

| 参数                 | 类型       | 必填   | 说明                                                                                                        |
|----------------------+------------+--------+-------------------------------------------------------------------------------------------------------------|
| services             | Array      | 否     | 蓝牙设备主 service 的 uuid 列表                                                                             |
| allowDuplicatesKey   | boolean    | 否     | 是否允许重复上报同一设备， 如果允许重复上报，则onDeviceFound 方法会多次上报同一设备，但是 RSSI 值会有不同   |
| interval             | integer    | 否     | 上报设备的间隔，默认为0，意思是找到新设备立即上报，否则根据传入的间隔上报                                   |
| success              | Function   | 是     | 成功则返回本机蓝牙适配器状态                                                                                |
| fail                 | Function   | 否     | 接口调用失败的回调函数                                                                                      |
| complete             | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                            |

*services*参数说明：某些蓝牙设备会广播自己的主 service 的
uuid。如果这里传入该数组，那么根据该 uuid
列表，只搜索有这个主服务的设备。

*success返回参数：*

| 参数            | 类型      | 说明                             |
|-----------------+-----------+----------------------------------|
| errMsg          | string    | 成功：ok，错误：详细信息         |
| isDiscovering   | boolean   | 当前蓝牙适配器是否处于搜索状态   |

*示例代码：*\\

#+BEGIN_EXAMPLE
    // 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备
    wx.startBluetoothDevicesDiscovery({
      services: ['FEE7'],
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.stopBluetoothDevicesDiscovery(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

停止搜寻附近的蓝牙外围设备。请在确保找到需要连接的设备后调用该方法停止搜索。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数     | 类型     | 说明                       |
|----------+----------+----------------------------|
| errMsg   | string   | 成功：ok，错误：详细信息   |

*adapterState*

蓝牙适配器状态信息

| 参数          | 类型      | 说明                 |
|---------------+-----------+----------------------|
| discovering   | boolean   | 是否正在搜索设备     |
| available     | boolean   | 蓝牙适配器是否可用   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.stopBluetoothDevicesDiscovery({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getBluetoothDevices(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数      | 类型     | 说明                          |
|-----------+----------+-------------------------------|
| devices   | Array    | uuid 对应的的已连接设备列表   |
| errMsg    | string   | 成功：ok，错误：详细信息      |

*device 对象*

蓝牙设备信息

| 参数           | 类型          | 说明                                                                         |
|----------------+---------------+------------------------------------------------------------------------------|
| name           | string        | 蓝牙设备名称，某些设备可能没有                                               |
| deviceId       | string        | 用于区分设备的 id                                                            |
| RSSI           | int           | 当前蓝牙设备的信号强度                                                       |
| advertisData   | ArrayBuffer   | 当前蓝牙设备的广播内容*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getBluetoothDevices({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: Mac系统可能无法获取=advertisData=及=RSSI=，请使用真机调试
2. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
   上则为设备 uuid。因此=deviceId=不能硬编码到代码中

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getConnectedBluetoothDevices(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

根据 uuid 获取处于已连接状态的设备

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| services   | Array      | 是     | 蓝牙设备主 service 的 uuid 列表                    |
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数      | 类型     | 说明                       |
|-----------+----------+----------------------------|
| devices   | Array    | 搜索到的设备列表           |
| errMsg    | string   | 成功：ok，错误：详细信息   |

*device对象*

蓝牙设备信息

| 参数       | 类型     | 说明                             |
|------------+----------+----------------------------------|
| name       | string   | 蓝牙设备名称，某些设备可能没有   |
| deviceId   | string   | 用于区分设备的 id                |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getConnectedBluetoothDevices({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
   上则为设备 uuid。因此=deviceId=不能硬编码到代码中

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onBluetoothDeviceFound(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听寻找到新设备的事件

*CALLBACK参数说明：*

| 参数      | 类型    | 说明                 |
|-----------+---------+----------------------|
| devices   | Array   | 新搜索到的设备列表   |

*device对象*

| 参数           | 类型          | 说明                                                                         |
|----------------+---------------+------------------------------------------------------------------------------|
| deviceId       | string        | 蓝牙设备 id，参考 device 对象                                                |
| name           | string        | 蓝牙设备名称，参考 device 对象                                               |
| RSSI           | int           | 当前蓝牙设备的信号强度                                                       |
| advertisData   | ArrayBuffer   | 当前蓝牙设备的广播内容*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onBluetoothDeviceFound(function(devices) {
      console.log('new device list has founded')
      console.dir(devices)
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: Mac系统可能无法获取=advertisData=及=RSSI=，请使用真机调试
2. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
   上则为设备 uuid。因此=deviceId=不能硬编码到代码中

* 低功耗蓝牙接口
  :PROPERTIES:
  :CLASS: calibre44
  :END:

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.createBLEConnection(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

连接低功耗蓝牙设备

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数     | 类型     | 说明                       |
|----------+----------+----------------------------|
| errMsg   | string   | 成功：ok，错误：详细信息   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.createBLEConnection({
      // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
      deviceId: deviceId,
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.closeBLEConnection(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

断开与低功耗蓝牙设备的连接

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数     | 类型     | 说明                       |
|----------+----------+----------------------------|
| errMsg   | string   | 成功：ok，错误：详细信息   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.closeBLEConnection({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getBLEDeviceServices(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取蓝牙设备所有 service（服务）

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数       | 类型     | 说明                       |
|------------+----------+----------------------------|
| services   | array    | 设备服务列表               |
| errMsg     | string   | 成功：ok，错误：详细信息   |

*service对象*

蓝牙设备service(服务)信息

| 参数        | 类型      | 说明                  |
|-------------+-----------+-----------------------|
| uuid        | string    | 蓝牙设备服务的 uuid   |
| isPrimary   | boolean   | 该服务是否为主服务    |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getBLEDeviceServices({
      // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
      deviceId: deviceId,
      success: function (res) {
        console.log('device services:', res.services)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getBLEDeviceCharacteristics(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取蓝牙设备所有 characteristic（特征值）

*OBJECT参数说明：*

| 参数        | 类型       | 必填   | 说明                                               |
|-------------+------------+--------+----------------------------------------------------|
| deviceId    | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
| serviceId   | string     | 是     | 蓝牙服务 uuid                                      |
| success     | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail        | Function   | 否     | 接口调用失败的回调函数                             |
| complete    | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数              | 类型     | 说明                       |
|-------------------+----------+----------------------------|
| characteristics   | array    | 设备特征值列表             |
| errMsg            | string   | 成功：ok，错误：详细信息   |

*characteristic对象*

蓝牙设备characteristic(特征值)信息

| 参数         | 类型     | 说明                     |
|--------------+----------+--------------------------|
| uuid         | string   | 蓝牙设备特征值的 uuid    |
| properties   | object   | 该特征值支持的操作类型   |

*properties对象*

| 参数       | 类型      | 说明                             |
|------------+-----------+----------------------------------|
| read       | boolean   | 该特征值是否支持 read 操作       |
| write      | boolean   | 该特征值是否支持 write 操作      |
| notify     | boolean   | 该特征值是否支持 notify 操作     |
| indicate   | boolean   | 该特征值是否支持 indicate 操作   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getBLEDeviceCharacteristics({
      // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
      deviceId: deviceId,
      // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
      serviceId: serviceId,
      success: function (res) {
        console.log('device getBLEDeviceCharacteristics:', res.characteristics)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.readBLECharacteristicValue(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持=read=才可以成功调用，具体参照
characteristic 的 properties 属性

*OBJECT参数说明：*

| 参数               | 类型       | 必填   | 说明                                               |
|--------------------+------------+--------+----------------------------------------------------|
| deviceId           | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
| serviceId          | string     | 是     | 蓝牙特征值对应服务的 uuid                          |
| characteristicId   | string     | 是     | 蓝牙特征值的 uuid                                  |
| success            | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail               | Function   | 否     | 接口调用失败的回调函数                             |
| complete           | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数             | 类型     | 说明                       |
|------------------+----------+----------------------------|
| characteristic   | object   | 设备特征值信息             |
| errMsg           | string   | 成功：ok，错误：详细信息   |

*characteristic对象*

蓝牙设备characteristic(特征值)信息

| 参数               | 类型          | 说明                                                                               |
|--------------------+---------------+------------------------------------------------------------------------------------|
| characteristicId   | string        | 蓝牙设备特征值的 uuid                                                              |
| serviceId          | object        | 蓝牙设备特征值对应服务的 uuid                                                      |
| value              | ArrayBuffer   | 蓝牙设备特征值对应的二进制值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

*示例代码：*

#+BEGIN_EXAMPLE
    // 必须在这里的回调才能获取
    wx.onBLECharacteristicValueChange(function(characteristic) {
      console.log('characteristic value comed:', characteristic)
    })

    wx.readBLECharacteristicValue({
      // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
      deviceId: deviceId,
      // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
      serviceId: serviceId,
      // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
      characteristicId: characteristicId,
      success: function (res) {
        console.log('readBLECharacteristicValue:', res.characteristic.value)
      }
    })
#+END_EXAMPLE

** Bug & Tip
   :PROPERTIES:
   :CLASS: calibre16
   :END:

1. =tip=: 并行调用多次读写接口存在读写失败的可能性。
2. =tip=:=read=接口读取到的信息需要在=onBLECharacteristicValueChange=方法注册的回调中获取。

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.writeBLECharacteristicValue(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持=write=才可以成功调用，具体参照
characteristic 的 properties 属性

/tips: 并行调用多次读写接口存在读写失败的可能性/

*OBJECT参数说明：*

| 参数               | 类型          | 必填   | 说明                                                                               |
|--------------------+---------------+--------+------------------------------------------------------------------------------------|
| deviceId           | string        | 是     | 蓝牙设备 id，参考 device 对象                                                      |
| serviceId          | string        | 是     | 蓝牙特征值对应服务的 uuid                                                          |
| characteristicId   | string        | 是     | 蓝牙特征值的 uuid                                                                  |
| value              | ArrayBuffer   | 是     | 蓝牙设备特征值对应的二进制值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |
| success            | Function      | 是     | 成功则返回本机蓝牙适配器状态                                                       |
| fail               | Function      | 否     | 接口调用失败的回调函数                                                             |
| complete           | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                   |

*success返回参数：*

| 参数     | 类型     | 说明                       |
|----------+----------+----------------------------|
| errMsg   | string   | 成功：ok，错误：详细信息   |

*示例代码：*

#+BEGIN_EXAMPLE
    // 这里的回调可以获取到 write 导致的特征值改变
    wx.onBLECharacteristicValueChange(function(characteristic) {
      console.log('characteristic value changed:', characteristic)
    })

    // 向蓝牙设备发送一个0x00的16进制数据
    let buffer = new ArrayBuffer(1)
    let dataView = new DataView(buffer)
    dataView.setUint8(0, 0)

    wx.writeBLECharacteristicValue({
      // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
      deviceId: deviceId,
      // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
      serviceId: serviceId,
      // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
      characteristicId: characteristicId,
      // 这里的value是ArrayBuffer类型
      value: buffer,
      success: function (res) {
        console.log('writeBLECharacteristicValue success', res.errMsg)
      }
    })
#+END_EXAMPLE

** wx.notifyBLECharacteristicValueChanged(OBJECT)
   :PROPERTIES:
   :CLASS: calibre16
   :END:

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

启用低功耗蓝牙设备特征值变化时的 notify
功能。注意：必须设备的特征值支持=notify=才可以成功调用，具体参照
characteristic 的 properties 属性

另外，必须先启用=notify=才能监听到设备 characteristicValueChange 事件

*OBJECT参数说明：*

| 参数               | 类型       | 必填   | 说明                                               |
|--------------------+------------+--------+----------------------------------------------------|
| deviceId           | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
| serviceId          | string     | 是     | 蓝牙特征值对应服务的 uuid                          |
| characteristicId   | string     | 是     | 蓝牙特征值的 uuid                                  |
| state              | boolean    | 是     | true: 启用 notify; false: 停用 notify              |
| success            | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail               | Function   | 否     | 接口调用失败的回调函数                             |
| complete           | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数     | 类型     | 说明                       |
|----------+----------+----------------------------|
| errMsg   | string   | 成功：ok，错误：详细信息   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.notifyBLECharacteristicValueChanged({
      state: true, // 启用 notify 功能
      // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
      deviceId: deviceId,
      // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
      serviceId: serviceId,
      // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
      characteristicId: characteristicId,
      success: function (res) {
        console.log('notifyBLECharacteristicValueChanged success', res.errMsg)
      }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onBLEConnectionStateChanged(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等。

*CALLBACK参数说明：*

| 参数        | 类型      | 说明                            |
|-------------+-----------+---------------------------------|
| deviceId    | string    | 蓝牙设备 id，参考 device 对象   |
| connected   | boolean   | 连接目前的状态                  |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onBLEConnectionStateChanged(function(res) {
      // 该方法回调中可以用于处理连接意外断开等异常情况
      console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onBLECharacteristicValueChange(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听低功耗蓝牙设备的特征值变化。必须先启用=notify=接口才能接收到设备推送的notification。

*CALLBACK参数说明：*

| 参数               | 类型          | 说明                                                                 |
|--------------------+---------------+----------------------------------------------------------------------|
| deviceId           | string        | 蓝牙设备 id，参考 device 对象                                        |
| serviceId          | string        | 特征值所属服务 uuid                                                  |
| characteristicId   | string        | 特征值 uuid                                                          |
| value              | ArrayBuffer   | 特征值最新的值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onBLECharacteristicValueChange(function(res) {
      console.log(`characteristic ${res.characteristicId} has changed, now is ${res.value}`)
    })
#+END_EXAMPLE

** 蓝牙错误码(errCode)列表
   :PROPERTIES:
   :CLASS: calibre16
   :END:

| 错误码   | 说明                   | 备注                                           |
|----------+------------------------+------------------------------------------------|
| 0        | ok                     | 正常                                           |
| 10000    | not init               | 未初始化蓝牙适配器                             |
| 10001    | not available          | 当前蓝牙适配器不可用                           |
| 10002    | no device              | 没有找到指定设备                               |
| 10003    | connection fail        | 连接失败                                       |
| 10004    | no service             | 没有找到指定服务                               |
| 10005    | no characteristic      | 没有找到指定特征值                             |
| 10006    | no connection          | 当前连接已断开                                 |
| 10007    | property not support   | 当前特征值不支持此操作                         |
| 10008    | system error           | 其余所有系统上报的异常                         |
| 10009    | system not support     | Android 系统特有，系统版本低于 4.3 不支持BLE   |
| 10010    | no descriptor          | 没有找到指定描述符                             |

[[https://mp.weixin.qq.com/debug/wxadoc/dev/api/clipboard.html#wxgetclipboarddataobject][<<>>]]\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-bluetooth.html]]

\\
\\
| [[../index_u33.html#article_95][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u47.html>>

| [[../article_97/index_u80.html][下一项]] |
[[../index_u33.html#article_96][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_95/index_u43.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.startBeaconDiscovery(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

开始搜索附近的=iBeacon=设备

*OBJECT参数说明：*

| 参数名     | 类型          | 必填   | 说明                                               |
|------------+---------------+--------+----------------------------------------------------|
| uuids      | StringArray   | 是     | iBeacon设备广播的 uuids                            |
| success    | Function      | 否     | 接口调用成功的回调函数                             |
| fail       | Function      | 否     | 接口调用失败的回调函数                             |
| complete   | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数名   | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 调用结果   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startBeaconDiscovery({
        success(res) {
        }
    })
#+END_EXAMPLE

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.stopBeaconDiscovery(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[https://mp.weixin.qq.com/debug/wxadoc/dev/framework/compatibility.html][兼容处理]]
#+END_QUOTE

停止搜索附近的=iBeacon=设备

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数名   | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 调用结果   |

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getBeacons(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取所有已搜索到的=iBeacon=设备

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数名    | 类型          | 说明               |
|-----------+---------------+--------------------|
| beacons   | ObjectArray   | iBeacon 设备列表   |
| errMsg    | String        | 调用结果           |

*iBeacon 结构：*

| 参数        | 类型     | 说明                      |
|-------------+----------+---------------------------|
| uuid        | String   | iBeacon 设备广播的 uuid   |
| major       | String   | iBeacon 设备的主 id       |
| minor       | String   | iBeacon 设备的次 id       |
| proximity   | Number   | 表示设备距离的枚举值      |
| accuracy    | Number   | iBeacon 设备的距离        |
| rssi        | Number   | 表示设备的信号强度        |

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onBeaconUpdate(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听=iBeacon=设备的更新事件

*CALLBACK返回参数说明：*

| 参数名    | 类型           | 说明                                |
|-----------+----------------+-------------------------------------|
| beacons   | array object   | 当前搜寻到的所有 iBeacon 设备列表   |

*iBeacon 结构：*

| 参数        | 类型     | 说明                      |
|-------------+----------+---------------------------|
| uuid        | String   | iBeacon 设备广播的 uuid   |
| major       | String   | iBeacon 设备的主 id       |
| minor       | String   | iBeacon 设备的次 id       |
| proximity   | Number   | 表示设备距离的枚举值      |
| accuracy    | Number   | iBeacon 设备的距离        |
| rssi        | Number   | 表示设备的信号强度        |

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onBeaconServiceChange(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听=iBeacon=服务的状态变化

*CALLBACK返回参数说明：*

| 参数名        | 类型      | 说明                   |
|---------------+-----------+------------------------|
| available     | Boolean   | 服务目前是否可用       |
| discovering   | Boolean   | 目前是否处于搜索状态   |

** 错误码列表
   :PROPERTIES:
   :CLASS: calibre16
   :END:

| 错误码   | 说明                            | 备注               |
|----------+---------------------------------+--------------------|
| 0        | ok                              | 正常               |
| 11000    | unsupport                       | 系统或设备不支持   |
| 11001    | bluetooth service unavailable   | 蓝牙服务不可用     |
| 11002    | location service unavailable    | 位置服务不可用     |
| 11003    | already start                   | 已经开始搜索       |

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-ibeacon.html]]

\\
\\
| [[../index_u33.html#article_96][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u80.html>>

| [[../article_98/index_u26.html][下一项]] |
[[../index_u33.html#article_97][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_96/index_u47.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.setScreenBrightness(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

设置屏幕亮度。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| value      | Number     | 是     | 屏幕亮度值，范围 0~1，0 最暗，1 最亮               |
| success    | Function   | 否     | 接口调用成功                                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.getScreenBrightness(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取屏幕亮度。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功                                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数    | 类型     | 说明                                   |
|---------+----------+----------------------------------------|
| value   | Number   | 屏幕亮度值，范围 0~1，0 最暗，1 最亮   |

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.setKeepScreenOn(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。

*OBJECT参数说明：*

| 参数名         | 类型       | 必填   | 说明                                               |
|----------------+------------+--------+----------------------------------------------------|
| keepScreenOn   | Boolean    | 是     | 是否保持屏幕常亮                                   |
| success        | Function   | 否     | 接口调用成功的回调函数                             |
| fail           | Function   | 否     | 接口调用失败的回调函数                             |
| complete       | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数名   | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 调用结果   |

*示例代码：*

#+BEGIN_EXAMPLE
    // 保持屏幕常亮
    wx.setKeepScreenOn({
        keepScreenOn: true
    })
#+END_EXAMPLE

\\

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-screenbrightness.html]]

\\
\\
| [[../index_u33.html#article_97][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u26.html>>

| [[../article_99/index_u3.html][下一项]] |
[[../index_u33.html#article_98][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_97/index_u80.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.onUserCaptureScreen(CALLBACK)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件

*CALLBACK返回参数：*

无

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onUserCaptureScreen(function(res) {
        console.log('用户截屏了')
    })
#+END_EXAMPLE

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-onusercapturescreen.html]]

\\
\\
| [[../index_u33.html#article_98][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |

<<index_u3.html>>

| [[../../feed_1/index.html][下一项]] |
[[../index_u33.html#article_99][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
[[../article_98/index_u26.html][上一项]] |

--------------

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.vibrateLong(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

使手机发生较长时间的振动（400ms）

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

#+BEGIN_HTML
  <h2 class="calibre16">
#+END_HTML

wx.vibrateShort(OBJECT)

--------------

#+BEGIN_HTML
  </h2>
#+END_HTML

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

使手机发生较短时间的振动（15ms）

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                               |
|------------+------------+--------+----------------------------------------------------|
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

**** Bug & Tip
     :PROPERTIES:
     :CLASS: calibre12
     :END:

1. =tip=：=vibrateShort=接口仅在 iPhone7/iPhone7Plus 及 Android 机型生效
2. =tip=:=getScreenBrightness=接口若安卓系统设置中开启了自动调节亮度功能，则屏幕亮度会根据光线自动调整，该接口仅能获取自动调节亮度之前的值，而非实时的亮度值。

--------------

This article was downloaded by *calibre* from
[[http://caibaojian.com/weixinapp/weixinapp-vibrate.html]]

\\
\\
| [[../index_u33.html#article_99][段落菜单]] |
[[../../index_u69.html#feed_0][主菜单]] |
