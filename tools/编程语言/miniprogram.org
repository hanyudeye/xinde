#+TITLE: 微信小程序简介
#+DESCRIPTION: 微信小程序简介
#+TAGS: 小程序
#+CATEGORIES: 框架使用

* 小程序
** [[file:][微信小程序 框架]]
*** [[filel][MINA 目录结构]]
*** [[filel][小程序配置]]
*** [[filel][逻辑层(App Service)]]
**** [[filml][微信小程序 注册程序]]
**** [[filml][微信小程序 场景值]]
**** [[filml][微信小程序 注册页面]]
**** [[filml][微信小程序 路由]]
**** [[fitml][微信小程序 模块化]]
**** [[fihtml][小程序 API]]
*** [[filtml][视图层(View)]]
**** [[fihtml][微信小程序 WXML]]
***** [[f.html][微信小程序 数据绑定]]
***** [[f.html][微信小程序 列表渲染]]
***** [[f.html][微信小程序 条件渲染]]
***** [[f.html][微信小程序 模板]]
***** [[fhtml][微信小程序 事件]]
***** [[f.html][微信小程序 引用]]
***** [[f.html][微信小程序 WXS]]
****** [[2.html][微信小程序 WXS模块]]
****** [[4.html][微信小程序 变量]]
****** [[9.html][微信小程序 注释]]
****** [[.html][微信小程序 运算符]]
****** [[0.html][微信小程序 语句]]
****** [[5.html][微信小程序 数据类型]]
****** [[8.html][微信小程序 基础类库]]
**** [[fihtml][微信小程序 WXSS]]
**** [[fihtml][微信小程序 组件]]
*** [[filtml][微信小程序 基础库]]
*** [[filml][微信小程序 兼容]]
*** [[filtml][微信小程序 运行机制]]
*** [[filtml][性能]]
**** [[fihtml][微信小程序 性能Trace工具]]
**** [[fihtml][微信小程序 优化建议]]
** [[fileml][微信小程序 组件]]
*** [[filtml][wxapp视图容器 view]]
*** [[filtml][wxapp视图容器 scroll-view]]
*** [[filtml][wxapp视图容器 swiper]]
*** [[filtml][wxapp视图容器 movable-area]]
*** [[filtml][wxapp视图容器 cover-view]]
*** 内容组件 
**** [[fihtml][wxapp内容组件 icon]]
**** [[fihtml][wxapp内容组件 text]]
**** [[fihtml][wxapp内容组件 rich-text]]
**** [[fihtml][wxapp内容组件 progress]]
*** [[filtml][表单组件]]
**** [[fihtml][wxapp表单组件 button]]
**** [[fihtml][wxapp表单组件 checkbox]]
**** [[fihtml][wxapp表单组件 form]]
**** [[fitml][wxapp表单组件 input]]
**** [[fihtml][wxapp表单组件 label]]
**** [[fi.html][wxapp表单组件 picker]]
**** [[fihtml][wxapp表单组件 picker-view]]
**** [[fihtml][wxapp表单组件 radio]]
**** [[fihtml][wxapp表单组件 slider]]
**** [[fihtml][wxapp表单组件 switch]]
**** [[fihtml][wxapp表单组件 textarea]]
*** [[filtml][wxapp导航 navigator]]
*** 媒体组件 
**** [[fihtml][wxapp媒体组件 audio]]
**** [[fihtml][wxapp媒体组件 image]]
**** [[fihtml][wxapp媒体组件 video]]
**** [[fitml][wxapp媒体组件 camera]]
*** [[file:article_63/index.html][wxapp地图 map]]
*** [[filtml][wxapp画布 canvas]]
*** 开放数据 
**** [[fihtml][wxapp开放数据 open-data]]
**** [[fihtml][wxapp承载网页 web-view]]
**** [[fihtml][wxapp客服会话 contact-button]]
** [[fileml][API]]
*** [[filtml][网络]]
**** [[fihtml][微信小程序API 发起请求]]
**** [[fihtml][微信小程序API 上传、下载]]
**** [[fihtml][微信小程序API Websocket]]
*** 媒体
**** [[fihtml][微信小程序API 图片]]
**** [[fihtml][微信小程序API 录音]]
**** [[fihtml][微信小程序API 音频播放控制]]
**** [[fi.html][微信小程序API 音乐播放控制]]
**** [[fihtml][微信小程序API 背景音频播放管理]]
**** [[fihtml][微信小程序API 音频组件控制]]
**** [[fihtml][微信小程序API 视频]]
**** [[fihtml][微信小程序API 视频组件控制]]
**** [[fihtml][微信小程序API 相机组件控制]]
*** [[filtml][微信小程序API 文件]]
*** [[filtml][微信小程序API 数据缓存]]
*** 位置
**** [[fihtml][微信小程序API 获取位置]]
**** [[fihtml][微信小程序API 查看位置]]
**** [[fitml][微信小程序API 地图组件控制]]
*** [[filtml][设备]]
**** [[fihtml][微信小程序API 系统信息]]
**** [[fitml][微信小程序API 网络状态]]
**** [[fihtml][微信小程序API 加速度计]]
**** [[fihtml][微信小程序API 罗盘]]
**** [[fihtml][微信小程序API 拨打电话]]
**** [[fihtml][微信小程序API 扫码]]
**** [[fihtml][微信小程序API 剪贴板]]
**** [[f.html][微信小程序API 蓝牙]]
**** [[f.html][微信小程序API iBeacon]]
**** [[f.html][微信小程序API 屏幕亮度]]
**** [[f.html][微信小程序API 用户截屏事件]]
**** [[fhtml][微信小程序API 振动]]
* 框架    
** 配置
   app.json 配置项列表
| 属性           | 类型         | 必填 | 描述                    |

| [[#index_u99.html#pages][pages]]          | String Array | 是   | 设置页面路径            |
| [[#index_u99.html#window][window]]         | Object       | 否   | 设置默认页面的窗口表现  |
| [[#index_u99.html#tabBar][tabBar]]         | Object       | 否   | 设置底部 tab 的表现     |
| [[#index_u99.html#networkTimeout][networkTimeout]] | Object       | 否   | 设置网络超时时间        |
| [[#index_u99.html#debug][debug]]          | Boolean      | 否   | 设置是否开启 debug 模式 |

*** window
用于设置小程序的状态栏、导航条、标题、窗口背景色。

| 属性                         | 类型     | 默认值  | 描述                                              |

| navigationBarBackgroundColor | HexColor | #000000 | 导航栏背景颜色，如"#000000"                       |
| navigationBarTextStyle       | String   | white   | 导航栏标题颜色，仅支持 black/white                |
| navigationBarTitleText       | String   |         | 导航栏标题文字内容                                |
| backgroundColor              | HexColor | #ffffff | 窗口的背景色                                      |
| backgroundTextStyle          | String   | dark    | 下拉背景字体、loading 图的样式，仅支持 dark/light |
| enablePullDownRefresh        | Boolean  | false   | 是否开启下拉刷新，详见[[http://caibaojian.com/weixinapp/weixinapp-page.html#页面相关事件处理函数][页面相关事件处理函数]]。      |
| onReachBottomDistance        | Number   | 50      | 页面上拉触底事件触发时距页面底部距离，单位为px    |

*** tabBar
如果我们的小程序是一个多 tab应用（客户端窗口的底部有tab栏可以切换页面），那么我
们可以通过 tabBar配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。
 
| 属性              | 类型       | 必填   | 默认值   | 描述                                                   |

| color             | HexColor   | 是     |          | tab 上的文字默认颜色                                   |
| selectedColor     | HexColor   | 是     |          | tab 上的文字选中时的颜色                               |
| backgroundColor   | HexColor   | 是     |          | tab 的背景色                                           |
| borderStyle       | String     | 否     | black    | tabbar上边框的颜色， 仅支持 black/white                |
| list              | Array      | 是     |          | tab 的列表，详见 list 属性说明，最少2个、最多5个 tab   |
| position          | String     | 否     | bottom   | 可选值 bottom、top                                     |

其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：

| 属性             | 类型   | 必填 | 说明                                                                                             |

| pagePath         | String | 是   | 页面路径，必须在 pages 中先定义                                                                  |
| text             | String | 是   | tab 上按钮文字                                                                                   |
| iconPath         | String | 否   | 图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效          |
| selectedIconPath | String | 否   | 选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效 |

** 逻辑层
*** 路由
| 路由方式   | 触发时机                                                                                          |

| 初始化     | 小程序打开的第一个页面                                                                            |
| 打开新页面 | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigatetoobject][=wx.navigateTo=]] 或使用组件 [[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="navigateTo"/>=]]                         |
| 页面重定向 | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxredirecttoobject][=wx.redirectTo=]] 或使用组件 [[https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html][=<navigator open-type="redirectTo"/>=]]                         |
| 页面返回   | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigatebackobject][=wx.navigateBack=]] 或使用组件[[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="navigateBack">=]]或用户按左上角返回按钮 |
| Tab 切换   | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxswitchtabobject][=wx.switchTab=]] 或使用组件 [[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="switchTab"/>=]] 或用户切换 Tab            |
| 重启动     | 调用 API [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxrelaunchobject][=wx.reLaunch=]] 或使用组件 [[http://caibaojian.com/weixinapp/weixinapp-navigator.html][=<navigator open-type="reLaunch"/>=]]                             |

*** 模块化
 我们可以将一些公共的代码抽离成为一个单独的js文件，作为一个模块。模块只有通过=module.exports=或者 =exports=才能对外暴露接口。

 需要注意的是：

 - =exports=是=module.exports=的一个引用，因此在模块里边随意更改=exports=的指向会造成未知的错误。所以我们更推荐开发者采用=module.exports=来暴露模块接口，除非你已经清晰知道这两者的关系。
 - 小程序目前不支持直接引入=node_modules=，开发者需要使用到=node_modules=时候建议拷贝出相关的代码到小程序的目录中。

 \\
 #+BEGIN_EXAMPLE
     // common.js
     function sayHello(name) {
       console.log('Hello ${name} !')
     }
     function sayGoodbye(name) {
       console.log('Goodbye ${name} !')
     }

     module.exports.sayHello = sayHello
     exports.sayGoodbye = sayGoodbye
 #+END_EXAMPLE

 在需要使用这些模块的文件中，使用=require(path)=将公共代码引入。

 #+BEGIN_EXAMPLE
     var common = require('common.js')
     Page({
       helloMINA: function() {
         common.sayHello('MINA')
       }
       goodbyeMINA: function() {
         common.sayGoodbye('MINA')
       }
     })
 #+END_EXAMPLE

** 视图层
*** WXML
**** [[file:weixinapp-list.html][列表渲染]]
  #+BEGIN_EXAMPLE
      <!--wxml-->
      <view wx:for-items="{{array}}"> {{item}} </view>
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
      // page.js
      Page({
        data: {
          array: [1, 2, 3, 4, 5]
        }
      })
  #+END_EXAMPLE

**** [[file:weixinapp-conditional.html][条件渲染]]
  #+BEGIN_EXAMPLE
      <!--wxml-->
      <view wx:if="{{view == 'WEBVIEW'}}"> WEBVIEW </view>
      <view wx:elif="{{view == 'APP'}}"> APP </view>
      <view wx:else="{{view == 'MINA'}}"> MINA </view>
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
      // page.js
      Page({
        data: {
          view: 'MINA'
        }
      })
  #+END_EXAMPLE

***** 算数运算
   #+BEGIN_EXAMPLE
       <view> {{a + b}} + {{c}} + d </view>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           a: 1,
           b: 2,
           c: 3
         }
       })
   #+END_EXAMPLE

   view中的内容为=3 + 3 + d=。

***** 逻辑判断
      
  
   
      

   #+BEGIN_EXAMPLE
       <view wx:if="{{length > 5}}"> </view>
   #+END_EXAMPLE

***** 字符串运算
   #+BEGIN_EXAMPLE
       <view>{{"hello" + name}}</view>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data:{
           name:"MINA"
         }
       })
   #+END_EXAMPLE

***** 数据路径运算
  #+BEGIN_EXAMPLE
      <view>{{object.key}} {{array[0]}}</view>
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
      Page({
        data: {
          object: {
            key: 'Hello '
          },
          array: ['MINA']
        }
      })
  #+END_EXAMPLE

***** 数组
   #+BEGIN_EXAMPLE
       <view wx:for-items="{{[zero, 1, 2, 3, 4]}}"> {{item}} </view>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           zero: 0
         }
       })
   #+END_EXAMPLE

   最终组合成数组[0, 1, 2, 3, 4]。

***** 对象
   #+BEGIN_EXAMPLE
       <template is="objectCombine" data="{{for: a, bar: b}}"></template>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           a: 1,
           b: 2
         }
       })
   #+END_EXAMPLE

   最终组合成的对象是={for: 1, bar: 2}=

   也可以用扩展运算符=...=来将一个对象展开

   #+BEGIN_EXAMPLE
       <template is="objectCombine" data="{{...obj1, ...obj2, e: 5}}"></template>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           obj1: {
             a: 1,
             b: 2
           },
           obj2: {
             c: 3,
             d: 4
           }
         }
       })
   #+END_EXAMPLE

   最终组合成的对象是={a: 1, b: 2, c: 3, d: 4, e: 5}=

   如果对象的key和value相同，也可以间接地表达。

   #+BEGIN_EXAMPLE
       <template is="objectCombine" data="{{foo, bar}}"></template>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           foo: 'my-foo',
           bar: 'my-bar'
         }
       })
   #+END_EXAMPLE

   最终组合成的对象是={foo: 'my-foo', bar:'my-bar'}=。

   *注意：*上述方式可以随意组合，但是如有存在变量名相同的情况，后边的会覆盖前面，如：

   #+BEGIN_EXAMPLE
       <template is="objectCombine" data="{{...obj1, ...obj2, a, c: 6}}"></template>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           obj1: {
             a: 1,
             b: 2
           },
           obj2: {
             b: 3,
             c: 4
           },
           a: 5
         }
       })
   #+END_EXAMPLE

   最终组合成的对象是 ={a: 5, b: 3, c: 6}=。

   *注意：* 花括号和引号之间如果有空格，将最终被解析成为字符串

   #+BEGIN_EXAMPLE
       <view wx:for="{{[1,2,3]}} ">
         {{item}}
       </view>
   #+END_EXAMPLE

   等同于

   #+BEGIN_EXAMPLE
       <view wx:for="{{[1,2,3] + ' '}}">
         {{item}}
       </view>
   #+END_EXAMPLE

   \\



   
   [[http://caibaojian.com/weixinapp/weixinapp-data.html]]

   \\
   \\

 

 

 

 
  



***** wx:for
   在组件上使用 =wx:for=
   控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。

   默认数组的当前项的下标变量名默认为 =index=，数组当前项的变量名默认为
   =item=

   #+BEGIN_EXAMPLE
       <view wx:for="{{array}}">
         {{index}}: {{item.message}}
       </view>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           array: [{
             message: 'foo',
           }, {
             message: 'bar'
           }]
         }
       })
   #+END_EXAMPLE

   使用 =wx:for-item= 可以指定数组当前元素的变量名，

   使用 =wx:for-index= 可以指定数组当前下标的变量名：

   #+BEGIN_EXAMPLE
       <view wx:for="{{array}}" wx:for-index="idx" wx:for-item="itemName">
         {{idx}}: {{itemName.message}}
       </view>
   #+END_EXAMPLE

   =wx:for= 也可以嵌套，下边是一个九九乘法表

   #+BEGIN_EXAMPLE
       <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="i">
         <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="j">
           <view wx:if="{{i <= j}}">
             {{i}} * {{j}} = {{i * j}}
           </view>
         </view>
       </view>
   #+END_EXAMPLE

***** block wx:for
   类似 =block wx:if=，也可以将 =wx:for=
   用在=<block/>=标签上，以渲染一个包含多节点的结构块。例如：

   #+BEGIN_EXAMPLE
       <block wx:for="{{[1, 2, 3]}}">
         <view> {{index}}: </view>
         <view> {{item}} </view>
       </block>
   #+END_EXAMPLE

***** wx:key
   如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如
   =<input/>= 中的输入内容，=<switch/>= 的选中状态），需要使用 =wx:key=
   来指定列表中项目的唯一的标识符。

   =wx:key= 的值以两种形式提供

   1. 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property
      的值需要是列表中唯一的字符串或数字，且不能动态改变。
   2. 保留关键字 =*this= 代表在 for 循环中的 item 本身，这种表示需要 item
      本身是一个唯一的字符串或者数字，如：

   当数据改变触发渲染层重新渲染的时候，会校正带有 key
   的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。

   *如不提供 =wx:key=，会报一个 =warning=，
   如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。*

   *示例代码：*

   #+BEGIN_EXAMPLE
       <switch wx:for="{{objectArray}}" wx:key="unique" style="display: block;"> {{item.id}} </switch>
       <button bindtap="switch"> Switch </button>
       <button bindtap="addToFront"> Add to the front </button>

       <switch wx:for="{{numberArray}}" wx:key="*this" style="display: block;"> {{item}} </switch>
       <button bindtap="addNumberToFront"> Add to the front </button>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           objectArray: [
             {id: 5, unique: 'unique_5'},
             {id: 4, unique: 'unique_4'},
             {id: 3, unique: 'unique_3'},
             {id: 2, unique: 'unique_2'},
             {id: 1, unique: 'unique_1'},
             {id: 0, unique: 'unique_0'},
           ],
           numberArray: [1, 2, 3, 4]
         },
         switch: function(e) {
           const length = this.data.objectArray.length
           for (let i = 0; i < length; ++i) {
             const x = Math.floor(Math.random() * length)
             const y = Math.floor(Math.random() * length)
             const temp = this.data.objectArray[x]
             this.data.objectArray[x] = this.data.objectArray[y]
             this.data.objectArray[y] = temp
           }
           this.setData({
             objectArray: this.data.objectArray
           })
         },
         addToFront: function(e) {
           const length = this.data.objectArray.length
           this.data.objectArray = [{id: length, unique: 'unique_' + length}].concat(this.data.objectArray)
           this.setData({
             objectArray: this.data.objectArray
           })
         },
         addNumberToFront: function(e){
           this.data.numberArray = [ this.data.numberArray.length + 1 ].concat(this.data.numberArray)
           this.setData({
             numberArray: this.data.numberArray
           })
         }
       })
   #+END_EXAMPLE

   *注意：*

   当 =wx:for= 的值为字符串时，会将字符串解析成字符串数组

   #+BEGIN_EXAMPLE
       <view wx:for="array">
         {{item}}
       </view>
   #+END_EXAMPLE

   等同于

   #+BEGIN_EXAMPLE
       <view wx:for="{{['a','r','r','a','y']}}">
         {{item}}
       </view>
   #+END_EXAMPLE

   *注意：* 花括号和引号之间如果有空格，将最终被解析成为字符串

   #+BEGIN_EXAMPLE
       <view wx:for="{{[1,2,3]}} ">
         {{item}}
       </view>
   #+END_EXAMPLE

   等同于

   #+BEGIN_EXAMPLE
       <view wx:for="{{[1,2,3] + ' '}}" >
         {{item}}
       </view>
   #+END_EXAMPLE



   
   [[http://caibaojian.com/weixinapp/weixinapp-list.html]]

   \\
   \\

 

 

 

 
  



***** wx:if
   在框架中，我们用=wx:if="{{condition}}"=来判断是否需要渲染该代码块：

   #+BEGIN_EXAMPLE
       <view wx:if="{{condition}}"> True </view>
   #+END_EXAMPLE

   也可以用=wx:elif=和=wx:else=来添加一个else块：

   #+BEGIN_EXAMPLE
       <view wx:if="{{length > 5}}"> 1 </view>
       <view wx:elif="{{length > 2}}"> 2 </view>
       <view wx:else> 3 </view>
   #+END_EXAMPLE

***** block wx:if
   因为=wx:if=是一个控制属性，需要将它添加到一个标签上。但是如果我们想一次性判断多个组件标签，我们可以使用一个=<block/>=标签将多个组件包装起来，并在上边使用=wx:if=控制属性。

   #+BEGIN_EXAMPLE
       <block wx:if="{{true}}">
         <view> view1 </view>
         <view> view2 </view>
       </block>
   #+END_EXAMPLE

   *注意：*=<block/>=并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。

***** =wx:if=vs=hidden=
   因为=wx:if=之中的模板也可能包含数据绑定，所以当=wx:if=的条件值切换时，框架有一个局部渲染的过程，因为它会确保条件块在切换时销毁或重新渲染。

   同时=wx:if=也是*惰性的*，如果在初始渲染条件为=false=，框架什么也不做，在条件第一次变成真的时候才开始局部渲染。

   相比之下，=hidden=就简单的多，组件始终会被渲染，只是简单的控制显示与隐藏。

   一般来说，=wx:if=有更高的切换消耗而=hidden=有更高的初始渲染消耗。因此，如果需要频繁切换的情景下，用=hidden=更好，如果在运行时条件不大可能改变则=wx:if=较好。

**** 模板
  WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。

***** 定义模板
      
  
   
      



   使用name属性，作为模板的名字。然后在=<template/>=内定义代码片段，如：

   #+BEGIN_EXAMPLE
       <!--
         index: int
         msg: string
         time: string
       -->
       <template name="msgItem">
         <view>
           <text> {{index}}: {{msg}} </text>
           <text> Time: {{time}} </text>
         </view>
       </template>
   #+END_EXAMPLE

***** 使用模板
      
 
  
      



   使用is属性，声明需要的使用的模板，然后将模板所需要的data传入，如：

   #+BEGIN_EXAMPLE
       <template is="msgItem" data="{{...item}}"/>
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       Page({
         data: {
           item: {
             index: 0,
             msg: 'this is a template',
             time: '2016-09-15'
           }
         }
       })
   #+END_EXAMPLE

   is属性可以使用Mustache语法，来动态决定具体需要渲染哪个模板：

   #+BEGIN_EXAMPLE
       <template name="odd">
         <view> odd </view>
       </template>
       <template name="even">
         <view> even </view>
       </template>

       <block wx:for="{{[1, 2, 3, 4, 5]}}">
           <template is="{{item % 2 == 0 ? 'even' : 'odd'}}"/>
       </block>
   #+END_EXAMPLE

***** 模板的作用域
      
 
  
      

  模板拥有自己的作用域，只能使用data传入的数据。



  
  [[http://caibaojian.com/weixinapp/weixinapp-template.html]]

  \\
  \\

 

 

 

 
  



*** 事件 
 事件分为冒泡事件和非冒泡事件

 1. 冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。
 2. 非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。
    
 WXML的冒泡事件列表：

 | 类型          | 触发条件                               |

 | touchstart    | 手指触摸动作开始                       |
 | touchmove     | 手指触摸后移动                         |
 | touchcancel   | 手指触摸动作被打断，如来电提醒，弹窗   |
 | touchend      | 手指触摸动作结束                       |
 | tap           | 手指触摸后马上离开                     |
 | longtap       | 手指触摸后，超过350ms再离开            |

   事件绑定的写法同组件的属性，以key、value的形式。
  - key以=bind=或=catch=开头，然后跟上事件的类型，如=bindtap=, =catchtouchstart=
  - value是一个字符串，需要在对应的Page中定义同名的函数。不然当触发事件的时候会报错。
  =bind=事件绑定不会阻止冒泡事件向上冒泡，=catch=事件绑定可以阻止冒泡事件向上冒泡。

  如在下边这个例子中，点击inner
  view会先后触发=handleTap3=和=handleTap2=(因为tap事件会冒泡到middle
  view，而middle view阻止了tap事件冒泡，不再向父节点传递)，点击middle
  view会触发=handleTap2=，点击outter view会触发=handleTap1=。

  #+BEGIN_EXAMPLE
      <view id="outter" bindtap="handleTap1">
        outer view
        <view id="middle" catchtap="handleTap2">
          middle view
          <view id="inner" bindtap="handleTap3">
            inner view
          </view>
        </view>
      </view>
  #+END_EXAMPLE

*** 引用
    WXML提供两种文件引用方式=import=和=include=。

**** import
 =import=可以在该文件中使用目标文件定义的=template=，如：

 在item.wxml中定义了一个叫=item=的=template=：

 #+BEGIN_EXAMPLE
     <!-- item.wxml -->
     <template name="item">
       <text>{{text}}</text>
     </template>
 #+END_EXAMPLE

 在index.wxml中引用了item.wxml，就可以使用=item=模板：

 #+BEGIN_EXAMPLE
     <import src="item.wxml"/>
     <template is="item" data="{{text: 'forbar'}}"/>
 #+END_EXAMPLE

**** import的作用域
  import有作用域的概念，即只会import目标文件中定义的template，而不会import目标文件import的template。

  *如：C import B，B import
  A，在C中可以使用B定义的=template=，在B中可以使用A定义的=template=，但是C不能使用A定义的=template=*。

  #+BEGIN_EXAMPLE
      <!-- A.wxml -->
      <template name="A">
        <text> A template </text>
      </template>
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
      <!-- B.wxml -->
      <import src="a.wxml"/>
      <template name="B">
        <text> B template </text>
      </template>
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
      <!-- C.wxml -->
      <import src="b.wxml"/>
      <template is="A"/>  <!-- Error! Can not use tempalte when not import A. -->
      <template is="B"/>
  #+END_EXAMPLE

**** include
  =include=可以将目标文件除了=<template/>=的整个代码引入，相当于是拷贝到=include=位置，如：

  #+BEGIN_EXAMPLE
      <!-- index.wxml -->
      <include src="header.wxml"/>
      <view> body </view>
      <include src="footer.wxml"/>
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
      <!-- header.wxml -->
      <view> header </view>
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
      <!-- footer.wxml -->
      <view> footer </view>
  #+END_EXAMPLE

*** WXSS
    
 
  
    

 WXSS(WeiXin Style Sheets)是一套样式语言，用于描述WXML的组件样式。

 WXSS用来决定[[file:weixinapp-wxml.html][WXML]]的组件应该怎么显示。

 为了适应广大的前端开发者，我们的WXSS具有CSS大部分特性。同时为了更适合开发微信小程序，我们对CSS进行了扩充以及修改。

 与css相比我们扩展的特性有：

 - [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_28/weixinapp-wxss.xhtml#尺寸单位][尺寸单位]]
 - [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_28/weixinapp-wxss.xhtml#样式导入][样式导入]]

*** 尺寸单位
 - rpx（responsive pixel）:
   可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在iPhone6上，屏幕宽度为375px，共有750个物理像素，则750rpx
   = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。

 | 设备           | rpx换算px (屏幕宽度/750)   | px换算rpx (750/屏幕宽度)   |

 | iPhone5        | 1rpx = 0.42px              | 1px = 2.34rpx              |
 | iPhone6        | 1rpx = 0.5px               | 1px = 2rpx                 |
 | iPhone6 Plus   | 1rpx = 0.552px             | 1px = 1.81rpx              |

*** 样式导入

 使用=@import=语句可以导入外联样式表，=@import=跟需要导入的外联样式表的相对路径，用=;=表示语句结束。

 *示例代码：*

* 组件
** 基础组件
框架为开发者提供了一系列基础组件，开发者可以通过组合这些基础组件进行快速开发。

什么是组件：

- 组件是视图层的基本组成单元。
- 组件自带一些功能与微信风格的样式。
- 一个组件通常包括=开始标签=和=结束标签=，=属性=用来修饰这个组件，=内容=在两个标签之内。

  #+BEGIN_EXAMPLE
      <tagname property="value">
        Content goes here ...
      </tagename>
  #+END_EXAMPLE

  *注意：所有组件与属性都是小写，以连字符=-=连接*

** 组件列表
基础组件分为以下八大类：

*** 视图容器(View Container)
 | 组件名      | 说明             |

 | [[file:sp6z1q8q.html][view]]        | 视图容器         |
 | [[file:weixinapp-scroll-view.html][scroll-view]] | 可滚动视图容器   |
 | [[file:weixinapp-swiper.html][swiper]]      | 可滑动的视图容器 |

*** 基础内容(Basic Content)

 | 组件名                                       | 说明     |

 | [[file:rmcw1q8t.html][icon]]                 | 图标     |
 | [[file:weixinapp-text.html][text]]           | 文字     |
 | [[file:weixinapp-progress.html][progress]]   | 进度条   |

*** 表单(Form)

 | 标签名                                                      | 说明             |

 | [[file:9w841q8w.html][button]]                              | 按钮             |
 | [[file:m8x71q8z.html][form]]                                | 表单             |
 | [[file:3glu1q92.html][input]]                               | 输入框           |
 | [[file:oj6e1q8x.html][checkbox]]                            | 多项选择器       |
 | [[file:gqhd1q96.html][radio]]                               | 单项选择器       |
 | [[file:d9mw1q95.html][picker]]                              | 列表选择器       |
 | [[file:weixinapp-component-pickerview.html][picker-view]]   | 内嵌列表选择器   |
 | [[file:hk941q97.html][slider]]                              | 滑动选择器       |
 | [[file:anr21q99.html][switch]]                              | 开关选择器       |
 | [[file:vn371q94.html][label]]                               | 标签             |

*** 导航(Navigation)

 | 组件名                                         | 说明         |

 | [[file:weixinapp-navigator.html][navigator]]   | 应用内跳转   |

*** 多媒体(Media)

 | 组件名 | 说明 |
 |--------+------|
 | [[file:weixinapp-audio.html][audio]]  | 音频 |
 | [[file:weixinapp-image.html][image]]  | 图片 |
 | [[file:weixinapp-video.html][video]]  | 视频 |

*** 地图(Map)
*** 画布(Canvas)
*** 客服会话：*
 | [[file:weixinapp-component-contactbutton.html][contact-button]]   | 进入客服会话按钮   |
** 详情 
*** view 视图容器

 | 属性名             | 类型     | 默认值   | 说明                                                             |

 | hover-class        | String   | none     | 指定按下去的样式类。当 =hover-class="none"= 时，没有点击态效果   |
 | hover-start-time   | Number   | 50       | 按住后多久出现点击态，单位毫秒                                   |
 | hover-stay-time    | Number   | 400      | 手指松开后点击态保留时间，单位毫秒                               |
*** scroll-view
 可滚动视图区域。

 | 属性名                | 类型        | 默认值 | 说明                                                                                          |

 | scroll-x              | Boolean     | false  | 允许横向滚动                                                                                  |
 | scroll-y              | Boolean     | false  | 允许纵向滚动                                                                                  |
 | upper-threshold       | Number      | 50     | 距顶部/左边多远时（单位px），触发 scrolltoupper 事件                                          |
 | lower-threshold       | Number      | 50     | 距底部/右边多远时（单位px），触发 scrolltolower 事件                                          |
 | scroll-top            | Number      |        | 设置竖向滚动条位置                                                                            |
 | scroll-left           | Number      |        | 设置横向滚动条位置                                                                            |
 | scroll-into-view      | String      |        | 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素            |
 | scroll-with-animation | Boolean     | false  | 在设置滚动条位置时使用动画过渡                                                                |
 | enable-back-to-top    | Boolean     | false  | iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向                               |
 | bindscrolltoupper     | EventHandle |        | 滚动到顶部/左边，会触发 scrolltoupper 事件                                                    |
 | bindscrolltolower     | EventHandle |        | 滚动到底部/右边，会触发 scrolltolower 事件                                                    |
 | bindscroll            | EventHandle |        | 滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY} |

 使用竖向滚动时，需要给=<scroll-view/>=一个固定高度，通过[[file:weixinapp-wxss.html][WXSS]] 设置 height。

 *示例代码：*

 #+BEGIN_EXAMPLE
     <view class="section">
       <view class="section__title">vertical scroll</view>
       <scroll-view scroll-y style="height: 200px;" bindscrolltoupper="upper" bindscrolltolower="lower" bindscroll="scroll" scroll-into-view="{{toView}}" scroll-top="{{scrollTop}}">
         <view id="green" class="scroll-view-item bc_green"></view>
         <view id="red"  class="scroll-view-item bc_red"></view>
         <view id="yellow" class="scroll-view-item bc_yellow"></view>
         <view id="blue" class="scroll-view-item bc_blue"></view>
       </scroll-view>

       <view class="btn-area">
         <button size="mini" bindtap="tap">click me to scroll into view </button>
         <button size="mini" bindtap="tapMove">click me to scroll</button>
       </view>
     </view>
     <view class="section section_gap">
       <view class="section__title">horizontal scroll</view>
       <scroll-view class="scroll-view_H" scroll-x="true" style="width: 100%">
         <view id="green" class="scroll-view-item_H bc_green"></view>
         <view id="red"  class="scroll-view-item_H bc_red"></view>
         <view id="yellow" class="scroll-view-item_H bc_yellow"></view>
         <view id="blue" class="scroll-view-item_H bc_blue"></view>
       </scroll-view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     var order = ['red', 'yellow', 'blue', 'green', 'red']
     Page({
       data: {
         toView: 'red',
         scrollTop: 100
       },
       upper: function(e) {
         console.log(e)
       },
       lower: function(e) {
         console.log(e)
       },
       scroll: function(e) {
         console.log(e)
       },
       tap: function(e) {
         for (var i = 0; i < order.length; ++i) {
           if (order[i] === this.data.toView) {
             this.setData({
               toView: order[i + 1]
             })
             break
           }
         }
       },
       tapMove: function(e) {
         this.setData({
           scrollTop: this.data.scrollTop + 10
         })
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_1/images/img1_u2.png]]

***** Bug & Tip
      
  
      

 1. =tip=:
    请勿在=scroll-view=中使用=textarea=、=map=、=canvas=、=video=组件
 2. =tip=: =scroll-into-view=的优先级高于=scroll-top=
 3. =tip=:
    在滚动=scroll-view=时会阻止页面回弹，所以在=scroll-view=中滚动，是无法触发=onPullDownRefresh=
 4. =tip=:
    若要使用下拉刷新，请使用页面的滚动，而不是=scroll-view=，这样也能通过点击顶部状态栏回到页面顶部

 \\

 

 
 [[http://caibaojian.com/weixinapp/weixinapp-scroll-view.html]]

 \\
 \\








 

 

*** swiper
 滑块视图容器。

 | 属性名                 | 类型        | 默认值            | 说明                                                                                |

 | indicator-dots         | Boolean     | false             | 是否显示面板指示点                                                                  |
 | indicator-color        | Color       | rgba(0, 0, 0, .3) | 指示点颜色                                                                          |
 | indicator-active-color | Color       | #000000           | 当前选中的指示点颜色                                                                |
 | autoplay               | Boolean     | false             | 是否自动切换                                                                        |
 | current                | Number      | 0                 | 当前所在页面的 index                                                                |
 | interval               | Number      | 5000              | 自动切换时间间隔                                                                    |
 | duration               | Number      | 500               | 滑动动画时长                                                                        |
 | circular               | Boolean     | false             | 是否采用衔接滑动                                                                    |
 | vertical               | Boolean     | false             | 滑动方向是否为纵向                                                                  |
 | bindchange             | EventHandle |                   | current 改变时会触发 change 事件，event.detail = {current: current, source: source} |


 从公共库v1.4.0开始，=change=事件返回=detail=中包含一个=source=字段，表示导致变更的原因，可能值如下：

 - =autoplay=自动播放导致swiper变化；
 - =touch=用户划动引起swiper变化；
 - 其他原因将用空字符串表示。

 *注意*：其中只可放置=<swiper-item/>=组件，否则会导致未定义的行为。

swiper-item
    仅可放置在=<swiper/>=组件中，宽高自动设置为100%。

 示例代码：

 #+BEGIN_EXAMPLE
     <swiper indicator-dots="{{indicatorDots}}"
       autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}">
       <block wx:for="{{imgUrls}}">
         <swiper-item>
           <image src="{{item}}" class="slide-image" width="355" height="150"/>
         </swiper-item>
       </block>
     </swiper>
     <button bindtap="changeIndicatorDots"> indicator-dots </button>
     <button bindtap="changeAutoplay"> autoplay </button>
     <slider bindchange="intervalChange" show-value min="500" max="2000"/> interval
     <slider bindchange="durationChange" show-value min="1000" max="10000"/> duration
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
       data: {
         imgUrls: [
           'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg',
           'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg',
           'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg'
         ],
         indicatorDots: false,
         autoplay: false,
         interval: 5000,
         duration: 1000
       },
       changeIndicatorDots: function(e) {
         this.setData({
           indicatorDots: !this.data.indicatorDots
         })
       },
       changeAutoplay: function(e) {
         this.setData({
           autoplay: !this.data.autoplay
         })
       },
       intervalChange: function(e) {
         this.setData({
           interval: e.detail.value
         })
       },
       durationChange: function(e) {
         this.setData({
           duration: e.detail.value
         })
       }
     })
 #+END_EXAMPLE

*** movable-area
    
  
    

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 =movable-view= 的可移动区域

 *注意：movable-area 必须设置width和height属性，不设置默认为10px*

*** movable-view
    
  
    

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 可移动的视图容器，在页面中可以拖拽滑动

 | 属性名          | 类型      | 默认值   | 说明                                                                                                |

 | direction       | String    | none     | movable-view的移动方向，属性值有all、vertical、horizontal、none                                     |
 | inertia         | Boolean   | false    | movable-view是否带有惯性                                                                            |
 | out-of-bounds   | Boolean   | false    | 超过可移动区域后，movable-view是否还可以移动                                                        |
 | x               | Number    |          | 定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画           |
 | y               | Number    |          | 定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画           |
 | damping         | Number    | 20       | 阻尼系数，用于控制x或y改变时的动画和过界回弹的动画，值越大移动越快                                  |
 | friction        | Number    | 2        | 摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动越快停止；必须大于0，否则会被设置成默认值   |

 #+BEGIN_QUOTE
   movable-view 必须设置width和height属性，不设置默认为10px

   movable-view 默认为绝对定位，top和left属性为0px

   当movable-view小于movable-area时，movable-view的移动范围是在movable-area内；当movable-view大于movable-area时，movable-view的移动范围必须包含movable-area（x轴方向和y轴方向分开考虑）
 #+END_QUOTE

 *注意*：movable-view必须在=<movable-area/>=组件中，并且必须是直接子节点，否则不能移动。

 *示例代码：*

 #+BEGIN_EXAMPLE
     <view class="section">
       <view class="section__title">movable-view区域小于movable-area</view>
       <movable-area style="height: 200px;width: 200px;background: red;">
         <movable-view style="height: 50px; width: 50px; background: blue;" x="{{x}}" y="{{y}}" direction="all">
         </movable-view>
       </movable-area>
       <view class="btn-area">
         <button size="mini" bindtap="tap">click me to move to (30px, 30px)</button>
       </view>
       <view class="section__title">movable-view区域大于movable-area</view>
       <movable-area style="height: 100px;width: 100px;background: red;" direction="all">
         <movable-view style="height: 200px; width: 200px; background: blue;">
         </movable-view>
       </movable-area>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
       data: {
         x: 0,
         y: 0
       },
       tap: function(e) {
         this.setData({
           x: 30,
           y: 30
         });
       }
     })
 #+END_EXAMPLE



 
 [[http://caibaojian.com/weixinapp/weixinapp-movable-view.html]]

 \\
 \\








 



*** cover-view
    
  
    

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 覆盖在原生组件之上的文本视图，可覆盖的原生组件包括=map=、=video=、=canvas=，支持嵌套。

 | 属性名   |
 |----------|
 | 无       |

*** cover-image
    
  
    

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 覆盖在原生组件之上的图片视图，可覆盖的原生组件同=cover-view=，支持嵌套在cover-view里。

 | 属性名   | 类型     | 默认值   | 说明                                                 |

 | src      | String   |          | 图标路径，支持临时路径。暂不支持base64与网络地址。   |

****** Bug & Tips
       
  
       

 1. =tip=:
    只可嵌套在原生组件=map=、=video=、=canvas=内，避免嵌套在其他组件内。
 2. =tip=: 事件模型遵循冒泡模型，但不会冒泡到原生组件。
 3. =tip=: 文本建议都套上cover-view标签，避免排版错误。
 4. =tip=:
    只支持基本的定位、布局、文本样式。不支持设置单边的border、opacity、background-image等。
 5. =tip=: 建议子节点不要溢出父节点
 6. =tip=: 暂不支持css动画。

 *示例：*

 #+BEGIN_EXAMPLE
     <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" controls="{{false}}" event-model="bubble">
       <cover-view class="controls">
         <cover-view class="play" bindtap="play">
           <cover-image class="img" src="/path/to/icon_play" />
         </cover-view>
         <cover-view class="pause" bindtap="pause">
           <cover-image class="img" src="/path/to/icon_pause" />
         </cover-view>
         <cover-view class="time">00:00</cover-view>
       </cover-view>
     </video>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     .controls {
       position: relative;
       top: 50%;
       height: 50px;
       margin-top: -25px;
       display: flex;
     }
     .play,.pause,.time {
       flex: 1;
       height: 100%;
     }
     .time {
       text-align: center;
       background-color: rgba(0, 0, 0, .5);
       color: white;
       line-height: 50px;
     }
     .img {
       width: 40px;
       height: 40px;
       margin: 5px auto;
     }
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
       onReady() {
         this.videoCtx = wx.createVideoContext('myVideo')
       },
       play() {
         this.videoCtx.play()
       },
       pause() {
         this.videoCtx.pause()
       }
     })
 #+END_EXAMPLE



 
 [[http://caibaojian.com/weixinapp/weixinapp-cover-view.html]]

 \\
 \\








 



*** icon
    
 
  
    



 图标。

 | 属性名   | 类型     | 默认值   | 说明                                                                                                   |

 | type     | String   |          | icon的类型，有效值：success, success_no_circle, info, warn, waiting, cancel, download, search, clear   |
 | size     | Number   | 23       | icon的大小，单位px                                                                                     |
 | color    | Color    |          | icon的颜色，同css的color                                                                               |

 *示例：*

 #+BEGIN_EXAMPLE
     <view class="group">
       <block wx:for="{{iconSize}}">
         <icon type="success" size="{{item}}"/>
       </block>
     </view>

     <view class="group">
       <block wx:for="{{iconType}}">
         <icon type="{{item}}" size="40"/>
       </block>
     </view>


     <view class="group">
       <block wx:for="{{iconColor}}">
         <icon type="success" size="40" color="{{item}}"/>
       </block>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
       data: {
         iconSize: [20, 30, 40, 50, 60, 70],
         iconColor: [
           'red', 'orange', 'yellow', 'green', 'rgb(0,255,255)', 'blue', 'purple'
         ],
         iconType: [
           'success', 'success_no_circle', 'info', 'warn', 'waiting', 'cancel', 'download', 'search', 'clear'
         ]
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_1/images/img1_u2.png]]

 \\
 \\



 
 [[http://caibaojian.com/weixinapp/rmcw1q8t.html]]

 \\
 \\








 



***** 
      
  
      

 #+BEGIN_HTML

 

 text 



 #+BEGIN_HTML
   </h2>


 文本。

 | 属性名       | 类型      | 默认值   | 说明           | 最低版本                                                        |

 | selectable   | Boolean   | false    | 文本是否可选   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | space        | String    | false    | 显示连续空格   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | decode       | Boolean   | false    | 是否解码       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 *space 有效值：*

 | 值     | 说明                     |

 | ensp   | 中文字符空格一半大小     |
 | emsp   | 中文字符空格大小         |
 | nbsp   | 根据字体设置的空格大小   |

****** Tips
       
  
       

 - decode可以解析的有=&nbsp;==&lt;= =&gt;==&amp;==&apos;==&ensp;==&emsp;=
 - 各个操作系统的空格标准并不一致。
 - =<text/>= 组件内只支持=<text/>=嵌套。
 - 除了文本节点以外的其他节点都无法长按选中。

 *示例：*

 #+BEGIN_EXAMPLE
     <view class="btn-area">
       <view class="body-view">
         <text>{{text}}</text>
         <button bindtap="add">add line</button>
         <button bindtap="remove">remove line</button>
       </view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     var initData = 'this is first line\nthis is second line'
     var extraLine = [];
     Page({
       data: {
         text: initData
       },
       add: function(e) {
         extraLine.push('other line')
         this.setData({
           text: initData + '\n' + extraLine.join('\n')
         })
       },
       remove: function(e) {
         if (extraLine.length > 0) {
           extraLine.pop()
           this.setData({
             text: initData + '\n' + extraLine.join('\n')
           })
         }
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_43/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/pic/text.png?t=2017329]]

 \\
*** rich-text
    
  
    

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 富文本。

 | 属性    | 类型             | 默认值   | 说明                     | 最低版本                                                        |

 | nodes   | Array / String   | []       | 节点列表 / HTML String   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 支持默认事件，包括：=tap=、=touchstart=、=touchmove=、=touchcancel=、=touchend=和=longtap=

 *nodes 属性推荐使用 Array 类型，由于组件会将 String 类型转换为 Array
 类型，因而性能会有所下降*

 *\\
 *

 nodes

 现支持两种节点，通过type来区分，分别是元素节点和文本节点，默认是元素节点，在富文本区域里显示的HTML节点

 *元素节点：type = node*

 | 属性       | 说明         | 类型     | 必填   | 备注                                     |

 | name       | 标签名       | String   | 是     | 支持部分受信任的HTML节点                 |
 | attrs      | 属性         | Object   | 否     | 支持部分受信任的属性，遵循Pascal命名法   |
 | children   | 子节点列表   | Array    | 否     | 结构和nodes一致                          |

 *文本节点：type = text*

 | 属性   | 说明   | 类型     | 必填   | 备注           |

 | text   | 文本   | String   | 是     | 支持entities   |

 受信任的HTML节点及属性

 全局支持class和style属性，*不支持id属性*。

 | 节点         | 属性                              |

 | a            |                                   |
 | abbr         |                                   |
 | b            |                                   |
 | blockquote   |                                   |
 | br           |                                   |
 | code         |                                   |
 | col          | span，width                       |
 | colgroup     | span，width                       |
 | dd           |                                   |
 | del          |                                   |
 | div          |                                   |
 | dl           |                                   |
 | dt           |                                   |
 | em           |                                   |
 | fieldset     |                                   |
 | h1           |                                   |
 | h2           |                                   |
 | h3           |                                   |
 | h4           |                                   |
 | h5           |                                   |
 | h6           |                                   |
 | hr           |                                   |
 | i            |                                   |
 | img          | alt，src，height，width           |
 | ins          |                                   |
 | label        |                                   |
 | legend       |                                   |
 | li           |                                   |
 | ol           | start，type                       |
 | p            |                                   |
 | q            |                                   |
 | span         |                                   |
 | strong       |                                   |
 | sub          |                                   |
 | sup          |                                   |
 | table        | width                             |
 | tbody        |                                   |
 | td           | colspan，height，rowspan，width   |
 | tfoot        |                                   |
 | th           | colspan，height，rowspan，width   |
 | thead        |                                   |
 | tr           |                                   |
 | ul           |                                   |

 *示例：*

 #+BEGIN_EXAMPLE
     <!-- rich-text.wxml -->
     <rich-text nodes="{{nodes}}" bindtap="tap"></rich-text>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // rich-text.js
     Page({
       data: {
         nodes: [{
           name: 'div',
           attrs: {
             class: 'div_class',
             style: 'line-height: 60px; color: red;'
           },
           children: [{
             type: 'text',
             text: 'Hello&nbsp;World!'
           }]
         }]
       },
       tap() {
         console.log('tap')
       }
     })
 #+END_EXAMPLE

*** progress
    
  
    



 进度条。

 | 属性名            | 类型      | 默认值      | 说明                                                      | 最低版本                                                        |

 | percent           | Float     | 无          | 百分比0~100                                               |                                                                 |
 | show-info         | Boolean   | false       | 在进度条右侧显示百分比                                    |                                                                 |
 | stroke-width      | Number    | 6           | 进度条线的宽度，单位px                                    |                                                                 |
 | color             | Color     | #09BB07     | 进度条颜色 （请使用 activeColor）                         |                                                                 |
 | activeColor       | Color     |             | 已选择的进度条的颜色                                      |                                                                 |
 | backgroundColor   | Color     |             | 未选择的进度条的颜色                                      |                                                                 |
 | active            | Boolean   | false       | 进度条从左往右的动画                                      |                                                                 |
 | active-mode       | String    | backwards   | backwards: 动画从头播；forwards：动画从上次结束点接着播   | [[http://caibaojian.com/weixinapp/compatibility.html][1.7.0]]   |

 *\\
 示例：*\\
 #+BEGIN_EXAMPLE
     <progress percent="20" show-info />
     <progress percent="40" stroke-width="12" />
     <progress percent="60" color="pink" />
     <progress percent="80" active />
 #+END_EXAMPLE

 [[file:feed_0/article_1/images/img1_u2.png]]\\



 
 [[http://caibaojian.com/weixinapp/weixinapp-progress.html]]

 \\
 \\








 



 1.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     button]]

 2.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     checkbox]]

 3.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     form]]

 4.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     input]]

 5.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     label]]

 6.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     picker]]

 7.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     radio-group]]

 8.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     slider]]

 9.  

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     switch]]

 10. 

     //[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_46/w1k71qay.xhtml][wxapp表单组件
     textarea]]



 
 [[http://caibaojian.com/weixinapp/w1k71qay.html]]

 \\
 \\








 



 #+BEGIN_HTML



 button



 #+BEGIN_HTML
   </h2>


 按钮。

 | 属性名                   | 类型      | 默认值         | 说明                                                                                                                                                                               | 最低版本                                                        |

 | size                     | String    | default        | 按钮的大小                                                                                                                                                                         |                                                                 |
 | type                     | String    | default        | 按钮的样式类型                                                                                                                                                                     |                                                                 |
 | plain                    | Boolean   | false          | 按钮是否镂空，背景色透明                                                                                                                                                           |                                                                 |
 | disabled                 | Boolean   | false          | 是否禁用                                                                                                                                                                           |                                                                 |
 | loading                  | Boolean   | false          | 名称前是否带 loading 图标                                                                                                                                                          |                                                                 |
 | form-type                | String    |                | 用于 =<form/>= 组件，点击分别会触发 =<form/>= 组件的 submit/reset 事件                                                                                                             |                                                                 |
 | open-type                | String    |                | 微信开放能力                                                                                                                                                                       | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | hover-class              | String    | button-hover   | 指定按钮按下去的样式类。当 =hover-class="none"= 时，没有点击态效果                                                                                                                 |                                                                 |
 | hover-start-time         | Number    | 20             | 按住后多久出现点击态，单位毫秒                                                                                                                                                     |                                                                 |
 | hover-stay-time          | Number    | 70             | 手指松开后点击态保留时间，单位毫秒                                                                                                                                                 |                                                                 |
 | session-from             | String    |                | open-type="contact"时有效：用户从该按钮进入会话时，开发者将收到带上本参数的事件推送。本参数可用于区分用户进入客服会话的来源。                                                      | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | bindgetuserinfoHandler   | Handler   |                | open-type="getUserInfo"时有效：用户点击该按钮时，会返回获取到的用户信息，从返回参数的detail中获取到的值同[[http://caibaojian.com/weixinapp/weixinapp-open.html][wx.getUserInfo]]   | [[http://caibaojian.com/weixinapp/compatibility.html][1.3.0]]   |

 *注：button-hover默认为{background-color:rgba(0,0,0,0.1);opacity:0.7;}*
 *size 有效值：*

 | 值        | 说明   |
 |-----------+--------|
 | default   |        |
 | mini      |        |

 *type 有效值：*

 | 值        | 说明   |
 |-----------+--------|
 | primary   |        |
 | default   |        |
 | warn      |        |

 *form-type 有效值：*

 | 值       | 说明       |
 |----------+------------|
 | submit   | 提交表单   |
 | reset    | 重置表单   |

 *open-type 有效值：*

 | 值            | 说明                                                                                                            | 最低版本                                                                            |

 | contact       | 打开客服会话                                                                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]                       |
 | share         | 触发用户转发，使用前建议先阅读[[http://caibaojian.com/weixinapp/weixinapp-api-share.html#使用指引][使用指引]]   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]                       |
 | getUserInfo   | 获取用户信息，可以从bindgetuserinfo回调中获取到用户信                                                           | [[https://mp.weixin.qq.com/debug/wxadoc/dev/framework/compatibility.html][1.3.0]]   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     /** wxss **/
     /** 修改button默认的点击态样式类**/
     .button-hover {
       background-color: red;
     }
     /** 添加自定义button点击态样式类**/
     .other-button-hover {
       background-color: blue;
     }
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     <button type="default" size="{{defaultSize}}" loading="{{loading}}" plain="{{plain}}"
             disabled="{{disabled}}" bindtap="default" hover-class="other-button-hover"> default </button>
     <button type="primary" size="{{primarySize}}" loading="{{loading}}" plain="{{plain}}"
             disabled="{{disabled}}" bindtap="primary"> primary </button>
     <button type="warn" size="{{warnSize}}" loading="{{loading}}" plain="{{plain}}"
             disabled="{{disabled}}" bindtap="warn"> warn </button>
     <button bindtap="setDisabled">点击设置以上按钮disabled属性</button>
     <button bindtap="setPlain">点击设置以上按钮plain属性</button>
     <button bindtap="setLoading">点击设置以上按钮loading属性</button>
     <button open-type="contact">进入客服会话</button>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     var types = ['default', 'primary', 'warn']
     var pageObject = {
       data: {
         defaultSize: 'default',
         primarySize: 'default',
         warnSize: 'default',
         disabled: false,
         plain: false,
         loading: false
       },
       setDisabled: function(e) {
         this.setData({
           disabled: !this.data.disabled
         })
       },
       setPlain: function(e) {
         this.setData({
           plain: !this.data.plain
         })
       },
       setLoading: function(e) {
         this.setData({
           loading: !this.data.loading
         })
       }
     }

     for (var i = 0; i < types.length; ++i) {
       (function(type) {
         pageObject[type] = function(e) {
           var key = type + 'Size'
           var changedData = {}
           changedData[key] =
             this.data[key] === 'default' ? 'mini' : 'default'
           this.setData(changedData)
         }
       })(types[i])
     }

     Page(pageObject)
 #+END_EXAMPLE

 \\

 [[file:feed_0/article_1/images/img1_u2.png]]\\

 \\



 
 [[http://caibaojian.com/weixinapp/9w841q8w.html]]

 \\
 \\








 



*** checkbox
    
  
*** checkbox-group
    
  
    

 多项选择器，内部由多个=checkbox=组成。

 | 属性名       | 类型          | 默认值   | 说明                                                                                                |

 | bindchange   | EventHandle   |          | <checkbox-group/>中选中项发生改变是触发change事件，detail = {value:[选中的checkbox的value的数组]}   |

*** checkbox
    
  
    

 多选项目。

 | 属性名     | 类型      | 默认值   | 说明                                                                                 |

 | value      | String    |          | <checkbox/>标识，选中时触发<checkbox-group/>的change事件，并携带<checkbox/>的value   |
 | disabled   | Boolean   | false    | 是否禁用                                                                             |
 | checked    | Boolean   | false    | 当前是否选中，可用来设置默认选中                                                     |
 | color      | Color     |          | checkbox的颜色，同css的color                                                         |
 |            |           |          |                                                                                      |

 *示例：*

 #+BEGIN_EXAMPLE
     <checkbox-group bindchange="checkboxChange">
         <label class="checkbox" wx:for-items="{{items}}">
             <checkbox value="{{item.name}}" checked="{{item.checked}}"/>{{item.value}}
         </label>
     </checkbox-group>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
       data: {
         items: [
           {name: 'USA', value: '美国'},
           {name: 'CHN', value: '中国', checked: 'true'},
           {name: 'BRA', value: '巴西'},
           {name: 'JPN', value: '日本'},
           {name: 'ENG', value: '英国'},
           {name: 'TUR', value: '法国'},
         ]
       },
       checkboxChange: function(e) {
         console.log('checkbox发生change事件，携带value值为：', e.detail.value)
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_48/images/img1_u1.png]]\\



 
 [[http://caibaojian.com/weixinapp/oj6e1q8x.html]]

 \\
 \\








 



*** form
 表单，将组件内的用户输入的=<switch/>= =<input/>= =<checkbox/>=
 =<slider/>= =<radio/>= =<picker/>= 提交。\\

 当点击=<form/>=表单中 formType 为 submit
 的=<button/>=组件时，会将表单组件中的 value
 值进行提交，需要在表单组件中加上 name 来作为 key。

 | 属性名          | 类型          | 说明                                                                                      |

 | report-submit   | Boolean       | 是否返回formId用于发送[[file:weixinapp-notice.html][模板消息]]                            |
 | bindsubmit      | EventHandle   | 携带form中的数据触发submit事件，event.detail = { value : {"name":"value"} , formId:"" }   |
 | bindreset       | EventHandle   | 表单重置时会触发reset事件                                                                 |

 *示例代码：*
    
  
    

 #+BEGIN_EXAMPLE
     <form bindsubmit="formSubmit" bindreset="formReset">
         <view class="section section_gap">
             <view class="section__title">switch</view>
             <switch name="switch"/>
         </view>
         <view class="section section_gap">
             <view class="section__title">slider</view>
             <slider name="slider" show-value ></slider>
         </view>

         <view class="section">
             <view class="section__title">input</view>
             <input name="input" placeholder="please input here" />
         </view>
         <view class="section section_gap">
             <view class="section__title">radio</view>
             <radio-group name="radio-group">
                 <label><radio value="radio1"/>radio1</label>
                 <label><radio value="radio2"/>radio2</label>
             </radio-group>
         </view>
         <view class="section section_gap">
             <view class="section__title">checkbox</view>
             <checkbox-group name="checkbox">
                 <label><checkbox value="checkbox1"/>checkbox1</label>
                 <label><checkbox value="checkbox2"/>checkbox2</label>
             </checkbox-group>
         </view>
         <view class="btn-area">
             <button formType="submit">Submit</button>
             <button formType="reset">Reset</button>
         </view>
     </form>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
       formSubmit: function(e) {
         console.log('form发生了submit事件，携带数据为：', e.detail.value)
       },
       formReset: function() {
         console.log('form发生了reset事件')
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_49/images/img1_u3.png]]\\



 
 [[http://caibaojian.com/weixinapp/m8x71q8z.html]]

 \\
 \\








 



*** input
    输入框。\\

 | 属性名              | 类型          | 默认值                | 说明                                                                                                                   | 最低版本                                                        |

 | value               | String        |                       | 输入框的初始内容                                                                                                       |                                                                 |
 | type                | String        | "text"                | input 的类型                                                                                                           |                                                                 |
 | password            | Boolean       | false                 | 是否是密码类型                                                                                                         |                                                                 |
 | placeholder         | String        |                       | 输入框为空时占位符                                                                                                     |                                                                 |
 | placeholder-style   | String        |                       | 指定 placeholder 的样式                                                                                                |                                                                 |
 | placeholder-class   | String        | "input-placeholder"   | 指定 placeholder 的样式类                                                                                              |                                                                 |
 | disabled            | Boolean       | false                 | 是否禁用                                                                                                               |                                                                 |
 | maxlength           | Number        | 140                   | 最大输入长度，设置为 -1 的时候不限制最大长度                                                                           |                                                                 |
 | cursor-spacing      | Number        | 0                     | 指定光标与键盘的距离，单位 px 。取 input 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离        |                                                                 |
 | auto-focus          | Boolean       | false                 | (即将废弃，请直接使用 focus )自动聚焦，拉起键盘                                                                        |                                                                 |
 | focus               | Boolean       | false                 | 获取焦点                                                                                                               |                                                                 |
 | confirm-type        | String        | "done"                | 设置键盘右下角按钮的文字                                                                                               | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | confirm-hold        | Boolean       | false                 | 点击键盘右下角按钮时是否保持键盘不收起                                                                                 | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | bindinput           | EventHandle   |                       | 当键盘输入时，触发input事件，event.detail = {value: value}，处理函数可以直接 return 一个字符串，将替换输入框的内容。   |                                                                 |
 | bindfocus           | EventHandle   |                       | 输入框聚焦时触发，event.detail = {value: value}                                                                        |                                                                 |
 | bindblur            | EventHandle   |                       | 输入框失去焦点时触发，event.detail = {value: value}                                                                    |                                                                 |
 | bindconfirm         | EventHandle   |                       | 点击完成按钮时触发，event.detail = {value: value}                                                                      |                                                                 |

 *type 有效值：*

 | 值       | 说明                 |

 | text     | 文本输入键盘         |
 | number   | 数字输入键盘         |
 | idcard   | 身份证输入键盘       |
 | digit    | 带小数点的数字键盘   |

 *confirm-type 有效值：*

 | 值       | 说明                   |

 | send     | 右下角按钮为“发送”     |
 | search   | 右下角按钮为“搜索”     |
 | next     | 右下角按钮为“下一个”   |
 | go       | 右下角按钮为“前往”     |
 | done     | 右下角按钮为“完成”     |

 \\

 *示例代码：*

 #+BEGIN_EXAMPLE
     <!--input.wxml-->
     <view class="section">
         <input placeholder="这是一个可以自动聚焦的input" auto-focus/>
     </view>
     <view class="section">
         <input placeholder="这个只有在按钮点击的时候才聚焦" focus="{{focus}}" />
         <view class="btn-area">
             <button bindtap="bindButtonTap">使得输入框获取焦点</button>
         </view>
     </view>
     <view class="section">
         <input  maxlength="10" placeholder="最大输入长度10" />
     </view>
     <view class="section">
         <view class="section__title">你输入的是：{{inputValue}}</view>
         <input  bindinput="bindKeyInput" placeholder="输入同步到view中"/>
     </view>
     <view class="section">
         <input  bindinput="bindReplaceInput" placeholder="连续的两个1会变成2" />
     </view>
     <view class="section">
         <input password type="number" />
     </view>
     <view class="section">
         <input password type="text" />
     </view>
     <view class="section">
         <input type="digit" placeholder="带小数点的数字键盘"/>
     </view>
     <view class="section">
         <input type="idcard" placeholder="身份证输入键盘" />
     </view>
     <view class="section">
         <input placeholder-style="color:red" placeholder="占位符字体是红色的" />
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     //input.js
     Page({
       data:{
         focus:false,
         inputValue:""
       },
       bindButtonTap:function(){
         this.setData({
           focus: true
         })
       },
       bindKeyInput:function(e){
         this.setData({
           inputValue:e.detail.value
         })
       },
       bindReplaceInput:function(e){
         var value = e.detail.value;
         var pos = e.detail.cursor;
         if(pos != -1){
           //光标在中间
           var left = e.detail.value.slice(0,pos);
           //计算光标的位置
           pos = left.replace(/11/g,'2').length;
         }

         //直接返回对象，可以对输入进行过滤处理，同时可以控制光标的位置
         return {
           value:value.replace(/11/g,'2'),
           cursor:pos
         }

         //或者直接返回字符串,光标在最后边
         //return value.replace(/11/g,'2'),
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_50/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/pic/input.png?t=2017329]]\\

*示例代码：*
    
  
    

#+BEGIN_EXAMPLE
    <view class="section">
        <view class="section__title">普通选择器</view>
        <picker bindchange="bindPickerChange" value="{{index}}" range="{{array}}">
            <view class="picker">
                当前选择: {{array[index]}}
            </view>
        </picker>
    </view>
    <view class="section">
        <view class="section__title">多列选择器</view>
        <picker mode="multiSelector" bindchange="bindMultiPickerChange" bindcolumnchange="bindMultiPickerColumnChange" value="{{multiIndex}}"
         <view class="picker">
           当前选择: {{multiArray[0][multiIndex[0]]}},{{multiArray[1][multiIndex[1]]}},{{multiArray[2][multiIndex[2]]}}
         </view>
        </picker>
    </view>
    <view class="section">
        <view class="section__title">时间选择器</view>
        <picker mode="time" value="{{time}}" start="09:01" end="21:01" bindchange="bindTimeChange">
            <view class="picker">
                当前选择: {{time}}
            </view>
        </picker>
    </view>

    <view class="section">
        <view class="section__title">日期选择器</view>
        <picker mode="date" value="{{date}}" start="2015-09-01" end="2017-09-01" bindchange="bindDateChange">
            <view class="picker">
                当前选择: {{date}}
            </view>
        </picker>
    </view>
    <view class="section">
        <view class="section__title">省市区选择器</view>
        <picker mode="region" bindchange="bindRegionChange" value="{{region}}">
          <view class="picker">
            当前选择: {{region[0]}},{{region[1]}},{{region[2]}}
          </view>
        </picker>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
      data: {
        array: ['美国', '中国', '巴西', '日本'],
        objectArray: [
          {
            id: 0,
            name: '美国'
          },
          {
            id: 1,
            name: '中国'
          },
          {
            id: 2,
            name: '巴西'
          },
          {
            id: 3,
            name: '日本'
          }
        ],
        index: 0,
        multiArray: [['无脊柱动物', '脊柱动物'], ['扁性动物', '线形动物', '环节动物', '软体动物', '节肢动物'], ['猪肉绦虫', '吸血虫']],
        objectMultiArray: [
          [
            {
              id: 0,
              name: '无脊柱动物'
            },
            {
              id: 1,
              name: '脊柱动物'
            }
          ], [
            {
              id: 0,
              name: '扁性动物'
            },
            {
              id: 1,
              name: '线形动物'
            },
            {
              id: 2,
              name: '环节动物'
            },
            {
              id: 3,
              name: '软体动物'
            },
            {
              id: 3,
              name: '节肢动物'
            }
          ], [
            {
              id: 0,
              name: '猪肉绦虫'
            },
            {
              id: 1,
              name: '吸血虫'
            }
          ]
        ],
        multiIndex: [0, 0, 0],
        date: '2016-09-01',
        time: '12:01',
        region: ['广东省', '广州市', '海珠区']
      },
      bindPickerChange: function(e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          index: e.detail.value
        })
      },
      bindMultiPickerChange: function (e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          multiIndex: e.detail.value
        })
      },
      bindMultiPickerColumnChange: function (e) {
        console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
        var data = {
          multiArray: this.data.multiArray,
          multiIndex: this.data.multiIndex
        };
        data.multiIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
          case 0:
            switch (data.multiIndex[0]) {
              case 0:
                data.multiArray[1] = ['扁性动物', '线形动物', '环节动物', '软体动物', '节肢动物'];
                data.multiArray[2] = ['猪肉绦虫', '吸血虫'];
                break;
              case 1:
                data.multiArray[1] = ['鱼', '两栖动物', '爬行动物'];
                data.multiArray[2] = ['鲫鱼', '带鱼'];
                break;
            }
            data.multiIndex[1] = 0;
            data.multiIndex[2] = 0;
            break;
          case 1:
            switch (data.multiIndex[0]) {
              case 0:
                switch (data.multiIndex[1]) {
                  case 0:
                    data.multiArray[2] = ['猪肉绦虫', '吸血虫'];
                    break;
                  case 1:
                    data.multiArray[2] = ['蛔虫'];
                    break;
                  case 2:
                    data.multiArray[2] = ['蚂蚁', '蚂蟥'];
                    break;
                  case 3:
                    data.multiArray[2] = ['河蚌', '蜗牛', '蛞蝓'];
                    break;
                  case 4:
                    data.multiArray[2] = ['昆虫', '甲壳动物', '蛛形动物', '多足动物'];
                    break;
                }
                break;
              case 1:
                switch (data.multiIndex[1]) {
                  case 0:
                    data.multiArray[2] = ['鲫鱼', '带鱼'];
                    break;
                  case 1:
                    data.multiArray[2] = ['青蛙', '娃娃鱼'];
                    break;
                  case 2:
                    data.multiArray[2] = ['蜥蜴', '龟', '壁虎'];
                    break;
                }
                break;
            }
            data.multiIndex[2] = 0;
            console.log(data.multiIndex);
            break;
        }
        this.setData(data);
      },
      bindDateChange: function(e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          date: e.detail.value
        })
      },
      bindTimeChange: function(e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          time: e.detail.value
        })
      },
      bindRegionChange: function (e) {
        console.log('picker发送选择改变，携带值为', e.detail.value)
        this.setData({
          region: e.detail.value
        })
      }
    })
#+END_EXAMPLE

\\

[[file:feed_0/article_1/images/img1_u2.png]]\\




[[http://caibaojian.com/weixinapp/d9mw1q95.html]]

\\
\\












*** picker-view
    
 
  
    



 嵌入页面的滚动选择器

 | 属性名            | 类型          | 说明                                                                                                                                                                 | 最低版本                                                        |

 | value             | NumberArray   | 数组中的数字依次表示 picker-view 内的 picker-view-colume 选择的第几项（下标从 0 开始），数字大于 picker-view-column 可选项长度时，选择最后一项。                     |                                                                 |
 | indicator-style   | String        | 设置选择器中间选中框的样式                                                                                                                                           |                                                                 |
 | indicator-class   | String        | 设置选择器中间选中框的类名                                                                                                                                           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | bindchange        | EventHandle   | 当滚动选择，value 改变时触发 change 事件，event.detail = {value: value}；value为数组，表示 picker-view 内的 picker-view-column 当前选择的是第几项（下标从 0 开始）   |                                                                 |

 *注意*：其中只可放置=<picker-view-column/>=组件，其他节点不会显示。

*** picker-view-column
    
  
    

 仅可放置于=<picker-view />=中，其孩子节点的高度会自动设置成与picker-view的选中框的高度一致。

 *示例代码：*

 #+BEGIN_EXAMPLE
     <view>
       <view>{{year}}年{{month}}月{{day}}日</view>
       <picker-view indicator-style="height: 50px;" style="width: 100%; height: 300px;" value="{{value}}" bindchange="bindChange">
         <picker-view-column>
           <view wx:for="{{years}}" style="line-height: 50px">{{item}}年</view>
         </picker-view-column>
         <picker-view-column>
           <view wx:for="{{months}}" style="line-height: 50px">{{item}}月</view>
         </picker-view-column>
         <picker-view-column>
           <view wx:for="{{days}}" style="line-height: 50px">{{item}}日</view>
         </picker-view-column>
       </picker-view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     const date = new Date()
     const years = []
     const months = []
     const days = []

     for (let i = 1990; i <= date.getFullYear(); i++) {
       years.push(i)
     }

     for (let i = 1 ; i <= 12; i++) {
       months.push(i)
     }

     for (let i = 1 ; i <= 31; i++) {
       days.push(i)
     }

     Page({
       data: {
         years: years,
         year: date.getFullYear(),
         months: months,
         month: 2,
         days: days,
         day: 2,
         year: date.getFullYear(),
         value: [9999, 1, 1],
       },
       bindChange: function(e) {
         const val = e.detail.value
         this.setData({
           year: this.data.years[val[0]],
           month: this.data.months[val[1]],
           day: this.data.days[val[2]]
         })
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_1/images/img1_u2.png]]



 
 [[http://caibaojian.com/weixinapp/weixinapp-component-pickerview.html]]

 \\
 \\








 



*** radio
    
 
  
    

 #+BEGIN_HTML



 radio-group



 #+BEGIN_HTML
   </h2>


 单项选择器，内部由多个=<radio/>=组成。

 | 属性名       | 类型          | 默认值   | 说明                                                                                           |

 | bindchange   | EventHandle   |          | <radio-group/>中的选中项发生变化时触发change事件，event.detail = {value: 选中项radio的value}   |

*** radio
    
 
  
    



 单选项目

 | 属性名     | 类型      | 默认值   | 说明                                                                                          |

 | value      | String    |          | =<radio/>=标识。当该=<radio/>=选中时，=<radio-group/>= 的change 事件会携带=<radio/>=的value   |
 | checked    | Boolean   | false    | 当前是否选中                                                                                  |
 | disabled   | Boolean   | false    | 是否禁用                                                                                      |
 | color      | Color     |          | radio的颜色，同css的color                                                                     |

 \\
 #+BEGIN_EXAMPLE
     <radio-group class="radio-group" bindchange="radioChange">
         <label class="radio" wx:for="{{items}}">
             <radio value="{{item.name}}" checked="{{item.checked}}"/>{{item.value}}
         </label>
     </radio-group>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({ 
       data: {
         items: [
           {name: 'USA', value: '美国'},
           {name: 'CHN', value: '中国', checked: 'true'},
           {name: 'BRA', value: '巴西'},
           {name: 'JPN', value: '日本'},
           {name: 'ENG', value: '英国'},
           {name: 'TUR', value: '法国'},
         ]
       },
       radioChange: function(e) {
         console.log('radio发生change事件，携带value值为：', e.detail.value)
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_54/images/img1_u4.png]]



 
 [[http://caibaojian.com/weixinapp/gqhd1q96.html]]

 \\
 \\








 



 #+BEGIN_HTML



 slider



 #+BEGIN_HTML
   </h2>


 滑动选择器。

 | 属性名            | 类型          | 默认值    | 说明                                                      | 最低版本                                                        |

 | min               | Number        | 0         | 最小值                                                    |                                                                 |
 | max               | Number        | 100       | 最大值                                                    |                                                                 |
 | step              | Number        | 1         | 步长，取值必须大于 0，并且可被(max - min)整除             |                                                                 |
 | disabled          | Boolean       | false     | 是否禁用                                                  |                                                                 |
 | value             | Number        | 0         | 当前取值                                                  |                                                                 |
 | color             | Color         | #e9e9e9   | 背景条的颜色（请使用 backgroundColor）                    |                                                                 |
 | selected-color    | Color         | #1aad19   | 已选择的颜色（请使用 activeColor）                        |                                                                 |
 | activeColor       | Color         | #1aad19   | 已选择的颜色                                              |                                                                 |
 | backgroundColor   | Color         | #e9e9e9   | 背景条的颜色                                              |                                                                 |
 | show-value        | Boolean       | false     | 是否显示当前 value                                        |                                                                 |
 | bindchange        | EventHandle   |           | 完成一次拖动后触发的事件，event.detail = {value: value}   |                                                                 |
 | bindchanging      | EventHandle   |           | 拖动过程中触发的事件，event.detail = {value: value}       | [[http://caibaojian.com/weixinapp/compatibility.html][1.7.0]]   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     <view class="section section_gap">
         <text class="section__title">设置left/right icon</text>
         <view class="body-view">
             <slider bindchange="slider1change" left-icon="cancel" right-icon="success_no_circle"/>
         </view>
     </view>

     <view class="section section_gap">
         <text class="section__title">设置step</text>
         <view class="body-view">
             <slider bindchange="slider2change" step="5"/>
         </view>
     </view>

     <view class="section section_gap">
         <text class="section__title">显示当前value</text>
         <view class="body-view">
             <slider bindchange="slider3change" show-value/>
         </view>
     </view>

     <view class="section section_gap">
         <text class="section__title">设置最小/最大值</text>
         <view class="body-view">
             <slider bindchange="slider4change" min="50" max="200" show-value/>
         </view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     var pageData = {}
     for(var i = 1; i < 5; ++i) {
       (function (index) {
         pageData['slider' + index + 'change'] = function(e) {
           console.log('slider' + 'index' + '发生 change 事件，携带值为', e.detail.value)
         }
       })(i);
     }
     Page(pageData)
 #+END_EXAMPLE

 [[file:feed_0/article_55/https:/mp.weixin.qq.com/debug/wxadoc/dev/image/pic/slider.png?t=2017329]]\\



 
 [[http://caibaojian.com/weixinapp/hk941q97.html]]

 \\
 \\








 



 #+BEGIN_HTML



 switch



 #+BEGIN_HTML
   </h2>


 开关选择器。

 | 属性名       | 类型          | 默认值   | 说明                                                          |

 | checked      | Boolean       | false    | 是否选中                                                      |
 | type         | String        | switch   | 样式，有效值：switch, checkbox                                |
 | bindchange   | EventHandle   |          | checked 改变时触发change事件，event.detail={ value:checked}   |
 | color        | Color         |          | switch的颜色，同css的color                                    |

 #+BEGIN_EXAMPLE
     <view class="body-view">
         <switch checked bindchange="switch1Change"/>
         <switch bindchange="switch2Change"/>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     page({
       switch1Checked: function (e){    console.log('switch1 发生 change 事件，携带值为', e.detail.value)  },
       switch2Change: function (e){    console.log('switch2 发生 change 事件，携带值为', e.detail.value)
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_1/images/img1_u2.png]]\\



 
 [[http://caibaojian.com/weixinapp/anr21q99.html]]

 \\
 \\








 



 #+BEGIN_HTML



 textarea



 #+BEGIN_HTML
   </h2>


 多行输入框。

 | 属性名              | 类型          | 默认值                 | 说明                                                                                                                  |

 | value               | String        |                        | 输入框的内容                                                                                                          |
 | placeholder         | String        |                        | 输入框为空时占位符                                                                                                    |
 | placeholder-style   | String        |                        | 指定 placeholder 的样式                                                                                               |
 | placeholder-class   | String        | textarea-placeholder   | 指定 placeholder 的样式类                                                                                             |
 | disabled            | Boolean       | false                  | 是否禁用                                                                                                              |
 | maxlength           | Number        | 140                    | 最大输入长度，设置为 -1 的时候不限制最大长度                                                                          |
 | auto-focus          | Boolean       | false                  | 自动聚焦，拉起键盘。                                                                                                  |
 | focus               | Boolean       | false                  | 获取焦点                                                                                                              |
 | auto-height         | Boolean       | false                  | 是否自动增高，设置auto-height时，style.height不生效                                                                   |
 | fixed               | Boolean       | false                  | 如果 textarea 是在一个=position:fixed=的区域，需要显示指定属性 fixed 为 true                                          |
 | cursor-spacing      | Number        | 0                      | 指定光标与键盘的距离，单位 px 。取 textarea 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离    |
 | bindfocus           | EventHandle   |                        | 输入框聚焦时触发，event.detail = {value: value}                                                                       |
 | bindblur            | EventHandle   |                        | 输入框失去焦点时触发，event.detail = {value: value}                                                                   |
 | bindlinechange      | EventHandle   |                        | 输入框行数变化时调用，event.detail = {height: 0, heightRpx: 0, lineCount: 0}                                          |
 | bindinput           | EventHandle   |                        | 当键盘输入时，触发 input 事件，event.detail = {value: value}， *bindinput 处理函数的返回值并不会反映到 textarea 上*   |
 | bindconfirm         | EventHandle   |                        | 点击完成时， 触发 confirm 事件，event.detail = {value: value}                                                         |

 *示例代码：*\\

 #+BEGIN_EXAMPLE
     <!--textarea.wxml-->
     <view class="section">
       <textarea bindblur="bindTextAreaBlur" auto-height placeholder="自动变高" />
     </view>
     <view class="section">
       <textarea placeholder="placeholder颜色是红色的" placeholder-style="color:red;"  />
     </view>
     <view class="section">
       <textarea placeholder="这是一个可以自动聚焦的textarea" auto-focus />
     </view>
     <view class="section">
       <textarea placeholder="这个只有在按钮点击的时候才聚焦" focus="{{focus}}" />
       <view class="btn-area">
         <button bindtap="bindButtonTap">使得输入框获取焦点</button>
       </view>
     </view><view class="section">
       <form bindsubmit="bindFormSubmit">    <textarea placeholder="form 中的 textarea" name="textarea"/>    <button form-type="submit"> 提交 </button>  </form></view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     //textarea.js
     Page({
       data: {
         height: 20,
         focus: false
       },
       bindButtonTap: function() {
         this.setData({
           focus: true
         })
       },
       bindTextAreaBlur: function(e) {
         console.log(e.detail.value)
       },  bindFormSubmit: function(e) {    console.log(e.detail.value.textarea)  }
     })
 #+END_EXAMPLE

***** 
      
  
      

***** Bug & Tip\\
      
  
      

 1. =bug=:
    微信版本=6.3.30=，=textarea=在列表渲染时，新增加的=textarea=在自动聚焦时的位置计算错误。
 2. =tip=:=textarea=
    的=blur=事件会晚于页面上的=tap=事件，如果需要在=button=的点击事件获取=textarea=，可以使用=form=的=bindsubmit=。
 3. =tip=:
    不建议在多行文本上对用户的输入进行修改，所以=textarea=的=bindinput=处理函数并不会将返回值反映到=textarea=上。
 4. =tip=:=textarea=组件是由客户端创建的原生组件，它的层级是最高的。
 5. =tip=: 请勿在=scroll-view=中使用=textarea=组件。
 6. =tip=:=css=动画对=textarea=组件无效。

 \\

 \\



 
 [[http://caibaojian.com/weixinapp/1k7h1ug9.html]]

 \\
 \\








 



*** navigator
    
 
  
    



 页面链接。

 | 属性名             | 类型     | 默认值            | 说明                                                           |

 | url                | String   |                   | 应用内的跳转链接                                               |
 | open-type          | String   | navigate          | 跳转方式                                                       |
 | delta              | Number   |                   | 当 open-type 为 'navigateBack' 时有效，表示回退的层数          |
 | hover-class        | String   | navigator-hover   | 指定点击时的样式类，当=hover-class="none"=时，没有点击态效果   |
 | hover-start-time   | Number   | 50                | 按住后多久出现点击态，单位毫秒                                 |
 | hover-stay-time    | Number   | 600               | 手指松开后点击态保留时间，单位毫秒                             |

 *open-type 有效值：*

 | 值             | 说明                          | 最低版本                                                        |

 | navigate       | 对应=wx.navigateTo=的功能     |                                                                 |
 | redirect       | 对应=wx.redirectTo=的功能     |                                                                 |
 | switchTab      | 对应=wx.switchTab=的功能      |                                                                 |
 | reLaunch       | 对应=wx.reLaunch=的功能       | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | navigateBack   | 对应=wx.navigateBack=的功能   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

 *注：=navigator-hover=默认为={background-color: rgba(0, 0, 0, 0.1); opacity: 0.7;}=,
 =<navigator/>=的子节点背景色应为透明色*

 **示例代码：*\\
 *

 #+BEGIN_EXAMPLE
     /** wxss **/
     /** 修改默认的navigator点击态 **/
     .navigator-hover {
         color:blue;
     }
     /** 自定义其他点击态样式类 **/
     .other-navigator-hover {
         color:red;
     }
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     <!-- sample.wxml -->
     <view class="btn-area">
       <navigator url="/page/navigate/navigate?title=navigate" hover-class="navigator-hover">跳转到新页面</navigator>
       <navigator url="../../redirect/redirect/redirect?title=redirect" open-type="redirect" hover-class="other-navigator-hover">在当前页打开</navigator>
       <navigator url="/page/index/index" open-type="switchTab" hover-class="other-navigator-hover">切换 Tab</navigator>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     <!-- navigator.wxml -->
     <view style="text-align:center"> {{title}} </view>
     <view> 点击左上角返回回到之前页面 </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     <!-- redirect.wxml -->
     <view style="text-align:center"> {{title}} </view>
     <view> 点击左上角返回回到上级页面 </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // redirect.js navigator.js
     Page({
       onLoad: function(options) {
         this.setData({
           title: options.title
         })
       }
     })
 #+END_EXAMPLE



 
 [[http://caibaojian.com/weixinapp/weixinapp-navigator.html]]

 \\
 \\








 



*** audio
    
 
  
    



 音频。

 | 属性名           | 类型          | 默认值     | 说明                                                                                  |

 | id               | String        |            | audio 组件的唯一标识符                                                                |
 | src              | String        |            | 要播放音频的资源地址                                                                  |
 | loop             | Boolean       | false      | 是否循环播放                                                                          |
 | controls         | Boolean       | true       | 是否显示默认控件                                                                      |
 | poster           | String        |            | 默认控件上的音频封面的图片资源地址，如果 controls 属性值为 false 则设置 poster 无效   |
 | name             | String        | 未知音频   | 默认控件上的音频名字，如果 controls 属性值为 false 则设置 name 无效                   |
 | author           | String        | 未知作者   | 默认控件上的作者名字，如果 controls 属性值为 false 则设置 author 无效                 |
 | binderror        | EventHandle   |            | 当发生错误时触发 error 事件，detail = {errMsg: MediaError.code}                       |
 | bindplay         | EventHandle   |            | 当开始/继续播放时触发play事件                                                         |
 | bindpause        | EventHandle   |            | 当暂停播放时触发 pause 事件                                                           |
 | bindtimeupdate   | EventHandle   |            | 当播放进度改变时触发 timeupdate 事件，detail = {currentTime, duration}                |
 | bindended        | EventHandle   |            | 当播放到末尾时触发 ended 事件                                                         |

 *MediaError.code*

 | 返回错误码                     | 描述                 |

 | MEDIA_ERR_ABORTED              | 获取资源被用户禁止   |
 | MEDIA_ERR_NETWORD              | 网络错误             |
 | MEDIA_ERR_DECODE               | 解码错误             |
 | MEDIA_ERR_SRC_NOT_SUPPOERTED   | 不合适资源           |

 *示例代码：*

 #+BEGIN_EXAMPLE
     <!-- audio.wxml -->
     <audio poster="{{poster}}" name="{{name}}" author="{{author}}" src="{{src}}" id="myAudio" controls loop></audio>

     <button type="primary" bindtap="audioPlay">播放</button>
     <button type="primary" bindtap="audioPause">暂停</button>
     <button type="primary" bindtap="audio14">设置当前播放时间为14秒</button>
     <button type="primary" bindtap="audioStart">回到开头</button>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // audio.js
     Page({
       onReady: function (e) {
         // 使用 wx.createAudioContext 获取 audio 上下文 context
         this.audioCtx = wx.createAudioContext('myAudio')
       },
       data: {
         poster: 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000',
         name: '此时此刻',
         author: '许巍',
         src: 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&fromtag=46',
       },
       audioPlay: function () {
         this.audioCtx.play()
       },
       audioPause: function () {
         this.audioCtx.pause()
       },
       audio14: function () {
         this.audioCtx.seek(14)
       },
       audioStart: function () {
         this.audioCtx.seek(0)
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_1/images/img1_u2.png]]

 相关api：[[file:weixinapp-api-audio.html][wx.createAudioContext]]



 
 [[http://caibaojian.com/weixinapp/weixinapp-audio.html]]

 \\
 \\








 



*** image
    
 
  
    



 图片。

 | 属性名      | 类型          | 默认值          | 说明                                                                                                            |

 | src         | String        |                 | 图片资源地址                                                                                                    |
 | mode        | String        | 'scaleToFill'   | 图片裁剪、缩放的模式                                                                                            |
 | binderror   | HandleEvent   |                 | 当错误发生时，发布到AppService的事件名，事件对象event.detail = { errMsg: 'something wrong' }                    |
 | bindload    | HandleEvent   |                 | 当图片载入完毕时，发布到AppService的事件名，事件对象event.detail = {height:'图片高度px', width:'图片宽度px'\\   |
 |             |               |                 | }                                                                                                               |

 *注：image组件默认宽度300px、高度225px*

 *mode 有效值：*

 mode有13种模式，其中4中是缩放模式，9种是裁剪模式。

 | 模式   | 值             | 说明                                                                                                                         |

 | 缩放   | scaleToFill    | 不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素                                                                  |
 | 缩放   | aspectFit      | 保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。                                         |
 | 缩放   | aspectFill     | 保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。   |
 | 缩放   | widthFix       | 宽度不变，高度自动变化，保持原图宽高比不变                                                                                   |
 | 裁剪   | top            | 不缩放图片，只显示图片的顶部区域                                                                                             |
 | 裁剪   | bottom         | 不缩放图片，只显示图片的底部区域                                                                                             |
 | 裁剪   | center         | 不缩放图片，只显示图片的中间区域                                                                                             |
 | 裁剪   | left           | 不缩放图片，只显示图片的左边区域                                                                                             |
 | 裁剪   | right          | 不缩放图片，只显示图片的右边区域                                                                                             |
 | 裁剪   | top left       | 不缩放图片，只显示图片的左上边区域                                                                                           |
 | 裁剪   | top right      | 不缩放图片，只显示图片的右上边区域                                                                                           |
 | 裁剪   | bottom left    | 不缩放图片，只显示图片的左下边区域                                                                                           |
 | 裁剪   | bottom right   | 不缩放图片，只显示图片的右下边区域                                                                                           |

 \\
 *示例：*

 #+BEGIN_EXAMPLE
     <view class="page">
       <view class="page__hd">
         <text class="page__title">image</text>
         <text class="page__desc">图片</text>
       </view>
       <view class="page__bd">
         <view class="section section_gap" wx:for="{{array}}" wx:for-item="item">
           <view class="section__title">{{item.text}}</view>
           <view class="section__ctn">
             <image style="width: 200px; height: 200px; background-color: #eeeeee;" mode="{{item.mode}}" src="{{src}}"></image>
           </view>
         </view>
       </view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
       data: {
         array: [{
           mode: 'scaleToFill',
           text: 'scaleToFill：不保持纵横比缩放图片，使图片完全适应'
         }, {
           mode: 'aspectFit',
           text: 'aspectFit：保持纵横比缩放图片，使图片的长边能完全显示出来'
         }, {
           mode: 'aspectFill',
           text: 'aspectFill：保持纵横比缩放图片，只保证图片的短边能完全显示出来'
         }, {
           mode: 'top',
           text: 'top：不缩放图片，只显示图片的顶部区域'
         }, {
           mode: 'bottom',
           text: 'bottom：不缩放图片，只显示图片的底部区域'
         }, {
           mode: 'center',
           text: 'center：不缩放图片，只显示图片的中间区域'
         }, {
           mode: 'left',
           text: 'left：不缩放图片，只显示图片的左边区域'
         }, {
           mode: 'right',
           text: 'right：不缩放图片，只显示图片的右边边区域'
         }, {
           mode: 'top left',
           text: 'top left：不缩放图片，只显示图片的左上边区域'
         }, {
           mode: 'top right',
           text: 'top right：不缩放图片，只显示图片的右上边区域'
         }, {
           mode: 'bottom left',
           text: 'bottom left：不缩放图片，只显示图片的左下边区域'
         }, {
           mode: 'bottom right',
           text: 'bottom right：不缩放图片，只显示图片的右下边区域'
         }],
         src: '../../resources/cat.jpg'
       },
       imageError: function(e) {
         console.log('image3发生error事件，携带值为', e.detail.errMsg)
       }
     })
 #+END_EXAMPLE

 原图

 [[file:feed_0/article_60/images/img1_u1.jpg]]\\

 *scaleToFill*

 不保持纵横比缩放图片，使图片完全适应

 [[file:feed_0/article_60/images/img2.png]]\\

 *aspectFit*

 保持纵横比缩放图片，使图片的长边能完全显示出来

 [[file:feed_0/article_60/images/img3.png]]\\

 *aspectFill*

 保持纵横比缩放图片，只保证图片的短边能完全显示出来

 [[file:feed_0/article_60/images/img4.png]]\\

 *top*

 不缩放图片，只显示图片的顶部区域

 [[file:feed_0/article_60/images/img5.png]]\\

 *bottom*

 不缩放图片，只显示图片的底部区域

 [[file:feed_0/article_60/images/img6.png]]\\

 *center*

 不缩放图片，只显示图片的中间区域

 [[file:feed_0/article_60/images/img7.png]]\\

 *left*

 不缩放图片，只显示图片的左边区域

 [[file:feed_0/article_60/images/img8.png]]\\

 *right*

 不缩放图片，只显示图片的右边边区域

 [[file:feed_0/article_60/images/img9.png]]\\

 *top left*

 不缩放图片，只显示图片的左上边区域

 [[file:feed_0/article_60/images/img10.png]]\\

 *top right*

 不缩放图片，只显示图片的右上边区域

 [[file:feed_0/article_60/images/img11.png]]\\

 *bottom left*

 不缩放图片，只显示图片的左下边区域

 [[file:feed_0/article_60/images/img12.png]]\\

 *bottom right*

 不缩放图片，只显示图片的右下边区域

 [[file:feed_0/article_60/images/img13.png]]\\



 
 [[http://caibaojian.com/weixinapp/weixinapp-image.html]]

 \\
 \\








 



*** video
    
 
  
    



 视频。

 | 属性名                 | 类型           | 默认值    | 说明                                                                                                                    | 最低版本                                                        |

 | src                    | String         |           | 要播放视频的资源地址                                                                                                    |                                                                 |
 | initial-time           | Number         |           | 指定视频初始播放位置                                                                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.0]]   |
 | duration               | Number         |           | 指定视频时长                                                                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | controls               | Boolean        | true      | 是否显示默认播放控件（播放/暂停按钮、播放进度、时间）                                                                   |                                                                 |
 | danmu-list             | Object Array   |           | 弹幕列表                                                                                                                |                                                                 |
 | danmu-btn              | Boolean        | false     | 是否显示弹幕按钮，只在初始化时有效，不能动态变更                                                                        |                                                                 |
 | enable-danmu           | Boolean        | false     | 是否展示弹幕，只在初始化时有效，不能动态变更                                                                            |                                                                 |
 | autoplay               | Boolean        | false     | 是否自动播放                                                                                                            |                                                                 |
 | loop                   | Boolean        | false     | 是否循环播放                                                                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | muted                  | Boolean        | false     | 是否静音播放                                                                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | page-gesture           | Boolean        | false     | 在非全屏模式下，是否开启亮度与音量调节手势                                                                              | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.0]]   |
 | direction              | Number         |           | 设置全屏时视频的方向，不指定则根据宽高比自动判断。有效值为 0（正常竖向）, 90（屏幕逆时针90度）, -90（屏幕顺时针90度）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.7.0]]   |
 | bindplay               | EventHandle    |           | 当开始/继续播放时触发play事件                                                                                           |                                                                 |
 | bindpause              | EventHandle    |           | 当暂停播放时触发 pause 事件                                                                                             |                                                                 |
 | bindended              | EventHandle    |           | 当播放到末尾时触发 ended 事件                                                                                           |                                                                 |
 | bindtimeupdate         | EventHandle    |           | 播放进度变化时触发，event.detail = {currentTime, duration} 。触发频率 250ms 一次                                        |                                                                 |
 | bindfullscreenchange   | EventHandle    |           | 当视频进入和退出全屏是触发，event.detail = {fullScreen, direction}，direction取为 vertical 或 horizontal                | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | objectFit              | String         | contain   | 当视频大小与 video 容器大小不一致时，视频的表现形式。contain：包含，fill：填充，cover：覆盖                             |                                                                 |
 | poster                 | String         |           | 视频封面的图片网络资源地址，如果 controls 属性值为 false 则设置 poster 无效                                             | \\                                                              |

 \\
 video标签认宽度300px、高度225px，设置宽高需要通过wxss设置width和height。

 *示例代码：*\\

 #+BEGIN_EXAMPLE
     <view class="section tc">
       <video src="{{src}}"   controls ></video>
       <view class="btn-area">
         <button bindtap="bindButtonTap">获取视频</button>
       </view>
     </view>

     <view class="section tc">
       <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400" danmu-list="{{danmuList}}" enable-danmu danmu-btn controls></video>
       <view class="btn-area">
         <button bindtap="bindButtonTap">获取视频</button>
         <input bindblur="bindInputBlur"/>
         <button bindtap="bindSendDanmu">发送弹幕</button>
       </view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     function getRandomColor () {
       let rgb = []
       for (let i = 0 ; i < 3; ++i){
         let color = Math.floor(Math.random() * 256).toString(16)
         color = color.length == 1 ? '0' + color : color
         rgb.push(color)
       }
       return '#' + rgb.join('')
     }

     Page({
       onReady: function (res) {
         this.videoContext = wx.createVideoContext('myVideo')
       },
       inputValue: '',
         data: {
             src: '',
         danmuList: [
           {
             text: '第 1s 出现的弹幕',
             color: '#ff0000',
             time: 1
           },
           {
             text: '第 3s 出现的弹幕',
             color: '#ff00ff',
             time: 3
         }]
         },
       bindInputBlur: function(e) {
         this.inputValue = e.detail.value
       },
       bindButtonTap: function() {
         var that = this
         wx.chooseVideo({
           sourceType: ['album', 'camera'],
           maxDuration: 60,
           camera: ['front','back'],
           success: function(res) {
             that.setData({
               src: res.tempFilePath
             })
           }
         })
       },
       bindSendDanmu: function () {
         this.videoContext.sendDanmu({
           text: this.inputValue,
           color: getRandomColor()
         })
       }
     })
 #+END_EXAMPLE

 [[file:feed_0/article_1/images/img1_u2.png]]

 相关api：[[file:weixinapp-api-video.html][wx.createVideoContext]]

*** camera
    
  
    



 #+BEGIN_QUOTE
   基础库 1.6.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 系统相机。

 需要用户授权 scope.camera

 | 属性名            | 类型          | 默认值   | 说明                                         |

 | device-position   | String        | back     | 前置或后置，值为front, back                  |
 | flash             | String        | auto     | 闪光灯，值为auto, on, off                    |
 | bindstop          | EventHandle   |          | 摄像头在非正常终止时触发，如退出后台等情况   |
 | binderror         | EventHandle   |          | 用户不允许使用摄像头时触发                   |

 相关api：[[http://caibaojian.com/weixinapp/weixinapp-c2u72j31.html][wx.createCameraContext]]

****** Bug & Tip
       
  
       

 1. tip: camera 组件是由客户端创建的原生组件，它的层级是最高的，不能通过
    z-index 控制层级。可使用 cover-view cover-image覆盖在上面。
 2. tip: 同一页面只能插入一个 camera 组件。
 3. tip:
    请勿在 scroll-view、swiper、picker-view、movable-view 中使用 camera 组件。

 示例：

 #+BEGIN_EXAMPLE
     <!-- camera.wxml -->
     <camera device-position="back" flash="off" binderror="error" style="width: 100%; height: 300px;"></camera>
     <button type="primary" bindtap="takePhoto">拍照</button>
     <view>预览</view>
     <image mode="widthFix" src="{{src}}"></image>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // camera.js
     Page({
         takePhoto() {
             const ctx = wx.createCameraContext()
             ctx.takePhoto({
                 quality: 'high',
                 success: (res) => {
                     this.setData({
                         src: res.tempImagePath
                     })
                 }
             })
         },
         error(e) {
             console.log(e.detail)
         }
     })
 #+END_EXAMPLE



 
 [[http://caibaojian.com/weixinapp/weixinapp-fxj12j2z.html]]

 \\
 \\



 <<index.html>>




 



 #+BEGIN_HTML



 微信小程序map




   </h2>


 地图。

 | 属性名             | 类型          | 默认值   | 说明                             | 最低版本                                                        |

 | longitude          | Number        |          | 中心经度                         |                                                                 |
 | latitude           | Number        |          | 中心纬度                         |                                                                 |
 | scale              | Number        | 16       | 缩放级别，取值范围为5-18         |                                                                 |
 | markers            | Array         |          | 标记点                           |                                                                 |
 | covers             | Array         |          | *即将移除，请使用 markers*       |                                                                 |
 | polyline           | Array         |          | 路线                             |                                                                 |
 | circles            | Array         |          | 圆                               |                                                                 |
 | controls           | Array         |          | 控件                             |                                                                 |
 | include-points     | Array         |          | 缩放视野以包含所有给定的坐标点   |                                                                 |
 | show-location      | Boolean       |          | 显示带有方向的当前定位点         |                                                                 |
 | bindmarkertap      | EventHandle   |          | 点击标记点时触发                 |                                                                 |
 | bindcallouttap     | EventHandle   |          | 点击标记点对应的气泡时触发       | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | bindcontroltap     | EventHandle   |          | 点击控件时触发                   |                                                                 |
 | bindregionchange   | EventHandle   |          | 视野发生变化时触发               |                                                                 |
 | bindtap            | EventHandle   |          | 点击地图时触发                   |                                                                 |

 *注意: covers 属性即将移除，请使用 markers 替代*\\
*** markers
    
  
    

 标记点用于在地图上显示标记的位置

 | 属性        | 说明                                   | 类型     | 必填   | 备注                                                                                      | 最低版本                                                        |

 | id          | 标记点id                               | Number   | 否     | marker点击事件回调会返回此id                                                              |                                                                 |
 | latitude    | 纬度                                   | Number   | 是     | 浮点数，范围 -90 ~ 90                                                                     |                                                                 |
 | longitude   | 经度                                   | Number   | 是     | 浮点数，范围 -180 ~ 180                                                                   |                                                                 |
 | title       | 标注点名                               | String   | 否     |                                                                                           |                                                                 |
 | iconPath    | 显示的图标                             | String   | 是     | 项目目录下的图片路径，支持相对路径写法，以'/'开头则表示相对小程序根目录；也支持临时路径   |                                                                 |
 | rotate      | 旋转角度                               | Number   | 否     | 顺时针旋转的角度，范围 0 ~ 360，默认为 0                                                  |                                                                 |
 | alpha       | 标注的透明度                           | Number   | 否     | 默认1，无透明                                                                             |                                                                 |
 | width       | 标注图标宽度                           | Number   | 否     | 默认为图片实际宽度                                                                        |                                                                 |
 | height      | 标注图标高度                           | Number   | 否     | 默认为图片实际高度                                                                        |                                                                 |
 | callout     | 自定义标记点上方的气泡窗口             | Object   | 否     | {content, color, fontSize, borderRadius, bgColor, padding, boxShadow, display}            | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | label       | 为标记点旁边增加标签                   | Object   | 否     | {color, fontSize, content, x, y}，可识别换行符，x,y原点是marker对应的经纬度               | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | anchor      | 经纬度在标注图标的锚点，默认底边中点   | Object   | 否     | {x, y}，x表示横向(0-1)，y表示竖向(0-1)。{x: .5, y: 1} 表示底边中点                        | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

 *marker 上的气泡 callout*

 | 属性           | 说明                                | 类型     |

 | content        | 文本                                | String   |
 | color          | 文本颜色                            | String   |
 | fontSize       | 文字大小                            | Number   |
 | borderRadius   | callout边框圆角                     | Number   |
 | bgColor        | 背景色                              | String   |
 | padding        | 文本边缘留白                        | Number   |
 | display        | 'BYCLICK':点击显示; 'ALWAYS':常显   | String   |

 *polyline*

 指定一系列坐标点，从数组第一项连线至最后一项

 | 属性          | 说明           | 类型      | 必填   | 备注                                                | 最低版本                                                        |

 | points        | 经纬度数组     | Array     | 是     | [{latitude: 0, longitude: 0}]                       |                                                                 |
 | color         | 线的颜色       | String    | 否     | 8位十六进制表示，后两位表示alpha值，如：#000000AA   |                                                                 |
 | width         | 线的宽度       | Number    | 否     |                                                     |                                                                 |
 | dottedLine    | 是否虚线       | Boolean   | 否     | 默认false                                           |                                                                 |
 | arrowLine     | 带箭头的线     | Boolean   | 否     | 默认false，开发者工具暂不支持该属性                 | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | borderColor   | 线的边框颜色   | String    | 否     |                                                     | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | borderWidth   | 线的厚度       | Number    | 否     |                                                     | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

 *circles*

 在地图上显示圆

 | 属性          | 说明         | 类型     | 必填   | 备注                                                |

 | latitude      | 纬度         | Number   | 是     | 浮点数，范围 -90 ~ 90                               |
 | longitude     | 经度         | Number   | 是     | 浮点数，范围 -180 ~ 180                             |
 | color         | 描边的颜色   | String   | 否     | 8位十六进制表示，后两位表示alpha值，如：#000000AA   |
 | fillColor     | 填充颜色     | String   | 否     | 8位十六进制表示，后两位表示alpha值，如：#000000AA   |
 | radius        | 半径         | Number   | 是     |                                                     |
 | strokeWidth   | 描边的宽度   | Number   | 否     |                                                     |

 *controls*

 在地图上显示控件，控件不随着地图移动

 | 属性        | 说明               | 类型      | 必填   | 备注                                                                                      |

 | id          | 控件id             | Number    | 否     | 在控件点击事件回调会返回此id                                                              |
 | position    | 控件在地图的位置   | Object    | 是     | 控件相对地图位置                                                                          |
 | iconPath    | 显示的图标         | String    | 是     | 项目目录下的图片路径，支持相对路径写法，以'/'开头则表示相对小程序根目录；也支持临时路径   |
 | clickable   | 是否可点击         | Boolean   | 否     | 默认不可点击                                                                              |

 *position*

 | 属性     | 说明                   | 类型     | 必填   | 备注             |

 | left     | 距离地图的左边界多远   | Number   | 否     | 默认为0          |
 | top      | 距离地图的上边界多远   | Number   | 否     | 默认为0          |
 | width    | 控件宽度               | Number   | 否     | 默认为图片宽度   |
 | height   | 控件高度               | Number   | 否     | 默认为图片高度   |

 \\
 地图组件的经纬度必填, 如果不填经纬度则默认值是北京的经纬度。
 *示例：*

 #+BEGIN_EXAMPLE
     <!-- map.wxml -->
     <map id="map" longitude="113.324520" latitude="23.099994" scale="14" controls="{{controls}}" bindcontroltap="controltap" markers="{{markers}}" bindmarkertap="markertap" polyline="{{polyline}}" bindregionchange="regionchange" show-location style="width: 100%; height: 300px;"></map>
 #+END_EXAMPLE





 #+BEGIN_EXAMPLE
     // map.js
     Page({
       data: {
         markers: [{
           iconPath: "/resources/others.png",
           id: 0,
           latitude: 23.099994,
           longitude: 113.324520,
           width: 50,
           height: 50
         }],
         polyline: [{
           points: [{
             longitude: 113.3245211,
             latitude: 23.10229
           }, {
             longitude: 113.324520,
             latitude: 23.21229
           }],
           color:"#FF0000DD",
           width: 2,
           dottedLine: true
         }],
         controls: [{
           id: 1,
           iconPath: '/resources/location.png',
           position: {
             left: 0,
             top: 300 - 50,
             width: 50,
             height: 50
           },
           clickable: true
         }]
       },
       regionchange(e) {
         console.log(e.type)
       },
       markertap(e) {
         console.log(e.markerId)
       },
       controltap(e) {
         console.log(e.controlId)
       }
     })
 #+END_EXAMPLE


   </h2>


*** open-data
    
  
    

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 用于展示微信开放的数据。

 | 属性名     | 类型     | 默认值   | 说明                               |

 | type       | String   |          | 开放数据类型                       |
 | open-gid   | String   |          | 当 type="groupName" 时生效, 群id   |

 *type 有效值：*

 | 值          | 说明         | 最低版本                                                        |

 | groupName   | 拉取群名称   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 *Tips:* 只有当前用户在此群内才能拉取到群名称

 #+BEGIN_EXAMPLE
     <open-data type="groupName" open-gid="xxxxxx"></open-data>
 #+END_EXAMPLE

 *Tips:* 关于open-gid的获取请查看
 [[http://caibaojian.com/weixinapp/weixinapp-api-share.html#wxgetshareinfoobject][转发]]

 \\



 
 [[http://caibaojian.com/weixinapp/weixinapp-open-data.html]]

 \\
 \\








 



*** web-view
    
  
    

 #+BEGIN_QUOTE
   基础库 1.6.4
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 web-view
 组件是一个可以用来承载网页的容器，会自动铺满整个小程序页面。个人类型与海外类型的小程序暂不支持使用。

 | 属性名   | 类型     | 默认值   | 说明                                                                                          |

 | src      | String   | none     | webview 指向网页的链接。需登录[[https://mp.weixin.qq.com/][小程序管理后台]]配置域名白名单。   |

 示例代码：

 #+BEGIN_EXAMPLE
     <!-- wxml -->
     <!-- 指向微信公众平台首页的web-view -->
     <web-view src="https://mp.weixin.qq.com/"></web-view>
 #+END_EXAMPLE

**** 相关接口 1
     
  
     

 <web-view/>网页中可使用[[https://res.wx.qq.com/open/js/jweixin-1.3.0.js][JSSDK
 1.3.0]]提供的接口返回小程序页面。 支持的接口有：

 | 接口名                        | 说明                   | 最低版本                                                        |

 | wx.miniProgram.navigateTo     | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.4]]   |
 | wx.miniProgram.navigateBack   | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.4]]   |
 | wx.miniProgram.switchTab      | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.5]]   |
 | wx.miniProgram.reLaunch       | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.5]]   |
 | wx.miniProgram.redirectTo     | 参数与小程序接口一致   | [[http://caibaojian.com/weixinapp/compatibility.html][1.6.5]]   |

 示例代码：

 #+BEGIN_EXAMPLE
     <!-- html -->
     <script type="text/javascript" src="https://res.wx.qq.com/open/js/jweixin-1.3.0.js"></script>

     // javascript
     wx.miniProgram.navigateTo({url: '/path/to/page'})
 #+END_EXAMPLE

**** 相关接口 2
     
  
     

 <web-view/>网页中仅支持以下JSSDK接口：

 | 接口模块               | 接口说明             | 具体接口             |

 | 判断客户端是否支持js   |                      | checkJSApi           |
 | 图像接口               | 拍照或上传           | chooseImage          |
 |                        | 预览图片             | previewImage         |
 |                        | 上传图片             | uploadImage          |
 |                        | 下载图片             | downloadImage        |
 |                        | 获取本地图片         | getLocalImgData      |
 | 音频接口               | 开始录音             | startRecord          |
 |                        | 停止录音             | stopRecord           |
 |                        | 监听录音自动停止     | onVoiceRecordEnd     |
 |                        | 播放语音             | playVoice            |
 |                        | 暂停播放             | pauseVoice           |
 |                        | 停止播放             | stopVoice            |
 |                        | 监听语音播放完毕     | onVoicePlayEnd       |
 |                        | 上传接口             | uploadVoice          |
 |                        | 下载接口             | downloadVoice        |
 | 智能接口               | 识别音频             | translateVoice       |
 | 设备信息               | 获取网络状态         | getNetworkType       |
 | 地理位置               | 使用内置地图         | getLocation          |
 |                        | 获取地理位置         | openLocation         |
 | 摇一摇周边             | 开启ibeacon          | startSearchBeacons   |
 |                        | 关闭ibeacon          | stopSearchBeacons    |
 |                        | 监听ibeacon          | onSearchBeacons      |
 | 微信扫一扫             | 调起微信扫一扫       | scanQRCode           |
 | 微信卡券               | 拉取使用卡券列表     | chooseCard           |
 |                        | 批量添加卡券接口     | addCard              |
 |                        | 查看微信卡包的卡券   | openCard             |
 | 长按识别               | 小程序圆形码         | 无                   |

****** 相关接口 3
       
  
       

 用户分享时可获取当前<web-view/>的URL，即在onShareAppMessage回调中返回webViewUrl参数。

 示例代码：

 #+BEGIN_EXAMPLE
     Page({
       onShareAppMessage(options) {
         console.log(options.webViewUrl)
       }
     })
 #+END_EXAMPLE

****** 相关接口 4
       
  
       

 在网页内可通过window.__wxjs_environment变量判断是否在小程序环境。

 示例代码：

 #+BEGIN_EXAMPLE
     // web-view下的页面内
     wx.ready(function() {
         console.log(window.__wxjs_environment === 'miniprogram') // true
     })
 #+END_EXAMPLE

*** contact-button
 客服会话按钮，用于在页面上显示一个客服会话按钮，用户点击该按钮后会进入客服会话。

 | 属性名         | 类型     | 默认值         | 说明                                                                                                 |

 | size           | Number   | 18             | 会话按钮大小，有效值 18-27，单位：px                                                                 |
 | type           | String   | default-dark   | 会话按钮的样式类型                                                                                   |
 | session-from   | String   |                | 用户从该按钮进入会话时，开发者将收到带上本参数的事件推送。本参数可用于区分用户进入客服会话的来源。   |

 *type 有效值：*

 | 值              | 说明   |

 | default-dark    |        |
 | default-light   |        |

 \\
 *示例代码*

 #+BEGIN_EXAMPLE
     <contact-button 
       type="default-light" 
       size="20"
       session-from="weapp"
     >
     </contact-button>
 #+END_EXAMPLE

 相关api：[[http://caibaojian.com/weixinapp/weixinapp-api-custommsg-receive.html][详见客服消息接口文档]]

 相关组件：[[http://caibaojian.com/weixinapp/9w841q8w.html][button]]
 组件通过设置 open-type="contact" 亦可进入客服会话\\
* API
框架提供丰富的微信原生API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。

*说明：*

- wx.on开头的API是监听某个事件发生的API接口，接受一个CALLBACK函数作为参数。当该事件触发时，会调用CALLBACK函数。
- 如未特殊约定，其他API接口都接受一个OBJECT作为参数。
- OBJECT中可以指定success,fail,complete来接收接口调用结果。

| 参数名     | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |
** API列表
*** *网络API列表：*

 | API                                                                                      | 说明                |

 | [[file:weixinapp-network-request.html][wx.request]]                                      | 发起网络请求        |
 | [[file:4g8s1q9c.html][wx.uploadFile]]                                                    | 上传文件            |
 | [[file:4g8s1q9c.html#wxdownloadfileobject][wx.downloadFile]]                             | 下载文件            |
 | [[file:weixinapp-network-socket.html#wxconnectsocketobject][wx.connectSocket]]           | 创建WebSocket连接   |
 | [[file:weixinapp-network-socket.html#wxonsocketopencallback][wx.onSocketOpen]]           | 监听WebSocket打开   |
 | [[file:weixinapp-network-socket.html#wxonsocketerrorcallback][wx.onSocketError]]         | 监听WebSocket错误   |
 | [[file:weixinapp-network-socket.html#wxsendsocketmessageobject][wx.sendSocketMessage]]   | 发送WebSocket消息   |
 | [[file:weixinapp-network-socket.html#wxonsocketmessagecallback][wx.onSocketMessage]]     | 接受WebSocket消息   |
 | [[file:weixinapp-network-socket.html#wxclosesocket][wx.closeSocket]]                     | 关闭WebSocket连接   |
 | [[file:weixinapp-network-socket.html#wxonsocketclosecallback][wx.onSocketClose]]         | 监听WebSocket关闭   |
*** *媒体API列表：*

 | API                                                                                                                      | 说明                       |

 | [[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]                                                | 从相册选择图片，或者拍照   |
 | [[file:weixinapp-media-picture.html#wxpreviewimageobject][wx.previewImage]]                                              | 预览图片                   |
 | [[file:weixinapp-media-record.html#wxstartrecordobject][wx.startRecord]]                                                 | 开始录音                   |
 | [[file:weixinapp-media-record.html#wxstoprecord][wx.stopRecord]]                                                         | 结束录音                   |
 | [[file:weixinapp-media-voice.html#wxplayvoice][wx.playVoice]]                                                            | 播放语音                   |
 | [[file:weixinapp-media-voice.html#wxpausevoice][wx.pauseVoice]]                                                          | 暂停播放语音               |
 | [[file:weixinapp-media-voice.html#wxstopvoice][wx.stopVoice]]                                                            | 结束播放语音               |
 | [[file:weixinapp-media-background-audio.html#wxgetbackgroundaudioplayerstateobject][wx.getBackgroundAudioPlayerState]]   | 获取音乐播放状态           |
 | [[file:weixinapp-media-background-audio.html#wxplaybackgroundaudioobject][wx.playBackgroundAudio]]                       | 播放音乐                   |
 | [[file:weixinapp-media-background-audio.html#wxpausebackgroundaudio][wx.pauseBackgroundAudio]]                           | 暂停播放音乐               |
 | [[file:weixinapp-media-background-audio.html#wxseekbackgroundaudioobject][wx.seekBackgroundAudio]]                       | 控制音乐播放进度           |
 | [[file:weixinapp-media-background-audio.html#wxstopbackgroundaudio][wx.stopBackgroundAudio]]                             | 停止播放音乐               |
 | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudioplaycallback][wx.onBackgroundAudioPlay]]                 | 监听音乐开始播放           |
 | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiopausecallback][wx.onBackgroundAudioPause]]               | 监听音乐暂停               |
 | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiostopcallback][wx.onBackgroundAudioStop]]                 | 监听音乐结束               |
 | [[file:weixinapp-media-video.html][wx.chooseVideo]]                                                                      | 从相册选择视频，或者拍摄   |
*** *文件 API 列表：*

 | API                                                                                                     | 说明                   |

 | [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]                                    | 保存文件               |
 | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfilelistobject][wx.getSavedFileList]]   | 获取已保存的文件列表   |
 | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfileinfoobject][wx.getSavedFileInfo]]   | 获取已保存的文件信息   |
 | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxremovesavedfileobject][wx.removeSavedFile]]     | 删除已保存的文件信息   |
 | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxopendocumentobject][wx.openDocument]]           | 打开文件               |
*** *数据 API 列表：*

 | API                                                                                                       | 说明                     |

 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageobject][wx.getStorage]]              | 获取本地数据缓存         |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstoragesynckey][wx.getStorageSync]]         | 获取本地数据缓存         |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstorageobject][wx.setStorage]]              | 设置本地数据缓存         |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstoragesynckeydata][wx.setStorageSync]]     | 设置本地数据缓存         |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfoobject][wx.getStorageInfo]]      | 获取本地缓存的相关信息   |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfosync][wx.getStorageInfoSync]]    | 获取本地缓存的相关信息   |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestorageobject][wx.removeStorage]]        | 删除本地缓存内容         |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestoragesynckey][wx.removeStorageSync]]   | 删除本地缓存内容         |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstorage][wx.clearStorage]]                | 清理本地数据缓存         |
 | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstoragesync][wx.clearStorageSync]]        | 清理本地数据缓存         |
*** *位置 API 列表：*

 | API                                                                                                     | 说明               |

 | [[http://caibaojian.com/weixinapp/weixinapp-location.html][wx.getLocation]]                             | 获取当前位置       |
 | [[http://caibaojian.com/weixinapp/weixinapp-location.html#wxchooselocationobject][wx.chooseLocation]]   | 打开地图选择位置   |
 | [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][wx.openLocation]]                        | 打开内置地图       |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-map.html][wx.createMapContext]]                         | 地图组件控制       |
*** *设备 API 列表：*

 | API                                                                                                                       | 说明                 |

 | [[http://caibaojian.com/weixinapp/weixinapp-api-device.html][wx.getNetworkType]]                                          | 获取网络类型         |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-device.html#wxonnetworkstatuschangecallback][wx.onNetworkStatusChange]]   | 监听网络状态变化     |
 | [[http://caibaojian.com/weixinapp/weixinapp-device.html][wx.getSystemInfo]]                                               | 获取系统信息         |
 | [[http://caibaojian.com/weixinapp/weixinapp-device.html#wxgetsysteminfosync][wx.getSystemInfoSync]]                       | 获取系统信息         |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html][wx.onAccelerometerChange]]                            | 监听加速度数据       |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstartaccelerometerobject][wx.startAccelerometer]]    | 开始监听加速度数据   |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstopaccelerometerobject][wx.stopAccelerometer]]      | 停止监听加速度数据   |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html][wx.onCompassChange]]                                        | 监听罗盘数据         |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstartcompassobject][wx.startCompass]]                      | 开始监听罗盘数据     |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstopcompassobject][wx.stopCompass]]                        | 停止监听罗盘数据     |
 | [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html][wx.setClipboardData]]                                         | 设置剪贴板内容       |
 | [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html#wxgetclipboarddataobject][wx.getClipboardData]]                | 获取剪贴板内容       |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html][wx.makePhoneCall]]                                        | 拨打电话             |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html][wx.scanCode]]                                              | 扫码                 |
*** *界面 API 列表：*

 | API                                                                                                             | 说明                 |

 | [[http://caibaojian.com/weixinapp/weixinapp-react.html][wx.showToast]]                                          | 显示提示框           |
 | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowloadingobject][wx.showLoading]]                    | 显示加载提示框       |
 | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxhidetoast][wx.hideToast]]                              | 隐藏提示框           |
 | [[http://caibaojian.com/weixinapp/weixinapp-react.html#loentarget][wx.hideLoading]]                             | 隐藏提示框           |
 | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowmodalobject][wx.showModal]]                        | 显示模态弹窗         |
 | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowactionsheetobject][wx.showActionSheet]]            | 显示菜单列表         |
 | [[http://caibaojian.com/weixinapp/weixinapp-ui.html][wx.setNavigationBarTitle]]                                 | 设置当前页面标题     |
 | [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxshownavigationbarloading][wx.showNavigationBarLoading]]   | 显示导航条加载动画   |
 | [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxhidenavigationbarloading][wx.hideNavigationBarLoading]]   | 隐藏导航条加载动画   |
 | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html][wx.navigateTo]]                                   | 新窗口打开页面       |
 | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxredirecttoobject][wx.redirectTo]]                | 原窗口打开页面       |
 | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxswitchtabobject][wx.switchTab]]                  | 切换到 tabbar 页面   |
 | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigateback][wx.navigateBack]]                  | 退回上一个页面       |
 | [[http://caibaojian.com/weixinapp/tcga1qcz.html][wx.createAnimation]]                                           | 动画                 |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-context.html][wx.createCanvasContext]]                   | 创建绘图上下文       |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-drawcanvas.html][wx.drawCanvas]]                         | 绘图                 |
 | [[http://caibaojian.com/weixinapp/weixinapp-api-pulldown.html#wxstoppulldownrefresh][wx.stopPullDownRefresh]]   | 停止下拉刷新动画     |
*** *WXML节点信息 API 列表：*

 | API                                                                                                                                  | 说明                     |

 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html][wx.createSelectorQuery]]                                           | 创建查询请求             |
 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectselector][selectorQuery.select]]                 | 根据选择器选择单个节点   |
 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectallselector][selectorQuery.selectAll]]           | 根据选择器选择全部节点   |
 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectviewport][selectorQuery.selectViewport]]         | 选择显示区域             |
 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefboundingclientrectcallback][nodesRef.boundingClientRect]]   | 获取布局位置和尺寸       |
 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefscrolloffsetcallback][nodesRef.scrollOffset]]               | 获取滚动位置             |
 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesreffieldsfieldscallback][nodesRef.fields]]                     | 获取任意字段             |
 | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryexeccallback][selectorQuery.exec]]                     | 执行查询请求             |
*** *开放接口：*

 | API                                                                                     | 说明               |

 | [[http://caibaojian.com/weixinapp/weixinapp-api-login.html][wx.login]]                  | 登录               |
 | [[http://caibaojian.com/weixinapp/weixinapp-open.html][wx.getUserInfo]]                 | 获取用户信息       |
 | [[http://caibaojian.com/weixinapp/weixinapp-address.html][wx.chooseAddress]]            | 获取用户收货地址   |
 | [[http://caibaojian.com/weixinapp/uvq81qdh.html][wx.requestPayment]]                    | 发起微信支付       |
 | [[http://caibaojian.com/weixinapp/weixinapp-card.html][wx.addCard]]                     | 添加卡券           |
 | [[http://caibaojian.com/weixinapp/weixinapp-card.html#wxopencardobject][wx.openCard]]   | 打开卡券           |
 每个微信小程序需要事先设置一个通讯域名，小程序可以跟指定的域名与进行网络通信。包括普通
 HTTPS 请求（wx.request）、 WebSocket
 通信（wx.connectSocket）、上传文件（wx.uploadFile）和下载文件（wx.downloadFile)。
*** *网络API列表：*

 | API                                                                                                                 | 说明                  |

 | [[http://caibaojian.com/weixinapp/weixinapp-network-request.html][wx.request]]                                      | 发起网络请求          |
 | [[http://caibaojian.com/weixinapp/4g8s1q9c.html][wx.uploadFile]]                                                    | 上传文件              |
 | [[http://caibaojian.com/weixinapp/4g8s1q9c.html#wxdownloadfileobject][wx.downloadFile]]                             | 下载文件              |
 | [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html][wx.connectSocket]]                                 | 创建 WebSocket 连接   |
 | [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketopencallback][wx.onSocketOpen]]           | 监听 WebSocket 打开   |
 | [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketerrorcallback][wx.onSocketError]]         | 监听 WebSocket 错误   |
 | [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxsendsocketmessageobject][wx.sendSocketMessage]]   | 发送 WebSocket 消息   |
 | [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketmessagecallback][wx.onSocketMessage]]     | 接受 WebSocket 消息   |
 | [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxclosesocket][wx.closeSocket]]                     | 关闭 WebSocket 连接   |
 | [[http://caibaojian.com/weixinapp/weixinapp-network-socket.html#wxonsocketclosecallback][wx.onSocketClose]]         | 监听 WebSocket 关闭   |

** wx.request(OBJECT)
*OBJECT参数说明：*\\

| 参数名     | 类型             | 必填   | 说明                                                                              |

| url        | String           | 是     | 开发者服务器接口地址                                                              |
| data       | Object、String   | 否     | 请求的参数                                                                        |
| header     | Object           | 否     | 设置请求的 header , header 中不能设置 Referer                                     |
| method     | String           | 否     | 默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT         |
| dataType   | String           | 否     | 默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse   |
| success    | Function         | 否     | 收到开发者服务成功返回的回调函数，res = {data: '开发者服务器返回的内容'}          |
| fail       | Function         | 否     | 接口调用失败的回调函数                                                            |
| complete   | Function         | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                  |

*success返回参数说明：*

| 参数         | 类型                        | 说明                                      | 最低版本                                                        |

| data         | Object/String/ArrayBuffer   | 开发者服务器返回的数据                    |                                                                 |
| statusCode   | Number                      | 开发者服务器返回的 HTTP 状态码            |                                                                 |
| header       | Object                      | 开发者服务器返回的 HTTP Response Header   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*data 数据说明* 最终发送给服务器的数据是 String 类型，如果传入的 data
不是 String 类型，会被转换成 String 。转换规则如下：\\

- 对于 header['content-type'] 为 'application/json' 的数据，会对数据进行
  JSON 序列化
- 对于 header['content-type'] 为 'application/x-www-form-urlencoded'
  的数据，会将数据转换成 query string
  （encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...）

*示例代码：*

#+BEGIN_EXAMPLE
    wx.request({
      url: 'test.php', //仅为示例，并非真实的接口地址
      data: {
         x: '' ,
         y: ''
      },
      header:{
          "Content-Type":"application/json"
      },
      success: function(res) {
         console.log(res.data)
      }
    })
#+END_EXAMPLE

**

*返回值：*

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个=requestTask=对象，通过=requestTask=，可中断请求任务。

*requestTask 对象的方法列表：*

| 方法    | 参数   | 说明           | 最低版本                                                        |

| abort   |        | 中断请求任务   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*示例代码：*

#+BEGIN_EXAMPLE
    const requestTask = wx.request({
      url: 'test.php', //仅为示例，并非真实的接口地址
      data: {
         x: '' ,
         y: ''
      },
      header: {
          'content-type': 'application/json'
      },
      success: function(res) {
        console.log(res.data)
      }
    })

    requestTask.abort() // 取消请求任务
#+END_EXAMPLE

** wx.uploadFile(OBJECT)
将本地资源上传到开发者服务器。如页面通过
[[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]
等接口获取到一个本地资源的临时文件路径后，可通过此接口将本地资源上传到指定服务器。客户端发起一个HTTPS
POST请求，其中=Content-Type=为=multipart/form-data=。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                  |

| url        | String     | 是     | 开发者服务器url                                                       |
| filePath   | String     | 是     | 要上传文件资源的路径                                                  |
| name       | String     | 是     | 文件对应的key , 开发者在服务器端通过这个key可以获取到文件二进制内容   |
| header     | Object     | 否     | HTTP 请求 Header，header中不能设置Referer                             |
| formData   | Object     | 否     | HTTP 请求中其他额外的form data                                        |
| success    | Function   | 否     | 接口调用成功的回调函数                                                |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

*success返回参数说明：*

| 参数         | 类型     | 说明                     |

| data         | String   | 开发者服务器返回的数据   |
| statusCode   | Number   | HTTP状态码               |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.chooseImage({
      success:function(res){
        var tempFilePaths = res.tempFilePaths
        wx.uploadFile({
          url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
          filePath: tempFilePaths[0],
          name:"file",
          formData:{
            "user":"test"
          }      success: function(res){        var data = res.data        //do something      }
        })
      }
    })
#+END_EXAMPLE

*返回值：*

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个=uploadTask=对象，通过=uploadTask=，可监听上传进度变化事件，以及取消上传任务。

** uploadTask
*uploadTask 对象的方法列表：*

| 方法               | 参数       | 说明               | 最低版本                                                        |

| onProgressUpdate   | callback   | 监听上传进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| abort              |            | 中断上传任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*onProgressUpdate 返回参数说明：*

| 参数                       | 类型     | 说明                                   |

| progress                   | Number   | 上传进度百分比                         |
| totalBytesSent             | Number   | 已经上传的数据长度，单位 Bytes         |
| totalBytesExpectedToSend   | Number   | 预期需要上传的数据总长度，单位 Bytes   |

*示例代码：*

#+BEGIN_EXAMPLE
    const uploadTask = wx.uploadFile({
        url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
        filePath: tempFilePaths[0],
        name: 'file',
        formData:{
            'user': 'test'
        },
        success: function(res){
            var data = res.data
            //do something
        }
    })

    uploadTask.onProgressUpdate((res) => {
        console.log('上传进度', res.progress)
        console.log('已经上传的数据长度', res.totalBytesSent)
        console.log('预期需要上传的数据总长度', res.totalBytesExpectedToSend)
    })

    uploadTask.abort() // 取消上传任务
#+END_EXAMPLE

** wx.downloadFile(OBJECT)
   
 
  
   



下载文件资源到本地。客户端直接发起一个HTTP
GET请求，返回文件的本地临时路径。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 必填                                                                            |

| url        | String     | 是     | 下载资源的 url                                                                  |
| header     | Object     | 否     | HTTP 请求 Header                                                                |
| success    | Function   | 否     | 下载成功后以 tempFilePath 的形式传给页面，res={tempFilePath:'文件的临时路径'}   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                          |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

*示例代码:*

#+BEGIN_EXAMPLE
    wx.downloadFile({
      url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
      success: function(res) {
        wx.playVoice({
          filePath: res.tempFilePath
        })
      }
    })
#+END_EXAMPLE

*返回值：*

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个=downloadTask=对象，通过=downloadTask=，可监听下载进度变化事件，以及取消下载任务。

** downloadTask
   
  
   

*downloadTask 对象的方法列表：*

| 方法               | 参数       | 说明               | 最低版本                                                        |

| onProgressUpdate   | callback   | 监听下载进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| abort              |            | 中断下载任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*onProgressUpdate 返回参数说明：*

| 参数                        | 类型     | 说明                                   |

| progress                    | Number   | 下载进度百分比                         |
| totalBytesWritten           | Number   | 已经下载的数据长度，单位 Bytes         |
| totalBytesExpectedToWrite   | Number   | 预期需要下载的数据总长度，单位 Bytes   |

*示例代码：*

#+BEGIN_EXAMPLE
    const downloadTask = wx.downloadFile({
        url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
        success: function(res) {
            wx.playVoice({
                filePath: res.tempFilePath
            })
        }
    })

    downloadTask.onProgressUpdate((res) => {
        console.log('下载进度', res.progress)
        console.log('已经下载的数据长度', res.totalBytesWritten)
        console.log('预期需要下载的数据总长度', res.totalBytesExpectedToWrite)
    })

    downloadTask.abort() // 取消下载任务
#+END_EXAMPLE

** wx.connectSocket(OBJECT)
创建一个
[[https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket][WebSocket]]
连接；*一个微信小程序同时只能有一个 WebSocket 连接，如果当前已存在一个
WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。*

*OBJECT参数说明：*

| 参数        | 类型          | 必填   | 说明                                                                        | 最低版本                                                        |

| url         | String        | 是     | 开发者服务器接口地址，必须是 wss 协议，且域名必须是后台配置的合法域名       |                                                                 |
| data        | Object        | 否     | 请求的数据                                                                  |                                                                 |
| header      | Object        | 否     | HTTP Header , header 中不能设置 Referer                                     |                                                                 |
| method      | String        | 否     | 默认是GET，有效值： OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT   |                                                                 |
| protocols   | StringArray   | 否     | 子协议数组                                                                  | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| success     | Function      | 否     | 接口调用成功的回调函数                                                      |                                                                 |
| fail        | Function      | 否     | 接口调用失败的回调函数                                                      |                                                                 |
| complete    | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                            |                                                                 |

\\
*示例代码：*
#+BEGIN_EXAMPLE
    wx.connectSocket({  
      url: 'test.php',
      data:{
        x: '',
        y: ''
      },
      header:{ 
        'content-type': 'application/json'
      },  protocols: ['protocol1'],
      method:"GET"
    })
#+END_EXAMPLE

** wx.onSocketOpen(CALLBACK)
监听WebSocket连接打开事件。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })
    wx.onSocketOpen(function(res) {
      console.log('WebSocket连接已打开！')
    })
#+END_EXAMPLE

** wx.onSocketError(CALLBACK)
监听WebSocket错误。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })
    wx.onSocketOpen(function(res){
      console.log('WebSocket连接已打开！')
    })
    wx.onSocketError(function(res){
      console.log('WebSocket连接打开失败，请检查！')
    })
#+END_EXAMPLE

** wx.sendSocketMessage(OBJECT)
通过 WebSocket 连接发送数据，需要先
[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][wx.connectSocket]]，并在
[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxonsocketopencallback][wx.onSocketOpen]]
回调之后才能发送。

*OBJECT参数说明：*

| 参数       | 类型                 | 必填   | 说明                                               |

| data       | String/ArrayBuffer   | 是     | 需要发送的内容                                     |
| success    | Function             | 否     | 接口调用成功的回调函数                             |
| fail       | Function             | 否     | 接口调用失败的回调函数                             |
| complete   | Function             | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    var socketOpen = false
    var socketMsgQueue = []
    wx.connectSocket({
      url: 'test.php'
    })

    wx.onSocketOpen(function(res) {
      socketOpen = true
      for (var i = 0; i < socketMsgQueue.length; i++){
         sendSocketMessage(socketMsgQueue[i])
      }
      socketMsgQueue = []
    })

    function sendSocketMessage(msg) {
      if (socketOpen) {
        wx.sendSocketMessage({
          data:msg
        })
      } else {
         socketMsgQueue.push(msg)
      }
    }
#+END_EXAMPLE

\\
** wx.onSocketMessage(CALLBACK)
监听WebSocket接受到服务器的消息事件。

*CALLBACK返回参数：*

| 参数   | 类型                 | 说明               |

| data   | String/ArrayBuffer   | 服务器返回的消息   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })

    wx.onSocketMessage(function(res) {
      console.log('收到服务器内容：' + res.data)
    })
#+END_EXAMPLE

\\
** wx.closeSocket(OBJECT)
   
 
  
   



关闭WebSocket连接。

| 参数       | 类型       | 必填   | 说明                                                                                                                  | 最低版本                                                        |

| code       | Number     | 否     | 一个数字值表示关闭连接的状态号，表示连接被关闭的原因。如果这个参数没有被指定，默认的取值是1000 （表示正常连接关闭）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| reason     | String     | 否     | 一个可读的字符串，表示连接被关闭的原因。这个字符串必须是不长于123字节的UTF-8 文本（不是字符）                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                                                                |                                                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                                                                |                                                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                                      |                                                                 |

\\
** wx.onSocketClose(CALLBACK)
   
 
  
   



监听WebSocket关闭。

#+BEGIN_EXAMPLE
    wx.connectSocket({
      url: 'test.php'
    })

    //注意这里有时序问题，
    //如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。
    //必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。
    wx.onSocketOpen(function() {
      wx.closeSocket()
    })

    wx.onSocketClose(function(res) {
      console.log('WebSocket 已关闭！')
    })
#+END_EXAMPLE

*返回值：*

#+BEGIN_QUOTE
  基础库 1.7.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

返回一个 SocketTask。

** SocketTask
   
  
   

#+BEGIN_QUOTE
  基础库 1.7.0 开始支持，低版本需做兼容处理
#+END_QUOTE

WebSocket
任务，可通过[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][ wx.connectSocket() ]]接口创建返回。
** wx.chooseImage(OBJECT)
   
 
  
   



从本地相册选择图片或使用相机拍照。

*OBJECT参数说明：*

| 参数         | 类型          | 必填   | 说明                                                |

| count        | Number        | 否     | 最多可以选择的图片张数，默认9                       |
| sizeType     | StringArray   | 否     | "original"原图，"compressed"压缩图，默认二者都有    |
| sourceType   | StringArray   | 否     | "album"从相册选图，"camera"使用相机，默认二者都由   |
| success      | Function      | 是     | 成功则返回图片的本地文件路径列表tempFilePaths       |
| fail         | Function      | 否     | 接口调用失败的回调函数                              |
| complete     | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

*success返回参数说明：*

| 参数            | 类型          | 说明                                         | 最低版本                                                        |

| tempFilePaths   | StringArray   | 图片的本地文件路径列表                       |                                                                 |
| tempFiles       | ObjectArray   | 图片的本地文件列表，每一项是一个 File 对象   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*File 对象结构如下:*

| 字段   | 类型     | 说明                    |

| path   | String   | 本地文件路径            |
| size   | Number   | 本地文件大小，单位：B   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    wx.chooseImage({
        count: 1, // 默认9
        sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
        sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
        success: function (res) {
              // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
            var tempFilePaths = res.tempFilePaths
        }
    })
#+END_EXAMPLE

** wx.previewImage(OBJECT)
   
 
  
   



预览图片。

*OBJECT参数说明：*

| 参数       | 类型          | 必填   | 说明                                               |

| current    | String        | 否     | 当前显示图片的链接，不填则默认为urls的第一张       |
| urls       | StringArray   | 是     | 需要预览的图片链接列表                             |
| success    | Function      | 否     | 接口调用成功的回调函数                             |
| fail       | Function      | 否     | 接口调用失败的回调函数                             |
| complete   | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.previewImage({
        current: '', // 当前显示图片的http链接
        urls: [] // 需要预览的图片http链接列表
    })
#+END_EXAMPLE





wx.getImageInfo(OBJECT)




  </h2>


获取图片信息。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                   |

| src        | String     | 是     | 图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                       |

*success返回参数说明：*

| 参数     | 类型     | 说明                 |

| width    | Number   | 图片宽度，单位px     |
| height   | Number   | 图片高度 单位px      |
| path     | String   | 返回图片的本地路径   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getImageInfo({
      src: 'images/a.jpg',
      success: function (res) {
        console.log(res.width)
        console.log(res.height)
      }
    })

    wx.chooseImage({
      success: function (res) {
        wx.getImageInfo({
          src: res.tempFilePaths[0],
          success: function (res) {
            console.log(res.width)
            console.log(res.height)
          }
        })
      }
    })
#+END_EXAMPLE

** wx.saveImageToPhotosAlbum(OBJECT)
   
  
   

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

保存图片到系统相册，需要用户授权（scope.writePhotosAlbum），详见
[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                                                       |

| filePath   | String     | 是     | 图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                     |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                     |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                           |

*success返回参数说明：*

| 参数名   | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 调用结果   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.saveImageToPhotosAlbum({
        success(res) {
        }
    })
#+END_EXAMPLE

\\




[[http://caibaojian.com/weixinapp/weixinapp-media-picture.html]]

\\
\\












** wx.startRecord(OBJECT)
   
 
  
   



开始录音。当主动调用wx.stopRecord，或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。当用户离开小程序时，此接口无法调用。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                                  |

| success    | Function   | 否     | 录音成功后调用，返回录音文件的临时文件路径，res={tempFilePath:"录音文件的临时路径"}   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                                |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                      |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

*success返回参数说明：*

| 参数           | 说明                 |

| tempFilePath   | 录音文件的临时路径   |

\\
** wx.stopRecord()
   
 
  
   



主动调用停止录音。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.starRecord({
      success:function(res){
         var tempFilePath = res.tempFilePath
      },
      fail:function(res){
         //录音失败
      }
    })
    setTimeout(function(){  
      //结束录音  
      wx.stopRecord()
    },10000)
#+END_EXAMPLE

** wx.playVoice(OBJECT)
   
 
  
   



开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| filePath   | String     | 是     | 需要播放的语音文件的文件路径                       |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startRecord({
      success:function(res){
        var tempFilePath = res.tempFilePath
        wx.playVoice({
          filePath:tempFilePath,
          complete:function(){
          } 
        })
      }
    })
#+END_EXAMPLE

** wx.pauseVoice()
   
 
  
   



暂停正在播放的语音。再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用wx.stopVoice。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startRecord({
      success:function(res){
        var tempFilePath = res.tempFilePath
          wx.playVoice({
          filePath: tempFilePath
        })

        setTimeout(function(){
            //暂停播放
          wx.pauseVoice()
        },5000)
      }
    })
#+END_EXAMPLE

** wx.stopVoice()
   
 
  
   



结束播放语音。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startRecord({
      success:function(res){
        var tempFilePath = res.tempFilePath
        wx.playVoice({
          filePath:tempFilePath
        })

        setTimeout(function(){
          wx.stopVoice()
        },5000)
      }
    })
#+END_EXAMPLE










** wx.getBackgroundAudioPlayerState(OBJECT)
   
 
  
   



获取音乐播放状态。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

\\
*success返回参数说明：*

| 参数              | 说明                                                              |

| duration          | 选定音频的长度（单位：s），只有在当前有音乐播放时返回             |
| currentPosition   | 选定音频的播放位置（单位：s），只有在当前有音乐播放时返回         |
| status            | 播放状态（2：没有音乐在播放，1：播放中，0：暂停中）               |
| downloadPercent   | 音频的下载进度（整数，80 代表 80%），只有在当前有音乐播放时返回   |
| dataUrl           | 歌曲数据链接，只有在当前有音乐播放时返回                          |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getBackgroundAudioPlayerState({
        success:function(res){
            var status = res.status
            var dataUrl = res.dataUrl
            var currentPosition = res.currentPosition
            var duration = res.duration
            var downloadPercent = res.downloadPercent
        }
    })
#+END_EXAMPLE

** wx.playBackgroundAudio(OBJECT)
   
 
  
   



使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户点击“显示在聊天顶部”时，音乐不会暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。

*OBJECT参数说明*

| 参数          | 类型       | 必填   | 说明                                               |

| dataUrl       | String     | 是     | 音乐链接                                           |
| title         | String     | 否     | 音乐标题                                           |
| coverImgUrl   | String     | 否     | 封面URL                                            |
| success       | Function   | 否     | 接口调用成功的回调函数                             |
| fail          | Function   | 否     | 接口调用失败的回调函数                             |
| complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码*\\

#+BEGIN_EXAMPLE
    wx.playBackgroundAudio({
        dataUrl: '',
        title: '',
        coverImgUrl: ''
    })
#+END_EXAMPLE

** wx.pauseBackgroundAudio()
   
 
  
   



暂停播放音乐。

*示例代码*

#+BEGIN_EXAMPLE
    wx.pauseBackgroundAudio()
#+END_EXAMPLE

** wx.seekBackgroundAudio(OBJECT)
   
 
  
   



控制音乐播放进度。

*OBJECT参数说明*

| 参数       | 类型       | 必填   | 说明                                               |

| position   | Number     | 是     | 音乐位置，单位：秒                                 |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码*\\

#+BEGIN_EXAMPLE
    wx.seekBackgroundAudio({
        position: 30
    })
#+END_EXAMPLE

** wx.stopBackgroundAudio()
   
 
  
   



停止播放音乐。

*示例代码*

#+BEGIN_EXAMPLE
    wx.stopBackgroundAudio()
#+END_EXAMPLE

** wx.onBackgroundAudioPlay(CALLBACK)
   
 
  
   



监听音乐播放。

** wx.onBackgroundAudioPause(CALLBACK)
   
 
  
   



监听音乐暂停。

** wx.onBackgroundAudioStop(CALLBACK)
   
 
  
   



监听音乐停止。

\\

** wx.getBackgroundAudioManager()
   
  
   

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取*全局唯一*的背景音频管理器=backgroundAudioManager=

** backgroundAudioManager
   
  
   

*backgroundAudioManager 对象的属性列表：*

| 属性          | 类型      | 说明                                                                                                        | 只读   |

| duration      | Number    | 当前音频的长度（单位：s），只有在当前有合法的 src 时返回                                                    | 是     |
| currentTime   | Number    | 当前音频的播放位置（单位：s），只有在当前有合法的 src 时返回                                                | 是     |
| paused        | Boolean   | 当前是是否暂停或停止状态，true 表示暂停或停止，false 表示正在播放                                           | 是     |
| src           | String    | 音频的数据源，默认为空字符串，*当设置了新的 src 时，会自动开始播放* ，目前支持的格式有 m4a, aac, mp3, wav   | 否     |
| startTime     | Number    | 音频开始播放的位置（单位：s）                                                                               | 否     |
| buffered      | Number    | 音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲。                                                | 是     |
| title         | String    | 音频标题，用于做原生音频播放器音频标题。原生音频播放器中的分享功能，分享出去的卡片标题，也将使用该值。      | 否     |
| epname        | String    | 专辑名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
| singer        | String    | 歌手名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
| coverImgUrl   | String    | 封面图url，用于做原生音频播放器背景图。原生音频播放器中的分享功能，分享出去的卡片配图及背景也将使用该图。   | 否     |
| webUrl        | String    | 页面链接，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                    | 否     |

*backgroundAudioManager 对象的方法列表：*

| 方法           | 参数       | 说明                                                         |

| play           |            | 播放                                                         |
| pause          |            | 暂停                                                         |
| stop           |            | 停止                                                         |
| seek           | position   | 跳转到指定位置，单位 s                                       |
| onCanplay      | callback   | 背景音频进入可以播放状态，但不保证后面可以流畅播放           |
| onPlay         | callback   | 背景音频播放事件                                             |
| onPause        | callback   | 背景音频暂停事件                                             |
| onStop         | callback   | 背景音频停止事件                                             |
| onEnded        | callback   | 背景音频自然播放结束事件                                     |
| onTimeUpdate   | callback   | 背景音频播放进度更新事件                                     |
| onPrev         | callback   | 用户在系统音乐播放面板点击上一曲事件（iOS only）             |
| onNext         | callback   | 用户在系统音乐播放面板点击下一曲事件（iOS only）             |
| onError        | callback   | 背景音频播放错误事件                                         |
| onWaiting      | callback   | 音频加载中事件，当音频因为数据不足，需要停下来加载时会触发   |

*errcode 说明*

| errCode   | 说明       |
|-----------+------------|
| 10001     | 系统错误   |
| 10002     | 网络错误   |
| 10003     | 文件错误   |
| 10004     | 格式错误   |
| -1        | 未知错误   |

*示例代码：*

#+BEGIN_EXAMPLE
    const backgroundAudioManager = wx.getBackgroundAudioManager()

    backgroundAudioManager.title = '此时此刻'
    backgroundAudioManager.epname = '此时此刻'
    backgroundAudioManager.singer = '汪峰'
    backgroundAudioManager.coverImgUrl = 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'
    backgroundAudioManager.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46' // 设置了 src 之后会自动播放 
#+END_EXAMPLE

wx.createAudioContext(audioId)
创建并返回 audio 上下文=audioContext=对象

** *audioContext*
   
  
   

=audioContext=通过 audioId 跟一个 audio 组件绑定，通过它可以操作一个
audio 组件。

*audioContext对象的方法列表：*

| 方法     | 参数       | 说明                     |

| setSrc   | src        | 音频的地址               |
| play     | 无         | 播放                     |
| pause    | 无         | 暂停                     |
| seek     | position   | 跳转到指定位置，单位 s   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    <!-- audio.wxml --><audio  src="{{src}}" id="myAudio" ></audio>

    <button type="primary" bindtap="audioPlay">播放</button>
    <button type="primary" bindtap="audioPause">暂停</button>
    <button type="primary" bindtap="audio14">设置当前播放时间为14秒</button>
    <button type="primary" bindtap="audioStart">回到开头</button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // audio.js
    Page({
      onReady: function (e) {
        // 使用 wx.createAudioContext 获取 audio 上下文 context
        this.audioCtx = wx.createAudioContext('myAudio')    this.audioCtx.setSrc('http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&fromtag=46')
        this.audioCtx.play()
      },
      data: {    src: ''
      },
      audioPlay: function () {
        this.audioCtx.play()
      },
      audioPause: function () {
        this.audioCtx.pause()
      },
      audio14: function () {
        this.audioCtx.seek(14)
      },
      audioStart: function () {
        this.audioCtx.seek(0)
      }
    })
#+END_EXAMPLE




[[http://caibaojian.com/weixinapp/weixinapp-api-audio.html]]

\\
\\












** wx.chooseVideo(OBJECT)
   
  
   



拍摄视频或从手机相册中选视频，返回视频的临时文件路径。

*OBJECT参数说明：*

| 参数          | 类型          | 必填   | 说明                                                                     |

| sourceType    | StringArray   | 否     | "album"从相册选视频，"camera"使用相机拍摄，默认为：['album', 'camera']   |
| maxDuration   | Number        | 否     | 拍摄视频最长拍摄时间，单位秒。最长支持60秒                               |
| camera        | String        | 否     | 默认调起的为前置还是后置摄像头。front: 前置，back: 后置，默认 back       |
| success       | Function      | 否     | 接口调用成功，返回视频文件的临时文件路径，详见返回参数说明               |
| fail          | Function      | 否     | 接口调用失败的回调函数                                                   |
| complete      | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                         |

*success返回参数说明：*

| 参数           | 说明                     |

| tempFilePath   | 选定视频的临时文件路径   |
| duration       | 选定视频的时间长度       |
| size           | 选定视频的数据量大小     |
| height         | 返回选定视频的长         |
| width          | 返回选定视频的宽         |

*注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*\\
*示例代码：*

#+BEGIN_EXAMPLE
    <view class="container">
        <video src="{{src}}"></video>
        <button bindtap="bindButtonTap">获取视频</button>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Page({
        bindButtonTap:function(){
            var that = this
            wx.chooseVideo({
                sourceType: ['album','camera'],
                maxDuration:60,
          camera: 'back',
                success: function(res){
                    that.setData({
                        src:res.tempFilePath
                    })
                }
            })
        }
    })
#+END_EXAMPLE

** wx.saveVideoToPhotosAlbum(OBJECT)
   
  
   

#+BEGIN_QUOTE
  基础库 1.2.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

保存视频到系统相册，需要用户授权（scope.writePhotosAlbum），详见
[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

*OBJECT参数说明：*

| 参数名     | 类型       | 必填   | 说明                                                   |

| filePath   | String     | 是     | 视频文件路径，可以是临时文件路径也可以是永久文件路径   |
| success    | Function   | 否     | 接口调用成功的回调函数                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）       |

*success返回参数说明：*

| 参数名   | 类型     | 说明       |
|----------+----------+------------|
| errMsg   | String   | 调用结果   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.saveVideoToPhotosAlbum({
        success(res) {
        }
    })
#+END_EXAMPLE

** videoContext
   
  
   

=videoContext=通过 videoId 跟一个 video 组件绑定，通过它可以操作一个
video 组件。

*videoContext对象的方法列表：*

| 方法                | 参数       | 说明                                              | 最低版本                                                        |

| play                | 无         | 播放                                              |                                                                 |
| pause               | 无         | 暂停                                              |                                                                 |
| seek                | position   | 跳转到指定位置，单位 s                            |                                                                 |
| sendDanmu           | danmu      | 发送弹幕，danmu 包含两个属性 text, color。        |                                                                 |
| playbackRate        | rate       | 设置倍速播放，支持的倍率有 0.5/0.8/1.0/1.25/1.5   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| requestFullScreen   | 无         | 进入全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| exitFullScreen      | 无         | 退出全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    <view class="section tc">  <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400"   enable-danmu danmu-btn controls></video>
      <view class="btn-area">
        <input bindblur="bindInputBlur"/>
        <button bindtap="bindSendDanmu">发送弹幕</button>
      </view>
    </view>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    function getRandomColor () {
      let rgb = []
      for (let i = 0 ; i < 3; ++i){
        let color = Math.floor(Math.random() * 256).toString(16)
        color = color.length == 1 ? '0' + color : color
        rgb.push(color)
      }
      return '#' + rgb.join('')
    }

    Page({
      onReady: function (res) {
        this.videoContext = wx.createVideoContext('myVideo')
      },
      inputValue: '',
      bindInputBlur: function(e) {
        this.inputValue = e.detail.value
      },
      bindSendDanmu: function () {
        this.videoContext.sendDanmu({
          text: this.inputValue,
          color: getRandomColor()
        })
      }
    })
#+END_EXAMPLE




[[http://caibaojian.com/weixinapp/weixinapp-api-video.html]]

\\
\\












** wx.createCameraContext(this)
   
  
   



#+BEGIN_QUOTE
  基础库 1.6.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

创建并返回 camera
上下文 cameraContext 对象，cameraContext 与页面的 camera 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 <camera/> 组件。
在自定义组件下，第一个参数传入组件实例this，以操作组件内 <camera/> 组件

** wx.saveFile(OBJECT)
   
  
   



保存文件到本地。

** wx.getFileInfo(OBJECT)
   
 
  
   

#+BEGIN_QUOTE
  基础库 1.4.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取文件信息

*OBJECT参数说明：*

| 参数名            | 类型       | 必填   | 说明                                                |

| filePath          | String     | 是     | 本地文件路径                                        |
| digestAlgorithm   | String     | 否     | 计算文件摘要的算法，默认值 md5，有效值：md5，sha1   |
| success           | Function   | 否     | 接口调用成功的回调函数                              |
| fail              | Function   | 否     | 接口调用失败的回调函数                              |
| complete          | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

*success返回参数说明：*

| 参数名   | 类型     | 说明                                              |

| size     | Number   | 文件大小，单位：B                                 |
| digest   | String   | 按照传入的 digestAlgorithm 计算得出的的文件摘要   |
| errMsg   | String   | 调用结果                                          |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getFileInfo({
        success(res) {
            console.log(res.size)
            console.log(res.digest)
        }
    })
#+END_EXAMPLE

\\

** wx.getSavedFileList(OBJECT)
   
 
  
   



获取本地已保存的文件列表

*** *OBJECT参数说明：*
    
  
    

| 参数       | 类型       | 必填   | 说明                                                      |

| success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                    |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

*** *success返回参数说明：*
    
  
    

| 参数       | 类型           | 说明           |

| errMsg     | String         | 接口调用结果   |
| fileList   | Object Array   | 文件列表       |

*** *fileList中的项目说明：*
    
  
    

| 键           | 类型     | 说明                                                           |

| filePath     | String   | 文件的本地路径                                                 |
| createTime   | Number   | 文件的保存时的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |
| size         | Number   | 文件大小，单位B                                                |

*** *示例代码：*
    
  
    

#+BEGIN_EXAMPLE
    wx.getSavedFileList({
      success: function(res) {
        console.log(res.fileList)
      }
    })
#+END_EXAMPLE

\\





wx.getSavedFileInfo(OBJECT)




  </h2>


获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用
[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_82/weixinapp-file.xhtml#wxgetFileInfo][wx.getFileInfo]]
接口。\\

*** *OBJECT参数说明：*
    
  
    

| 参数       | 类型       | 必填   | 说明                                                      |

| filePath   | String     | 是     | 文件路径                                                  |
| success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                    |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

*** *success返回参数说明：*
    
  
    

| 参数         | 类型     | 说明                                                           |

| errMsg       | String   | 接口调用结果                                                   |
| size         | Number   | 文件大小，单位B                                                |
| createTime   | Number   | 文件的保存是的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |

*** *示例代码：*
    
  
    

#+BEGIN_EXAMPLE
    wx.getSavedFileInfo({
      filePath: 'wxfile://somefile', //仅做示例用，非真正的文件路径
      success: function(res) {
        console.log(res.size)
        console.log(res.createTime)
      }
    })
#+END_EXAMPLE

\\





wx.removeSavedFile(OBJECT)




  </h2>


删除本地存储的文件

*** *OBJECT参数说明：*
    
  
    

| 参数       | 类型       | 必填   | 说明                                               |

| filePath   | String     | 是     | 需要删除的文件路径                                 |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*** *示例代码：*
    
  
    

#+BEGIN_EXAMPLE
    wx.getSavedFileList({
      success: function(res) {
        if (res.fileList.length > 0){
          wx.removeSavedFile({
            filePath: res.fileList[0].filePath,
            complete: function(res) {
              console.log(res)
            }
          })
        }
      }
    })
#+END_EXAMPLE

\\





wx.openDocument(OBJECT)




  </h2>


新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx

*OBJECT参数说明：*

| 参数       | 说明       | 必填   | 说明                                                                          | 最低版本                                                        |

| filePath   | String     | 是     | 文件路径，可通过 downFile 获得                                                |                                                                 |
| fileType   | String     | 否     | 文件类型，指定文件类型打开文件，有效值 doc, xls, ppt, pdf, docx, xlsx, pptx   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| success    | Function   | 否     | 接口调用成功的回调函数                                                        |                                                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                        |                                                                 |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                              |                                                                 |

*** 示例代码
    
  
    

#+BEGIN_EXAMPLE
    wx.downloadFile({  url: 'http://example.com/somefile.pdf',
      success: function (res) {
        var filePath = res.tempFilePath 
        wx.openDocument({
          filePath: filePath,
          success: function (res) {
            console.log('打开文档成功')
          }
        })
      }
    })
#+END_EXAMPLE




[[http://caibaojian.com/weixinapp/weixinapp-file.html]]

\\
\\












每个微信小程序都可以有自己的本地缓存，可以通过wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。同一个微信用户，同一个小程序
storage 上限为 10MB。localStorage 以用户维度隔离，同一台设备上，A
用户无法读取到 B 用户的数据。

*注意：*
localStorage是永久存储的，但是我们不建议将关键信息全部存在localStorage，以防用户换设备的情况。

** wx.setStorage(OBJECT)
   
 
  
   



将数据存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个异步接口。

*OBJECT参数说明：*

| 参数       | 类型            | 必填   | 说明                                               |

| key        | String          | 是     | 本地缓存中的指定的 key                             |
| data       | Object/String   | 是     | 需要存储的内容                                     |
| success    | Function        | 否     | 接口调用成功的回调函数                             |
| fail       | Function        | 否     | 接口调用失败的回调函数                             |
| complete   | Function        | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码*

#+BEGIN_EXAMPLE
    wx.setStorage({
      key:"key"
      data:"value"
    })
#+END_EXAMPLE

** wx.setStorageSync(KEY,DATA)
   
 
  
   



将data存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个同步接口。

*参数说明：*

| 参数   | 类型            | 必填   | 说明                    |

| key    | String          | 是     | 本地缓存中的指定的key   |
| data   | Object/String   | 是     | 需要存储的内容          |

*示例代码*

#+BEGIN_EXAMPLE
    try {
       wx.setStorageSync("key","value")
    } catch (e) {
    }
#+END_EXAMPLE

** wx.getStorage(OBJECT)
   
 
  
   



从本地缓存中异步获取指定key对应的内容。

*OBJECT参数说明：*\\

| 参数       | 类型       | 必填   | 说明                                               |

| key        | String     | 是     | 本地缓存中的指定的 key                             |
| success    | Function   | 是     | 接口调用的回调函数,res = {data: key对应的内容}     |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数   | 类型     | 说明            |

| data   | String   | key对应的内容   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getStorage({
      key:'key',
      success: function(res){
          console.log(res.data)
      } 
    })
#+END_EXAMPLE

** wx.getStorageSync(KEY)
本地缓存中同步获取指定key对应的内容。

*参数说明：*

| 参数   | 类型     | 必填   | 说明                    |

| key    | String   | 是     | 本地缓存中的指定的key   |

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var value = wx.getStorageSync('key')
      if (value) {
          // Do something with return value
      }
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE





wx.getStorageInfo(OBJECT)




  </h2>


异步获取当前storage的相关信息

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 接口调用的回调函数，详见返回参数说明               |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数          | 类型           | 说明                         |

| keys          | String Array   | 当前storage中所有的key       |
| currentSize   | Number         | 当前占用的空间大小, 单位kb   |
| limitSize     | Number         | 限制的空间大小，单位kb       |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getStorageInfo({
      success: function(res) {
        console.log(res.keys)
        console.log(res.currentSize)
        console.log(res.limitSize)
      }
    })
#+END_EXAMPLE





wx.getStorageInfoSync




  </h2>


同步获取当前storage的相关信息

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var res = wx.getStorageInfoSync()
      console.log(res.keys)
      console.log(res.currentSize)
      console.log(res.limitSize)
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE





wx.removeStorage(OBJECT)




  </h2>


从本地缓存中异步移除指定 key 。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| key        | String     | 是     | 本地缓存中的指定的 key                             |
| success    | Function   | 是     | 接口调用的回调函数                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.removeStorage({
      key: 'key',
      success: function(res) {
        console.log(res.data)
      } 
    })
#+END_EXAMPLE





wx.removeStorageSync(KEY)




  </h2>


从本地缓存中同步移除指定 key 。

*参数说明：*

| 参数   | 类型     | 必填   | 说明                     |

| key    | String   | 是     | 本地缓存中的指定的 key   |

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      wx.removeStorageSync('key')
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE

** wx.clearStorage()
   

 
   



清理本地数据缓存。

*示例代码：*

#+BEGIN_EXAMPLE
    wx.clearStorage()
#+END_EXAMPLE

** wx.clearStorageSync()
   

 
   



同步清理本地数据缓存

*示例代码：*

#+BEGIN_EXAMPLE
    try {
        wx.clearStorageSync()
    } catch(e) {
      // Do something when catch error
    }
#+END_EXAMPLE

** wx.chooseLocation(OBJECT)
   
 
   



打开地图选择位置。

需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]] scope.userLocation\\

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                 |

| success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
| cancel     | Function   | 否     | 用户取消时调用                                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                               |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

*success返回参数说明：*

| 参数        | 说明                                         |

| name        | 位置名称                                     |
| address     | 详细地址                                     |
| latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
| longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

\\
\\




[[http://caibaojian.com/weixinapp/weixinapp-location.html]]

\\
\\












** wx.getLocation(OBJECT)
   

 
   



获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                                  |

| type       | String     | 否     | 默认为 wgs84 返回 gps 坐标，gcj02 返回可用于=wx.openLocation=的坐标   |
| success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。                    |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

*success返回参数说明：*

| 参数                 | 说明                                           | 最低版本                                                        |

| latitude             | 纬度，浮点数，范围为-90~90，负数表示南纬       |                                                                 |
| longitude            | 经度，浮点数，范围为-180~180，负数表示西经     |                                                                 |
| speed                | 速度，浮点数，单位m/s                          |                                                                 |
| accuracy             | 位置的精确度                                   |                                                                 |
| altitude             | 高度，单位 m                                   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| verticalAccuracy     | 垂直精度，单位 m（Android 无法获取，返回 0）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| horizontalAccuracy   | 水平精度，单位 m                               | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getLocation({
      type: 'wgs84',
      success: function(res) {
        var latitude = res.latitude
        var longitude = res.longitude
        var speed = res.speed
        var accuracy = res.accuracy
      }
    })
#+END_EXAMPLE

** wx.chooseLocation(OBJECT)
   

 
   



打开地图选择位置。

需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
scope.userLocation

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                                 |

| success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
| fail       | Function   | 否     | 接口调用失败的回调函数                               |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

*success返回参数说明：*

| 参数        | 说明                                         |

| name        | 位置名称                                     |
| address     | 详细地址                                     |
| latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
| longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

** wx.openLocation(OBJECT)
   

 
   



使用微信内置地图查看位置。

需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
scope.userLocation

*OBJECT参数说明：*

| 参数        | 类型       | 必填   | 说明                                               |

| latitude    | Float      | 是     | 纬度，范围为-90~90，负数表示南纬                   |
| longitude   | Float      | 是     | 经度，范围为-180~180，负数表示西经                 |
| scale       | INT        | 否     | 缩放比例，范围5~18，默认为18                       |
| name        | String     | 否     | 位置名                                             |
| address     | String     | 否     | 地址的详细说明                                     |
| success     | Function   | 否     | 接口调用成功的回调函数                             |
| fail        | Function   | 否     | 接口调用失败的回调函数                             |
| complete    | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getLocation({
      type: 'gcj02', //返回可以用于wx.openLocation的经纬度
      success: function(res) {
        var latitude = res.latitude
        var longitude = res.longitude
        wx.openLocation({
          latitude: latitude,
          longitude: longitude,
          scale: 28
        })
      }
    })
#+END_EXAMPLE

** wx.createMapContext(mapId)
   

 
   



创建并返回 map
上下文 =mapContext= 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 =<map/>= 组件\\

\\

*mapContext*

=mapContext=通过 mapId
跟一个=<map/>=组件绑定，通过它可以操作对应的=<map/>=组件。

*mapContext 对象的方法列表*

| 方法                | 参数     | 说明                                                                                                                                           | 最低版本                                                        |

| getCenterLocation   | OBJECT   | 获取当前地图中心的经纬度，返回的是 gcj02 坐标系，可以用于 [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][=wx.openLocation=]]   |                                                                 |
| moveToLocation      | 无       | 将地图中心移动到当前定位点，需要配合map组件的show-location使用                                                                                 |                                                                 |
| translateMarker     | OBJECT   | 平移marker，带动画                                                                                                                             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| includePoints       | OBJECT   | 缩放视野展示所有经纬度                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| getRegion           | OBJECT   | 获取当前地图的视野范围                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
| getScale            | OBJECT   | 获取当前地图的缩放级别                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

*getCenterLocation 的 OBJECT 参数列表*

| 参数       | 类型       | 必填   | 说明                                                                    |

| success    | Function   | 否     | 接口调用成功的回调函数 ，res = { longitude: "经度", latitude: "纬度"}   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                  |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                        |

*translateMarker 的 OBJECT 参数列表*

| 参数           | 类型       | 必填   | 说明                                             |

| markerId       | Number     | 是     | 指定marker                                       |
| destination    | Object     | 是     | 指定marker移动到的目标点                         |
| autoRotate     | Boolean    | 是     | 移动过程中是否自动旋转marker                     |
| rotate         | Number     | 是     | marker的旋转角度                                 |
| duration       | Number     | 否     | 动画持续时长，默认值1000ms，平移与旋转分别计算   |
| animationEnd   | Function   | 否     | 动画结束回调函数                                 |
| fail           | Function   | 否     | 接口调用失败的回调函数                           |

*includePoints 的 OBJECT 参数列表*

| 参数      | 类型    | 必填   | 说明                                                                                                                                                    |

| points    | Array   | 是     | 要显示在可视区域内的坐标点列表，[{latitude, longitude}]                                                                                                 |
| padding   | Array   | 否     | 坐标点形成的矩形边缘到地图边缘的距离，单位像素。格式为[上,右,下,左]，安卓上只能识别数组第一项，上下左右的padding一致。开发者工具暂不支持padding参数。   |

*getRegion 的 OBJECT 参数列表*

| 参数       | 类型       | 必填   | 说明                                                                           |

| success    | Function   | 否     | 接口调用成功的回调函数，res = {southwest, northeast}，西南角与东北角的经纬度   |
| fail       | Function   | 否     | 接口调用失败的回调函数                                                         |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                               |

*getScale 的 OBJECT 参数列表*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数，res = {scale}              |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

\\

*示例代码：*

**

#+BEGIN_EXAMPLE
    <!-- map.wxml -->
    <map id="myMap" show-location />

    <button type="primary" bindtap="getCenterLocation">获取位置</button>
    <button type="primary" bindtap="moveToLocation">移动位置</button>
    <button type="primary" bindtap="translateMarker">移动标注</button>
    <button type="primary" bindtap="includePoints">缩放视野展示所有经纬度</button>
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    // map.js
    Page({
      onReady: function (e) {
        // 使用 wx.createMapContext 获取 map 上下文
        this.mapCtx = wx.createMapContext('myMap')
      },
      getCenterLocation: function () {
        this.mapCtx.getCenterLocation({
          success: function(res){
            console.log(res.longitude)
            console.log(res.latitude)
          }
        })
      },
      moveToLocation: function () {
        this.mapCtx.moveToLocation()
      },
      translateMarker: function() {
        this.mapCtx.translateMarker({
          markerId: 0,
          autoRotate: true,
          duration: 1000,
          destination: {
            latitude:23.10229,
            longitude:113.3345211,
          },
          animationEnd() {
            console.log('animation end')
          }
        })
      },
      includePoints: function() {
        this.mapCtx.includePoints({
          padding: [10],
          points: [{
            latitude:23.10229,
            longitude:113.3345211,
          }, {
            latitude:23.00229,
            longitude:113.3345211,
          }]
        })
      }
    })
#+END_EXAMPLE

\\




[[http://caibaojian.com/weixinapp/weixinapp-api-map.html]]

\\
\\
















微信小程序API设备概览




  </h2>


- [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][系统信息]]------（[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][wx.getSystemInfo]]、[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfosync][wx.getSystemInfoSync]]）\\
- [[file:weixinapp-api-device.html][网络状态]]------（[[file:weixinapp-api-device.html#wxgetnetworktypeobject][wx.getNetworkType]]）\\
- [[file:weixinapp-api-accelerometer.html][重力感应]]------（[[file:weixinapp-api-accelerometer.html#wxonaccelerometerchangecallback][wx.onAccelerometerChange]]）\\
- [[file:weixinapp-api-campass.html][罗
  盘]]------（[[file:weixinapp-api-campass.html#wxoncompasschangecallback][wx.onCompassChange]]）\\
- [[file:weixinapp-api-phonecall.html][拨打电话]]------（[[file:weixinapp-api-phonecall.html#wxmakephonecallobject][wx.makePhoneCall]]）\\
- [[file:weixinapp-api-scancode.html][扫
  码]]------（[[file:weixinapp-api-scancode.html#wxscancodeobject][wx.scanCode]]）\\

** wx.getSystemInfo(OBJECT)
   

 
   



获取系统信息。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 接口调用成功的回调                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success回调参数说明：*

| 属性           | 说明             |

| model          | 手机型号         |
| pixelRatio     | 设备像素比       |
| windowWidth    | 窗口宽度         |
| windowHeight   | 窗口高度         |
| language       | 微信设置的语言   |
| version        | 微信版本号       |
| system         | 操作系统版本     |
| platform       | 客户端平台       |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getSystemInfo({
      success: function(res) {
        console.log(res.model)
        console.log(res.pixelRatio)
        console.log(res.windowWidth)
        console.log(res.windowHeight)
        console.log(res.language)
        console.log(res.version)
        console.log(res.platform)
      }
    })
#+END_EXAMPLE

\\
** wx.getSystemInfoSync()
   

 
   



获取系统信息同步接口

*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var res = wx.getSystemInfoSync()
      console.log(res.model)
      console.log(res.pixelRatio)
      console.log(res.windowWidth)
      console.log(res.windowHeight)
      console.log(res.language)
      console.log(res.version)
      console.log(res.platform)
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE




[[http://caibaojian.com/weixinapp/weixinapp-o1xc1xz3.html]]

\\
\\
















wx.getSystemInfo(OBJECT)




  </h2>


获取系统信息。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 接口调用成功的回调                                 |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success回调参数说明：*

| 参数              | 说明                                                                | 最低版本                                                        |

| model             | 手机型号                                                            |                                                                 |
| pixelRatio        | 设备像素比                                                          |                                                                 |
| screenWidth       | 屏幕宽度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| screenHeight      | 屏幕高度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| windowWidth       | 可使用窗口宽度                                                      |                                                                 |
| windowHeight      | 可使用窗口高度                                                      |                                                                 |
| language          | 微信设置的语言                                                      |                                                                 |
| version           | 微信版本号                                                          |                                                                 |
| system            | 操作系统版本                                                        |                                                                 |
| platform          | 客户端平台                                                          |                                                                 |
| fontSizeSetting   | 用户字体大小设置。以“我-设置-通用-字体大小”中的设置为准，单位：px   | [[http://caibaojian.com/weixinapp/compatibility.html][1.5.0]]   |
| SDKVersion        | 客户端基础库版本                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    wx.getSystemInfo({
      success: function(res) {
        console.log(res.model)
        console.log(res.pixelRatio)
        console.log(res.windowWidth)
        console.log(res.windowHeight)
        console.log(res.language)
        console.log(res.version)
        console.log(res.platform)
      }
    })
#+END_EXAMPLE





wx.getSystemInfoSync()




  </h2>


获取系统信息同步接口

*同步返回参数说明：*

| 参数           | 说明               | 最低版本                                                        |

| model          | 手机型号           |                                                                 |
| pixelRatio     | 设备像素比         |                                                                 |
| screenWidth    | 屏幕宽度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| screenHeight   | 屏幕高度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
| windowWidth    | 可使用窗口宽度     |                                                                 |
| windowHeight   | 可使用窗口高度     |                                                                 |
| language       | 微信设置的语言     |                                                                 |
| version        | 微信版本号         |                                                                 |
| system         | 操作系统版本       |                                                                 |
| platform       | 客户端平台         |                                                                 |
| SDKVersion     | 客户端基础库版本   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

\\
*示例代码：*

#+BEGIN_EXAMPLE
    try {
      var res = wx.getSystemInfoSync()
      console.log(res.model)
      console.log(res.pixelRatio)
      console.log(res.windowWidth)
      console.log(res.windowHeight)
      console.log(res.language)
      console.log(res.version)
      console.log(res.platform)
    } catch (e) {
      // Do something when catch error
    }
#+END_EXAMPLE





wx.canIUse(String)




  </h2>


判断小程序的API，回调，参数，组件等是否在当前版本可用。

*String参数说明：* 使用=${API}.${method}.${param}.${options}=或者=${component}.${attribute}.${option}=方式来调用，例如：

- =${API}=代表 API 名字
- =${method}=代表调用方式，有效值为=return=, =success=, =object=, =callback=
- =${param}=代表参数或者返回值
- =${options}=代表参数的可选值
- =${component}=代表组件名字
- =${attribute}=代表组件属性
- =${option}=代表组件属性的可选值

例子：

#+BEGIN_EXAMPLE
    wx.canIUse('openBluetoothAdapter')wx.canIUse('getSystemInfoSync.return.screenWidth')
    wx.canIUse('getSystemInfo.success.screenWidth')
    wx.canIUse('showToast.object.image')
    wx.canIUse('onCompassChange.callback.direction')
    wx.canIUse('request.object.method.GET')
    wx.canIUse('contact-button')
    wx.canIUse('text.selectable')
    wx.canIUse('button.open-type.contact')
#+END_EXAMPLE

\\




[[http://caibaojian.com/weixinapp/weixinapp-device.html]]

\\
\\












** wx.getNetworkType(OBJECT)
   

 
   



获取网络类型。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 接口调用成功，返回网络类型 networkType             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数          | 说明       |

| networkType   | 网络类型   |

#+BEGIN_EXAMPLE
    wx.getNetworkType({
      success: function(res) {
        // 返回网络类型, 有效值：
        // wifi/2g/3g/4g/unknown(Android下不常见的网络类型)/none(无网络)
        var networkType = res.networkType
      }
    })
#+END_EXAMPLE





wx.onNetworkStatusChange(CALLBACK)




  </h2>


#+BEGIN_QUOTE
  基础库 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听网络状态变化。

*CALLBACK返回参数：*

| 参数          | 类型      | 说明                 |

| isConnected   | Boolean   | 当前是否有网络连接   |
| networkType   | String    | 网络类型             |

*networkType 有效值：*

| 值        | 说明                        |

| wifi      | wifi 网络                   |
| 2g        | 2g 网络                     |
| 3g        | 3g 网络                     |
| 4g        | 4g 网络                     |
| none      | 无网络                      |
| unknown   | Android下不常见的网络类型   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onNetworkStatusChange(function(res) {
      console.log(res.isConnected)
      console.log(res.networkType)
    })
#+END_EXAMPLE

\\
\\
\\




[[http://caibaojian.com/weixinapp/weixinapp-api-device.html]]

\\
\\












** wx.onAccelerometerChange(CALLBACK)
   

 
   



监听重力感应数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopAccelerometer=停止监听。\\

*CALLBACK返回参数：*

| 参数   | 类型     | 说明   |
|--------+----------+--------|
| x      | Number   | X 轴   |
| y      | Number   | Y 轴   |
| z      | Number   | Z 轴   |

**

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onAccelerometerChange(function(res) {
      console.log(res.x)
      console.log(res.y)
      console.log(res.z)
    })
#+END_EXAMPLE





wx.startAccelerometer(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

  微信客户端 6.5.6 版本开始支持
#+END_QUOTE

开始监听加速度数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startAccelerometer()
#+END_EXAMPLE





wx.stopAccelerometer(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

  微信客户端 6.5.6 版本开始支持
#+END_QUOTE

停止监听加速度数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.stopAccelerometer()
#+END_EXAMPLE




[[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html]]

\\
\\
















wx.onCompassChange(CALLBACK)




  </h2>


监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopCompass=停止监听。\\

*CALLBACK返回参数：*

| 参数        | 类型     | 说明             |

| direction   | Number   | 面对的方向度数   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onCompassChange(function (res) {
      console.log(res.direction)
    })
#+END_EXAMPLE





wx.startCompass(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

开始监听罗盘数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.startCompass()
#+END_EXAMPLE





wx.stopCompass(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

停止监听罗盘数据。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.stopCompass()
#+END_EXAMPLE

\\




[[http://caibaojian.com/weixinapp/weixinapp-api-campass.html]]

\\
\\












** wx.makePhoneCall(OBJECT)
   

 
   



*OBJECT参数说明：*

| 参数          | 类型       | 必填   | 说明                                               |

| phoneNumber   | String     | 是     | 需要拨打的电话号码                                 |
| success       | Function   | 否     | 接口调用成功的回调                                 |
| fail          | Function   | 否     | 接口调用失败的回调函数                             |
| complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.makePhoneCall({
      phoneNumber: '1340000' //仅为示例，并非真实的电话号码
    })
#+END_EXAMPLE




[[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html]]

\\
\\












** wx.scanCode(OBJECT)
   

 
   



调起客户端扫码界面，扫码成功后返回对应的结果

*Object 参数说明：*

| 参数             | 类型       | 必填   | 说明                                                 | 最低版本                                                        |

| onlyFromCamera   | Boolean    | 否     | 是否只能从相机扫码，不允许从相册选择图片             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
| success          | Function   | 否     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |                                                                 |
| fail             | Function   | 否     | 接口调用失败的回调函数                               |                                                                 |
| complete         | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |                                                                 |

*success返回参数说明：*

| 参数       | 说明                                                                          |

| result     | 所扫码的内容                                                                  |
| scanType   | 所扫码的类型                                                                  |
| charSet    | 所扫码的字符集                                                                |
| path       | 当所扫的码为当前小程序的合法二维码时，会返回此字段，内容为二维码携带的 path   |

*示例代码：*

#+BEGIN_EXAMPLE
    // 允许从相机和相册扫码
    wx.scanCode({
      success: (res) => {
        console.log(res)
      }
    })

    // 只允许从相机扫码
    wx.scanCode({
      onlyFromCamera: true,
      success: (res) => {
        console.log(res)
      }
    })
#+END_EXAMPLE

\\




[[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html]]

\\
\\
















wx.setClipboardData(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

设置系统剪贴板的内容。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| data       | String     | 是     | 需要设置的内容                                     |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.setClipboardData({
      data: 'data',
      success: function(res) {
        wx.getClipboardData({
          success: function(res) {
            console.log(res.data) // data
          }
        })
      }
    })
#+END_EXAMPLE





wx.getClipboardData(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取系统剪贴板内容

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数说明：*

| 参数   | 类型     | 说明           |

| data   | String   | 剪贴板的内容   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getClipboardData({
      success: function(res){
        console.log(res.data)
      }
    })
#+END_EXAMPLE




[[http://caibaojian.com/weixinapp/weixinapp-clipboard.html]]

\\
\\












** 蓝牙适配器接口
   
 
   



#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

  iOS 微信客户端 6.5.6 版本开始支持，Android 客户端暂不支持
#+END_QUOTE





wx.openBluetoothAdapter(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

初始化蓝牙适配器

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 成功则返回成功初始化信息                           |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.openBluetoothAdapter({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

** Bug & Tip
   
 
   

1. =tip=: 由于系统的问题，目前仅在 mac 版的开发工具上支持蓝牙调试
2. =tip=: 基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]





wx.closeBluetoothAdapter(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

关闭蓝牙模块。调用该方法将断开所有已建立的链接并释放系统资源

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 成功则返回成功关闭模块信息                         |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.closeBluetoothAdapter({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE





wx.getBluetoothAdapterState(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取本机蓝牙适配器状态

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数          | 类型      | 说明                       |

| discovering   | Boolean   | 是否正在搜索设备           |
| available     | Boolean   | 蓝牙适配器是否可用         |
| errMsg        | String    | 成功：ok，错误：详细信息   |

**** *示例代码：*\\
     

 
     

#+BEGIN_EXAMPLE
    wx.getBluetoothAdapterState({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE





wx.onBluetoothAdapterStateChange(CALLBACK)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听蓝牙适配器状态变化事件

*CALLBACK参数说明：*

| 参数          | 类型      | 说明                         |

| available     | boolean   | 蓝牙适配器是否可用           |
| discovering   | boolean   | 蓝牙适配器是否处于搜索状态   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onBluetoothAdapterStateChange(function(res) {
      console.log(`adapterState changed, now is`, res)
    })
#+END_EXAMPLE





wx.startBluetoothDevicesDiscovery(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用
stop 方法停止搜索。

*OBJECT参数说明：*

| 参数                 | 类型       | 必填   | 说明                                                                                                        |

| services             | Array      | 否     | 蓝牙设备主 service 的 uuid 列表                                                                             |
| allowDuplicatesKey   | boolean    | 否     | 是否允许重复上报同一设备， 如果允许重复上报，则onDeviceFound 方法会多次上报同一设备，但是 RSSI 值会有不同   |
| interval             | integer    | 否     | 上报设备的间隔，默认为0，意思是找到新设备立即上报，否则根据传入的间隔上报                                   |
| success              | Function   | 是     | 成功则返回本机蓝牙适配器状态                                                                                |
| fail                 | Function   | 否     | 接口调用失败的回调函数                                                                                      |
| complete             | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                            |

*services*参数说明：某些蓝牙设备会广播自己的主 service 的
uuid。如果这里传入该数组，那么根据该 uuid
列表，只搜索有这个主服务的设备。

*success返回参数：*

| 参数            | 类型      | 说明                             |

| errMsg          | string    | 成功：ok，错误：详细信息         |
| isDiscovering   | boolean   | 当前蓝牙适配器是否处于搜索状态   |

*示例代码：*\\

#+BEGIN_EXAMPLE
    // 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备
    wx.startBluetoothDevicesDiscovery({
      services: ['FEE7'],
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE





wx.stopBluetoothDevicesDiscovery(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

停止搜寻附近的蓝牙外围设备。请在确保找到需要连接的设备后调用该方法停止搜索。

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数     | 类型     | 说明                       |

| errMsg   | string   | 成功：ok，错误：详细信息   |

*adapterState*

蓝牙适配器状态信息

| 参数          | 类型      | 说明                 |

| discovering   | boolean   | 是否正在搜索设备     |
| available     | boolean   | 蓝牙适配器是否可用   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.stopBluetoothDevicesDiscovery({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE





wx.getBluetoothDevices(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

获取所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数      | 类型     | 说明                          |

| devices   | Array    | uuid 对应的的已连接设备列表   |
| errMsg    | string   | 成功：ok，错误：详细信息      |

*device 对象*

蓝牙设备信息

| 参数           | 类型          | 说明                                                                         |

| name           | string        | 蓝牙设备名称，某些设备可能没有                                               |
| deviceId       | string        | 用于区分设备的 id                                                            |
| RSSI           | int           | 当前蓝牙设备的信号强度                                                       |
| advertisData   | ArrayBuffer   | 当前蓝牙设备的广播内容*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getBluetoothDevices({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

** Bug & Tip
   
 
   

1. =tip=: Mac系统可能无法获取=advertisData=及=RSSI=，请使用真机调试
2. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
   上则为设备 uuid。因此=deviceId=不能硬编码到代码中





wx.getConnectedBluetoothDevices(OBJECT)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

根据 uuid 获取处于已连接状态的设备

*OBJECT参数说明：*

| 参数       | 类型       | 必填   | 说明                                               |

| services   | Array      | 是     | 蓝牙设备主 service 的 uuid 列表                    |
| success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

*success返回参数：*

| 参数      | 类型     | 说明                       |

| devices   | Array    | 搜索到的设备列表           |
| errMsg    | string   | 成功：ok，错误：详细信息   |

*device对象*

蓝牙设备信息

| 参数       | 类型     | 说明                             |

| name       | string   | 蓝牙设备名称，某些设备可能没有   |
| deviceId   | string   | 用于区分设备的 id                |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.getConnectedBluetoothDevices({
      success: function (res) {
        console.log(res)
      }
    })
#+END_EXAMPLE

** Bug & Tip
   
 
   

1. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
   上则为设备 uuid。因此=deviceId=不能硬编码到代码中





wx.onBluetoothDeviceFound(CALLBACK)




  </h2>


#+BEGIN_QUOTE
  基础库版本 1.1.0
  开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
#+END_QUOTE

监听寻找到新设备的事件

*CALLBACK参数说明：*

| 参数      | 类型    | 说明                 |

| devices   | Array   | 新搜索到的设备列表   |

*device对象*

| 参数           | 类型          | 说明                                                                         |

| deviceId       | string        | 蓝牙设备 id，参考 device 对象                                                |
| name           | string        | 蓝牙设备名称，参考 device 对象                                               |
| RSSI           | int           | 当前蓝牙设备的信号强度                                                       |
| advertisData   | ArrayBuffer   | 当前蓝牙设备的广播内容*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

*示例代码：*

#+BEGIN_EXAMPLE
    wx.onBluetoothDeviceFound(function(devices) {
      console.log('new device list has founded')
      console.dir(devices)
    })
#+END_EXAMPLE

** Bug & Tip
   
 
   

1. =tip=: Mac系统可能无法获取=advertisData=及=RSSI=，请使用真机调试
2. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
   上则为设备 uuid。因此=deviceId=不能硬编码到代码中

** 低功耗蓝牙接口
   
 
   





 wx.createBLEConnection(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 连接低功耗蓝牙设备

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
 | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数     | 类型     | 说明                       |

 | errMsg   | string   | 成功：ok，错误：详细信息   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.createBLEConnection({
       // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
       deviceId: deviceId,
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE





 wx.closeBLEConnection(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 断开与低功耗蓝牙设备的连接

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
 | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数     | 类型     | 说明                       |

 | errMsg   | string   | 成功：ok，错误：详细信息   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.closeBLEConnection({
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE





 wx.getBLEDeviceServices(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取蓝牙设备所有 service（服务）

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
 | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数       | 类型     | 说明                       |

 | services   | array    | 设备服务列表               |
 | errMsg     | string   | 成功：ok，错误：详细信息   |

 *service对象*

 蓝牙设备service(服务)信息

 | 参数        | 类型      | 说明                  |

 | uuid        | string    | 蓝牙设备服务的 uuid   |
 | isPrimary   | boolean   | 该服务是否为主服务    |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getBLEDeviceServices({
       // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
       deviceId: deviceId,
       success: function (res) {
         console.log('device services:', res.services)
       }
     })
 #+END_EXAMPLE





 wx.getBLEDeviceCharacteristics(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取蓝牙设备所有 characteristic（特征值）

 *OBJECT参数说明：*

 | 参数        | 类型       | 必填   | 说明                                               |

 | deviceId    | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
 | serviceId   | string     | 是     | 蓝牙服务 uuid                                      |
 | success     | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail        | Function   | 否     | 接口调用失败的回调函数                             |
 | complete    | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数              | 类型     | 说明                       |

 | characteristics   | array    | 设备特征值列表             |
 | errMsg            | string   | 成功：ok，错误：详细信息   |

 *characteristic对象*

 蓝牙设备characteristic(特征值)信息

 | 参数         | 类型     | 说明                     |

 | uuid         | string   | 蓝牙设备特征值的 uuid    |
 | properties   | object   | 该特征值支持的操作类型   |

 *properties对象*

 | 参数       | 类型      | 说明                             |

 | read       | boolean   | 该特征值是否支持 read 操作       |
 | write      | boolean   | 该特征值是否支持 write 操作      |
 | notify     | boolean   | 该特征值是否支持 notify 操作     |
 | indicate   | boolean   | 该特征值是否支持 indicate 操作   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getBLEDeviceCharacteristics({
       // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
       deviceId: deviceId,
       // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
       serviceId: serviceId,
       success: function (res) {
         console.log('device getBLEDeviceCharacteristics:', res.characteristics)
       }
     })
 #+END_EXAMPLE





 wx.readBLECharacteristicValue(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持=read=才可以成功调用，具体参照
 characteristic 的 properties 属性

 *OBJECT参数说明：*

 | 参数               | 类型       | 必填   | 说明                                               |

 | deviceId           | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
 | serviceId          | string     | 是     | 蓝牙特征值对应服务的 uuid                          |
 | characteristicId   | string     | 是     | 蓝牙特征值的 uuid                                  |
 | success            | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail               | Function   | 否     | 接口调用失败的回调函数                             |
 | complete           | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数             | 类型     | 说明                       |

 | characteristic   | object   | 设备特征值信息             |
 | errMsg           | string   | 成功：ok，错误：详细信息   |

 *characteristic对象*

 蓝牙设备characteristic(特征值)信息

 | 参数               | 类型          | 说明                                                                               |

 | characteristicId   | string        | 蓝牙设备特征值的 uuid                                                              |
 | serviceId          | object        | 蓝牙设备特征值对应服务的 uuid                                                      |
 | value              | ArrayBuffer   | 蓝牙设备特征值对应的二进制值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     // 必须在这里的回调才能获取
     wx.onBLECharacteristicValueChange(function(characteristic) {
       console.log('characteristic value comed:', characteristic)
     })

     wx.readBLECharacteristicValue({
       // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
       deviceId: deviceId,
       // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
       serviceId: serviceId,
       // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
       characteristicId: characteristicId,
       success: function (res) {
         console.log('readBLECharacteristicValue:', res.characteristic.value)
       }
     })
 #+END_EXAMPLE

*** Bug & Tip
    
 
    

 1. =tip=: 并行调用多次读写接口存在读写失败的可能性。
 2. =tip=:=read=接口读取到的信息需要在=onBLECharacteristicValueChange=方法注册的回调中获取。





 wx.writeBLECharacteristicValue(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持=write=才可以成功调用，具体参照
 characteristic 的 properties 属性

 /tips: 并行调用多次读写接口存在读写失败的可能性/

 *OBJECT参数说明：*

 | 参数               | 类型          | 必填   | 说明                                                                               |

 | deviceId           | string        | 是     | 蓝牙设备 id，参考 device 对象                                                      |
 | serviceId          | string        | 是     | 蓝牙特征值对应服务的 uuid                                                          |
 | characteristicId   | string        | 是     | 蓝牙特征值的 uuid                                                                  |
 | value              | ArrayBuffer   | 是     | 蓝牙设备特征值对应的二进制值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |
 | success            | Function      | 是     | 成功则返回本机蓝牙适配器状态                                                       |
 | fail               | Function      | 否     | 接口调用失败的回调函数                                                             |
 | complete           | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                   |

 *success返回参数：*

 | 参数     | 类型     | 说明                       |

 | errMsg   | string   | 成功：ok，错误：详细信息   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     // 这里的回调可以获取到 write 导致的特征值改变
     wx.onBLECharacteristicValueChange(function(characteristic) {
       console.log('characteristic value changed:', characteristic)
     })

     // 向蓝牙设备发送一个0x00的16进制数据
     let buffer = new ArrayBuffer(1)
     let dataView = new DataView(buffer)
     dataView.setUint8(0, 0)

     wx.writeBLECharacteristicValue({
       // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
       deviceId: deviceId,
       // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
       serviceId: serviceId,
       // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
       characteristicId: characteristicId,
       // 这里的value是ArrayBuffer类型
       value: buffer,
       success: function (res) {
         console.log('writeBLECharacteristicValue success', res.errMsg)
       }
     })
 #+END_EXAMPLE

*** wx.notifyBLECharacteristicValueChanged(OBJECT)
    
 
    








   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 启用低功耗蓝牙设备特征值变化时的 notify
 功能。注意：必须设备的特征值支持=notify=才可以成功调用，具体参照
 characteristic 的 properties 属性

 另外，必须先启用=notify=才能监听到设备 characteristicValueChange 事件

 *OBJECT参数说明：*

 | 参数               | 类型       | 必填   | 说明                                               |

 | deviceId           | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
 | serviceId          | string     | 是     | 蓝牙特征值对应服务的 uuid                          |
 | characteristicId   | string     | 是     | 蓝牙特征值的 uuid                                  |
 | state              | boolean    | 是     | true: 启用 notify; false: 停用 notify              |
 | success            | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail               | Function   | 否     | 接口调用失败的回调函数                             |
 | complete           | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数     | 类型     | 说明                       |

 | errMsg   | string   | 成功：ok，错误：详细信息   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.notifyBLECharacteristicValueChanged({
       state: true, // 启用 notify 功能
       // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
       deviceId: deviceId,
       // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
       serviceId: serviceId,
       // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
       characteristicId: characteristicId,
       success: function (res) {
         console.log('notifyBLECharacteristicValueChanged success', res.errMsg)
       }
     })
 #+END_EXAMPLE





 wx.onBLEConnectionStateChanged(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等。

 *CALLBACK参数说明：*

 | 参数        | 类型      | 说明                            |

 | deviceId    | string    | 蓝牙设备 id，参考 device 对象   |
 | connected   | boolean   | 连接目前的状态                  |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onBLEConnectionStateChanged(function(res) {
       // 该方法回调中可以用于处理连接意外断开等异常情况
       console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)
     })
 #+END_EXAMPLE





 wx.onBLECharacteristicValueChange(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听低功耗蓝牙设备的特征值变化。必须先启用=notify=接口才能接收到设备推送的notification。

 *CALLBACK参数说明：*

 | 参数               | 类型          | 说明                                                                 |

 | deviceId           | string        | 蓝牙设备 id，参考 device 对象                                        |
 | serviceId          | string        | 特征值所属服务 uuid                                                  |
 | characteristicId   | string        | 特征值 uuid                                                          |
 | value              | ArrayBuffer   | 特征值最新的值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onBLECharacteristicValueChange(function(res) {
       console.log(`characteristic ${res.characteristicId} has changed, now is ${res.value}`)
     })
 #+END_EXAMPLE

*** 蓝牙错误码(errCode)列表
    
 
    

 | 错误码   | 说明                   | 备注                                           |

 | 0        | ok                     | 正常                                           |
 | 10000    | not init               | 未初始化蓝牙适配器                             |
 | 10001    | not available          | 当前蓝牙适配器不可用                           |
 | 10002    | no device              | 没有找到指定设备                               |
 | 10003    | connection fail        | 连接失败                                       |
 | 10004    | no service             | 没有找到指定服务                               |
 | 10005    | no characteristic      | 没有找到指定特征值                             |
 | 10006    | no connection          | 当前连接已断开                                 |
 | 10007    | property not support   | 当前特征值不支持此操作                         |
 | 10008    | system error           | 其余所有系统上报的异常                         |
 | 10009    | system not support     | Android 系统特有，系统版本低于 4.3 不支持BLE   |
 | 10010    | no descriptor          | 没有找到指定描述符                             |

 [[https://mp.weixin.qq.com/debug/wxadoc/dev/api/clipboard.html#wxgetclipboarddataobject][<<>>]]\\



 
 [[http://caibaojian.com/weixinapp/weixinapp-bluetooth.html]]

 \\
 \\








 







 wx.startBeaconDiscovery(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 开始搜索附近的=iBeacon=设备

 *OBJECT参数说明：*

 | 参数名     | 类型          | 必填   | 说明                                               |

 | uuids      | StringArray   | 是     | iBeacon设备广播的 uuids                            |
 | success    | Function      | 否     | 接口调用成功的回调函数                             |
 | fail       | Function      | 否     | 接口调用失败的回调函数                             |
 | complete   | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明       |
 |----------+----------+------------|
 | errMsg   | String   | 调用结果   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startBeaconDiscovery({
         success(res) {
         }
     })
 #+END_EXAMPLE





 wx.stopBeaconDiscovery(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[https://mp.weixin.qq.com/debug/wxadoc/dev/framework/compatibility.html][兼容处理]]
 #+END_QUOTE

 停止搜索附近的=iBeacon=设备

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明       |
 |----------+----------+------------|
 | errMsg   | String   | 调用结果   |





 wx.getBeacons(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取所有已搜索到的=iBeacon=设备

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数名    | 类型          | 说明               |

 | beacons   | ObjectArray   | iBeacon 设备列表   |
 | errMsg    | String        | 调用结果           |

 *iBeacon 结构：*

 | 参数        | 类型     | 说明                      |

 | uuid        | String   | iBeacon 设备广播的 uuid   |
 | major       | String   | iBeacon 设备的主 id       |
 | minor       | String   | iBeacon 设备的次 id       |
 | proximity   | Number   | 表示设备距离的枚举值      |
 | accuracy    | Number   | iBeacon 设备的距离        |
 | rssi        | Number   | 表示设备的信号强度        |





 wx.onBeaconUpdate(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听=iBeacon=设备的更新事件

 *CALLBACK返回参数说明：*

 | 参数名    | 类型           | 说明                                |

 | beacons   | array object   | 当前搜寻到的所有 iBeacon 设备列表   |

 *iBeacon 结构：*

 | 参数        | 类型     | 说明                      |

 | uuid        | String   | iBeacon 设备广播的 uuid   |
 | major       | String   | iBeacon 设备的主 id       |
 | minor       | String   | iBeacon 设备的次 id       |
 | proximity   | Number   | 表示设备距离的枚举值      |
 | accuracy    | Number   | iBeacon 设备的距离        |
 | rssi        | Number   | 表示设备的信号强度        |





 wx.onBeaconServiceChange(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听=iBeacon=服务的状态变化

 *CALLBACK返回参数说明：*

 | 参数名        | 类型      | 说明                   |

 | available     | Boolean   | 服务目前是否可用       |
 | discovering   | Boolean   | 目前是否处于搜索状态   |

*** 错误码列表
    
 
    

 | 错误码   | 说明                            | 备注               |

 | 0        | ok                              | 正常               |
 | 11000    | unsupport                       | 系统或设备不支持   |
 | 11001    | bluetooth service unavailable   | 蓝牙服务不可用     |
 | 11002    | location service unavailable    | 位置服务不可用     |
 | 11003    | already start                   | 已经开始搜索       |



 
 [[http://caibaojian.com/weixinapp/weixinapp-ibeacon.html]]

 \\
 \\








 







 wx.setScreenBrightness(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 设置屏幕亮度。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | value      | Number     | 是     | 屏幕亮度值，范围 0~1，0 最暗，1 最亮               |
 | success    | Function   | 否     | 接口调用成功                                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |





 wx.getScreenBrightness(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取屏幕亮度。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功                                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数    | 类型     | 说明                                   |

 | value   | Number   | 屏幕亮度值，范围 0~1，0 最暗，1 最亮   |





 wx.setKeepScreenOn(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。

 *OBJECT参数说明：*

 | 参数名         | 类型       | 必填   | 说明                                               |

 | keepScreenOn   | Boolean    | 是     | 是否保持屏幕常亮                                   |
 | success        | Function   | 否     | 接口调用成功的回调函数                             |
 | fail           | Function   | 否     | 接口调用失败的回调函数                             |
 | complete       | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明       |
 |----------+----------+------------|
 | errMsg   | String   | 调用结果   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     // 保持屏幕常亮
     wx.setKeepScreenOn({
         keepScreenOn: true
     })
 #+END_EXAMPLE

 \\



 
 [[http://caibaojian.com/weixinapp/weixinapp-screenbrightness.html]]

 \\
 \\








 







 wx.onUserCaptureScreen(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件

 *CALLBACK返回参数：*

 无

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onUserCaptureScreen(function(res) {
         console.log('用户截屏了')
     })
 #+END_EXAMPLE



 
 [[http://caibaojian.com/weixinapp/weixinapp-onusercapturescreen.html]]

 \\
 \\








 







 wx.vibrateLong(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 使手机发生较长时间的振动（400ms）

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |





 wx.vibrateShort(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 使手机发生较短时间的振动（15ms）

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

***** Bug & Tip
      
 
      

 1. =tip=：=vibrateShort=接口仅在 iPhone7/iPhone7Plus 及 Android 机型生效
 2. =tip=:=getScreenBrightness=接口若安卓系统设置中开启了自动调节亮度功能，则屏幕亮度会根据光线自动调整，该接口仅能获取自动调节亮度之前的值，而非实时的亮度值。



 
 [[http://caibaojian.com/weixinapp/weixinapp-vibrate.html]]

 \\
 \\


