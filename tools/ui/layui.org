* 下载安装
  #+begin_example
  ├─css //css目录
  │  │─modules //模块css目录（一般如果模块相对较大，我们会单独提取，比如下面三个：）
  │  │  ├─laydate
  │  │  ├─layer
  │  │  └─layim
  │  └─layui.css //核心样式文件
  ├─font  //字体图标目录
  ├─images //图片资源目录（目前只有layim和编辑器用到的GIF表情）
  │─lay //模块核心目录
  │  └─modules //各模块组件
  │─layui.js //基础核心库
  └─layui.all.js //包含layui.js和所有模块的合并文件
  #+end_example
 
* 使用模板
  #+begin_src html
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>开始使用layui</title>
        <link rel="stylesheet" href="../layui/css/layui.css">
      </head>
      <body>
    
        <!-- 你的HTML代码 -->
    
        <script src="../layui/layui.js"></script>
        <script>
          //一般直接写在一个js文件中
          layui.use(['layer', 'form'], function(){
          var layer = layui.layer
          ,form = layui.form;
      
          layer.msg('Hello World');
          });
        </script> 
      </body>
    </html>
  #+end_src

* 底层方法

 本篇主要介绍核心基础库 layui.js 所发挥的作用，其中过滤了大部分在外部可能不是太常用的 API，侧重罗列了最常用的框架支撑。

全局配置

方法：layui.config(options)

你可以在使用模块之前，全局化配置一些参数，尽管大部分时候它不是必须的。所以我们目前提供的全局配置项非常少，这也是为了减少一
些不必要的工作，尽可能让使用变得更简单。目前支持的全局配置项如下：


layui.config({
  dir: '/res/layui/' //layui.js 所在路径（注意，如果是 script 单独引入 layui.js，无需设定该参数。），一般情况下可以无视
  ,version: false //一般用于更新模块缓存，默认不开启。设为 true 即让浏览器不缓存。也可以设为一个固定的值，如：201610
  ,debug: false //用于开启调试模式，默认 false，如果设为 true，则JS模块的节点会保留在页面
  ,base: '' //设定扩展的 layui 模块的所在目录，一般用于外部模块扩展
});
      
定义模块

方法：layui.define([mods], callback)

通过该方法可定义一个 layui 模块。参数 mods 是可选的，用于声明该模块所依赖的模块。callback 即为模块加载完毕的回调函数，它返
回一个 exports 参数，用于输出该模块的接口。


layui.define(function(exports){
  //do something
  
  exports('demo', function(){
    alert('Hello World!');
  });
});
      
跟 RequireJS 最大不同的地方在于接口输出，exports 是一个函数，它接受两个参数，第一个参数为模块名，第二个参数为模块接口，当
你声明了上述的一个模块后，你就可以在外部使用了，demo 就会注册到 layui 对象下，即可通过 layui.demo() 去执行该模块的接口。

你也可以在定义一个模块的时候，声明该模块所需的依赖，如：


layui.define(['layer', 'laypage'], function(exports){
  //do something
  
  exports('demo', function(){
    alert('Hello World!');
  });
});
      
上述的 ['layer', 'laypage'] 即为本模块所依赖的模块，它并非只能是一个数组，你也可以直接传一个字符型的模块名，但是这样只能依赖
一个模块。

加载所需模块

方法：layui.use([mods], callback)

layui 的内置模块并非默认就加载的，他必须在你执行该方法后才会加载。它的参数跟上述的 define 方法完全一样。 
另外请注意，mods 里面必须是一个合法的模块名，不能包含目录。如果需要加载目录，建议采用 extend 建立别名（详见模块规范） 


layui.use(['laypage', 'layedit'], function(){
  var laypage = layui.laypage
  ,layedit = layui.layedit;
  
  //do something
});
      
该方法的函数其实返回了所加载的模块接口，所以你其实也可以不通过 layui 对象赋值获得接口（这一点跟 Sea.js 很像哈）：


layui.use(['laypage', 'layedit'], function(laypage, layedit){
  
  //使用分页
  laypage();
  
  //建立编辑器
  layedit.build();
});
      
动态加载 CSS

方法：layui.link(href)

href 即为 css 路径。注意：该方法并非是你使用 layui 所必须的，它一般只是用于动态加载你的外部 CSS 文件。

本地存储

本地存储是对 localStorage 和 sessionStorage 的友好封装，可更方便地管理本地数据。

 * localStorage 持久化存储：layui.data(table, settings)，数据会永久存在，除非物理删除。
 * sessionStorage 会话性存储：layui.sessionData(table, settings)，页面关闭后即失效。注：layui 2.2.5 新增

上述两个方法的使用方式是完全一样的。其中参数 table 为表名，settings是一个对象，用于设置 key、value。下面以 layui.data 方法为
例： 


//【增】：向 test 表插入一个 nickname 字段，如果该表不存在，则自动建立。
layui.data('test', {
  key: 'nickname'
  ,value: '贤心'
});
 
//【删】：删除 test 表的 nickname 字段
layui.data('test', {
  key: 'nickname'
  ,remove: true
});
layui.data('test', null); //删除test表
  
//【改】：同【增】，会覆盖已经存储的数据
  
//【查】：向 test 表读取全部的数据
var localTest = layui.data('test');
console.log(localTest.nickname); //获得“贤心”
      
获取设备信息

方法：layui.device(key)，参数key是可选的

由于 layui 的一些功能进行了兼容性处理和响应式支持，因此该方法同样发挥了至关重要的作用。尤其是在 layui mobile 模块中的作用可
谓举足轻重。该方法返回了丰富的设备信息：


var device = layui.device();
 
//device即可根据不同的设备返回下述不同的信息

{
  os: "windows" //底层操作系统，windows、linux、mac等
  ,ie: false //ie6-11的版本，如果不是ie浏览器，则为false
  ,weixin: false //是否微信环境
  ,android: false //是否安卓系统
  ,ios: false //是否ios系统
}

      
有时你的 App 可能会对 userAgent 插入一段特定的标识，譬如： 

 Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 myapp/1.8.6
 Safari/537.36 

你要验证当前的 WebView 是否在你的 App 环境，即可通过上述的myapp（即为 Native 给 Webview 插入的标识，可以随意定义）来判
断。


var device = layui.device('myapp');
if(device.myapp){
  alert('在我的App环境');
}      
      
其它

除上述介绍的方法之外，layui.js 内部还提供了许多底层引擎，他们同样是整个 layui 体系的有力支撑，在日常应用中也许会用到：

  方法/属性  描述    
  layui.cache  静态属性。获得一些配置及临时的缓存信息    
  layui.extend(options)  拓展一个模块别名，如：layui.extend({test: '/res/js/test'})    
  layui.each(obj, fn)  对象（Array、Object、DOM 对象等）遍历，可用于取代for语句    
  layui.getStyle(node, name)  获得一个原始 DOM 节点的 style 属性值，如：layui.getStyle(document.body,    
    'font-size')    
  layui.img(url, callback, error)  图片预加载    
  layui.sort(obj, key, desc)  将数组中的对象按某个成员重新对该数组排序，如：layui.sort([{a: 3},{a: 1},{a: 5}],    
    'a')    
  layui.router()  获得 location.hash 路由结构，一般在单页面应用中发挥作用。    
  layui.url(href)  用于将一段 URL 链接中的 pathname、search、hash 属性值进行对象化处理     
        
    参数： href 可选。若不传，则自动读取当前页面的 url（即：location.href）     
    示例：var url = layui.url();     
        
    注意：系 layui 2.5.6 新增     
  layui.hint()  向控制台打印一些异常信息，目前只返回了 error 方法：layui.hint().error('出错啦')    
  layui.stope(e)  阻止事件冒泡    
  layui.onevent(modName, events, callback)  增加自定义模块事件。有兴趣的同学可以阅读 layui.js 源码以及 form 模块    
  layui.event(modName, events, params)  执行自定义模块事件，搭配 onevent 使用    
  layui.factory(modName)  用于获取模块对应的 define 回调函数    
第三方支撑

layui 部分模块依赖 jQuery（比如 layer），但是你并不用去额外加载 jQuery。layui 已经将 jQuery 最稳定的一个版本改为 layui 的内部
模块，当你去使用 layer 之类的模块时，它会首先判断你的页面是否已经引入了 jQuery，如果没有，则加载内部的 jQuery 模块，如果有，
则不会加载。

* 页面元素规范与说明

 layui 提倡返璞归真，遵循于原生态的元素书写规则，所以通常而言，你仍然是在写基本的 HTML 和 CSS 代码，不同的是，在 HTML 结
 构上及 CSS 定义上需要小小遵循一定的规范。 

CSS内置公共基础类

  类名（class）  说明    
  布局 / 容器    
  layui-main  用于设置一个宽度为 1140px 的水平居中块（无响应式）    
  layui-inline  用于将标签设为内联块状元素    
  layui-box  用于排除一些UI框架（如Bootstrap）强制将全部元素设为box-sizing: border-box所引发的尺寸偏差    
  layui-clear  用于消除浮动（一般不怎么常用，因为layui几乎没用到浮动）    
  layui-btn-container  用于定义按钮的父容器。（layui 2.2.5 新增）    
  layui-btn-fluid  用于定义流体按钮。即宽度最大化适应。（layui 2.2.5 新增）    
  辅助    
  layui-icon  用于图标    
  layui-elip  用于单行文本溢出省略    
  layui-unselect  用于屏蔽选中    
  layui-disabled  用于设置元素不可点击状态    
  layui-circle  用于设置元素为圆形    
  layui-show  用于显示块状元素    
  layui-hide  用于隐藏元素    
  文本    
  layui-text  定义一段文本区域（如文章），该区域内的特殊标签（如a、li、em等）将会进行相应处理    
  layui-word-aux  灰色标注性文字，左右会有间隔    
  背景色    
  layui-bg-red  用于设置元素赤色背景    
  layui-bg-orange  用于设置元素橙色背景    
  layui-bg-green  用于设置元素墨绿色背景（主色调）    
  layui-bg-cyan  用于设置元素藏青色背景    
  layui-bg-blue  用于设置元素蓝色背景    
  layui-bg-black  用于设置元素经典黑色背景    
  layui-bg-gray  用于设置元素经典灰色背景    

其它的类一般都是某个元素或模块所特有，因此不作为我们所定义的公共类。

CSS命名规范

class命名前缀：layui，连接符：-，如：class="layui-form"

命名格式一般分为两种：一：layui-模块名-状态或类型，二：layui-状态或类型。因为有些类并非是某个模块所特有，他们通常会是一些公
共类。如：一（定义按钮的原始风格）：class="layui-btn layui-btn-primary"、二（定义内联块状元素）：class="layui-inline"

大致记住这些简单的规则，会让你在填充HTML的时候显得更加得心应手。另外，如果你是开发Layui拓展（模块），你最好也要遵循于类
似的规则，并且请勿占用Layui已经命名好的类，假设你是在帮Layui开发一个markdown编辑器，你的css书写规则应该如下：


.layui-markdown{border: 1px solid #e2e2e2;}
.layui-markdown-tools{}
.layui-markdown-text{}
      
HTML规范：结构

Layui在解析HTML元素时，必须充分确保其结构是被支持的。以Tab选项卡为例：


<div class="layui-tab">
  <ul class="layui-tab-title">
    <li class="layui-this">标题一</li>
    <li>标题二</li>
    <li>标题三</li>
  </ul>
  <div class="layui-tab-content">
    <div class="layui-tab-item layui-show">内容1</div>
    <div class="layui-tab-item">内容2</div>
    <div class="layui-tab-item">内容3</div>
  </div>
</div>
      
你如果改变了结构，极有可能会导致Tab功能失效。所以在嵌套HTML的时候，你应该细读各个元素模块的相关文档（如果你不是拿来主
义）

HTML规范：常用公共属性

很多时候，元素的基本交互行为，都是由模块自动开启。但不同的区域可能需要触发不同的动作，这就需要你设定我们所支持的自定义属性
来作为区分。如下面的 lay-submit、lay-filter即为公共属性（即以 lay- 作为前缀的自定义属性）：


<button class="layui-btn" lay-submit lay-filter="login">登入</button>      
      
目前我们的公共属性如下所示（即普遍运用于所有元素上的属性）

  属性  描述    
  lay-skin=" "  定义相同元素的不同风格，如checkbox的开关风格    
  lay-filter=" "  事件过滤器。你可能会在很多地方看到他，他一般是用于监听特定的自定义事件。你可以把它看作是一个ID选择器    
  lay-submit  定义一个触发表单提交的button，不用填写值    

额，好像有点少的样子（反正你也基本不会看文档。。(づ╥﹏╥)づ）。其它的自定义属性基本都在各自模块的文档中有所介绍。

结语

其实很多时候并不想陈列条条框框（除了一些特定需要的），所以你会发现本篇的篇幅较短。（哈哈哈哈哈，其实是写文档写得想吐了）



