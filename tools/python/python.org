#+TITLE: Python 简介
#+DESCRIPTION: Python 语言学习笔记
#+CATEGORIES[]: 技术
#+TAGS[]: Python
#+DATE: 2019-11-29T21:57:09+08:00
#+draft: true

* python 
** 面向对象
*** 类和对象
    
*** 可访问性
** 系统接口
   - 显示模块搜索路径  sys.path
   - 显示加载的模块 print(sys.modules)
   - 路径合理化 os.path.normpath
   - 绝对路径 abspath
   - 运行程序 os.system('python helloshell.py')
   - 把进程赋予变量 output = os.popen('python helloshell.py').read()
   - 环境变量 os.environ                                                                 
   - 运行程序 os.system, os.popen, os.execv, os.spawnv                                  
   - 进程处理  os.fork, os.pipe, os.waitpid, os.kill                                    
   - 文件描述  os.open, os.read, os.write                                              
   - 文件处理 os.remove, os.rename, os.mkfifo, os.mkdir, os.rmdir                    
   - 管理员工具 os.getcwd, os.chdir, os.chmod, os.getpid, os.listdir, os.access       
   - 移植工具 os.sep, os.pathsep, os.curdir, os.path.split, os.path.join  
   - 路径名称工具 os.path.exists('path'), os.path.isdir('path'), os.path.getsize('path')     
** 进程  
*** 创建进程
    Process([group [, target [, name [, args [, kwargs]]]]])
    target 表示调用对象
    args 表示调用对象的位置参数元组
    kwargs 表示调用对象的字典
    name 为别名
    group 实质上不使用

    下面看一个创建函数并将其作为多个进程的例子：
    #+begin_src python
      #!/usr/bin/env python3
      # -*- coding: UTF-8 -*-

      import multiprocessing
      import time


      def worker(interval, name):
          print(name + '【start】')
          time.sleep(interval)
          print(name + '【end】')


      if __name__ == "__main__":
          p1 = multiprocessing.Process(target=worker, args=(2, '两点水 1'))
          p2 = multiprocessing.Process(target=worker, args=(3, '两点水 2'))
          p3 = multiprocessing.Process(target=worker, args=(4, '两点水 3'))

          p1.start()
          p2.start()
          p3.start()

          print("The number of CPU is:" + str(multiprocessing.cpu_count()))
          for p in multiprocessing.active_children():
              print("child   p.name:" + p.name + "\tp.id" + str(p.pid))
              print("END!!!!!!!!!!!!!!!!!")

    #+end_src
*** 把进程创建成类
    当然我们也可以把进程创建成一个类，如下面的例子，当进程 p 调用 start() 时，自
    动调用 run() 方法。

    #+begin_src python

      # -*- coding: UTF-8 -*-

      import multiprocessing
      import time


      class ClockProcess(multiprocessing.Process):
          def __init__(self, interval):
              multiprocessing.Process.__init__(self)
              self.interval = interval

          def run(self):
              n = 5
              while n > 0:
                  print("当前时间: {0}".format(time.ctime()))
                  time.sleep(self.interval)
                  n -= 1


      if __name__ == '__main__':
          p = ClockProcess(3)
          p.start()

    #+end_src
*** daemon 属性

    想知道 daemon 属性有什么用，看下下面两个例子吧，一个加了 daemon 属性，一个没有加，对比输出的结果：

    没有加 deamon 属性的例子：

    #+begin_src python
      # -*- coding: UTF-8 -*-
      import multiprocessing
      import time


      def worker(interval):
          print('工作开始时间：{0}'.format(time.ctime()))
          time.sleep(interval)
          print('工作结果时间：{0}'.format(time.ctime()))


      if __name__ == '__main__':
          p = multiprocessing.Process(target=worker, args=(3,))
          p.start()
          print('【EMD】')

    #+end_src
    输出结果：

    ```txt
    【EMD】
    工作开始时间：Mon Oct  9 17:47:06 2017
    工作结果时间：Mon Oct  9 17:47:09 2017
    ```

    在上面示例中，进程 p 添加 daemon 属性：

    ```python
    # -*- coding: UTF-8 -*-

    import multiprocessing
    import time


    def worker(interval):
    print('工作开始时间：{0}'.format(time.ctime()))
    time.sleep(interval)
    print('工作结果时间：{0}'.format(time.ctime()))


    if __name__ == '__main__':
    p = multiprocessing.Process(target=worker, args=(3,))
    p.daemon = True
    p.start()
    print('【EMD】')
    ```

    输出结果：

    ```txt
    【EMD】
    ```


    根据输出结果可见，如果在子进程中添加了 daemon 属性，那么当主进程结束的时候，子
    进程也会跟着结束。所以没有打印子进程的信息。
*** join 方法
    结合上面的例子继续，如果我们想要让子线程执行完该怎么做呢？
    那么我们可以用到 join 方法，join 方法的主要作用是：阻塞当前进程，直到调用 join 方法的那个进程执行完，再继续执行当前进程。
    因此看下加了 join 方法的例子：

    #+begin_src python
      import multiprocessing
      import time


      def worker(interval):
          print('工作开始时间：{0}'.format(time.ctime()))
          time.sleep(interval)
          print('工作结果时间：{0}'.format(time.ctime()))


      if __name__ == '__main__':
          p = multiprocessing.Process(target=worker, args=(3,))
          p.daemon = True
          p.start()
          p.join()
          print('【EMD】')
    #+end_src
    输出的结果：

    ```txt
    工作开始时间：Tue Oct 10 11:30:08 2017
    工作结果时间：Tue Oct 10 11:30:11 2017
    【EMD】
    ```
*** Pool

    如果需要很多的子进程，难道我们需要一个一个的去创建吗？

    当然不用，我们可以使用进程池的方法批量创建子进程。

    例子如下：

    ```python
    # -*- coding: UTF-8 -*-

    from multiprocessing import Pool
    import os, time, random


    def long_time_task(name):
    print('进程的名称：{0} ；进程的 PID: {1} '.format(name, os.getpid()))
    start = time.time()
    time.sleep(random.random() * 3)
    end = time.time()
    print('进程 {0} 运行了 {1} 秒'.format(name, (end - start)))


    if __name__ == '__main__':
    print('主进程的 PID：{0}'.format(os.getpid()))
    p = Pool(4)
    for i in range(6):
    p.apply_async(long_time_task, args=(i,))
    p.close()
    # 等待所有子进程结束后在关闭主进程
    p.join()
    print('【End】')
    ```

    输出的结果如下：

    ```txt
    主进程的 PID：7256
    进程的名称：0；进程的 PID: 1492
    进程的名称：1；进程的 PID: 12232
    进程的名称：2；进程的 PID: 4332
    进程的名称：3；进程的 PID: 11604
    进程 2 运行了 0.6500370502471924 秒
    进程的名称：4；进程的 PID: 4332
    进程 1 运行了 1.0830621719360352 秒
    进程的名称：5；进程的 PID: 12232
    进程 5 运行了 0.029001712799072266 秒
    进程 4 运行了 0.9720554351806641 秒
    进程 0 运行了 2.3181326389312744 秒
    进程 3 运行了 2.5331451892852783 秒
    【End】
    ```

    这里有一点需要注意： `Pool` 对象调用 `join()` 方法会等待所有子进程执行完毕，调
    用 `join()` 之前必须先调用 `close()` ，调用`close()` 之后就不能继续添加新的
    Process 了。

    请注意输出的结果，子进程 0，1，2，3 是立刻执行的，而子进程 4 要等待前面某个子
    进程完成后才执行，这是因为 Pool 的默认大小在我的电脑上是 4，因此，最多同时执行
    4 个进程。这是 Pool 有意设计的限制，并不是操作系统的限制。如果改成：

    ```python
    p = Pool(5)
    ```

    就可以同时跑 5 个进程。
*** 进程间通信

    Process 之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python
    的 multiprocessing 模块包装了底层的机制，提供了 Queue、Pipes 等多种方式来交换
    数据。

    以 Queue 为例，在父进程中创建两个子进程，一个往 Queue 里写数据，一个从 Queue 里读数据：

    ```python
    #!/usr/bin/env python3
    # -*- coding: UTF-8 -*-

    from multiprocessing import Process, Queue
    import os, time, random


    def write(q):
    # 写数据进程
    print('写进程的 PID:{0}'.format(os.getpid()))
    for value in ['两点水', '三点水', '四点水']:
    print('写进 Queue 的值为：{0}'.format(value))
    q.put(value)
    time.sleep(random.random())


    def read(q):
    # 读取数据进程
    print('读进程的 PID:{0}'.format(os.getpid()))
    while True:
    value = q.get(True)
    print('从 Queue 读取的值为：{0}'.format(value))


    if __name__ == '__main__':
    # 父进程创建 Queue，并传给各个子进程
    q = Queue()
    pw = Process(target=write, args=(q,))
    pr = Process(target=read, args=(q,))
    # 启动子进程 pw
    pw.start()
    # 启动子进程 pr
    pr.start()
    # 等待 pw 结束:
    pw.join()
    # pr 进程里是死循环，无法等待其结束，只能强行终止
    pr.terminate()

    ```

    输出的结果为：

    ```txt
    读进程的 PID:13208
    写进程的 PID:10864
    写进 Queue 的值为：两点水
    从 Queue 读取的值为：两点水
    写进 Queue 的值为：三点水
    从 Queue 读取的值为：三点水
    写进 Queue 的值为：四点水
    从 Queue 读取的值为：四点水
    ```
** 正则表达式
   比如在一段字符串中寻找是否含有某个字符或某些字符，通常我们使用内置函数来实现，
   如下：

   ```python
   re.findall(pattern, string[, flags])
   ```

   该函数实现了在字符串中找到正则表达式所匹配的所有子串，并组成一个列表返回,具体操作如下：

   ```python

   import re

   # 设定一个常量
   a = '两点水|twowater|liangdianshui|草根程序员|ReadingWithU'

   # 正则表达式

   findall = re.findall('两点水', a)
   print(findall)

   if len(findall) > 0:
   print('a 含有“两点水”这个字符串')
   else:
   print('a 不含有“两点水”这个字符串')

   ```

   输出的结果：

   ```txt
   ['两点水']
   a 含有“两点水”这个字符串
   ```

   从输出结果可以看到，可以实现和内置函数一样的功能，可是在这里也要强调一点，上面这
   个例子只是方便我们理解正则表达式，这个正则表达式的写法是毫无意义的。为什么这样说
   呢？

   因为用 Python 自带函数就能解决的问题，我们就没必要使用正则表达式了，这样做多此一
   举。而且上面例子中的正则表达式设置成为了一个常量，并不是一个正则表达式的规则，正
   则表达式的灵魂在于规则，所以这样做意义不大。

   那么正则表达式的规则怎么写呢？先不急，我们一步一步来，先来一个简单的，找出字符串
   中的所有小写字母。首先我们在 `findall` 函数中第一个参数写正则表达式的规则，其中
   `[a-z]` 就是匹配任何小写字母，第二个参数只要填写要匹配的字符串就行了。具体如下：

   ```python

   import re

   # 设定一个常量
   a = '两点水|twowater|liangdianshui|草根程序员|ReadingWithU'

   # 选择 a 里面的所有小写英文字母

   re_findall = re.findall('[a-z]', a)

   print(re_findall)

   ```

   输出的结果：

   ```txt
   ['t', 'w', 'o', 'w', 'a', 't', 'e', 'r', 'l', 'i', 'a', 'n', 'g', 'd', 'i', 'a', 'n', 's', 'h', 'u', 'i', 'e', 'a', 'd', 'i', 'n', 'g', 'i', 't', 'h']
   ```

   这样我们就拿到了字符串中的所有小写字母了。
   # 字符集


   好了，通过上面的几个实例我们初步认识了 Python 的正则表达式，可能你就会问，正则表
   达式还有什么规则，什么字母代表什么意思呢？

   其实，这些都不急，在本章后面会给出对应的正则表达式规则列表，而且这些东西在网上随
   便都能 Google 到。所以现在，我们还是进一步加深对正则表达式的理解，讲一下正则表达
   式的字符集。

   字符集是由一对方括号 “[]” 括起来的字符集合。使用字符集，可以匹配多个字符中的一个。

   举个例子，比如你使用 `C[ET]O` 匹配到的是 CEO 或 CTO，也就是说 `[ET]` 代表的是一
   个 E 或者一个 T。像上面提到的 `[a-z]` ,就是所有小写字母中的其中一个，这里使用了
   连字符 “-” 定义一个连续字符的字符范围。当然，像这种写法，里面可以包含多个字符
   范围的，比如：`[0-9a-fA-F]` ,匹配单个的十六进制数字，且不分大小写。注意了，字符
   和范围定义的先后顺序对匹配的结果是没有任何影响的。

   其实说了那么多，只是想证明，字符集一对方括号 “[]” 里面的字符关系是或关系，下面看一个例子：

   ```Python

   import re
   a = 'uav,ubv,ucv,uwv,uzv,ucv,uov'

   # 字符集

   # 取 u 和 v 中间是 a 或 b 或 c 的字符
   findall = re.findall('u[abc]v', a)
   print(findall)
   # 如果是连续的字母，数字可以使用 - 来代替
   l = re.findall('u[a-c]v', a)
   print(l)

   # 取 u 和 v 中间不是 a 或 b 或 c 的字符
   re_findall = re.findall('u[^abc]v', a)
   print(re_findall)

   ```

   输出的结果：

   ```txt
   ['uav', 'ubv', 'ucv', 'ucv']
   ['uav', 'ubv', 'ucv', 'ucv']
   ['uwv', 'uzv', 'uov']
   ```

   在例子中，使用了取反字符集，也就是在左方括号 “[” 后面紧跟一个尖括号 “^”，就
   会对字符集取反。需要记住的一点是，取反字符集必须要匹配一个字符。比如：`q[^u]` 并
   不意味着：匹配一个 q，后面没有 u 跟着。它意味着：匹配一个 q，后面跟着一个不是 u
   的字符。具体可以对比上面例子中输出的结果来理解。

   我们都知道，正则表达式本身就定义了一些规则，比如 `\d`,匹配所有数字字符,其实它是
   等价于 [0-9]，下面也写了个例子，通过字符集的形式解释了这些特殊字符。

   ```Python
   import re

   a = 'uav_ubv_ucv_uwv_uzv_ucv_uov&123-456-789'

   # 概括字符集

   # \d 相当于 [0-9] ,匹配所有数字字符
   # \D 相当于 [^0-9] ， 匹配所有非数字字符
   findall1 = re.findall('\d', a)
   findall2 = re.findall('[0-9]', a)
   findall3 = re.findall('\D', a)
   findall4 = re.findall('[^0-9]', a)
   print(findall1)
   print(findall2)
   print(findall3)
   print(findall4)

   # \w 匹配包括下划线的任何单词字符，等价于 [A-Za-z0-9_]
   findall5 = re.findall('\w', a)
   findall6 = re.findall('[A-Za-z0-9_]', a)
   print(findall5)
   print(findall6)

   ```

   输出结果：

   ```txt
   ['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ['1', '2', '3', '4', '5', '6', '7', '8', '9']
   ['u', 'a', 'v', '_', 'u', 'b', 'v', '_', 'u', 'c', 'v', '_', 'u', 'w', 'v', '_', 'u', 'z', 'v', '_', 'u', 'c', 'v', '_', 'u', 'o', 'v', '&', '-', '-']
   ['u', 'a', 'v', '_', 'u', 'b', 'v', '_', 'u', 'c', 'v', '_', 'u', 'w', 'v', '_', 'u', 'z', 'v', '_', 'u', 'c', 'v', '_', 'u', 'o', 'v', '&', '-', '-']
   ['u', 'a', 'v', '_', 'u', 'b', 'v', '_', 'u', 'c', 'v', '_', 'u', 'w', 'v', '_', 'u', 'z', 'v', '_', 'u', 'c', 'v', '_', 'u', 'o', 'v', '1', '2', '3', '4', '5', '6', '7', '8', '9']
   ['u', 'a', 'v', '_', 'u', 'b', 'v', '_', 'u', 'c', 'v', '_', 'u', 'w', 'v', '_', 'u', 'z', 'v', '_', 'u', 'c', 'v', '_', 'u', 'o', 'v', '1', '2', '3', '4', '5', '6', '7', '8', '9']
   ```
* 语言配套工具
** 虚拟环境 virtualenv 管理包
   环境，就是用某个环境的工具执行代码喽，激活了环境记得关闭此环境哦
   
*** 创建虚拟环境
    创建 env 环境目录   virtualenv env
    创建目录，并选用 python3 的解释器 virtualenv -p /usr/local/bin/python3 venv
*** 启动虚拟环境 source ./bin/activate
    Virtualenv 附带有 pip 安装工具，因此需要安装的 packages 可以直接运行：
*** 退出虚拟环境 deactivate
*** 删除虚拟环境 rm -rf 
*** 虚拟环境管理工具 Virtualenvwrapper 
**** 创建虚拟机 mkvirtualenv env
**** 列出虚拟环境列表 workon 或者 lsvirtualenv
**** 启动/切换虚拟环境 workon [virtual-name]
**** 删除虚拟环境 rmvirtualenv  [virtual-name]
**** 离开虚拟环境 deactivate
** 版本管理 pyenv,管理 python 版本

   常用命令 
   pyenv versions – 查看系统当前安装的 python 列表
   pyenv version – 查看系统当前使用的 python 版本
   pyenv install -v 3.5.3 – 安装 python
   pyenv uninstall 2.7.13 – 卸载 python
   pyenv rehash – 为所有已安装的可执行文件（如：~/.pyenv/versions/bin/）创建 shims， 因此每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）
   
   版本切换
   pyenv global 3.5.3 – 设置全局的 Python 版本，通过将版本号写入~/.pyenv/version 文件的方式
   pyenv local 2.7.13 – 设置面向程序的本地版本，通过将版本号写入当前目录下的.python-version 文件的方式。 通过这种方式设置的 Python 版本优先级较 global 高。
   pyenv shell 2.7.13 - 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式
   优先级: shell > local > global

   卸载 pyenv
   禁用 pyenv 很简单，只需要在~/.bash_profile 中的 pyenv init 那行删了即可。
   完全移除 pyenv，先执行上面第 1 步，然后删了 pyenv 的根目录: rm -rf $(pyenv root)
   插件 pyenv-virtualenv
   
   安装插件    官网地址: https://github.com/pyenv/pyenv-virtualenv

   使用自动安装 pyenv 后，它会自动安装部分插件，通过 pyenv-virtualenv 插件可以很好的和 virtualenv 结合

   另外，一个可选配置是在~/.bash_profile 最后添加:

   eval "$(pyenv virtualenv-init -)"
   
   可以实现自动激活虚拟环境，这个特性非常有用建议都加上。

   创建虚拟环境: pyenv virtualenv 2.7.13 virtual-env-2.7.13，默认使用当前环境 python 版本。 在文件夹$(pyenv root)/versions/my-virtual-env-2.7.13 中创建一个基于 Python 2.7.13 的虚拟环境。
   列出虚拟环境: pyenv virtualenvs，对每个 virtualenv 显示 2 个, 短的只是个链接，那个*表示当前激活的。
   激活虚拟环境: pyenv activate virtual-env-2.7.13
   退出虚拟环境: pyenv deactivate
   删除虚拟环境: pyenv uninstall virtual-env-2.7.13
   
   如果 eval "$(pyenv virtualenv-init -)"写在你的 shell 配置中(比如上面
   的~/.bash_profile), 那么当 pyenv-virtualenv 进入/离开某个含有.python-version
   目录时会自动激活/退出虚拟环境。
   
   场景使用流程:

   # 先创建一个虚拟环境
   pyenv versions
   pyenv virtualenv 2.7.13 virtual-env-2.7.13
   # 进入某个目录比如/root/work/flask-demo
   pyenv local virtual-env-2.7.13
   # 然后再不需要去手动激活了
   使用 pyenv 来管理多版本的 python 命令，使用 pyenv-virtualenv 插件来管理多版本
   python 包环境。爽歪歪~
   
   
