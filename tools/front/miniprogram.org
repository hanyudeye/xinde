* 详解微信小程序开发（项目从零开始） - Mr.聂 - 博客园
**  *五、基础文件目录详解*
　　然后解释一下小程序的目录结构。

　　　　project.config.json: 小程序的配置文件，包含项目打包配置、上传代码自动压缩等等，是一些开发、打包之类的配置。

　　　　app.json: 当前项目的配置文件。包括项目的页面引入、导航条颜色、导航条标题 等等，是项目具体到代码开发上的配置。介绍几个配置：

　　　　　　　　pages： 包含的页面。每次新增页面都得在这里引入，否则新页面的 json 配置等无法生效。 注意 pages 中页面先写的先渲染，所以数组第一条也就是我们的首页。

　　　　　　　　window： 配置所有页面导航条字体、颜色、背景色等

　　　　app.js: 小程序入口文件。生成小程序实例，App({}), 通常在这获取用户信息、授权信息、定义全局变量等。

　　　　app.wxss: 小程序全局 style 文件。对整个项目页面生效。通常规定项目的 字体、基础颜色，定义一些公共样式。

　　　　utils: 工具函数目录。通常用来放一些公共的 js 方法。比如封装的 request 请求，一些别的处理数据什么的方法。

　　　　pages: 小程序的页面目录。所有的小程序页面，都写在这里面。

**  *六、完善项目目录*
   上边大致解释了一下小程序的基础文件，现在按照常见的规范完善一下项目目录，这里
   面包含一些个人见解，有需要的参考即可。先看一下结果：

　　现在解释一下这些目录：
　　　　components： 我们封装的小程序可复用组件。
　　　　constants： 一些项目中的常亮。
　　　　image： 用到的图片。
　　　　services： 用到的所有接口目录

　　大致就新建了这几个，如果有别的需求，根据自己的情况增加。

** *八、实现页面跳转*
   和通常的 web 开发一样，小程序页面跳转页分 2 中，wxml 中的 vavigator 标签，以
   及 js 的 navigator 相关的 api。路由跳转的方法有好几个，这里不一一赘述了，常用
   的直接跳转

#+BEGIN_EXAMPLE
    wx.navigateTo，重定向 wx.redirectTo等等，具体的请看官方文档。这里强调一下路由传参，很简单： 
    1、少量数据。直接问号传参。然后在目标页面的onLoad方法中通过options参数接收。 
    2、大量数据。直接塞到全局变量里面。
#+END_EXAMPLE

#+BEGIN_EXAMPLE
     //  wxml跳转页面
          {{item.name}}
           
     // js跳转页面
     wx.navigateTo({
          url: `/pages/my/appointDetail/index?_id=${ this .data.marker.id}`
        }) 
     
    //路由传参如何接收 
onLoad: function (options) {
　　 console.log(options)
},

#+END_EXAMPLE

** *九、wx.request 的封装*
 在 utils 中新建 request.js，简单封装了一下，一些数据要全局配置的都引进来，然后
 做了些错误的统一处理，没什么难度， 不过要特别注意一下 cookie 的携带。具体代码如
 下：

 #+BEGIN_EXAMPLE
     const app =  getApp()
     export  default  function request(url, options =  {}) {
        return  new Promise( function  (resolve, reject) {
         wx.request({
           url: `${app.origin}${url}`,
           method: 'GET' ,
           ...options,
           data: options.data,
           header: {
             'content-type': 'application/json' ,
             'cookie': wx.getStorageSync("cookie" )
           },
           success:  function  (res) {
              // 重新授权登录
              if (res.statusCode === 401 ){ 
               wx.redirectTo({url: '/pages/login/index' })
                return 
             } else  if (res.statusCode !== 200 ) { 
               reject({ error: '服务器忙，请稍后重试', code: 500  });
                return 
             }  else  {
                if (url === '/api/cdz/user/weixin/login' ) {
                 const cookie = res.header["set-cookie" ] || res.header["Set-Cookie"]; 
     　　　　　　　　
                  if (cookie) wx.setStorageSync("cookie" , cookie);
               }
               resolve(res.data);
             }
           },
           fail:  function  (res) {
              //  fail调用接口失败
              if (url === '/api/cdz/user/weixin/login' ) {
               const cookie = res.header["set-cookie" ] || res.header["Set-Cookie"];
                if (cookie) wx.setStorageSync("cookie" , cookie);
             } 
             reject({ error: '网络错误', code: 0  });
           }
         })
       })
     }
 #+END_EXAMPLE

然后我们使用的时候直接使用封装好的 request 方法，这样所有的 api 就封装成一个个函数。我们在页面中直接 import 引入调用即可。

 #+BEGIN_EXAMPLE
     import request from "../utils/request" ;
     import { stringify } from "../utils/util" 

     export  function  testPost(data) {
        return request(`/api/test/post`, {
         method: 'PUT' ,
         data,
       })
     }

     export  function  testGet(data) {
        return request(`/api/test/get`)
     }
 #+END_EXAMPLE

** *十、使用 npm （引入 weui、moment 等插件）*
因为小程序使用的是不完整的浏览器对象，所以很多 js 包都是不好使的，比如 jquery
之类的。所以 npm 基本是废了，能用的依赖包很少，具体哪些能用得自己发掘了。这里还
是要介绍一下小程序如何使用 npm，毕竟有些包还是要用的。

1、打开 微信开发者工具 -- 点击 详情 -- 勾选 使用 npm 模块
2、打开命令行，进入项目的根目录下， npm init 初始化 npm
3、npm i 。。。安装你需要的依赖
4、打开 微信开发者工具 -- 点击 工具 -- 点击 构建 npm。 此时小程序会将 node_modules 文件编译打包，生成新目录 miniprogram_npm ，
5、在需要用到的页面的 js 文件中，const moment= require('moment') 引入，直接使用即可
6、最后记得忽略文件。新建 .gitignore 文件，node_modules 、 package_lock.json 等文件不需要上传，最好只保留小程序的 npm 构建包，用什么依赖也是的那个下载。这个到不是必须的
 
　　ps: 特殊注意一下 weui 的引入，这个 ui 库是纯 css 的，没有 js 文件，所以他没法用 npm 引入，而是直接下载文件，我直接丢到根目录下，然后在 app.wxss 文件的开头引入

#+BEGIN_EXAMPLE
    @import 'weui.wxss';，这样使用的
#+END_EXAMPLE

　

** *十二、总结*
　　以上就是我开发小程序的一些经验和总结，希望能帮到你。另外，整套程序的骨架
（业务代码删掉了）我会上传到 github， [[https://github.com/Aaron-China][下载]] 有需要的可以去下载，记得点个赞，哈哈。

　　最后，我会另写一篇博客，写一下 如何封装小程序 组件，并附上 我开发小程序遇到的坑，以及对应的解决方法。

* 微信小程序代码结构和框架调用流程详解
** 微信小程序是如何工作的？
   小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。
** 注册 App()
   App() 必须在 app.js 中调用，必须调用且只能调用一次。不然会出现无法预期的后果。

#+BEGIN_EXAMPLE
      App({
      onLaunch(options) {
    //小程序初始化完成时触发，全局只触发一次。参数也可以使用 wx.getLaunchOptionsSync 获取。
      },
      onShow(options) {
    //小程序启动，或从后台进入前台显示时触发。也可以使用 wx.onAppShow 绑定监听。
      },
      onHide() {
    //小程序从前台进入后台时触发。也可以使用 wx.onAppHide 绑定监听。
      },
      onError(msg) {
      console.log(msg)
     // 小程序发生脚本错误或 API 调用报错时触发。也可以使用 wx.onError 绑定监听。
      },
      globalData: 'I am global data'
     })
#+END_EXAMPLE

Page(Object) 构造器

Page(Object) 函数用来注册一个页面。接受一个 Object 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。

#+BEGIN_EXAMPLE
     // index.js
    Page({
      data: {
        text: 'This is page data.'
      },
      onLoad(options) {
        // Do some initialize when page load.
      },
      onReady() {
        // Do something when page ready.
      },
      onShow() {
        // Do something when page show.
      },
      onHide() {
        // Do something when page hide.
      },
      onUnload() {
        // Do something when page close.
      },
      onPullDownRefresh() {
        // Do something when pull down.
      },
      onReachBottom() {
        // Do something when page reach bottom.
      },
      onShareAppMessage() {
        // return custom share data when user share.
      },
      onPageScroll() {
        // Do something when page scroll
      },
      onResize() {
        // Do something when page resize
      },
      onTabItemTap(item) {
        console.log(item.index)
        console.log(item.pagePath)
        console.log(item.text)
      },
      // Event handler.
      viewTap() {
        this.setData({
          text: 'Set some data for updating view.'
        }, function () {
          // this is setData callback
        })
      },
      customData: {
        hi: 'MINA'
      }
    })
#+END_EXAMPLE

Object 参数说明：

1.  data 页面的初始数据
2.  onLoad 生命周期回调---监听页面加载
3.  onShow 生命周期回调---监听页面显示
4.  onReady 生命周期回调---监听页面初次渲染完成
5.  onHide 生命周期回调---监听页面隐藏
6.  onUnload 生命周期回调---监听页面卸载
7.  onPullDownRefresh 监听用户下拉动作
8.  onReachBottom 页面上拉触底事件的处理函数
9.  onShareAppMessage 用户点击右上角转发
10. onPageScroll 页面滚动触发事件的处理函数
11. onResize 页面尺寸改变时触发，详见 响应显示区域变化
12. onTabItemTap 当前是 tab 页时，点击 tab 时触发

** 全局配置 app.json
#+BEGIN_EXAMPLE
     {
      "pages": ["pages/index/index", "pages/logs/index"],
      "window": {
        "navigationBarTitleText": "Demo"
      },
      "tabBar": {
        "list": [
          {
            "pagePath": "pages/index/index",
            "text": "首页"
          },
          {
            "pagePath": "pages/logs/logs",
            "text": "日志"
          }
        ]
      },
      "networkTimeout": {
        "request": 10000,
        "downloadFile": 10000
      },
      "debug": true,
      "navigateToMiniProgramAppIdList": ["wxe5f52902cf4de896"]
    }
#+END_EXAMPLE

配置说明：

- pages 页面路径列表
- window 全局的默认窗口表现
- tabBar 底部 tab 栏的表现
- networkTimeout 网络超时时间
- debug 是否开启 debug 模式，默认关闭
- functionalPages 是否启用插件功能页，默认关闭
- subpackages 分包结构配置
- workers 代码放置的目录
- requiredBackgroundModes 需要在后台使用的能力，如「音乐播放」

** 逻辑层
   小程序开发框架的逻辑层使用 JavaScript 引擎为小程序提供开发者 JavaScript 代码
   的运行环境以及微信小程序的特有功能。

   逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。

   开发者写的所有代码最终将会打包成一份 JavaScript 文件，并在小程序启动的时候运
   行，直到小程序销毁。这一行为类似 ServiceWorker，所以逻辑层也称之为 App
   Service。

** 视图层
   框架的视图层由 WXML 与 WXSS 编写，由组件来进行展示。

   将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。

- WXML(WeiXin Markup language) 用于描述页面的结构。
- WXS(WeiXin Script) 是小程序的一套脚本语言，结合 WXML，可以构建出页面的结构。
- WXSS(WeiXin Style Sheet) 用于描述页面的样式。
- 组件(Component)是视图的基本组成单元。

