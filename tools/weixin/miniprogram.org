* 详解微信小程序开发
** *一、序*
    
　　微信小程序，估计大家都不陌生，现在应用场景特别多。今天就系统的介绍一下小程
序开发。注意，这里只从项目代码上做解析，不涉及小程序如何申请、打包、发布的东西。
（这些跟着微信官方文档的流程走就好）。好了废话不多说，看目录。

　　 *注:* 小程序是一套特殊的东西，融合了原生和 web 端。他是一个不完整的浏览器
对象，所以很多 DOM 、 BOM 的东西无法使用，但是他又通过微信 APP 实现了多线程。

**  *五、基础文件目录详解*
   然后解释一下小程序的目录结构。

project.config.json: 小程序的配置文件，包含项目打包配置、上传代码自动压缩等等，是一些开发、打包之类的配置。

app.json: 当前项目的配置文件。包括项目的页面引入、导航条颜色、导航条标题 等等，是项目具体到代码开发上的配置。介绍几个配置：

pages： 包含的页面。每次新增页面都得在这里引入，否则新页面的 json 配置等无法生效。 注意 pages 中页面先写的先渲染，所以数组第一条也就是我们的首页。

window： 配置所有页面导航条字体、颜色、背景色等

app.js: 小程序入口文件。生成小程序实例，App({}), 通常在这获取用户信息、授权信息、定义全局变量等。

app.wxss: 小程序全局 style 文件。对整个项目页面生效。通常规定项目的 字体、基础颜色，定义一些公共样式。

utils: 工具函数目录。通常用来放一些公共的 js 方法。比如封装的 request 请求，一些别的处理数据什么的方法。

pages: 小程序的页面目录。所有的小程序页面，都写在这里面。

**  *六、完善项目目录*
   上边大致解释了一下小程序的基础文件，现在按照常见的规范完善一下项目目录，这里
   面包含一些个人见解，有需要的参考即可。先看一下结果：

现在解释一下这些目录：
components： 我们封装的小程序可复用组件。
constants： 一些项目中的常亮。
image： 用到的图片。
services： 用到的所有接口目录

大致就新建了这几个，如果有别的需求，根据自己的情况增加。

** *八、实现页面跳转*
   和通常的 web 开发一样，小程序页面跳转页分 2 中，wxml 中的 vavigator 标签，以
   及 js 的 navigator 相关的 api。路由跳转的方法有好几个，这里不一一赘述了，常用
   的直接跳转

#+BEGIN_EXAMPLE
    wx.navigateTo，重定向 wx.redirectTo等等，具体的请看官方文档。这里强调一下路由传参，很简单： 
    1、少量数据。直接问号传参。然后在目标页面的onLoad方法中通过options参数接收。 
    2、大量数据。直接塞到全局变量里面。
#+END_EXAMPLE

#+BEGIN_EXAMPLE
     //  wxml跳转页面
          {{item.name}}
           
     // js跳转页面
     wx.navigateTo({
          url: `/pages/my/appointDetail/index?_id=${ this .data.marker.id}`
        }) 
     
    //路由传参如何接收 
onLoad: function (options) {
　　 console.log(options)
},

#+END_EXAMPLE

** *九、wx.request 的封装*
 在 utils 中新建 request.js，简单封装了一下，一些数据要全局配置的都引进来，然后
 做了些错误的统一处理，没什么难度， 不过要特别注意一下 cookie 的携带。具体代码如
 下：

 #+BEGIN_EXAMPLE
     const app =  getApp()
     export  default  function request(url, options =  {}) {
        return  new Promise( function  (resolve, reject) {
         wx.request({
           url: `${app.origin}${url}`,
           method: 'GET' ,
           ...options,
           data: options.data,
           header: {
             'content-type': 'application/json' ,
             'cookie': wx.getStorageSync("cookie" )
           },
           success:  function  (res) {
              // 重新授权登录
              if (res.statusCode === 401 ){ 
               wx.redirectTo({url: '/pages/login/index' })
                return 
             } else  if (res.statusCode !== 200 ) { 
               reject({ error: '服务器忙，请稍后重试', code: 500  });
                return 
             }  else  {
                if (url === '/api/cdz/user/weixin/login' ) {
                 const cookie = res.header["set-cookie" ] || res.header["Set-Cookie"]; 
     　　　　　　　　
                  if (cookie) wx.setStorageSync("cookie" , cookie);
               }
               resolve(res.data);
             }
           },
           fail:  function  (res) {
              //  fail调用接口失败
              if (url === '/api/cdz/user/weixin/login' ) {
               const cookie = res.header["set-cookie" ] || res.header["Set-Cookie"];
                if (cookie) wx.setStorageSync("cookie" , cookie);
             } 
             reject({ error: '网络错误', code: 0  });
           }
         })
       })
     }
 #+END_EXAMPLE

然后我们使用的时候直接使用封装好的 request 方法，这样所有的 api 就封装成一个个函数。我们在页面中直接 import 引入调用即可。

 #+BEGIN_EXAMPLE
     import request from "../utils/request" ;
     import { stringify } from "../utils/util" 

     export  function  testPost(data) {
        return request(`/api/test/post`, {
         method: 'PUT' ,
         data,
       })
     }

     export  function  testGet(data) {
        return request(`/api/test/get`)
     }
 #+END_EXAMPLE

** *十、使用 npm （引入 weui、moment 等插件）*
因为小程序使用的是不完整的浏览器对象，所以很多 js 包都是不好使的，比如 jquery
之类的。所以 npm 基本是废了，能用的依赖包很少，具体哪些能用得自己发掘了。这里还
是要介绍一下小程序如何使用 npm，毕竟有些包还是要用的。

1、打开 微信开发者工具 -- 点击 详情 -- 勾选 使用 npm 模块
2、打开命令行，进入项目的根目录下， npm init 初始化 npm
3、npm i 。。。安装你需要的依赖
4、打开 微信开发者工具 -- 点击 工具 -- 点击 构建 npm。 此时小程序会将 node_modules 文件编译打包，生成新目录 miniprogram_npm ，
5、在需要用到的页面的 js 文件中，const moment= require('moment') 引入，直接使用即可
6、最后记得忽略文件。新建 .gitignore 文件，node_modules 、 package_lock.json 等文件不需要上传，最好只保留小程序的 npm 构建包，用什么依赖也是的那个下载。这个到不是必须的
 
　　ps: 特殊注意一下 weui 的引入，这个 ui 库是纯 css 的，没有 js 文件，所以他没法用 npm 引入，而是直接下载文件，我直接丢到根目录下，然后在 app.wxss 文件的开头引入

#+BEGIN_EXAMPLE
    @import 'weui.wxss';，这样使用的
#+END_EXAMPLE

　


* 组建和 api
*** 组件

    - [view](https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html)
    - [scroll-view](https://mp.weixin.qq.com/debug/wxadoc/dev/component/scroll-view.html)
    - [swiper](https://mp.weixin.qq.com/debug/wxadoc/dev/component/swiper.html)

    - [icon](https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html)
    - [text](https://mp.weixin.qq.com/debug/wxadoc/dev/component/text.html)
    - [progress](https://mp.weixin.qq.com/debug/wxadoc/dev/component/progress.html)

    ### 表单组件

    - [button](https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html)
    - [checkbox](https://mp.weixin.qq.com/debug/wxadoc/dev/component/checkbox.html)
    - [form](https://mp.weixin.qq.com/debug/wxadoc/dev/component/form.html)
    - [input](https://mp.weixin.qq.com/debug/wxadoc/dev/component/input.html)
    - [label](https://mp.weixin.qq.com/debug/wxadoc/dev/component/label.html)
    - [picker](https://mp.weixin.qq.com/debug/wxadoc/dev/component/picker.html)
    - [radio](https://mp.weixin.qq.com/debug/wxadoc/dev/component/radio.html)
    - [slider](https://mp.weixin.qq.com/debug/wxadoc/dev/component/slider.html)
    - [switch](https://mp.weixin.qq.com/debug/wxadoc/dev/component/switch.html)
    - [textarea](https://mp.weixin.qq.com/debug/wxadoc/dev/component/textarea.html)

    ### 导航

    - [navigator](https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html)

    ### 媒体组件

    - [audio](https://mp.weixin.qq.com/debug/wxadoc/dev/component/audio.html)
    - [image](https://mp.weixin.qq.com/debug/wxadoc/dev/component/image.html)
    - [video](https://mp.weixin.qq.com/debug/wxadoc/dev/component/video.html)

    ### 地图

    - [map](hhttps://mp.weixin.qq.com/debug/wxadoc/dev/component/map.html%20#map)

    ### 画布

    - [canvas](https://mp.weixin.qq.com/debug/wxadoc/dev/component/canvas.html)

    ### 客服会话

    - [contact-button](https://mp.weixin.qq.com/debug/wxadoc/dev/component/contact-button.html)

*** api
    ## [API](https://mp.weixin.qq.com/debug/wxadoc/dev/api/)

    ### [网络](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-network.html)

    #### [发起请求](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html)

    - `wx.request`   `wx.request` 发起的是 HTTPS 请求

    #### [上传、下载](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-file.html)

    - `wx.uploadFile`   将本地资源上传到开发者服务器
    - `wx.downloadFile` 下载文件资源到本地

    #### [WebSocket](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

    - `wx.connectSocket`  创建一个 WebSocket 连接
    - `wx.onSocketOpen`   监听 WebSocket 连接打开事件
    - `wx.onSocketError`  监听 WebSocket 错误
    - `wx.sendSocketMessage`  通过 WebSocket 连接发送数据
    - `wx.onSocketMessage`  监听 WebSocket 接受到服务器的消息事件
    - `wx.closeSocket`    关闭 WebSocket 连接
    - `wx.onSocketClose`  监听 WebSocket 关闭

    ### [媒体](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-picture.html)

    #### [图片](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-picture.html)

    - `wx.chooseImage`  从本地相册选择图片或使用相机拍照
    - `wx.previewImage` 预览图片
    - `wx.getImageInfo` 获取图片信息

    #### [录音](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-record.html)

    - `wx.startRecord`  开始录音
    - `wx.stopRecord`   主动调用停止录音

    #### [音频播放控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-voice.html)

    - `wx.playVoice`    开始播放语音
    - `wx.pauseVoice`   暂停正在播放的语音
    - `wx.stopVoice`    结束播放语音

    #### [音乐播放控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-background-audio.html)

    - `wx.getBackgroundAudioPlayerState`  获取音乐播放状态
    - `wx.playBackgroundAudio`  播放音乐，同时只能有一首音乐正在播放
    - `wx.pauseBackgroundAudio` 暂停播放音乐
    - `wx.seekBackgroundAudio`  控制音乐播放进度
    - `wx.stopBackgroundAudio`  停止播放音乐
    - `wx.onBackgroundAudioPlay`  监听音乐播放
    - `wx.onBackgroundAudioPause` 监听音乐暂停
    - `wx.onBackgroundAudioStop`  监听音乐停止

    #### [音频组件控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

    - `wx.createAudioContext` 创建并返回 audio 上下文 `audioContext` 对象

    #### [视频](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

    - `wx.chooseVideo`  拍摄视频或从手机相册中选视频，返回视频的临时文件路径

    #### [视频组件控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

    - `wx.createVideoContext`  创建并返回 video 上下文 `videoContext` 对象

    ### [文件](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

    - `wx.saveFile` 保存文件到本地
    - `wx.getSavedFileList` 获取本地已保存的文件列表
    - `wx.getSavedFileInfo` 获取本地文件的文件信息
    - `wx.removeSavedFile` 删除本地存储的文件
    - `wx.openDocument` 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx

    ### [数据缓存](https://mp.weixin.qq.com/debug/wxadoc/dev/api/data.html)

    - `wx.setStorage`   将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口
    - `wx.setStorageSync` 将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口
    - `wx.getStorage`  从本地缓存中异步获取指定 key 对应的内容
    - `wx.getStorageSync` 从本地缓存中同步获取指定 key 对应的内容
    - `wx.getStorageInfo` 异步获取当前 storage 的相关信息
    - `wx.getStorageInfoSync` 同步获取当前 storage 的相关信息
    - `wx.removeStorage`  从本地缓存中异步移除指定 key
    - `wx.removeStorageSync`  从本地缓存中同步移除指定 key
    - `wx.clearStorage` 清理本地数据缓存
    - `wx.clearStorageSync` 同步清理本地数据缓存

    ### [位置](https://mp.weixin.qq.com/debug/wxadoc/dev/api/location.html)

    #### 获取位置

    - `wx.getLocation` 获取当前的地理位置、速度
    - `wx.chooseLocation` 打开地图选择位置

    #### 查看位置

    - `wx.openLocation` 使用微信内置地图查看位置

    #### [地图组件控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-map.html)

    - `wx.createMapContext` 创建并返回 map 上下文 mapContext 对象

    ### [设备](https://mp.weixin.qq.com/debug/wxadoc/dev/api/device.html)

    #### [系统信息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/systeminfo.html)

    - `wx.getSystemInfo` 获取系统信息
    - `wx.getSystemInfoSync` 获取系统信息同步接口

    #### [网络状态](https://mp.weixin.qq.com/debug/wxadoc/dev/api/device.html)

    - `wx.getNetworkType` 获取网络类型

    #### [重力感应](https://mp.weixin.qq.com/debug/wxadoc/dev/api/accelerometer.html)

    - `wx.onAccelerometerChange`  监听重力感应数据，频率：5次/秒

    #### [罗盘](https://mp.weixin.qq.com/debug/wxadoc/dev/api/campass.html)

    - `wx.onCompassChange`  监听罗盘数据，频率：5次/秒

    #### [拨打电话](https://mp.weixin.qq.com/debug/wxadoc/dev/api/phonecall.html)

    - `wx.makePhoneCall`  拨打电话

    #### [扫码](https://mp.weixin.qq.com/debug/wxadoc/dev/api/scancode.html)

    - `wx.scanCode` 调起客户端扫码界面，扫码成功后返回对应的结果

    ### [界面](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-react.html)

    #### [交互反馈](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-react.html)

    - `wx.showToast` 显示消息提示框
    - `wx.hideToast` 隐藏消息提示框
    - `wx.showModal` ​显示模态弹窗
    - `wx.showActionSheet` 显示操作菜单

    #### [设置导航条](https://mp.weixin.qq.com/debug/wxadoc/dev/api/ui.html)

    - `wx.setNavigationBarTitle` 动态设置当前页面的标题
    - `wx.showNavigationBarLoading` 在当前页面显示导航条加载动画
    - `wx.hideNavigationBarLoading` 隐藏导航条加载动画

    #### [导航](https://mp.weixin.qq.com/debug/wxadoc/dev/api/ui-navigate.html)

    - `wx.navigateTo`  保留当前页面，跳转到应用内的某个页面，使用 `wx.navigateBack` 可以返回到原页面
    - `wx.redirectTo` 关闭当前页面，跳转到应用内的某个页面
    - `wx.switchTab`  跳转到 `tabBar` 页面，并关闭其他所有非 `tabBar` 页面
    - `wx.navigateBack`  关闭当前页面，返回上一页面或多级页面。可通过 `getCurrentPages()` 获取当前的页面栈，决定需要返回几层

    #### [动画](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-animation.html)

    - `wx.createAnimation`  创建一个动画实例 `animation`。调用实例的方法来描述动画。最后通过动画实例的`export` 方法导出动画数据传递给组件的 `animation` 属性。
    - animation
    - 动画队列

    #### [绘图](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/intro.html)

    - [简介 intro](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/intro.html)
    - [Canvas 坐标系](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/coordinates.html)
    - [渐变](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/gradient.html)
    - [API 接口索引](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/reference.html)
    - [wx.createCanvasContext](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/create-canvas-context.html) 创建 canvas 绘图上下文（指定 canvasId）
    - [wx.canvasToTempFilePath](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/reference.html) 把当前画布的内容导出生成图片，并返回文件路径

    #### [下拉刷新](https://mp.weixin.qq.com/debug/wxadoc/dev/api/pulldown.html)

    - `Page.onPullDownRefresh` 在 `Page` 中定义 `onPullDownRefresh` 处理函数，监听该页面用户下拉刷新事件
    - `wx.stopPullDownRefresh` 停止当前页面下拉刷新

    ### [开放接口](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html)

    #### [登录](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html)

    - `wx.login` 调用接口获取登录凭证（code）进而换取用户登录态信息
    - `code` 换取 `session_key`
    - 登录态维护
      - 登录时序图
      - `wx.checkSession` 检查登陆态是否过期
    - [用户数据的签名验证和加解密](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)
      - 数据签名校验
      - 加密数据解密算法

    #### [用户信息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/open.html)

    - `wx.getUserInfo` 获取用户信息，需要先调用 `wx.login` 接口说明
    - `UnionID` 机制说明

    #### [微信支付](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html)

    - `wx.requestPayment` 发起微信支付

    #### [模板消息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/notice.html)

    - 使用说明
    - 接口说明
      - 获取 access_token
      - 发送模板消息
      - 下发条件说明
      - 审核说明
      - 违规说明
      - 处罚说明

    #### 客服消息

    - [接收消息和事件](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/receive.html)
      - 文本消息
      - 图片消息
      - 进入会话事件
    - [发送客服消息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/conversation.html)
    - [临时素材接口](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/material.html)
      - 获取临时素材
      - 新增临时素材
    - [接入指引](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/callback_help.html)

    #### [分享](https://mp.weixin.qq.com/debug/wxadoc/dev/api/share.html)

    - Page.onShareAppMessage

    ----

    ## [工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html)

    ### [概览](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html)

    ### [程序调试](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/debug.html)

    - 模拟器
    - 调试工具
      - Wxml panel
      - Sources panel
      - Network panel
      - Appdata panel
      - Storage panel
      - Console panel
    - 小程序操作区
