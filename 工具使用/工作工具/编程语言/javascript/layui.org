* 基础说明
** 开始使用 http://www.layui.com
*** 引入库  远程
      <link rel="stylesheet" href="//res.layui.com/layui/dist/css/layui.css?t=1606406696877"  media="all">
      <script src="//res.layui.com/layui/dist/layui.js?t=1606406696877" charset="utf-8"></script>
   
*** 引入库本地
    #+begin_src html
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
          <title>开始使用layui</title>
          <link rel="stylesheet" href="../layui/css/layui.css">
        </head>
        <body>

          <!-- 你的HTML代码 -->

          <script src="../layui/layui.js"></script>
          <script>
            //一般直接写在一个js文件中
            layui.use(['layer', 'form'], function(){
            var layer = layui.layer
            ,form = layui.form;

            layer.msg('Hello World');
            });
          </script> 
        </body>
      </html>
      #+end_src
** 底层方法
*** 全局配置
    方法：/layui.config(options)/

  你可以在使用模块之前，全局化配置一些参数，尽管大部分时候它不是必须的。所以我们
  目前提供的全局配置项非常少，这也是为了减少一些不必要的工作，尽可能让使用变得更
  简单。目前支持的全局配置项如下：

  
      layui.config({
        dir: '/res/layui/' //layui.js 所在路径（注意，如果是 script 单独引入 layui.js，无需设定该参数。），一般情况下可以无视
        ,version: false //一般用于更新模块缓存，默认不开启。设为 true 即让浏览器不缓存。也可以设为一个固定的值，如：201610
        ,debug: false //用于开启调试模式，默认 false，如果设为 true，则JS模块的节点会保留在页面
        ,base: '' //设定扩展的 layui 模块的所在目录，一般用于外部模块扩展
      });
          
 
*** 定义模块
    方法：layui.define([mods], callback)

  通过该方法可定义一个 layui 模块。参数 mods是可选的，用于声明该模块所依赖的模
  块。callback即为模块加载完毕的回调函数，它返回一个 exports参数，用于输出该模块
  的接口。

  
      layui.define(function(exports){
        //do something
      
        exports('demo', function(){
          alert('Hello World!');
        });
      });
          
 

 你也可以在定义一个模块的时候，声明该模块所需的依赖，如：

  
      layui.define(['layer', 'laypage'], function(exports){
        //do something
      
        exports('demo', function(){
          alert('Hello World!');
        });
      });
          
 

  上述的 ['layer', 'laypage'] 即为本模块所依赖的模块，它并非只能是一个数组，你也可以直接传一个字符型的模块名，但是这样只能依赖一个模块。
*** 加载所需模块
    方法：layui.use([mods], callback)

  layui的内置模块并非默认就加载的，他必须在你执行该方法后才会加载。它的参数跟上述的define 方法完全一样。
  另外请注意，mods里面必须是一个合法的模块名，不能包含目录。如果需要加载目录，建议采用extend 建立别名（详见模块规范）

  
      layui.use(['laypage', 'layedit'], function(){
        var laypage = layui.laypage
        ,layedit = layui.layedit;
      
        //do something
      });
          
 

  该方法的函数其实返回了所加载的模块接口，所以你其实也可以不通过 layui对象赋值获
  得接口（这一点跟 Sea.js 很像哈）：

  
      layui.use(['laypage', 'layedit'], function(laypage, layedit){
      
        //使用分页
        laypage();
      
        //建立编辑器
        layedit.build();
      });
          
 
*** 动态加载 CSS
    方法：/layui.link(href)/

    href 即为 css 路径。注意：该方法并非是你使用 layui所必须的，它一般只是用于动态加载你的外部 CSS 文件。
*** 本地存储
    本地存储是对 localStorage 和 sessionStorage的友好封装，可更方便地管理本地数据。

  #+BEGIN_QUOTE
    - localStorage 持久化存储：/layui.data(table,
      settings)，数据会永久存在，除非物理删除。/
    - sessionStorage 会话性存储：/layui.sessionData(table,
      settings)/，页面关闭后即失效。注：/layui 2.2.5 新增/
  #+END_QUOTE

  上述两个方法的使用方式是完全一样的。其中参数 /table/
  为表名，/settings/是一个对象，用于设置 key、value。下面以 layui.data
  方法为例：

  
      //【增】：向 test 表插入一个 nickname 字段，如果该表不存在，则自动建立。
      layui.data('test', {
        key: 'nickname'
        ,value: '贤心'
      });
     
      //【删】：删除 test 表的 nickname 字段
      layui.data('test', {
        key: 'nickname'
        ,remove: true
      });
      layui.data('test', null); //删除test表
      
      //【改】：同【增】，会覆盖已经存储的数据
      
      //【查】：向 test 表读取全部的数据
      var localTest = layui.data('test');
      console.log(localTest.nickname); //获得“贤心”
          
 


  - 获取设备信息



  方法：/layui.device(key)/，参数 key 是可选的

  由于 layui
  的一些功能进行了兼容性处理和响应式支持，因此该方法同样发挥了至关重要的作用。尤其是在
  layui mobile 模块中的作用可谓举足轻重。该方法返回了丰富的设备信息：

  
      var device = layui.device();
     
      //device即可根据不同的设备返回下述不同的信息
      {
        os: "windows" //底层操作系统，windows、linux、mac等
        ,ie: false //ie6-11的版本，如果不是ie浏览器，则为false
        ,weixin: false //是否微信环境
        ,android: false //是否安卓系统
        ,ios: false //是否ios系统
      }
 


 


  有时你的 App 可能会对 userAgent 插入一段特定的标识，譬如：

  #+BEGIN_QUOTE
    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like
    Gecko) Chrome/53.0.2785.143 myapp/1.8.6 Safari/537.36
  #+END_QUOTE

  你要验证当前的 WebView 是否在你的 App 环境，即可通过上述的/myapp/（即为
  Native 给 Webview 插入的标识，可以随意定义）来判断。

  
      var device = layui.device('myapp');
      if(device.myapp){
        alert('在我的App环境');
      }      
          
 


  - 其它



  除上述介绍的方法之外，layui.js 内部还提供了许多底层引擎，他们同样是整个
  layui 体系的有力支撑，在日常应用中也许会用到：

  | 方法/属性                                  | 描述                                                                                    |
  |--------------------------------------------+-----------------------------------------------------------------------------------------|
  | layui.cache                                | 静态属性。获得一些配置及临时的缓存信息                                                  |
  | layui.extend(options)                      | 拓展一个模块别名，如：layui.extend({test: '/res/js/test'})                              |
  | layui.each(obj, fn)                        | 对象（Array、Object、DOM 对象等）遍历，可用于取代 for 语句                                |
  | layui.getStyle(node, name)                 | 获得一个原始 DOM 节点的 style 属性值，如：layui.getStyle(document.body, 'font-size')    |
  | layui.img(url, callback, error)            | 图片预加载                                                                              |
  | layui.sort(obj, key, desc)                 | 将数组中的对象按某个成员重新对该数组排序，如：layui.sort([{a: 3},{a: 1},{a: 5}], 'a')   |
  | layui.router()                             | 获得 location.hash 路由结构，一般在单页面应用中发挥作用。                               |
  | layui.url(href)                            | 用于将一段 URL 链接中的 pathname、search、hash 属性值进行对象化处理                     |
  |                                            | 参数： /href/ 可选。若不传，则自动读取当前页面的 url（即：location.href）             |
  |                                            | 示例：=var url = layui.url();=                                                          |
  |                                            |                                                                                         |
  |                                            | 注意：系 layui 2.5.6 新增                                                               |
  | layui.hint()                               | 向控制台打印一些异常信息，目前只返回了 error 方法：layui.hint().error('出错啦')         |
  | layui.stope(e)                             | 阻止事件冒泡                                                                            |
  | layui.onevent(modName, events, callback)   | 增加自定义模块事件。有兴趣的同学可以阅读 layui.js 源码以及 form 模块                    |
  | layui.event(modName, events, params)       | 执行自定义模块事件，搭配 onevent 使用                                                   |
  | layui.factory(modName)                     | 用于获取模块对应的 define 回调函数                                                      |


  - 第三方支撑



  layui *部分模块*依赖 /jQuery/（比如 layer），但是你并不用去额外加载
  jQuery。layui 已经将 jQuery 最稳定的一个版本改为 layui
  的内部模块，当你去使用 layer
  之类的模块时，它会首先判断你的页面是否已经引入了
  jQuery，如果没有，则加载内部的 jQuery 模块，如果有，则不会加载。

  另外，我们的图标取材于阿里巴巴矢量图标库（/iconfont/），构建工具采用
  /Gulp/ 。除此之外，不依赖于任何第三方工具。















  --------------

** 页面元素规范与说明
   layui提倡返璞归真，遵循于原生态的元素书写规则，所以通常而言，你仍然是在写基本
   的HTML 和 CSS 代码，不同的是，在 HTML 结构上及 CSS定义上需要小小遵循一定的规
   范。

*** CSS 内置公共基础类
**** 布局 / 容器
 | 类名（class）       | 说明                                                                                      |
 | layui-main          | 用于设置一个宽度为 1140px 的水平居中块（无响应式）                                        |
 | layui-inline        | 用于将标签设为内联块状元素                                                                |
 | layui-box           | 用于排除一些UI框架（如Bootstrap）强制将全部元素设为box-sizing: border-box所引发的尺寸偏差 |
 | layui-clear         | 用于消除浮动（一般不怎么常用，因为layui几乎没用到浮动）                                   |
 | layui-btn-container | 用于定义按钮的父容器。                                                                    |
 | layui-btn-fluid     | 用于定义流体按钮。即宽度最大化适应。                                                      |
**** 辅助
   | layui-icon     | 用于图标                 |
   | layui-elip     | 用于单行文本溢出省略     |
   | layui-unselect | 用于屏蔽选中             |
   | layui-disabled | 用于设置元素不可点击状态 |
   | layui-circle   | 用于设置元素为圆形       |
   | layui-show     | 用于显示块状元素         |
   | layui-hide     | 用于隐藏元素             |
**** 文本
   | layui-text     | 定义一段文本区域（如文章），该区域内的特殊标签（如a、li、em等）将会进行相应处理 |
   | layui-word-aux | 灰色标注性文字，左右会有间隔                                                    |
**** 背景色
   | layui-bg-red    | 用于设置元素赤色背景             |
   | layui-bg-orange | 用于设置元素橙色背景             |
   | layui-bg-green  | 用于设置元素墨绿色背景（主色调） |
   | layui-bg-cyan   | 用于设置元素藏青色背景           |
   | layui-bg-blue   | 用于设置元素蓝色背景             |
   | layui-bg-black  | 用于设置元素经典黑色背景         |
   | layui-bg-gray   | 用于设置元素经典灰色背景         |
** 模块规范
   layui 的模块是基于 /layui.js/内部实现的异步模块加载方式，它并不遵循于 AMD（没
   有为什么，毕竟任性呀！），而是自己定义了一套更轻量的模块规范。并且这种方式在
   经过了大量的实践后，成为layui 最核心的模块加载引擎。
*** 预先加载
 开门见山，还是直接说使用比较妥当。Layui 的模块加载采用核心的/layui.use(mods,
 callback)/方法，当你的 JS需要用到 Layui 模块的时候，我们更推荐你采用预先加载，
 因为这样可以避免到处写 layui.use 的麻烦。你应该在最外层如此定义：

 
     #+begin_src js
     /*
       Demo1.js
       使用Layui的form和upload模块
     ,*/
     layui.use(['form', 'upload'], function(){  //如果只加载一个模块，可以不填数组。如：layui.use('form')
       var form = layui.form //获取form模块
       ,upload = layui.upload; //获取upload模块
      
       //监听提交按钮
       form.on('submit(test)', function(data){
         console.log(data);
       });
      
       //实例化一个上传控件
       upload({
         url: '上传接口url'
         ,success: function(data){
           console.log(data);
         }
       })
     });
     #+end_src
          

*** 按需加载（不推荐）
 如果你有强迫症，你对网站的性能有极致的要求，你并不想预先加载所需要的模块，而是
 在触发一个动作的时候，才去加载模块，那么，这是允许的。你不用在你的 JS 最外层去
 包裹一个大大的layui.use，你只需要：

 
     /*
       Demo2.js
       按需加载一个Layui模块
     */
     
     //……
     //你的各种JS代码什么的
     //……
     
     //下面是在一个事件回调里去加载一个Layui模块
     button.addEventListener('click', function(){
       layui.use('laytpl', function(laytpl){ //温馨提示：多次调用use并不会重复加载laytpl.js，Layui内部有做模块cache处理。
         var html = laytpl('').render({});
         console.log(html);
       });
     });
          


 注意：如果你的 JS中需要大量用到模块，我们并不推荐你采用这种加载方式，因为这意味
 着你要写很多layui.use()，代码可维护性不高。
 建议还是采用：预先加载。即一个 JS 文件中，写一个 use 即可。
*** 模块命名空间
 layui 的模块接口会绑定在 layui 对象下，内部由 layui.define()方法来完成。每一个
 模块都会一个特有的名字，并且无法被占用。所以你无需担心模块的空间被污染，除非你
 主动delete layui.{模块名}。调用模块可通过 layui.use 方法来实现，然后再通过layui
 对象获得模块接口。如：

 
     layui.use(['layer', 'laypage', 'laydate'], function(){
       var layer = layui.layer //获得layer模块
       ,laypage = layui.laypage //获得laypage模块
       ,laydate = layui.laydate; //获得laydate模块
      
       //使用模块
     });      
          


 我们推荐你将所有的业务代码都写在一个大的 use
 回调中，而不是将模块接口暴露给全局，比如下面的方式我们是极不推荐的：

 
     //强烈不推荐下面的做法
     var laypage, laydate;
     layui.use(['laypage', 'laydate'], function(){
       laypage = layui.laypage;
       laydate = layui.laydate;
     });
          


 你之所以想使用上面的错误方式，是想其它地方使用不在执行一次
 layui.use？但这种理解本身是存在问题的。因为如果一旦你的业务代码是在模块加载完毕之前执行，你的全局对象将获取不到模块接口，因此这样用不仅不符合规范，还存在报错风险。建议在你的
 js 文件中，在最外层写一个 layui.use
 来加载所依赖的模块，并将业务代码写在回调中，见：[[index_u19.html#before][预先加载]]。

 事实上，如果你不想采用 layui.use，你可以引入 layui.all.js 来替代
 layui.js，见：[[https://www.layui.com/doc/#allmodules][全模块用法]]


 - 扩展一个 layui 模块



 layui
 官方提供的模块有时可能还无法满足你，或者你试图按照 layer 的模块规范来扩展一个模块。那么你有必要认识/layui.define()/方法，相信你在文档左侧的“底层方法”中已有所阅读。下面就就让我们一起扩展一个 Layui 模块吧：

 第一步：确认模块名，假设为：/mymod/，然后新建一个/mymod.js/
 文件放入项目任意目录下（注意：不用放入 layui 目录）

 第二步：编写 test.js 如下：

 
     /**
       扩展一个test模块
     **/      
     
     layui.define(function(exports){ //提示：模块也可以依赖其它模块，如：layui.define('layer', callback);
       var obj = {
         hello: function(str){
           alert('Hello '+ (str||'mymod'));
         }
       };
      
       //输出test接口
       exports('mymod', obj);
     });    
          


 第三步：设定扩展模块所在的目录，然后就可以在别的 JS 文件中使用了

 
     //config的设置是全局的
     layui.config({
       base: '/res/js/' //假设这是你存放拓展模块的根目录
     }).extend({ //设定模块别名
       mymod: 'mymod' //如果 mymod.js 是在根目录，也可以不用设定别名
       ,mod1: 'admin/mod1' //相对于上述 base 目录的子目录
     });
     
     //你也可以忽略 base 设定的根目录，直接在 extend 指定路径（主要：该功能为 layui 2.2.0 新增）
     layui.extend({
       mod2: '{/}http://cdn.xxx.com/lib/mod2' // {/}的意思即代表采用自有路径，即不跟随 base 路径
     })
     
     //使用拓展模块
     layui.use(['mymod', 'mod1'], function(){
       var mymod = layui.mymod
       ,mod1 = layui.mod1
       ,mod2 = layui.mod2;
      
       mymod.hello('World!'); //弹出 Hello World!
     });
          


 大体上来说，layui 的模块定义很类似 Require.js 和
 Sea.js，但跟他们又有着明显的不同，譬如在接口输出等地方。


 - 结语



 其实关于模块的核心，就是 layui.js 的两个底层方法：一个用于定义模块的
 /layui.define()/，一个加载模块的 /layui.use()/。






 --------------

 [[https://www.layui.com/doc/base/modules.html]]

 
 











 --------------

* 页面元素
** 栅格系统与后台布局
*** 栅格系统
    将栅格放入一个带有 class="layui-container" 的特定的容器中，以便在小屏幕以上的设备中固定宽度，让列可控。
    当然，你还可以不固定容器宽度。将栅格或其它元素放入一个带有 class="layui-fluid" 的容器中，那么宽度将不会固定，而是 100% 适应
****  栅格布局规则：
1. 采用 layui-row 来定义行，如：<div class="layui-row"></div>
2. 采用类似 layui-col-md* 这样的预设类来定义一组列（column）
3. 列可以同时出现最多四种不同的组合，分别是：xs（超小屏幕，如手机）、sm（小屏幕，如平板）、md（桌面中等屏幕）、lg（桌面大型屏幕），以呈现更加动态灵活的布局。
4. 可对列追加类似 layui-col-space5、 layui-col-md-offset3 这样的预设类来定义列的间距和偏移。
5. 最后，在列（column）元素中放入你自己的任意元素填充内容，完成布局！

  
      #+begin_src html
      <div class="layui-container">  
        常规布局（以中型屏幕桌面为例）：
        <div class="layui-row">
          <div class="layui-col-md9">
            你的内容 9/12
          </div>
          <div class="layui-col-md3">
            你的内容 3/12
          </div>
        </div>
      #+end_src
       
        移动设备、平板、桌面端的不同表现：
        #+begin_src html
        <div class="layui-row">
          <div class="layui-col-xs6 layui-col-sm6 layui-col-md4">
            移动：6/12 | 平板：6/12 | 桌面：4/12
          </div>
          <div class="layui-col-xs6 layui-col-sm6 layui-col-md4">
            移动：6/12 | 平板：6/12 | 桌面：4/12
          </div>
          <div class="layui-col-xs4 layui-col-sm12 layui-col-md4">
            移动：4/12 | 平板：12/12 | 桌面：4/12
          </div>
          <div class="layui-col-xs4 layui-col-sm7 layui-col-md8">
            移动：4/12 | 平板：7/12 | 桌面：8/12
          </div>
          <div class="layui-col-xs4 layui-col-sm5 layui-col-md4">
            移动：4/12 | 平板：5/12 | 桌面：4/12
          </div>
        </div>
      </div>
        #+end_src
          
**** 响应式公共类：
   | 类名（class）             | 说明                                                        |
   | layui-show-*-block        | 定义不同设备下的 display: block; * 可选值有：xs、sm、md、lg |
   | layui-show-*-inline       | 定义不同设备下的 display: inline; * 可选值同上              |
   | layui-show-*-inline-block | 定义不同设备下的 display: inline-block; * 可选值同上        |
   | layui-hide-*              | 定义不同设备下的隐藏类，即： display: none; * 可选值同上    |
**** 列间距 space+ 数字
     <div class="layui-row layui-col-space10">

** layui 颜色设计感
*** 常用主色
  - #009688 通常用于按钮、及任何修饰元素
  - #5FB878 一般用于选中状态
  - #393D49 通常用于导航
  - #1E9FFF 比较适合一些鲜艳色系的页面

  layui
  主要是以象征包容的墨绿作为主色调，由于它给人以深沉感，所以通常会以浅黑色的作为其陪衬，又会以蓝色这种比较鲜艳的色调来弥补它的色觉疲劳，整体让人清新自然，愈发耐看。【取色意义】：我们执着于务实，不盲目攀比，又始终不忘绽放活力。这正是
  layui 所追求的价值。


  - 场景色
  -  #FFB800
     暖色系，一般用于提示性元素

  -  #FF5722

     比较引人注意的颜色

  -  #01AAED

     用于文字着色，如链接文本

  -  #2F4056

     侧边或底部普遍采用的颜色

  事实上，layui
  并非不敢去尝试一些亮丽的颜色，但许多情况下一个它可能并不是那么合适，所以我们把这些颜色归为“场景色”，即按照实际场景来呈现对应的颜色，比如你想给人以警觉感，可以尝试用上面的红色。他们一般会出现在
  layui 的按钮、提示和修饰性元素，以及一些侧边元素上。


  - 极简中性色



  他们一般用于背景、边框等

  -  #F0F0F0

  -  #f2f2f2

  -  #eeeeee

  -  #e2e2e2

  -  #dddddd

  -  #d2d2d2

  -  #c2c2c2

  layui
  认为灰色系代表极简，因为这是一种神奇的颜色，几乎可以与任何元素搭配，不易形成视觉疲劳，且永远不会过时。低调而优雅！


  - 内置的背景色 CSS 类


  layui 内置了七种背景色，以便你用于各种元素中，如：徽章、分割线、导航等等


  -  赤色：class="layui-bg-red"
  -  橙色：class="layui-bg-orange"
  -  墨绿：class="layui-bg-green"
  -  藏青：class="layui-bg-cyan"
  -  蓝色：class="layui-bg-blue"
  -  雅黑：class="layui-bg-black"
  -  银灰：class="layui-bg-gray"

  - 结语



  “不热衷于视觉设计的程序猿不是一个好作家！” ------贤心






  --------------

  [[https://www.layui.com/doc/element/color.html]]

  
  











  --------------

** 字体图标
 layui 的所有图标全部采用字体形式，取材于阿里巴巴矢量图标库（iconfont）。因此你可以把一个 icon 看作是一个普通的文字，这意味着你直接用 css 控制文字属性，如 color、font-size，就可以改变图标的颜色和大小。你可以通过 /font-class/ 或 /unicode/ 来定义不同的图标。

*** 使用方式
  通过对一个内联元素（一般推荐用 /i/标签）设定 /class="layui-icon"/，来定义一个图标，然后对元素加上图标对应的 /font-class/（注意：layui 2.3.0 之前只支持采用 /unicode 字符/)，即可显示出你想要的图标，譬如：

 
      从 layui 2.3.0 开始，支持 font-class 的形式定义图标：
      <i class="layui-icon layui-icon-face-smile"></i>   
            注意：在 layui 2.3.0 之前的版本，只能设置 unicode 来定义图标
      <i class="layui-icon">&#xe60c;</i>   
      其中的 &#xe60c; 即是图标对应的 unicode 字符
           


  你可以去定义它的颜色或者大小，如： <i class="layui-icon
  layui-icon-face-smile" style="font-size: 30px; color: #1E9FFF;"></i>

  
*** 内置图标一览表（168 个）
*** 跨域问题的解决
    由于浏览器存在同源策略，所以如果 layui（里面含图标字体文件）所在的地址与你当前的页面地址不在同一个域下，即会出现图标跨域问题。所以要么你就把
    layui 与网站放在同一服务器，要么就对 layui 所在的资源服务器的 Response Headers 加上属性：Access-Control-Allow-Origin: *
** CSS3 动画类

 #+BEGIN_QUOTE
   在实用价值的前提之下，我们并没有内置过多花俏的动画。而他们同样在 layui
   的许多交互元素中，发挥着重要的作用。layui 的动画全部采用
   CSS3，因此不支持 ie8 和部分不支持 ie9（即 ie8/9 无动画）
 #+END_QUOTE






 - 使用方式


 动画的使用非常简单，直接对元素赋值动画特定的 class 类名即可。如：

 
     其中 layui-anim 是必须的，后面跟着的即是不同的动画类
     <div class="layui-anim layui-anim-up"></div>
     
     循环动画，追加：layui-anim-loop
     <div class="layui-anim layui-anim-up layui-anim-loop"></div>
          



 - 内置 CSS3 动画一览表


 下面是不同的动画类名，数量可能有点少的样子？但正如开头所讲的，拒绝冗余花俏，拥抱精简实用。/点击下述绿色块，可直接预览动画/


 -  


     


    从最底部往上滑入


  



     


    layui-anim-up


  


 -  


     


    微微往上滑入


  



     


    layui-anim-upbit


  


 -  


     


    平滑放大


  



     


    layui-anim-scale


  


 -  


 


    弹簧式放大


  



 


    layui-anim-scaleSpring


  


 -  


 


    渐现


  



 


    layui-anim-fadein


  


 -  


 


    渐隐


  



 


    layui-anim-fadeout


  


 -  


 


    360 度旋转


  



 


    layui-anim-rotate


  


 -  


 
      data-anim="layui-anim-rotate layui-anim-loop">


    循环动画


  



 


    追加：layui-anim-loop


  


 - 结语


 物不在多，有用则精。






 --------------

 [[https://www.layui.com/doc/element/anim.html]]

 
 











 --------------

** 按钮 
   向任意 HTML 元素设定/class="layui-btn"/，建立一个基础按钮。通过追加格式为/layui-btn-{type}/的 class 来定义其它按钮风格。内置的按钮 class 可以进行任意组合，从而形成更多种按钮风格。

*** 用法
    <button type="button" class="layui-btn">一个标准的按钮</button>
     <a href="http://www.layui.com" class="layui-btn">一个可跳转的按钮</a>
          



 - 主题




 原始按钮



 默认按钮



 百搭按钮



 暖色按钮



 警告按钮



 禁用按钮



 | 名称   | 组合                                   |
 |--------+----------------------------------------|
 | 原始   | class="layui-btn layui-btn-primary"    |
 | 默认   | class="layui-btn"                      |
 | 百搭   | class="layui-btn layui-btn-normal"     |
 | 暖色   | class="layui-btn layui-btn-warm"       |
 | 警告   | class="layui-btn layui-btn-danger"     |
 | 禁用   | class="layui-btn layui-btn-disabled"   |


 - 尺寸




 大型按钮



 默认按钮



 小型按钮



 迷你按钮



 | 尺寸   | 组合                             |
 |--------+----------------------------------|
 | 大型   | class="layui-btn layui-btn-lg"   |
 | 默认   | class="layui-btn"                |
 | 小型   | class="layui-btn layui-btn-sm"   |
 | 迷你   | class="layui-btn layui-btn-xs"   |


 大型百搭



 正常暖色



 小型警告



 禁用



 | 尺寸       | 组合                                                |
 |------------+-----------------------------------------------------|
 | 大型百搭   | class="layui-btn layui-btn-lg layui-btn-normal"     |
 | 正常暖色   | class="layui-btn layui-btn-warm"                    |
 | 小型警告   | class="layui-btn layui-btn-sm layui-btn-danger"     |
 | 迷你禁用   | class="layui-btn layui-btn-xs layui-btn-disabled"   |


 流体按钮（最大化适应）




 



 流体按钮（最大化适应）



 
          
     <button type="button" class="layui-btn layui-btn-fluid">流体按钮（最大化适应）</button>
          



 - 圆角




 原始按钮



 默认按钮



 百搭按钮



 暖色按钮



 警告按钮



 禁用按钮



 | 主题   | 组合                                                    |
 |--------+---------------------------------------------------------|
 | 原始   | class="layui-btn layui-btn-radius layui-btn-primary"    |
 | 默认   | class="layui-btn layui-btn-radius"                      |
 | 百搭   | class="layui-btn layui-btn-radius layui-btn-normal"     |
 | 暖色   | class="layui-btn layui-btn-radius layui-btn-warm"       |
 | 警告   | class="layui-btn layui-btn-radius layui-btn-danger"     |
 | 禁用   | class="layui-btn layui-btn-radius layui-btn-disabled"   |


 大型百搭



 小型警告



 迷你禁用



 | 尺寸       | 组合                                                                 |
 |------------+----------------------------------------------------------------------|
 | 大型百搭   | class="layui-btn layui-btn-lg layui-btn-radius layui-btn-normal"     |
 | 小型警告   | class="layui-btn layui-btn-sm layui-btn-radius layui-btn-danger"     |
 | 迷你禁用   | class="layui-btn layui-btn-xs layui-btn-radius layui-btn-disabled"   |

 哈哈哈哈哈，这组合名长得简直没朋友~
 [[file:res.layui.com/layui/dist/images/face/2.gif]]
 [[file:res.layui.com/layui/dist/images/face/38.gif]]


 - 图标




 // 添加



 /ဂ/



 //



 //



 //



 //



 //




 /ဂ/



 //



 //



 //



 //



 //



 /ဂ/



 //



 //



 //



 //



 
     <button type="button" class="layui-btn">
       <i class="layui-icon">&#xe608;</i> 添加
     </button>
     
     <button type="button" class="layui-btn layui-btn-sm layui-btn-primary">
       <i class="layui-icon">&#x1002;</i>
     </button>
          


 温馨提示：各种图标字体请移步文档左侧【页面元素 - 图标】阅览


 - 按钮组




 增加



 编辑



 删除




 //



 //



 //



 //




 //



 //



 //



 将按钮放入一个/class="layui-btn-group"/元素中，即可形成按钮组，按钮本身仍然可以随意搭配

 
     <div class="layui-btn-group">
       <button type="button" class="layui-btn">增加</button>
       <button type="button" class="layui-btn">编辑</button>
       <button type="button" class="layui-btn">删除</button>
     </div>
          
     <div class="layui-btn-group">
       <button type="button" class="layui-btn layui-btn-sm">
         <i class="layui-icon">&#xe654;</i>
       </button>
       <button type="button" class="layui-btn layui-btn-sm">
         <i class="layui-icon">&#xe642;</i>
       </button>
       <button type="button" class="layui-btn layui-btn-sm">
         <i class="layui-icon">&#xe640;</i>
       </button>
       <button type="button" class="layui-btn layui-btn-sm">
         <i class="layui-icon">&#xe602;</i>
       </button>
     </div>
     
     <div class="layui-btn-group">
       <button type="button" class="layui-btn layui-btn-primary layui-btn-sm">
         <i class="layui-icon">&#xe654;</i>
       </button>
       <button type="button" class="layui-btn layui-btn-primary layui-btn-sm">
         <i class="layui-icon">&#xe642;</i>
       </button>
       <button type="button" class="layui-btn layui-btn-primary layui-btn-sm">
         <i class="layui-icon">&#xe640;</i>
       </button>
     </div>
          



 - 按钮容器


 尽管按钮在同节点并排时会自动拉开间距，但在按钮太多的情况，效果并不是很美好。因为你需要用到按钮容器



 按钮一



 按钮二



 按钮三



 按钮四



 按钮五



 按钮六



 按钮一



 按钮二



 按钮三



 按钮四



 按钮五



 按钮六



 按钮一



 按钮二



 按钮三



 按钮四



 按钮五



 按钮六



 按钮一



 按钮二



 
     <div class="layui-btn-container">
       <button type="button" class="layui-btn">按钮一</button> 
       <button type="button" class="layui-btn">按钮二</button> 
       <button type="button" class="layui-btn">按钮三</button> 
     </div>
        


 - 结语



 你是否发现，主题、尺寸、图标、圆角的交叉组合，可以形成难以计算的按钮种类。另外，你可能最关注的是配色，Layui 内置的六种主题的按钮颜色都是业界常用的标准配色，如果他们仍然无法与你的网站契合，那么请先允许我“噗”一声。。。然后你就大胆地自撸一个颜色吧！比如：/粉红色/或者/菊花色/（一个有味道的颜色）






 --------------












 --------------

** 表单 
   在一个容器中设定 class="layui-form" 来标识一个表单元素块，通过规范好的 HTML 结构及 CSS 类，来组装成各式各样的表单元素，并通过内置的
   form 模块来完成各种交互。

 #+BEGIN_QUOTE
   依赖加载模块：[[https://www.layui.com/doc/modules/form.html][form]] （请注意：如果不加载 form 模块，select、checkbox、radio 等将无法显示，并且无法使用 form 相关功能）
 #+END_QUOTE

*** 小睹为快

 #+begin_src html
      <form class="layui-form" action="">
        <div class="layui-form-item">
          <label class="layui-form-label">输入框</label>
          <div class="layui-input-block">
            <input type="text" name="title" required  lay-verify="required" placeholder="请输入标题" autocomplete="off" class="layui-input">
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">密码框</label>
          <div class="layui-input-inline">
            <input type="password" name="password" required lay-verify="required" placeholder="请输入密码" autocomplete="off" class="layui-input">
          </div>
          <div class="layui-form-mid layui-word-aux">辅助文字</div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">选择框</label>
          <div class="layui-input-block">
            <select name="city" lay-verify="required">
              <option value=""></option>
              <option value="0">北京</option>
              <option value="1">上海</option>
              <option value="2">广州</option>
              <option value="3">深圳</option>
              <option value="4">杭州</option>
            </select>
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">复选框</label>
          <div class="layui-input-block">
            <input type="checkbox" name="like[write]" title="写作">
            <input type="checkbox" name="like[read]" title="阅读" checked>
            <input type="checkbox" name="like[dai]" title="发呆">
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">开关</label>
          <div class="layui-input-block">
            <input type="checkbox" name="switch" lay-skin="switch">
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">单选框</label>
          <div class="layui-input-block">
            <input type="radio" name="sex" value="男" title="男">
            <input type="radio" name="sex" value="女" title="女" checked>
          </div>
        </div>
        <div class="layui-form-item layui-form-text">
          <label class="layui-form-label">文本域</label>
          <div class="layui-input-block">
            <textarea name="desc" placeholder="请输入内容" class="layui-textarea"></textarea>
          </div>
        </div>
        <div class="layui-form-item">
          <div class="layui-input-block">
            <button class="layui-btn" lay-submit lay-filter="formDemo">立即提交</button>
            <button type="reset" class="layui-btn layui-btn-primary">重置</button>
          </div>
        </div>
      </form>
     
      <script>
      //Demo
      layui.use('form', function(){
        var form = layui.form;
      
        //监听提交
        form.on('submit(formDemo)', function(data){
          layer.msg(JSON.stringify(data.field));
          return false;
        });
      });
      </script>
 #+end_src
          
  UI 的最终呈现得益于 Form 模块的全自动渲染，她将原本普通的诸如 select、checkbox、radio 等元素重置为你所看到的模样。或许你可以移步左侧导航的
  /内置模块/ 中的 /表单/ 对其进行详细的了解。

  #+BEGIN_QUOTE
    而本篇介绍的是表单元素本身，譬如规定的区块、CSS 类、原始控件等。他们共同组成了一个表单体系。
  #+END_QUOTE

  下述是基本的行区块结构，它提供了响应式的支持。但如果你不大喜欢，你可以换成你的结构，但必须要在外层容器中定义/class="layui-form"/，form 模块才能正常工作。

 
      <div class="layui-form-item">
        <label class="layui-form-label">标签区域</label>
        <div class="layui-input-block">
          原始表单元素区域
        </div>
      </div>
          


*** 输入框

      #+begin_src html
        <input type="text" name="title" required lay-verify="required" placeholder="请输入标题" autocomplete="off" class="layui-input">    
      #+end_src
      
      required：注册浏览器所规定的必填字段
      lay-verify：注册 form 模块需要验证的类型
      class="layui-input"：layui.css 提供的通用 CSS 类

*** 下拉选择框
      #+begin_src html
      <select name="city" lay-verify="">
        <option value="">请选择一个城市</option>
        <option value="010">北京</option>
        <option value="021">上海</option>
        <option value="0571">杭州</option>
      </select>     
      #+end_src
          
  上述 option 的第一项主要是占个坑，让 form 模块预留“请选择”的提示空间，否则将会把第一项（存在 value 值）作为默认选中项。你可以在 option 的空值项中自定义文本，如：请选择分类。

  你可以通过设定 /selected/ 来设定默认选中项：
      #+begin_src html
      <select name="city" lay-verify="">
        <option value="010">北京</option>
        <option value="021" disabled>上海（禁用效果）</option>
        <option value="0571" selected>杭州</option>
      </select>     
      #+end_src
          
  你还可以通过 /optgroup/ 标签给 select 分组：

      #+begin_src html
      <select name="quiz">
        <option value="">请选择</option>
        <optgroup label="城市记忆">
          <option value="你工作的第一个城市">你工作的第一个城市？</option>
        </optgroup>
        <optgroup label="学生时代">
          <option value="你的工号">你的工号？</option>
          <option value="你最喜欢的老师">你最喜欢的老师？</option>
        </optgroup>
      </select>
      #+end_src
          
  以及通过设定属性 /lay-search/ 来开启搜索匹配功能

 
      #+begin_src html
      <select name="city" lay-verify="" lay-search>
        <option value="010">layer</option>
        <option value="021">form</option>
        <option value="0571" selected>layim</option>
        ……
      </select>     
      #+end_src
          
    属性selected可设定默认项
    属性disabled开启禁用，select 和 option 标签都支持

*** 复选框
      默认风格：
      #+begin_src html
      <input type="checkbox" name="" title="写作" checked>
      <input type="checkbox" name="" title="发呆"> 
      <input type="checkbox" name="" title="禁用" disabled> 
      #+end_src
     
      原始风格：
      #+begin_src html
      <input type="checkbox" name="" title="写作" lay-skin="primary" checked>
      <input type="checkbox" name="" title="发呆" lay-skin="primary"> 
      <input type="checkbox" name="" title="禁用" lay-skin="primary" disabled> 
      #+end_src
          
  属性title可自定义文本（温馨提示：如果只想显示复选框，可以不用设置 title）
  属性checked可设定默认选中
  属性lay-skin可设置复选框的风格
  设置value="1"可自定义值，否则选中时返回的就是默认的 on

*** 开关
    其实就是 checkbox 复选框的“变种”，通过设定 lay-skin="switch" 形成了开关风格

      #+begin_src html
      <input type="checkbox" name="xxx" lay-skin="switch">
      <input type="checkbox" name="yyy" lay-skin="switch" lay-text="ON|OFF" checked>
      <input type="checkbox" name="zzz" lay-skin="switch" lay-text="开启|关闭">
      <input type="checkbox" name="aaa" lay-skin="switch" disabled>
      #+end_src
          
      属性checked可设定默认开
      属性disabled开启禁用
      属性lay-text可自定义开关两种状态的文本
      设置value="1"可自定义值，否则选中时返回的就是默认的 on

*** 单选框
#+begin_src html
      <input type="radio" name="sex" value="nan" title="男">
      <input type="radio" name="sex" value="nv" title="女" checked>
      <input type="radio" name="sex" value="" title="中性" disabled>
#+end_src
          
  属性title可自定义文本
  属性disabled开启禁用
  设置value="xxx"可自定义值，否则选中时返回的就是默认的 on

*** 文本域
    #+begin_src html
      <textarea name="" required lay-verify="required" placeholder="请输入" class="layui-textarea"></textarea>
    #+end_src

    class="layui-textarea"：layui.css 提供的通用 CSS 类

*** 组装行内表单

    #+begin_src html
      <div class="layui-form-item">

        <div class="layui-inline">
          <label class="layui-form-label">范围</label>
          <div class="layui-input-inline" style="width: 100px;">
            <input type="text" name="price_min" placeholder="￥" autocomplete="off" class="layui-input">
          </div>
          <div class="layui-form-mid">-</div>
          <div class="layui-input-inline" style="width: 100px;">
            <input type="text" name="price_max" placeholder="￥" autocomplete="off" class="layui-input">
          </div>
        </div>

        <div class="layui-inline">
          <label class="layui-form-label">密码</label>
          <div class="layui-input-inline" style="width: 100px;">
            <input type="password" name="" autocomplete="off" class="layui-input">
          </div>
        </div>

      </div>
    #+end_src
          
    class="layui-inline"：定义外层行内
    class="layui-input-inline"：定义内层行内

*** 忽略美化渲染

    你可以对表单元素增加属性 lay-ignore 设置后，将不会对该标签进行美化渲染，即保留系统风格，比如：

    #+begin_src html
      <select lay-ignore>
        <option>…</option>
      </select>
    #+end_src
          
    一般不推荐这样做。事实上 form 组件所提供的接口，对其渲染过的元素，足以应付几乎所有的业务需求。如果忽略渲染，可能会让 UI 风格不和谐

*** 表单方框风格
    通过追加 layui-form-pane 的 class，来设定表单的方框风格。内部结构不变。我们的 Fly 社区用的就是这个风格。

    #+begin_src html

      <form class="layui-form layui-form-pane" action="">
        内部结构都一样，值得注意的是 复选框/开关/单选框 这些组合在该风格下需要额外添加 pane属性（否则会看起来比较别扭），如：
        <div class="layui-form-item" pane>
          <label class="layui-form-label">单选框</label>
          <div class="layui-input-block">
            <input type="radio" name="sex" value="男" title="男">
            <input type="radio" name="sex" value="女" title="女" checked>
          </div>
        </div>
      </form>
    #+end_src
          
** 导航

   导航一般指页面引导性频道集合，多以菜单的形式呈现，可应用于头部和侧边，是整个网页画龙点晴般的存在。面包屑结构简单，支持自定义分隔符。千万不要忘了加载
   /element/模块。虽然大部分行为都是在加载完该模块后自动完成的，但一些交互操作，如呼出二级菜单等，需借助 element 模块才能使用。你可以移步文档左侧【内置模块
   - 常用元素操作 element】了解详情
 
 #+BEGIN_QUOTE
   依赖加载模块：[[https://www.layui.com/doc/modules/element.html][element]]
 #+END_QUOTE

*** 水平导航

     #+begin_src html
     <ul class="layui-nav" lay-filter="">
       <li class="layui-nav-item"><a href="">最新活动</a></li>
       <li class="layui-nav-item layui-this"><a href="">产品</a></li>
       <li class="layui-nav-item"><a href="">大数据</a></li>
       <li class="layui-nav-item">
         <a href="javascript:;">解决方案</a>
         <dl class="layui-nav-child"> <!-- 二级菜单 -->
           <dd><a href="">移动模块</a></dd>
           <dd><a href="">后台模版</a></dd>
           <dd><a href="">电商平台</a></dd>
         </dl>
       </li>
       <li class="layui-nav-item"><a href="">社区</a></li>
     </ul>
     
     <script>
     //注意：导航 依赖 element 模块，否则无法进行功能性操作
     layui.use('element', function(){
       var element = layui.element;
      
       //…
     });
     </script>
     #+end_src
          
     设定layui-this来指向当前页面分类。

*** 导航中的其它元素
 除了一般的文字导航，我们还内置了图片和徽章的支持，如：
 
     #+begin_src html
     <ul class="layui-nav">
       <li class="layui-nav-item">
         <a href="">控制台<span class="layui-badge">9</span></a>
       </li>
       <li class="layui-nav-item">
         <a href="">个人中心<span class="layui-badge-dot"></span></a>
       </li>
       <li class="layui-nav-item">
         <a href=""><img src="//t.cn/RCzsdCq" class="layui-nav-img">我</a>
         <dl class="layui-nav-child">
           <dd><a href="javascript:;">修改信息</a></dd>
           <dd><a href="javascript:;">安全管理</a></dd>
           <dd><a href="javascript:;">退了</a></dd>
         </dl>
       </li>
     </ul>
     #+end_src
          
 
*** 通过对导航追加 CSS 背景类，让导航呈现不同的主题色

     #+begin_src html
     //如定义一个墨绿背景色的导航
     <ul class="layui-nav layui-bg-green" lay-filter="">
       …
     </ul>      
     #+end_src
          
 水平导航支持的其它背景主题有：layui-bg-cyan（藏青）、layui-bg-molv（墨绿）、layui-bg-blue（艳蓝）
 垂直导航支持的其它背景主题有：layui-bg-cyan（藏青）

*** 垂直/侧边导航
     #+begin_src html
     <ul class="layui-nav layui-nav-tree" lay-filter="test">
     <!-- 侧边导航: <ul class="layui-nav layui-nav-tree layui-nav-side"> -->
       <li class="layui-nav-item layui-nav-itemed">
         <a href="javascript:;">默认展开</a>
         <dl class="layui-nav-child">
           <dd><a href="javascript:;">选项1</a></dd>
           <dd><a href="javascript:;">选项2</a></dd>
           <dd><a href="">跳转</a></dd>
         </dl>
       </li>
       <li class="layui-nav-item">
         <a href="javascript:;">解决方案</a>
         <dl class="layui-nav-child">
           <dd><a href="">移动模块</a></dd>
           <dd><a href="">后台模版</a></dd>
           <dd><a href="">电商平台</a></dd>
         </dl>
       </li>
       <li class="layui-nav-item"><a href="">产品</a></li>
       <li class="layui-nav-item"><a href="">大数据</a></li>
     </ul>
     #+end_src
          
 水平、垂直、侧边三个导航的 HTML 结构是完全一样的，不同的是：

 垂直导航需要追加 class：layui-nav-tree
 侧边导航需要追加 class：layui-nav-tree layui-nav-side

*** 导航可选属性


 对导航元素结构设定可选属性，可让导航菜单项达到不同效果。目前支持的属性如下：

 | 属性名         | 可选值                      | 说明                                                                          |
 |----------------+-----------------------------+-------------------------------------------------------------------------------|
 | lay-shrink     | -  /空值/（默认）         | 展开子菜单时，是否收缩兄弟节点已展开的子菜单 （注：layui 2.2.6 开始新增）   |
 |                |    不收缩兄弟菜单子菜单     | 如：/<ul class="layui-nav layui-nav-tree" lay-shrink="all"> ... </ul>/        |
 |                | -  /all/                  |                                                                               |
 |                |    收缩全部兄弟菜单子菜单   |                                                                               |
 | lay-unselect   | 无需填值                    | 点击指定导航菜单时，不会出现选中效果（注：layui 2.2.0 开始新增）            |
 |                |                             | 如：/<li class="layui-nav-item" lay-unselect>刷新</li>/                       |


*** 面包屑

     #+begin_src html
     <span class="layui-breadcrumb">
       <a href="">首页</a>
       <a href="">国际新闻</a>
       <a href="">亚太地区</a>
       <a><cite>正文</cite></a>
     </span>
     #+end_src
          
 你还可以通过设置属性 lay-separator="-" 来自定义分隔符。如：
 
     #+begin_src html
     <span class="layui-breadcrumb" lay-separator="-">
       <a href="">首页</a>
       <a href="">国际新闻</a>
       <a href="">亚太地区</a>
       <a><cite>正文</cite></a>
     </span>
     #+end_src
          


 当然，你还可以作为小导航来用，如：
     #+begin_src html
     <span class="layui-breadcrumb" lay-separator="|">
       <a href="">娱乐</a>
       <a href="">八卦</a>
       <a href="">体育</a>
       <a href="">搞笑</a>
       <a href="">视频</a>
       <a href="">游戏</a>
       <a href="">综艺</a>
     </span>
     #+end_src
          
** Tab 选项卡 

 #+BEGIN_QUOTE
   导航菜单可应用于头部和侧边，Tab 选项卡提供多套风格，支持响应式，支持删除选项卡等功能。面包屑结构简单，支持自定义分隔符。
 #+END_QUOTE

 #+BEGIN_QUOTE
   依赖加载组件：[[https://www.layui.com/doc/modules/element.html][element]]
   （请注意：必须加载 element 模块，相关功能才能正常使用，详见：内置组件 -
   常用元素操作）
 #+END_QUOTE






 - 默认 Tab 选项卡



 Tab 广泛应用于 Web 页面，因此我们也对其进行了良好的支持。Layui 内置多种 Tab 风格，支持删除选项卡、并提供响应式支持。
 这是一个最基本的例子：


   <div class="layui-tab">


 -  网站设置
 -  用户管理
 -  权限分配
 -  商品管理
 -  订单管理

 #+BEGIN_QUOTE
   如果需要对 Tab 进行外部新增、删除、切换等操作，请移步到“内置组件-常用元素操作”页面中查阅：基础方法
 #+END_QUOTE


 内容 2


 内容 3


 内容 4


 内容 5




 
     <div class="layui-tab">
       <ul class="layui-tab-title">
         <li class="layui-this">网站设置</li>
         <li>用户管理</li>
         <li>权限分配</li>
         <li>商品管理</li>
         <li>订单管理</li>
       </ul>
       <div class="layui-tab-content">
         <div class="layui-tab-item layui-show">内容1</div>
         <div class="layui-tab-item">内容2</div>
         <div class="layui-tab-item">内容3</div>
         <div class="layui-tab-item">内容4</div>
         <div class="layui-tab-item">内容5</div>
       </div>
     </div>
     
     <script>
     //注意：选项卡 依赖 element 模块，否则无法进行功能性操作
     layui.use('element', function(){
       var element = layui.element;
      
       //…
     });
     </script>
          



 - Tab 简洁风格




   <div class="layui-tab1" lay-filter="docDemoTabBrief">


 -  网站设置
 -  用户管理
 -  权限分配
 -  商品管理
 -  订单管理


 
     <div class="layui-tab layui-tab-brief" lay-filter="docDemoTabBrief">
       <ul class="layui-tab-title">
         <li class="layui-this">网站设置</li>
         <li>用户管理</li>
         <li>权限分配</li>
         <li>商品管理</li>
         <li>订单管理</li>
       </ul>
       <div class="layui-tab-content"></div>
     </div>      
          


 通过追加 class：/layui-tab-brief/ 来设定简洁风格。
 值得注意的是，如果存在 /layui-tab-item/
 的内容区域，在切换时自动定位到对应内容。如果不存在内容区域，则不会定位到对应内容。你通常需要设置过滤器，通过
 /element/模块的监听 tab 事件来进行切换操作。详见文档左侧【内置组件 -
 基本元素操作 element】


 - Tab 卡片风格



 -  网站设置
 -  用户管理
 -  权限分配
 -  商品管理
 -  订单管理


   <div class="layui-tab-content">


 1


 2


 3


 4


 5


 6




 
     <div class="layui-tab layui-tab-card">
       <ul class="layui-tab-title">
         <li class="layui-this">网站设置</li>
         <li>用户管理</li>
         <li>权限分配</li>
         <li>商品管理</li>
         <li>订单管理</li>
       </ul>
       <div class="layui-tab-content" style="height: 100px;">
         <div class="layui-tab-item layui-show">1</div>
         <div class="layui-tab-item">2</div>
         <div class="layui-tab-item">3</div>
         <div class="layui-tab-item">4</div>
         <div class="layui-tab-item">5</div>
         <div class="layui-tab-item">6</div>
       </div>
     </div>
          


 通过追加 class：/layui-tab-card/来设定卡片风格


 - Tab 响应式



 当容器的宽度不足以显示全部的选项时，即会自动出现展开图标，如下以卡片风格为例（注意：所有 Tab 风格都支持响应式）：


 



   <div class="layui-tab2">


 -  网站设置
 -  用户管理
 -  权限分配
 -  商品管理
 -  订单管理


   <div class="layui-tab-content">


 1


 2


 3


 4


 5


 6





 额，感觉像是打了个小酱油。而事实上在自适应的页面中（不固宽），它的意义才会呈现。


 - 带删除的 Tab



 你可以对父层容器设置属性 /lay-allowClose="true"/ 来允许 Tab 选项卡被删除


   <div class="layui-tab3" lay-allowclose="true">


 -  网站设置
 -  用户基本管理
 -  权限分配
 -  全部历史商品管理文字长一点试试
 -  订单管理

 1


 2


 3


 4


 5


 6




 
     <div class="layui-tab" lay-allowClose="true">
       <ul class="layui-tab-title">
         <li class="layui-this">网站设置</li>
         <li>用户基本管理</li>
         <li>权限分配</li>
         <li>全部历史商品管理文字长一点试试</li>
         <li>订单管理</li>
       </ul>
       <div class="layui-tab-content">
         <div class="layui-tab-item layui-show">1</div>
         <div class="layui-tab-item">2</div>
         <div class="layui-tab-item">3</div>
         <div class="layui-tab-item">4</div>
         <div class="layui-tab-item">5</div>
         <div class="layui-tab-item">6</div>
       </div>
     </div>
          


 与默认相比没有什么特别的结构，就是多了个属性 /lay-allowClose="true"/


 - ID 焦点定位



 你可以通过对选项卡设置属性 /lay-id="xxx"/
 来作为唯一的匹配索引，以用于外部的定位切换，如后台的左侧导航、以及页面地址
 hash 的匹配。

 
     <div class="layui-tab" lay-filter="test1">
       <ul class="layui-tab-title">
         <li class="layui-this" lay-id="111" >文章列表</li>
         <li lay-id="222">发送信息</li>
         <li lay-id="333">权限分配</li>
         <li lay-id="444">审核</li>
         <li lay-id="555">订单管理</li>
       </ul>
       <div class="layui-tab-content">
         <div class="layui-tab-item layui-show">1</div>
         <div class="layui-tab-item">2</div>
         <div class="layui-tab-item">3</div>
         <div class="layui-tab-item">4</div>
         <div class="layui-tab-item">5</div>
       </div>
     </div>
          


 属性 lay-id 是扮演这项功能的主要角色，它是动态操作的重要凭据，如：

 
     <script>
     layui.use('element', function(){
       var element = layui.element;
      
       //获取hash来切换选项卡，假设当前地址的hash为lay-id对应的值
       var layid = location.hash.replace(/^#test1=/, '');
       element.tabChange('test1', layid); //假设当前地址为：http://a.com#test1=222，那么选项卡会自动切换到“发送消息”这一项
      
       //监听Tab切换，以改变地址hash值
       element.on('tab(test1)', function(){
         location.hash = 'test1='+ this.getAttribute('lay-id');
       });
     });
     </script>      
          


 同样的还有增加选项卡和删除选项卡，都需要用到
 lay-id，更多动态操作请阅读：[[https://www.layui.com/doc/modules/element.html][element模块]]


 - 提示



 无论是导航、还是 Tab，都需依赖
 /element/模块，大部分行为都是在加载完该模块后自动完成的，但一些交互操作，如 Tab 事件监听等，需按照场景选择性使用。你可以移步文档左侧【内置组件
 - 基本元素操作 element】了解详情






 --------------

 [[https://www.layui.com/doc/element/tab.html]]

 
 











 --------------

** 进度条 

 #+BEGIN_QUOTE
   进度条可应用于许多业务场景，如任务完成进度、loading 等等，是一种较为直观的表达元素。
 #+END_QUOTE

 #+BEGIN_QUOTE
   依赖加载组件：[[https://www.layui.com/doc/modules/element.html][element]]
 #+END_QUOTE






 - 常规用法




 




 


 




 


 



 




 


 



 




 
 我们进度条提供了两种尺寸及多种颜色的显示风格，其中颜色的选值可参考：[[https://www.layui.com/doc/base/element.html#css][背景色公共类]]。基本元素结构如下

 
     <div class="layui-progress">
       <div class="layui-progress-bar" lay-percent="10%"></div>
     </div>
     
     <script>
     //注意进度条依赖 element 模块，否则无法进行正常渲染和功能性操作
     layui.use('element', function(){
       var element = layui.element;
     });
     </script>
          


 属性 /lay-percent/
 ：代表进度条的初始百分比，你也可以动态改变进度，详见：[[https://www.layui.com/doc/modules/element.html#progress][进度条的动态操作]]

 正如上述你见到的，当对元素设置了 class 为 /layui-progress-big/
 时，即为大尺寸的进度条风格。默认风格的进度条的百分比如果开启，会在右上角显示，而大号进度条则会在内部显示。


 - 显示进度比文本




 



 




 
 


 



 




 


 



 




 
 通过对父级元素设置属性 /lay-showPercent="yes"/
 来开启进度比的文本显示，支持：/普通数字/、/百分数/、/分数/（layui 2.1.7
 新增）

 
     <div class="layui-progress" lay-showPercent="true">
       <div class="layui-progress-bar layui-bg-red" lay-percent="1/3"></div>
     </div>
           
     <div class="layui-progress" lay-showPercent="yes">
       <div class="layui-progress-bar layui-bg-red" lay-percent="30%"></div>
     </div>
     
     <div class="layui-progress layui-progress-big" lay-showPercent="yes">
       <div class="layui-progress-bar layui-bg-green" lay-percent="50%"></div>
     </div>
          


 注意：默认情况下不会显示百分比文本，如果你想开启，对属性 lay-showPercent 设置任意值即可，如：yes。但如果不想显示，千万别设置 no 或者 false，直接剔除该属性即可。


 - 大号进度条




 




 


 




 


 



 




 
 如果短小细长的它不大适合追求激情与视觉冲击的你，那么你完全可以选择大而粗，尽情地销魂于活塞运动。研究表明：上述尺寸刚刚好。

 
     <div class="layui-progress layui-progress-big">
       <div class="layui-progress-bar" lay-percent="20%"></div>
     </div>
     
     <div class="layui-progress layui-progress-big">
       <div class="layui-progress-bar layui-bg-orange" lay-percent="50%"></div>
     </div>
     
     <div class="layui-progress layui-progress-big" lay-showPercent="true">
       <div class="layui-progress-bar layui-bg-blue" lay-percent="80%"></div>
     </div>
          


 正如上述你见到的，当对元素设置了 class 为 layui-progress-big
 时，即为大尺寸的进度条风格。默认风格的进度条的百分比如果开启，会在右上角显示，而大号进度条则会在内部显示。

 如果你需要对进度条进行动态操作，如动态改变进度，那么你需要阅读：[[https://www.layui.com/doc/modules/element.html][element模块]]






 --------------

 [[https://www.layui.com/doc/element/progress.html]]

 
 











 --------------

** 面板 

 #+BEGIN_QUOTE
   一般的面板通常是指一个独立的容器，而折叠面板则能有效地节省页面的可视面积，非常适合应用于：QA 说明、帮助文档等
 #+END_QUOTE

 #+BEGIN_QUOTE
   依赖加载组件：[[https://www.layui.com/doc/modules/element.html][element]]
 #+END_QUOTE






 - 卡片面板




 


 卡片面板


 卡片式面板面板通常用于非白色背景色的主体内
 从而映衬出边框投影




 卡片面板


 结合 layui 的栅格系统
 轻松实现响应式布局






 
     <div class="layui-card">
       <div class="layui-card-header">卡片面板</div>
       <div class="layui-card-body">
         卡片式面板面板通常用于非白色背景色的主体内<br>
         从而映衬出边框投影
       </div>
     </div>
        


 如果你的网页采用的是默认的白色背景，不建议使用卡片面板。

 - 折叠面板



*** 杜甫
 
 


 杜甫的思想核心是儒家的仁政思想，他有“致君尧舜上，再使风俗淳”的宏伟抱负。杜甫虽然在世时名声并不显赫，但后来声名远播，对中国文学和日本文学都产生了深远的影响。杜甫共有约 1500 首诗歌被保留了下来，大多集于《杜工部集》。



*** 李清照
 
 


 李清照出生于书香门第，早期生活优裕，其父李格非藏书甚富，她小时候就在良好的家庭环境中打下文学基础。出嫁后与夫赵明诚共同致力于书画金石的搜集整理。金兵入据中原时，流寓南方，境遇孤苦。所作词，前期多写其悠闲生活，后期多悲叹身世，情调感伤。形式上善用白描手法，自辟途径，语言清丽。



*** 鲁迅
 
 


 鲁迅一生在文学创作、文学批评、思想研究、文学史研究、翻译、美术理论引进、基础科学介绍和古籍校勘与研究等多个领域具有重大贡献。他对于五四运动以后的中国社会思想文化发展具有重大影响，蜚声世界文坛，尤其在韩国、日本思想文化领域有极其重要的地位和影响，被誉为“二十世纪东亚文化地图上占最大领土的作家”。




 通过对内容元素设置 class 为 /layui-show/
 来选择性初始展开某一个面板，element 模块会自动呈现状态图标。

 
     <div class="layui-collapse">
       <div class="layui-colla-item">
         <h2 class="layui-colla-title">杜甫</h2>
         <div class="layui-colla-content layui-show">内容区域</div>
       </div>
       <div class="layui-colla-item">
         <h2 class="layui-colla-title">李清照</h2>
         <div class="layui-colla-content layui-show">内容区域</div>
       </div>
       <div class="layui-colla-item">
         <h2 class="layui-colla-title">鲁迅</h2>
         <div class="layui-colla-content layui-show">内容区域</div>
       </div>
     </div>
     
     <script>
     //注意：折叠面板 依赖 element 模块，否则无法进行功能性操作
     layui.use('element', function(){
       var element = layui.element;
      
       //…
     });
     </script>
          



 - 开启手风琴




 


*** 杜甫
 
 


 杜甫的思想核心是儒家的仁政思想，他有“致君尧舜上，再使风俗淳”的宏伟抱负。杜甫虽然在世时名声并不显赫，但后来声名远播，对中国文学和日本文学都产生了深远的影响。杜甫共有约 1500 首诗歌被保留了下来，大多集于《杜工部集》。



*** 李清照
 
 


 李清照出生于书香门第，早期生活优裕，其父李格非藏书甚富，她小时候就在良好的家庭环境中打下文学基础。出嫁后与夫赵明诚共同致力于书画金石的搜集整理。金兵入据中原时，流寓南方，境遇孤苦。所作词，前期多写其悠闲生活，后期多悲叹身世，情调感伤。形式上善用白描手法，自辟途径，语言清丽。



*** 鲁迅
 
 


 鲁迅一生在文学创作、文学批评、思想研究、文学史研究、翻译、美术理论引进、基础科学介绍和古籍校勘与研究等多个领域具有重大贡献。他对于五四运动以后的中国社会思想文化发展具有重大影响，蜚声世界文坛，尤其在韩国、日本思想文化领域有极其重要的地位和影响，被誉为“二十世纪东亚文化地图上占最大领土的作家”。




 在折叠面板的父容器设置属性 /lay-accordion/
 来开启手风琴，那么在进行折叠操作时，始终只会展现当前的面板。

 
     <div class="layui-collapse" lay-accordion>
       <div class="layui-colla-item">
         <h2 class="layui-colla-title">杜甫</h2>
         <div class="layui-colla-content layui-show">内容区域</div>
       </div>
       <div class="layui-colla-item">
         <h2 class="layui-colla-title">李清照</h2>
         <div class="layui-colla-content layui-show">内容区域</div>
       </div>
       <div class="layui-colla-item">
         <h2 class="layui-colla-title">鲁迅</h2>
         <div class="layui-colla-content layui-show">内容区域</div>
       </div>
     </div>
          







 --------------

 [[https://www.layui.com/doc/element/panel.html]]

 
 











 --------------

** 表格

 #+BEGIN_QUOTE
   本篇为你介绍表格的 HTML 使用，你将通过内置的自定义属性对其进行风格的多样化设定。/请注意：/这仅仅局限于呈现基础表格，如果你急切需要的是数据表格（/datatable/），那么你应该详细阅读：[[https://www.layui.com/doc/modules/table.html][table模块]]
 #+END_QUOTE






 - 常规用法


 | 昵称      | 加入时间     | 签名                                                                |
 |-----------+--------------+---------------------------------------------------------------------|
 | 贤心      | 2016-11-29   | 人生就像是一场修行                                                  |
 | 许闲心    | 2016-11-28   | 于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里...   |
 | sentsin   | 2016-11-27   | Life is either a daring adventure or nothing.                       |

 
     <table class="layui-table">
       <colgroup>
         <col width="150">
         <col width="200">
         <col>
       </colgroup>
       <thead>
         <tr>
           <th>昵称</th>
           <th>加入时间</th>
           <th>签名</th>
         </tr> 
       </thead>
       <tbody>
         <tr>
           <td>贤心</td>
           <td>2016-11-29</td>
           <td>人生就像是一场修行</td>
         </tr>
         <tr>
           <td>许闲心</td>
           <td>2016-11-28</td>
           <td>于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里…</td>
         </tr>
       </tbody>
     </table>
          



 - 基础属性


 静态表格支持以下基础属性，可定义不同风格/尺寸的表格样式：


 | 属性名              | 属性值                  | 备注                                         |
 |---------------------+-------------------------+----------------------------------------------|
 | lay-even            | 无                      | 用于开启 /隔行/ 背景，可与其它属性一起使用   |
 | lay-skin="属性值"   | line （行边框风格）   | 若使用默认风格不设置该属性即可               |
 |                     | row （列边框风格）    |                                              |
 |                     | nob （无边框风格）      |                                              |
 | lay-size="属性值"   | sm （小尺寸）         | 若使用默认尺寸不设置该属性即可               |
 |                     | lg （大尺寸）           |                                              |

 将你所需要的基础属性写在 table 标签上即可，如（一个带有隔行背景，且行边框风格的大尺寸表格）：


 
     <table lay-even lay-skin="line" lay-size="lg">
     …
     </table>
        


 - 表格其它风格


 除了默认的表格风格外，我们还提供了其它几种风格，你可以按照实际需求自由设定


 | 昵称      | 加入时间     | 签名                                                                |
 |-----------+--------------+---------------------------------------------------------------------|
 | 贤心      | 2016-11-29   | 人生就像是一场修行                                                  |
 | 许闲心    | 2016-11-28   | 于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里...   |
 | sentsin   | 2016-11-27   | Life is either a daring adventure or nothing.                       |

 | 昵称      | 加入时间     | 签名                                                                |
 |-----------+--------------+---------------------------------------------------------------------|
 | 贤心      | 2016-11-29   | 人生就像是一场修行                                                  |
 | 许闲心    | 2016-11-28   | 于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里...   |
 | sentsin   | 2016-11-27   | Life is either a daring adventure or nothing.                       |

 | 昵称      | 加入时间     | 签名                                                                |
 |-----------+--------------+---------------------------------------------------------------------|
 | 贤心      | 2016-11-29   | 人生就像是一场修行                                                  |
 | 许闲心    | 2016-11-28   | 于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里...   |
 | sentsin   | 2016-11-27   | Life is either a daring adventure or nothing.                       |

 
     <table class="layui-table" lay-skin="line">
       行边框表格（内部结构参见右侧目录“常规用法”）
     </table>
     
     <table class="layui-table" lay-skin="row">
       列边框表格（内部结构参见右侧目录“常规用法”）
     </table>
     
     <table class="layui-table" lay-even lay-skin="nob">
       无边框表格（内部结构参见右侧目录“常规用法”）
     </table>
          



 - 表格其它尺寸


 除了默认的表格尺寸外，我们还提供了其它几种尺寸，你可以按照实际需求自由设定


 | 昵称      | 加入时间     | 签名                                                                |
 |-----------+--------------+---------------------------------------------------------------------|
 | 贤心      | 2016-11-29   | 人生就像是一场修行                                                  |
 | 许闲心    | 2016-11-28   | 于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里...   |
 | sentsin   | 2016-11-27   | Life is either a daring adventure or nothing.                       |

 | 昵称      | 加入时间     | 签名                                                                |
 |-----------+--------------+---------------------------------------------------------------------|
 | 贤心      | 2016-11-29   | 人生就像是一场修行                                                  |
 | 许闲心    | 2016-11-28   | 于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里...   |
 | sentsin   | 2016-11-27   | Life is either a daring adventure or nothing.                       |

 
     <table class="layui-table" lay-size="sm">
       小尺寸表格（内部结构参见右侧目录“常规用法”）
     </table>
     
     <table class="layui-table" lay-size="lg">
       大尺寸表格（内部结构参见右侧目录“常规用法”）
     </table>
          



 - 结语


 再次温馨提醒：如果你需要对表格进行排序、数据交互等一系列功能性操作，你需要进一步阅读
 layui
 的重要组成：[[https://www.layui.com/doc/modules/table.html][table模块]]






 --------------

 [[https://www.layui.com/doc/element/table.html]]

 
 











 --------------

** 徽章

 #+BEGIN_QUOTE
   徽章是一个修饰性的元素，它们本身细小而并不显眼，但掺杂在其它元素中就显得尤为突出了。页面往往因徽章的陪衬，而显得十分和谐。
 #+END_QUOTE






 - 快速使用


 不妨先来看看 徽章 这个小小的大家族吧：

 #+BEGIN_QUOTE
   <<>> <<>> <<>> <<>> <<>> <<>> <<>> 6 99 61728 赤 橙 绿 青 蓝 黑 灰 6
   Hot
 #+END_QUOTE

 
 你可能已经敏锐地发现，除去花枝招展的七种颜色，徽章具有三种不同的风格类型：/小圆点/、/椭圆体/、/边框体/

 
          
     小圆点，通过 layui-badge-dot 来定义，里面不能加文字
     <span class="layui-badge-dot"></span>
     <span class="layui-badge-dot layui-bg-orange"></span>
     <span class="layui-badge-dot layui-bg-green"></span>
     <span class="layui-badge-dot layui-bg-cyan"></span>
     <span class="layui-badge-dot layui-bg-blue"></span>
     <span class="layui-badge-dot layui-bg-black"></span>
     <span class="layui-badge-dot layui-bg-gray"></span>
     
     椭圆体，通过 layui-badge 来定义。事实上我们把这个视作为主要使用方式
     <span class="layui-badge">6</span>
     <span class="layui-badge">99</span>
     <span class="layui-badge">61728</span>
     
     <span class="layui-badge">赤</span>
     <span class="layui-badge layui-bg-orange">橙</span>
     <span class="layui-badge layui-bg-green">绿</span>
     <span class="layui-badge layui-bg-cyan">青</span>
     <span class="layui-badge layui-bg-blue">蓝</span>
     <span class="layui-badge layui-bg-black">黑</span>
     <span class="layui-badge layui-bg-gray">灰</span>
     
     边框体，通过 layui-badge-rim 来定义
     <span class="layui-badge-rim">6</span>
     <span class="layui-badge-rim">Hot</span>
          



 - 与其它元素的搭配


 徽章主要是修饰作用，因此必不可少要与几乎所有的元素搭配。我们目前对以下元素内置了徽章的排版支持：

 
 按钮

 --------------


   <button>


 查看消息 6



   <button>


 动态<<>>


 /← 快看！这颜色屎黄屎黄的。。。/


 
     <button class="layui-btn">查看消息<span class="layui-badge layui-bg-gray">1</span></button>
     <button class="layui-btn">动态<span class="layui-badge-dot layui-bg-orange"></span></button>
          


 
 导航

 --------------

 -  [[index_u2.html][控制台9]]
 -  [[index_u2.html][个人中心<<>>]]

 
     <ul class="layui-nav" style="text-align: right;"> <-- 小Tips：这里有没有发现，设置导航靠右对齐（或居中对齐）其实非常简单 -->
       <li class="layui-nav-item">
         <a href="">控制台<span class="layui-badge">9</span></a>
       </li>
       <li class="layui-nav-item">
         <a href="">个人中心<span class="layui-badge-dot"></span></a>
       </li>
     </ul>
          


 
 选项卡（所有风格都支持，这里以简约风格为例）

 --------------

 -  网站设置
 -  用户管理<<>>
 -  最新邮件 99+



 
     <div class="layui-tab layui-tab-brief">
       <ul class="layui-tab-title">
         <li class="layui-this">网站设置</li>
         <li>用户管理<span class="layui-badge-dot"></span></li>
         <li>最新邮件<span class="layui-badge">99+</span></li>
       </ul>
       <div class="layui-tab-content"></div>
     </div>
          


 
 而至于与其它更多元素的搭配，就由你自由把控吧！


 - 结语


 其实，在与其它元素的搭配中，你要做的，无非就是合理运用这几点：边距
 背景色，徽章必然大显神威！






 --------------

 [[https://www.layui.com/doc/element/badge.html]]

 
 











 --------------

** 时间线

 #+BEGIN_QUOTE
   将时间抽象到二维平面，垂直呈现一段从过去到现在的故事。
 #+END_QUOTE






 - 快速使用


 -  //


 


    *** 8 月 18 日
 
 


    layui 2.0 的一切准备工作似乎都已到位。发布之弦，一触即发。
    不枉近百个日日夜夜与之为伴。因小而大，因弱而强。
    无论它能走多远，抑或如何支撑？至少我曾倾注全心，无怨无悔 //


  


 -  //


 


    *** 8 月 16 日
 
 


    杜甫的思想核心是儒家的仁政思想，他有/“致君尧舜上，再使风俗淳”/的宏伟抱负。个人最爱的名篇有：

    -  《登高》
    -  《茅屋为秋风所破歌》


  


 -  //


 


    *** 8 月 15 日
 
 


    中国人民抗日战争胜利日
    常常在想，尽管对这个国家有这样那样的抱怨，但我们可能的确生在了最好的时代
    铭记、感恩
    所有为中华民族浴血奋战的英雄将士
    永垂不朽


  


 -  //


 



 


    过去


  



  


 
     <ul class="layui-timeline">
       <li class="layui-timeline-item">
         <i class="layui-icon layui-timeline-axis">&#xe63f;</i>
         <div class="layui-timeline-content layui-text">
           <h3 class="layui-timeline-title">8月18日</h3>
           <p>
             layui 2.0 的一切准备工作似乎都已到位。发布之弦，一触即发。
             <br>不枉近百个日日夜夜与之为伴。因小而大，因弱而强。
             <br>无论它能走多远，抑或如何支撑？至少我曾倾注全心，无怨无悔 <i class="layui-icon"></i>
           </p>
         </div>
       </li>
       <li class="layui-timeline-item">
         <i class="layui-icon layui-timeline-axis">&#xe63f;</i>
         <div class="layui-timeline-content layui-text">
           <h3 class="layui-timeline-title">8月16日</h3>
           <p>杜甫的思想核心是儒家的仁政思想，他有“<em>致君尧舜上，再使风俗淳</em>”的宏伟抱负。个人最爱的名篇有：</p>
           <ul>
             <li>《登高》</li>
             <li>《茅屋为秋风所破歌》</li>
           </ul>
         </div>
       </li>
       <li class="layui-timeline-item">
         <i class="layui-icon layui-timeline-axis">&#xe63f;</i>
         <div class="layui-timeline-content layui-text">
           <h3 class="layui-timeline-title">8月15日</h3>
           <p>
             中国人民抗日战争胜利72周年
             <br>常常在想，尽管对这个国家有这样那样的抱怨，但我们的确生在了最好的时代
             <br>铭记、感恩
             <br>所有为中华民族浴血奋战的英雄将士
             <br>永垂不朽
           </p>
         </div>
       </li>
       <li class="layui-timeline-item">
         <i class="layui-icon layui-timeline-axis">&#xe63f;</i>
         <div class="layui-timeline-content layui-text">
           <div class="layui-timeline-title">过去</div>
         </div>
       </li>
     </ul>
          


 关于时间线，似乎也没有什么太多可介绍的东西。你需要留意的是以下几点

 -  图标可以任意定义（但并不推荐更改）
 -  标题区域并不意味着一定要加粗
 -  内容区域可自由填充。



 - 结语


 授之以鱼不如授之以渔，时间线怎么用，就看你的了。






 --------------

 [[https://www.layui.com/doc/element/timeline.html]]

 
 











 --------------

** 简单辅助元素 

 #+BEGIN_QUOTE
   本篇主要集中罗列页面中的一些简单辅助元素，如：引用块、字段集区块、横线等等，这些元素都无需依赖任何模块

 #+END_QUOTE

 - 引用区块



 #+BEGIN_QUOTE
   引用区域的文字
 #+END_QUOTE

 #+BEGIN_QUOTE
   引用区域的文字
 #+END_QUOTE

 目前内置了上述两种风格

 
     <blockquote class="layui-elem-quote">引用区域的文字</blockquote>
     <blockquote class="layui-elem-quote layui-quote-nm">引用区域的文字</blockquote>
          



 - 字段集区块



 - 字段集区块 - 默认风格

 内容区域。



 同样内置了两种风格，另一种风格即该文档的标题横线：字段集一行

 
     <fieldset class="layui-elem-field">
       <legend>字段集区块 - 默认风格</legend>
       <div class="layui-field-box">
         内容区域
       </div>
     </fieldset>
     
     <fieldset class="layui-elem-field layui-field-title">
       <legend>字段集区块 - 横线风格</legend>
       <div class="layui-field-box">
         内容区域
       </div>
     </fieldset>
     你可以把它看作是一个有标题的横线
          



 - 横线



 默认分割线

 --------------

 赤色分割线

 --------------

 橙色分割线

 --------------

 墨绿分割线

 --------------

 青色分割线

 --------------

 蓝色分割线

 --------------

 黑色分割线

 --------------

 灰色分割线

 --------------

 
     默认分割线
     <hr>
     
     赤色分割线
     <hr class="layui-bg-red">
     
     橙色分割线
     <hr class="layui-bg-orange">
     
     墨绿分割线
     <hr class="layui-bg-green">
     
     青色分割线
     <hr class="layui-bg-cyan">
     
     蓝色分割线
     <hr class="layui-bg-blue">
     
     黑色分割线
     <hr class="layui-bg-black">
     
     灰色分割线
     <hr class="layui-bg-gray">
* 内置模块 
** 弹层组件文档 - layui.layer

 #+BEGIN_QUOTE
   layer 至今仍作为 layui
   的代表作，她的受众广泛并非偶然，而是这数年来的坚持、不弃的执念，将那些不屑的眼光转化为应得的尊重，不断完善和维护、不断建设和提升社区服务，在
   Web 开发者的圈子里口口相传，乃至于成为今天的 layui
   最强劲的源动力。目前，/layer 已成为国内最多人使用的 Web
   弹层组件/，[[https://github.com/sentsin/layer][GitHub]]
   自然 Stars/5000+/，官网累计下载量达 50w+，大概有 30 万不同规模的 Web
   平台使用过 layer。
   
   之所以列举上面这些数字，并非是在夸夸其谈，而是懂 layer
   的人都知道，这是一种怎样不易的沉淀。而由于 layer 在 layui
   体系中的位置比较特殊，甚至让很多人都误以为 layui = layer
   ui，所以再次强调 layer 只是作为 layui
   的一个弹层模块，由于其用户基数较大，所以至今仍把她作为独立组件来维护。不过请注意：无论是独立的
   layer，还是作为内置模块的 layer，文档都以本页为准。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/layer/，独立版本：[[http://layer.layui.com/][layer.layui.com]]
 #+END_QUOTE

 - 使用场景
 由于 layer 可以独立使用，也可以通过 Layui 模块化使用。所以请按照你的实际需求来选择。

     引入好layer.js后，直接用即可
     <script src="layer.js"></script>
     <script>
     layer.msg('hello'); 
     </script>
          


 
     layui.use('layer', function(){
       var layer = layui.layer;
      
       layer.msg('hello');
     });              
          


 除了上面有所不同，其它都完全一致。


 - 基础参数



 我们提到的基础参数主要指调用方法时用到的配置项，如：/layer.open({content:
 ''})layer.msg('', {time:
 3})/等，其中的 content 和 time 即是基础参数，以键值形式存在，基础参数/可合理应用于任何层类型中/，您不需要所有都去配置，大多数都是可选的。而其中的 layer.open、layer.msg 就是内置方法。注意，从 2.3 开始，无需通过 layer.config 来加载拓展模块



 


 - type - 基本层类型




 


 类型：Number，默认：0

 layer 提供了 5 种层类型。可传入的值有：/0/（信息框，默认）/1/（页面层）/2/（iframe 层）/3/（加载层）/4/（tips 层）。
 若你采用/layer.open({type: 1})/方式调用，则 type 为必填项（信息框除外）


   </dd>


 - title - 标题




 


 类型：String/Array/Boolean，默认：'信息'

 title 支持三种类型的值，若你传入的是普通的字符串，如/title
 :'我是标题'/，那么只会改变标题文本；若你还需要自定义标题区域样式，那么你可以/title:
 ['文本',
 'font-size:18px;']/，数组第二项可以写任意 css 样式；如果你不想显示标题栏，你可以/title:
 false/


   </dd>


 - content - 内容




 


 类型：String/DOM/Array，默认：''

 content 可传入的值是灵活多变的，不仅可以传入普通的 html 内容，还可以指定 DOM，更可以随着 type 的不同而不同。譬如：

 
     /!*
      如果是页面层
      */
     layer.open({
       type: 1, 
       content: '传入任意的文本或html' //这里content是一个普通的String
     });
     layer.open({
       type: 1,
       content: $('#id') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响
     });
     //Ajax获取
     $.post('url', {}, function(str){
       layer.open({
         type: 1,
         content: str //注意，如果str是object，那么需要字符拼接。
       });
     });
     /!*
      如果是iframe层
      */
     layer.open({
       type: 2, 
       content: 'http://sentsin.com' //这里content是一个URL，如果你不想让iframe出现滚动条，你还可以content: ['http://sentsin.com', 'no']
     }); 
     /!*
      如果是用layer.open执行tips层
      */
     layer.open({
       type: 4,
       content: ['内容', '#id'] //数组第二项即吸附元素选择器或者DOM
     });        
            



   </dd>


 - skin - 样式类名




 


 类型：String，默认：''

 skin 不仅允许你传入 layer 内置的样式 class 名，还可以传入您自定义的 class 名。这是一个很好的切入点，意味着你可以借助 skin 轻松完成不同的风格定制。目前 layer 内置的 skin 有：/layui-layer-lanlayui-layer-molv/，未来我们还会选择性地内置更多，但更推荐您自己来定义。以下是一个自定义风格的简单例子

 
            
     //单个使用
     layer.open({
       skin: 'demo-class'
     });
     //全局使用。即所有弹出层都默认采用，但是单个配置skin的优先级更高
     layer.config({
       skin: 'demo-class'
     })
     //CSS 
     body .demo-class .layui-layer-title{background:#c00; color:#fff; border: none;}
     body .demo-class .layui-layer-btn{border-top:1px solid #E9E7E7}
     body .demo-class .layui-layer-btn a{background:#333;}
     body .demo-class .layui-layer-btn .layui-layer-btn1{background:#999;}
     …
     加上body是为了保证优先级。你可以借助Chrome调试工具，定义更多样式控制层更多的区域。    
            


 你也可以[[http://layer.layui.com/skin.html#publish][去查看layer皮肤制作说明]]


   </dd>


 - area - 宽高




 


 类型：String/Array，默认：'auto'

 在默认状态下，layer 是宽高都自适应的，但当你只想定义宽度时，你可以/area:
 '500px'/，高度仍然是自适应的。当你宽高都要定义时，你可以/area: ['500px',
 '300px']/


   </dd>


 - offset - 坐标




 


 类型：String/Array，默认：垂直水平居中

 offset 默认情况下不用设置。但如果你不想垂直水平居中，你还可以进行以下赋值：

 | 值                          | 备注                          |
 |-----------------------------+-------------------------------|
 | offset: 'auto'              | 默认坐标，即垂直水平居中      |
 | offset: '100px'             | 只定义 top 坐标，水平保持居中   |
 | offset: ['100px', '50px']   | 同时定义 top、left 坐标         |
 | offset: 't'                 | 快捷设置顶部坐标              |
 | offset: 'r'                 | 快捷设置右边缘坐标            |
 | offset: 'b'                 | 快捷设置底部坐标              |
 | offset: 'l'                 | 快捷设置左边缘坐标            |
 | offset: 'lt'                | 快捷设置左上角                |
 | offset: 'lb'                | 快捷设置左下角                |
 | offset: 'rt'                | 快捷设置右上角                |
 | offset: 'rb'                | 快捷设置右下角                |


   </dd>


 - icon - 图标。信息框和加载层的私有参数




 


 类型：Number，默认：-1（信息框）/0（加载层）

 信息框默认不显示图标。当你想显示图标时，默认皮肤可以传入/0-6/如果是加载层，可以传入/0-2/。如：

 
     //eg1
     layer.alert('酷毙了', {icon: 1});
     //eg2
     layer.msg('不开心。。', {icon: 5});
     //eg3
     layer.load(1); //风格1的加载
            



   </dd>


 - btn - 按钮




 


 类型：String/Array，默认：'确认'

 信息框模式时，btn 默认是一个确认按钮，其它层类型则默认不显示，加载层和 tips 层则无效。当您只想自定义一个按钮时，你可以/btn:
 '我知道了'/，当你要定义两个按钮时，你可以/btn: ['yes',
 'no']/。当然，你也可以定义更多按钮，比如：/btn: ['按钮 1', '按钮 2',
 '按钮 3', ...]/，按钮 1 的回调是 yes，而从按钮 2 开始，则回调为 btn2:
 function(){}，以此类推。如：

 
     //eg1       
     layer.confirm('纳尼？', {
       btn: ['按钮一', '按钮二', '按钮三'] //可以无限个按钮
       ,btn3: function(index, layero){
         //按钮【按钮三】的回调
       }
     }, function(index, layero){
       //按钮【按钮一】的回调
     }, function(index){
       //按钮【按钮二】的回调
     });
     
     //eg2
     layer.open({
       content: 'test'
       ,btn: ['按钮一', '按钮二', '按钮三']
       ,yes: function(index, layero){
         //按钮【按钮一】的回调
       }
       ,btn2: function(index, layero){
         //按钮【按钮二】的回调
        
         //return false 开启该代码可禁止点击该按钮关闭
       }
       ,btn3: function(index, layero){
         //按钮【按钮三】的回调
        
         //return false 开启该代码可禁止点击该按钮关闭
       }
       ,cancel: function(){ 
         //右上角关闭回调
        
         //return false 开启该代码可禁止点击该按钮关闭
       }
     });
            



   </dd>


 - btnAlign - 按钮排列




 


 类型：String，默认：r

 你可以快捷定义按钮的排列位置，btnAlign 的默认值为 r，即右对齐。该参数可支持的赋值如下：


   <table class="layui-table">



 



 



 


 值


   </th>



 


 备注


   </th>



   </tr>



   </thead>



 



 



 


 btnAlign: 'l'


   </td>



 


 按钮左对齐


   </td>



   </tr>



 



 


 btnAlign: 'c'


   </td>



 


 按钮居中对齐


   </td>



   </tr>



 



 


 btnAlign: 'r'


   </td>



 


 按钮右对齐。默认值，不用设置


   </td>



   </tr>



 



   </tr>



   </tbody>



   </table>



   </dd>


 - closeBtn - 关闭按钮




 


 类型：String/Boolean，默认：1

 layer 提供了两种风格的关闭按钮，可通过配置/1/和/2/来展示，如果不显示，则/closeBtn:
 0/


   </dd>


 - shade - 遮罩




 


 类型：String/Array/Boolean，默认：0.3

 即弹层外区域。默认是 0.3 透明度的黑色背景（'#000'）。如果你想定义别的颜色，可以/shade:
 [0.8, '#393D49']/；如果你不想显示遮罩，可以/shade: 0/


   </dd>


 - shadeClose - 是否点击遮罩关闭




 


 类型：Boolean，默认：false

 如果你的 shade 是存在的，那么你可以设定 shadeClose 来控制点击弹层外区域关闭。


   </dd>


 - time - 自动关闭所需毫秒




 


 类型：Number，默认：0

 默认不会自动关闭。当你想自动关闭时，可以/time:
 5000/，即代表 5 秒后自动关闭，注意单位是毫秒（1秒=1000 毫秒）


   </dd>


 - id - 用于控制弹层唯一标识




 


 类型：String，默认：空字符

 设置该值后，不管是什么类型的层，都只允许同时弹出一个。一般用于页面层和 iframe 层模式


   </dd>


 - anim - 弹出动画




 


 类型：Number，默认：0

 我们的出场动画全部采用 CSS3。这意味着除了 ie6-9，其它所有浏览器都是支持的。目前 anim 可支持的动画类型有/0-6/
 如果不想显示动画，设置 anim: -1
 即可。另外需要注意的是，3.0 之前的版本用的是 /shift/ 参数


   </dd>


 | 值        | 备注               |
 |-----------+--------------------|
 | anim: 0   | 平滑放大。默认     |
 | anim: 1   | 从上掉落           |
 | anim: 2   | 从最底部往上滑入   |
 | anim: 3   | 从左滑入           |
 | anim: 4   | 从左翻滚           |
 | anim: 5   | 渐显               |
 | anim: 6   | 抖动               |

 - isOutAnim - 关闭动画 （layer
 3.0.3 新增）




 


 类型：Boolean，默认：true

 默认情况下，关闭层时会有一个过度动画。如果你不想开启，设置 isOutAnim:
 false 即可


   </dd>


 - maxmin - 最大最小化。




 


 类型：Boolean，默认：false

 该参数值对/type:1/和/type:2/有效。默认不显示最大小化按钮。需要显示配置/maxmin:
 true/即可


   </dd>


 - fixed - 固定




 


 类型：Boolean，默认：true

 即鼠标滚动时，层是否固定在可视区域。如果不想，设置/fixed: false/即可


   </dd>


 - resize - 是否允许拉伸




 


 类型：Boolean，默认：true

 默认情况下，你可以在弹层右下角拖动来拉伸尺寸。如果对指定的弹层屏蔽该功能，设置
 false 即可。该参数对 loading、tips 层无效


   </dd>


 - resizing - 监听窗口拉伸动作




 


 类型：Function，默认：null

 当你拖拽弹层右下角对窗体进行尺寸调整时，如果你设定了该回调，则会执行。回调返回一个参数：当前层的 DOM 对象

 
     resizing: function(layero){
       console.log(layero);
     }   
            



   </dd>


 - scrollbar - 是否允许浏览器出现滚动条




 


 类型：Boolean，默认：true

 默认允许浏览器滚动，如果设定/scrollbar: false/，则屏蔽


   </dd>


 - maxWidth - 最大宽度




 


 类型：Number，默认：360

 请注意：只有当/area: 'auto'/时，maxWidth 的设定才有效。


   </dd>


 - maxHeight - 最大高度




 


 类型：Number，默认：无

 请注意：只有当高度自适应时，maxHeight 的设定才有效。


   </dd>


 - zIndex - 层叠顺序




 


 类型：，默认：19891014（贤心生日 0.0）

 一般用于解决和其它组件的层叠冲突。


   </dd>


 - move - 触发拖动的元素




 


 类型：String/DOM/Boolean，默认：'.layui-layer-title'

 默认是触发标题区域拖拽。如果你想单独定义，指向元素的选择器或者 DOM 即可。如/move:
 '.mine-move'/。你还配置设定/move: false/来禁止拖拽


   </dd>


 - moveOut - 是否允许拖拽到窗口外




 


 类型：Boolean，默认：false

 默认只能在窗口内拖拽，如果你想让拖到窗外，那么设定/moveOut: true/即可


   </dd>


 - moveEnd - 拖动完毕后的回调方法




 


 类型：Function，默认：null

 默认不会触发 moveEnd，如果你需要，设定/moveEnd:
 function(layero){}/即可。其中 layero 为当前层的 DOM 对象


   </dd>


 - tips - tips 方向和颜色




 


 类型：Number/Array，默认：2

 tips 层的私有参数。支持/上右下左/四个方向，通过/1-4/进行方向设定。如/tips:
 3/则表示在元素的下面出现。有时你还可能会定义一些颜色，可以设定/tips: [1,
 '#c00']/


   </dd>


 - tipsMore - 是否允许多个 tips




 


 类型：Boolean，默认：false

 允许多个意味着不会销毁之前的 tips 层。通过/tipsMore: true/开启


   </dd>


 - success - 层弹出后的成功回调方法




 


 类型：Function，默认：null

 当你需要在层创建完毕时即执行一些语句，可以通过该回调。success 会携带两个参数，分别是/当前层 DOM 当前层索引/。如：

 
     layer.open({
       content: '测试回调',
       success: function(layero, index){
         console.log(layero, index);
       }
     });        
            



   </dd>


 - yes - 确定按钮回调方法




 


 类型：Function，默认：null

 该回调携带两个参数，分别为当前层索引、当前层 DOM 对象。如：

 
     layer.open({
       content: '测试回调',
       yes: function(index, layero){
         //do something
         layer.close(index); //如果设定了yes回调，需进行手工关闭
       }
     });        
            



   </dd>


 - cancel - 右上角关闭按钮触发的回调




 


 类型：Function，默认：null

 该回调携带两个参数，分别为：当前层索引参数（index）、当前层的 DOM 对象（layero），默认会自动触发关闭。如果不想关闭，/return
 false/即可，如；

 
     cancel: function(index, layero){ 
       if(confirm('确定要关闭么')){ //只有当点击confirm框的确定时，该层才会关闭
         layer.close(index)
       }
       return false; 
     }    
            



   </dd>


 - end - 层销毁后触发的回调




 


 类型：Function，默认：null

 无论是确认还是取消，只要层被销毁了，end 都会执行，不携带任何参数。


   </dd>


 - full/min/restore -分别代表最大化、最小化、还原
 后触发的回调




 


 类型：Function，默认：null

 携带一个参数，即当前层 DOM


   </dd>



   </dl>



 


 - layer.config(options) -
 初始化全局配置




 


 这是一个可以重要也可以不重要的方法，重要的是，它的权利真的很大，尤其是在模块化加载 layer 时，你会发现你必须要用到它。它不仅可以配置一些诸如路径、加载的模块，甚至还可以决定整个弹层的默认参数。而说它不重要，是因为多数情况下，你会发现，你似乎不是那么十分需要它。但你真的需要认识一下这位伙计。

 如果您是采用/seajs/或者/requirejs/加载 layer，你需要执行该方法来完成初始化的配置。比如：

 
     layer.config({
       path: '/res/layer/' //layer.js所在的目录，可以是绝对目录，也可以是相对目录
     });
     //这样的话，layer就会去加载一些它所需要的配件，比如css等。  
     //当然，你即便不用seajs或者requirejs，也可以通过上述方式设定路径             
            


 如果你是采用<script
 src="?a.js&layer.js">这种合并的方式引入 layer，那么您需要在 script 标签上加一个自定义属性 merge="true"。如：

 
     <script src="?a.js&layer.js" merge="true">
     这样的话，layer就不会去自动去获取路径，但你需要通过以下方式来完成初始化的配置
     layer.config({
       path: '/res/layer/' //layer.js所在的目录，可以是绝对目录，也可以是相对目录
     });
            


 注意：/如果采用 layui 加载 layer，无需设置
 path。所以前置工作都是自动完成。/

 但 layer.config 的作用远不止上述这样。它还可以配置层/默认的基础参数/，如：

 
     layer.config({
       anim: 1, //默认动画风格
       skin: 'layui-layer-molv' //默认皮肤
       …
     });
     //除此之外，extend还允许你加载拓展的css皮肤，如：
     layer.config({
       //如果是独立版的layer，则将myskin存放在./skin目录下
       //如果是layui中使用layer，则将myskin存放在./css/modules/layer目录下
       extend: 'myskin/style.css'
     });
     //具体的皮肤定制，可以参见：skin参数说明      
            



   </dd>


 - layer.ready(callback) - 初始化就绪




 


 由于我们的 layer 内置了轻量级加载器，所以你根本不需要单独引入 css 等文件。但是加载总是需要过程的。当你在页面一打开就要执行弹层时，你最好是将弹层放入 ready 方法中，如：

 
     //页面一打开就执行弹层
     layer.ready(function(){
       layer.msg('很高兴一开场就见到你');
     });      
            


 我是华丽的酱油：介绍完上面两位引导者，接下来我们真正的主角闪亮登场了。此处应有掌声
 \^,\^


   </dd>


 - layer.open(options) - 原始核心方法




 


 基本上是露脸率最高的方法，不管是使用哪种方式创建层，都是走/layer.open()/，创建任何类型的弹层都会返回一个当前层索引，上述的/options 即是基础参数/，另外，该文档/统一采用 options 作为基础参数的标识/例子：

 
     var index = layer.open({
       content: 'test'
     });
     //拿到的index是一个重要的凭据，它是诸如layer.close(index)等方法的必传参数。       
            


 噢，请等等，上面这位主角的介绍篇幅怎么看怎么都觉得跟它的地位不符，作者在文档中只给了它如此可怜的一块地？？这是因为，它真的已经大众得不能再大众了，你真正需要了解的，是它的内部器官，即上面一大篇幅介绍的各种基础参数。
 ←\_←


   </dd>


 - layer.alert(content, options, yes) -
 普通信息框




 


 它的弹出似乎显得有些高调，一般用于对用户造成比较强烈的关注，类似系统 alert，但却比 alert 更灵便。它的参数是自动向左补齐的。通过第二个参数，可以设定各种你所需要的基础参数，但如果你不需要的话，直接写回调即可。如

 
     //eg1
     layer.alert('只想简单的提示');        
     //eg2
     layer.alert('加了个图标', {icon: 1}); //这时如果你也还想执行yes回调，可以放在第三个参数中。
     //eg3
     layer.alert('有了回调', function(index){
       //do something
      
       layer.close(index);
     });       
            



   </dd>


 - layer.confirm(content, options, yes, cancel) -
 询问框




 


 类似系统 confirm，但却远胜 confirm，另外它/不是和系统的 confirm 一样阻塞/你需要把交互的语句放在回调体中。同样的，它的参数也是自动补齐的。

 
     //eg1
     layer.confirm('is not?', {icon: 3, title:'提示'}, function(index){
       //do something
      
       layer.close(index);
     });
     //eg2
     layer.confirm('is not?', function(index){
       //do something
      
       layer.close(index);
     });       
            



   </dd>


 - layer.msg(content, options, end) -
 提示框




 


 我们在源码中用了相对较大的篇幅来定制了这个 msg，目的是想将其打造成露脸率最高的提示框。而事实上我的确也在大量地使用它。因为它简单，而且足够得自觉，它不仅占据很少的面积，而且默认还会 3 秒后/自动消失/所有这一切都决定了我对 msg 的爱。因此/我赋予了它许多可能/在外形方面，它坚持简陋的变化，在作用方面，它坚持零用户操作。而且它的参数也是自动补齐的。

 
     //eg1
     layer.msg('只想弱弱提示');
     //eg2
     layer.msg('有表情地提示', {icon: 6}); 
     //eg3
     layer.msg('关闭后想做些什么', function(){
       //do something
     }); 
     //eg
     layer.msg('同上', {
       icon: 1,
       time: 2000 //2秒关闭（如果不配置，默认是3秒）
     }, function(){
       //do something
     });   
            



   </dd>


 - layer.load(icon, options) - 加载层




 


 type:3 的深度定制。load 并不需要你传太多的参数，但如果你不喜欢默认的加载风格，你还有选择空间。icon 支持传入/0-2/如果是 0，无需传。另外特别注意一点：/load 默认是不会自动关闭的/，因为你一般会在 ajax 回调体中关闭它。

 
     //eg1
     var index = layer.load();
     //eg2
     var index = layer.load(1); //换了种风格
     //eg3
     var index = layer.load(2, {time: 10*1000}); //又换了种风格，并且设定最长等待10秒 
     //关闭
     layer.close(index);     
            



   </dd>


 - layer.tips(content, follow, options) -
 tips 层




 


 type:4 的深度定制。也是我本人比较喜欢的一个层类型，因为它拥有和 msg 一样的低调和自觉，而且会/智能定位/，即灵活地判断它应该出现在哪边。默认是在元素右边弹出

 
     //eg1
     layer.tips('只想提示地精准些', '#id');
     //eg 2
     $('#id').on('click', function(){
       var that = this;
       layer.tips('只想提示地精准些', that); //在元素的事件回调体中，follow直接赋予this即可
     });
     //eg 3
     layer.tips('在上面', '#id', {
       tips: 1
     });
            



   </dd>


 上面主要是一些弹层的调用方式，而下面介绍的是一些辅助性的方法

 - layer.close(index) - 关闭特定层




 


 关于它似乎没有太多介绍的必要，唯一让你疑惑的，可能就是这个/index/了吧。事实上它非常容易得到。

 
     //当你想关闭当前页的某个层时
     var index = layer.open();
     var index = layer.alert();
     var index = layer.load();
     var index = layer.tips();
     //正如你看到的，每一种弹层调用方式，都会返回一个index
     layer.close(index); //此时你只需要把获得的index，轻轻地赋予layer.close即可
     
     //如果你想关闭最新弹出的层，直接获取layer.index即可
     layer.close(layer.index); //它获取的始终是最新弹出的某个层，值是由layer内部动态递增计算的
     
     //当你在iframe页面关闭自身时
     var index = parent.layer.getFrameIndex(window.name); //先得到当前iframe层的索引
     parent.layer.close(index); //再执行关闭   
            



   </dd>


 - layer.closeAll(type) - 关闭所有层




 


 如果你很懒，你/不想去获取 index/你只想关闭。那么 closeAll 真的可以帮上你。如果你不指向层类型的话，它会销毁掉当前页所有的 layer 层。当然，如果你只想关闭某个类型的层，那么你可以

 
     layer.closeAll(); //疯狂模式，关闭所有层
     layer.closeAll('dialog'); //关闭信息框
     layer.closeAll('page'); //关闭所有页面层
     layer.closeAll('iframe'); //关闭所有的iframe层
     layer.closeAll('loading'); //关闭加载层
     layer.closeAll('tips'); //关闭所有的tips层    
            



   </dd>


 - layer.style(index, cssStyle) -
 重新定义层的样式




 


 该方法对 loading 层和 tips 层无效。参数 index 为层的索引，cssStyle 允许你传入任意的 css 属性

 
     //重新给指定层设定width、top等
     layer.style(index, {
       width: '1000px',
       top: '10px'
     });       
            



   </dd>


 - layer.title(title, index) -
 改变层的标题




 


 使用方式：/layer.title('标题变了', index)/


   </dd>


 - layer.getChildFrame(selector, index) -
 获取 iframe 页的 DOM




 


 当你试图在当前页获取 iframe 页的 DOM 元素时，你可以用此方法。/selector 即 iframe 页的选择器/

 
     layer.open({
       type: 2,
       content: 'test/iframe.html',
       success: function(layero, index){
         var body = layer.getChildFrame('body', index);
         var iframeWin = window[layero.find('iframe')[0]['name']]; //得到iframe页的窗口对象，执行iframe页的方法：iframeWin.method();
         console.log(body.html()) //得到iframe页的body内容
         body.find('input').val('Hi，我是从父页来的')
       }
     });       
            



   </dd>


 - layer.getFrameIndex(windowName) -
 获取特定 iframe 层的索引




 


 此方法一般用于在 iframe 页关闭自身时用到。

 
     //假设这是iframe页
     var index = parent.layer.getFrameIndex(window.name); //先得到当前iframe层的索引
     parent.layer.close(index); //再执行关闭        
            



   </dd>


 - layer.iframeAuto(index) -
 指定 iframe 层自适应




 


 调用该方法时，iframe 层的高度会重新进行适应


   </dd>


 - layer.iframeSrc(index, url) - //重置特定 iframe
 url




 


 似乎不怎么常用的样子。使用方式：/layer.iframeSrc(index,
 'http://sentsin.com')/


   </dd>


 - layer.setTop(layero) -置顶当前窗口 




 


 非常强大的一个方法，虽然一般很少用。但是当你的页面有很多很多 layer 窗口，你需要像 Window 窗体那样，点击某个窗口，该窗体就置顶在上面，那么 setTop 可以来轻松实现。它采用巧妙的逻辑，以使这种置顶的性能达到最优

 
     //通过这种方式弹出的层，每当它被选择，就会置顶。
     layer.open({
       type: 2,
       shade: false,
       area: '500px',
       maxmin: true,
       content: 'http://www.layui.com',
       zIndex: layer.zIndex, //重点1
       success: function(layero){
         layer.setTop(layero); //重点2
       }
     });     
            



   </dd>


 - layer.full()、layer.min()、layer.restore() -
 手工执行最大小化




 


 （这三个酱油又一次被并列
 ==。）一般用于在自定义元素上触发最大化、最小化和全屏。


   </dd>



   </dl>


 #+BEGIN_QUOTE
   请注意，从 2.3 开始，无需通过 layer.config 来加载拓展模块。如果您是之前版本，则需通过下述方式来加载
 #+END_QUOTE

 
     layer.config({
       extend: 'extend/layer.ext.js'
     });     
        



 


 - layer.prompt(options, yes) - 输入层




 


 prompt 的参数也是向前补齐的。options 不仅可支持传入基础参数，还可以传入 prompt 专用的属性。当然，也可以不传。yes 携带/value
 表单值 index 索引 elem 表单元素/

 
     //prompt层新定制的成员如下
     {
       formType: 1, //输入框类型，支持0（文本）默认1（密码）2（多行文本）
       value: '', //初始时的值，默认空字符
       maxlength: 140, //可输入文本的最大长度，默认500
     }
     
     //例子1
     layer.prompt(function(value, index, elem){
       alert(value); //得到value
       layer.close(index);
     });
     
     //例子2
     layer.prompt({
       formType: 2,
       value: '初始值',
       title: '请输入值',
       area: ['800px', '350px'] //自定义文本域宽高
     }, function(value, index, elem){
       alert(value); //得到value
       layer.close(index);
     });
            



   </dd>


 - layer.tab(options) - tab 层




 


 tab 层只单独定制了一个成员，即/tab:
 []/，这个好像没有什么可介绍的，简单粗暴看例子

 
     layer.tab({
       area: ['600px', '300px'],
       tab: [{
         title: 'TAB1', 
         content: '内容1'
       }, {
         title: 'TAB2', 
         content: '内容2'
       }, {
         title: 'TAB3', 
         content: '内容3'
       }]
     });        
            



   </dd>


 - layer.photos(options) - 相册层




 


 相册层，也可以称之为图片查看器。它的出场动画从 layer 内置的动画类型中随机展现。photos 支持传入 json 和直接读取页面图片两种方式。如果是 json 传入，如下：

 
     $.getJSON('/jquery/layer/test/photos.json', function(json){
       layer.photos({
         photos: json
         ,anim: 5 //0-6的选择，指定弹出图片动画类型，默认随机（请注意，3.0之前的版本用shift参数）
       });
     }); 
     //而返回的json需严格按照如下格式：
     {
       "title": "", //相册标题
       "id": 123, //相册id
       "start": 0, //初始显示的图片序号，默认0
       "data": [   //相册包含的图片，数组格式
         {
           "alt": "图片名",
           "pid": 666, //图片id
           "src": "", //原图地址
           "thumb": "" //缩略图地址
         }
       ]
     }






 如果是直接从页面中获取图片，那么需要指向图片的父容器，并且你的 img 可以设定一些规定的属性（但不是必须的）。

 
     //HTML示例
     <div id="layer-photos-demo" class="layer-photos-demo">
       <img layer-pid="图片id，可以不写" layer-src="大图地址" src="缩略图" alt="图片名">
       <img layer-pid="图片id，可以不写" layer-src="大图地址" src="缩略图" alt="图片名">
     </div>
     
     <script>
     //调用示例
     layer.photos({
       photos: '#layer-photos-demo'
       ,anim: 5 //0-6的选择，指定弹出图片动画类型，默认随机（请注意，3.0之前的版本用shift参数）
     }); 
     </script>
            


 看看一个实例呗：





 [[file:res.layui.com/images/fly/fly.jpg]]
 [[file:res.layui.com/images/fly/layim.jpg]]
 [[file:file.ynet.com/2/1603/09/10995825.jpg]]
 [[file:res.layui.com/images/sentsin/night.gif]]


 第二种方式的图片查看器显然更加简单，因为无需像第一种那样返回规定的 json，但是他们还是有各自的应用场景的，你可以按照你的需求进行选择。另外，photos 还有个 tab 回调，切换图片时触发。

 
     layer.photos({
       photos: json/选择器,
       tab: function(pic, layero){
         console.log(pic) //当前图片的一些信息
       }
     });
            



   </dd>



   </dl>


 - 结语


 合理地设定基础参数，合理地选择内置方法，合理的心态，合理地阅读，只要一切都在合理的前提下，你才会感知到 layer 许许多多令人愉悦的地方，/她真的是否如你所愿，取决于你对她了解的深远/。愿 layer 能给你的 web 开发带来一段美妙的旅程。别忘了在线调试。






 --------------

 [[https://www.layui.com/doc/modules/layer.html]]

 
 











 --------------

** 日期和时间组件文档 - layui.laydate

 #+BEGIN_QUOTE
   如你所见，layDate 在 layui 2.0 的版本中迎来一次重生。无论曾经它给你带来过多么糟糕的体验，从今往后，所有的旧坑都将弥合。全面重写的 layDate
   包含了大量的更新，其中主要以：年选择器、年月选择器、日期选择器、时间选择器、日期时间选择器
   五种类型的选择方式为基本核心，并且均支持范围选择（即双控件）。内置强劲的自定义日期格式解析和合法校正机制，含中文版和国际版，主题简约却又不失灵活多样。由于内部采用的是零依赖的原生
   JavaScript 编写，因此又可作为独立组件使用。毫无疑问，这是 layui 的虔心之作。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/laydate/，独立版本：[[http://www.layui.com/laydate/]]
 #+END_QUOTE


*** 快速使用
  和 layer 一样，你可以在 layui 中使用 layDate，也可直接使用 layDate 独立版，请按照你的实际需求来选择。

  #+begin_src html
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <title>layDate快速使用</title>
        <link rel="stylesheet" href="/static/build/layui.css" media="all">
      </head>
      <body>

        <div class="layui-inline"> <!-- 注意：这一层元素并不是必须的 -->
          <input type="text" class="layui-input" id="test1">
        </div>

        <script src="/static/build/layui.js"></script>
        <script>
          layui.use('laydate', function(){
          var laydate = layui.laydate;

          //执行一个laydate实例
          laydate.render({
          elem: '#test1' //指定元素
          });
          });
        </script>
      </body>
    </html>
 #+end_src
          
#+begin_src html

      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>使用 layDate 独立版</title>
      </head>
      <body>
     
      <input type="text" id="test1">
     
      <script src="laydate.js"></script>
      <script>
      //执行一个laydate实例
      laydate.render({
        elem: '#test1' //指定元素
      });
      </script>
      </body>
      </html>
#+end_src
          
  除了在组件加载方式有一些小小的不同，其它都完全类似


*** 基础参数选项
  通过核心方法：laydate.render(options) 来设置基础参数，也可以通过方法：laydate.set(options) 来设定全局基础参数.

**** elem - 绑定元素
   类型：StringDOM，默认值：无

   必填项，用于绑定执行日期渲染的元素，值一般为选择器，或 DOM 对象

 
       laydate.render({ 
         elem: '#test' //或 elem: document.getElementById('test')、elem: lay('#test') 等
       });
          
**** type - 控件选择类型
   类型：String，默认值：date

   用于单独提供不同的选择器类型，可选值如下表：

   | type 可选值   | 名称             | 用途                                         |
   |--------------+------------------+----------------------------------------------|
   | year         | 年选择器         | 只提供年列表选择                             |
   | month        | 年月选择器       | 只提供年、月选择                             |
   | date         | 日期选择器       | 可选择：年、月、日。type 默认值，一般可不填   |
   | time         | 时间选择器       | 只提供时、分、秒选择                         |
   | datetime     | 日期时间选择器   | 可选择：年、月、日、时、分、秒               |

 
       //年选择器
       laydate.render({ 
         elem: '#test'
         ,type: 'year'
       });
     
       //年月选择器
       laydate.render({ 
         elem: '#test'
         ,type: 'month'
       });
     
       //日期选择器
       laydate.render({ 
         elem: '#test'
         //,type: 'date' //默认，可不填
       });
     
       //时间选择器
       laydate.render({ 
         elem: '#test'
         ,type: 'time'
       });
     
       //日期时间选择器
       laydate.render({ 
         elem: '#test'
         ,type: 'datetime'
       });
          



   - range - 开启左右面板范围选择


   类型：/Boolean/String/，默认值：/false/

   如果设置 /true/，将默认采用 “ - ” 分割。 你也可以直接设置
   /分割字符/。五种选择器类型均支持左右面板的范围选择。

 
       //年范围选择
       laydate.render({ 
         elem: '#test'
         ,type: 'year'
         ,range: true //或 range: '~' 来自定义分割字符
       });
     
       //年月范围选择
       laydate.render({ 
         elem: '#test'
         ,type: 'month'
         ,range: true //或 range: '~' 来自定义分割字符
       });
     
       //日期范围选择
       laydate.render({ 
         elem: '#test'
         ,range: true //或 range: '~' 来自定义分割字符
       });
     
       //时间范围选择
       laydate.render({ 
         elem: '#test'
         ,type: 'time'
         ,range: true //或 range: '~' 来自定义分割字符
       });
     
       //日期时间范围选择
       laydate.render({ 
         elem: '#test'
         ,type: 'datetime'
         ,range: true //或 range: '~' 来自定义分割字符
       });
          



   - format - 自定义格式


   类型：/String/，默认值：/yyyy-MM-dd/

   通过日期时间各自的格式符和长度，来设定一个你所需要的日期格式。layDate
   支持的格式如下：

   | 格式符   | 说明                                               |
   |----------+----------------------------------------------------|
   | yyyy     | 年份，至少四位数。如果不足四位，则前面补零         |
   | y        | 年份，不限制位数，即不管年份多少位，前面均不补零   |
   | MM       | 月份，至少两位数。如果不足两位，则前面补零。       |
   | M        | 月份，允许一位数。                                 |
   | dd       | 日期，至少两位数。如果不足两位，则前面补零。       |
   | d        | 日期，允许一位数。                                 |
   | HH       | 小时，至少两位数。如果不足两位，则前面补零。       |
   | H        | 小时，允许一位数。                                 |
   | mm       | 分钟，至少两位数。如果不足两位，则前面补零。       |
   | m        | 分钟，允许一位数。                                 |
   | ss       | 秒数，至少两位数。如果不足两位，则前面补零。       |
   | s        | 秒数，允许一位数。                                 |

   通过上述不同的格式符组合成一段日期时间字符串，可任意排版，如下所示：

   | 格式                           | 示例值                          |
   |--------------------------------+---------------------------------|
   | yyyy-MM-dd HH:mm:ss            | 2017-08-18 20:08:08             |
   | yyyy 年 MM 月 dd 日 HH 时 mm 分 ss 秒    | 2017 年 08 月 18 日 20 时 08 分 08 秒     |
   | yyyyMMdd                       | 20170818                        |
   | dd/MM/yyyy                     | 18/08/2017                      |
   | yyyy 年 M 月                      | 2017 年 8 月                       |
   | M 月 d 日                         | 8 月 18 日                         |
   | 北京时间：HH 点 mm 分             | 北京时间：20 点 08 分              |
   | yyyy 年的 M 月某天晚上，大概 H 点   | 2017 年的 8 月某天晚上，大概 20 点   |

 
       //自定义日期格式
       laydate.render({ 
         elem: '#test'
         ,format: 'yyyy年MM月dd日' //可任意组合
       });
          

   - value - 初始值


   类型：/String/，默认值：/new Date()/

   支持传入符合 format 参数设定的日期格式字符，或者 new Date()

 
       //传入符合format格式的字符给初始值
       laydate.render({ 
         elem: '#test'
         ,value: '2018-08-18' //必须遵循format参数设定的格式
       });
     
       //传入Date对象给初始值
       laydate.render({ 
         elem: '#test'
         ,value: new Date(1534766888000) //参数即为：2018-08-20 20:08:08 的时间戳
       });
          



   - isInitValue - 初始值填充


   类型：/Boolean/，默认值：/true/

   用于控制是否自动向元素填充初始值（需配合 value 参数使用）

 
       laydate.render({
         elem: '#test'
         ,value: '2017-09-10'
         ,isInitValue: false //是否允许填充初始值，默认为 true
       });
          


   #+BEGIN_QUOTE
     注意：该参数为 layui 2.3.0 新增。
   #+END_QUOTE


   - min/max - 最小/大范围内的日期时间值


   类型：/string/，默认值：/min: '1900-1-1'/、/max: '2099-12-31'/

   设定有限范围内的日期或时间值，/不在范围内的将不可选中/。这两个参数的赋值非常灵活，主要有以下几种情况：

   | 1.   | 如果值为字符类型，则：/年月日必须用 -（中划线）分割/、/时分秒必须用 :（半角冒号）号分割/。这里并非遵循 format 设定的格式   |
   | 2.   | 如果值为整数类型，且数字＜86400000，则数字代表天数，如：min: -7，即代表最小日期在 7 天前，正数代表若干天后                   |
   | 3.   | 如果值为整数类型，且数字 ≥ 86400000，则数字代表时间戳，如：max: 4073558400000，即代表最大日期在：公元 3000 年 1 月 1 日          |

 
       //日期有效范围只限定在：2017年
       laydate.render({ 
         elem: '#test'
         ,min: '2017-1-1'
         ,max: '2017-12-31'
       });
     
       //日期有效范围限定在：过去一周到未来一周
       laydate.render({ 
         elem: '#test'
         ,min: -7 //7天前
         ,max: 7 //7天后
       });
     
       //日期时间有效范围的设定: 
       laydate.render({ 
         elem: '#test'
         ,type: 'datetime'
         ,min: '2017-8-11 12:30:00'
         ,max: '2017-8-18 12:30:00'
       });
     
       //时间有效范围设定在: 上午九点半到下午五点半
       laydate.render({ 
         elem: '#test'
         ,type: 'time'
         ,min: '09:30:00'
         ,max: '17:30:00'
       });
          


   毫不保留地说，min 和 max 参数是两个非常强大的存在，合理运用，可帮助用户在日期与时间的选择上带来更为友好的约束与体验。


   - trigger - 自定义弹出控件的事件


   类型：/String/，默认值：/focus/，如果绑定的元素非输入框，则默认事件为：click

 
       //自定义事件
       laydate.render({ 
         elem: '#test'
         ,trigger: 'click' //采用click弹出
       });
          



   - show - 默认显示


   类型：/Boolean/，默认值：/false/

   如果设置:
   /true/，则控件默认显示在绑定元素的区域。通常用于外部事件调用控件，如：

 
       //默认显示
       laydate.render({
         elem: '#test'
         ,show: true //直接显示
       });
          
       //外部事件调用
       lay('#test1').on('click', function(e){ //假设 test1 是一个按钮
         laydate.render({
           elem: '#test'
           ,show: true //直接显示
           ,closeStop: '#test1' //这里代表的意思是：点击 test1 所在元素阻止关闭事件冒泡。如果不设定，则无法弹出控件
         });
       });
          



   - position - 定位方式


   类型：/String/，默认值：/absolute/

   用于设定控件的定位方式，有以下三种可选值：

   | position 可选值   | 说明                                                                                                       |
   |-------------------+------------------------------------------------------------------------------------------------------------|
   | abolute           | 绝对定位，始终吸附在绑定元素周围。默认值                                                                   |
   | fixed             | 固定定位，初始吸附在绑定元素周围，不随浏览器滚动条所左右。/一般用于在固定定位的弹层中使用。/               |
   | static            | 静态定位，控件将直接嵌套在指定容器中。                                                                   |
   |                   | 注意：/请勿与 show 参数的概念搞混淆。show 为 true 时，控件仍然是采用绝对或固定定位。而这里是直接嵌套显示/   |

   下面是一个直接嵌套显示的例子：<<index_u13.html#test3>>


     <div id="index_u13.html#test2" class="layui-inline2">




     <div class="layui-inline3">


 
       【HTML】
       <span id="testView"></span>
       <div id="test2"></div>
     
       【JS】:      
       //嵌套在指定容器中
       laydate.render({
         elem: '#test2'
         ,position: 'static'
         ,change: function(value, date){ //监听日期被切换
           lay('#testView').html(value);
         }
       });
            




   - zIndex - 层叠顺序


   类型：/Number/，默认值：/66666666/

   一般用于解决与其它元素的互相被遮掩的问题。如果 position 参数设为 static
   时，该参数无效。

 
       //设定控件的层叠顺序
       laydate.render({
         elem: '#test'
         ,zIndex: 99999999
       });
          



   - showBottom - 是否显示底部栏


   类型：/Boolean/，默认值：/true/

   如果设置 /false/，将不会显示控件的底部栏区域

 
       //不显示底部栏
       laydate.render({
         elem: '#test'
         ,showBottom: false
       });
          



   - btns - 工具按钮


   类型：/Array/，默认值：/['clear', 'now', 'confirm']/

   右下角显示的按钮，会按照数组顺序排列，内置可识别的值有：clear、now、confirm

 
       //只显示清空和确认
       laydate.render({
         elem: '#test'
         ,btns: ['clear', 'confirm']
       });
          



   - lang - 语言


   类型：/String/，默认值：/cn/

   我们内置了两种语言版本：/cn/（中文版）、/en/（国际版，即英文版）。这里并没有开放自定义文字，是为了避免繁琐的配置。

 
       //国际版
       laydate.render({
         elem: '#test'
         ,lang: 'en'
       });
          



   - theme - 主题


   类型：/String/，默认值：/default/

   我们内置了多种主题，theme 的可选值有：/default/（默认简约）、/molv/（墨绿背景）、/#颜色值/（自定义颜色背景）、/grid/（格子主题）

 
       //墨绿背景主题
       laydate.render({
         elem: '#test'
         ,theme: 'molv'
       });
     
       //自定义背景色主题 - 非常实用
       laydate.render({
         elem: '#test'
         ,theme: '#393D49'
       });
     
       //格子主题
       laydate.render({
         elem: '#test'
         ,theme: 'grid'
       });
          


   另外，你还可以传入其它字符，如：theme: 'xxx'，那么控件将会多出一个
   /class="laydate-theme-xxx"/ 的 CSS 类，以便于你单独定制主题。


   - calendar - 是否显示公历节日


   类型：/Boolean/，默认值：/false/

   我们内置了一些我国通用的公历重要节日，通过设置 /true/
   来开启。国际版不会显示。

 
       //允许显示公历节日
       laydate.render({
         elem: '#test'
         ,calendar: true
       });
          



   - mark - 标注重要日子


   类型：/Object/，默认值：/无/

   calendar
   参数所代表的公历节日更多情况下是一个摆设。因此，我们还需要自定义标注重要日子，比如结婚纪念日？日程等？它分为以下两种：

   | 标注         | 格式                    | 说明                                                   |
   |--------------+-------------------------+--------------------------------------------------------|
   | 每年的日期   | {'0-9-18': '国耻'}      | 0 即代表每一年                                         |
   | 每月的日期   | {'0-0-15': '中旬'}      | 0-0 即代表每年每月（layui 2.1.1/layDate 5.0.4 新增）   |
   | 特定的日期   | {'2017-8-21': '发布')   | -                                                      |

   可同时设定多个，如：

 
       //标注重要日子
       var ins1 = laydate.render({
         elem: '#test'
         ,mark: {
           '0-10-14': '生日'
           ,'0-12-31': '跨年' //每年12月31日
           ,'0-0-10': '工资' //每个月10号
           ,'2017-8-15': '' //具体日期
           ,'2017-8-20': '预发' //如果为空字符，则默认显示数字+徽章
           ,'2017-8-21': '发布'
         }
         ,done: function(value, date){
           if(date.year === 2017 && date.month === 8 && date.date === 15){ //点击2017年8月15日，弹出提示语
             ins1.hint('中国人民抗日战争胜利72周年');
           }
         }
       });
          


   非常实用的存在，是时候利用它制作你的日程表了。


   - 控件初始打开的回调


   控件在打开时触发，回调返回一个参数：/初始的日期时间对象/

 
       laydate.render({
         elem: '#test'
         ,ready: function(date){
           console.log(date); //得到初始的日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0}
         }
       });
          



   - 日期时间被切换后的回调


   年月日时间被切换时都会触发。回调返回三个参数，分别代表：/生成的值/、/日期时间对象/、/结束的日期时间对象/

 
       laydate.render({
         elem: '#test'
         ,change: function(value, date, endDate){
           console.log(value); //得到日期生成的值，如：2017-08-18
           console.log(date); //得到日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0}
           console.log(endDate); //得结束的日期时间对象，开启范围选择（range: true）才会返回。对象成员同上。
         }
       });
          



   - 控件选择完毕后的回调


   点击日期、清空、现在、确定均会触发。回调返回三个参数，分别代表：/生成的值/、/日期时间对象/、/结束的日期时间对象/

 
       laydate.render({
         elem: '#test'
         ,done: function(value, date, endDate){
           console.log(value); //得到日期生成的值，如：2017-08-18
           console.log(date); //得到日期时间对象：{year: 2017, month: 8, date: 18, hours: 0, minutes: 0, seconds: 0}
           console.log(endDate); //得结束的日期时间对象，开启范围选择（range: true）才会返回。对象成员同上。
         }
       });
          



   - 弹出控件提示


   事实上，执行核心方法 /laydate.render(options)/
   会返回一个当前实例对象。其中包含一些成员属性和方法，比如：hint 方法

 
       var ins1 = laydate.render({
         elem: '#test'
         ,change: function(value, date, endDate){
           ins1.hint(value); //在控件上弹出value值
         }
       });
          

   - 配置基础路径


   如果你不是采用 layui 或者普通 script 标签方式加载的 laydate.js，而是采用
   requirejs 等其它方式引用 laydate，那么你需要设置基础路径，以便
   laydate.css 完成加载。

 
       laydate.path = '/static/xxx/'; //laydate.js 所在目录
     
       //配置好路径后，再调用
       laydate.render(options);
          



   - 其它方法


   | 方法名                            | 备注                                                                  |
   |-----------------------------------+-----------------------------------------------------------------------|
   | laydate.getEndDate(month, year)   | 获取指定年月的最后一天，month 默认为当前月，year 默认为当前年。如：   |
   |                                   | var endDate1 = laydate.getEndDate(10); //得到 31                     |
   |                                   | var endDate2 = laydate.getEndDate(2, 2080); //得到 29                  |

   - 结语


   layDate 最早发布于 2014 年 6 月，但当时只迭代了一个版本，就再也没有更新。而时至今日，作为 layui 2.0 的核心组成之一，layDate 再度强势复活，不禁让人感慨万千！layDate 曾被我定义为：“最失败的一个组件”，被我无情搁置了整整三年。现在，是时候卸下这个标签了。
** LayIM 开发者文档

 #+BEGIN_QUOTE
   当前文档适用于 /LayIM PC 端/ 最新版，如果你正在了解的并非该版本，你可以前往其它版本阅览： [[file:layim_mobile.html][LayIM 移动版文档]]
 #+END_QUOTE

 #+BEGIN_QUOTE
   在 WebIM 似乎已被打入冷宫的今天，LayIM 正试图重新为网页带来一些社交想象。作为一款 Web 即时通讯前端解决方案（服务端需自写），LayIM 提供了全方位的前端接口支撑，不仅能让您更高效地接入到自己的通讯服务中，更能让你轻松地与
   /环信/、/融云/、/野狗/
   等第三方通讯服务平台对接。LayIM 始终坚持极简的体验，致力于拉近你的用户在 web 间的距离。
   
   LayIM/兼容除 IE6/7 以外的所有浏览器/，如果你的网站仍需兼容 ie6/7，那么强烈建议你说服你的老板或者客户。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：layim，官网地址：[[http://layim.layui.com/][layim.layui.com]]
 #+END_QUOTE



 - 开始使用



 LayIM 基于 layui 模块体系，因此你获得的其实是一个包含 LayIM 的 layui 框架，不同的是，开源版的 layui 并不包含 LayIM。捐赠后，将您获得的压缩包解压，将 layui 整个目录文件放入你的项目后，不用再对其代码做任何修改（方便下次升级）。然后您只需引入下述两个文件即可。

 
     ./build/css/layui.css
     ./build/layui.js


 
 假如你将 layui 放入你的/static/目录中，并且你的 html 页面在根目录，那么一个最直接的例子是：

 
     #+begin_src html
     <!doctype html>
     <html>
     <head>
     <meta charset="utf-8">
     <title>LayIM测试</title>
     <link rel="stylesheet" href="/static/build/layui.css" media="all">
     </head>
     <body>
     <script src="/static/build/layui.js"></script>
     <script>
     layui.use('layim', function(layim){
       //先来个客服模式压压精
       layim.config({
         brief: true //是否简约模式（如果true则不显示主面板）
       }).chat({
         name: '客服姐姐'
         ,type: 'friend'
         ,avatar: 'http://tp1.sinaimg.cn/5619439268/180/40030060651/1'
         ,id: -2
       });
     });
     </script>
     </body>
     </html>
     #+end_src
          
 通过上述方式，便可成功加载 layim。当然，你仅仅只是看到了一个"客服姐姐"的聊天面板，这等同于：Hello World!
 向“客服姐姐”问好后就忘了它吧，这份文档才刚刚开始。[[file:res.layui.com/layui/src/images/face/2.gif]]

 - 初始化配置

 一个你必须认识的方法：layim.config(options) 控制着许多重要的配置，基本上一个完整 LayIM 实例的构成由它而开始，它允许你自由设定以下参数：

 
     #+begin_src js
     layui.use('layim', function(layim){
       //基础配置
       layim.config({
     
         init: {} //获取主面板列表信息，下文会做进一步介绍
     
         //获取群员接口（返回的数据格式见下文）
         ,members: {
           url: '' //接口地址（返回的数据格式见下文）
           ,type: 'get' //默认get，一般可不填
           ,data: {} //额外参数
         }
        
         //上传图片接口（返回的数据格式见下文），若不开启图片上传，剔除该项即可
         ,uploadImage: {
           url: '' //接口地址
           ,type: 'post' //默认post
         } 
        
         //上传文件接口（返回的数据格式见下文），若不开启文件上传，剔除该项即可
         ,uploadFile: {
           url: '' //接口地址
           ,type: 'post' //默认post
         }
         //扩展工具栏，下文会做进一步介绍（如果无需扩展，剔除该项即可）
         ,tool: [{
           alias: 'code' //工具别名
           ,title: '代码' //工具名称
           ,icon: '&#xe64e;' //工具图标，参考图标文档
         }]
        
         ,msgbox: layui.cache.dir + 'css/modules/layim/html/msgbox.html' //消息盒子页面地址，若不开启，剔除该项即可
         ,find: layui.cache.dir + 'css/modules/layim/html/find.html' //发现页面地址，若不开启，剔除该项即可
         ,chatLog: layui.cache.dir + 'css/modules/layim/html/chatlog.html' //聊天记录页面地址，若不开启，剔除该项即可
       });
     });      
     #+end_src
          
 layim.config(options)的更多可选配置项见下表：

 | 可选项      | 默认值        | 类型             | 用途                                                                           |
 |-------------+---------------+------------------+--------------------------------------------------------------------------------|
 | brief       | false         | boolean          | 是否简约模式，如果设为 true，则主面板不会显示。一般可用于客服                  |
 | title       | 我的 LayIM     | string           | 主面板最小化后显示的名称                                                       |
 | min         | false         | boolean          | 用于设定主面板是否在页面打开时，始终最小化展现                                 |
 | right       | 0px           | string           | 用于设定主面板右偏移量。该参数可避免遮盖你页面右下角已经的 bar                  |
 | minRight    | 无            | string           | 用户控制聊天面板最小化时、及新消息提示层的相对 right 的 px 坐标。                |
 |             |               |                  | 如：minRight: '200px'                                                          |
 | initSkin    | 空字符        | string           | 设置初始背景，默认不开启。可设置./css/modules/layim/skin 目录下的图片文件名   |
 |             |               |                  | 如：initSkin: '5.jpg'                                                          |
 | isAudio     | false         | boolean          | 是否开启聊天工具栏音频                                                         |
 | isVideo     | false         | boolean          | 是否开启开启聊天工具栏视频                                                     |
 | notice      | false         | boolean          | 是否开启桌面消息提醒，即在浏览器之外的提醒                                     |
 | voice       | default.mp3   | string/boolean   | 设定消息提醒的声音文件（所在目录：./layui/css/modules/layim/voice/）         |
 |             |               |                  | 若不开启，设置 false 即可                                                      |
 | isfriend    | true          | boolean          | 是否开启好友                                                                   |
 | isgroup     | true          | boolean          | 是否开启群组                                                                   |
 | maxLength   | 3000          | number           | 可允许的消息最大字符长度                                                       |
 | skin        | null          | object           | 拓展背景，如：                                                                 |
 |             |               |                  |                                                                 |
 |             |               |                  |     skin: [                                                                    |
 |             |               |                  |       'http://xxx.com/skin.jpg',                                               |
 |             |               |                  |       'b.png'                                                                  |
 |             |               |                  |       …                                                                        |
 |             |               |                  |     ]                                                                          |
 |             |               |                  |                                                                                |
 |             |               |                  |                                                                  |
 | copyright   | false         | boolean          | 是否授权。如果非授权获得，或将 LayIM 应用在第三方，建议保留，即不设置。          |

 - init 数据格式



 通过 layim.config 来设定 init 参数可获得：我的信息、好友列表、群组列表。你可以采用 Ajax 配置方式，以及直接赋值列表数据。

 
     #+begin_src js
     //获取主面板列表信息
     init: {
       url: '' //接口地址（返回的数据格式见下文）
       ,type: 'get' //默认get，一般可不填
       ,data: {} //额外参数
     }  
     #+end_src
          


 那么该接口所返回的信息（response）应该严格按照下述的 JSON 格式：

 
     #+begin_src js
     {
       "code": 0 //0表示成功，其它表示失败
       ,"msg": "" //失败信息
       ,"data": {
      
         //我的信息
         "mine": {
           "username": "纸飞机" //我的昵称
           ,"id": "100000" //我的ID
           ,"status": "online" //在线状态 online：在线、hide：隐身
           ,"sign": "在深邃的编码世界，做一枚轻盈的纸飞机" //我的签名
           ,"avatar": "a.jpg" //我的头像
         }
        
         //好友列表
         ,"friend": [{
           "groupname": "前端码屌" //好友分组名
           ,"id": 1 //分组ID
           ,"list": [{ //分组下的好友列表
             "username": "贤心" //好友昵称
             ,"id": "100001" //好友ID
             ,"avatar": "a.jpg" //好友头像
             ,"sign": "这些都是测试数据，实际使用请严格按照该格式返回" //好友签名
             ,"status": "online" //若值为offline代表离线，online或者不填为在线
           }, …… ]
         }, …… ]
        
         //群组列表
         ,"group": [{
           "groupname": "前端群" //群组名
           ,"id": "101" //群组ID
           ,"avatar": "a.jpg" //群组头像
         }, …… ]
       }
     }
     #+end_src
          
 Demo：[[http://layim.layui.com/json/getList.json][getList.json]]

 
     #+begin_src js
     //里面的字段格式 同 上文的 data 中的格式。
     //注意：采用该方式时，不可以再配置url参数，否则会走Ajax模式
     init: {
       mine: {}
       ,friend: []
       ,group: []
     }
     #+end_src
     
 - members 数据格式

 通过 layim.config 来设定 members 参数可获取群员列表，假设你进行了下述配置

 
     ,members: {
       url: ' '/api/im/getMembers/'
       ,data: {}
     }     
          


 那么当点击群聊面板查看成员时，将会向 members 的 url 发送 Ajax 请求，并自动传递一个 id 参数（群组 id）。该接口所返回的信息（response）应该严格按照下述的 JSON 格式：

 
     {
       "code": 0 //0表示成功，其它表示失败
       ,"msg": "" //失败信息
       ,"data": {
         "list": [{
           "username": "马小云" //群员昵称
           ,"id": "168168" //群员id
           ,"avatar": "http://tp4.sinaimg.cn/2145291155/180/5601307179/1" //群员头像
           ,"sign": "让天下没有难写的代码" //群员签名
         }, …… ]
       }
     }      
          


 Demo：[[http://layim.layui.com/json/getMembers.json][getMembers.json]]




 - 上传图片



 通过 layim.config 来设定 uploadImage 参数可进行图片上传，假设你进行了下述配置

 
     ,uploadImage: {
       url: ''
     }     
          


 那么当点击聊天面板上传图片时，将会向 uploadImage 的 url 发送 HTTP 请求，进行图片上传。我们会给你传递一个 name="file"的文件表单域，你接受即可。该接口所返回的信息（response）应该严格按照下述的 JSON 格式：

 
     #+begin_src js
     {
       "code": 0 //0表示成功，其它表示失败
       ,"msg": "" //失败信息
       ,"data": {
         "src": "http://cdn.xxx.com/upload/images/a.jpg" //图片url
       }
     }      
     #+end_src
          
 - 上传文件

 通过 layim.config 来设定 uploadImage 参数可进行文件上传，事实上跟图片上传非常类似有木有？假设你进行了下述配置

 
     #+begin_src js
     ,uploadFile: {
       url: ' ''
     }     
     #+end_src
          


 那么当点击聊天面板上传文件时，将会向 uploadFile 的 url 发送 HTTP 请求，进行文件上传。我们会给你传递一个 name="file"的文件表单域，你接受即可。该接口所返回的信息（response）应该严格按照下述的 JSON 格式：

 
     #+begin_src js
     {
       "code": 0 //0表示成功，其它表示失败
       ,"msg": "" //失败信息
       ,"data": {
         "src": "http://cdn.xxx.com/upload/file/LayIM.zip" //文件url
         ,"name": "LayIM.zip" //文件名
       }
     }      
     #+end_src
 - 扩展工具栏

 你可以对聊天面板的工具栏区域进行扩展，以便实现更丰富的聊天内容。首先在你 layim.config 中设定好要扩展的图标、名称等信息，如：

 
     #+begin_src js
     layim.config({
       //可同时配置多个
       tool: [{
         alias: 'code' //工具别名
         ,title: '代码' //工具名称
         ,icon: '&#xe64e;' //工具图标，参考图标文档
       }] 
     })
     #+end_src
          
 那么在工具栏中将会出现一个代码的图标，如何在点击它时实现你想要的功能呢？很简单，你只需要：

 
     #+begin_src js
     //监听自定义工具栏点击，以添加代码为例
     layim.on('tool(code)', function(insert, send, obj){ //事件中的tool为固定字符，而code则为过滤器，对应的是工具别名（alias）
       layer.prompt({
         title: '插入代码'
         ,formType: 2
         ,shade: 0
       }, function(text, index){
         layer.close(index);
         insert('[pre class=layui-code]' + text + '[/pre]'); //将内容插入到编辑器，主要由insert完成
         //send(); //自动发送
       });
       console.log(this); //获取当前工具的DOM对象
       console.log(obj); //获得当前会话窗口的DOM对象、基础信息
     });   
     #+end_src
          
 - 消息盒子
 你可以配置 msgbox 指向一个盒子页面地址，从而为主面板赋予各种系统消息机制。

     #+begin_src js
     layim.config({
       msgbox: layui.cache.dir + 'css/modules/layim/html/msgbox.html' //消息盒子页面地址，若不开启，剔除该项即可
     });      
     #+end_src
          


 它指向的是我们内置的一个盒子模版（你也可以换成你自己的页面），里面写好了所有代码，你只需要按照里面的注释配置好一些接口即可。
 当你试图在盒子的图标上实时获取到最新的系统消息数时，你可以借助以下方法完成。

 
     layim.msgbox(5); //数字即为你通过websocket或者Ajax实时获取到的最新消息数量
     //它将在主面板的消息盒子icon上不断显隐提示，直到点击后自动消失
     
 - 查找页面

 为了避免联调的复杂性且需求不一，所以官方暂不提供该模版结构与样式，实际使用时，可移至该文件到你的项目中，对页面自行把控

     #+begin_src js
     layim.config({
       find: layui.cache.dir + 'css/modules/layim/html/find.html' //发现页面地址，若不开启，剔除该项即可
     });      
     #+end_src

 - 查看更多聊天记录

 LayIM 会在本地存储每个会话的最新 20 条记录。但一般服务端也要存储存储一份，为了避免联调的复杂性，我们并不内置更多聊天记录的展示。而是弹出一个聊天记录的 layer 窗口，这意味着你可以随意发挥聊天记录的页面。通过 layim.config 配置 chatLog 来指向聊天记录的 URL。假设你进行了下述设定：

     #+begin_src js
     layim.config({
       //以下为我们内置的模版，也可以换成你的任意页面。若不开启，剔除该项即可
       chatLog: layui.cache.dir + 'css/modules/layim/html/chatlog.html' 
     });      
     #+end_src
          
 那么，我们会在 chatLog 所对应的 URL 后面动态追加当前聊天窗口的 ID（即好友或群组 ID）和类型，如：/chat/log?id=123&type=friend 详细情况可以打开 /chatlog.html/ 去了解，里面有我们写好的代码。
 - 富文本内容格式

 LayIM 的聊天多类型内容解析采用内部特定的文本格式，你可以借助它在聊天内容区域呈现多样化的内容。目前我们支持的内容如下：
 
     超链接格式：a(地址)[文本]       如：a(http://www.layui.com)[layui]   
     图片格式：img[地址]            如：img[http://cdn.layui.com/xxx/a.jpg]
     文件格式：file(地址)[文本]      如：file(http://cdn.layui.com/download/layim.zip)[layim.zip]
     音频格式：audio[地址]          如：audio[http://cdn.layui.com/xxx/a.mp3]
     视频格式：video[地址]          如：video[http://cdn.layui.com/xxx/a.avi]
          
 - 接入 WebSocket

 一般来说，对接到第三方通讯平台是个更靠谱的选择，比如：/环信/、/融云/、/野狗/。它们都可以是 LayIM 的最佳拍档，你会省去许多工作。

 但如果你想保证绝对的数据隐私，你也可以自己搭建通讯服务。目前所有的主流 Web 语言都有对 WebSocket 做很好的支持，其中也有很多优秀的通讯框架可以任你挑选，因此万万不可畏惧它的存在，除非你真的想用 Ajax 轮询去解决消息 I/O。WebSocket 会使得你的消息接受和传递变得极其轻松，最重要的一点是，性能卓绝。WebSocket 的建立非常简单：

 
     layui.use('layim', function(layim){
      
       //建立WebSocket通讯
       //注意：如果你要兼容ie8+，建议你采用 socket.io 的版本。下面是以原生WS为例
      
       var socket = new WebSocket('ws://localhost:8090');
      
       //发送一个消息
       socket.send('Hi Server, I am LayIM!');
     //更多情况下，一般是传递一个JSON
     socket.send(JSON.stringify({
       type: '' //随便定义，用于在服务端区分消息类型
       ,data: {}
     })); 


 //连接成功时触发 socket.onopen = function(){ socket.send('XXX 连接成功');
 }; //监听收到的消息 socket.onmessage = function(res){
 //res 为接受到的值，如 {"emit": "messageName", "data": {}}
 //emit 即为发出的事件名，用于区分不同的消息 };
 另外还有 onclose、onerror，分别是在链接关闭和出错时触发。
 //基本上常用的就上面几个了，是不是非一般的简单？[[file:res.layui.com/layui/src/images/face/20.gif]]
 });





 服务端层面，不用害怕，事情也远没有那么复杂。这些文档也许可以帮助到你：[[http://fly.layui.com/jie/3244.html][LayIM 接入案例/教程大集锦，含Node.js/Java/.NET/PHP]]


 - 事件监听

 方法：layim.on(event, callback) 用于 LayIM 事件监听。接受两个参数。第一个参数 event 即事件名，第二个参数 callback 即事件回调。
 - ready 事件

 事件名：ready，用于监听 LayIM 初始化就绪。由于主面板的渲染，需建立在 init 接口请求完毕的基础上，而一些操作必须等到主面板渲染完毕后才能操作，所以这个时候就可以放入 ready 事件的回调体中来执行。其回调接受一个 object 类型的参数，携带一些基础配置信息、我的用户信息、好友/群列表信息、本地数据库信息等，调用方式：

 
     layim.on('ready', function(options){
       console.log(options);
       //do something
     });
     //注意：以下情况不会触发 ready事件，即代码无需写在ready里面
     * 简约模式（即brief: true时）不会触发该事件
     * init直接赋值mine、friend的情况下（只有设置了url才会执行 ready 事件）
          





 - 监听在线状态切换



 事件名：online，看到主面板你的昵称后的 icon 么，没错，就是它。当前支持“在线”、“隐身”两种状态切换。分别以 online 和 hide 的 string 类型的值传递给回调参数。如：

 
     layim.on('online', function(status){
       console.log(status); //获得online或者hide
      
       //此时，你就可以通过Ajax将这个状态值记录到数据库中了。
       //服务端接口需自写。
     });     
          
 - 监听修改签名
 事件名：sign 当主面板的签名被改动后触发，并返回新的签名

 
     layim.on('sign', function(value){
       console.log(value); //获得新的签名
      
       //此时，你就可以通过Ajax将新的签名同步到数据库中了。
     });     
          
 - 监听更换背景皮肤

事件名：setSkin 当点击更换背景皮肤时触发，返回特定目录下的图片文件名和 src 路径

     #+begin_src js
     layim.on('setSkin', function(filename, src){
       console.log(filename); //获得文件名，如：1.jpg
       console.log(src); //获得背景路径，如：http://res.layui.com/layui/src/css/modules/layim/skin/1.jpg
     });     
     #+end_src
          
 - 监听发送的消息



 事件名：sendMessage，每当你发送一个消息，都可以通过该事件监听到。回调参数接受一个 object 类型的值，携带发送的聊天信息。如：

 
     #+begin_src js
     layim.on('sendMessage', function(res){
       var mine = res.mine; //包含我发送的消息及我的信息
     //mine的结构如下：
     {
       avatar: "avatar.jpg" //我的头像
       ,content: "你好吗" //消息内容
       ,id: "100000" //我的id
       ,mine: true //是否我发送的消息
       ,username: "纸飞机" //我的昵称
     }


 var to = res.to; //对方的信息
 
     //to的结构如下：
     {
       avatar: "avatar.jpg"
       ,id: "100001"
       ,name: "贤心"
       ,sign: "这些都是测试数据，实际使用请严格按照该格式返回"
       ,type: "friend" //聊天类型，一般分friend和group两种，group即群聊
       ,username: "贤心"
     }


 //监听到上述消息后，就可以轻松地发送 socket 了，如：
 socket.send(JSON.stringify({ type: 'chatMessage'
 //随便定义，用于在服务端区分消息类型 ,data: res })); });
     #+end_src
 - 监听接受的消息

 事件的监听并非 layim 提供，而是 WebSocket 提供。
 检测到 WebSocket 事件后，执行 layim 的内置方法：layim.getMessage(options)
 即可显示消息到聊天面板（如果消息所指定的聊天面板没有打开，则会进入本地的消息队列中，直到指定的聊天面板被打开，方可显示。），这是一个对你有用的例子：

 
     //监听收到的聊天消息，假设你服务端emit的事件名为：chatMessage
     socket.onmessage = function(res){
       res = JSON.parse(res);
       if(res.emit === 'chatMessage'){
         layim.getMessage(res.data); //res.data即你发送消息传递的数据（阅读：监听发送的消息）
       }
     };
     
     //如果是来自于用户的聊天消息，它必须接受以下字段
     layim.getMessage({
       username: "纸飞机" //消息来源用户名
       ,avatar: "http://tp1.sinaimg.cn/1571889140/180/40030060651/1" //消息来源用户头像
       ,id: "100000" //消息的来源ID（如果是私聊，则是用户id，如果是群聊，则是群组id）
       ,type: "friend" //聊天窗口来源类型，从发送消息传递的to里面获取
       ,content: "嗨，你好！本消息系离线消息。" //消息内容
       ,cid: 0 //消息id，可不传。除非你要对消息进行一些操作（如撤回）
       ,mine: false //是否我发送的消息，如果为true，则会显示在右方
       ,fromid: "100000" //消息的发送者id（比如群组中的某个消息发送者），可用于自动解决浏览器多窗口时的一些问题
       ,timestamp: 1467475443306 //服务端时间戳毫秒数。注意：如果你返回的是标准的 unix 时间戳，记得要 *1000
     });


 //如果是来自于系统的聊天面板的消息
 
     #+begin_src js
     layim.getMessage({
       system: true //系统消息
       ,id: 1111111 //聊天窗口ID
       ,type: "friend" //聊天窗口类型
       ,content: '对方已掉线'
     });
     #+end_src


 - 监听查看群员

 事件名：members，在群聊面板中查看全部成员时触发，该事件返回获取群员接口（即 layim.config 中的 members）的 response 信息。
 
     #+begin_src js
     layim.on('members', function(data){
       console.log(data);
     });
     #+end_src

 - 监听聊天窗口的切换

 事件名：chatChange，坦白而言，似乎没什么卵用。不过有总比没有好。该事件返回一个 object 类型的参数，携带当前聊天面板的容器、基础信息等。

 #+begin_src js
 
     layim.on('chatChange', function(obj){
       console.log(obj);
     });
 #+end_src

 - 自定义一个聊天窗口

 方法名：layim.chat(options)，是否似曾相识，没错，我们见过文档最开始的“客服姐姐”用的就是该方法。它允许你自定义任意模式的聊天窗口，先看例子吧：

 
     //自定义聊天窗口
     layim.chat({
       name: '张三' //名称
       ,type: 'friend' //聊天类型
       ,avatar: 'http://tp1.sinaimg.cn/5619439268/180/40030060651/1' //头像
       ,id: 11111 //好友id
     })
     
     //自定义客服窗口
     layim.config({
       brief: true //简约模式，不显示主面板
     }).chat({
       name: '在线客服二' //名称
       ,type: 'friend' //聊天类型
       ,avatar: 'http://tp1.sinaimg.cn/5619439268/180/40030060651/1' //头像
       ,id: -2 //定义唯一的id方便你处理信息
     });
     layim.setChatMin(); //收缩聊天面板


 //自定义群聊（对于想搞一个临时性的房间，貌似是挺有意思的）
 
     layim.chat({
       name: 'LayIM畅聊'
       ,type: 'group' //群组类型
       ,avatar: 'http://tp2.sinaimg.cn/5488749285/50/5719808192/1'
       ,id: 10000000 //定义唯一的id方便你处理信息
       ,members: 123 //成员数，不好获取的话，可以设置为0
     });






 该方法结合 brief:
 true（简约模式），可以免去较为复杂的数据配置。轻量地建立一个聊天面板。拥有较大的平台实用性。可以预见的是，它应该会成为 LayIM 一个露脸率最高的存在。想象一下吧，对你而言是否如此？




 - 初始最小化聊天界面



 方法名：layim.setChatMin()，如果你在初始的状态下不想展开聊天面板（譬如悬浮的在线客服），那么该方法会派上用场，使用很简单，就不过多啰嗦了。

 
     layim.setChatMin();





 - 更新当前会话状态



 方法名：layim.setChatStatus(str)，可用于显示：对方输入状态、在线离线状态等，如：

 
     //每次窗口打开或切换，即更新对方的状态
     layim.on('chatChange', function(res){
       var type = res.data.type;
       if(type === 'friend'){
         layim.setChatStatus('<span style="color:#FF5722;">在线</span>'); //模拟标注好友在线状态
       } else if(type === 'group'){
         //模拟系统消息
         layim.getMessage({
           system: true //系统消息
           ,id: 111111111
           ,type: "group"
           ,content: '贤心加入群聊'
         });
       }
     });
          





 - 弹出添加面板



 方法名：layim.add(data)
 执行该方法将弹出一个我们内置的添加面板，可以帮助你完成：申请添加好友、申请添加群。参数格式如下：

 
     layim.add({
       type: 'friend' //friend：申请加好友、group：申请加群
       ,username: 'xxx' //好友昵称，若申请加群，参数为：groupname
       ,avatar: 'a.jpg' //头像
       ,submit: function(group, remark, index){ //一般在此执行Ajax和WS，以通知对方
         console.log(group); //获取选择的好友分组ID，若为添加群，则不返回值
         console.log(remark); //获取附加信息
         layer.close(index); //关闭改面板
       }
     });
          





 - 好友分组面板



 方法名：layim.setFriendGroup(data)
 执行该方法将弹出一个好友分组面板，以完成将好友追加到主面板的操作：

 
     layim.setFriendGroup({
       type: 'friend'
       ,username: 'xxx' //好友昵称，若申请加群，参数为：groupname
       ,avatar: 'a.jpg' //头像
       ,group: layim.cache().friend //获取好友列表数据
       ,submit: function(group, index){
         //一般在此执行Ajax和WS，以通知对方已经同意申请
         //……
        
         //同意后，将好友追加到主面板
         layim.addList(data); //见下文
       }
     });
          





 - 添加好友/群到主面板



 方法名：layim.addList(options)，当你的 WebSocket 监听到有好友或者群新增时，需让 LayIM 的主面板同步添加的信息，可用该方法。先看看例子：

 
     layim.on('ready', function(res){
      
      
       //监听添加列表的socket事件，假设你服务端emit的事件名为：addList
       socket.onmessage = function(res){
         if(res.emit === 'addList'){
           layim.addList(res.data); //如果是在iframe页，如LayIM设定的add面板，则为 parent.layui.layim.addList(data);
         }
       };
      
       //需要特别注意的是回调返回的res
      
       //如果添加的是好友，res的结构必须是这样的
     {
       type: 'friend' //列表类型，只支持friend和group两种
       ,avatar: "a.jpg" //好友头像
       ,username: '冲田杏梨' //好友昵称
       ,groupid: 2 //所在的分组id
       ,id: "1233333312121212" //好友id
       ,sign: "本人冲田杏梨将结束AV女优的工作" //好友签名
     }


 //如果添加的是群组，res 的结构必须是这样的
 
     {
       type: 'group' //列表类型，只支持friend和group两种
       ,avatar: "a.jpg" //群组头像
       ,groupname: 'Angular开发' //群组名称
       ,id: "12333333" //群组id
     }


 });








 - 从主面板移除好友/群



 方法名：layim.removeList(options)
 当你的 WebSocket 监听到有好友或者群删除时，需让 LayIM 的主面板同步删除的信息，可用该方法。它的调用非常简单，只需要传两个 key：

 
     layim.removeList({
       type: 'friend' //或者group
       ,id: 1238668 //好友或者群组ID
     });
     //如果是在iframe页，如LayIM设定的add面板，则为：
     parent.layui.layim.removeList({
       type: 'friend' //或者group
       ,id: 1238668 //好友或者群组ID
     });
          





 - 实时更新好友列表离线状态



 方法名：layim.setFriendStatus(id, type)

 <<>>
 
     layim.setFriendStatus(11111, 'online'); //设置指定好友在线，即头像取消置灰
     layim.setFriendStatus(11111, 'offline'); //设置指定好友在线，即头像置灰
          


 @@html:</a>@@


 <<>>



 - 获取 cache 数据



 方法名：layim.cache()，获取 LayIM 的 cache 信息，返回的信息结构和 ready 事件获得的信息一样，不同的是，改方法始终会获取到最新的 cache。

 
     //输出的信息不妨在你的Chrome控制台看看（需在引有LayIM的页面中），在此就不做列举了
     console.log(layim.cache()) 





 - 删除本地数据



 
     var cache =  layui.layim.cache();
     var local = layui.data('layim')[cache.mine.id]; //获取当前用户本地数据
     
     //这里以删除本地聊天记录为例
     delete local.chatlog;
     
     //向localStorage同步数据
     layui.data('layim', {
       key: cache.mine.id
       ,value: local
     });
          





 - 关于版权



 LayIM 目前并非开源产品，因此如果你是通过官网捐赠渠道获得 LayIM，你将成为 LayIM 的终身会员，并可以将 LayIM 应用在任意正规平台。如果你通过非捐赠渠道获得 LayIM，我们并不会进行过多追究，但是请勿对
 LayIM 本身二次出售。版权最终解释权为：layui.com 所有






 --------------

 [[https://www.layui.com/doc/modules/layim.html]]

 
 











 --------------

** 分页模块文档 - layui.laypage
   layPage 致力于提供极致的分页逻辑，既可轻松胜任异步分页，也可作为页面刷新式分页。自 layui 2.0 开始，无论是从核心代码还是 API 设计，layPage
   都完成了一次蜕变。清爽的 UI、灵活的排版，极简的调用方式，这一切的优质元素，都将毫无违和感地镶嵌在你的页面之中。

   模块加载名称：laypage

*** 快速使用


  laypage 的使用非常简单，指向一个用于存放分页的容器，通过服务端得到一些初始值，即可完成分页渲染：

 
  #+begin_src html
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>layPage快速使用</title>
        <link rel="stylesheet" href="/static/build/layui.css" media="all">
      </head>
      <body>
     
      <div id="test1"></div>
     
      <script src="/static/build/layui.js"></script>
      <script>
      layui.use('laypage', function(){
        var laypage = layui.laypage;
      
        //执行一个laypage实例
        laypage.render({
          elem: 'test1' //注意，这里的 test1 是 ID，不用加 # 号
          ,count: 50 //数据总数，从服务端得到
        });
      });
      </script>
      </body>
      </html>
      #+end_src
          
  - 基础参数选项


  通过核心方法：/laypage.render(options)/
  来设置基础参数。由于使用非常简单，本篇直接罗列核心接口的参数选项

  | 参数选项   | 说明                                                                                                                                                                                                                 | 类型             | 默认值                     |
  |------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------------+----------------------------|
  | elem       | 指向存放分页的容器，值可以是容器 ID、DOM 对象。如：                                                                                                                                                                  | String/Object    | -                          |
  |            | 1. elem: 'id' /注意：这里不能加 # 号/                                                                                                                                                                              |                  |                            |
  |            | 2. elem: document.getElementById('id')                                                                                                                                                                               |                  |                            |
  | count      | 数据总数。一般通过服务端得到                                                                                                                                                                                         | Number           | -                          |
  | limit      | 每页显示的条数。laypage 将会借助 count 和 limit 计算出分页数。                                                                                                                                                        | Number           | 10                         |
  | limits     | 每页条数的选择项。如果 layout 参数开启了 limit，则会出现每页条数的 select 选择框                                                                                                                                       | Array            | [10, 20, 30, 40, 50]       |
  | curr       | 起始页。一般用于刷新类型的跳页以及 HASH 跳页。如：                                                                                                                                                                     | Number           | 1                          |
  |            |                                                                                                                                                                                                       |                  |                            |
  |            |     //开启 location.hash 的记录                                                                                                                                                                                        |                  |                            |
  |            |     laypage.render({                                                                                                                                                                                                 |                  |                            |
  |            |       elem: 'test1'                                                                                                                                                                                                  |                  |                            |
  |            |       ,count: 500                                                                                                                                                                                                    |                  |                            |
  |            |       ,curr: location.hash.replace('#!fenye=', '') //获取起始页                                                                                                                                                      |                  |                            |
  |            |       ,hash: 'fenye' //自定义 hash 值                                                                                                                                                                                  |                  |                            |
  |            |     });                                                                                                                                                                                                              |                  |                            |
  |            |                                                                                                                                                                                                                      |                  |                            |
  |            |                                                                                                                                                                                                        |                  |                            |
  | groups     | 连续出现的页码个数                                                                                                                                                                                                   | Number           | 5                          |
  | prev       | 自定义“上一页”的内容，支持传入普通文本和 HTML                                                                                                                                                                         | String           | 上一页                     |
  | next       | 自定义“下一页”的内容，同上                                                                                                                                                                                           | String           | 下一页                     |
  | first      | 自定义“首页”的内容，同上                                                                                                                                                                                             | String           | 1                          |
  | last       | 自定义“尾页”的内容，同上                                                                                                                                                                                             | String           | 总页数值                   |
  | layout     | 自定义排版。可选值有：/count/（总条目输区域）、/prev/（上一页区域）、/page/（分页区域）、/next/（下一页区域）、/limit/（条目选项区域）、/refresh/（页面刷新区域。注意：layui 2.3.0 新增） 、/skip/（快捷跳页区域）   | Array            | ['prev', 'page', 'next']   |
  | theme      | 自定义主题。支持传入：/颜色值/，或/任意普通字符/。如：                                                                                                                                                             | String           | -                          |
  |            | 1. theme: '#c00'                                                                                                                                                                                                   |                  |                            |
  |            | 2. theme: 'xxx' //将会生成 class="layui-laypage-xxx" 的 CSS 类，以便自定义主题                                                                                                                                         |                  |                            |
  | hash       | 开启 location.hash，并自定义 hash 值。如果开启，在触发分页时，会自动对 url 追加：/#!hash 值={curr}/ 利用这个，可以在页面载入时就定位到指定页                                                                             | String/Boolean   | false                      |


  - jump - 切换分页的回调


  当分页被切换时触发，函数返回两个参数：/obj/（当前分页的所有选项值）、first（是否首次，一般用于初始加载的判断）

 
      #+begin_src js
      laypage.render({
        elem: 'test1'
        ,count: 70 //数据总数，从服务端得到
        ,jump: function(obj, first){
          //obj包含了当前分页的所有参数，比如：
          console.log(obj.curr); //得到当前页，以便向服务端请求对应页的数据。
          console.log(obj.limit); //得到每页显示的条数
        
          //首次不执行
          if(!first){
            //do something
          }
        }
      });
      #+end_src
          

  - 结束


  正如你看到对的，laypage 只负责分页本身的逻辑，具体的数据请求与渲染需要另外去完成。laypage 不仅能应用在一般的异步分页上，还可直接对一段已知数据进行分页展现，更可以取代传统的超链接分页，如果你无需考虑 SEO 的话（因为
  laypage 的分页是 JS 动态生成的）。

** 模板引擎文档 - layui.laytpl

 #+BEGIN_QUOTE
   laytpl 是 JavScript
   模板引擎，在字符解析上有着比较出色的表现，欠缺之处在于异常调试上。由于传统意义的前端模板引擎已经变得不再流行，/所以
   laytpl
   后续可能会进行重写/，目前方向暂时还没有想好，预计会在 layui 比较稳定后开始实施。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/laytpl/，在线调试：[[https://www.layui.com/demo/laytpl.html][http://www.layui.com/demo/laytpl.html]]
 #+END_QUOTE

 - 快速使用


 与一般的字符拼接不同的是，laytpl 的模板可与数据分离，集中把逻辑处理放在 View 层，提升代码可维护性，尤其是针对大量模板渲染的情况。

 
     #+begin_src js
     layui.use('laytpl', function(){
       var laytpl = layui.laytpl;
      
       //直接解析字符
       laytpl('{{ d.name }}是一位公猿').render({
         name: '贤心'
       }, function(string){
         console.log(string); //贤心是一位公猿
       });
      
       //你也可以采用下述同步写法，将 render 方法的回调函数剔除，可直接返回渲染好的字符
       var string =  laytpl('{{ d.name }}是一位公猿').render({
         name: '贤心'
       });
       console.log(string);  //贤心是一位公猿
      
       //如果模板较大，你也可以采用数据的写法，这样会比较直观一些
       laytpl([
         '{{ d.name }}是一位公猿'
         ,'其它字符 {{ d.content }}  其它字符'
       ].join(''))
     }); 
     #+end_src
          
 你也可以将模板存储在页面或其它任意位置：

 
     #+begin_src js
     //第一步：编写模版。你可以使用一个script标签存放模板，如：
     <script id="demo" type="text/html">
       <h3>{{ d.title }}</h3>
       <ul>
       {{#  layui.each(d.list, function(index, item){ }}
         <li>
           <span>{{ item.modname }}</span>
           <span>{{ item.alias }}：</span>
           <span>{{ item.site || '' }}</span>
         </li>
       {{#  }); }}
       {{#  if(d.list.length === 0){ }}
         无数据
       {{#  } }} 
       </ul>
     </script>
     
     //第二步：建立视图。用于呈现渲染结果。
     <div id="view"></div>
     
     //第三步：渲染模版
     var data = { //数据
       "title":"Layui常用模块"
       ,"list":[{"modname":"弹层","alias":"layer","site":"layer.layui.com"},{"modname":"表单","alias":"form"}]
     }
     var getTpl = demo.innerHTML
     ,view = document.getElementById('view');
     laytpl(getTpl).render(data, function(html){
       view.innerHTML = html;
     });
     #+end_src
          
 - 模版语法


 | 语法                      | 说明                                                                          | 示例                                              |
 |---------------------------+-------------------------------------------------------------------------------+---------------------------------------------------|
 | {{ d.field }}             | 输出一个普通字段，不转义 html                                                  |                                    |
 |                           |                                                                               |     <div>{{ d.content }}</div>                    |
 |                           |                                                                               |                                                   |
 |                           |                                                                               |                                     |
 | {{= d.field }}            | 输出一个普通字段，并转义 html                                                  |                                    |
 |                           |                                                                               |     <h2>{{= d.title }}</h2>                       |
 |                           |                                                                               |                                                   |
 |                           |                                                                               |                                     |
 | {{# JavaScript 表达式 }}   | JS 语句。一般用于逻辑处理。用分隔符加 # 号开头。                            |                                    |
 |                           |                                                                             |     {{#                                           |
 |                           | 注意：如果你是想输出一个函数，正确的写法是：{{ fn() }}，而不是：{{# fn() }}   |       var fn = function(){                        |
 |                           |                                                                               |         return '2017-08-18';                      |
 |                           |                                                                               |       };                                          |
 |                           |                                                                               |     }}                                            |
 |                           |                                                                               |                                                   |
 |                           |                                                                               |     {{#  if(true){ }}                             |
 |                           |                                                                               |       开始日期：{{ fn() }}                        |
 |                           |                                                                               |     {{#  } else { }}                              |
 |                           |                                                                               |       已截止                                      |
 |                           |                                                                               |     {{#  } }}                                     |
 |                           |                                                                               |                                                   |
 |                           |                                                                               |                                     |
 | {{! template !}}          | 对一段指定的模板区域进行过滤，即不解析该区域的模板。注：layui 2.1.6 新增      |                                    |
 |                           |                                                                               |     <div> {{! 这里面的模板不会被解析  !}}</div>   |
 |                           |                                                                               |                                                   |
 |                           |                                                                               |                                     |


 - 分隔符

 如果模版默认的 {{ }} 分隔符与你的其它模板（一般是服务端模板）存在冲突，你也可以重新定义分隔符：

 #+begin_src js
 
     laytpl.config({
       open: '<%',
       close: '%>'
     });
     
     //分割符将必须采用上述定义的
     laytpl([
       '<%# var type = "公"; %>' //JS 表达式
       ,'<% d.name %>是一位<% type %>猿。'
     ].join('')).render({
       name: '贤心'
     }, function(string){
       console.log(string); //贤心是一位公猿
     });   
 #+end_src
          

 - 结语


 laytpl 应用在 layui 的很多模块中，如：layim、table 等。尽管传统意义的前端模板引擎已经变得不再流行，但 laytpl 仍然可以发挥一定作用，不妨尝试一下吧。

** table 数据表格文档 - layui.table

 #+BEGIN_QUOTE
   table 模块是我们的又一走心之作，在 layui 2.0 的版本中全新推出，是
   layui
   最核心的组成之一。它用于对表格进行一些列功能和动态化数据操作，涵盖了日常业务所涉及的几乎全部需求。支持固定表头、固定行、固定列左/列右，支持拖拽改变列宽度，支持排序，支持多级表头，支持单元格的自定义模板，支持对表格重载（比如搜索、条件筛选等），支持复选框，支持分页，支持单元格编辑等等一些列功能。尽管如此，我们仍将对其进行完善，在控制代码量和性能的前提下，不定期增加更多人性化功能。table
   模块也将是 layui 重点维护的项目之一。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/table/
 #+END_QUOTE

 - 快速使用


 创建一个 table 实例最简单的方式是，在页面放置一个元素 <table id="demo"></table>，然后通过 table.render() 方法指定该容器，如下所示：
   #+begin_src html
   <table id="demo" lay-filter="test" class="layui-table">
   </table>
   #+end_src


 上面你已经看到了一个简单数据表格的基本样子，你一定迫不及待地想知道它的使用方式。下面就是它对应的代码：

 #+begin_src html
 
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>table模块快速使用</title>
       <link rel="stylesheet" href="/layui/css/layui.css" media="all">
     </head>
     <body>
     
     <table id="demo" lay-filter="test"></table>
     
     <script src="/layui/layui.js"></script>
     <script>
     layui.use('table', function(){
       var table = layui.table;
      
       //第一个实例
       table.render({
         elem: '#demo'
         ,height: 312
         ,url: '/demo/table/user/' //数据接口
         ,page: true //开启分页
         ,cols: [[ //表头
           {field: 'id', title: 'ID', width:80, sort: true, fixed: 'left'}
           ,{field: 'username', title: '用户名', width:80}
           ,{field: 'sex', title: '性别', width:80, sort: true}
           ,{field: 'city', title: '城市', width:80} 
           ,{field: 'sign', title: '签名', width: 177}
           ,{field: 'experience', title: '积分', width: 80, sort: true}
           ,{field: 'score', title: '评分', width: 80, sort: true}
           ,{field: 'classify', title: '职业', width: 80}
           ,{field: 'wealth', title: '财富', width: 135, sort: true}
         ]]
       });
      
     });
     </script>
     </body>
     </html>
 #+end_src


 一切都并不会陌生：绑定容器、设置数据接口、在表头设定对应的字段，剩下的...就交给
 layui
 吧。你的牛刀是否早已饥渴难耐？那么不妨现在就去小试一波吧。数据接口可参考：[[https://www.layui.com/demo/table/user/?page=1&limit=30][返回的数据]]，规则在下文也有讲解。


 - 三种初始化渲染方式


 在上述“快速使用”的介绍中，你已经初步见证了 table
 模块的信手拈来，但其使用方式并不止那一种。我们为了满足各种情况下的需求，对
 table 模块做了三种初始化的支持，你可按照个人喜好和实际情况灵活使用。


 |       | 方式                                          | 机制                     | 适用场景                                                                 |
 |-------+-----------------------------------------------+--------------------------+--------------------------------------------------------------------------|
 | 01.   | [[index_u33.html#methodRender][方法渲染]]     | 用 JS 方法的配置完成渲染   | （推荐）无需写过多的 HTML，在 JS 中指定原始元素，再设定各项参数即可。    |
 | 02.   | [[index_u33.html#autoRender][自动渲染]]       | HTML 配置，自动渲染       | 无需写过多 JS，可专注于 HTML 表头部分                                    |
 | 03.   | [[index_u33.html#parseTable][转换静态表格]]   | 转化一段已有的表格元素   | 无需配置数据接口，在 JS 中指定表格元素，并简单地给表头加上自定义属性即可   |

 - 方法渲染


 其实这是“自动化渲染”的手动模式，本质类似，只是“方法级渲染”将基础参数的设定放在了 JS 代码中，且原始的 table 标签只需要一个 选择器：

    #+begin_src html
    <table id="demo" lay-filter="test"></table>
    var table = layui.table;
     
     //执行渲染
     table.render({
       elem: '#demo' //指定原始表格元素选择器（推荐id选择器）
       ,height: 315 //容器高度
       ,cols: [{}] //设置表头
       //,…… //更多参数参考右侧目录：基本参数选项
     });
    #+end_src
        

 事实上我们更推荐采用“方法级渲染”的做法，其最大的优势在于你可以脱离 HTML 文件，而专注于 JS 本身。尤其对于项目的频繁改动及发布，其便捷性会体现得更为明显。而究竟它与“自动化渲染”的方式谁更简单，也只能由各位猿猿们自行体味了。

 备注：table.render()方法返回一个对象：var tableIns = table.render(options)，可用于对当前表格进行“重载”等操作，详见目录：[[index_u33.html#reload][表格重载]]

 - 自动渲染


 所谓的自动渲染，即：在一段 table 容器中配置好相应的参数，由 table 模块内部自动对其完成渲染，而无需你写初始的渲染方法。其特点在上文也有阐述。你需要关注的是以下三点：
 
 1) 带有 /class="layui-table"/ 的 /<table>/ 标签。
 2) 对标签设置属性 /lay-data=""/ 用于配置一些基础参数
 3) 在 /<th>/ 标签中设置属性/lay-data=""/用于配置表头信息


 按照上述的规范写好 table 原始容器后，只要你加载了 layui 的 table 模块，就会自动对其建立动态的数据表格。下面是一个示例：

#+begin_src html
     <table class="layui-table" lay-data="{height:315, url:'/demo/table/user/', page:true, id:'test'}" lay-filter="test">
       <thead>
         <tr>
           <th lay-data="{field:'id', width:80, sort: true}">ID</th>
           <th lay-data="{field:'username', width:80}">用户名</th>
           <th lay-data="{field:'sex', width:80, sort: true}">性别</th>
           <th lay-data="{field:'city'}">城市</th>
           <th lay-data="{field:'sign'}">签名</th>
           <th lay-data="{field:'experience', sort: true}">积分</th>
           <th lay-data="{field:'score', sort: true}">评分</th>
           <th lay-data="{field:'classify'}">职业</th>
           <th lay-data="{field:'wealth', sort: true}">财富</th>
         </tr>
       </thead>
     </table>
#+end_src
        
 - 转换静态表格


 假设你的页面已经存在了一段有内容的表格，它由原始的 table 标签组成，这时你需要赋予它一些动态元素，比如拖拽调整列宽？比如排序等等？那么你同样可以很轻松地去实现。如下所示：


 | 昵称    | 积分   | 签名                  |
 |---------+--------+-----------------------|
 | 贤心 1   | 66     | 人生就像是一场修行 a   |
 | 贤心 2   | 88     | 人生就像是一场修行 b   |
 | 贤心 3   | 33     | 人生就像是一场修行 c   |


   <button class="layui-btn4" onclick="layui.table.init('parse-table-demo');layui.jquery(this).addClass('layui-btn-disabled')">


 转换上述表格


 通过上面的小例子，你已经初步见识了这一功能的实际意义。尝试在你的静态表格的 th 标签中加上 lay-data="" 属性，代码如下：

     #+begin_src html
     <table lay-filter="demo">
       <thead>
         <tr>
           <th lay-data="{field:'username', width:100}">昵称</th>
           <th lay-data="{field:'experience', width:80, sort:true}">积分</th>
           <th lay-data="{field:'sign'}">签名</th>
         </tr> 
       </thead>
       <tbody>
         <tr>
           <td>贤心1</td>
           <td>66</td>
           <td>人生就像是一场修行a</td>
         </tr>
         <tr>
           <td>贤心2</td>
           <td>88</td>
           <td>人生就像是一场修行b</td>
         </tr>
         <tr>
           <td>贤心3</td>
           <td>33</td>
           <td>人生就像是一场修行c</td>
         </tr>
       </tbody>
     </table>
     #+end_src

 然后执行用于转换表格的 JS 方法，就可以达到目的了：

     #+begin_src js
     var table = layui.table;
     
     //转换静态表格
     table.init('demo', {
       height: 315 //设置高度
       ,limit: 10 //注意：请务必确保 limit 参数（默认：10）是与你服务端限定的数据条数一致
       //支持所有基础参数
     }); 
     #+end_src
        
 在前面的“方法渲染”和“自动渲染”两种方式中，你的数据都来源于异步的接口，这可能并不利于所谓的 seo（当然是针对于前台页面）。而在这里，你的数据已和页面同步输出，却仍然可以转换成动态表格，是否感受到一丝惬意呢？


 - 基础参数一览表


 基础参数并非所有都要出现，有必选也有可选，结合你的实际需求自由设定。基础参数一般出现在以下几种场景中：

 
     场景一：下述方法中的键值即为基础参数项
     #+begin_src js
     table.render({
       height: 300
       ,url: '/api/data'
     });
     #+end_src
           
     场景二：下述 lay-data 里面的内容即为基础参数项，切记：值要用单引号
     <table lay-data="{height:300, url:'/api/data'}" lay-filter="demo"> …… </table>
     
     更多场景：下述 options 即为含有基础参数项的对象
     > table.init('filter', options); //转化静态表格
     > var tableObj = table.render({});
       tableObj.reload(options); //重载表格
          


 下面是目前 table
 模块所支持的全部参数一览表，我们对重点参数进行了的详细说明，你可以点击下述表格最右侧的“示例”去查看

 | 参数             | 类型                 | 说明                                                                                                                                                                                     | 示例值                                                |
 |------------------+----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------|
 | elem             | String/DOM           | 指定原始 table 容器的选择器或 DOM，方法渲染方式必填                                                                                                                                      | "#demo"                                               |
 | cols             | Array                | 设置表头。值是一个二维数组。方法渲染方式必填                                                                                                                                             | [[index_u33.html#cols][详见表头参数]]                 |
 | url（等）        | -                    | 异步数据接口相关参数。其中 url 参数为必填项                                                                                                                                              | [[index_u33.html#async][详见异步接口]]                |
 | toolbar          | String/DOM/Boolean   | <<index_u33.html#toolbar>> 开启表格头部工具栏区域，该参数支持四种类型值：                                                                                                                | false                                                 |
 |                  |                      |                                                                                                                                                                                          |                                                       |
 |                  |                      | -  toolbar: '#toolbarDemo' ///指向自定义工具栏模板选择器/                                                                                                                                |                                                       |
 |                  |                      | -  toolbar: '<div>xxx</div>' ///直接传入工具栏模板字符/                                                                                                                                  |                                                       |
 |                  |                      | -  toolbar: true ///仅开启工具栏，不显示左侧模板/                                                                                                                                        |                                                       |
 |                  |                      | -  toolbar: 'default' ///让工具栏左侧显示默认的内置模板/                                                                                                                                 |                                                       |
 |                  |                      |                                                                                                                                                                                          |                                                       |
 |                  |                      | 注意：                                                                                                                                                                                 |                                                       |
 |                  |                      | 1. 该参数为 layui 2.4.0 开始新增。                                                                                                                                                     |                                                       |
 |                  |                      | 2. 若需要“列显示隐藏”、“导出”、“打印”等功能，则必须开启该参数                                                                                                                            |                                                       |
 |                  |                      |                                                                                                                                                                                          |                                                       |

 |                  |                      |   </div>                                                                                                                                                                                 |                                                       |
   
 | defaultToolbar   | Array                | 该参数可自由配置头部工具栏右侧的图标按钮                                                                                                                                                 | [[index_u33.html#defaultToolbar][详见头工具栏图标]]   |
 | width            | Number               | 设定容器宽度。table 容器的默认宽度是跟随它的父元素铺满，你也可以设定一个固定值，当容器中的内容超出了该宽度时，会自动出现横向滚动条。                                                      | 1000                                                  |
 | height           | Number/String        | 设定容器高度                                                                                                                                                                             | [[index_u33.html#height][详见height]]                 |
 | cellMinWidth     | Number               | （layui 2.2.1 新增）全局定义所有常规单元格的最小宽度（默认：60），一般用于列宽自动分配的情况。其优先级低于表头参数中的 minWidth                                                          | 100                                                   |
 | done             | Function             | 数据渲染完的回调。你可以借此做一些其它的操作                                                                                                                                             | [[index_u33.html#done][详见done回调]]                 |
 | data             | Array                | 直接赋值数据。既适用于只展示一页数据，也非常适用于对一段已知数据进行多页展示。                                                                                                           | [{}, {}, {}, {}, ...]                                 |
 | totalRow         | Boolean              | 是否开启合计行区域。layui 2.4.0 新增                                                                                                                                                     | false                                                 |
 | page             | Boolean/Object       | 开启分页（默认：false） 注：从 layui 2.2.0 开始，支持传入一个对象，里面可包含 [[https://www.layui.com/doc/modules/laypage.html#options][laypage]] 组件所有支持的参数（jump、elem 除外）   | {theme: '#c00'}                                       |
 | limit            | Number               | 每页显示的条数（默认：10）。值务必对应 limits 参数的选项。                                                                                                                             | 30                                                    |
 |                  |                      | 注意：/优先级低于 page 参数中的 limit 参数/                                                                                                                                              |                                                       |
 | limits           | Array                | 每页条数的选择项，默认：[10,20,30,40,50,60,70,80,90]。                                                                                                                                 | [30,60,90]                                            |
 |                  |                      | 注意：/优先级低于 page 参数中的 limits 参数/                                                                                                                                             |                                                       |
 | loading          | Boolean              | 是否显示加载条（默认：true）。如果设置 false，则在切换分页时，不会出现加载条。该参数只适用于 url 参数开启的方式                                                                          | false                                                 |
 | title            | String               | 定义 table 的大标题（在文件导出等地方会用到）layui 2.4.0 新增                                                                                                                            | "用户表"                                              |
 | text             | Object               | 自定义文本，如空数据时的异常提示等。注：layui 2.2.5 开始新增。                                                                                                                           | [[index_u33.html#text][详见自定义文本]]               |
 | autoSort         | Boolean              | 默认 true，即直接由 table 组件在前端自动处理排序。                                                                                                                                     | [[index_u33.html#onsort][详见监听排序]]               |
 |                  |                      | 若为 false，则需自主排序，通常由服务端直接返回排序好的数据。                                                                                                                           |                                                       |
 |                  |                      | 注意：该参数为 layui 2.4.4 新增                                                                                                                                                          |                                                       |
 | initSort         | Object               | 初始排序状态。用于在数据表格渲染完毕时，默认按某个字段排序。                                                                                                                             | [[index_u33.html#initSort][详见初始排序]]             |
 | id               | String               | <<index_u33.html#id>> 设定容器唯一 id。id 是对表格的数据操作方法上是必要的传递条件，它是表格容器的索引，你在下文诸多地方都将会见识它的存在。                                           | test                                                  |
 |                  |                      |                                                                                                                                                                                        |                                                       |
 |                  |                      | 值得注意的是：从 layui 2.2.0 开始，该参数也可以自动从 /<table id="test"></table>/ 中的 id 参数中获取。                                                                                   |                                                       |
 | skin（等）       | -                    | 设定表格各种外观、尺寸等                                                                                                                                                                 | [[index_u33.html#skin][详见表格风格]]                 |


 - cols - 表头参数一览表


 相信我，在你还尚无法驾驭 layui table 的时候，你的所有焦点都应放在这里，它带引领你完成许多可见和不可见甚至你无法想象的工作。如果你采用的是方法渲染，cols
 是一个二维数组，表头参数设定在数组内；如果你采用的自动渲染，表头参数的设定应放在 <th> 标签上

 设定列类型。可选值有：

 -  normal（常规列，无需设定）
 -  checkbox（复选框列）
 -  radio（单选框列，layui 2.4.0 新增）
 -  numbers（序号列）
 -  space（空列）



 是否开启该列的自动合计功能，默认：false。

 当开启时，则默认由前端自动合计当前行数据。从 layui 2.5.6 开始：
 若接口直接返回了合计行数据，则优先读取接口合计行数据，格式如下：

 
     {
       "code": 0,
       "msg": "",
       "count": 1000,
       "data": [{}, {}]
       "totalRow": {
         "score": "666"
         ,"experience": "999"
       }
     }
                  


 如上，在 totalRow 中返回所需统计的列字段名和值即可。
 另外，totalRow 字段同样可以通过 parseData 回调来解析成为 table
 组件所规定的数据格式。


 下面是一些方法渲染和自动渲染的配置方式：

 
     #+begin_src js
     //方法渲染：
     table.render({
       cols:  [[ //标题栏
         {checkbox: true}
         ,{field: 'id', title: 'ID', width: 80}
         ,{field: 'username', title: '用户名', width: 120}
       ]]
     });
     #+end_src
     
     它等价于自动渲染：
     #+begin_src html
     <table class="layui-table" lay-data="{基础参数}" lay-filter="test">
       <thead>
         <tr>
           <th lay-data="{checkbox:true}"></th>
           <th lay-data="{field:'id', width:80}">ID</th>
           <th lay-data="{field:'username', width:180}">用户名</th>
         </tr>
       </thead>
     </table>
     #+end_src
          
 以下是一个二级表头的例子：

 
     JS：
     #+begin_src js
     table.render({
       cols:  [[ //标题栏
         {field: 'username', title: '联系人', width: 80, rowspan: 2} //rowspan即纵向跨越的单元格数
         ,{field: 'amount', title: '金额', width: 80, rowspan: 2}
         ,{align: 'center', title: '地址', colspan: 3} //colspan即横跨的单元格数，这种情况下不用设置field和width
       ], [
         {field: 'province', title: '省', width: 80}
         ,{field: 'city', title: '市', width: 120}
         ,{field: 'county', title: '详细', width: 300}
       ]]
     });
     #+end_src
     
     它等价于：
     #+begin_src html
     <table class="layui-table" lay-data="{基础参数}">
       <thead>
         <tr>
           <th lay-data="{field:'username', width:80}" rowspan="2">联系人</th>
           <th lay-data="{field:'amount', width:120}" rowspan="2">金额</th>
           <th lay-data="{align:'center'}" colspan="3">地址</th>
         </tr>
         <tr>
           <th lay-data="{field:'province', width:80}">省</th>
           <th lay-data="{field:'city', width:120}">市</th>
           <th lay-data="{field:'county', width:300}">详细</th>
         </tr>
       </thead>
     </table>
     #+end_src
          


 需要说明的是，table 模块支持无限极表头，你可按照上述的方式继续扩充。核心点在于 rowspan 和 colspan 两个参数的使用。


 - templet - 自定义列模板


 类型：String，默认值：无

 在默认情况下，单元格的内容是完全按照数据接口返回的 content 原样输出的，如果你想对某列的单元格添加链接等其它元素，你可以借助该参数来轻松实现。这是一个非常实用且强大的功能，你的表格内容会因此而丰富多样。

 #+BEGIN_QUOTE
   templet 提供了三种使用方式，请结合实际场景选择最合适的一种：

   -  如果自定义模版的字符量太大，我们推荐你采用【方式一】；
   -  如果自定义模板的字符量适中，或者想更方便地调用外部方法，我们推荐你采用【方式二】；
   -  如果自定义模板的字符量很小，我们推荐你采用【方式三】
 #+END_QUOTE

 *方式一：绑定模版选择器。*

 
     table.render({
       cols: [[
         {field:'title', title: '文章标题', width: 200, templet: '#titleTpl'} //这里的templet值是模板元素的选择器
         ,{field:'id', title:'ID', width:100}
       ]]
     });
     
     等价于：
     <th lay-data="{field:'title', width: 200, templet: '#titleTpl'}">文章标题</th>
     <th lay-data="{field:'id', width:100}">ID</th>
          


 下述是 templet 对应的模板，它可以存放在页面的任意位置。模板遵循于 [[https://www.layui.com/doc/modules/laytpl.html][laytpl]] 语法，可读取到返回的所有数据

 
     <script type="text/html" id="titleTpl">
       <a href="/detail/{{d.id}}" class="layui-table-link">{{d.title}}</a>
     </script>
     
     注意：上述的 {{d.id}}、{{d.title}} 是动态内容，它对应数据接口返回的字段名。除此之外，你还可以读取到以下额外字段：
          序号：{{ d.LAY_INDEX }} （该额外字段为 layui 2.2.0 新增）
     
     由于模板遵循 laytpl 语法（建议细读 laytpl文档 ），因此在模板中你可以写任意脚本语句（如 if else/for等）：
     <script type="text/html" id="titleTpl">
       {{#  if(d.id < 100){ }}
         <a href="/detail/{{d.id}}" class="layui-table-link">{{d.title}}</a>
       {{#  } else { }}
         {{d.title}}(普通用户)
       {{#  } }}
     </script>
          


 *方式二：函数转义。*自 layui 2.2.5 开始，templet
 开始支持函数形式，函数返回一个参数
 d，包含接口返回的所有字段和数据。如下所示：

 
     table.render({
       cols: [[
         {field:'title', title: '文章标题', width: 200
           ,templet: function(d){
             return 'ID：'+ d.id +'，标题：<span style="color: #c00;">'+ d.title +'</span>'
           }
         }
         ,{field:'id', title:'ID', width:100}
       ]]
     });    
          


 *方式三：直接赋值模版字符。*事实上，templet 也可以直接是一段 html
 内容，如：

 
           
     templet: '<div><a href="/detail/{{d.id}}" class="layui-table-link">{{d.title}}</a></div>'
     
     注意：这里一定要被一层 <div></div> 包裹，否则无法读取到模板
          



 - toolbar - 绑定工具条模板

 类型：String，默认值：无

 通常你需要在表格的每一行加上 查看、编辑、删除 这样类似的操作按钮，而 tool 参数就是为此而生，你因此可以非常便捷地实现各种操作功能。*tool 参数和 templet 参数的使用方式完全类似*，通常接受的是一个选择器，也可以是一段 HTML 字符。

     #+begin_src js
     table.render({
       cols: [[
         {field:'id', title:'ID', width:100}
         ,{fixed: 'right', width:150, align:'center', toolbar: '#barDemo'} //这里的toolbar值是模板元素的选择器
       ]]
     });
     #+end_src
     
     等价于：
     #+begin_src html
     <th lay-data="{field:'id', width:100}">ID</th>
     <th lay-data="{fixed: 'right', width:150, align:'center', toolbar: '#barDemo'}"></th>
     #+end_src
          

 下述是 toolbar 对应的模板，它可以存放在页面的任意位置：

 #+begin_src html
 
     <script type="text/html" id="barDemo">
       <a class="layui-btn layui-btn-xs" lay-event="detail">查看</a>
       <a class="layui-btn layui-btn-xs" lay-event="edit">编辑</a>
       <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>
      
       <!-- 这里同样支持 laytpl 语法，如： -->
       {{#  if(d.auth > 2){ }}
         <a class="layui-btn layui-btn-xs" lay-event="check">审核</a>
       {{#  } }}
     </script>
 #+end_src
     
     注意：属性 lay-event="" 是模板的关键所在，值可随意定义。
          


 接下来我们可以借助 table 模块的工具条事件，完成不同的操作功能：
 
     #+begin_src js
     //监听工具条 
     table.on('tool(test)', function(obj){ //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter="对应的值"
       var data = obj.data; //获得当前行数据
       var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
       var tr = obj.tr; //获得当前行 tr 的 DOM 对象（如果有的话）
     
       if(layEvent === 'detail'){ //查看
         //do somehing
       } else if(layEvent === 'del'){ //删除
         layer.confirm('真的删除行么', function(index){
           obj.del(); //删除对应行（tr）的DOM结构，并更新缓存
           layer.close(index);
           //向服务端发送删除指令
         });
       } else if(layEvent === 'edit'){ //编辑
         //do something
        
         //同步更新缓存对应的值
         obj.update({
           username: '123'
           ,title: 'xxx'
         });
       } else if(layEvent === 'LAYTABLE_TIPS'){
         layer.alert('Hi，头部工具栏扩展的右侧图标。');
       }
     });
     #+end_src
          
 - 异步数据接口


 数据的异步请求由以下几个参数组成：


 数据格式解析的回调函数，用于将返回的任意数据格式解析成 table
 组件规定的数据格式。

 table
 组件默认规定的数据格式为（参考：[[https://www.layui.com/demo/table/user/?page=1&limit=30][/demo/table/user/]]）：

 
     {
       "code": 0,
       "msg": "",
       "count": 1000,
       "data": [{}, {}]
     } 
                  


 很多时候，您接口返回的数据格式并不一定都符合 table
 默认规定的格式，比如：

 
     {
       "status": 0,
       "message": "", 
       "total": 180, 
       "data": {
         "item": [{}, {}]
       }
     }
                  


 那么你需要借助 parseData 回调函数将其解析成 table 组件所规定的数据格式

 
     table.render({
       elem: '#demp'
       ,url: ''
       ,parseData: function(res){ //res 即为原始返回的数据
         return {
           "code": res.status, //解析接口状态
           "msg": res.message, //解析提示文本
           "count": res.total, //解析数据长度
           "data": res.data.item //解析数据列表
         };
       }
       //,…… //其他参数
     });    
                  



 用于对分页请求的参数：page、limit 重新设定名称，如：
 
     table.render({
       elem: '#demp'
       ,url: ''
       ,request: {
         pageName: 'curr' //页码的参数名称，默认：page
         ,limitName: 'nums' //每页数据量的参数名，默认：limit
       }
       //,…… //其他参数
     });                           
                  


 那么请求数据时的参数将会变为：/?curr=1&nums=30/


 您还可以借助 response 参数来重新设定返回的数据格式，如：

 
     table.render({
       elem: '#demp'
       ,url: ''
       ,response: {
         statusName: 'status' //规定数据状态的字段名称，默认：code
         ,statusCode: 200 //规定成功的状态码，默认：0
         ,msgName: 'hint' //规定状态信息的字段名称，默认：msg
         ,countName: 'total' //规定数据总数的字段名称，默认：count
         ,dataName: 'rows' //规定数据列表的字段名称，默认：data
       } 
       //,…… //其他参数
     });     
                  


 那么上面所规定的格式为：
 
     {
       "status": 200,
       "hint": "",
       "total": 1000,
       "rows": []
     } 
                  
 注意：/request 和 response 参数均为 layui 2.1.0 版本新增/

 调用示例：

 
     //“方法级渲染”配置方式
     table.render({ //其它参数在此省略
       url: '/api/data/'
       //where: {token: 'sasasas', id: 123} //如果无需传递额外参数，可不加该参数
       //method: 'post' //如果无需自定义HTTP类型，可不加该参数
       //request: {} //如果无需自定义请求参数，可不加该参数
       //response: {} //如果无需自定义数据响应名称，可不加该参数
     }); 
     
     等价于（“自动化渲染”配置方式）
     <table class="layui-table" lay-data="{url:'/api/data/'}" lay-filter="test"> …… </table>


 - done - 数据渲染完的回调


 类型：/Function/，默认值：/无/

 无论是异步请求数据，还是直接赋值数据，都会触发该回调。你可以利用该回调做一些表格以外元素的渲染。

 
     table.render({ //其它参数在此省略
       done: function(res, curr, count){
         //如果是异步请求数据方式，res即为你接口返回的信息。
         //如果是直接赋值的方式，res即为：{data: [], count: 99} data为当前页数据、count为数据总长度
         console.log(res);
        
         //得到当前页码
         console.log(curr); 
        
         //得到数据总量
         console.log(count);
       }
     });
          



 - defaultToolbar - 头部工具栏右侧图标


 类型：/Array/，默认值：/["filter","exports","print"]/

 该参数可自由配置头部工具栏右侧的图标按钮，值为一个数组，支持以下可选值：

 -  filter: /显示筛选图标/
 -  exports: /显示导出图标/
 -  print: /显示打印图标/


 #+BEGIN_QUOTE
   可根据值的顺序显示排版图标，如：

   /defaultToolbar: ['filter', 'print', 'exports']/
 #+END_QUOTE

 另外你还可以无限扩展图标按钮（layui 2.5.5 新增）：

 
     table.render({ //其它参数在此省略      
       defaultToolbar: ['filter', 'print', 'exports', {
         title: '提示' //标题
         ,layEvent: 'LAYTABLE_TIPS' //事件名，用于 toolbar 事件中使用
         ,icon: 'layui-icon-tips' //图标类名
       }]
     });
          


 扩展的图标可通过 toolbar 事件监听（[[index_u33.html#ontoolbar][详见行工具事件]]），其中 layEvent 的值会在事件的回调参数中返回，以便区分不同的触发动作。


 - text - 自定义文本


 类型：Object

 table
 模块会内置一些默认的文本信息，如果想修改，你可以设置以下参数达到目的。

 
     table.render({ //其它参数在此省略
       text: {
         none: '暂无相关数据' //默认：无数据。注：该属性为 layui 2.2.5 开始新增
       }
     });
          



 - initSort - 初始排序


 类型：Object，默认值：无

 
     //“方法级渲染”配置方式
     table.render({ //其它参数在此省略
       initSort: {
         field: 'id' //排序字段，对应 cols 设定的各字段名
         ,type: 'desc' //排序方式  asc: 升序、desc: 降序、null: 默认排序
       }
     });
     
     等价于（“自动化渲染”配置方式）
     <table class="layui-table" lay-data="{initSort:{field:'id', type:'desc'}}" lay-filter="test"> …… </table>
          



 - height - 设定容器高度


 类型：/Number/String/，可选值如下：

 | 可选值      | 说明                                                                                                                                                                       | 示例                |
 |-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------|
 | 不填写      | 默认情况。高度随数据列表而适应，表格容器不会出现纵向滚动条                                                                                                                 | -                   |
 | 固定值      | 设定一个数字，用于定义容器高度，当容器中的内容超出了该高度时，会自动出现纵向滚动条                                                                                         | height: 315         |
 | full-差值   | 高度将始终铺满，无论浏览器尺寸如何。这是一个特定的语法格式，其中 /full/ 是固定的，而 /差值/ 则是一个数值，这需要你来预估，比如：表格容器距离浏览器顶部和底部的距离“和”   | height: 'full-20'   |
 |             | PS：/该功能为 layui 2.1.0 版本中新增/                                                                                                                                      |                     |

 示例：

 
     #+begin_src js
     //“方法级渲染”配置方式
     table.render({ //其它参数在此省略
       height: 315 //固定值
     }); 
     table.render({ //其它参数在此省略
       height: 'full-20' //高度最大化减去差值
     }); 
     
     等价于（“自动化渲染”配置方式）
     <table class="layui-table" lay-data="{height:315}" lay-filter="test"> …… </table>
     <table class="layui-table" lay-data="{height:'full-20'}" lay-filter="test"> …… </table>
     #+end_src
          
 - 设定表格外观


 控制表格外观的主要由以下参数组成：

 | 参数名   | 可选值                  | 备注                                               |
 |----------+-------------------------+----------------------------------------------------|
 | skin     | line （行边框风格）   | 用于设定表格风格，若使用默认风格不设置该属性即可   |
 |          | row （列边框风格）    |                                                    |
 |          | nob （无边框风格）      |                                                    |
 | even     | true/false              | 若不开启隔行背景，不设置该参数即可                 |
 | size     | sm （小尺寸）         | 用于设定表格尺寸，若使用默认尺寸不设置该属性即可   |
 |          | lg （大尺寸）           |                                                    |

 
     //“方法级渲染”配置方式
     table.render({ //其它参数在此省略
       skin: 'line' //行边框风格
       ,even: true //开启隔行背景
       ,size: 'sm' //小尺寸的表格
     }); 
     
     等价于（“自动化渲染”配置方式）
     <table class="layui-table" lay-data="{skin:'line', even:true, size:'sm'}" lay-filter="test"> …… </table>
          

 - 基础方法
 基础用法是 table 模块的关键组成部分，目前所开放的所有方法如下：

 
     > table.set(options); //设定全局默认参数。options即各项基础参数
     > table.on('event(filter)', callback); //事件监听。event为内置事件名（详见下文），filter为容器lay-filter设定的值
     > table.init(filter, options); //filter为容器lay-filter设定的值，options即各项基础参数。例子见：转换静态表格
     > table.checkStatus(id); //获取表格选中行（下文会有详细介绍）。id 即为 id 参数对应的值
     > table.render(options); //用于表格方法级渲染，核心方法。应该不用再过多解释了，详见：方法级渲染
     > table.reload(id, options); //表格重载
     > table.resize(id); //重置表格尺寸
     > table.exportFile(id, data, type); //导出数据
          

 - 获取选中行


 该方法可获取到表格所有的选中行相关数据
 语法：/table.checkStatus('ID')/，其中 /ID/ 为基础参数 id
 对应的值（见：[[index_u33.html#id][设定容器唯一ID]]），如：

 
     【自动化渲染】
     <table class="layui-table" lay-data="{id: 'idTest'}"> …… </table>
     
     【方法渲染】
     table.render({ //其它参数省略
       id: 'idTest'
     });
          


 
     var checkStatus = table.checkStatus('idTest'); //idTest 即为基础参数 id 对应的值
     
     console.log(checkStatus.data) //获取选中行的数据
     console.log(checkStatus.data.length) //获取选中行数量，可作为是否有选中行的条件
     console.log(checkStatus.isAll ) //表格是否全选
          



 - 重置表格尺寸


 该方法可重置表格尺寸和结构，其内部完成了：固定列高度平铺、动态分配列宽、容器滚动条宽高补丁 等操作。它一般用于特殊情况下（如“非窗口 resize”导致的表格父容器宽度变化而引发的列宽适配异常），以保证表格在此类特殊情况下依旧能友好展示。

 语法：table.resize('ID')，其中 ID 为基础参数 id 对应的值（见：[[index_u33.html#id][设定容器唯一ID]]），如：

 #+begin_src js
 
     table.render({ //其它参数省略
       ,elem: '#demo'
       //,…… //其它参数
       ,id: 'idTest'
     });
     
     //执行表格“尺寸结构”的重置，一般写在对应的事件中
     table.resize('idTest');
 #+end_src
          



 - 表格重载


 很多时候，你需要对表格进行重载。比如数据全局搜索。以下方法可以帮你轻松实现这类需求（可任选一种）。

 #+begin_src js
 
     【HTML】
     <table class="layui-table" lay-data="{id: 'idTest'}"> …… </table>
     
     【JS】
     table.reload('idTest', {
       url: '/api/table/search'
       ,where: {} //设定异步数据接口的额外参数
       //,height: 300
     });
          


 
     //所获得的 tableIns 即为当前容器的实例
     var tableIns = table.render({
       elem: '#id'
       ,cols: [] //设置表头
       ,url: '/api/data' //设置异步接口
       ,id: 'idTest'
     }); 
     
     //这里以搜索为例
     tableIns.reload({
       where: { //设定异步数据接口的额外参数，任意设
         aaaaaa: 'xxx'
         ,bbb: 'yyy'
         //…
       }
       ,page: {
         curr: 1 //重新从第 1 页开始
       }
     });
     //上述方法等价于
     table.reload('idTest', {
       where: { //设定异步数据接口的额外参数，任意设
         aaaaaa: 'xxx'
         ,bbb: 'yyy'
         //…
       }
       ,page: {
         curr: 1 //重新从第 1 页开始
       }
     }); //只重载数据
 #+end_src
          
 注意：/这里的表格重载是指对表格重新进行渲染，包括数据请求和基础参数的读取/


 - 导出任意数据


 尽管 table 的工具栏内置了数据导出按钮，但有时你可能需要通过方法去导出任意数据，那么可以借助以下方法： 语法：table.exportFile(id, data, type)

 #+begin_src js
 
     var ins1 = table.render({
       elem: '#demo'
       ,id: 'test'
       //,…… //其它参数
     })      
          
     //将上述表格示例导出为 csv 文件
     table.exportFile(ins1.config.id, data); //data 为该实例中的任意数量的数据
 #+end_src
          
 事实上，该方法也可以不用依赖 table 的实例，可直接导出任意数据：

 #+begin_src js
     table.exportFile(['名字','性别','年龄'], [
       ['张三','男','20'],
       ['李四','女','18'],
       ['王五','女','19']
     ], 'csv'); //默认导出 csv，也可以为：xls
 #+end_src
          
 - 事件监听


 语法：table.on('event(filter)', callback); 注：event 为内置事件名，filter 为容器 lay-filter 设定的值 table 模块在 Layui 事件机制中注册了专属事件，如果你使用 layui.onevent()自定义模块事件，请勿占用 table 名。目前所支持的所有事件见下文

 默认情况下，事件所监听的是全部的 table 模块容器，但如果你只想监听某一个容器，使用事件过滤器即可。
 假设原始容器为：<table class="layui-table" lay-filter="test"></table> 那么你的事件监听写法如下：

 #+begin_src js
     //以复选框事件为例
     table.on('checkbox(test)', function(obj){
       console.log(obj)
     });
 #+end_src
 - 监听头部工具栏事件


 点击头部工具栏区域设定了属性为 lay-event="" 的元素时触发（该事件为 layui 2.4.0 开始新增）。如：

 
     #+begin_src html
     原始容器
     <table id="demo" lay-filter="test"></table>
     
     工具栏模板：
     <script type="text/html" id="toolbarDemo">
       <div class="layui-btn-container">
         <button class="layui-btn layui-btn-sm" lay-event="add">添加</button>
         <button class="layui-btn layui-btn-sm" lay-event="delete">删除</button>
         <button class="layui-btn layui-btn-sm" lay-event="update">编辑</button>
       </div>
     </script>
     
     <script;>
     //JS 调用：
     table.render({
       elem: '#demo'
       ,toolbar: '#toolbarDemo'
       //,…… //其他参数
     });
     
     //监听事件
     table.on('toolbar(test)', function(obj){
       var checkStatus = table.checkStatus(obj.config.id);
       switch(obj.event){
         case 'add':
           layer.msg('添加');
         break;
         case 'delete':
           layer.msg('删除');
         break;
         case 'update':
           layer.msg('编辑');
         break;
       };
     });
     </script>
     #+end_src
          
 - 监听复选框选择


 点击复选框时触发，回调函数返回一个 object 参数，携带的成员如下：

 #+begin_src js
 
     table.on('checkbox(test)', function(obj){
       console.log(obj.checked); //当前是否选中状态
       console.log(obj.data); //选中行的相关数据
       console.log(obj.type); //如果触发的是全选，则为：all，如果触发的是单选，则为：one
     });
 #+end_src

 - 监听单元格编辑


 单元格被编辑，且值发生改变时触发，回调函数返回一个 object 参数，携带的成员如下：
#+begin_src js
     table.on('edit(test)', function(obj){ //注：edit是固定事件名，test是table原始容器的属性 lay-filter="对应的值"
       console.log(obj.value); //得到修改后的值
       console.log(obj.field); //当前编辑的字段名
       console.log(obj.data); //所在行的所有相关数据  
     });
#+end_src

 - 监听行单双击事件
 
     #+begin_src js
     //监听行单击事件
     table.on('row(test)', function(obj){
       console.log(obj.tr) //得到当前行元素对象
       console.log(obj.data) //得到当前行数据
       //obj.del(); //删除当前行
       //obj.update(fields) //修改当前行数据
     });
     
     //监听行双击事件
     table.on('rowDouble(test)', function(obj){
       //obj 同上
     });
     #+end_src
          
 - 监听行中工具条点击事件


 具体用法见：[[index_u33.html#ontool][绑定工具条]]


 - 监听排序切换


 点击表头排序时触发，它通用在基础参数中设置 autoSort: false 时使用，以完成服务端的排序，而不是默认的前端排序。该事件的回调函数返回一个 object 参数，携带的成员如下：

 #+begin_src js
 
     //禁用前端自动排序，以便由服务端直接返回排序好的数据
     table.render({
       elem: '#id'
       ,autoSort: false //禁用前端自动排序。注意：该参数为 layui 2.4.4 新增
       //,… //其它参数省略
     });
     
     //监听排序事件 
     table.on('sort(test)', function(obj){ //注：sort 是工具条事件名，test 是 table 原始容器的属性 lay-filter="对应的值"
       console.log(obj.field); //当前排序的字段名
       console.log(obj.type); //当前排序类型：desc（降序）、asc（升序）、null（空对象，默认排序）
       console.log(this); //当前排序的 th 对象
     
       //尽管我们的 table 自带排序功能，但并没有请求服务端。
       //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
       table.reload('idTest', {
         initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。
         ,where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
           field: obj.field //排序字段
           ,order: obj.type //排序方式
         }
       });
      
       layer.msg('服务端排序。order by '+ obj.field + ' ' + obj.type);
     });
 #+end_src
          

** 表单模块文档 - layui.form

 #+BEGIN_QUOTE
   我们通常会在最常用的模块上耗费更多的精力，用尽可能简单的方式诠释 layui所带来
   的便捷性。显而易见，form是我们非常看重的一块。于是它试图用一贯极简的姿态，去
   捕获你对它的深深青睐。寄托在原始表单元素上的属性设定，及其全自动的初始渲染，
   和基于事件驱动的接口书写方式，会让你觉得，传统模式下的组件调用形式，也可以是
   那样的优雅、简单。然而文字的陈述始终是苍白的，所以用行动慢慢感受layui.form 给
   你的项目带来的效率提升吧。
 #+END_QUOTE

   模块加载名称：form

*** 使用
  layui 针对各种表单元素做了较为全面的 UI 支持，你无需去书写那些 UI 结构，你只需
  要写 HTML 原始的 input、select、textarea 这些基本的标签即可。我们在 UI上的渲染
  只要求一点，你必须给表单体系所在的父元素加上class="layui-form"，一切的工作都会
  在你加载完 form 模块后，自动完成。如下是一个最基本的例子：

      #+begin_src html
      <!DOCTYPE html>
      <html>
      <head>
      <meta charset="utf-8">
      <title>layui.form小例子</title>
      <link rel="stylesheet" href="layui.css" media="all">
      </head>
      <body>
      <form class="layui-form"> <!-- 提示：如果你不想用form，你可以换成div等任何一个普通元素 -->
        <div class="layui-form-item">
          <label class="layui-form-label">输入框</label>
          <div class="layui-input-block">
            <input type="text" name="" placeholder="请输入" autocomplete="off" class="layui-input">
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">下拉选择框</label>
          <div class="layui-input-block">
            <select name="interest" lay-filter="aihao">
              <option value="0">写作</option>
              <option value="1">阅读</option>
            </select>
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">复选框</label>
          <div class="layui-input-block">
            <input type="checkbox" name="like[write]" title="写作">
            <input type="checkbox" name="like[read]" title="阅读">
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">开关关</label>
          <div class="layui-input-block">
            <input type="checkbox" lay-skin="switch">
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">开关开</label>
          <div class="layui-input-block">
            <input type="checkbox" checked lay-skin="switch">
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">单选框</label>
          <div class="layui-input-block">
            <input type="radio" name="sex" value="0" title="男">
            <input type="radio" name="sex" value="1" title="女" checked>
          </div>
        </div>
        <div class="layui-form-item layui-form-text">
          <label class="layui-form-label">请填写描述</label>
          <div class="layui-input-block">
            <textarea placeholder="请输入内容" class="layui-textarea"></textarea>
          </div>
        </div>
        <div class="layui-form-item">
          <div class="layui-input-block">
            <button class="layui-btn" lay-submit lay-filter="*">立即提交</button>
            <button type="reset" class="layui-btn layui-btn-primary">重置</button>
          </div>
        </div>
        <!-- 更多表单结构排版请移步文档左侧【页面元素-表单】一项阅览 -->
      </form>
      <script src="layui.js"></script>
      <script>
      layui.use('form', function(){
        var form = layui.form;
      
        //各种基于事件的操作，下面会有进一步介绍
      });
      </script>
      </body>
      </html>
      #+end_src

  正如你上述看到的，你必须放入 layui 所/规范的元素结构/，form 模块才会对其进行重置渲染。值得注意的是，在具体的每一块表单元素中，你仍是像往日一样写
  input
  等标签即可。另外，我们对我们所规范的结构进行了响应式的支持，而针对一些不同的表单排版，比如行内表单，你也只需要设定我们所定义好的
  class
  即可。关于这一块，你可以移步页面元素的表单文档中做详细了解。而事实上你的大部分焦点可能也在那里，但当前这篇文档主要还是介绍
  form 整体模块。

*** 更新渲染
  有些时候，你的有些表单元素可能是动态插入的。这时 form 模块 的自动化渲染是会对其失效的。虽然我们没有双向绑定机制（因为我们叫经典模块化框架）但没
  有关系，你只需要执行 form.render(type, filter); 方法即可。

  第一个参数：type，为表单的 type 类型，可选。默认对全部类型的表单进行一次更新。可局部刷新的 type 如下表：

  | 参数（type）值 | 描述                               |
  |----------------+------------------------------------|
  | select         | 刷新 select 选择框渲染             |
  | checkbox       | 刷新 checkbox 复选框（含开关）渲染 |
  | radio          | 刷新 radio 单选框框渲染            |

  
  #+begin_src html
    form.render(); //更新全部
    form.render('select'); //刷新select选择框渲染
    //……
   #+end_src
          

  第二个参数：filter，为 class="layui-form" 所在元素的lay-filter="" 的值。你可以借助该参数，对表单完成局部更新。

  #+begin_src html
  
      【HTML】
      <div class="layui-form" lay-filter="test1">
        …
      </div>
     
      <div class="layui-form" lay-filter="test2">
        …
      </div>
          
      【JavaScript】
      form.render(null, 'test1'); //更新 lay-filter="test1" 所在容器内的全部表单状态
      form.render('select', 'test2'); //更新 lay-filter="test2" 所在容器内的全部 select 状态
      //……
          
  #+end_src
  
 

*** 预设元素属性
    事实上在使用表单时，你的一半精力可能会在元素本身上。所以我们把一些基础属性的配置恰恰安放在了标签本身上。如：

      #+begin_src html
      <input type="text" lay-verify="email">
      <input type="checkbox" checked lay-skin="switch" lay-filter="encrypt" title="是否加密">
      <button lay-submit>提交</button>
      #+end_src

  上述的lay-verify、lay-skin、lay-filter、lay-submit神马的都是我们所说的预设的元素属性，他们可以使得一些交互操作交由 form 模块内部、或者你来借助 form 提供的 JS 接口精确控制。目前我们可支持的属性如下表所示：

  | 属性名      | 属性值                                 | 说明                                                                                                                              |
  |-------------+----------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------|
  | title       | 任意字符                               | 设定元素名称，一般用于 checkbox、radio 框                                                                                         |
  | lay-skin    | switch（开关风格） primary（原始风格） | 定义元素的风格，目前只对 checkbox 元素有效，可将其转变为开关样式                                                                  |
  | lay-ignore  | 任意字符或不设值                       | 是否忽略元素美化处理。设置后，将不会对该元素进行初始化渲染，即保留系统风格                                                        |
  | lay-filter  | 任意字符                               | 事件过滤器，主要用于事件的精确匹配，跟选择器是比较类似的。其实它并不私属于 form 模块，它在 layui 的很多基于事件的接口中都会应用到 |
  | lay-verify  | required（必填项）                     | 同时支持多条规则的验证，格式：lay-verify="验证 A ,, 验证 B"                                                                       |
  |             | phone（手机号）                        | 如：lay-verify="required,, phone  ,, number"                                                                                      |
  |             | email（邮箱）                          |                                                                                                                                   |
  |             | url（网址）                            | 另外，除了我们内置的校验规则，你还可以给他设定任意的值，                                                                          |
  |             | number（数字）                         | 比如 lay-verify="pass"，那么你就需要借助 form.verify()方法对 pass 进行一个校验规则的定义。                                        |
  |             | date（日期）                           |                                                                                                                                   |
  |             | identity（身份证）                     |                                                                                                                                   |
  |             | 自定义值                               |                                                                                                                                   |
  | lay-verType | tips（吸附层）                         | 用于定义异常提示层模式。                                                                                                          |
  |             | alert（对话框）                        |                                                                                                                                   |
  |             | msg（默认）                            |                                                                                                                                   |
  | lay-reqText | 任意字符                               | 用于自定义必填项（即设定了 lay-verify="required" 的表单）的提示文本                                                               |
  | lay-submit  | 无需填写值                             | 绑定触发提交的元素，如 button                                                                                                     |

*** 事件监听
  语法：form.on('event(过滤器值)', callback);

  form 模块在 layui 事件机制中注册了专属事件，所以当你使用 layui.onevent()自定义模块事件时，请勿占用 form 名。form 支持的事件如下：

  | event    | 描述                         |
  |----------+------------------------------|
  | select   | 监听 select 下拉选择事件     |
  | checkbox | 监听 checkbox 复选框勾选事件 |
  | switch   | 监听 checkbox 复选框开关事件 |
  | radio    | 监听 radio 单选框事件        |
  | submit   | 监听表单提交事件             |

  默认情况下，事件所监听的是全部的 form 模块元素，但如果你只想监听某一个元素，使用事件过滤器即可。
  
  如：
      #+begin_src html
        <select lay-filter="test"></select>

        form.on('select(test)', function(data){
        console.log(data);
        });
      #+end_src
          
*** 监听 select 选择
  下拉选择框被选中时触发，回调函数返回一个 object 参数，携带两个成员：

  #+begin_src js
    form.on('select(filter)', function(data){
      console.log(data.elem); //得到select原始DOM对象
      console.log(data.value); //得到被选中的值
      console.log(data.othis); //得到美化后的DOM对象
    });      
  #+end_src
          
  请注意：如果你想监听所有的 select，去掉过滤器(filter)即可。下面将不再对此进行备注。

*** 监听 checkbox 复选
  复选框点击勾选时触发，回调函数返回一个 object 参数，携带两个成员：
      #+begin_src js
      form.on('checkbox(filter)', function(data){
        console.log(data.elem); //得到checkbox原始DOM对象
        console.log(data.elem.checked); //是否被选中，true或者false
        console.log(data.value); //复选框value值，也可以通过data.elem.value得到
        console.log(data.othis); //得到美化后的DOM对象
      });        
      #+end_src
*** 监听 switch 开关
    开关被点击时触发，回调函数返回一个 object 参数，携带两个成员：
    #+begin_src js
      form.on('switch(filter)', function(data){
        console.log(data.elem); //得到checkbox原始DOM对象
        console.log(data.elem.checked); //开关是否开启，true或者false
        console.log(data.value); //开关value值，也可以通过data.elem.value得到
        console.log(data.othis); //得到美化后的DOM对象
      });  
      #+end_src
*** 监听 radio 单选

  radio 单选框被点击时触发，回调函数返回一个 object 参数，携带两个成员：

  #+begin_src js
      form.on('radio(filter)', function(data){
        console.log(data.elem); //得到radio原始DOM对象
        console.log(data.value); //被点击的radio的value值
      });  
  #+end_src
*** 监听 submit 提交
  按钮点击或者表单被执行提交时触发，其中回调函数只有在验证全部通过后才会进入，回调返回三个成员：
  
  #+begin_src html
      form.on('submit(*)', function(data){
        console.log(data.elem) //被执行事件的元素DOM对象，一般为button对象
        console.log(data.form) //被执行提交的form对象，一般在存在form标签时才会返回
        console.log(data.field) //当前容器的全部表单字段，名值对形式：{name: value}
        return false; //阻止表单跳转。如果需要表单跳转，去掉这段即可。
      });
      #+end_src
          
 

  再次温馨提示：上述的submit(*)中的 * 号为事件过滤器的值，是在你绑定执行提交的元素时设定的，如：
      #+begin_src html
      <button lay-submit lay-filter="*">提交</button>     
      #+end_src
          
  你可以把*号换成任意的值，如：lay-filter="go"，但监听事件时也要改成 form.on('submit(go)', callback);
*** 表单赋值 / 取值

  语法：form.val('filter', object);

  用于给指定表单集合的元素赋值和取值。如果 object 参数存在，则为赋值；如果 object 参数不存在，则为取值。
  
      #+begin_src js
      //给表单赋值
      form.val("formTest", { //formTest 即 class="layui-form" 所在元素属性 lay-filter="" 对应的值
        "username": "贤心" // "name": "value"
        ,"sex": "女"
        ,"auth": 3
        ,"check[write]": true
        ,"open": false
        ,"desc": "我爱layui"
      });
      //获取表单区域所有值
      var data1 = form.val("formTest");
          
      #+end_src
     
  第二个参数中的键值是表单元素对应的 name 和 value。

*** 表单验证

  我们对表单的验证进行了非常巧妙的支持，大多数时候你只需要在表单元素上加上 lay-verify="" 属性值即可。如：
      #+begin_src html
      <input type="text" lay-verify="email"> 
      #+end_src
     
      还同时支持多条规则的验证，如下：
      #+begin_src html
        <input type="text" lay-verify="required|phone|number">
      #+end_src
          
  上述对输入框定义了一个邮箱规则的校验，它会在 form 模块内部完成。目前我们内置的校验支持见上文的：[[index_u18.html#attr][预设元素属性]]

  除了内置的校验规则外，你还可以自定义验证规则，通常对于比较复杂的校验，这是非常有必要的。

      #+begin_src js
      form.verify({
        username: function(value, item){ //value：表单的值、item：表单的DOM对象
          if(!new RegExp("^[a-zA-Z0-9_\u4e00-\u9fa5s·]+$").test(value)){
            return '用户名不能有特殊字符';
          }
          if(/(^\_)|(\__)|(\_+$)/.test(value)){
            return '用户名首尾不能出现下划线\'_\'';
          }
          if(/^\d+\d+\d$/.test(value)){
            return '用户名不能全为数字';
          }
        }
        //我们既支持上述函数式的方式，也支持下述数组的形式
        //数组的两个值分别代表：[正则匹配、匹配不符时的提示文字]
        ,pass: [
          /^[\S]{6,12}$/
          ,'密码必须6到12位，且不能出现空格'
        ] 
      });      
      #+end_src
      
  当你自定义了类似上面的验证规则后，你只需要把 key 赋值给输入框的lay-verify 属性即可：

      #+begin_src html
      <input type="text" lay-verify="username" placeholder="请输入用户名">
      <input type="password" lay-verify="pass" placeholder="请输入密码">
      #+end_src
          
** 图片/文件上传 - layui.upload
 模块加载名称：upload
** 快速使用

   一切从小试牛刀开始。通常情况下，我们上传文件是借助 type="file" 的 input标签来完 成的，但非常遗憾的是，它不能很好地与其它表单元素并存，所以我们常常要单独为它做 一个业务层面的“异步上传”，即先让图片上传，再和其它表单一起提交保存。下面是一 个小示例：

   这原本只是一个普通的 button，正是 upload模块赋予了它“文件选择”的特殊技能。当然，你还可以随意定制它的样式，而不是只局限于按钮。

 
     #+begin_src html
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>upload模块快速使用</title>
       <link rel="stylesheet" href="/static/build/layui.css" media="all">
     </head>
     <body>
     
     <button type="button" class="layui-btn" id="test1">
       <i class="layui-icon">&#xe67c;</i>上传图片
     </button>
     
     <script src="/static/build/layui.js"></script>
     <script>
     layui.use('upload', function(){
       var upload = layui.upload;
       
       //执行实例
       var uploadInst = upload.render({
         elem: '#test1' //绑定元素
         ,url: '/upload/' //上传接口
         ,done: function(res){
           //上传完毕回调
         }
         ,error: function(){
           //请求异常回调
         }
       });
     });
     </script>
     </body>
     </html>
     #+end_src


 一切看起来是那样的简单，乃至于我不得不凑一段文字来填充这一行的版面。这样好像与下文衔接起来会比较谐调的样子（自我感觉）


 - 核心方法与基础参数选项


 使用 upload 模块必须与 /upload.render(options)/ 方法打交道，其中的
 /options/即为基础参数，它是一个对象。

 
     var upload = layui.upload; //得到 upload 对象
     
     //创建一个上传组件
     upload.render({
       elem: '#id'
       ,url: ''
       ,done: function(res, index, upload){ //上传后的回调
      
       } 
       //,accept: 'file' //允许上传的文件类型
       //,size: 50 //最大允许上传的文件大小
       //,……
     })
          


 从 layui 2.1.0 开始，允许你直接在元素上设定基础参数，如：

 
     【HTML】
     <button class="layui-btn test" lay-data="{url: '/a/'}">上传图片</button>
     <button class="layui-btn test" lay-data="{url: '/b/', accept: 'file'}">上传文件</button>
     
     【JS】
     upload.render({
       elem: '.test'
       ,done: function(res, index, upload){
         //获取当前触发上传的元素，一般用于 elem 绑定 class 的情况，注意：此乃 layui 2.1.0 新增
         var item = this.item;
       }
     })
          


 更多支持的参数详见下表，合理的配置它们，应对各式各样的业务需求。


   <table class="layui-table">



 



 



   </col>



 



   </col>



 



   </col>



 



   </col>



   </colgroup>



 



 



 


 参数选项


   </th>



 


 说明


   </th>



 


 类型


   </th>



 


 默认值


   </th>



   </tr>



   </thead>



 



 



 


 elem


   </td>



 


 指向容器选择器，如：elem: '#id'。也可以是 DOM 对象


   </td>



 


 string/object


   </td>



 


 -


   </td>



   </tr>



 



 


 url


   </td>



 


 服务端上传接口，返回的数据规范请详见下文


   </td>



 


 string


   </td>



 


 -


   </td>



   </tr>



 



 





   </td>



 


 请求上传接口的额外参数。如：data: {id: 'xxx'}
 从 layui 2.2.6 开始，支持动态值，如:
 
     data: {
       id: function(){
         return $('#id').val();
       }
     }
                



   </td>



 


 object


   </td>



 


 -


   </td>



   </tr>



 



 


 headers


   </td>



 


 接口的请求头。如：/headers: {token: 'sasasas'}/。注：该参数为 layui
 2.2.6 开始新增


   </td>



   </tr>



 



 


 accept


   </td>



 


 指定允许上传时校验的文件类型，可选值有：/images/（图片）、/file/（所有文件）、/video/（视频）、/audio/（音频）


   </td>



 


 string


   </td>



 


 images


   </td>



   </tr>



 



 





   </td>



 


 规定打开文件选择框时，筛选出的文件类型，值为用逗号隔开的 MIME
 类型列表。如：
 /acceptMime: 'image/*'/（只显示图片文件）
 /acceptMime: 'image/jpg, image/png'/（只显示 jpg 和 png 文件）
 注：该参数为 layui 2.2.6 开始新增


   </td>



 


 string


   </td>



 


 images


   </td>



   </tr>



 



 


 exts


   </td>



 


 允许上传的文件后缀。一般结合 /accept/ 参数类设定。假设 accept 为 file
 类型时，那么你设置 /exts: 'zip|rar|7z'/
 即代表只允许上传压缩格式的文件。如果 accept
 未设定，那么限制的就是图片的文件格式


   </td>



 


 string


   </td>



 


 jpg|png|gif|bmp|jpeg


   </td>



   </tr>



 



 


 auto


   </td>



 


 是否选完文件后自动上传。如果设定 /false/，那么需要设置 /bindAction/
 参数来指向一个其它按钮提交上传


   </td>



 


 boolean


   </td>



 


 true


   </td>



   </tr>



 



 


 bindAction


   </td>



 


 指向一个按钮触发上传，一般配合 auto: false
 来使用。值为选择器或 DOM 对象，如：bindAction: '#btn'


   </td>



 


 string/object


   </td>



 


 -


   </td>



   </tr>



 



 


 field


   </td>



 


 设定文件域的字段名


   </td>



 


 string


   </td>



 


 file


   </td>



   </tr>



 



 


 size


   </td>



 


 设置文件最大可允许上传的大小，单位 KB。不支持 ie8/9


   </td>



 


 number


   </td>



 


 0（即不限制）


   </td>



   </tr>



 



 


 multiple


   </td>



 


 是否允许多文件上传。设置 /true/即可开启。不支持 ie8/9


   </td>



 


 boolean


   </td>



 


 false


   </td>



   </tr>



 



 


 number


   </td>



 


 设置同时可上传的文件数量，一般配合 multiple 参数出现。
 注意：/该参数为 layui 2.2.3 开始新增/


   </td>



 


 number


   </td>



 


 0（即不限制）


   </td>



   </tr>



 



 


 drag


   </td>



 


 是否接受拖拽的文件上传，设置 /false/ 可禁用。不支持 ie8/9


   </td>



 


 boolean


   </td>



 


 true


   </td>



   </tr>



 



 


 回调


   </td>



   </tr>



 



 


 choose


   </td>



 


 选择文件后的回调函数。返回一个 object 参数，详见下文


   </td>



 


 function


   </td>



 


 -


   </td>



   </tr>



 



 


 before


   </td>



 


 文件提交上传前的回调。返回一个 object 参数（同上），详见下文


   </td>



 


 function


   </td>



 


 -


   </td>



   </tr>



 



 


 done


   </td>



 


 执行上传请求后的回调。返回三个参数，分别为：/res/（服务端响应信息）、/index/（当前文件的索引）、/upload/（重新上传的方法，一般在文件上传失败后使用）。详见下文


   </td>



 


 function


   </td>



 


 -


   </td>



   </tr>



 



 


 error


   </td>



 


 执行上传请求出现异常的回调（一般为网络异常、URL
 404 等）。返回两个参数，分别为：/index/（当前文件的索引）、/upload/（重新上传的方法）。详见下文


   </td>



 


 function


   </td>



 


 -


   </td>



   </tr>



   </tbody>



   </table>



 - 上传接口


 设定一个 URL 地址给 /url/ 参数，用来告诉 upload
 模块的服务端上传接口。像你平时使用 Ajax 一样。如：

 
     upload.render({
       elem: '#id'
       ,url: '/api/upload/' //必填项
       ,method: ''  //可选项。HTTP类型，默认post
       ,data: {} //可选项。额外的参数，如：{id: 123, abc: 'xxx'}
     });      
          


 该接口返回的相应信息（response）必须是一个标准的 JSON 格式，如：

 
     {
       "code": 0
       ,"msg": ""
       ,"data": {
         "src": "http://cdn.layui.com/123.jpg"
       }
     }       
          


 注意 1：你不一定非得按照上述格式返回，只要是合法的 JSON
 字符即可。其响应信息会转化成 JS 对象传递给 /done/ 回调。
 注意 2：如果上传后，出现文件下载框（一般为 ie 下），那么你需要在服务端对 response 的 header 设置
 /Content-Type: text/html/


 - 选择文件的回调


 在文件被选择后触发，该回调会在 before 回调之前。一般用于非自动上传（即
 /auto: false/ ）的场景，比如预览图片等。

 
     upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,auto: false //选择文件后不自动上传
       ,bindAction: '#testListAction' //指向一个按钮触发上传
       ,choose: function(obj){
         //将每次选择的文件追加到文件队列
         var files = obj.pushFile();
        
         //预读本地文件，如果是多文件，则会遍历。(不支持ie8/9)
         obj.preview(function(index, file, result){
           console.log(index); //得到文件索引
           console.log(file); //得到文件对象
           console.log(result); //得到文件base64编码，比如图片
          
           //obj.resetFile(index, file, '123.jpg'); //重命名文件名，layui 2.3.0 开始新增
          
           //这里还可以做一些 append 文件列表 DOM 的操作
          
           //obj.upload(index, file); //对上传失败的单个文件重新上传，一般在某个事件中使用
           //delete files[index]; //删除列表中对应的文件，一般在某个事件中使用
         });
       }
     });      
          


 事实上这是一个非常实用的存在，可轻松应对复杂的列表文件上传管理。具体可移步到
 示例 页面，里面有一个文件列表的小例子。


 - 文件上传前的回调


 在 /choose/ 回调之后、/done/error/ 回调之前触发。返回的参数完全类似
 choose 回调。一般用于上传完毕前的 loading、图片预览等。

 
     upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,before: function(obj){ //obj参数包含的信息，跟 choose回调完全一致，可参见上文。
         layer.load(); //上传loading
       }
       ,done: function(res, index, upload){
         layer.closeAll('loading'); //关闭loading
       }
       ,error: function(index, upload){
         layer.closeAll('loading'); //关闭loading
       }
     });      
          



 - 上传接口请求成功的回调


 在上传接口请求完毕后触发，但文件不一定是上传成功的，只是接口的响应状态正常（200）。回调返回三个参数，分别为：/服务端响应信息/、/当前文件的索引/、/重新上传的方法/

 
     upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,done: function(res, index, upload){
         //假设code=0代表上传成功
         if(res.code == 0){
           //do something （比如将res返回的图片链接保存到表单的隐藏域）
         }
        
         //获取当前触发上传的元素，一般用于 elem 绑定 class 的情况，注意：此乃 layui 2.1.0 新增
         var item = this.item;
        
         //文件保存失败
         //do something
       }
     });      
          



 - 上传请求失败的回调


 当请求上传时出现异常时触发（如网络异常、404/500 等）。回调返回两个参数，分别为：/当前文件的索引/、/重新上传的方法/

 
     upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,error: function(index, upload){
         //当上传失败时，你可以生成一个“重新上传”的按钮，点击该按钮时，执行 upload() 方法即可实现重新上传
       }
     });      
          



 - 多文件上传完毕后的状态回调


 只有当开启多文件时（即 multiple: true），该回调才会被触发。回调返回一个
 object 类型的参数，包含一些状态数据：

 
     upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,multiple: true
       ,allDone: function(obj){ //当文件全部被提交后，才触发
         console.log(obj.total); //得到总文件数
         console.log(obj.successful); //请求成功的文件数
         console.log(obj.aborted); //请求失败的文件数
       }
       ,done: function(res, index, upload){ //每个文件提交一次触发一次。详见“请求成功的回调”
      
       }
     });      
          



 - 文件上传进度的回调


 在网速一般的情况下，大文件的上传通常需要一定时间的等待，而浏览器并不会醒目地告知你它正在努力地上传中，此时为了提升用户体验，我们可以通过该回调制作一个进度条。注：该回调为
 layui 2.5.5 新增

 
     upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,progress: function(n, elem){
         var percent = n + '%' //获取进度百分比
         element.progress('demo', percent); //可配合 layui 进度条元素使用
        
         //以下系 layui 2.5.6 新增
         console.log(elem); //得到当前触发的元素 DOM 对象。可通过该元素定义的属性值匹配到对应的进度条。
       }
     });       
          



 - 重载实例


 有时你可能需要对 /upload.render()/
 实例进行重载，通过改变一些参数（如将上传文件重置为只上传图片等场景）来重置功能。如：

 
     //创建一个实例
     var uploadInst = upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,size: 1024*5 //限定大小
     });
     
     //重载该实例，支持重载全部基础参数
     uploadInst.reload({
       accept: 'images' //只允许上传图片
       ,acceptMime: 'image/*' //只筛选图片
       ,size: 1024*2 //限定大小
     }); 
          


 注意：该方法为 layui 2.5.0 开始新增


 - 重新上传


 在执行 /upload.render(options)/
 方法时，其实有返回一个实例对象，以便对完成重新上传等操作。注意：这是对当前上传队列的全局重新上传，而
 /choose/ 回调返回的 /obj.upload(index, file)/
 方法则是对单个文件进行重新上传。如：

 
     var uploadInst = upload.render({
       elem: '#id'
       ,url: '/api/upload/'
       ,choose: function(obj){
         obj.preview(function(index, file, result){
           //对上传失败的单个文件重新上传，一般在某个事件中使用
           //obj.upload(index, file);
         });
       }
     });
     
     //重新上传的方法，一般在某个事件中使用
     //uploadInst.upload(); 
          



 - 跨域上传


 有些时候，可能会涉及到文件跨域操作，过去版本的 upload
 模块最大的缺陷恰恰在于这里。而从 layui 2.0 的版本开始，我们已经对
 跨域做了支持。但鉴于代码的冗余度等多方面考虑，在 IE9 以下版本环境中，仍然不支持跨域。其它所有版本的 IE 和 Chrome/FireFox 等高级浏览器均支持。

 那么，需要你怎么做？通常来说，是借助 /CORS（跨资源共享）/
 方案，即对接口所在的服务器设置：/Access-Control-Allow-Origin/
 详见 Google，配置起来还是挺简单的。而至于域名限制，一般是服务端程序中去做处理。这里不做过多赘述。



 --------------

 [[https://www.layui.com/doc/modules/upload.html]]

 
 











 --------------


** 穿梭框组件文档 - layui.transfer
   穿梭框组件的初衷来源于 layui 社区的扩展组件平台，并且在 layui 2.5.0 的版本中开始登场。其适用的业务场景多样，不妨一试。

   模块加载名称：transfer

 - 快速使用


 transfer 组件可以进行数据的交互筛选

 #+begin_src html
 
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>穿梭框组件</title>
       <link rel="stylesheet" href="../src/css/layui.css">
     </head>
     <body>
       <div id="test1"></div>
       <script src="../src/layui.js"></script>
       <script>
       layui.use('transfer', function(){
         var transfer = layui.transfer;
       
         //渲染
         transfer.render({
           elem: '#test1'  //绑定元素
           ,data: [
             {"value": "1", "title": "李白", "disabled": "", "checked": ""}
             ,{"value": "2", "title": "杜甫", "disabled": "", "checked": ""}
             ,{"value": "3", "title": "贤心", "disabled": "", "checked": ""}
           ]
           ,id: 'demo1' //定义索引
         });
       });
       </script>
     </body>
     </html>
 #+end_src
          
 - 基础参数
 目前 transfer 组件提供以下基础参数，可根据需要进行相应的设置

 | 参数选项     | 说明                                                       | 类型            | 默认值                                             |
 |--------------+------------------------------------------------------------+-----------------+----------------------------------------------------|
 | elem         | 指向容器选择器                                             | String/Object   | -                                                  |
 | title        | 穿梭框上方标题                                             | Array           | ['标题一', '标题二']                               |
 | data         | 数据源                                                     | Array           | [{}, {}, ...]                                      |
 | parseData    | 用于对数据源进行格式解析                                   | Function        | [[index_u26.html#parseData][详见数据源格式解析]]   |
 | value        | 初始选中的数据（右侧列表）                                 | Array           | -                                                  |
 | id           | 设定实例唯一索引，用于基础方法传参使用。                   | String          | -                                                  |
 | showSearch   | 是否开启搜索                                               | Boolean         | false                                              |
 | width        | 定义左右穿梭框宽度                                         | Number          | 200                                                |
 | height       | 定义左右穿梭框高度                                         | Number          | 340                                                |
 | text         | 自定义文本，如空数据时的异常提示等。                       | Object          | -                                                  |
 |              |                                             |                 |                                                    |
 |              |     text: {                                                |                 |                                                    |
 |              |       none: '无数据' //没有数据时的文案                    |                 |                                                    |
 |              |       ,searchNone: '无匹配数据' //搜索无匹配数据时的文案   |                 |                                                    |
 |              |     }                                                      |                 |                                                    |
 |              |                                                            |                 |                                                    |
 |              |                                              |                 |                                                    |
 | onchange     | 左右数据穿梭时的回调                                       | Function        | [[index_u26.html#onchange][详见穿梭时的回调]]      |


 - 数据源格式解析


 数据格式解析的回调函数，用于将任意数据格式解析成 transfer
 组件规定的数据格式，以下是合法的数据格式如下：

 
     [
       {"value": "1", "title": "李白", "disabled": "", "checked": ""}
       ,{"value": "2", "title": "杜甫", "disabled": "", "checked": ""}
       ,{"value": "3", "title": "贤心", "disabled": "", "checked": ""}
     ]
          


 然而很多时候你返回的数据格式可能并不符合规范，比如：

 
     [
       {"id": "1", "name": "李白"}
       ,{"id": "2", "name": "杜甫"}
       ,{"id": "3", "name": "贤心"}
     ]
          


 那么您需要将其解析成 transfer 组件所规定的数据格式：

 
     transfer.render({
       elem: '#text1'
       ,data: [
         {"id": "1", "name": "李白"}
         ,{"id": "2", "name": "杜甫"}
         ,{"id": "3", "name": "贤心"}
       ]
       ,parseData: function(res){
         return {
           "value": res.id //数据值
           ,"title": res.name //数据标题
           ,"disabled": res.disabled  //是否禁用
           ,"checked": res.checked //是否选中
         }
       }
     });
          



 - 左右穿梭的回调


 当数据在左右穿梭时触发，回调返回当前被穿梭的数据

 
     transfer.render({
       elem: '#text'
       ,data: [] //数据源
       ,onchange: function(data, index){
         console.log(data); //得到当前被穿梭的数据
         console.log(index); //如果数据来自左边，index 为 0，否则为 1
       }
     });
          



 - 基础方法


 基础用法是组件关键组成部分，目前所开放的所有方法如下：

 
     var transfer = layui.transfer;
     
     transfer.set(options); //设定全局默认参数。options 即各项基础参数
     transfer.getData(id); //获得右侧数据
     transfer.reload(id, options); //重载实例
        



 - 获得右侧数据


 穿梭框的右侧数据通常被认为是选中数据，因此你需要得到它并提交到后台。

 
     transfer.render({
       elem: '#test'
       ,data: []
       ,id: 'demo1' //定义索引
     });
     
     //获得右侧数据
     var getData = transfer.getData('demo1'); 
          



 - 实例重载


 重载一个已经创建的组件实例，被覆盖新的基础属性

 
     transfer.render({
       elem: '#test'
       ,data: []
       ,id: 'demo1' //定义索引
     });
     
      //可以重载所有基础参数
     transfer.reload('demo1', {
       title: ['新列表1', '新列表2']
     });
          



 - 结语


 穿梭框组件极易上手，在浩瀚的业务需求中，值得一用。

** 树形组件文档 - layui.tree

 在一段漫长的雪藏后，我们在 layui 2.5.0 的版本中重新创作了
 tree，以便它能够更加适用于绝大多数业务场景，而风格依然遵循 layui
 独有的极简和清爽。需要提醒的是，如果您的项目中仍然采用了 layui 2.5
 版本之前的 tree，它将不被兼容，请尽快修改为以下新的调用方式。


 模块加载名称：/tree/







 - 快速使用


 通过 /tree.render()/ 方法指定一个元素，便可快速创建一个 tree 实例。

 
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>树组件</title>
       <link rel="stylesheet" href="../src/css/layui.css">
     </head>
     <body>
       <div id="test1"></div>
       <script src="../src/layui.js"></script>
       <script>
       layui.use('tree', function(){
         var tree = layui.tree;
       
         //渲染
         var inst1 = tree.render({
           elem: '#test1'  //绑定元素
           ,data: [{
             title: '江西' //一级菜单
             ,children: [{
               title: '南昌' //二级菜单
               ,children: [{
                 title: '高新区' //三级菜单
                 //…… //以此类推，可无限层级
               }]
             }]
           },{
             title: '陕西' //一级菜单
             ,children: [{
               title: '西安' //二级菜单
             }]
           }]
         });
       });
       </script>
     </body>
     </html>
          



 - 基础参数


 目前 tree 组件提供以下基础参数，可根据需要进行相应的设置

 | 参数选项          | 说明                                                                                                                    | 类型            | 示例值                                  |
 |-------------------+-------------------------------------------------------------------------------------------------------------------------+-----------------+-----------------------------------------|
 | elem              | 指向容器选择器                                                                                                          | String/Object   | -                                       |
 | data              | 数据源                                                                                                                  | Array           | [[index_u10.html#data][详见数据选项]]   |
 | id                | 设定实例唯一索引，用于基础方法传参使用。                                                                                | String          | -                                       |
 | showCheckbox      | 是否显示复选框                                                                                                          | Boolean         | false                                   |
 | edit              | 是否开启节点的操作图标。默认 false。                                                                                    | Boolean/Array   | ['update', 'del']                       |
 |                   |                                                                                                                         |                 |                                         |
 |                   | -  若为 true，则默认显示“改删”图标                                                                                      |                 |                                         |
 |                   | -  若为 数组，则可自由配置操作图标的显示状态和顺序，目前支持的操作图标有：/add/、/update/、/del/，如：                |                 |                                         |
 |                   |                                                                                                                       |                 |                                         |
 |                   |    edit: ['add', 'update', 'del']                                                                                       |                 |                                         |
 | accordion         | 是否开启手风琴模式，默认 false                                                                                          | Boolean         | false                                   |
 | onlyIconControl   | 是否仅允许节点左侧图标控制展开收缩。默认 false（即点击节点本身也可控制）。若为 true，则只能通过节点左侧图标来展开收缩   | Boolean         | false                                   |
 | isJump            | 是否允许点击节点时弹出新窗口跳转。默认 false，若开启，需在节点数据中设定 link 参数（值为 url 格式）                     | Boolean         | false                                   |
 | showLine          | 是否开启连接线。默认 true，若设为 false，则节点左侧出现三角图标。                                                       | Boolean         | true                                    |
 | text              | 自定义各类默认文本，目前支持以下设定：                                                                                  | Object          | -                                       |
 |                   |                                                                                                          |                 |                                         |
 |                   |     text: {                                                                                                             |                 |                                         |
 |                   |       defaultNodeName: '未命名' //节点默认名称                                                                          |                 |                                         |
 |                   |       ,none: '无数据' //数据为空时的提示文本                                                                            |                 |                                         |
 |                   |     }                                                                                                                   |                 |                                         |
 |                   |                                                                                                                         |                 |                                         |
 |                   |                                                                                                           |                 |                                         |


 - 数据源属性选项


 我们将 data 参数称之为数据源，其内部支持设定以下选项

 | 属性选项   | 说明                                                       | 类型            | 示例值                            |
 |------------+------------------------------------------------------------+-----------------+-----------------------------------|
 | title      | 节点标题                                                   | String          | 未命名                            |
 | id         | 节点唯一索引值，用于对指定节点进行各类操作                 | String/Number   | 任意唯一的字符或数字              |
 | field      | 节点字段名                                                 | String          | 一般对应表字段名                  |
 | children   | 子节点。支持设定选项同父节点                               | Array           | [{title: '子节点 1', id: '111'}]   |
 | href       | 点击节点弹出新窗口对应的 url。需开启 isJump 参数           | String          | 任意 URL                          |
 | spread     | 节点是否初始展开，默认 false                               | Boolean         | true                              |
 | checked    | 节点是否初始为选中状态（如果开启复选框的话），默认 false   | Boolean         | true                              |
 | disabled   | 节点是否为禁用状态。默认 false                             | Boolean         | false                             |


 - 节点被点击的回调


 在节点被点击后触发，返回的参数如下：

 
     tree.render({
       elem: '#test1'
       ,click: function(obj){
         console.log(obj.data); //得到当前点击的节点数据
         console.log(obj.state); //得到当前节点的展开状态：open、close、normal
         console.log(obj.elem); //得到当前节点元素
        
         console.log(obj.data.children); //当前节点下是否有子节点
       }
     });
          



 - 复选框被点击的回调


 点击复选框时触发，返回的参数如下：

 
     tree.render({
       elem: '#test1'
       ,oncheck: function(obj){
         console.log(obj.data); //得到当前点击的节点数据
         console.log(obj.checked); //得到当前节点的展开状态：open、close、normal
         console.log(obj.elem); //得到当前节点元素
       }
     });
          



 - 操作节点的回调


 通过 operate 实现函数，对节点进行增删改等操作时，返回操作类型及操作节点

 
     tree.render({
       elem: '#test1'
       ,operate: function(obj){
         var type = obj.type; //得到操作类型：add、edit、del
         var data = obj.data; //得到当前节点的数据
         var elem = obj.elem; //得到当前节点元素
        
         //Ajax 操作
         var id = data.id; //得到节点索引
         if(type === 'add'){ //增加节点
           //返回 key 值
           return 123;
         } else if(type === 'update'){ //修改节点
           console.log(elem.find('.layui-tree-txt').html()); //得到修改后的内容
         } else if(type === 'del'){ //删除节点
          
         };
       }
     });
          



 - 返回选中的节点数据


 很多时候 tree
 可能不仅仅只是一个树菜单，它还用于各种权限控制等场景，这个时候你需要获得选中的节点。
 语法：/tree.getChecked(id)/

 
     tree.render({
       elem: '#test'
       ,data: [] //数据源
       ,id: 'demoId' //定义索引
     });
     
     //获得选中的节点
     var checkData = tree.getChecked('demoId');
          



 - 设置节点勾选


 除了通过 checked
 参数对节点进行初始勾选之外，你还可以通过方法动态对节点执行勾选
 语法： /tree.setChecked(id, checkedId)/
 参数 /checkedId/：代表的是数据源中的节点 id

 
     tree.render({
       elem: '#test'
       ,data: [] //数据源
       ,id: 'demoId' //定义索引
     });
     
     //执行节点勾选
     tree.setChecked('demoId', 1); //单个勾选 id 为 1 的节点
     tree.setChecked('demoId', [2, 3]); //批量勾选 id 为 2、3 的节点
          



 - 实例重载


 重载一个已经创建的组件实例，被覆盖新的基础属性

 
     tree.render({
       elem: '#test'
       ,data: []
       ,id: 'demoId' //定义索引
     });
     
      //可以重载所有基础参数
     tree.reload('demoId', {
       //新的参数
     });
          



 - 结语


 树组件还在持续完善。






 --------------

 [[https://www.layui.com/doc/modules/tree.html]]

 
 











 --------------


** 颜色选择器文档 - layui.colorpicker

 #+BEGIN_QUOTE
   在主题定制的应用场景中，自然离不开颜色的自定义。而你往往需要的是关于它的直观选择，于是
   colorpicker 模块姗姗来迟，它支持 hex、rgb、rgba
   三类色彩模式，在代码中简单的调用后，便可在你的网页系统中自由拖拽去选择你中意的颜色。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/colorpicker/

   注意：/colorpicker 为 layui 2.4.0 新增模块，不支持 ie10
   以下版本，其它高级浏览器均支持。/
 #+END_QUOTE






 - 使用


 colorpicker 是一款颜色选择器，如下是一个最基本的用法：

 
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>颜色选择器</title>
       <link rel="stylesheet" href="../src/css/layui.css">
     </head>
     <body>
     <div id="test1"></div>
     <script src="../src/layui.js"></script>
     <script>
     layui.use('colorpicker', function(){
       var colorpicker = layui.colorpicker;
       //渲染
       colorpicker.render({
         elem: '#test1'  //绑定元素
       });
     });
     </script>
     </body>
     </html>
          



 - 基础参数


 colorpicker 组件目前支持以下参数

 | 参数选项    | 说明                                                                                                                                                                                                                  | 类型            | 默认值                                                                              |
 |-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------+-------------------------------------------------------------------------------------|
 | elem        | 指向容器选择器                                                                                                                                                                                                        | string/object   | -                                                                                   |
 | color       | 默认颜色，不管你是使用 hex、rgb 还是 rgba 的格式输入，最终会以指定的格式显示。                                                                                                                                        | string          | -                                                                                   |
 | format      | 颜色显示/输入格式，可选值： /hex/、/rgb/                                                                                                                                                                            | string          | hex（即 16 进制色值）                                                               |
 |             | 若在 rgb 格式下开启了透明度，格式会自动变成 rgba。在没有输入颜色的前提下，组件会默认为 #000 也就是黑色。                                                                                                              |                 |                                                                                     |
 | alpha       | 是否开启透明度，若不开启，则不会显示透明框。开启了透明度选项时，当你的默认颜色为 hex 或 rgb 格式，组件会默认加上值为 1 的透明度。相同的，当你没有开启透明度，却以 rgba 格式设置默认颜色时，组件会默认没有透明度。   | boolean         | false                                                                               |
 |             | 注意：/该参数必须配合 rgba 颜色值使用/                                                                                                                                                                                |                 |                                                                                     |
 | predefine   | 预定义颜色是否开启                                                                                                                                                                                                    | boolean         | false                                                                               |
 | colors      | 预定义颜色，此参数需配合 /predefine: true/ 使用。                                                                                                                                                                     | Array           | 此处列举一部分：['#ff4500','#1e90ff','rgba(255, 69, 0, 0.68)','rgb(255, 120, 0)']   |
 | size        | 下拉框大小，可以选择：lg、sm、xs。                                                                                                                                                                                    | string          | -                                                                                   |


 - 预定义颜色


 预定义颜色，可以被认为是提供的参考色，因此除了我们默认的预定义颜色之外，你还可以自己定义

 
     layui.use('colorpicker', function(){
       var colorpicker = layui.colorpicker;、
       
       colorpicker.render({
         elem: '#test1'
         ,predefine: true
         ,colors: ['#F00','#0F0','#00F','rgb(255, 69, 0)','rgba(255, 69, 0, 0.5)']
       });
     });
          



 - 颜色被改变的回调


 回调名：/change/
 当颜色在选择器中发生选择改变时，会进入 change
 回调，你可以通过它来进行所需操作，下面的例子就是实时的输出当前选择器的颜色

 
     layui.use('colorpicker', function(){
       var colorpicker = layui.colorpicker;
       
       colorpicker.render({
         elem: '#test1'
         ,change: function(color){
           console.log(color)
         }
       });
     });
          



 - 颜色选择后的回调


 回调名：/done/
 点击颜色选择器的“确认”和“清除”按钮，均会触发 done
 回调，回调返回当前选择的色值。

 
     layui.use('colorpicker', function(){
       var colorpicker = layui.colorpicker;
       
       colorpicker.render({
         elem: '#test1'
         ,done: function(color){
           console.log(color)
           //譬如你可以在回调中把得到的 color 赋值给表单
         }
       });
     });
          



 - 结语


 颜色选择器不仅仅是独立使用，它更多情况可能是跟表单结合使用。






 --------------

 [[https://www.layui.com/doc/modules/colorpicker.html]]

 
 











 --------------


** 常用元素操作 - layui.element

 #+BEGIN_QUOTE
   页面中有许多元素需要自动去完成一些处理，譬如导航菜单的小滑块、Tab 的切换等操作，他们往往不需要去单独调用一个方法来开启一项功能，而页面上恰恰有太多这样的小交互，所以我们统一归类为 element 组件。跟表单一样，基于元素属性和事件驱动的接口书写方式。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/element/
 #+END_QUOTE






 - 使用



 元素功能的开启只需要加载 element 模块即会自动完成，所以不用跟其它模块一样为某一个功能而调用一个方法。她只需要找到她支持的元素，如你的页面存在一个
 Tab 元素块，那么 element 模块会自动赋予她该有的功能。

 
     <div class="layui-tab" lay-filter="demo">
       <ul class="layui-tab-title">
         <li class="layui-this">网站设置</li>
         <li>商品管理</li>
         <li>订单管理</li>
       </ul>
       <div class="layui-tab-content">
         <div class="layui-tab-item layui-show">内容1</div>
         <div class="layui-tab-item">内容2</div>
         <div class="layui-tab-item">内容3</div>
       </div>
     </div>
          


 前提是你要加载 element 模块

 
     layui.use('element', function(){
       var element = layui.element;
      
       //一些事件监听
       element.on('tab(demo)', function(data){
         console.log(data);
       });
     });
          



 - 预设元素属性



 我们通过自定义元素属性来作为元素的功能参数，他们一般配置在容器外层，如：

 
     <div class="layui-tab" lay-allowClose="true" lay-filter="demo">…</div>      
     <span class="layui-breadcrumb" lay-separator="|"></span>
     
      And So On
          


 element 模块支持的元素如下表：

 | 属性名           | 可选值       | 说明                                                                     |
 |------------------+--------------+--------------------------------------------------------------------------|
 | lay-filter       | 任意字符     | 事件过滤器（公用属性），主要用于事件的精确匹配，跟选择器是比较类似的。   |
 | lay-allowClose   | true         | 针对于 Tab 容器，是否允许选项卡关闭。默认不允许，即不用设置该属性          |
 | lay-separator    | 任意分隔符   | 针对于面包屑容器                                                         |


 - 基础方法



 基础方法允许你在外部主动对元素发起一起操作，目前 element 模块提供的方法如下：

 | 方法名                               | 描述                                                                                   |
 |--------------------------------------+----------------------------------------------------------------------------------------|
 | var element = layui.element;         | element 模块的实例                                                                    |
 |                                      | 返回的/element/变量为该实例的对象，携带一些用于元素操作的基础方法                      |
 | element.on(filter, callback);        | 用于元素的一些事件监听                                                                 |
 | element.tabAdd(filter, options);     | 用于新增一个 Tab 选项                                                                  |
 |                                      | 参数/filter/：tab 元素的 lay-filter="value" 过滤器的值（value）                       |
 |                                      | 参数/options/：设定可选值的对象，目前支持的选项如下述示例：                            |
 |                                      |                                                                         |
 |                                      |     element.tabAdd('demo', {                                                           |
 |                                      |       title: '选项卡的标题'                                                            |
 |                                      |       ,content: '选项卡的内容' //支持传入 html                                          |
 |                                      |       ,id: '选项卡标题的 lay-id 属性值'                                                  |
 |                                      |     });                                                                                |
 |                                      |                                                                                        |
 |                                      |                                                                          |
 | element.tabDelete(filter, layid);    | 用于删除指定的 Tab 选项                                                                |
 |                                      | 参数/filter/：tab 元素的 lay-filter="value" 过滤器的值（value）                       |
 |                                      | 参数/layid/：选项卡标题列表的 属性 lay-id 的值                                         |
 |                                      |                                                                         |
 |                                      |     element.tabDelete('demo', 'xxx'); //删除 lay-id="xxx" 的这一项                     |
 |                                      |                                                                                        |
 |                                      |                                                                          |
 | element.tabChange(filter, layid);    | 用于外部切换到指定的 Tab 项上，参数同上，如：                                          |
 |                                      | element.tabChange('demo', 'layid'); //切换到 lay-id="yyy" 的这一项                     |
 | element.tab(options);                | 用于绑定自定义 Tab 元素（即非 layui 自带的 tab 结构）。/该方法为 layui 2.1.6 新增/   |
 |                                      | 参数/options/：设定可选值的对象，目前支持的选项如下述示例：                            |
 |                                      |                                                                         |
 |                                      |     //HTML                                                                             |
 |                                      |     <ul id="tabHeader">                                                                |
 |                                      |       <li>标题 1</li>                                                                   |
 |                                      |       <li>标题 2</li>                                                                   |
 |                                      |       <li>标题 3</li>                                                                   |
 |                                      |     </ul>                                                                              |
 |                                      |     <div id="tabBody">                                                                 |
 |                                      |       <div class="xxx">内容 1</div>                                                     |
 |                                      |       <div class="xxx">内容 2</div>                                                     |
 |                                      |       <div class="xxx">内容 4</div>                                                     |
 |                                      |     </div>                                                                             |
 |                                      |                                                                                        |
 |                                      |     //JavaScript                                                                       |
 |                                      |     element.tab({                                                                      |
 |                                      |       headerElem: '#tabHeader>li' //指定 tab 头元素项                                    |
 |                                      |       ,bodyElem: '#tabBody>.xxx' //指定 tab 主体元素项                                   |
 |                                      |     });                                                                                |
 |                                      |                                                                                        |
 |                                      |                                                                          |
 | element.progress(filter, percent);   | 用于动态改变进度条百分比：                                                           |
 |                                      | element.progress('demo', '30%');                                                       |


 更新渲染

 - 更新渲染



 跟表单元素一样，很多时候你的页面元素可能是动态生成的，这时 element 的相关功能将不会对其有效，你必须手工执行
 /element.init(type, filter)/ 方法即可。注意：2.1.6 开始，可以用
 /element.render(type, filter);/ 方法替代

 第一个参数：type，为表单的 type 类型，可选。默认对全部类型的表单进行一次更新。可局部刷新的 type 如下表：

 | 参数（type）值   | 描述                            |
 |------------------+---------------------------------|
 | tab              | 重新对 tab 选项卡进行初始化渲染   |
 | nav              | 重新对导航进行渲染              |
 | breadcrumb       | 重新对面包屑进行渲染            |
 | progress         | 重新对进度条进行渲染            |
 | collapse         | 重新对折叠面板进行渲染          |

 
     element.init(); //更新全部  2.1.6 可用 element.render() 方法替代
     element.render('nav'); //重新对导航进行渲染。注：layui 2.1.6 版本新增
     //……
          


 第二个参数：filter，为元素的 lay-filter=""
 的值。你可以借助该参数，完成指定元素的局部更新。

 
     【HTML】
     <div class="layui-nav" lay-filter="test1">
       …
     </div>
     
     <div class="layui-nav" lay-filter="test2">
       …
     </div>
          
     【JavaScript】
     //比如当你对导航动态插入了二级菜单，这时你需要重新去对它进行渲染
     element.render('nav', 'test1'); //对 lay-filter="test1" 所在导航重新渲染。注：layui 2.1.6 版本新增
     //……      
          



 - 事件监听



 语法：/element.on('event(过滤器值)', callback);/

 element 模块在 layui 事件机制中注册了 element 模块事件，所以当你使用
 layui.onevent() 自定义模块事件时，请勿占用 element 名。目前 element
 模块所支持的事件如下表：

 | event       | 描述                          |
 |-------------+-------------------------------|
 | tab         | 监听 Tab 选项卡切换事件       |
 | tabDelete   | 监听 Tab 监听选项卡删除事件   |
 | nav         | 监听导航菜单的点击事件        |
 | collapse    | 监听折叠面板展开或收缩事件    |

 默认情况下，事件所监听的是全部的元素，但如果你只想监听某一个元素，使用事件过滤器即可。
 如：/<div class="layui-tab" lay-filter="test"></div>/

 
     element.on('tab(test)', function(data){
       console.log(data);
     });
          



 - 监听选项卡切换



 Tab 选项卡点击切换时触发，回调函数返回一个 object 参数，携带两个成员：

 
     element.on('tab(filter)', function(data){
       console.log(this); //当前Tab标题所在的原始DOM元素
       console.log(data.index); //得到当前Tab的所在下标
       console.log(data.elem); //得到当前的Tab大容器
     });
          



 - 监听选项卡删除



 Tab 选项卡被删除时触发，回调函数返回一个 object 参数，携带两个成员：

 
     element.on('tabDelete(filter)', function(data){
       console.log(this); //当前Tab标题所在的原始DOM元素
       console.log(data.index); //得到当前Tab的所在下标
       console.log(data.elem); //得到当前的Tab大容器
     });
          


 /注：该事件为 layui 2.1.6 新增/


 - 监听导航菜单的点击


 当点击导航父级菜单和二级菜单时触发，回调函数返回所点击的菜单 DOM 对象：

 
     element.on('nav(filter)', function(elem){
       console.log(elem); //得到当前点击的DOM对象
     });
          



 - 监听折叠面板


 当折叠面板点击展开或收缩时触发，回调函数返回一个 object 参数，携带三个成员：

 
     element.on('collapse(filter)', function(data){
       console.log(data.show); //得到当前面板的展开状态，true或者false
       console.log(data.title); //得到当前点击面板的标题区域DOM对象
       console.log(data.content); //得到当前点击面板的内容区域DOM对象
     });
          



 - 动态操作进度条



 你肯定不仅仅是满足于进度条的初始化显示，通常情况下你需要动态改变它的进度值，element 模块提供了这样的基础方法：/element.progress(filter,
 percent);/。

 
     <div class="layui-progress layui-progress-big" lay-filter="demo" lay-showPercent="true">
       <div class="layui-progress-bar" lay-percent="0%"></div>
     </div>
     
     上述是一个已经设置了过滤器（lay-filter="demo"）的进度条
     现在你只需要在某个事件或者语句中执行方法：element.progress('demo', '50%');
     即可改变进度
          


 如果你需要进度条更直观的例子，建议浏览：[[https://www.layui.com/demo/progress.html][进度条演示页面]]


 - 结语



 事实上元素模块的大部分操作都是内部自动完成的，所以目前你发现他的接口很少呢。当然，我们也会不断增加 element 模块所支持的页面元素。






 --------------

 [[https://www.layui.com/doc/modules/element.html]]

 
 











 --------------


** 滑块文档 - layui.slider

 #+BEGIN_QUOTE
   作为一个拖拽式的交互性组件，滑块往往能给产品带来更好的操作体验。layui
   深以为然，slider
   模块包含了你能想到的大部分功能，尽管它可以作为一个独立的个体，但很多时候它往往会出现
   form 元素中，想象一下吧。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/slider/

   注意：/slider 为 layui 2.4.0 新增模块/
 #+END_QUOTE






 - 使用


 通过对 slider
 模块的使用，你可以在页面构建出可拖动的滑动元素，如下是一个最基本的用法：

 
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>滑块</title>
       <link rel="stylesheet" href="../src/css/layui.css">
     </head>
     <body>
     <div id="slideTest1"></div>
     <script src="../src/layui.js"></script>
     <script>
     layui.use('slider', function(){
       var slider = layui.slider;
      
       //渲染
       slider.render({
         elem: '#slideTest1'  //绑定元素
       });
     });
     </script>
     </body>
     </html>
          



 - 基础参数


 slider 组件支持以下参数

 | 参数选项   | 说明                                                                                                                          | 类型            | 默认值    |
 |------------+-------------------------------------------------------------------------------------------------------------------------------+-----------------+-----------|
 | elem       | 指向容器选择器                                                                                                                | string/object   | -         |
 | type       | 滑块类型，可选值有：/default/（水平滑块）、/vertical/（垂直滑块）                                                             | string          | default   |
 | min        | 滑动条最小值，正整数，默认为 0                                                                                                | number          | 0         |
 | max        | 滑动条最大值                                                                                                                  | number          | 100       |
 | range      | 是否开启滑块的范围拖拽，若设为 true，则滑块将出现两个可拖拽的环                                                               | boolean         | false     |
 | value      | 滑块初始值，默认为数字，若开启了滑块为范围拖拽（即 range: true），则需赋值数组，异表示开始和结尾的区间，如：value: [30, 60]   | number/Array    | 0         |
 | step       | 拖动的步长                                                                                                                    | number          | 1         |
 | showstep   | 是否显示间断点                                                                                                                | boolean         | false     |
 | tips       | 是否显示文字提示                                                                                                              | boolean         | true      |
 | input      | 是否显示输入框（注意：若 range 参数为 true 则强制无效）                                                                     | boolean         | false     |
 |            | 点击输入框的上下按钮，以及输入任意数字后回车或失去焦点，均可动态改变滑块                                                      |                 |           |
 | height     | 滑动条高度，需配合 type:"vertical" 参数使用                                                                                   | number          | 200       |
 | disabled   | 是否将滑块禁用拖拽                                                                                                            | boolean         | false     |
 | theme      | 主题颜色，以便用在不同的主题风格下                                                                                            | string          | #009688   |


 - 自定义提示文本


 当鼠标放在圆点和滑块拖拽时均会触发提示层。其默认显示的文本是它的对应数值，你也可以自定义提示内容：

 
     slider.render({
       elem: '#slideTest1'
       ,setTips: function(value){ //自定义提示文本
         return value + '%';
       }
     });
          



 - 数值改变的回调


 在滑块数值被改变时触发。该回调非常重要，可动态获得滑块当前的数值。你可以将得到的数值，赋值给隐藏域，或者进行一些其它操作。

 
     //当滑块为普通模式，回调返回的 value 是一个数值
     slider.render({
       elem: '#slideTest1'
       ,change: function(value){
         console.log(value) //动态获取滑块数值
         //do something
       }
     });
     
     //当滑块为范围模式，回调返回的 value 是一个数组，包含开始和结尾
     slider.render({
       elem: '#slideTest1'
       ,range: true
       ,change: function(value){
         console.log(value[0]) //得到开始值
         console.log(value[1]) //得到结尾值
         //do something
       }
     });
          



 - 实例方法


 执行 slider
 实例时，会返回一个当前实例的对象，里面包含针对当前实例的方法和属性。
 语法：/var ins1 = slider.render(options);/

 
     var ins1 = slider.render(options); //获得实例对象
     
     ins1.config //获得当前实例的配置项
     ins1.setValue(nums); //动态给滑块赋值
          



 - 动态改变滑块数值


 你可以通过外部方法动态改变滑块数值，如：

 
     var ins1 = slider.render({
       elem: '#test1'
       //…
     });      
     
     //改变指定滑块实例的数值
     ins1.setValue(20)
     
     //若滑块开启了范围（range: true）
     ins1.setValue(20, 0) //设置开始值
     ins1.setValue(60, 1) //设置结尾值
          



 - 结语


 layui.slider 可以大幅度提升你 Web 应用中的很多操作体验，可尽情发挥。






 --------------

 [[https://www.layui.com/doc/modules/slider.html]]

 
 











 --------------


** 评分组件文档 - layui.rate

 #+BEGIN_QUOTE
   rate 评分组件在电商和 O2O
   平台尤为常见，一般用于对商家进行服务满意度评价。rate 组件是 layui
   团队新成员 [[https://github.com/star1029/][@star1029]]
   的第一款组件，外形依然小巧自然，功能依旧灵活实用。其中评分对应的自定义内容功能，可让它有更多的发挥空间。该组件为
   2.3.0 版本新增
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/rate/
 #+END_QUOTE






 - 使用


 rate
 组件可以用来进行展示或评价，你只需要通过更改参数设定来开启你想要的功能，如下是一个最基本的例子：

 
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>评分组件</title>
       <link rel="stylesheet" href="../src/css/layui.css">
     </head>
     <body>
       <div id="test1"></div>
       <script src="../src/layui.js"></script>
       <script>
       layui.use('rate', function(){
         var rate = layui.rate;
       
         //渲染
         var ins1 = rate.render({
           elem: '#test1'  //绑定元素
         });
       });
       </script>
     </body>
     </html>
          


 这真的就是个小例子，所以下文对组件的参数进行了说明，请仔细阅读奥


 - 基础参数


 目前 rate 组件提供了以下基础参数，你可根据实际场景进行相应的设置

 | 参数选项   | 说明                                                                                                       | 类型            | 默认值    |
 |------------+------------------------------------------------------------------------------------------------------------+-----------------+-----------|
 | elem       | 指向容器选择器                                                                                             | string/object   | -         |
 | length     | 评分组件中具体星星的个数。个数当然是整数啦，残缺的星星很可怜的，所以设置了小数点的组件我们会默认向下取整   | number          | 5         |
 | value      | 评分的初始值                                                                                               | number          | 0         |
 | theme      | 主题颜色。我们默认的组件颜色是/#FFB800/，你可以根据自身喜好来更改组件的颜色，以适用不同场景                | string          | #FFB800   |
 | half       | 设定组件是否可以选择半星                                                                                   | boolean         | false     |
 | text       | 是否显示评分对应的内容                                                                                     | boolean         | false     |
 | readonly   | 是否只读，即只用于展示而不可点                                                                             | boolean         | false     |


 - 分数设置


 如若你设置分数，我们会根据你是否开启半星功能，来做一个具体的规范：

***** *关闭半星功能:*
 
 


 -  /小数值大于 0.5 ：分数向上取整，如 3.6 分，则系统自动更改为 4 分/
 -  /小数值小于等于 0.5 ：分数向下取整，如 3.2 分，则系统自动更改为 3 分/
 -  /如果在关闭半星功能的情况下开启了文本，你会发现你的分数也相应的变成了整数/

***** *开启半星功能:*
 
 


 -  /不论你的小数值是 0.1 还是 0.9，都统一规划为
    0.5，在文本开启的情况下，你可以看见你的分数并没有发生变化/


 - 自定义文本的回调


 通过 setText
 函数，在组件初次渲染和点击后时产生回调。我们默认文本以星级显示，你可以根据自己设定的文字来替换我们的默认文本，如
 “讨厌” “喜欢”
 。若用户选择分数而没有设定对应文字的情况下，系统会使用我们的默认文本

 
     
     rate.render({
       elem: '#test1'
       ,setText: function(value){
         var arrs = {
           '1': '极差'
           ,'2': '差'
           ,'3': '中等'
           ,'4': '好'
         };
         this.span.text(arrs[value] || ( value + "星"));
       }
     });
          


 当你点击 3 星时，文本内容是中等，点击 5
 星时，由于没有设定对应文字，所以文本会显示 5 星


 - 点击产生的回调


 通过 choose
 实现函数，在组件被点击后触发，回调分数，用户可根据分数来设置效果，比如出现弹出层

 
     rate.render({
       elem: '#test1'
       ,choose: function(value){
         if(value > 4) alert( '么么哒' )
       }
     });
          


 那么当你点击 5
 星或更高星级时，页面就会弹出“么么哒”啦，你可根据相应需求在 choose
 里完善你的代码


 - 结语


 评分组件非常简单，重点在于参数选项的设置，你可以前往示例页面进行更为直观的了解。






 --------------

 [[https://www.layui.com/doc/modules/rate.html]]

 
 




 <<index.html>>






 --------------

** 通用轮播组件文档 - layui.carousel

 #+BEGIN_QUOTE
   carousel 是 layui 2.0
   版本中新增的全新模块，主要适用于跑马灯/轮播等交互场景。它并非单纯地为焦点图而生，准确地说，它可以满足任何类型内容的轮播式切换操作，更可以胜任
   FullPage （全屏上下轮播）的需求，简洁而不失强劲，灵活而优雅。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：/carousel/
 #+END_QUOTE






 - 快速使用


 如下是几个常用的轮播示例，其中背景色是为了区分条目单独加的，在 layui 框架中并不会包含。条目区域可以放上文字列表、图片等任意内容



 



 


 条目 1


 条目 2


 条目 3


 条目 4


 条目 5




 
     <!DOCTYPE html>
     <html>
     <head>
       <meta charset="utf-8">
       <title>carousel模块快速使用</title>
       <link rel="stylesheet" href="/static/build/layui.css" media="all">
     </head>
     <body>
     
     <div class="layui-carousel" id="test1">
       <div carousel-item>
         <div>条目1</div>
         <div>条目2</div>
         <div>条目3</div>
         <div>条目4</div>
         <div>条目5</div>
       </div>
     </div>
     <!-- 条目中可以是任意内容，如：<img src=""> -->
     
     <script src="/static/build/layui.js"></script>
     <script>
     layui.use('carousel', function(){
       var carousel = layui.carousel;
       //建造实例
       carousel.render({
         elem: '#test1'
         ,width: '100%' //设置容器宽度
         ,arrow: 'always' //始终显示箭头
         //,anim: 'updown' //切换动画方式
       });
     });
     </script>
     </body>
     </html>


 在 HTML 结构中，只需要简单地注意这两项：
 1) 外层元素的 /class="layui-carousel"/ 用来标识为一个轮播容器
 2) 内层元素的属性 /carousel-item/ 用来标识条目

 而 /id/
 则用于 carousel 模块建造实例的元素指向，剩下的工作，就是按照你的实际需求，给方法设置不同的基础参数了。


 - 基础参数选项


 通过核心方法：/carousel.render(options)/
 来对轮播设置基础参数，也可以通过方法：/carousel.set(options)/
 来设定全局基础参数.


 | 可选项      | 说明                                                | 类型            | 默认值      |
 |-------------+-----------------------------------------------------+-----------------+-------------|
 | elem        | 指向容器选择器，如：elem: '#id'。也可以是 DOM 对象    | string/object   | 无          |
 | width       | 设定轮播容器宽度，支持像素和百分比                  | string          | '600px'     |
 | height      | 设定轮播容器高度，支持像素和百分比                  | string          | '280px'     |
 | full        | 是否全屏轮播                                        | boolean         | false       |
 | anim        | 轮播切换动画方式，可选值为：                        | string          | 'default'   |
 |             |                                                     |                 |             |
 |             | -  default（左右切换）                              |                 |             |
 |             | -  updown（上下切换）                               |                 |             |
 |             | -  fade（渐隐渐显切换）                             |                 |             |
 | autoplay    | 是否自动切换                                        | boolean         | true        |
 | interval    | 自动切换的时间间隔，单位：ms（毫秒），不能低于 800   | number          | 3000        |
 | index       | 初始开始的条目索引                                  | number          | 0           |
 | arrow       | 切换箭头默认显示状态，可选值为：                    | string          | 'hover'     |
 |             |                                                     |                 |             |
 |             | -  hover（悬停显示）                                |                 |             |
 |             | -  always（始终显示）                               |                 |             |
 |             | -  none（始终不显示）                               |                 |             |
 | indicator   | 指示器位置，可选值为：                              | string          | 'inside'    |
 |             |                                                     |                 |             |
 |             | -  inside（容器内部）                               |                 |             |
 |             | -  outside（容器外部）                              |                 |             |
 |             | -  none（不显示）                                   |                 |             |
 |             |                                                     |                 |             |
 |             |                                                   |                 |             |
 |             | 注意：如果设定了 /anim:'updown'/，该参数将无效      |                 |             |
 | trigger     | 指示器的触发事件                                    | string          | 'click'     |

 - 切换事件
 轮播的每一次切换时触发，回调函数返回一个 object 参数，携带的成员如下：
     var carousel = layui.carousel;
     
     //监听轮播切换事件
     carousel.on('change(test1)', function(obj){ //test1来源于对应HTML容器的 lay-filter="test1" 属性值
       console.log(obj.index); //当前条目的索引
       console.log(obj.prevIndex); //上一个条目的索引
       console.log(obj.item); //当前条目的元素对象
     });     
          
 - 重置轮播
 事实上，在执行 carousel.render(options) 方法时，有返回一个当前实例的对象。该对象包含了用于操作当前轮播的一些属性和方法。
     var ins = carousel.render(options);
     
     //重置轮播
     ins.reload(options);
 - 结语
 由于轮播的使用非常简单，所以本篇不做过于详细的讲解，核心在于基础参数选项的设置。你也可以前往示例页面进行更为直观的了解。
** 流加载文档 - layui.flow
#+BEGIN_QUOTE
  该模块包含/信息流加载/和/图片懒加载/两大核心支持，无论是对服务端、还是前端体验，都有非常大的性能帮助。你可能已经在太多的地方看到她们的身影了，但不妨现在开始，体验一下 Layui 更为简单和高效的 Flow 吧。
#+END_QUOTE

  模块加载名称：flow
- 使用
flow 模块包含两个核心方法，如下所示：

    layui.use('flow', function(){
      var flow = layui.flow;
      //信息流
      flow.load(options);
      
      //图片懒加载
      flow.lazyimg(options);
    });
          


下面将对她们进行详细介绍。
- 信息流

信息流即异步逐页渲染列表元素，这是你页面已经存在的一段列表，你页面初始时只显示了 6 个

      <li>1</li>
      <li>2</li>
      ……
      <li>6</li>

你想通过加载更多来显示余下列表，那么你只需要执行方法：flow.load(options) 即可


    layui.use('flow', function(){
      var $ = layui.jquery; //不用额外加载jQuery，flow模块本身是有依赖jQuery的，直接用即可。
      var flow = layui.flow;
      flow.load({
        elem: '#demo' //指定列表容器
        ,done: function(page, next){ //到达临界点（默认滚动触发），触发下一页
          var lis = [];
          //以jQuery的Ajax请求为例，请求下一页数据（注意：page是从2开始返回）
          $.get('/api/list?page='+page, function(res){
            //假设你的列表返回在data集合中
            layui.each(res.data, function(index, item){
              lis.push(''+ item.title +'');
            }); 
            
            //执行下一页渲染，第二参数为：满足“加载更多”的条件，即后面仍有分页
            //pages为Ajax返回的总页数，只有当前页小于总页数的情况下，才会继续出现加载更多
            next(lis.join(''), page < res.pages);    
          });
        }
      });
    });
          


上述是一个比较简单的例子，以下是信息流完整的参数支撑（即 options 对象），它们将有助于你更灵活地应对各种场景

| 参数         | 类型       | 描述                                                                                                                                                                             |
|--------------+------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| elem         | string     | 指定列表容器的选择器                                                                                                                                                             |
| scrollElem   | string     | 滚动条所在元素选择器，默认 document。如果你不是通过窗口滚动来触发流加载，而是页面中的某一个容器的滚动条，那么通过该参数指定即可。                                                 |
| isAuto       | boolean    | 是否自动加载。默认 true。如果设为 false，点会在列表底部生成一个“加载更多”的 button，则只能点击它才会加载下一页数据。                                                                |
| end          | string     | 用于显示末页内容，可传入任意 HTML 字符。默认为：没有更多了                                                                                                                         |
| isLazyimg    | boolean    | 是否开启图片懒加载。默认 false。如果设为 true，则只会对在可视区域的图片进行按需加载。但与此同时，在拼接列表字符的时候，你不能给列表中的 img 元素赋值 src，必须要用 lay-src 取代，如：   |
|              |            |                                                                                                                                                                   |
|              |            |                                                                                                                                                                                  |
|              |            |     layui.each(res.data, function(index, item){                                                                                                                                  |
|              |            |       lis.push('<li><img lay-src="'+ item.src +'"></li>');                                                                                                                       |
|              |            |     });                                                                                                                                                                          |
|              |            |                                                                                                                                                                                  |
|              |            |                                                                                                                                                                    |
| mb           | number     | 与底部的临界距离，默认 50。即当滚动条与底部产生该距离时，触发加载。注意：只有在 isAuto 为 true 时有效。                                                                             |
|              |            | 额，等等。。mb=margin-bottom，可不是骂人的呀。                                                                                                                                   |
| done         | function   | 到达临界点触发加载的回调。信息流最重要的一个存在。携带两个参数：                                                                                                                 |
|              |            |                                                                                                                                                                   |
|              |            |     done: function(page, next){                                                                                                                                                  |
|              |            |       //请注意：layui 1.0.5 之前的版本是从第 2 页开始返回，也就是说你的第一页数据并非 done 来触发加载                                                                                |
|              |            |       （为之前这个愚蠢的设计表示抱歉）                                                                                                                                           |
|              |            |       //从 layui 1.0.5 的版本开始，page 是从 1 开始返回，初始时即会执行一次 done 回调。                                                                                               |
|              |            |       //console.log(page) //获得当前页                                                                                                                                           |
|              |            |                                                                                                                                                                                  |
|              |            |       //执行下一页渲染，第二参数为：满足“加载更多”的条件，即后面仍有分页                                                                                                         |
|              |            |       //只有当前页小于总页数的情况下，才会继续出现加载更多                                                                                                                       |
|              |            |       next('列表 HTML 片段', page < res.pages);                                                                                                                                    |
|              |            |     }                                                                                                                                                                            |
|              |            |                                                                                                                                                                                  |
|              |            |                                                                                                                                                                    |


- 图片懒加载

应该说比当前市面上任何一个懒加载的实现都更为强劲和轻量，她用不足 80 行代码巧妙地提供了一个始终加载当前屏图片的高性能方案（无论上滑还是下滑）。对你的网站因为图片可能带来的压力，可做出很好的应对。

语法：flow.lazyimg(options)

    layui.use('flow', function(){
      var flow = layui.flow;
      //当你执行这样一个方法时，即对页面中的全部带有lay-src的img元素开启了懒加载（当然你也可以指定相关img）
      flow.lazyimg(); 
    });

如上所述，它只会针对以下 img 元素有效：

    <img lay-src="aaa.jpg"> 
    <img src="bbb.jpg" alt="該图不会懒加载">
    <img lay-src="ccc.jpg">       

图片懒加载的使用极其简单，其参数（options 对象）可支持的 key 如下表所示：
** 工具集文档 - layui.util

 #+BEGIN_QUOTE
   我们将一些工具性元素放入 util
   模块中，以供选择性使用。其内部由多个小工具组件组成，他们也许不是必须的，但很多时候却能为你的页面提供良好的辅助作用。
 #+END_QUOTE

 #+BEGIN_QUOTE
   模块加载名称：util
 #+END_QUOTE

 - 固定块
 看到页面右下角的那个包含 top 的 bar 了吗？对，就是她。她通常会出现在那个固定位置，由两个可选的 bar 和一个默认必选的 TopBar 组成。

 语法：util.fixbar(options)
 其中参数 options 是一个对象，可支持的 key 如下表：
 
     layui.use('util', function(){
       var util = layui.util;
      
       //执行
       util.fixbar({
         bar1: true
         ,click: function(type){
           console.log(type);
           if(type === 'bar1'){
             alert('点击了bar1')
           }
         }
       });
     });
          

 - 倒计时


 这是一个精致的封装，它并不负责 UI 元素的呈现，而仅仅只是返回倒计时的数据，这意味着你可以将它应用在任何倒计时相关的业务中。

 语法：util.countdown(endTime, serverTime, callback)

 | 参数         | 说明                                                                                                                                                                                                 |
 |--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 | endTime      | 结束时间戳或 Date 对象，如：4073558400000，或：new Date(2099,1,1).                                                                                                                                     |
 | serverTime   | 当前服务器时间戳或 Date 对象                                                                                                                                                                           |
 | callback     | 回调函数。如果倒计时尚在运行，则每一秒都会执行一次。并且返回三个参数： /date/（包含天/时/分/秒的对象）、 /serverTime/（当前服务器时间戳或 Date 对象）, /timer/（计时器返回的 ID 值，用于 clearTimeout）   |

    
     #+begin_src js
     <script>
     layui.use('util', function(){
       var util = layui.util;
      
       //示例
       var endTime = new Date(2099,1,1).getTime() //假设为结束日期
       ,serverTime = new Date().getTime(); //假设为当前服务器时间，这里采用的是本地时间，实际使用一般是取服务端的
       
       util.countdown(endTime, serverTime, function(date, serverTime, timer){
         var str = date[0] + '天' + date[1] + '时' +  date[2] + '分' + date[3] + '秒';
         layui.$('#test').html('距离2099年1月1日还有：'+ str);
       });
     });
     </script>
     #+end_src
         
 - 其它方法


 | 方法                               | 说明                                                                                           |
 |------------------------------------+------------------------------------------------------------------------------------------------|
 | util.timeAgo(time, onlyDate)       | 某个时间在当前时间的多久前。                                                                 |
 |                                    | 参数 /time/：即为某个时间的时间戳或日期对象                                                  |
 |                                    | 参数 /onlyDate/：是否在超过 30 天后，只返回日期字符，而不返回时分秒                            |
 |                                    |                                                                                              |
 |                                    | 如果在 3 分钟以内，返回：/刚刚/                                                                |
 |                                    | 如果在 30 天以内，返回：/若干分钟前/、/若干小时前/、/若干天前/，如：5分钟前                    |
 |                                    | 如果在 30 天以上，返回：/日期字符/，如：2017-01-01                                               |
 | util.toDateString(time, format)    | 转化时间戳或日期对象为日期格式字符                                                           |
 |                                    | 参数 /time/：可以是日期对象，也可以是毫秒数                                                  |
 |                                    | 参数 /format/：日期字符格式（默认：yyyy-MM-dd HH:mm:ss），可随意定义，如：yyyy 年 MM 月 dd 日       |
 | util.digit(num, length)            | 数字前置补零                                                                                 |
 |                                    | 参数 /num/：原始数字                                                                         |
 |                                    | 参数 /length/：数字长度，如果原始数字长度小于 length，则前面补零，如：util.digit(7, 3) //007   |
 | util.escape(str)                   | 转义 xss 字符                                                                                |
 |                                    | 参数 /str/：任意字符                                                                           |
 | util.event(attr, obj, eventType)   | 用于更好地批量处理事件。                                                                     |
 |                                    | 参数 /attr/：绑定需要监听事件的元素属性                                                      |
 |                                    | 参数 /obj/：事件回调链                                                                       |
 |                                    | 参数 /eventType/：事件类型（默认 click）                                                     |
 |                                    |                                                                                              |
 |                                    | 示例：                                                                                         |
 |                                    |                                                                                 |
 |                                    |     HTML：                                                                                     |
 |                                    |     <button class="layui-btn" lay-active="e1">事件 1</button>                                   |
 |                                    |     <button class="layui-btn" lay-active="e2">事件 2</button>                                   |
 |                                    |     <button class="layui-btn" lay-active="e3">事件 3</button>                                   |
 |                                    |                                                                                                |
 |                                    |     JavaScript：                                                                               |
 |                                    |     <script>                                                                                   |
 |                                    |     layui.use('util', function(){                                                              |
 |                                    |       var util = layui.util;                                                                   |
 |                                    |                                                                                                |
 |                                    |       //处理属性 为 lay-active 的所有元素事件                                                  |
 |                                    |       util.event('lay-active', {                                                               |
 |                                    |         e1: function(){                                                                        |
 |                                    |           alert('触发了事件 1');                                                                |
 |                                    |         }                                                                                      |
 |                                    |         ,e2: function(){                                                                       |
 |                                    |           alert('触发了事件 2');                                                                |
 |                                    |         }                                                                                      |
 |                                    |         ,e3: function(){                                                                       |
 |                                    |           alert('触发了事件 3');                                                                |
 |                                    |         }                                                                                      |
 |                                    |       });                                                                                      |
 |                                    |     });                                                                                        |
 |                                    |     </script>                                                                                  |
 |                                    |                                                                                                |
 |                                    |                                                                                  |

 - 结语


 工具模块往往应用在边边角角，将不定期增加。
** 代码修饰器文档 - layui.code
   code 模块通常针对于程序员，它是 layui 中一个极其轻量的组成。通俗而言，该模块就是对你的 pre 元素进行一个修饰，从而保证你展现的代码更具可读性。目前它没有对不同的语言进行颜色高亮（因为目前感觉没有太大必要，后面 layui 全面稳定后，可能会完善该功能），但这丝毫不会影响它对你带来的便捷。

 #+BEGIN_QUOTE
   模块加载名称：code
 #+END_QUOTE

 - 使用
 code 模块的使用非常简单，请直接看代码，假设你在页面有这样一段 pre 标签：
     #+begin_src html
     <pre class="layui-code">
     //代码区域
     var a = 'hello layui';
        
     #+end_src
 那么你只需要经过下面的方式：
 
     #+begin_src js
     layui.use('code', function(){ //加载code模块
       layui.code(); //引用code方法
     });
     #+end_src
          


 就可以将那段 pre 区块显示成你现在看到的这个样子：

 
     //代码区域
     var a = 'hello layui';
          





 - 基础参数



 方法：layui.code(options)
 它接受一个对象参数 options，支持以下 key 的设定

 | 参数     | 类型      | 描述                          |
 |----------+-----------+-------------------------------|
 | elem     | string    | 指定元素的选择器              |
 | title    | string    | 设定标题                      |
 | height   | string    | 设置最大高度                  |
 | encode   | boolean   | 是否转义 html 标签，默认 false   |
 | skin     | string    | 风格选择（值见下文）          |
 | about    | boolean   | 是否剔除右上关于              |

 特别提示：/除了上述方式的设置，我们还允许你直接在 pre 标签上设置属性来替代，如：/

 
     <pre class="layui-code" lay-title="" lay-height="" lay-skin="" lay-encode="">
     这样有木有觉得更方便些
       
          


 下面将针对每一个参数做进一步讲解。




 - 指定元素



 code 模块会去自动查找 class 为 layui-code 的类，如果你初始给的不是该类，仅仅只是一个 pre 标签，那么需要通过 elem 设置选择器来指向元素：

 
     layui.code({
       elem: 'pre' //默认值为.layui-code
     });
          





 - 设置标题



 即左上角显示的文本，默认值为 code

 
     layui.code({
       title: 'JavaScript'
     });
          


 或者直接在 pre 标签上设置属性<pre lay-title="JavaScript"></pre>




 - 设置最大高度



 你可以设置以下 key 来控制修饰器的最大高度。如果内容低于该高度，则会自适应内容高度；如果内容超过了该高度，则会自动出现滚动条。

 
     layui.code({
       height: '100px' //请注意必须加px。如果该key不设定，则会自适应高度，且不会出现滚动条。
     });
     
     
     
     
      Hi，我是充数的 ^_^
     
          


 或者直接在 pre 标签上设置属性<pre lay-height="100px"></pre>




 - 转义 html 标签



 事实上很多时候你都需要在 pre 标签中展现 html 标签，而不希望它被浏览器解析。那么 code 模块允许你这么做，只需要开启 encode 即可，如：

 
     layui.code({
       encode: true //是否转义html标签。默认不开启
     });
          


 开启了 encode 后的效果如下：

 
       HTML将不会被解析
       有木有感觉非常方便


          


 或者直接在 pre 标签上设置属性<pre lay-encode="true"></pre>




 - 风格选择



 你肯定不会满足于 code 的某一种显示风格，而 skin 参数则允许你设定许多种显示风格，我们目前内置了两种，分别为默认和 notepad

 
     layui.code({
       title: 'NotePad++的风格'
       ,skin: 'notepad' //如果要默认风格，不用设定该key。
     });
          
 上述的设定后，你会看到下面的样子

 
     i'm code.
     i'm code too.     
          


 或者直接在 pre 标签上设置属性<pre lay-skin="notepad"></pre>




 - 剔除关于


 如果你不喜欢出现右上角的 layui.code 字眼，你是可以剔除的。设置 about:
 false 即可，请叫我雷锋。

* 下载安装
  #+begin_example
  ├─css //css目录
  │  │─modules //模块css目录（一般如果模块相对较大，我们会单独提取，比如下面三个：）
  │  │  ├─laydate
  │  │  ├─layer
  │  │  └─layim
  │  └─layui.css //核心样式文件
  ├─font  //字体图标目录
  ├─images //图片资源目录（目前只有layim和编辑器用到的GIF表情）
  │─lay //模块核心目录
  │  └─modules //各模块组件
  │─layui.js //基础核心库
  └─layui.all.js //包含layui.js和所有模块的合并文件
  #+end_example
 
* 使用模板
  #+begin_src html
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>开始使用layui</title>
        <link rel="stylesheet" href="../layui/css/layui.css">
      </head>
      <body>
    
        <!-- 你的HTML代码 -->
    
        <script src="../layui/layui.js"></script>
        <script>
          //一般直接写在一个js文件中
          layui.use(['layer', 'form'], function(){
          var layer = layui.layer
          ,form = layui.form;
      
          layer.msg('Hello World');
          });
        </script> 
      </body>
    </html>
  #+end_src

* 底层方法

 本篇主要介绍核心基础库 layui.js 所发挥的作用，其中过滤了大部分在外部可能不是太常用的 API，侧重罗列了最常用的框架支撑。

全局配置

方法：layui.config(options)

你可以在使用模块之前，全局化配置一些参数，尽管大部分时候它不是必须的。所以我们目前提供的全局配置项非常少，这也是为了减少一
些不必要的工作，尽可能让使用变得更简单。目前支持的全局配置项如下：


layui.config({
  dir: '/res/layui/' //layui.js 所在路径（注意，如果是 script 单独引入 layui.js，无需设定该参数。），一般情况下可以无视
  ,version: false //一般用于更新模块缓存，默认不开启。设为 true 即让浏览器不缓存。也可以设为一个固定的值，如：201610
  ,debug: false //用于开启调试模式，默认 false，如果设为 true，则JS模块的节点会保留在页面
  ,base: '' //设定扩展的 layui 模块的所在目录，一般用于外部模块扩展
});
      
定义模块

方法：layui.define([mods], callback)

通过该方法可定义一个 layui 模块。参数 mods 是可选的，用于声明该模块所依赖的模块。callback 即为模块加载完毕的回调函数，它返
回一个 exports 参数，用于输出该模块的接口。


layui.define(function(exports){
  //do something
  
  exports('demo', function(){
    alert('Hello World!');
  });
});
      
跟 RequireJS 最大不同的地方在于接口输出，exports 是一个函数，它接受两个参数，第一个参数为模块名，第二个参数为模块接口，当
你声明了上述的一个模块后，你就可以在外部使用了，demo 就会注册到 layui 对象下，即可通过 layui.demo() 去执行该模块的接口。

你也可以在定义一个模块的时候，声明该模块所需的依赖，如：


layui.define(['layer', 'laypage'], function(exports){
  //do something
  
  exports('demo', function(){
    alert('Hello World!');
  });
});
      
上述的 ['layer', 'laypage'] 即为本模块所依赖的模块，它并非只能是一个数组，你也可以直接传一个字符型的模块名，但是这样只能依赖
一个模块。

加载所需模块

方法：layui.use([mods], callback)

layui 的内置模块并非默认就加载的，他必须在你执行该方法后才会加载。它的参数跟上述的 define 方法完全一样。 
另外请注意，mods 里面必须是一个合法的模块名，不能包含目录。如果需要加载目录，建议采用 extend 建立别名（详见模块规范） 


layui.use(['laypage', 'layedit'], function(){
  var laypage = layui.laypage
  ,layedit = layui.layedit;
  
  //do something
});
      
该方法的函数其实返回了所加载的模块接口，所以你其实也可以不通过 layui 对象赋值获得接口（这一点跟 Sea.js 很像哈）：


layui.use(['laypage', 'layedit'], function(laypage, layedit){
  
  //使用分页
  laypage();
  
  //建立编辑器
  layedit.build();
});
      
动态加载 CSS

方法：layui.link(href)

href 即为 css 路径。注意：该方法并非是你使用 layui 所必须的，它一般只是用于动态加载你的外部 CSS 文件。

本地存储

本地存储是对 localStorage 和 sessionStorage 的友好封装，可更方便地管理本地数据。

 * localStorage 持久化存储：layui.data(table, settings)，数据会永久存在，除非物理删除。
 * sessionStorage 会话性存储：layui.sessionData(table, settings)，页面关闭后即失效。注：layui 2.2.5 新增

上述两个方法的使用方式是完全一样的。其中参数 table 为表名，settings是一个对象，用于设置 key、value。下面以 layui.data 方法为
例： 


//【增】：向 test 表插入一个 nickname 字段，如果该表不存在，则自动建立。
layui.data('test', {
  key: 'nickname'
  ,value: '贤心'
});
 
//【删】：删除 test 表的 nickname 字段
layui.data('test', {
  key: 'nickname'
  ,remove: true
});
layui.data('test', null); //删除test表
  
//【改】：同【增】，会覆盖已经存储的数据
  
//【查】：向 test 表读取全部的数据
var localTest = layui.data('test');
console.log(localTest.nickname); //获得“贤心”
      
获取设备信息

方法：layui.device(key)，参数key是可选的

由于 layui 的一些功能进行了兼容性处理和响应式支持，因此该方法同样发挥了至关重要的作用。尤其是在 layui mobile 模块中的作用可
谓举足轻重。该方法返回了丰富的设备信息：


var device = layui.device();
 
//device即可根据不同的设备返回下述不同的信息

{
  os: "windows" //底层操作系统，windows、linux、mac等
  ,ie: false //ie6-11的版本，如果不是ie浏览器，则为false
  ,weixin: false //是否微信环境
  ,android: false //是否安卓系统
  ,ios: false //是否ios系统
}

      
有时你的 App 可能会对 userAgent 插入一段特定的标识，譬如： 

 Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 myapp/1.8.6
 Safari/537.36 

你要验证当前的 WebView 是否在你的 App 环境，即可通过上述的myapp（即为 Native 给 Webview 插入的标识，可以随意定义）来判
断。


var device = layui.device('myapp');
if(device.myapp){
  alert('在我的App环境');
}      
      
其它

除上述介绍的方法之外，layui.js 内部还提供了许多底层引擎，他们同样是整个 layui 体系的有力支撑，在日常应用中也许会用到：

  方法/属性  描述    
  layui.cache  静态属性。获得一些配置及临时的缓存信息    
  layui.extend(options)  拓展一个模块别名，如：layui.extend({test: '/res/js/test'})    
  layui.each(obj, fn)  对象（Array、Object、DOM 对象等）遍历，可用于取代for语句    
  layui.getStyle(node, name)  获得一个原始 DOM 节点的 style 属性值，如：layui.getStyle(document.body,    
    'font-size')    
  layui.img(url, callback, error)  图片预加载    
  layui.sort(obj, key, desc)  将数组中的对象按某个成员重新对该数组排序，如：layui.sort([{a: 3},{a: 1},{a: 5}],    
    'a')    
  layui.router()  获得 location.hash 路由结构，一般在单页面应用中发挥作用。    
  layui.url(href)  用于将一段 URL 链接中的 pathname、search、hash 属性值进行对象化处理     
        
    参数： href 可选。若不传，则自动读取当前页面的 url（即：location.href）     
    示例：var url = layui.url();     
        
    注意：系 layui 2.5.6 新增     
  layui.hint()  向控制台打印一些异常信息，目前只返回了 error 方法：layui.hint().error('出错啦')    
  layui.stope(e)  阻止事件冒泡    
  layui.onevent(modName, events, callback)  增加自定义模块事件。有兴趣的同学可以阅读 layui.js 源码以及 form 模块    
  layui.event(modName, events, params)  执行自定义模块事件，搭配 onevent 使用    
  layui.factory(modName)  用于获取模块对应的 define 回调函数    
第三方支撑

layui 部分模块依赖 jQuery（比如 layer），但是你并不用去额外加载 jQuery。layui 已经将 jQuery 最稳定的一个版本改为 layui 的内部
模块，当你去使用 layer 之类的模块时，它会首先判断你的页面是否已经引入了 jQuery，如果没有，则加载内部的 jQuery 模块，如果有，
则不会加载。

* 页面元素规范与说明

 layui 提倡返璞归真，遵循于原生态的元素书写规则，所以通常而言，你仍然是在写基本的 HTML 和 CSS 代码，不同的是，在 HTML 结
 构上及 CSS 定义上需要小小遵循一定的规范。 

CSS内置公共基础类

  类名（class）  说明    
  布局 / 容器    
  layui-main  用于设置一个宽度为 1140px 的水平居中块（无响应式）    
  layui-inline  用于将标签设为内联块状元素    
  layui-box  用于排除一些UI框架（如Bootstrap）强制将全部元素设为box-sizing: border-box所引发的尺寸偏差    
  layui-clear  用于消除浮动（一般不怎么常用，因为layui几乎没用到浮动）    
  layui-btn-container  用于定义按钮的父容器。（layui 2.2.5 新增）    
  layui-btn-fluid  用于定义流体按钮。即宽度最大化适应。（layui 2.2.5 新增）    
  辅助    
  layui-icon  用于图标    
  layui-elip  用于单行文本溢出省略    
  layui-unselect  用于屏蔽选中    
  layui-disabled  用于设置元素不可点击状态    
  layui-circle  用于设置元素为圆形    
  layui-show  用于显示块状元素    
  layui-hide  用于隐藏元素    
  文本    
  layui-text  定义一段文本区域（如文章），该区域内的特殊标签（如a、li、em等）将会进行相应处理    
  layui-word-aux  灰色标注性文字，左右会有间隔    
  背景色    
  layui-bg-red  用于设置元素赤色背景    
  layui-bg-orange  用于设置元素橙色背景    
  layui-bg-green  用于设置元素墨绿色背景（主色调）    
  layui-bg-cyan  用于设置元素藏青色背景    
  layui-bg-blue  用于设置元素蓝色背景    
  layui-bg-black  用于设置元素经典黑色背景    
  layui-bg-gray  用于设置元素经典灰色背景    

其它的类一般都是某个元素或模块所特有，因此不作为我们所定义的公共类。

CSS命名规范

class命名前缀：layui，连接符：-，如：class="layui-form"

命名格式一般分为两种：一：layui-模块名-状态或类型，二：layui-状态或类型。因为有些类并非是某个模块所特有，他们通常会是一些公
共类。如：一（定义按钮的原始风格）：class="layui-btn layui-btn-primary"、二（定义内联块状元素）：class="layui-inline"

大致记住这些简单的规则，会让你在填充HTML的时候显得更加得心应手。另外，如果你是开发Layui拓展（模块），你最好也要遵循于类
似的规则，并且请勿占用Layui已经命名好的类，假设你是在帮Layui开发一个markdown编辑器，你的css书写规则应该如下：


.layui-markdown{border: 1px solid #e2e2e2;}
.layui-markdown-tools{}
.layui-markdown-text{}
      
HTML规范：结构

Layui在解析HTML元素时，必须充分确保其结构是被支持的。以Tab选项卡为例：


<div class="layui-tab">
  <ul class="layui-tab-title">
    <li class="layui-this">标题一</li>
    <li>标题二</li>
    <li>标题三</li>
  </ul>
  <div class="layui-tab-content">
    <div class="layui-tab-item layui-show">内容1</div>
    <div class="layui-tab-item">内容2</div>
    <div class="layui-tab-item">内容3</div>
  </div>
</div>
      
你如果改变了结构，极有可能会导致Tab功能失效。所以在嵌套HTML的时候，你应该细读各个元素模块的相关文档（如果你不是拿来主
义）

HTML规范：常用公共属性

很多时候，元素的基本交互行为，都是由模块自动开启。但不同的区域可能需要触发不同的动作，这就需要你设定我们所支持的自定义属性
来作为区分。如下面的 lay-submit、lay-filter即为公共属性（即以 lay- 作为前缀的自定义属性）：


<button class="layui-btn" lay-submit lay-filter="login">登入</button>      
      
目前我们的公共属性如下所示（即普遍运用于所有元素上的属性）

  属性  描述    
  lay-skin=" "  定义相同元素的不同风格，如checkbox的开关风格    
  lay-filter=" "  事件过滤器。你可能会在很多地方看到他，他一般是用于监听特定的自定义事件。你可以把它看作是一个ID选择器    
  lay-submit  定义一个触发表单提交的button，不用填写值    

额，好像有点少的样子（反正你也基本不会看文档。。(づ╥﹏╥)づ）。其它的自定义属性基本都在各自模块的文档中有所介绍。

结语

其实很多时候并不想陈列条条框框（除了一些特定需要的），所以你会发现本篇的篇幅较短。（哈哈哈哈哈，其实是写文档写得想吐了）



