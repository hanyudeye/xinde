* 小程序配置
** sitemap.json 
 配置小程序及其页面是否允许被微信索引
*** 所有页面都会被微信索引（默认情况） 
   #+BEGIN_EXAMPLE
       {
         "rules":[{
           "action": "allow",
           "page": "*"
         }]
       }
   #+END_EXAMPLE
*** path/to/page 页面不被索引
   #+BEGIN_EXAMPLE
       {
         "rules":[{
           "action": "disallow",
           "page": "path/to/page"
         }]
       }
   #+END_EXAMPLE
   
*** 配置 =path/to/page= 页面被索引，其余页面不被索引
   #+BEGIN_EXAMPLE
       {
         "rules":[{
           "action": "allow",
           "page": "path/to/page"
         }, {
           "action": "disallow",
           "page": "*"
         }]
       }
   #+END_EXAMPLE

*** 包含 =a 和 b= 参数的 =path/to/page= 页面会被微信优先索引，其他页面都会被索引，例如：
   - =path/to/page?a=1&b=2= => 优先被索引
   - =path/to/page?a=1&b=2&c=3= => 优先被索引
   - =path/to/page= => 被索引
   - =path/to/page?a=1= => 被索引
   - 其他页面都会被索引


   #+BEGIN_EXAMPLE
       {
         "rules":[{
           "action": "allow",
           "page": "path/to/page",
           "params": ["a", "b"],
           "matching": "inclusive"
         }, {
           "action": "allow",
           "page": "*"
         }]
       }
   #+END_EXAMPLE
   *注：={"action": "allow", "page": "*"}=
   是优先级最低的默认规则，未显式指明 "disallow" 的都默认被索引*

* 小程序
** 框架
*** 逻辑层 App Service
**** 注册小程序
  #+BEGIN_EXAMPLE
       // app.js
       App({
         onLaunch (options) {
           // Do something initial when launch.
         },
         onShow (options) {
           // Do something when show.
         },
         onHide () {
           // Do something when hide.
         },
         onError (msg) {
           console.log(msg)
         },
         globalData: 'I am global data'
       })
   #+END_EXAMPLE
**** 注册页面
***** 使用 Page
   #+BEGIN_EXAMPLE
       //index.js
       Page({
         data: {
           text: "This is page data."
         },
         onLoad: function(options) {
           // 页面创建时执行
         },
         onShow: function() {
           // 页面出现在前台时执行
         },
         onReady: function() {
           // 页面首次渲染完毕时执行
         },
         onHide: function() {
           // 页面从前台变为后台时执行
         },
         onUnload: function() {
           // 页面销毁时执行
         },
         onPullDownRefresh: function() {
           // 触发下拉刷新时执行
         },
         onReachBottom: function() {
           // 页面触底时执行
         },
         onShareAppMessage: function () {
           // 页面被用户分享时执行
         },
         onPageScroll: function() {
           // 页面滚动时执行
         },
         onResize: function() {
           // 页面尺寸变化时执行
         },
         onTabItemTap(item) {
           // tab 点击时执行
           console.log(item.index)
           console.log(item.pagePath)
           console.log(item.text)
         },
         // 事件响应函数
         viewTap: function() {
           this.setData({
             text: 'Set some data for updating view.'
           }, function() {
             // this is setData callback
           })
         },
         // 自由数据
         customData: {
           hi: 'MINA'
         }
       })
   #+END_EXAMPLE
***** 在页面中使用 behaviors
   #+BEGIN_EXAMPLE
       // my-behavior.js
       module.exports = Behavior({
         data: {
           sharedText: 'This is a piece of data shared between pages.'
         },
         methods: {
           sharedMethod: function() {
             this.data.sharedText === 'This is a piece of data shared between pages.'
           }
         }
       })
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
       // page-a.js
       var myBehavior = require('./my-behavior.js')
       Page({
         behaviors: [myBehavior],
         onLoad: function() {
           this.data.sharedText === 'This is a piece of data shared between pages.'
         }
       })
   #+END_EXAMPLE

***** 使用 Component
   #+BEGIN_EXAMPLE
       Component({
         data: {
           text: "This is page data."
         },
         methods: {
           onLoad: function(options) {
             // 页面创建时执行
           },
           onPullDownRefresh: function() {
             // 下拉刷新时执行
           },
           // 事件响应函数
           viewTap: function() {
             // ...
           }
         }
       })
   #+END_EXAMPLE

**** 页面路由
***** 页面栈
      | 路由方式   | 页面栈表现                        |
      |------------+-----------------------------------|
      | 初始化     | 新页面入栈                        |
      | 打开新页面 | 新页面入栈                        |
      | 页面重定向 | 当前页面出栈，新页面入栈          |
      | 页面返回   | 页面不断出栈，直到目标返回页      |
      | Tab 切换   | 页面全部出栈，只留下新的 Tab 页面 |
      | 重加载     | 页面全部出栈，只留下新的页面      |

      开发者可以使用 =getCurrentPages()= 函数获取当前页面栈。

***** 路由方式
      <navigator url="/pages/home/home">home</navigator>
          
      | 打开新页面 | wx.navigateTo        | 组件 <navigator open-type="navigateTo"/>     |
      | 页面重定向 | wx.redirectTo        | 组件 <navigator open-type="redirectTo"/>     |
      | 页面返回   | wx.navigateBack      | 使用组件<navigator open-type="navigateBack"> |
      | Tab 切换   | wx.switchTab         | 使用组件 <navigator open-type="switchTab"/>  |
      | 重启动     | 调用 API wx.reLaunch | 使用组件 <navigator open-type="reLaunch"/>   |

      Tab 切换对应的生命周期（以 A、B 页面为 Tabbar 页面，C 是从 A 页面打开的页面，D 页面是从 C 页面打开的页面为例）：
  
      | 当前页面          | 路由后页面      | 触发的生命周期（按顺序）                             |
      |-------------------+-----------------+------------------------------------------------------|
      | A                 | A               | Nothing happend                                      |
      | A                 | B               | A.onHide(), B.onLoad(), B.onShow()                   |
      | A                 | B（再次打开）   | A.onHide(), B.onShow()                               |
      | C                 | A               | C.onUnload(), A.onShow()                             |
      | C                 | B               | C.onUnload(), B.onLoad(), B.onShow()                 |
      | D                 | B               | D.onUnload(), C.onUnload(), B.onLoad(), B.onShow()   |
      | D（从转发进入）   | A               | D.onUnload(), A.onLoad(), A.onShow()                 |
      | D（从转发进入）   | B               | D.onUnload(), B.onLoad(), B.onShow()                 |

      - =navigateTo=, =redirectTo= 只能打开非 tabBar 页面。
      - =switchTab= 只能打开 tabBar 页面。
      - =reLaunch= 可以打开任意页面。
      - 页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有tabBar。
      - 调用页面路由带的参数可以在目标页面的=onLoad=中获取。

**** 模块化
     可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 module.exports 或者 exports 才能对外暴露接口。

     注意：

     -  =exports= 是 module.exports 的一个引用，因此在模块里边随意更改 =exports= 的指向会造成未知的错误。所以更推荐开发者采用 =module.exports= 来暴露模块接口，除非你已经清晰知道这两者的关系。
     -  小程序目前不支持直接引入 =node_modules= , 开发者需要使用到 =node_modules= 时候建议拷贝出相关的代码到小程序的目录中，或者使用小程序支持的npm 功能。

     #+BEGIN_EXAMPLE
         // common.js
         function sayHello(name) {
           console.log(`Hello ${name} !`)
         }
         function sayGoodbye(name) {
           console.log(`Goodbye ${name} !`)
         }

         module.exports.sayHello = sayHello
         exports.sayGoodbye = sayGoodbye
     #+END_EXAMPLE

     在需要使用这些模块的文件中，使用 =require= 将公共代码引入

     #+BEGIN_EXAMPLE
         var common = require('common.js')
         Page({
           helloMINA: function() {
             common.sayHello('MINA')
           },
           goodbyeMINA: function() {
             common.sayGoodbye('MINA')
           }
         })
     #+END_EXAMPLE

**** 文件作用域
     在 JavaScript文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。

     通过全局函数 =getApp= 可以获取全局的应用实例，如果需要全局的数据可以在=App()= 中设置，如：

     #+BEGIN_EXAMPLE
         // app.js
         App({
           globalData: 1
         })
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
         // a.js
         // The localValue can only be used in file a.js.
         var localValue = 'a'
         // Get the app instance.
         var app = getApp()
         // Get the global data and change it.
         app.globalData++
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
         // b.js
         // You can redefine localValue in file b.js, without interference with the localValue in a.js.
         var localValue = 'b'
         // If a.js it run before b.js, now the globalData shoule be 2.
         console.log(getApp().globalData)
     #+END_EXAMPLE

**** API
***** 事件监听 API
      我们约定，以 =on= 开头的 API用来监听某个事件是否触发，如：wx.onSocketOpen， wx.onCompassChange等。

      这类 API 接受一个回调函数作为参数，当事件触发时会调用这个回调函数，并将相关数据以参数形式传入。

      #+BEGIN_EXAMPLE
          wx.onCompassChange(function (res) {
            console.log(res.direction)
          })
      #+END_EXAMPLE

***** 同步 API
      我们约定，以 =Sync= 结尾的 API 都是同步 API， 如wx.setStorageSync， wx.getSystemInfoSync等。此外，也有一些其他的同步 API，如wx.createWorker，
      wx.getBackgroundAudioManager等，详情参见 API 文档中的说明。

      同步 API 的执行结果可以通过函数返回值直接获取，如果执行出错会抛出异常。

      *代码示例*

      #+BEGIN_EXAMPLE
          try {
            wx.setStorageSync('key', 'value')
          } catch (e) {
            console.error(e)
          }
      #+END_EXAMPLE

***** 异步 API
      大多数 API 都是异步 API，如wx.request，wx.login等。这类 API 接口通常都接受一个 Object类型的参数，这个参数都支持按需指定以下字段来接收接口调用结果：

      *Object 参数说明*
      | 参数名     | 类型       | 必填   | 说明                                               |
      |------------+------------+--------+----------------------------------------------------|
      | success    | function   | 否     | 接口调用成功的回调函数                             |
      | fail       | function   | 否     | 接口调用失败的回调函数                             |
      | complete   | function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |
      | 其他       | Any        | -      | 接口定义的其他参数                                 |

      *回调函数的参数*

      =success=，=fail=，=complete= 函数调用时会传入一个 =Object=类型参数，包含以下
      字段：

      | 属性    | 类型   | 说明                                                                 |
      |---------+--------+----------------------------------------------------------------------|
      | errMsg  | string | 错误信息，如果调用成功返回 =${apiName}:ok=                           |
      | errCode | number | 错误码，仅部分 API 支持，具体含义请参考对应 API 文档，成功时为 =0=。 |
      | 其他    | Any    | 接口返回的其他数据                                                   |

      异步 API 的执行结果需要通过 =Object= 类型的参数中传入的对应回调函数获取。部分异步 API 也会有返回值，可以用来实现更丰富的功能，如 wx.requestwx.connectSocket 等。

      *代码示例*

      #+BEGIN_EXAMPLE
          wx.login({
            success(res) {
              console.log(res.code)
            }
          })
      #+END_EXAMPLE

***** 异步 API 返回 Promise
      1. 部分接口如 =downloadFile=, =request=, =uploadFile=, =connectSocket=, =createCamera=（小游戏）本身就有返回值， 它们的 promisify需要开发者自行封 装。
      2. 当没有回调参数时，异步接口返回 promise。此时若函数调用失败进入 fail 逻辑， 会报错提示 =Uncaught (in promise)=，开发者可通过 catch 来进行捕获。
      3. wx.onUnhandledRejection 可以监听未处理的 Promise 拒绝事件。

      *代码示例*
      #+BEGIN_EXAMPLE
          // callback 形式调用
          wx.chooseImage({
            success(res) {
              console.log('res:', res)
            }
          })

          // promise 形式调用
          wx.chooseImage().then(res => console.log('res: ', res))
      #+END_EXAMPLE

*** 视图层 View
**** WXML
***** 数据绑定
      #+BEGIN_EXAMPLE
          <!--wxml-->
          <view> {{message}} </view>
      #+END_EXAMPLE

      #+BEGIN_EXAMPLE
          // page.js
          Page({
            data: {
              message: 'Hello MINA!'
            }
          })
      #+END_EXAMPLE

***** 列表渲染

      #+BEGIN_EXAMPLE
          <!--wxml-->
          <view wx:for="{{array}}"> {{item}} </view>
      #+END_EXAMPLE

      #+BEGIN_EXAMPLE
          // page.js
          Page({
            data: {
              array: [1, 2, 3, 4, 5]
            }
          })
      #+END_EXAMPLE
***** 条件渲染

      #+BEGIN_EXAMPLE
          <!--wxml-->
          <view wx:if="{{view == 'WEBVIEW'}}"> WEBVIEW </view>
          <view wx:elif="{{view == 'APP'}}"> APP </view>
          <view wx:else="{{view == 'MINA'}}"> MINA </view>
      #+END_EXAMPLE

      #+BEGIN_EXAMPLE
          // page.js
          Page({
            data: {
              view: 'MINA'
            }
          })
      #+END_EXAMPLE

***** 模板
      #+BEGIN_EXAMPLE
          <!--wxml-->
          <template name="staffName">
            <view>
              FirstName: {{firstName}}, LastName: {{lastName}}
            </view>
          </template>

          <template is="staffName" data="{{...staffA}}"></template>
          <template is="staffName" data="{{...staffB}}"></template>
          <template is="staffName" data="{{...staffC}}"></template>
      #+END_EXAMPLE

      #+BEGIN_EXAMPLE
          // page.js
          Page({
            data: {
              staffA: {firstName: 'Hulk', lastName: 'Hu'},
              staffB: {firstName: 'Shang', lastName: 'You'},
              staffC: {firstName: 'Gideon', lastName: 'Lin'}
            }
          })
      #+END_EXAMPLE

**** WXSS
***** 尺寸单位

      -  rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为 750rpx。如在 iPhone6 上，屏幕宽度为 375px，共有 750 个物理像素，则 750rpx = 375px = 750 物理像素，1rpx = 0.5px = 1 物理像素。
***** 样式导入
      使用 =@import= 语句可以导入外联样式表， =@import= 后跟需要导入的外联样式表的相对路径，用 =;= 表示语句结束。

      #+BEGIN_EXAMPLE
          /** common.wxss **/
          .small-p {
            padding:5px;
          }
      #+END_EXAMPLE

      #+BEGIN_EXAMPLE
          /** app.wxss **/
          @import "common.wxss";
          .middle-p {
            padding:15px;
          }
      #+END_EXAMPLE

***** 内联样式
      #+BEGIN_EXAMPLE
          <view style="color:{{color}};" />
      #+END_EXAMPLE

      #+BEGIN_EXAMPLE
          <view class="normal_view" />
      #+END_EXAMPLE
***** 选择器
      | 选择器           | 样例             | 样例描述                                       |
      |------------------+------------------+------------------------------------------------|
      | .class           | =.intro=         | 选择所有拥有 class="intro" 的组件              |
      | #id              | =#firstname=     | 选择拥有 id="firstname" 的组件                 |
      | element          | =view=           | 选择所有 view 组件                             |
      | element, element | =view, checkbox= | 选择所有文档的 view 组件和所有的 checkbox 组件 |
      | ::after          | =view::after=    | 在 view 组件后边插入内容                       |
      | ::before         | =view::before=   | 在 view 组件前边插入内容                       |
**** WXS
     WXS（WeiXin Script）是小程序的一套脚本语言，结合=WXML=，可以构建出页面的结构。
***** 页面渲染
      #+BEGIN_EXAMPLE
          <!--wxml-->
          <wxs module="m1">
          var msg = "hello world";

          module.exports.message = msg;
          </wxs>

          <view> {{m1.message}} </view>
      #+END_EXAMPLE

      页面输出：

      #+BEGIN_EXAMPLE
          hello world
      #+END_EXAMPLE

***** 数据处理

      #+BEGIN_EXAMPLE
          // page.js
          Page({
            data: {
              array: [1, 2, 3, 4, 5, 1, 2, 3, 4]
            }
          })
      #+END_EXAMPLE

      #+BEGIN_EXAMPLE
          <!--wxml-->
          <!-- 下面的 getMax 函数，接受一个数组，且返回数组中最大的元素的值 -->
          <wxs module="m1">
          var getMax = function(array) {
            var max = undefined;
            for (var i = 0; i < array.length; ++i) {
              max = max === undefined ?
                array[i] :
                (max >= array[i] ? max : array[i]);
            }
            return max;
          }

          module.exports.getMax = getMax;
          </wxs>

          <!-- 调用 wxs 里面的 getMax 函数，参数为 page.js 里面的 array -->
          <view> {{m1.getMax(array)}} </view>
      #+END_EXAMPLE

      页面输出：
      5

*** 事件详解
**** 事件分类
     WXML 的冒泡事件列表：

     | 类型               | 触发条件                                                                                  |
     |--------------------+-------------------------------------------------------------------------------------------|
     | touchstart         | 手指触摸动作开始                                                                          |
     | touchmove          | 手指触摸后移动                                                                            |
     | touchcancel        | 手指触摸动作被打断，如来电提醒，弹窗                                                      |
     | touchend           | 手指触摸动作结束                                                                          |
     | tap                | 手指触摸后马上离开                                                                        |
     | longpress          | 手指触摸后，超过 350ms 再离开，如果指定了事件回调函数并触发了这个事件，tap 事件将不被触发 |
     | longtap            | 手指触摸后，超过 350ms 再离开（推荐使用 longpress 事件代替）                              |
     | transitionend      | 会在 WXSS transition 或 wx.createAnimation 动画结束后触发                                 |
     | animationstart     | 会在一个 WXSS animation 动画开始时触发                                                    |
     | animationiteration | 会在一个 WXSS animation 一次迭代结束时触发                                                |
     | animationend       | 会在一个 WXSS animation 动画完成时触发                                                    |
     | touchforcechange   | 在支持 3D Touch 的 iPhone 设备，重按时会触发                                              |

  
     *注：除上表之外的其他组件自定义事件如无特殊声明都是非冒泡事件，如[[../../../component/form.html][form]]的
     =submit=事件，[[../../../component/input.html][input]]的=input=事件，[[../../../component/scroll-view.html][scroll-view]]的=scroll=事件，(详见各个[[../../../component][组件]])*

**** 绑定并阻止事件冒泡
     除 =bind= 外，也可以用 =catch= 来绑定事件。与 =bind= 不同， =catch=会阻止事件
     向上冒泡。

     例如在下边这个例子中，点击 inner view会先后调用=handleTap3=和=handleTap2=(因为
     tap 事件会冒泡到 middle view，而middle view 阻止了 tap 事件冒泡，不再向父节点
     传递)，点击 middle view会触发=handleTap2=，点击 outer view 会触发=handleTap1=。

     #+BEGIN_EXAMPLE
         <view id="outer" bindtap="handleTap1">
           outer view
           <view id="middle" catchtap="handleTap2">
             middle view
             <view id="inner" bindtap="handleTap3">
               inner view
             </view>
           </view>
         </view>
     #+END_EXAMPLE


**** 互斥事件绑定
     自基础库版本 [[../../compatibility.html][2.8.2]] 起，除 =bind= 和=catch= 外，还可以使用 =mut-bind= 来绑定事
     件。一个 =mut-bind=触发后，如果事件冒泡到其他节点上，其他节点上的 =mut-bind=绑
     定函数不会被触发，但 =bind= 绑定函数和 =catch= 绑定函数依旧会被触发。

     换而言之，所有 =mut-bind=是“互斥”的，只会有其中一个绑定函数被触发。同时，它
     完全不影响 =bind= 和=catch= 的绑定效果。

     例如在下边这个例子中，点击 inner view 会先后调用 =handleTap3= 和
     =handleTap2= ，点击 middle view 会调用 =handleTap2= 和 =handleTap1= 。

     #+BEGIN_EXAMPLE
         <view id="outer" mut-bind:tap="handleTap1">
           outer view
           <view id="middle" bindtap="handleTap2">
             middle view
             <view id="inner" mut-bind:tap="handleTap3">
               inner view
             </view>
           </view>
         </view>
     #+END_EXAMPLE

**** 事件对象

     如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。

     *BaseEvent 基础事件对象属性列表：*

     | 属性          | 类型    | 说明                           |
     |---------------+---------+--------------------------------|
     | [[index_u100.html#type][type]]          | String  | 事件类型                       |
     | [[index_u100.html#timeStamp][timeStamp]]     | Integer | 事件生成时的时间戳             |
     | [[index_u100.html#target][target]]        | Object  | 触发事件的组件的一些属性值集合 |
     | [[index_u100.html#currenttarget][currentTarget]] | Object  | 当前组件的一些属性值集合       |
     | [[index_u100.html#mark][mark]]          | Object  | 事件标记数据                   |
 
     *CustomEvent 自定义事件对象属性列表（继承 BaseEvent）：*

     | 属性                                 | 类型     | 说明         |
     |--------------------------------------+----------+--------------|
     | [[index_u100.html#detail][detail]]   | Object   | 额外的信息   |

     *TouchEvent 触摸事件对象属性列表（继承 BaseEvent）：*
     | 属性                                                 | 类型    | 说明                                           |
     |------------------------------------------------------+---------+------------------------------------------------|
     | [[index_u100.html#touches][touches]]                 | Array   | 触摸事件，当前停留在屏幕中的触摸点信息的数组   |
     | [[index_u100.html#changedTouches][changedTouches]]   | Array   | 触摸事件，当前变化的触摸点信息的数组           |

     *特殊事件： [[../../../component/canvas.html][canvas]]
     中的触摸事件不可冒泡，所以没有 currentTarget。*

*** 简易双向绑定
**** 双向绑定语法
     在 WXML 中，普通的属性的绑定是单向的。例如：

     #+BEGIN_EXAMPLE
         <input value="{{value}}" />
     #+END_EXAMPLE

     如果使用 =this.setData({ value: 'leaf' })= 来更新 =value=，=this.data.value=
     和输入框的中显示的值都会被更新为 =leaf=；但如果用户修改了输入框里的值，却不会
     同时改变 =this.data.value= 。

     如果需要在用户输入的同时改变 =this.data.value=，需要借助简易双向绑定机制。此时，
     可以在对应项目之前加入 =model:= 前缀：

     #+BEGIN_EXAMPLE
         <input model:value="{{value}}" />
     #+END_EXAMPLE

     这样，如果输入框的值被改变了， =this.data.value= 也会同时改变。同时，WXML 中所
     有绑定了 =value= 的位置也会被一同更新，[[../custom-component/observer.html][数据监听器]] 也会被正常触发。

     用于双向绑定的表达式有如下限制：

     1. 只能是一个单一字段的绑定，如

     #+BEGIN_EXAMPLE
         <input model:value="值为 {{value}}" />
         <input model:value="{{ a + b }}" />
     #+END_EXAMPLE

     都是非法的；

     2. 目前，尚不能 data 路径，如
     #+BEGIN_EXAMPLE
         <input model:value="{{ a.b }}" />
     #+END_EXAMPLE

     这样的表达式目前暂不支持。

**** 在自定义组件中传递双向绑定

     双向绑定同样可以使用在自定义组件上。如下的自定义组件：

     #+BEGIN_EXAMPLE
         // custom-component.js
         Component({
           properties: {
             myValue: String
           }
         })
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
         <!-- custom-component.wxml -->
         <input model:value="{{myValue}}" />
     #+END_EXAMPLE

     这个自定义组件将自身的 =myValue= 属性双向绑定到了组件内输入框的 =value=属性上。
     这样，如果页面这样使用这个组件：

     #+BEGIN_EXAMPLE
         <custom-component model:my-value="{{pageValue}}" />
     #+END_EXAMPLE

     当输入框的值变更时，自定义组件的 =myValue= 属性会同时变更，这样，页面的
     =this.data.pageValue= 也会同时变更，页面 WXML 中所有绑定了 =pageValue=的位置也
     会被一同更新。

**** 在自定义组件中触发双向绑定更新

     自定义组件还可以自己触发双向绑定更新，做法就是：使用 setData设置自身的属性。例
     如：
     #+BEGIN_EXAMPLE
         // custom-component.js
         Component({
           properties: {
             myValue: String
           },
           methods: {
             update: function() {
               // 更新 myValue
               this.setData({
                 myValue: 'leaf'
               })
             }
           }
         })
     #+END_EXAMPLE

     如果页面这样使用这个组件：

     #+BEGIN_EXAMPLE
         <custom-component model:my-value="{{pageValue}}" />
     #+END_EXAMPLE

     当组件使用 =setData= 更新 =myValue= 时，页面的 =this.data.pageValue=也会同时变
     更，页面 WXML 中所有绑定了 =pageValue= 的位置也会被一同更新。

*** 基础组件

    | 属性名         | 类型         | 描述           | 注解                                     |
    |----------------+--------------+----------------+------------------------------------------|
    | id             | String       | 组件的唯一标示 | 保持整个页面唯一                         |
    | class          | String       | 组件的样式类   | 在对应的 WXSS 中定义的样式类             |
    | style          | String       | 组件的内联样式 | 可以动态设置的内联样式                   |
    | hidden         | Boolean      | 组件是否显示   | 所有组件默认显示                         |
    | data-*         | Any          | 自定义属性     | 组件上触发的事件时，会发送给事件处理函数 |
    | bind* / catch* | EventHandler | 组件的事件     | 详见[[file:wxml/event.html][事件]]                                 |

*** 获取界面上的节点信息
**** WXML 节点信息
     [[../../api/wxml/wx.createSelectorQuery.html][节点信息查询 API]]可以用于获取节点属性、样式、在界面上的位置等信息。

     最常见的用法是使用这个接口来查询某个节点的当前位置，以及界面的滚动位置。

     *示例代码：*

     #+BEGIN_EXAMPLE
         const query = wx.createSelectorQuery()
         query.select('#the-id').boundingClientRect(function(res){
           res.top // #the-id 节点的上边界坐标（相对于显示区域）
         })
         query.selectViewport().scrollOffset(function(res){
           res.scrollTop // 显示区域的竖直滚动位置
         })
         query.exec()
     #+END_EXAMPLE

     上述示例中， =#the-id= 是一个节点选择器，与 CSS的选择器相近但略有区别，请参见
     [[../../api/wxml/SelectorQuery.select.html][SelectorQuery.select]]的相关说明。

     在自定义组件或包含自定义组件的页面中，推荐使用
     =this.createSelectorQuery= 来代替
     [[../../api/wxml/wx.createSelectorQuery.html][wx.createSelectorQuery]]
     ，这样可以确保在正确的范围内选择节点。

**** WXML 节点布局相交状态

     [[../../api/wxml/wx.createIntersectionObserver.html][节点布局相交状态API]]可用于监听两个或多个组件节点在布局位置上的相交状态。这一组
     API 常常可以用于推断某些节点是否可以被用户看见、有多大比例可以被用户看见。

     这一组 API 涉及的主要概念如下。

     -  参照节点：监听的参照节点，取它的布局区域作为参照区域。如果有多个参照节点，则会取它们布局区域的
       *交集* 作为参照区域。页面显示区域也可作为参照区域之一。
     -  目标节点：监听的目标，默认只能是一个节点（使用 =selectAll=
       选项时，可以同时监听多个节点）。
     -  相交区域：目标节点的布局区域与参照区域的相交区域。
     -  相交比例：相交区域占参照区域的比例。
     -  阈值：相交比例如果达到阈值，则会触发监听器的回调函数。阈值可以有多个。

     以下示例代码可以在目标节点（用选择器 =.target-class=
     指定）每次进入或离开页面显示区域时，触发回调函数。

     *示例代码：*

     #+BEGIN_EXAMPLE
         Page({
           onLoad: function(){
             wx.createIntersectionObserver().relativeToViewport().observe('.target-class', (res) => {
               res.id // 目标节点 id
               res.dataset // 目标节点 dataset
               res.intersectionRatio // 相交区域占目标节点的布局区域的比例
               res.intersectionRect // 相交区域
               res.intersectionRect.left // 相交区域的左边界坐标
               res.intersectionRect.top // 相交区域的上边界坐标
               res.intersectionRect.width // 相交区域的宽度
               res.intersectionRect.height // 相交区域的高度
             })
           }
         })
     #+END_EXAMPLE

     以下示例代码可以在目标节点（用选择器 =.target-class=指定）与参照节点（用选择器
     =.relative-class=指定）在页面显示区域内相交或相离，且相交或相离程度达到目标节
     点布局区域的 20%和 50%时，触发回调函数。

     *示例代码：*

     #+BEGIN_EXAMPLE
         Page({
           onLoad: function(){
             wx.createIntersectionObserver(this, {
               thresholds: [0.2, 0.5]
             }).relativeTo('.relative-class').relativeToViewport().observe('.target-class', (res) => {
               res.intersectionRatio // 相交区域占目标节点的布局区域的比例
               res.intersectionRect // 相交区域
               res.intersectionRect.left // 相交区域的左边界坐标
               res.intersectionRect.top // 相交区域的上边界坐标
               res.intersectionRect.width // 相交区域的宽度
               res.intersectionRect.height // 相交区域的高度
             })
           }
         })
     #+END_EXAMPLE

     注意：与页面显示区域的相交区域并不准确代表用户可见的区域，因为参与计算的区域是
     “布局区域”，布局区域可能会在绘制时被其他节点裁剪隐藏（如遇祖先节点中overflow
     样式为 hidden 的节点）或遮盖（如遇 fixed 定位的节点）。

     在自定义组件或包含自定义组件的页面中，推荐使用
     =this.createIntersectionObserver= 来代替[[../../api/wxml/wx.createIntersectionObserver.html][wx.createIntersectionObserver]]，这样可
     以确保在正确的范围内选择节点。

*** 响应显示区域变化
**** 显示区域尺寸
     显示区域指小程序界面中可以自由布局展示的区域。在默认情况下，小程序显示区域的尺
     寸自页面初始化起就不会发生变化。但以下两种方式都可以改变这一默认行为。

***** 在手机上启用屏幕旋转支持

      从小程序基础库版本 [[../compatibility.html][2.4.0]]开始，小程序在手机上支持屏幕旋转。使小程序中的页面支持
      屏幕旋转的方法是：在=app.json= 的 =window= 段中设置 ="pageOrientation":
      "auto"= ，或在页面json 文件中配置 ="pageOrientation": "auto"= 。

      以下是在单个页面 json 文件中启用屏幕旋转的示例。

      *代码示例：*

      #+BEGIN_EXAMPLE
          {
            "pageOrientation": "auto"
          }
      #+END_EXAMPLE





      如果页面添加了上述声明，则在屏幕旋转时，这个页面将随之旋转，显示区域尺寸也会随着屏幕旋转而变化。

      从小程序基础库版本 [[../compatibility.html][2.5.0]] 开始，=pageOrientation= 还可以被设置为 =landscape= ，
      表示固定为横屏显示。

***** [[index_u26.html#在-iPad-上启用屏幕旋转支持][#]] 在 iPad
      上启用屏幕旋转支持


  
 

      从小程序基础库版本 [[../compatibility.html][2.3.0]] 开始，在 iPad
      上运行的小程序可以支持屏幕旋转。使小程序支持 iPad 屏幕旋转的方法是：在
      =app.json= 中添加 ="resizable": true= 。

      *代码示例：*





      #+BEGIN_EXAMPLE
          {
            "resizable": true
          }
      #+END_EXAMPLE





      如果小程序添加了上述声明，则在屏幕旋转时，小程序将随之旋转，显示区域尺寸也会随着屏幕旋转而变化。注意：在
      iPad 上不能单独配置某个页面是否支持屏幕旋转。

**** Media Query
     有时，对于不同尺寸的显示区域，页面的布局会有所差异。此时可以使用 media query
     来解决大多数问题。

     *代码示例：*
     #+BEGIN_EXAMPLE
         .my-class {
           width: 40px;
         }

         @media (min-width: 480px) {
           /* 仅在 480px 或更宽的屏幕上生效的样式规则 */
           .my-class {
             width: 200px;
           }
         }
     #+END_EXAMPLE

     在 WXML 中，可以使用 [[../../component/match-media.html][match-media]]组件来根据 media query 匹配状态展示、隐藏节
     点。

     此外，可以在页面或者自定义组件 JS 中使用=this.createMediaQueryObserver()=
     方法来创建一个[[../../api/wxml/MediaQueryObserver.html][=MediaQueryObserver=]]对象，用于监听指定的 media query 的匹配状
     态。

**** 屏幕旋转事件
     有时，仅仅使用 media query 无法控制一些精细的布局变化。此时可以使用 js作为
     辅助。

     在 js 中读取页面的显示区域尺寸，可以使用[[../../api/wxml/SelectorQuery.selectViewport.html][selectorQuery.selectViewport]]。

     页面尺寸发生改变的事件，可以使用页面的 =onResize=来监听。对于自定义组件，可
     以使用 resize生命周期来监听。回调函数中将返回显示区域的尺寸信息。（从基础库
     版本[[../compatibility.html][2.4.0]] 开始支持。）

     *代码示例：*

     #+BEGIN_EXAMPLE
         Page({
           onResize(res) {
             res.size.windowWidth // 新的显示区域宽度
             res.size.windowHeight // 新的显示区域高度
           }
         })
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
         Component({
           pageLifetimes: {
             resize(res) {
               res.size.windowWidth // 新的显示区域宽度
               res.size.windowHeight // 新的显示区域高度
             }
           }
         })
     #+END_EXAMPLE





     此外，还可以使用
     [[../../api/ui/window/wx.onWindowResize.html][wx.onWindowResize]]
     来监听（但这不是推荐的方式）。

     *Bug & tips:*

     -  Bug： Android 微信版本 6.7.3 中， =live-pusher=
       组件在屏幕旋转时方向异常。













     --------------


     [[https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html]]

     \\
     \\




 













     --------------


 

*** 动画
**** 界面动画的常见方式
     在小程序中，通常可以使用 CSS渐变和CSS动画 来创建简易的界面动画。

     动画过程中，可以使用 =bindtransitionend= =bindanimationstart=
     =bindanimationiteration= =bindanimationend= 来监听动画事件。

     | 事件名               | 含义                                                                                                 |
     |----------------------+------------------------------------------------------------------------------------------------------|
     | transitionend        | CSS 渐变结束或 [[../../api/ui/animation/wx.createAnimation.html][wx.createAnimation]] 结束一个阶段   |
     | animationstart       | CSS 动画开始                                                                                         |
     | animationiteration   | CSS 动画结束一个阶段                                                                                 |
     | animationend         | CSS 动画结束                                                                                         |

     注意：这几个事件都不是冒泡事件，需要绑定在真正发生了动画的节点上才会生效。

**** 关键帧动画

     从小程序基础库 [2.9.0]]开始支持一种更友好的动画创建方式，用于代替旧的 wx.createAnimation。它具有更好的性能和更可控的接口。

     在页面或自定义组件中，当需要进行关键帧动画时，可以使用 =this.animate= 接口：

     #+BEGIN_EXAMPLE
         this.animate(selector, keyframes, duration, callback)
     #+END_EXAMPLE

     *参数说明*

     | 属性      | 类型     | 默认值 | 必填 | 说明                       |
     | keyframes | Array    |        | 是   | 关键帧信息                 |
     | duration  | Number   |        | 是   | 动画持续时长（毫秒为单位） |
     | callback  | function |        | 否   | 动画完成后的回调函数       |

     *keyframes 中对象的结构*

     | 属性            | 类型          | 默认值 | 必填                              | 说明                                    |
     |-----------------+---------------+--------+-----------------------------------+-----------------------------------------|
     | offset          | Number        |        | 否                                | 关键帧的偏移，范围[0-1]                 |
     | ease            | String        | linear | 否                                | 动画缓动函数                            |
     | transformOrigin | String        | 否     | 基点位置，即 CSS transform-origin |                                         |
     | backgroundColor | String        |        | 否                                | 背景颜色，即 CSS background-color       |
     | bottom          | Number/String |        | 否                                | 底边位置，即 CSS bottom                 |
     | height          | Number/String |        | 否                                | 高度，即 CSS height                     |
     | left            | Number/String |        | 否                                | 左边位置，即 CSS left                   |
     | width           | Number/String |        | 否                                | 宽度，即 CSS width                      |
     | opacity         | Number        |        | 否                                | 不透明度，即 CSS opacity                |
     | right           | Number        |        | 否                                | 右边位置，即 CSS right                  |
     | top             | Number/String |        | 否                                | 顶边位置，即 CSS top                    |
     | matrix          | Array         |        | 否                                | 变换矩阵，即 CSS transform matrix       |
     | matrix3d        | Array         |        | 否                                | 三维变换矩阵，即 CSS transform matrix3d |
     | rotate          | Number        |        | 否                                | 旋转，即 CSS transform rotate           |
     | rotate3d        | Array         |        | 否                                | 三维旋转，即 CSS transform rotate3d     |
     | rotateX         | Number        |        | 否                                | X 方向旋转，即 CSS transform rotateX    |
     | rotateY         | Number        |        | 否                                | Y 方向旋转，即 CSS transform rotateY    |
     | rotateZ         | Number        |        | 否                                | Z 方向旋转，即 CSS transform rotateZ    |
     | scale           | Array         |        | 否                                | 缩放，即 CSS transform scale            |
     | scale3d         | Array         |        | 否                                | 三维缩放，即 CSS transform scale3d      |
     | scaleX          | Number        |        | 否                                | X 方向缩放，即 CSS transform scaleX     |
     | scaleY          | Number        |        | 否                                | Y 方向缩放，即 CSS transform scaleY     |
     | scaleZ          | Number        |        | 否                                | Z 方向缩放，即 CSS transform scaleZ     |
     | skew            | Array         |        | 否                                | 倾斜，即 CSS transform skew             |
     | skewX           | Number        |        | 否                                | X 方向倾斜，即 CSS transform skewX      |
     | skewY           | Number        |        | 否                                | Y 方向倾斜，即 CSS transform skewY      |
     | translate       | Array         |        | 否                                | 位移，即 CSS transform translate        |
     | translate3d     | Array         |        | 否                                | 三维位移，即 CSS transform translate3d  |
     | translateX      | Number        |        | 否                                | X 方向位移，即 CSS transform translateX |
     | translateY      | Number        |        | 否                                | Y 方向位移，即 CSS transform translateY |
     | translateZ      | Number        |        | 否                                | Z 方向位移，即 CSS transform translateZ |
**** 滚动驱动的动画

     我们发现，根据滚动位置而不断改变动画的进度是一种比较常见的场景，这类动画可以让人感觉到界面交互很连贯自然，体验更好。因此，从小程序基础库
     [[../compatibility.html][2.9.0]] 开始支持一种由滚动驱动的动画机制。

     基于上述的关键帧动画接口，新增一个 =ScrollTimeline= 的参数，用来绑定滚动元素（目前只支持 scroll-view）。接口定义如下：

     #+BEGIN_EXAMPLE
         this.animate(selector, keyframes, duration, ScrollTimeline)
     #+END_EXAMPLE

     *ScrollTimeline 中对象的结构*
     | 属性                | 类型     | 默认值     | 必填   | 说明                                                                                              |
     |---------------------+----------+------------+--------+---------------------------------------------------------------------------------------------------|
     | scrollSource        | String   |            | 是     | 指定滚动元素的选择器（只支持 scroll-view），该元素滚动时会驱动动画的进度                          |
     | orientation         | String   | vertical   | 否     | 指定滚动的方向。有效值为 horizontal 或 vertical                                                   |
     | startScrollOffset   | Number   |            | 是     | 指定开始驱动动画进度的滚动偏移量，单位 px                                                         |
     | endScrollOffset     | Number   |            | 是     | 指定停止驱动动画进度的滚动偏移量，单位 px                                                         |
     | timeRange           | Number   |            | 是     | 起始和结束的滚动范围映射的时间长度，该时间可用于与关键帧动画里的时间 (duration) 相匹配，单位 ms   |

**** 示例代码

     #+BEGIN_EXAMPLE
           this.animate('.avatar', [{
             borderRadius: '0',
             borderColor: 'red',
             transform: 'scale(1) translateY(-20px)',
             offset: 0,
           }, {
             borderRadius: '25%',
             borderColor: 'blue',
             transform: 'scale(.65) translateY(-20px)',
             offset: .5,
           }, {
             borderRadius: '50%',
             borderColor: 'blue',
             transform: `scale(.3) translateY(-20px)`,
             offset: 1
           }], 2000, {
             scrollSource: '#scroller',
             timeRange: 2000,
             startScrollOffset: 0,
             endScrollOffset: 85,
           })

           this.animate('.search_input', [{
             opacity: '0',
             width: '0%',
           }, {
             opacity: '1',
             width: '100%',
           }], 1000, {
             scrollSource: '#scroller',
             timeRange: 1000,
             startScrollOffset: 120,
             endScrollOffset: 252
           })
     #+END_EXAMPLE


*** 初始渲染缓存
**** 初始渲染缓存工作原理

     小程序页面的初始化分为两个部分。

     -  逻辑层初始化：载入必需的小程序代码、初始化页面 this对象（也包括它涉及到的所
       有自定义组件的 this对象）、将相关数据发送给视图层。
     -  视图层初始化：载入必需的小程序代码，然后等待逻辑层初始化完毕并接收逻辑层发
       送的数据，最后渲染页面。

     在启动页面时，尤其是小程序冷启动、进入第一个页面时，逻辑层初始化的时间较长。在页面初始化过程中，用户将看到小程序的标准载入画面（冷启动时）或可能看到轻微的白屏现象（页面跳转过程中）。

     启用初始渲染缓存，可以使视图层不需要等待逻辑层初始化完毕，而直接提前将页面初始
     data
     的渲染结果展示给用户，这可以使得页面对用户可见的时间大大提前。它的工作原理如下：

     -  在小程序页面第一次被打开后，将页面初始数据渲染结果记录下来，写入一个持久化的缓存区域（缓存可长时间保留，但可能因为小程序更新、基础库更新、储存空间回收等原因被清除）；
     -  在这个页面被第二次打开时，检查缓存中是否还存有这个页面上一次初始数据的渲染结果，如果有，就直接将渲染结果展示出来；
     -  如果展示了缓存中的渲染结果，这个页面暂时还不能响应用户事件，等到逻辑层初始化完毕后才能响应用户事件。

     利用初始渲染缓存，可以：

     -  快速展示出页面中永远不会变的部分，如导航栏；
     -  预先展示一个骨架页，提升用户体验；
     -  展示自定义的加载提示；
     -  提前展示广告，等等。

**** 支持的组件
     在初始渲染缓存阶段中，复杂组件不能被展示或不能响应交互。

     目前支持的内置组件：

     -  =<view />=
     -  =<text />=
     -  =<button />=
     -  =<image />=
     -  =<scroll-view />=
     -  =<rich-text />=

     自定义组件本身可以被展示（但它们里面用到的内置组件也遵循上述限制）。

**** 静态初始渲染缓存
     若想启用初始渲染缓存，最简单的方法是在页面的 =json= 文件中添加配置项 ="initialRenderingCache": "static"= ：
     #+BEGIN_EXAMPLE
         {
           "initialRenderingCache": "static"
         }
     #+END_EXAMPLE
     
     如果想要对所有页面启用，可以在 =app.json= 的 =window= 配置段中添加这个配置：
     
     #+BEGIN_EXAMPLE
         {
           "window": {
             "initialRenderingCache": "static"
           }
         }
     #+END_EXAMPLE

     添加这个配置项之后，在手机中预览小程序首页，然后杀死小程序再次进入，就会通过初始渲染缓存来渲染首页。

     注意：这种情况下，初始渲染缓存记录的是页面 data 应用在页面 WXML
     上的结果，不包含任何 setData 的结果。

     例如，如果想要在页面中展示出“正在加载”几个字，这几个字受到 =loading=
     数据字段控制：





     #+BEGIN_EXAMPLE
         <view wx:if="{{loading}}">正在加载</view>
     #+END_EXAMPLE





     这种情况下， =loading= 应当在 =data= 中指定为 =true= ，如：





     #+BEGIN_EXAMPLE
         // 正确的做法
         Page({
           data: {
             loading: true
           }
         })
     #+END_EXAMPLE





     而不能通过 =setData= 将 =loading= 置为 =true= ：





     #+BEGIN_EXAMPLE
         // 错误的做法！不要这么做！
         Page({
           data: {},
           onLoad: function() {
             this.setData({
               loading: true
             })
           }
         })
     #+END_EXAMPLE





     换而言之，这种做法只包含页面 =data= 的渲染结果，即页面的纯静态成分。

**** [[index_u95.html#在初始渲染缓存中添加动态内容][#]] 在初始渲染缓存中添加动态内容
     有些场景中，只是页面 =data=
     的渲染结果会比较局限。有时会想要额外展示一些可变的内容，如展示的广告图片
     URL 等。

     这种情况下可以使用“动态”初始渲染缓存的方式。首先，配置
     ="initialRenderingCache": "dynamic"= ：





     #+BEGIN_EXAMPLE
         {
           "initialRenderingCache": "dynamic"
         }
     #+END_EXAMPLE





     此时，初始渲染缓存不会被自动启用，还需要在页面中调用
     =this.setInitialRenderingCache(dynamicData)= 才能启用。其中，
     =dynamicData= 是一组数据，与 =data= 一起参与页面 WXML 渲染。





     #+BEGIN_EXAMPLE
         Page({
           data: {
             loading: true
           },
           onReady: function() {
             this.setInitialRenderingCache({
               loadingHint: '正在加载' // 这一部分数据将被应用于界面上，相当于在初始 data 基础上额外进行一次 setData
             })
           }
         })
     #+END_EXAMPLE









     #+BEGIN_EXAMPLE
         <view wx:if="{{loading}}">{{loadingHint}}</view>
     #+END_EXAMPLE





     从原理上说，在动态生成初始渲染缓存的方式下，页面会在后台使用动态数据重新渲染一次，因而开销相对较大。因而要尽量避免频繁调用
     =this.setInitialRenderingCache=
     ，如果在一个页面内多次调用，仅最后一次调用生效。

     注意：

     -  =this.setInitialRenderingCache= 调用时机不能早于 =Page= 的 =onReady=
       或 =Component= 的 =ready= 生命周期，否则可能对性能有负面影响。
     -  如果想禁用初始渲染缓存，调用 =this.setInitialRenderingCache(null)= 。













     --------------


     [[https://developers.weixin.qq.com/miniprogram/dev/framework/view/initial-rendering-cache.html]]

     \\
     \\




 













     --------------

* 详解微信小程序开发
** *八、实现页面跳转*
   和通常的 web 开发一样，小程序页面跳转页分 2 中，wxml 中的 vavigator 标签，以
   及 js 的 navigator 相关的 api。路由跳转的方法有好几个，这里不一一赘述了，常用
   的直接跳转

   #+BEGIN_EXAMPLE
       wx.navigateTo，重定向 wx.redirectTo等等，具体的请看官方文档。这里强调一下路由传参，很简单： 
       1、少量数据。直接问号传参。然后在目标页面的onLoad方法中通过options参数接收。 
       2、大量数据。直接塞到全局变量里面。
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
        //  wxml跳转页面
             {{item.name}}

        // js跳转页面
        wx.navigateTo({
             url: `/pages/my/appointDetail/index?_id=${ this .data.marker.id}`
           }) 

       //路由传参如何接收 
   onLoad: function (options) {
   　　 console.log(options)
   },

   #+END_EXAMPLE

** *九、wx.request 的封装*
   在 utils 中新建 request.js，简单封装了一下，一些数据要全局配置的都引进来，然后
   做了些错误的统一处理，没什么难度， 不过要特别注意一下 cookie 的携带。具体代码如
   下：

   #+BEGIN_EXAMPLE
       const app =  getApp()
       export  default  function request(url, options =  {}) {
          return  new Promise( function  (resolve, reject) {
           wx.request({
             url: `${app.origin}${url}`,
             method: 'GET' ,
             ...options,
             data: options.data,
             header: {
               'content-type': 'application/json' ,
               'cookie': wx.getStorageSync("cookie" )
             },
             success:  function  (res) {
                // 重新授权登录
                if (res.statusCode === 401 ){ 
                 wx.redirectTo({url: '/pages/login/index' })
                  return 
               } else  if (res.statusCode !== 200 ) { 
                 reject({ error: '服务器忙，请稍后重试', code: 500  });
                  return 
               }  else  {
                  if (url === '/api/cdz/user/weixin/login' ) {
                   const cookie = res.header["set-cookie" ] || res.header["Set-Cookie"]; 
       　　　　　　　　
                    if (cookie) wx.setStorageSync("cookie" , cookie);
                 }
                 resolve(res.data);
               }
             },
             fail:  function  (res) {
                //  fail调用接口失败
                if (url === '/api/cdz/user/weixin/login' ) {
                 const cookie = res.header["set-cookie" ] || res.header["Set-Cookie"];
                  if (cookie) wx.setStorageSync("cookie" , cookie);
               } 
               reject({ error: '网络错误', code: 0  });
             }
           })
         })
       }
   #+END_EXAMPLE

   然后我们使用的时候直接使用封装好的 request 方法，这样所有的 api 就封装成一个个函数。我们在页面中直接 import 引入调用即可。

   #+BEGIN_EXAMPLE
       import request from "../utils/request" ;
       import { stringify } from "../utils/util" 

       export  function  testPost(data) {
          return request(`/api/test/post`, {
           method: 'PUT' ,
           data,
         })
       }

       export  function  testGet(data) {
          return request(`/api/test/get`)
       }
   #+END_EXAMPLE

** *十、使用 npm （引入 weui、moment 等插件）*
   因为小程序使用的是不完整的浏览器对象，所以很多 js 包都是不好使的，比如 jquery
   之类的。所以 npm 基本是废了，能用的依赖包很少，具体哪些能用得自己发掘了。这里还
   是要介绍一下小程序如何使用 npm，毕竟有些包还是要用的。

   1、打开 微信开发者工具 -- 点击 详情 -- 勾选 使用 npm 模块
   2、打开命令行，进入项目的根目录下， npm init 初始化 npm
   3、npm i 。。。安装你需要的依赖
   4、打开 微信开发者工具 -- 点击 工具 -- 点击 构建 npm。 此时小程序会将 node_modules 文件编译打包，生成新目录 miniprogram_npm ，
   5、在需要用到的页面的 js 文件中，const moment= require('moment') 引入，直接使用即可
   6、最后记得忽略文件。新建 .gitignore 文件，node_modules 、 package_lock.json 等文件不需要上传，最好只保留小程序的 npm 构建包，用什么依赖也是的那个下载。这个到不是必须的
 
   ps: 特殊注意一下 weui 的引入，这个 ui 库是纯 css 的，没有 js 文件，所以他没法用 npm 引入，而是直接下载文件，我直接丢到根目录下，然后在 app.wxss 文件的开头引入

   #+BEGIN_EXAMPLE
   @import 'weui.wxss';，这样使用的
   #+END_EXAMPLE

* 样式 https://weui.io/
* 组件和 api
** 组件
*** view 
    - [view](https://mp.weixin.qq.com/debug/wxadoc/dev/component/view.html)
    - [scroll-view](https://mp.weixin.qq.com/debug/wxadoc/dev/component/scroll-view.html)
    - [swiper](https://mp.weixin.qq.com/debug/wxadoc/dev/component/swiper.html)

    - [icon](https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html)
    - [text](https://mp.weixin.qq.com/debug/wxadoc/dev/component/text.html)
    - [progress](https://mp.weixin.qq.com/debug/wxadoc/dev/component/progress.html)

*** 表单组件
    - [button](https://mp.weixin.qq.com/debug/wxadoc/dev/component/button.html)
    - [checkbox](https://mp.weixin.qq.com/debug/wxadoc/dev/component/checkbox.html)
    - [form](https://mp.weixin.qq.com/debug/wxadoc/dev/component/form.html)
    - [input](https://mp.weixin.qq.com/debug/wxadoc/dev/component/input.html)
    - [label](https://mp.weixin.qq.com/debug/wxadoc/dev/component/label.html)
    - [picker](https://mp.weixin.qq.com/debug/wxadoc/dev/component/picker.html)
    - [radio](https://mp.weixin.qq.com/debug/wxadoc/dev/component/radio.html)
    - [slider](https://mp.weixin.qq.com/debug/wxadoc/dev/component/slider.html)
    - [switch](https://mp.weixin.qq.com/debug/wxadoc/dev/component/switch.html)
    - [textarea](https://mp.weixin.qq.com/debug/wxadoc/dev/component/textarea.html)

*** 导航
    - [navigator](https://mp.weixin.qq.com/debug/wxadoc/dev/component/navigator.html)

*** 媒体组件
    - [audio](https://mp.weixin.qq.com/debug/wxadoc/dev/component/audio.html)
    - [image](https://mp.weixin.qq.com/debug/wxadoc/dev/component/image.html)
    - [video](https://mp.weixin.qq.com/debug/wxadoc/dev/component/video.html)

*** 地图
    - [map](https://mp.weixin.qq.com/debug/wxadoc/dev/component/map.html%20#map)

*** 画布
    - [canvas](https://mp.weixin.qq.com/debug/wxadoc/dev/component/canvas.html)

*** 客服会话
    - [contact-button](https://mp.weixin.qq.com/debug/wxadoc/dev/component/contact-button.html)

** api(https://mp.weixin.qq.com/debug/wxadoc/dev/api/)
*** [网络](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-network.html)
**** [发起请求](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html)
     - `wx.request`   `wx.request` 发起的是 HTTPS 请求
**** [上传、下载](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-file.html)
     - `wx.uploadFile`   将本地资源上传到开发者服务器
     - `wx.downloadFile` 下载文件资源到本地
**** [WebSocket](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)
     - `wx.connectSocket`  创建一个 WebSocket 连接
     - `wx.onSocketOpen`   监听 WebSocket 连接打开事件
     - `wx.onSocketError`  监听 WebSocket 错误
     - `wx.sendSocketMessage`  通过 WebSocket 连接发送数据
     - `wx.onSocketMessage`  监听 WebSocket 接受到服务器的消息事件
     - `wx.closeSocket`    关闭 WebSocket 连接
     - `wx.onSocketClose`  监听 WebSocket 关闭
*** [媒体](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-picture.html)
**** [图片](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-picture.html)

     - `wx.chooseImage`  从本地相册选择图片或使用相机拍照
     - `wx.previewImage` 预览图片
     - `wx.getImageInfo` 获取图片信息
**** [录音](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-record.html)

     - `wx.startRecord`  开始录音
     - `wx.stopRecord`   主动调用停止录音
**** [音频播放控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-voice.html)

     - `wx.playVoice`    开始播放语音
     - `wx.pauseVoice`   暂停正在播放的语音
     - `wx.stopVoice`    结束播放语音
**** [音乐播放控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/media-background-audio.html)

     - `wx.getBackgroundAudioPlayerState`  获取音乐播放状态
     - `wx.playBackgroundAudio`  播放音乐，同时只能有一首音乐正在播放
     - `wx.pauseBackgroundAudio` 暂停播放音乐
     - `wx.seekBackgroundAudio`  控制音乐播放进度
     - `wx.stopBackgroundAudio`  停止播放音乐
     - `wx.onBackgroundAudioPlay`  监听音乐播放
     - `wx.onBackgroundAudioPause` 监听音乐暂停
     - `wx.onBackgroundAudioStop`  监听音乐停止
**** [音频组件控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

     - `wx.createAudioContext` 创建并返回 audio 上下文 `audioContext` 对象
**** [视频](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

     - `wx.chooseVideo`  拍摄视频或从手机相册中选视频，返回视频的临时文件路径
**** [视频组件控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)

     - `wx.createVideoContext`  创建并返回 video 上下文 `videoContext` 对象
*** [文件](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-socket.html)
    - `wx.saveFile` 保存文件到本地
    - `wx.getSavedFileList` 获取本地已保存的文件列表
    - `wx.getSavedFileInfo` 获取本地文件的文件信息
    - `wx.removeSavedFile` 删除本地存储的文件
    - `wx.openDocument` 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx
*** [数据缓存](https://mp.weixin.qq.com/debug/wxadoc/dev/api/data.html)

    - `wx.setStorage`   将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口
    - `wx.setStorageSync` 将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口
    - `wx.getStorage`  从本地缓存中异步获取指定 key 对应的内容
    - `wx.getStorageSync` 从本地缓存中同步获取指定 key 对应的内容
    - `wx.getStorageInfo` 异步获取当前 storage 的相关信息
    - `wx.getStorageInfoSync` 同步获取当前 storage 的相关信息
    - `wx.removeStorage`  从本地缓存中异步移除指定 key
    - `wx.removeStorageSync`  从本地缓存中同步移除指定 key
    - `wx.clearStorage` 清理本地数据缓存
    - `wx.clearStorageSync` 同步清理本地数据缓存
*** [位置](https://mp.weixin.qq.com/debug/wxadoc/dev/api/location.html)
**** 获取位置
     - `wx.getLocation` 获取当前的地理位置、速度
     - `wx.chooseLocation` 打开地图选择位置
**** 查看位置
     - `wx.openLocation` 使用微信内置地图查看位置
**** [地图组件控制](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-map.html)

     - `wx.createMapContext` 创建并返回 map 上下文 mapContext 对象
*** [设备](https://mp.weixin.qq.com/debug/wxadoc/dev/api/device.html)
**** [系统信息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/systeminfo.html)

     - `wx.getSystemInfo` 获取系统信息
     - `wx.getSystemInfoSync` 获取系统信息同步接口
**** [网络状态](https://mp.weixin.qq.com/debug/wxadoc/dev/api/device.html)

     - `wx.getNetworkType` 获取网络类型
**** [重力感应](https://mp.weixin.qq.com/debug/wxadoc/dev/api/accelerometer.html)

     - `wx.onAccelerometerChange`  监听重力感应数据，频率：5次/秒
**** [罗盘](https://mp.weixin.qq.com/debug/wxadoc/dev/api/campass.html)

     - `wx.onCompassChange`  监听罗盘数据，频率：5次/秒
**** [拨打电话](https://mp.weixin.qq.com/debug/wxadoc/dev/api/phonecall.html)

     - `wx.makePhoneCall`  拨打电话
**** [扫码](https://mp.weixin.qq.com/debug/wxadoc/dev/api/scancode.html)

     - `wx.scanCode` 调起客户端扫码界面，扫码成功后返回对应的结果
*** [界面](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-react.html)
**** [交互反馈](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-react.html)

     - `wx.showToast` 显示消息提示框
     - `wx.hideToast` 隐藏消息提示框
     - `wx.showModal` ​显示模态弹窗
     - `wx.showActionSheet` 显示操作菜单
**** [设置导航条](https://mp.weixin.qq.com/debug/wxadoc/dev/api/ui.html)

     - `wx.setNavigationBarTitle` 动态设置当前页面的标题
     - `wx.showNavigationBarLoading` 在当前页面显示导航条加载动画
     - `wx.hideNavigationBarLoading` 隐藏导航条加载动画
**** [导航](https://mp.weixin.qq.com/debug/wxadoc/dev/api/ui-navigate.html)

     - `wx.navigateTo`  保留当前页面，跳转到应用内的某个页面，使用 `wx.navigateBack` 可以返回到原页面
     - `wx.redirectTo` 关闭当前页面，跳转到应用内的某个页面
     - `wx.switchTab`  跳转到 `tabBar` 页面，并关闭其他所有非 `tabBar` 页面
     - `wx.navigateBack`  关闭当前页面，返回上一页面或多级页面。可通过 `getCurrentPages()` 获取当前的页面栈，决定需要返回几层
**** [动画](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-animation.html)

     - `wx.createAnimation`  创建一个动画实例 `animation`。调用实例的方法来描述动画。最后通过动画实例的`export` 方法导出动画数据传递给组件的 `animation` 属性。
     - animation
     - 动画队列
**** [绘图](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/intro.html)

     - [简介 intro](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/intro.html)
     - [Canvas 坐标系](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/coordinates.html)
     - [渐变](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/gradient.html)
     - [API 接口索引](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/reference.html)
     - [wx.createCanvasContext](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/create-canvas-context.html) 创建 canvas 绘图上下文（指定 canvasId）
     - [wx.canvasToTempFilePath](https://mp.weixin.qq.com/debug/wxadoc/dev/api/canvas/reference.html) 把当前画布的内容导出生成图片，并返回文件路径
**** [下拉刷新](https://mp.weixin.qq.com/debug/wxadoc/dev/api/pulldown.html)

     - `Page.onPullDownRefresh` 在 `Page` 中定义 `onPullDownRefresh` 处理函数，监听该页面用户下拉刷新事件
     - `wx.stopPullDownRefresh` 停止当前页面下拉刷新
*** [开放接口](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html)
**** [登录](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html)
     - `wx.login` 调用接口获取登录凭证（code）进而换取用户登录态信息
     - `code` 换取 `session_key`
     - 登录态维护
       - 登录时序图
       - `wx.checkSession` 检查登陆态是否过期
     - [用户数据的签名验证和加解密](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)
       - 数据签名校验
       - 加密数据解密算法
**** [用户信息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/open.html)
     - `wx.getUserInfo` 获取用户信息，需要先调用 `wx.login` 接口说明
     - `UnionID` 机制说明
**** [微信支付](https://mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html)

     - `wx.requestPayment` 发起微信支付
**** [模板消息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/notice.html)

     - 使用说明
     - 接口说明
       - 获取 access_token
       - 发送模板消息
       - 下发条件说明
       - 审核说明
       - 违规说明
       - 处罚说明
**** 客服消息
     - [接收消息和事件](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/receive.html)
       - 文本消息
       - 图片消息
       - 进入会话事件
     - [发送客服消息](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/conversation.html)
     - [临时素材接口](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/material.html)
       - 获取临时素材
       - 新增临时素材
     - [接入指引](https://mp.weixin.qq.com/debug/wxadoc/dev/api/custommsg/callback_help.html)
**** [分享](https://mp.weixin.qq.com/debug/wxadoc/dev/api/share.html)

     - Page.onShareAppMessage
*** 基础
**** wx.canIUse 
     判断小程序的API，回调，参数，组件等是否在当前版本可用。

     参数
     string schema
     使用 ${API}.${method}.${param}.${option} 或者 ${component}.${attribute}.${option} 方式来调用
***** 参数说明
      ${API} 代表 API 名字
      ${method} 代表调用方式，有效值为return, success, object, callback
      ${param} 代表参数或者返回值
      ${option} 代表参数的可选值或者返回值的属性
      ${component} 代表组件名字
      ${attribute} 代表组件属性
      ${option} 代表组件属性的可选值
***** 示例代码
      // 对象的属性或方法
      wx.canIUse('console.log')
      wx.canIUse('CameraContext.onCameraFrame')
      wx.canIUse('CameraFrameListener.start')
      wx.canIUse('Image.src')

      // wx接口参数、回调或者返回值
      wx.canIUse('openBluetoothAdapter')
      wx.canIUse('getSystemInfoSync.return.safeArea.left')
      wx.canIUse('getSystemInfo.success.screenWidth')
      wx.canIUse('showToast.object.image')
      wx.canIUse('onCompassChange.callback.direction')
      wx.canIUse('request.object.method.GET')

      // 组件的属性
      wx.canIUse('live-player')
      wx.canIUse('text.selectable')
      wx.canIUse('button.open-type.contact')

*** 开放接口
**** 登录
     wx.login
     wx.checkSession
**** 小程序跳转
     wx.navigateToMiniProgram
     wx.navigateBackMiniProgram
**** 帐号信息
     wx.getAccountInfoSync
**** 用户信息
     wx.getUserInfo
     UserInfo
**** 数据上报
     wx.reportMonitor
**** 数据分析
     wx.reportAnalytics
**** 支付
     wx.requestPayment
**** 授权
     wx.authorize
**** 设置
     wx.openSetting
     wx.getSetting
     AuthSetting
     SubscriptionsSetting
**** 收货地址
     wx.chooseAddress
**** 卡券
     wx.openCard
     wx.addCard
**** 发票
     wx.chooseInvoiceTitle
     wx.chooseInvoice
**** 生物认证
     wx.startSoterAuthentication
     wx.checkIsSupportSoterAuthentication
     wx.checkIsSoterEnrolledInDevice
**** 微信运动
     wx.getWeRunData
**** 性能
     wx.reportPerformance
     wx.getPerformance
***** EntryList
      EntryList.getEntries
      EntryList.getEntriesByName
      EntryList.getEntriesByType
***** Performance
      Performance.createObserver
      Performance.getEntries
      Performance.getEntriesByName
      Performance.getEntriesByType
      Performance.setBufferSize
***** PerformanceObserver
      PerformanceObserver.disconnect
      PerformanceObserver.observe
**** 订阅消息
     wx.requestSubscribeMessage
**** 微信红包
     wx.showRedPackage
**** 群工具
     wx.getGroupEnterInfo

* 事件
** 事件类型 
   -  tap：触摸后马上离开。
   -  longpress：触摸后，超过 350ms 再离开。如果指定了该事件的回调函数并触发了该事件，tap事件将不被触发。
   -  touchstart：触摸开始。
   -  touchmove：触摸后移动。
   -  touchcancel：触摸动作被打断，如来电提醒，弹窗等。
   -  touchend：触摸结束。
** 事件属性
   - capture-bind：捕获阶段触发。
   - capture-catch：捕获阶段触发，并中断事件，不再向下传播，即中断捕获阶段，并取消随后的冒泡阶段。
   - bind：冒泡阶段触发。
   - catch：冒泡阶段触发，并取消事件进一步向上冒泡。

* WXML语法  
** 数据绑定 
*** 控制属性
    <view wx:if="{{condition}}"> </view>
*** 三元运算
    <view hidden="{{flag ? true : false}}"> Hidden </view>
*** 算数运算
    <view> {{a + b}} + {{c}} + d </view>
*** 逻辑判断
    <view wx:if="{{length > 5}}"> </view>
*** 字符串运算
    <view>{{"hello" + name}}</view>
*** 数组
    <view wx:for="{{[zero, 1, 2, 3, 4]}}"> {{item}} </view>
*** 对象
    <template is="objectCombine" data="{{for: a, bar: b}}"></template>
*** 也可以用扩展运算符 ... 来将一个对象展开
    <template is="objectCombine" data="{{...obj1, ...obj2, e: 5}}"></template>
** 列表渲染
*** wx:for
    在组件上使用 wx:for 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。

    默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item

    <view wx:for="{{array}}">
    {{index}}: {{item.message}}
    </view>
    Page({
    data: {
    array: [{
    message: 'foo',
    }, {
    message: 'bar'
    }]
    }
    })
    使用 wx:for-item 可以指定数组当前元素的变量名，

    使用 wx:for-index 可以指定数组当前下标的变量名：

    <view wx:for="{{array}}" wx:for-index="idx" wx:for-item="itemName">
    {{idx}}: {{itemName.message}}
    </view>
    wx:for 也可以嵌套，下边是一个九九乘法表

    <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="i">
    <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="j">
    <view wx:if="{{i <= j}}">
    {{i}} * {{j}} = {{i * j}}
    </view>
    </view>
    </view>
    block wx:for
    类似 block wx:if，也可以将 wx:for 用在<block/>标签上，以渲染一个包含多节点的结构块。例如：

    <block wx:for="{{[1, 2, 3]}}">
    <view> {{index}}: </view>
    <view> {{item}} </view>
    </block>
*** wx:key
    如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目
    保持自己的特征和状态（如 input 中的输入内容，switch 的选中状态），需要使用
    wx:key 来指定列表中项目的唯一的标识符。

    wx:key 的值以两种形式提供

    字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。
    保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。
 
    当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新
    排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。

    如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。

    示例代码：

    <switch wx:for="{{objectArray}}" wx:key="unique" style="display: block;"> {{item.id}} </switch>
    <button bindtap="switch"> Switch </button>
    <button bindtap="addToFront"> Add to the front </button>

    <switch wx:for="{{numberArray}}" wx:key="*this" style="display: block;"> {{item}} </switch>
    <button bindtap="addNumberToFront"> Add to the front </button>
    Page({
    data: {
    objectArray: [
    {id: 5, unique: 'unique_5'},
    {id: 4, unique: 'unique_4'},
    {id: 3, unique: 'unique_3'},
    {id: 2, unique: 'unique_2'},
    {id: 1, unique: 'unique_1'},
    {id: 0, unique: 'unique_0'},
    ],
    numberArray: [1, 2, 3, 4]
    },
    switch: function(e) {
    const length = this.data.objectArray.length
    for (let i = 0; i < length; ++i) {
    const x = Math.floor(Math.random() * length)
    const y = Math.floor(Math.random() * length)
    const temp = this.data.objectArray[x]
    this.data.objectArray[x] = this.data.objectArray[y]
    this.data.objectArray[y] = temp
    }
    this.setData({
    objectArray: this.data.objectArray
    })
    },
    addToFront: function(e) {
    const length = this.data.objectArray.length
    this.data.objectArray = [{id: length, unique: 'unique_' + length}].concat(this.data.objectArray)
    this.setData({
    objectArray: this.data.objectArray
    })
    },
    addNumberToFront: function(e){
    this.data.numberArray = [ this.data.numberArray.length + 1 ].concat(this.data.numberArray)
    this.setData({
    numberArray: this.data.numberArray
    })
    }
    })
    注意：

    当 wx:for 的值为字符串时，会将字符串解析成字符串数组

    <view wx:for="array">
    {{item}}
    </view>
    等同于

    <view wx:for="{{['a','r','r','a','y']}}">
    {{item}}
    </view>
    注意： 花括号和引号之间如果有空格，将最终被解析成为字符串

    <view wx:for="{{[1,2,3]}} ">
    {{item}}
    </view>
    等同于

    <view wx:for="{{[1,2,3] + ' '}}" >
    {{item}}
    </view>
* 后端 API
  小程序还提供了一系列在后端服务器使用 HTTPS 请求调用的 API，帮助开发者在后台完成各类数据分析、管理和查询等操作。如 getAccessToken，code2Session 等。详细介绍请参考 API 文档。

  access_token
  access_token 是小程序全局唯一后台接口调用凭据，调用绝大多数后台接口时都需使用。开发者可以通过 getAccessToken 接口获取并进行妥善保存。

  为了 access_token 的安全性，后端 API 不能直接在小程序内通过 wx.request 调用，即 api.weixin.qq.com 不能被配置为服务器域名。开发者应在后端服务器使用getAccessToken获取 access_token，并调用相关 API；

  请求参数说明
  对于 GET 请求，请求参数应以 QueryString 的形式写在 URL 中。
  对于 POST 请求，部分参数需以 QueryString 的形式写在 URL 中（一般只有 access_token，如有额外参数会在文档里的 URL 中体现），其他参数如无特殊说明均以 JSON 字符串格式写在 POST 请求的 body 中。
  返回参数说明
  注意：当API调用成功时，部分接口不会返回 errcode 和 errmsg，只有调用失败时才会返回。
** 登录
*** auth.code2Session

    登录凭证校验。通过 wx.login 接口获得临时登录凭证 code 后传到开发者服务器调用此接口完成登录流程。更多使用方法详见 小程序登录。


    请求地址
    GET https://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code
    请求参数
    属性	类型	默认值	必填	说明
    appid	string		是	小程序 appId
    secret	string		是	小程序 appSecret
    js_code	string		是	登录时获取的 code
    grant_type	string		是	授权类型，此处只需填写 authorization_code
    返回值
    Object
    返回的 JSON 数据包

    属性	类型	说明
    openid	string	用户唯一标识
    session_key	string	会话密钥
    unionid	string	用户在开放平台的唯一标识符，在满足 UnionID 下发条件的情况下会返回，详见 UnionID 机制说明。
    errcode	number	错误码
    errmsg	string	错误信息
    errcode 的合法值

    值	说明	最低版本
    -1	系统繁忙，此时请开发者稍候再试	
    0	请求成功	
    40029	code 无效	
    45011	频率限制，每个用户每分钟100次
** 接口调用凭证 
*** auth.getAccessToken
    本接口应在服务器端调用，详细说明参见服务端API。

    获取小程序全局唯一后台接口调用凭据（access_token）。调用绝大多数后台接口时都需使用 access_token，开发者需要进行妥善保存。


    请求地址
    GET https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET
    请求参数
    属性	类型	默认值	必填	说明
    grant_type	string		是	填写 client_credential
    appid	string		是	小程序唯一凭证，即 AppID，可在「微信公众平台 - 设置 - 开发设置」页中获得。（需要已经成为开发者，且帐号没有异常状态）
    secret	string		是	小程序唯一凭证密钥，即 AppSecret，获取方式同 appid
    返回值
    Object
    返回的 JSON 数据包

    属性	类型	说明
    access_token	string	获取到的凭证
    expires_in	number	凭证有效时间，单位：秒。目前是7200秒之内的值。
    errcode	number	错误码
    errmsg	string	错误信息
    errcode 的合法值

    值	说明	最低版本
    -1	系统繁忙，此时请开发者稍候再试	
    0	请求成功	
    40001	AppSecret 错误或者 AppSecret 不属于这个小程序，请开发者确认 AppSecret 的正确性	
    40002	请确保 grant_type 字段值为 client_credential	
    40013	不合法的 AppID，请开发者检查 AppID 的正确性，避免异常字符，注意大小写	
    返回数据示例
    正常返回

    {"access_token":"ACCESS_TOKEN","expires_in":7200}
    错误时返回

    {"errcode":40013,"errmsg":"invalid appid"}
    access_token 的存储与更新
    access_token 的存储至少要保留 512 个字符空间；
    access_token 的有效期目前为 2 个小时，需定时刷新，重复获取将导致上次获取的 access_token 失效；
    建议开发者使用中控服务器统一获取和刷新 access_token，其他业务逻辑服务器所使用的 access_token 均来自于该中控服务器，不应该各自去刷新，否则容易造成冲突，导致 access_token 覆盖而影响业务；
    access_token 的有效期通过返回的 expires_in 来传达，目前是7200秒之内的值，中控服务器需要根据这个有效时间提前去刷新。在刷新过程中，中控服务器可对外继续输出的老 access_token，此时公众平台后台会保证在5分钟内，新老 access_token 都可用，这保证了第三方业务的平滑过渡；
    access_token 的有效时间可能会在未来有调整，所以中控服务器不仅需要内部定时主动刷新，还需要提供被动刷新 access_token 的接口，这样便于业务服务器在API调用获知 access_token 已超时的情况下，可以触发 access_token 的刷新流程。
    详情可参考微信公众平台文档 《获取access_token》

    在线调试
    开发者可以使用网页调试工具调试该接口
* 支付
** api  
*** 统一下单
    URL地址：https://api.mch.weixin.qq.com/pay/unifiedorder
    URL地址：https://api2.mch.weixin.qq.com/pay/unifiedorder(备用域名)见跨城冗灾方案
    


    #+begin_src xml
      <xml>
        <appid>wx2421b1c4370ec43b</appid>
        <attach>支付测试</attach>
        <body>JSAPI支付测试</body>
        <mch_id>10000100</mch_id>
        <detail><![CDATA[{ "goods_detail":[ { "goods_id":"iphone6s_16G", "wxpay_goods_id":"1001", "goods_name":"iPhone6s 16G", "quantity":1, "price":528800, "goods_category":"123456", "body":"苹果手机" }, { "goods_id":"iphone6s_32G", "wxpay_goods_id":"1002", "goods_name":"iPhone6s 32G", "quantity":1, "price":608800, "goods_category":"123789", "body":"苹果手机" } ] }]]></detail>
        <nonce_str>1add1a30ac87aa2db72f57a2375d8fec</nonce_str>
        <notify_url>http://wxpay.wxutil.com/pub_v2/pay/notify.v2.php</notify_url>
        <openid>oUpF8uMuAJO_M2pxb1Q9zNjWeS6o</openid>
        <out_trade_no>1415659990</out_trade_no>
        <spbill_create_ip>14.23.150.211</spbill_create_ip>
        <total_fee>1</total_fee>
        <trade_type>JSAPI</trade_type>
        <sign>0CB01533B8C1EF103065174F50BCA001</sign>
      </xml>
    #+end_src

*** [[https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1][【微信支付】JSAPI支付开发者文档]]                                 :website:

    | 字段名                 | 变量名             | 必填   | 类型           | 示例值                                   | 描述                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
    ||
    | 公众账号ID             | appid              | 是     | String(32)     | wxd678efh567hg6787                       | 微信支付分配的公众账号ID（企业号corpid即为此appId）                                                                                                                                                                                                                                                                                                                                                                                                                              |
    | 商户号                 | mch_id             | 是     | String(32)     | 1230000109                               | 微信支付分配的商户号                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
    | 设备号                 | device_info        | 否     | String(32)     | 013467007045764                          | 自定义参数，可以为终端设备号(门店号或收银设备ID)，PC网页或公众号内支付可以传"WEB"                                                                                                                                                                                                                                                                                                                                                                                                |
    | 随机字符串             | nonce_str          | 是     | String(32)     | 5K8264ILTKCH16CQ2502SI8ZNMTM67VS         | 随机字符串，长度要求在32位以内。推荐 [[file:?chapter=4_3][随机数生成算法]]                                                                                                                                                                                                                                                                                                                                                                                                       |
    | 签名                   | sign               | 是     | String(32)     | C380BEC2BFD727A4B6845133519F3AD6         | 通过签名算法计算得出的签名值，详见 [[file:?chapter=4_3][签名生成算法]]                                                                                                                                                                                                                                                                                                                                                                                                           |
    | 签名类型               | sign_type          | 否     | String(32)     | MD5                                      | 签名类型，默认为MD5，支持HMAC-SHA256和MD5。                                                                                                                                                                                                                                                                                                                                                                                                                                      |
    | 商品描述               | body               | 是     | String(128)    | 腾讯充值中心-QQ会员充值                  | 商品简单描述，该字段请按照规范传递，具体请见 [[file:?chapter=4_2][参数规定]]                                                                                                                                                                                                                                                                                                                                                                                                     |
    | 商品详情               | detail             | 否     | String(6000)   |                                          | 商品详细描述，对于使用单品优惠的商户，该字段必须按照规范上传，详见 [[file:danpin.php?chapter=9_102&index=2][“单品优惠参数说明”]]                                                                                                                                                                                                                                                                                                                                                 |
    | 附加数据               | attach             | 否     | String(127)    | 深圳分店                                 | 附加数据，在查询API和支付通知中原样返回，可作为自定义参数使用。                                                                                                                                                                                                                                                                                                                                                                                                                  |
    | 商户订单号             | out_trade_no       | 是     | String(32)     | 20150806125346                           | 商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|* 且在同一个商户号下唯一。详见 [[file:?chapter=4_2][商户订单号]]                                                                                                                                                                                                                                                                                                                                                    |
    | 标价币种               | fee_type           | 否     | String(16)     | CNY                                      | 符合ISO 4217标准的三位字母代码，默认人民币：CNY，详细列表请参见 [[file:?chapter=4_2][货币类型]]                                                                                                                                                                                                                                                                                                                                                                                  |
    | 标价金额               | total_fee          | 是     | Int            | 88                                       | 订单总金额，单位为分，详见 [[file:?chapter=4_2][支付金额]]                                                                                                                                                                                                                                                                                                                                                                                                                       |
    | 终端IP                 | spbill_create_ip   | 是     | String(64)     | 123.12.12.123                            | 支持IPV4和IPV6两种格式的IP地址。用户的客户端IP                                                                                                                                                                                                                                                                                                                                                                                                                                   |
    | 交易起始时间           | time_start         | 否     | String(14)     | 20091225091010                           | 订单生成时间，格式为yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。其他详见 [[file:?chapter=4_2][时间规则]]                                                                                                                                                                                                                                                                                                                                                    |
    | 交易结束时间           | time_expire        | 否     | String(14)     | 20091227091010                           | 订单失效时间，格式为yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。订单失效时间是针对订单号而言的，由于在请求支付的时候有一个必传参数prepay_id只有两小时的有效期，所以在重入时间超过2小时的时候需要重新请求下单接口获取新的prepay_id。其他详见 [[file:?chapter=4_2][时间规则]]                                                                                                                                                                                 |
    |                        |                    |        |                |                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                        |                    |        |                |                                          | time_expire只能第一次下单传值，不允许二次修改，二次修改系统将报错。如用户支付失败后，需再次支付，需更换原订单号重新下单。\\                                                                                                                                                                                                                                                                                                                                                      |
    |                        |                    |        |                |                                          | 建议：最短失效时间间隔大于1分钟                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    | 订单优惠标记           | goods_tag          | 否     | String(32)     | WXG                                      | 订单优惠标记，使用代金券或立减优惠功能时需要的参数，说明详见 [[https://pay.weixin.qq.com/wiki/doc/api/tools/sp_coupon.php?chapter=12_7&index=3][代金券或立减优惠]]                                                                                                                                                                                                                                                                                                               |
    | 通知地址               | notify_url         | 是     | String(256)    | http://www.weixin.qq.com/wxpay/pay.php   | 异步接收微信支付结果通知的回调地址，通知url必须为外网可访问的url，不能携带参数。                                                                                                                                                                                                                                                                                                                                                                                                 |
    | 交易类型               | trade_type         | 是     | String(16)     | JSAPI                                    | JSAPI -JSAPI支付                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
    |                        |                    |        |                |                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                        |                    |        |                |                                          | NATIVE -Native支付                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
    |                        |                    |        |                |                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                        |                    |        |                |                                          | APP -APP支付                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
    |                        |                    |        |                |                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                        |                    |        |                |                                          | 说明详见 [[file:?chapter=4_2][参数规定]]                                                                                                                                                                                                                                                                                                                                                                                                                                         |
    | 商品ID                 | product_id         | 否     | String(32)     | 12235413214070356458058                  | trade_type=NATIVE时，此参数必传。此参数为二维码中包含的商品ID，商户自行定义。                                                                                                                                                                                                                                                                                                                                                                                                    |
    | 指定支付方式           | limit_pay          | 否     | String(32)     | no_credit                                | 上传此参数no_credit--可限制用户不能使用信用卡支付                                                                                                                                                                                                                                                                                                                                                                                                                                |
    | 用户标识               | openid             | 否     | String(128)    | oUpF8uMuAJO_M2pxb1Q9zNjWeS6o             | trade_type=JSAPI时（即JSAPI支付），此参数必传，此参数为微信用户在商户对应appid下的唯一标识。openid如何获取，可参考【 [[file:?chapter=4_4][获取openid]]】。企业号请使用【 [[http://qydev.weixin.qq.com/wiki/index.php?title=OAuth%E9%AA%8C%E8%AF%81%E6%8E%A5%E5%8F%A3][企业号OAuth2.0接口]]】获取企业号内成员userid，再调用【 [[http://qydev.weixin.qq.com/wiki/index.php?title=Userid%E4%B8%8Eopenid%E4%BA%92%E6%8D%A2%E6%8E%A5%E5%8F%A3][企业号userid转openid接口]]】进行转换   |
    | 电子发票入口开放标识   | receipt            | 否     | String(8)      | Y                                        | Y，传入Y时，支付成功消息和支付详情页将出现开票入口。需要在微信支付商户平台或微信公众平台开通电子发票功能，传此字段才可生效                                                                                                                                                                                                                                                                                                                                                       |
    | + 场景信息             | scene_info         | 否     | String(256)    | {"store_info" : {\\                      | 该字段常用于线下活动时的场景信息上报，支持上报实际门店信息，商户也可以按需求自己上报相关信息。该字段为JSON对象数据，对象格式为{"store_info":{"id": "门店ID","name": "名称","area_code": "编码","address": "地址" }} ，字段详细说明请点击行前的+展开                                                                                                                                                                                                                              |
    |                        |                    |        |                | "id": "SZTX001",\\                       |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                        |                    |        |                | "name": "腾大餐厅",\\                    |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                        |                    |        |                | "area_code": "440305",\\                 |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    |                        |                    |        |                | "address": "科技园中一路腾讯大厦" }}     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
    | -门店id                | id                 | 是     | String(32)     | SZTX001                                  | 门店编号，由商户自定义                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
    | -门店名称              | name               | 否     | String(64)     | 腾讯大厦腾大餐厅                         | 门店名称 ，由商户自定义                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
    | -门店行政区划码        | area_code          | 否     | String(6)      | 440305                                   | 门店所在地行政区划码，详细见 [[/wiki/doc/api/download/store_adress.csv][《最新县及县以上行政区划代码》]]                                                                                                                                                                                                                                                                                                                                                                         |
    | -门店详细地址          | address            | 否     | String(128)    | 科技园中一路腾讯大厦                     | 门店详细地址 ，由商户自定义                                                                                                                                                                                                                                                                                                                                                                                                                                                      |

    举例如下：

    \\
       wx2421b1c4370ec43b\\
       支付测试\\
       

    JSAPI支付测试

    \\
       10000100\\
       { "goods_detail":[ { "goods_id":"iphone6s_16G", "wxpay_goods_id":"1001", "goods_name":"iPhone6s 16G", "quantity":1, "price":528800, "goods_category":"123456", "body":"苹果手机" }, { "goods_id":"iphone6s_32G", "wxpay_goods_id":"1002", "goods_name":"iPhone6s 32G", "quantity":1, "price":608800, "goods_category":"123789", "body":"苹果手机" } ] }\\
       1add1a30ac87aa2db72f57a2375d8fec\\
       http://wxpay.wxutil.com/pub_v2/pay/notify.v2.php\\
       oUpF8uMuAJO_M2pxb1Q9zNjWeS6o\\
       1415659990\\
       14.23.150.211\\
       1\\
       JSAPI\\
       0CB01533B8C1EF103065174F50BCA001\\

    注：参数值用XML转义即可，CDATA标签用于说明数据不被XML解析器解析。

*** 支付结果通知 (回退)
**** Article

     | 字段名             | 变量名               | 必填 | 类型        | 示例值                           |                               |
     |--------------------+----------------------+------+-------------+----------------------------------+-------------------------------|
     | 小程序ID           | appid                | 是   | String(32)  | wx8888888888888888               |                               |
     | 商户号             | mch_id               | 是   | String(32)  | 1900000109                       |                               |
     | 设备号             | device_info          | 否   | String(32)  | 013467007045764                  |                               |
     | 随机字符串         | nonce_str            | 是   | String(32)  | 5K8264ILTKCH16CQ2502SI8ZNMTM67VS |                               |
     | 签名               | sign                 | 是   | String(32)  | C380BEC2BFD727A4B6845133519F3AD6 |                               |
     | 签名类型           | sign_type            | 否   | String(32)  | HMAC-SHA256                      |                               |
     | 业务结果           | result_code          | 是   | String(16)  | SUCCESS                          |                               |
     | 错误代码           | err_code             | 否   | String(32)  | SYSTEMERROR                      |                               |
     | 错误代码描述       | err_code_des         | 否   | String(128) | 系统错误                         |                               |
     | 用户标识           | openid               | 是   | String(128) | wxd930ea5d5a258f4f               |                               |
     | 是否关注公众账号   | is_subscribe         | 是   | String(1)   | Y                                |                               |
     | 交易类型           | trade_type           | 是   | String(16)  | JSAPI                            |                               |
     | 付款银行           | bank_type            | 是   | String(32)  | CMC                              |                               |
     | 订单金额           | total_fee            | 是   | Int         | 100                              |                               |
     | 应结订单金额       | settlement_total_fee | 否   | Int         | 100                              |                               |
     | 货币种类           | fee_type             | 否   | String(8)   | CNY                              |                               |
     | 现金支付金额       | cash_fee             | 是   | Int         | 100                              |                               |
     | 现金支付货币类型   | cash_fee_type        | 否   | String(16)  | CNY                              |                               |
     | 总代金券金额       | coupon_fee           | 否   | Int         | 10                               |                               |
     | 代金券使用数量     | coupon_count         | 否   | Int         | 1                                |                               |
     | 代金券类型         | coupon_type_$n       | 否   | String      | CASH                             |                               |
     |                    |                      |      |             |                                  |                               |
     |                    |                      |      |             |                                  |                               |
     |                    |                      |      |             |                                  |                               |
     |                    |                      |      |             |                                  |                               |
     |                    |                      |      |             |                                  |                               |
     |                    |                      |      |             |                                  |                               |
     |                    |                      |      |             |                                  |                               |
     | 代金券ID           | coupon_id_$n         | 否   | String(20)  | 10000                            |                               |
     |                    |                      |      |             |                                  |                               |
     |                    |                      |      |             |                                  |                               |
     | 单个代金券支付金额 | coupon_fee_$n        | 否   | Int         | 100                              |                               |
     | 微信支付订单号     | transaction_id       | 是   | String(32)  | 1217752501201407033233368018     |                               |
     | 商户订单号         | out_trade_no         | 是   | String(32)  | 1212321211201407033568112322     | *@ ，且在同一个商户号下唯一。 |
     | 商家数据包         | attach               | 否   | String(128) | 123456                           |                               |
     | 支付完成时间       | time_end             | 是   | String(14)  | 20141030133525                   |                               |

     #+begin_src xml
       <xml>
         <appid><![CDATA[wx068a5e75284f3840]]></appid>
         <attach><![CDATA[2]]></attach>
         <bank_type><![CDATA[OTHERS]]></bank_type>
         <cash_fee><![CDATA[1]]></cash_fee>
         <fee_type><![CDATA[CNY]]></fee_type>
         <is_subscribe><![CDATA[N]]></is_subscribe>
         <mch_id><![CDATA[1345891001]]></mch_id>
         <nonce_str><![CDATA[rot09e3bh93zzixgs33hzgyynk7brbnf]]></nonce_str>
         <openid><![CDATA[oY18vs7BjseudymgLrwJhCApOeL0]]></openid>
         <out_trade_no><![CDATA[2020090752545649]]></out_trade_no>
         <result_code><![CDATA[SUCCESS]]></result_code>
         <return_code><![CDATA[SUCCESS]]></return_code>
         <sign><![CDATA[3FA6FD4C2D5579547B9E981AE98F550F8C6F60BF4243D96AE521CA53748C75C7]]></sign>
         <time_end><![CDATA[20200907164738]]></time_end>
         <total_fee>1</total_fee>
         <trade_type><![CDATA[JSAPI]]></trade_type>
         <transaction_id><![CDATA[4200000702202009079014259658]]></transaction_id>
       </xml>
     #+end_src
*  微信小程序下拉刷新/上拉加载更多
** Article
查看文档，在用page()函数注册页面的时候有这样的两个对象参数用户判断用户 *在最顶部下拉*和 *到达最底部，*

在小程序里，用户顶部下拉是默认禁止的，我们需要把他设置为启用，在app.json中的设置对所有页面有效，在单独页面设置则对当前页面有效；

看一下json文件

#+BEGIN_QUOTE
  *"enablePullDownRefresh": true,*
#+END_QUOTE

注意这里的true是布尔型而不是字符；

每个页面生成的时候已经默认为我们设置了前面提到的 *onPullDownRefresh*函数和 *onReachBottom*函数

*** 下拉刷新
 page为全局变量，用在在后面的加载请求，这里要跟后端大哥讨论好请求；

 #+BEGIN_QUOTE
   // 下拉刷新

     onPullDownRefresh: function () {
       // 显示顶部刷新图标

       wx.showNavigationBarLoading();

       var that = this;

       wx.request({

         url: 'https://xxx/?page=0',

         method: "GET",

         header: {

           'content-type': 'application/text'

         },

         success: function (res) {

           that.setData({

             moment: res.data.data

           });

           // 设置数组元素

           that.setData({

             moment: that.data.moment

           });

           console.log(that.data.moment);

           // 隐藏导航栏加载框

           wx.hideNavigationBarLoading();

           // 停止下拉动作

           wx.stopPullDownRefresh();

         }

       })

     },
 #+END_QUOTE
*** 上拉加载更多

    #+BEGIN_QUOTE
    /**
      * 页面上拉触底事件的处理函数
      */

      onReachBottom: function () {
        var that = this;
        // 显示加载图标
    wx.showLoading({
    title: '玩命加载中',
        })

        // 页数+1
        page = page + 1;
   
       wx.request({
         url: 'https://xxx/?page=' + page,
         method: "GET",
         // 请求头部
         header: {
           'content-type': 'application/text'
         },

         success: function (res) {
           // 回调函数

           var moment_list = that.data.moment;

           for (var i = 0; i < res.data.data.length; i++) {

             moment_list.push(res.data.data[i]);

           }

           // 设置数据

           that.setData({

             moment: that.data.moment

           })

           // 隐藏加载框

           wx.hideLoading();

         }

       })

     },
 #+END_QUOTE

* [[https://blog.csdn.net/sxs1995/article/details/80091924][微信小程序回到顶部的两种方式_sxs1995的博客-CSDN博客_小程序回到顶部]] :website:
** Article

一,使用view形式的回到顶部\\
HTML：
<image src='../../img/button-top.png' class='goTop' hidden='{{!floorstatus}}' bindtap="goTop"></image>

CSS：

#+BEGIN_EXAMPLE
     /* 返回顶部 */
    .goTop{
      height: 80rpx;
      width: 80rpx;
      position: fixed;
      bottom: 50rpx;
      background: rgba(0,0,0,.3);
      right: 30rpx;
      border-radius: 50%;
    }
#+END_EXAMPLE

JS：

#+BEGIN_EXAMPLE
       // 获取滚动条当前位置
      onPageScroll: function (e) {
        console.log(e)
        if (e.scrollTop > 100) {
          this.setData({
            floorstatus: true
          });
        } else {
          this.setData({
            floorstatus: false
          });
        }
      },

      //回到顶部
      goTop: function (e) {  // 一键回到顶部
        if (wx.pageScrollTo) {
          wx.pageScrollTo({
            scrollTop: 0
          })
        } else {
          wx.showModal({
            title: '提示',
            content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'
          })
        }
      },
#+END_EXAMPLE

二.使用scroll-view形式的回到顶部

#+BEGIN_EXAMPLE
 <scroll-view scroll-y scroll-top='{{topNum}}' bindscroll="scrolltoupper">
<image src='../../img/button-top.png' class='goTop' hidden='{{!floorstatus}}' bindtap="goTop"></image>    
#+END_EXAMPLE

CSS：

#+BEGIN_EXAMPLE
     /* 返回顶部 */
    .goTop{
      height: 80rpx;
      width: 80rpx;
      position: fixed;
      bottom: 50rpx;
      background: rgba(0,0,0,.3);
      right: 30rpx;
      border-radius: 50%;
    }
#+END_EXAMPLE

JS：

#+BEGIN_EXAMPLE
       data:{
        topNum: 0
      }
      
      // 获取滚动条当前位置
      scrolltoupper:function(e){
        console.log(e)
        let t =  e.detail.scrollTop;
        if (t > 100 && !this.data.floorstatus) {
            // 避免重复setData
            this.setData({
               floorstatus: true
            });
        } 
        
        if(t <= 100 && this.data.floorstatus){
          this.setData({
            floorstatus: false
          });
        }
      },

      //回到顶部
      goTop: function (e) {  // 一键回到顶部
        this.setData({
          topNum: this.data.topNum = 0
        });
      },
#+END_EXAMPLE

* [[https://juejin.cn/post/6844903955219103758][小程序 canvas 生成海报 一次搞掂]]                                   :website:
** 简单体验
*** 我们来画一条直线

   在canvas中，把画直线的步骤分解为以下几步：

   1. 编写标签
   2. 获取画布实例
   3. 定起点
   4. 连接终点
   5. 连线 （也叫描边）
   6. 上色

**** 编写标签

  #+BEGIN_QUOTE
    默认的宽高 为 300px * 150 px

    不同于普通的标签，必须要提供一个属性 =canvas-id=，用于在 js中获取该对象（不是dom对象！！！）
  #+END_QUOTE

  #+BEGIN_EXAMPLE
        < canvas  canvas-id= "firstCanvas"> canvas>
  #+END_EXAMPLE

**** 获取画布实例
  #+BEGIN_QUOTE
    通过 canvas-id 来获取

    该实例 不是dom元素，可以理解为另一种对象如 Math Date String等即可
  #+END_QUOTE

  *index.js*

  #+BEGIN_EXAMPLE
       Page({
        onLoad() {
           // 1 获取画布上下文对象
           const context = wx.createCanvasContext( "firstCanvas");
           console.log(context);
        }
      })
  #+END_EXAMPLE

**** 坐标系 (左上角是原点)
**** 定起点
  #+BEGIN_EXAMPLE
  // 定起点
  context.moveTo( 10,  10);
  #+END_EXAMPLE

**** 定终点
  #+BEGIN_EXAMPLE
  // 定终点
  context.lineTo( 300, 150);
  #+END_EXAMPLE

**** 连线


  #+BEGIN_EXAMPLE
  // 连线
  context.stroke();
  #+END_EXAMPLE

**** 上色

  #+BEGIN_EXAMPLE
  // 上色
  context.draw();
  #+END_EXAMPLE

**** 完整代码
  =index.wxml=

  #+BEGIN_EXAMPLE
       < canvas  canvas-id= "firstCanvas"> canvas>
  #+END_EXAMPLE

  =index.js=

  #+BEGIN_EXAMPLE
       Page({
        onLoad() {
           // 2 获取画布上下文对象
           const context = wx.createCanvasContext( "firstCanvas");
           // 3 定起点
          context.moveTo( 10,  10);
           // 4 定终点
          context.lineTo( 300, 150);
           // 5 连线
          context.stroke();
           // 6 上色
          context.draw();
        }
      })
       复制代码
  #+END_EXAMPLE

**** 效果

*** 内置的其他规则图形


  canvas中还封装了画规则图形的方法，如：

  1. [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.strokeRect.html][画空心的矩形]]

  2. [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.arc.html][画圆弧]]

  3. [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.fillRect.html][画实心的矩形]]

  4. [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.strokeText.html][画文字（把字符串画上去）]]

**** [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.strokeRect.html][画矩形]]


  #+BEGIN_QUOTE
    CanvasContext.strokeRect(number x, number y, number width, number height)
  #+END_QUOTE

  #+BEGIN_QUOTE
    CanvasContext.strokeRect(画在画布的X,画在画布的Y,画多宽，画多高)
  #+END_QUOTE

  #+BEGIN_EXAMPLE
            // 1 获取画布上下文对象
           const context = wx.createCanvasContext( "firstCanvas");
           // 2 调用canvas内置的画“矩形”的方法
          context.strokeRect( 10,  10,  100,  100);
           // 3 上色 
          context.draw();
       复制代码
  #+END_EXAMPLE

***** 效果


**** [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.arc.html][画圆弧]]

  #+BEGIN_QUOTE
    CanvasContext.arc(number x, number y, number r, number sAngle, number eAngle, boolean counterclockwise)
  #+END_QUOTE

  #+BEGIN_QUOTE
    CanvasContext.arc(圆心的横坐标X,圆心的纵坐标Y, 半径的长度, 开始的弧度, 结束的弧度, ？是否反向来画)
  #+END_QUOTE

***** 代码
      
  #+BEGIN_EXAMPLE
         drawArc() {
           // 1 获取画布上下文对象
           const context = wx.createCanvasContext( "firstCanvas");
           // context.arc(圆心的横坐标X,圆心的纵坐标Y, 半径的长度, 开始的弧度, 结束的弧度);
           // 2 调用内置的画 “圆弧” 的方法
          context.arc( 100,  100,  100,  this.angleToArc( 0),  this.angleToArc( 90));
           // 3 开始描边
          context.stroke();
           // 4 上色
          context.draw();
        },
         /**
         * 将角度转为弧度
         * @param {number} angle 角度
         */
        angleToArc(angle) {
           return angle *  Math.PI /  180;
        }
       复制代码
  #+END_EXAMPLE

***** 效果


**** [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.fillRect.html][画实心的矩形]]


  #+BEGIN_QUOTE
    CanvasContext.fillRect(number x, number y, number width, number height)
  #+END_QUOTE

  #+BEGIN_EXAMPLE
            // 1 获取画布上下文对象
           const context = wx.createCanvasContext( "firstCanvas");
           // 2 调用canvas内置的 画填充 “矩形”的方法
          context.fillRect( 10,  10,  100,  100);
           // 3 上色 
          context.draw();
       复制代码
  #+END_EXAMPLE

***** 效果


**** [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.strokeText.html][画文字]]


  #+BEGIN_QUOTE
    CanvasContext.strokeText(string text, number x, number y, number maxWidth)
  #+END_QUOTE

  #+BEGIN_QUOTE
    CanvasContext.strokeText(要绘制的文本, 文本起始点的 x 轴坐标, number y, 需要绘制的最大宽度，可选)
  #+END_QUOTE

***** 代码


  #+BEGIN_EXAMPLE
            // 1 获取画布上下文对象
           const context = wx.createCanvasContext( "firstCanvas");
           // 2 画 “文字”
          context.strokeText( "hello world",  100,  100);
           // 3 上色 
          context.draw();
       复制代码
  #+END_EXAMPLE

***** 效果


  --------------

*** 设置样式


  经过以上的演示我们也发现，线条的颜色一直是黑色，这肯定是无法满足我们骚跳的心的。现在来学习一下关于设置canvas线条样式相关API。

  1. 设置线条颜色
  2. 设置线条粗细
  3. 设置填充颜色
  4. 设置文本大小

**** [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.setStrokeStyle.html][设置线条颜色]]


  **特别要注意 **， =setStrokeStyle=是个函数，1.9.90版本后停止维护，使用以下的方式来修改。

  1. +=CanvasContext.setStrokeStyle("red")=+ 已过时，不推荐
  2. =CanvasContext.strokeStyle="red";= 正解

***** 代码


  #+BEGIN_EXAMPLE
            const context = wx.createCanvasContext( "firstCanvas");
          context.moveTo( 10,  10);
          context.lineTo( 300,  150);
           // 5 修改颜色 需要在stroke之前修改
          context.strokeStyle =  "red";
          context.stroke();
          context.draw();
       复制代码
  #+END_EXAMPLE

***** 效果


  --------------

**** 设置线条粗细


  **特别要注意 **， =setLineWidth= 是个函数，1.9.90版本后停止维护，使用以下的方式来修改。

  1. +=CanvasContext.setLineWidth(20)=+ 已过时，不推荐
  2. =CanvasContext.lineWidth=20;= 正解

***** 代码


  #+BEGIN_EXAMPLE
            const context = wx.createCanvasContext( "firstCanvas");
          context.moveTo( 10,  10);
          context.lineTo( 300,  150);
           // 设置线条宽度
          context.lineWidth =  20;
          context.stroke();
          context.draw();
       复制代码
  #+END_EXAMPLE

***** 效果


  --------------

**** 设置填充颜色


  **特别要注意 **， =setFillStyle= 是个函数，1.9.90版本后停止维护，使用以下的方式来修改。

  1. +=CanvasContext.setFillStyle("red")=+ 已过时，不推荐
  2. =CanvasContext.fillStyle="red";= 正解

***** 代码


  #+BEGIN_EXAMPLE
            const context = wx.createCanvasContext( "firstCanvas");
           // 设置填充颜色
          context.fillStyle =  "red";
          context.fillRect( 10,  10,  100,  100);
          context.draw();
       复制代码
  #+END_EXAMPLE

***** 效果


  --------------

**** 设置文本大小


  **特别要注意 **， =setFontSize= 是个函数，1.9.90版本后停止维护，使用以下的方式来修改。

  1. +=CanvasContext.setFontSize("20")=+ 已过时，不推荐
  2. =CanvasContext.font="sans-serif";= 正解
  3. =font= 当前字体样式的属性。符合 [[https://developer.mozilla.org/zh-CN/docs/Web/CSS/font][CSS font 语法]] 的 DOMString 字符串，至少需要提供字体大小和字体族名。默认值为 10px sans-serif。

***** 代码


  #+BEGIN_EXAMPLE
            const context = wx.createCanvasContext( "firstCanvas");
           // 必须要同时提供 字号 和 字体
          context.font= "10px  sans-serif";
          context.strokeText( "10px",  10,  10);
           // 必须要同时提供 字号 和 字体
          context.font= "50px  sans-serif";
          context.strokeText( "50px",  50,  100);
           // 必须要同时提供 字号 和 字体
          context.font= "80px  sans-serif";
          context.strokeText( "80px",  80,  180);
          context.draw();
       复制代码
  #+END_EXAMPLE

***** 效果

*** 进阶


  #+BEGIN_QUOTE
    在本环节主要讲解稍微复杂一点的功能。要实现以下功能

    但是需要先做一点技术铺垫
  #+END_QUOTE

  主要用到的api有：

  1. 获取系统信息
  2. 选择相册图片
  3. 获取网络图片信息
  4. canvas 描绘 图片到画布上
  5. 将画布保存成一张图片
  6. 将图片下载到本地

**** 基本API


  #+BEGIN_QUOTE
    以下api是实现以上案例所必须的
  #+END_QUOTE

***** 获取系统信息


  #+BEGIN_QUOTE
    获取屏幕大小、设备像素比等
  #+END_QUOTE

****** 代码


  #+BEGIN_EXAMPLE
       wx.getSystemInfo({
        success (res) {
           console.log(res.model)
           console.log(res.pixelRatio)
           console.log(res.windowWidth)
           console.log(res.windowHeight)
           console.log(res.language)
           console.log(res.version)
           console.log(res.platform)
        }
      })
       复制代码
  #+END_EXAMPLE

***** [[https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html][选择相册图片]]


  #+BEGIN_QUOTE
    从本地相册选择图片或使用相机拍照
  #+END_QUOTE

****** 代码


  #+BEGIN_EXAMPLE
       wx.chooseImage({
         count:  1, // 最多可以选择的图片张数
        sizeType: [ 'original',  'compressed'], // 所选的图片的尺寸
        sourceType: [ 'album',  'camera'], //  选择图片的来源
        success (res) {
           // tempFilePath可以作为img标签的src属性显示图片
           const tempFilePaths = res.tempFilePaths
        }
      })
       复制代码
  #+END_EXAMPLE

****** 代码


  #+BEGIN_EXAMPLE
       wx.getSystemInfo({
        success (res) {
           console.log(res.model)
           console.log(res.pixelRatio)
           console.log(res.windowWidth)
           console.log(res.windowHeight)
           console.log(res.language)
           console.log(res.version)
           console.log(res.platform)
        }
      })
       复制代码
  #+END_EXAMPLE

***** [[https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.getImageInfo.html][获取网络图片信息]]


  /获取图片信息。网络图片需先配置download域名才能生效。/

  #+BEGIN_QUOTE
    canvas提供了将图片画到画布上的功能，但是要求所提供的图片必须是外网下的图片

    因此可以借助该方法将网络图片变成本地图片，同时返回该图片的信息
  #+END_QUOTE

****** 代码


  #+BEGIN_EXAMPLE
       wx.getImageInfo({
         src:  'cloud://c-73e071.632d-c-73e071/92637.jpg',
        success (res) {
           console.log(res.width)
           console.log(res.height)
        }
      })
       复制代码
  #+END_EXAMPLE

****** [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.drawImage.html][绘制图像到画布]]


  #+BEGIN_QUOTE
    不能使用本地图片，要使用外网图片的 必须要先 使用 =wx.getImageInfo= 下载到本地
  #+END_QUOTE

  有三个版本的写法：

  - drawImage(imageResource, dx, dy)
  - drawImage(imageResource, dx, dy, dWidth, dHeight)
  - drawImage(imageResource, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)
  - 说明drawImage(图片路径, 原图的x, 原图的y, 原图的宽度, 原图的高度, 画布的x, 画布的y, 画多宽, 画多高)

****** 代码


  #+BEGIN_EXAMPLE
       context.drawImage( 'xxxx.jpg',  0,  0, 100,  100);
       复制代码
  #+END_EXAMPLE

***** [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html][将画布保存成一张图片]]


  #+BEGIN_QUOTE
    在 [[https://developers.weixin.qq.com/miniprogram/dev/api/canvas/CanvasContext.draw.html][draw()]] 回调里调用该方法才能保证图片导出成功
  #+END_QUOTE

****** 代码


  #+BEGIN_EXAMPLE
       wx.canvasToTempFilePath({
         x:  100,
         y:  200,
         width:  50,
         height:  50,
         destWidth:  100,
         destHeight:  100,
         canvasId:  'myCanvas',
        success(res) {
           console.log(res.tempFilePath)
        }
      })
       复制代码
  #+END_EXAMPLE

***** [[https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.saveImageToPhotosAlbum.html][将图片下载到本地]]


  /保存图片到系统相册/

****** 代码


  #+BEGIN_EXAMPLE
       wx.saveImageToPhotosAlbum({
        success(res) { }
      })
       复制代码
  #+END_EXAMPLE

**** 案例实现


  其实要实现一样案例，最麻烦的不是这些API的调用，而是如何根据不同的图片，合成 *比例合适*的 *不模糊的图片*；

***** 为什么说比例合适


  因为在canvas中，只支持 =px= 单位，那么在使用 =javascript=来描绘图片时，就不存在 =rpx=、 =vw=、 =%=这些相对单位了。只能依靠手动来计算。如，在 canvas中， /画出一个大小为 屏幕宽的一半 屏幕高的一半的矩形？/

***** 为什么说不模糊


  问题的原因还是因为 手机的屏幕 都是高清屏，具体的原因可以参照 [[https://www.baidu.com/s?wd=canvas%20%E5%9B%BE%E7%89%87%E6%A8%A1%E7%B3%8A&rsv_spt=1&rsv_iqid=0x81d272c4001bc25e&issp=1&f=8&rsv_bp=1&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_dl=ib&rsv_sug3=24&rsv_sug1=6&rsv_sug7=100&rsv_sug2=0&inputT=7986&rsv_sug4=7986][链接]]

  如我们想要生成图片大小为 100px * 100px，那么就需要将 canvas的大小设置为 =width = 图片的宽度 * 设备像素比=

  =height = 图片的高度 * 设备像素比=

***** 文件目录


  1. =index= 首页
  2. =result= 合成图片的页面

***** 首页 index


****** index


****** pages/index/index.wxml


  #+BEGIN_EXAMPLE
     
        < image  mode= "widthFix"  src= "{{src}}"> image>

        < button  bindtap= "handleTap">选择图片 button>

        < button  bindtap= "handleCreateFlag">生成小红旗 button>
       复制代码
  #+END_EXAMPLE

****** pages/index/index.js


  主要实现3个功能

  1. 点击 “选择图片” 将选择的图片打印到页面上
  2. 将被 选择的图片 显示的页面上
  3. 点击 “生成红旗”，跳转到结果页面（在结果页面完成生成）

  #+BEGIN_EXAMPLE
       Page({
         data: {
           src:  ""
        },
         // 选择图片
        handleTap() {
          wx.chooseImage({
             count:  1,
             sizeType: [ 'original',  'compressed'],
             sourceType: [ 'album',  'camera'],
             success:  ( result) => {
               this.setData({
                 src: result.tempFilePaths[ 0]
              })
               // 保存图片路径
              wx.setStorageSync( 'src',  this.data.src);
            }
          });
        },
         // 生成红旗
        handleCreateFlag() {
           // 跳转到结果页面
          wx.navigateTo({
             url:  '/pages/result/index'
          });
        }
      })
       复制代码
  #+END_EXAMPLE

***** 结果页面 result


****** result


****** result/index.wxml


  3个标签

  1. canvas 标签，通过定位将其隐藏
  2. image 标签，用来显示合成的图片
  3. button 标签，用来点击 下载图片

  #+BEGIN_EXAMPLE
      
       < canvas  class= "cas"  style= "width:{{canvasWidth}};height:{{canvasHeight}};"  canvas-id= "firstCanvas"> canvas>
     
       < image  class= "res_image"  mode= "widthFix"  src= "{{resSrc}}"> image>
     
       < button  bindtap= "handleSave">下载图片 button>
       复制代码
  #+END_EXAMPLE

****** result/index.wxss


  两个样式

  1. 把canvas藏起来（因为是 [[https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html][原生组件]]，所以它的层级比一般的标签都要高（定位+zindex也无法解决））
  2. 设置图片标签的样式

  #+BEGIN_EXAMPLE
        page {
         overflow-x: hidden;
         overflow-y: auto;
         width:  100vw;
         height:  100vh;
      }
       .cas {
         position: absolute;
         top:  1000vw;
         left:  1000vh;
         z-index: - 1;
         opacity:  0;
      }
       .res_image {
         width:  100%;
         display: block;
      }

       复制代码
  #+END_EXAMPLE

****** result/index.js


  易错点：

  1. 外网的图片，需要先将图片服务器添加到白名单中（否则真机调试会失败）
  2. 没有动态设置 canvas的宽和高（参照第29、31行）

  #+BEGIN_EXAMPLE
     
       import regeneratorRuntime  from  '../../lib/runtime/runtime';
       import { getImageInfo, canvasToTempFilePath, saveImageToPhotosAlbum }  from  "../../wxAsync/index.js";
      Page({
         data: {
           // 默认的canvas的宽度
          canvasWidth:  1,
           // 默认的canvas高度
          canvasHeight:  1,
           // 最终生成的图片路径
          resSrc:  ""
        },
         // 全局变量
        saveImgSrc:  "",
         async onLoad() {
           // 红旗图片
           const flagSrc =  "https://632d-c-73e071-1252056196.tcb.qcloud.la/3434.jpg?sign=a4f1c2106d1e61551829c2f99820c0ba&t=1569678566";
           // const baseSrc = "https://632d-c-73e071-1252056196.tcb.qcloud.la/92637.jpg?sign=8952d1eaa69a35510418fe25dc25d6c5&t=1569678606";
           // 上个页面选择的图片路径 柯南图片
           const baseSrc = wx.getStorageSync( "src");
           // 设备像素比
           const { pixelRatio } = wx.getSystemInfoSync();

           // 获取 画布实例
           const context = wx.createCanvasContext( 'firstCanvas');
           console.log(context);
           // 下载到本地的 柯南图片
           const baseImg =  await getImageInfo(baseSrc);
           // 下载到本地的 红旗图片
           const flagImg =  await getImageInfo(flagSrc);
           // 将canvas的宽度设置中 图片的宽度
           const canvasWidth = baseImg.width +  "px";
           // 将canvas的宽度设置中 图片的高度
           const canvasHeight = baseImg.height +  "px";
           //  setData 函数用于将数据从逻辑层发送到视图层（异步），同时改变对应的 this.data 的值（同步）。
           // 因此需要将 描绘 图片的步骤写在回调中，否则 真机调试有bug！
           this.setData({ canvasWidth, canvasHeight }, () => {
             // 如果个别机型出现图片失败错误，可以加上定时器。
            setTimeout(  () => {
               // 先将柯南 描绘到画布上
              context.drawImage(baseImg.path,  0,  0, baseImg.width, baseImg.height);
               // 把红旗 描绘到画布上
              context.drawImage(flagImg.path, baseImg.width - (pixelRatio *  50), baseImg.height - (pixelRatio *  50), (pixelRatio *  50), (pixelRatio *  50));
              context.draw( true,  async () => {
                 // 将 画布生成 成图片
                 const res1 =  await canvasToTempFilePath({
                   canvasId:  "firstCanvas"
                });
                 // 让图片显示 合成后的效果
                 this.setData({  resSrc: res1.tempFilePath })
                 // 保存起来，当点击保存图片时调用
                 this.saveImgSrc = res1.tempFilePath;
              });
            },  100);
          });
        },

         // 点击保存图片
        handleSave() {
          saveImageToPhotosAlbum( this.saveImgSrc);
        }
      })

       复制代码
  #+END_EXAMPLE

*** github地址


  #+BEGIN_EXAMPLE
       https://github.com/itcastWsy/AppletPoster.git
       复制代码
  #+END_EXAMPLE

* API
** 简介
- wx.on开头的API是监听某个事件发生的API接口，接受一个CALLBACK函数作为参数。当该事件触发时，会调用CALLBACK函数。
- 如未特殊约定，其他API接口都接受一个OBJECT作为参数。
- OBJECT中可以指定success,fail,complete来接收接口调用结果。

| 参数名     | 类型       | 必填   | 说明                                               |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |
** API列表
*** *网络API列表：*
    | API                  | 说明              |
    | [[file:weixinapp-network-request.html][wx.request]]           | 发起网络请求      |
    | [[file:4g8s1q9c.html][wx.uploadFile]]        | 上传文件          |
    | [[file:4g8s1q9c.html#wxdownloadfileobject][wx.downloadFile]]      | 下载文件          |
    | [[file:weixinapp-network-socket.html#wxconnectsocketobject][wx.connectSocket]]     | 创建WebSocket连接 |
    | [[file:weixinapp-network-socket.html#wxonsocketopencallback][wx.onSocketOpen]]      | 监听WebSocket打开 |
    | [[file:weixinapp-network-socket.html#wxonsocketerrorcallback][wx.onSocketError]]     | 监听WebSocket错误 |
    | [[file:weixinapp-network-socket.html#wxsendsocketmessageobject][wx.sendSocketMessage]] | 发送WebSocket消息 |
    | [[file:weixinapp-network-socket.html#wxonsocketmessagecallback][wx.onSocketMessage]]   | 接受WebSocket消息 |
    | [[file:weixinapp-network-socket.html#wxclosesocket][wx.closeSocket]]       | 关闭WebSocket连接 |
    | [[file:weixinapp-network-socket.html#wxonsocketclosecallback][wx.onSocketClose]]     | 监听WebSocket关闭 |
*** *媒体API列表：*

    | API                                                                                                                      | 说明                       |

    | [[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]                                                | 从相册选择图片，或者拍照   |
    | [[file:weixinapp-media-picture.html#wxpreviewimageobject][wx.previewImage]]                                              | 预览图片                   |
    | [[file:weixinapp-media-record.html#wxstartrecordobject][wx.startRecord]]                                                 | 开始录音                   |
    | [[file:weixinapp-media-record.html#wxstoprecord][wx.stopRecord]]                                                         | 结束录音                   |
    | [[file:weixinapp-media-voice.html#wxplayvoice][wx.playVoice]]                                                            | 播放语音                   |
    | [[file:weixinapp-media-voice.html#wxpausevoice][wx.pauseVoice]]                                                          | 暂停播放语音               |
    | [[file:weixinapp-media-voice.html#wxstopvoice][wx.stopVoice]]                                                            | 结束播放语音               |
    | [[file:weixinapp-media-background-audio.html#wxgetbackgroundaudioplayerstateobject][wx.getBackgroundAudioPlayerState]]   | 获取音乐播放状态           |
    | [[file:weixinapp-media-background-audio.html#wxplaybackgroundaudioobject][wx.playBackgroundAudio]]                       | 播放音乐                   |
    | [[file:weixinapp-media-background-audio.html#wxpausebackgroundaudio][wx.pauseBackgroundAudio]]                           | 暂停播放音乐               |
    | [[file:weixinapp-media-background-audio.html#wxseekbackgroundaudioobject][wx.seekBackgroundAudio]]                       | 控制音乐播放进度           |
    | [[file:weixinapp-media-background-audio.html#wxstopbackgroundaudio][wx.stopBackgroundAudio]]                             | 停止播放音乐               |
    | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudioplaycallback][wx.onBackgroundAudioPlay]]                 | 监听音乐开始播放           |
    | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiopausecallback][wx.onBackgroundAudioPause]]               | 监听音乐暂停               |
    | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiostopcallback][wx.onBackgroundAudioStop]]                 | 监听音乐结束               |
    | [[file:weixinapp-media-video.html][wx.chooseVideo]]                                                                      | 从相册选择视频，或者拍摄   |
*** *文件 API 列表：*

    | API                                                                                                     | 说明                   |

    | [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]                                    | 保存文件               |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfilelistobject][wx.getSavedFileList]]   | 获取已保存的文件列表   |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfileinfoobject][wx.getSavedFileInfo]]   | 获取已保存的文件信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxremovesavedfileobject][wx.removeSavedFile]]     | 删除已保存的文件信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxopendocumentobject][wx.openDocument]]           | 打开文件               |
*** *数据 API 列表：*

    | API                                                                                                       | 说明                     |

    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageobject][wx.getStorage]]              | 获取本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstoragesynckey][wx.getStorageSync]]         | 获取本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstorageobject][wx.setStorage]]              | 设置本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstoragesynckeydata][wx.setStorageSync]]     | 设置本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfoobject][wx.getStorageInfo]]      | 获取本地缓存的相关信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfosync][wx.getStorageInfoSync]]    | 获取本地缓存的相关信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestorageobject][wx.removeStorage]]        | 删除本地缓存内容         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestoragesynckey][wx.removeStorageSync]]   | 删除本地缓存内容         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstorage][wx.clearStorage]]                | 清理本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstoragesync][wx.clearStorageSync]]        | 清理本地数据缓存         |
*** *位置 API 列表：*

    | API                                                                                                     | 说明               |

    | [[http://caibaojian.com/weixinapp/weixinapp-location.html][wx.getLocation]]                             | 获取当前位置       |
    | [[http://caibaojian.com/weixinapp/weixinapp-location.html#wxchooselocationobject][wx.chooseLocation]]   | 打开地图选择位置   |
    | [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][wx.openLocation]]                        | 打开内置地图       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-map.html][wx.createMapContext]]                         | 地图组件控制       |
*** *设备 API 列表：*

    | API                                                                                                                       | 说明                 |

    | [[http://caibaojian.com/weixinapp/weixinapp-api-device.html][wx.getNetworkType]]                                          | 获取网络类型         |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-device.html#wxonnetworkstatuschangecallback][wx.onNetworkStatusChange]]   | 监听网络状态变化     |
    | [[http://caibaojian.com/weixinapp/weixinapp-device.html][wx.getSystemInfo]]                                               | 获取系统信息         |
    | [[http://caibaojian.com/weixinapp/weixinapp-device.html#wxgetsysteminfosync][wx.getSystemInfoSync]]                       | 获取系统信息         |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html][wx.onAccelerometerChange]]                            | 监听加速度数据       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstartaccelerometerobject][wx.startAccelerometer]]    | 开始监听加速度数据   |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstopaccelerometerobject][wx.stopAccelerometer]]      | 停止监听加速度数据   |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html][wx.onCompassChange]]                                        | 监听罗盘数据         |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstartcompassobject][wx.startCompass]]                      | 开始监听罗盘数据     |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstopcompassobject][wx.stopCompass]]                        | 停止监听罗盘数据     |
    | [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html][wx.setClipboardData]]                                         | 设置剪贴板内容       |
    | [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html#wxgetclipboarddataobject][wx.getClipboardData]]                | 获取剪贴板内容       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html][wx.makePhoneCall]]                                        | 拨打电话             |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html][wx.scanCode]]                                              | 扫码                 |
*** *界面 API 列表：*

    | [[http://caibaojian.com/weixinapp/weixinapp-react.html][wx.showToast]]                                          | 显示提示框           |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowloadingobject][wx.showLoading]]                    | 显示加载提示框       |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxhidetoast][wx.hideToast]]                              | 隐藏提示框           |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#loentarget][wx.hideLoading]]                             | 隐藏提示框           |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowmodalobject][wx.showModal]]                        | 显示模态弹窗         |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowactionsheetobject][wx.showActionSheet]]            | 显示菜单列表         |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui.html][wx.setNavigationBarTitle]]                                 | 设置当前页面标题     |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxshownavigationbarloading][wx.showNavigationBarLoading]]   | 显示导航条加载动画   |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxhidenavigationbarloading][wx.hideNavigationBarLoading]]   | 隐藏导航条加载动画   |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html][wx.navigateTo]]                                   | 新窗口打开页面       |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxredirecttoobject][wx.redirectTo]]                | 原窗口打开页面       |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxswitchtabobject][wx.switchTab]]                  | 切换到 tabbar 页面   |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigateback][wx.navigateBack]]                  | 退回上一个页面       |
    | [[http://caibaojian.com/weixinapp/tcga1qcz.html][wx.createAnimation]]                                           | 动画                 |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-context.html][wx.createCanvasContext]]                   | 创建绘图上下文       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-drawcanvas.html][wx.drawCanvas]]                         | 绘图                 |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-pulldown.html#wxstoppulldownrefresh][wx.stopPullDownRefresh]]   | 停止下拉刷新动画     |
*** *WXML节点信息 API 列表：*
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html][wx.createSelectorQuery]]                                           | 创建查询请求             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectselector][selectorQuery.select]]                 | 根据选择器选择单个节点   |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectallselector][selectorQuery.selectAll]]           | 根据选择器选择全部节点   |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectviewport][selectorQuery.selectViewport]]         | 选择显示区域             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefboundingclientrectcallback][nodesRef.boundingClientRect]]   | 获取布局位置和尺寸       |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefscrolloffsetcallback][nodesRef.scrollOffset]]               | 获取滚动位置             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesreffieldsfieldscallback][nodesRef.fields]]                     | 获取任意字段             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryexeccallback][selectorQuery.exec]]                     | 执行查询请求             |
*** *开放接口：*
 | [[http://caibaojian.com/weixinapp/weixinapp-api-login.html][wx.login]]                  | 登录               |
 | [[http://caibaojian.com/weixinapp/weixinapp-open.html][wx.getUserInfo]]                 | 获取用户信息       |
 | [[http://caibaojian.com/weixinapp/weixinapp-address.html][wx.chooseAddress]]            | 获取用户收货地址   |
 | [[http://caibaojian.com/weixinapp/uvq81qdh.html][wx.requestPayment]]                    | 发起微信支付       |
 | [[http://caibaojian.com/weixinapp/weixinapp-card.html][wx.addCard]]                     | 添加卡券           |
 | [[http://caibaojian.com/weixinapp/weixinapp-card.html#wxopencardobject][wx.openCard]]   | 打开卡券           |
 每个微信小程序需要事先设置一个通讯域名，小程序可以跟指定的域名与进行网络通信。包括普通 HTTPS 请求（wx.request）、 WebSocket
 通信（wx.connectSocket）、上传文件（wx.uploadFile）和下载文件（wx.downloadFile)。
** 网络 
*** wx.request(OBJECT)
    *OBJECT参数说明：*\\
 | 参数名   | 类型           | 必填 | 说明                                                                            |
 | url      | String         | 是   | 开发者服务器接口地址                                                            |
 | data     | Object、String | 否   | 请求的参数                                                                      |
 | header   | Object         | 否   | 设置请求的 header , header 中不能设置 Referer                                   |
 | method   | String         | 否   | 默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT       |
 | dataType | String         | 否   | 默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse |
 | success  | Function       | 否   | 收到开发者服务成功返回的回调函数，res = {data: '开发者服务器返回的内容'}        |
 | fail     | Function       | 否   | 接口调用失败的回调函数                                                          |
 | complete | Function       | 否   | 接口调用结束的回调函数（调用成功、失败都会执行）                                |

 *success返回参数说明：*

 | 参数       | 类型                      | 说明                                    | 最低版本 |
 | data       | Object/String/ArrayBuffer | 开发者服务器返回的数据                  |          |
 | statusCode | Number                    | 开发者服务器返回的 HTTP 状态码          |          |
 | header     | Object                    | 开发者服务器返回的 HTTP Response Header | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]    |

 *data 数据说明* 最终发送给服务器的数据是 String 类型，如果传入的 data
 不是 String 类型，会被转换成 String 。转换规则如下：\\

 - 对于 header['content-type'] 为 'application/json' 的数据，会对数据进行
   JSON 序列化
 - 对于 header['content-type'] 为 'application/x-www-form-urlencoded'
   的数据，会将数据转换成 query string
   （encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...）

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.request({
       url: 'test.php', //仅为示例，并非真实的接口地址
       data: {
          x: '' ,
          y: ''
       },
       header:{
           "Content-Type":"application/json"
       },
       success: function(res) {
          console.log(res.data)
       }
     })
 #+END_EXAMPLE

 **

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个=requestTask=对象，通过=requestTask=，可中断请求任务。

 *requestTask 对象的方法列表：*

 | 方法    | 参数   | 说明           | 最低版本                                                        |

 | abort   |        | 中断请求任务   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     const requestTask = wx.request({
       url: 'test.php', //仅为示例，并非真实的接口地址
       data: {
          x: '' ,
          y: ''
       },
       header: {
           'content-type': 'application/json'
       },
       success: function(res) {
         console.log(res.data)
       }
     })

     requestTask.abort() // 取消请求任务
 #+END_EXAMPLE

*** wx.uploadFile(OBJECT)
 将本地资源上传到开发者服务器。如页面通过
 [[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]
 等接口获取到一个本地资源的临时文件路径后，可通过此接口将本地资源上传到指定服务器。客户端发起一个HTTPS
 POST请求，其中=Content-Type=为=multipart/form-data=。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                  |

 | url        | String     | 是     | 开发者服务器url                                                       |
 | filePath   | String     | 是     | 要上传文件资源的路径                                                  |
 | name       | String     | 是     | 文件对应的key , 开发者在服务器端通过这个key可以获取到文件二进制内容   |
 | header     | Object     | 否     | HTTP 请求 Header，header中不能设置Referer                             |
 | formData   | Object     | 否     | HTTP 请求中其他额外的form data                                        |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

 *success返回参数说明：*

 | 参数         | 类型     | 说明                     |

 | data         | String   | 开发者服务器返回的数据   |
 | statusCode   | Number   | HTTP状态码               |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.chooseImage({
       success:function(res){
         var tempFilePaths = res.tempFilePaths
         wx.uploadFile({
           url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
           filePath: tempFilePaths[0],
           name:"file",
           formData:{
             "user":"test"
           }      success: function(res){        var data = res.data        //do something      }
         })
       }
     })
 #+END_EXAMPLE

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个=uploadTask=对象，通过=uploadTask=，可监听上传进度变化事件，以及取消上传任务。

**** uploadTask
  *uploadTask 对象的方法列表：*

  | 方法               | 参数       | 说明               | 最低版本                                                        |

  | onProgressUpdate   | callback   | 监听上传进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
  | abort              |            | 中断上传任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

  *onProgressUpdate 返回参数说明：*

  | 参数                       | 类型     | 说明                                   |

  | progress                   | Number   | 上传进度百分比                         |
  | totalBytesSent             | Number   | 已经上传的数据长度，单位 Bytes         |
  | totalBytesExpectedToSend   | Number   | 预期需要上传的数据总长度，单位 Bytes   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      const uploadTask = wx.uploadFile({
          url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
          filePath: tempFilePaths[0],
          name: 'file',
          formData:{
              'user': 'test'
          },
          success: function(res){
              var data = res.data
              //do something
          }
      })

      uploadTask.onProgressUpdate((res) => {
          console.log('上传进度', res.progress)
          console.log('已经上传的数据长度', res.totalBytesSent)
          console.log('预期需要上传的数据总长度', res.totalBytesExpectedToSend)
      })

      uploadTask.abort() // 取消上传任务
  #+END_EXAMPLE

*** wx.downloadFile(OBJECT)
   
 
  
   



 下载文件资源到本地。客户端直接发起一个HTTP
 GET请求，返回文件的本地临时路径。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 必填                                                                            |

 | url        | String     | 是     | 下载资源的 url                                                                  |
 | header     | Object     | 否     | HTTP 请求 Header                                                                |
 | success    | Function   | 否     | 下载成功后以 tempFilePath 的形式传给页面，res={tempFilePath:'文件的临时路径'}   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                          |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
 [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

 *示例代码:*

 #+BEGIN_EXAMPLE
     wx.downloadFile({
       url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
       success: function(res) {
         wx.playVoice({
           filePath: res.tempFilePath
         })
       }
     })
 #+END_EXAMPLE

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个=downloadTask=对象，通过=downloadTask=，可监听下载进度变化事件，以及取消下载任务。

**** downloadTask
   
  
   

  *downloadTask 对象的方法列表：*

  | 方法               | 参数       | 说明               | 最低版本                                                        |

  | onProgressUpdate   | callback   | 监听下载进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
  | abort              |            | 中断下载任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

  *onProgressUpdate 返回参数说明：*

  | 参数                        | 类型     | 说明                                   |

  | progress                    | Number   | 下载进度百分比                         |
  | totalBytesWritten           | Number   | 已经下载的数据长度，单位 Bytes         |
  | totalBytesExpectedToWrite   | Number   | 预期需要下载的数据总长度，单位 Bytes   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      const downloadTask = wx.downloadFile({
          url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
          success: function(res) {
              wx.playVoice({
                  filePath: res.tempFilePath
              })
          }
      })

      downloadTask.onProgressUpdate((res) => {
          console.log('下载进度', res.progress)
          console.log('已经下载的数据长度', res.totalBytesWritten)
          console.log('预期需要下载的数据总长度', res.totalBytesExpectedToWrite)
      })

      downloadTask.abort() // 取消下载任务
  #+END_EXAMPLE

*** wx.connectSocket(OBJECT)
 创建一个
 [[https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket][WebSocket]]
 连接；*一个微信小程序同时只能有一个 WebSocket 连接，如果当前已存在一个
 WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。*

 *OBJECT参数说明：*

 | 参数        | 类型          | 必填   | 说明                                                                        | 最低版本                                                        |

 | url         | String        | 是     | 开发者服务器接口地址，必须是 wss 协议，且域名必须是后台配置的合法域名       |                                                                 |
 | data        | Object        | 否     | 请求的数据                                                                  |                                                                 |
 | header      | Object        | 否     | HTTP Header , header 中不能设置 Referer                                     |                                                                 |
 | method      | String        | 否     | 默认是GET，有效值： OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT   |                                                                 |
 | protocols   | StringArray   | 否     | 子协议数组                                                                  | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | success     | Function      | 否     | 接口调用成功的回调函数                                                      |                                                                 |
 | fail        | Function      | 否     | 接口调用失败的回调函数                                                      |                                                                 |
 | complete    | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                            |                                                                 |

 \\
 *示例代码：*
 #+BEGIN_EXAMPLE
     wx.connectSocket({  
       url: 'test.php',
       data:{
         x: '',
         y: ''
       },
       header:{ 
         'content-type': 'application/json'
       },  protocols: ['protocol1'],
       method:"GET"
     })
 #+END_EXAMPLE

*** wx.onSocketOpen(CALLBACK)
 监听WebSocket连接打开事件。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })
     wx.onSocketOpen(function(res) {
       console.log('WebSocket连接已打开！')
     })
 #+END_EXAMPLE

*** wx.onSocketError(CALLBACK)
 监听WebSocket错误。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })
     wx.onSocketOpen(function(res){
       console.log('WebSocket连接已打开！')
     })
     wx.onSocketError(function(res){
       console.log('WebSocket连接打开失败，请检查！')
     })
 #+END_EXAMPLE

*** wx.sendSocketMessage(OBJECT)
 通过 WebSocket 连接发送数据，需要先
 [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][wx.connectSocket]]，并在
 [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxonsocketopencallback][wx.onSocketOpen]]
 回调之后才能发送。

 *OBJECT参数说明：*

 | 参数       | 类型                 | 必填   | 说明                                               |

 | data       | String/ArrayBuffer   | 是     | 需要发送的内容                                     |
 | success    | Function             | 否     | 接口调用成功的回调函数                             |
 | fail       | Function             | 否     | 接口调用失败的回调函数                             |
 | complete   | Function             | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     var socketOpen = false
     var socketMsgQueue = []
     wx.connectSocket({
       url: 'test.php'
     })

     wx.onSocketOpen(function(res) {
       socketOpen = true
       for (var i = 0; i < socketMsgQueue.length; i++){
          sendSocketMessage(socketMsgQueue[i])
       }
       socketMsgQueue = []
     })

     function sendSocketMessage(msg) {
       if (socketOpen) {
         wx.sendSocketMessage({
           data:msg
         })
       } else {
          socketMsgQueue.push(msg)
       }
     }
 #+END_EXAMPLE

 \\
*** wx.onSocketMessage(CALLBACK)
 监听WebSocket接受到服务器的消息事件。

 *CALLBACK返回参数：*

 | 参数   | 类型                 | 说明               |

 | data   | String/ArrayBuffer   | 服务器返回的消息   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })

     wx.onSocketMessage(function(res) {
       console.log('收到服务器内容：' + res.data)
     })
 #+END_EXAMPLE

 \\
*** wx.closeSocket(OBJECT)
   
 
  
   



 关闭WebSocket连接。

 | 参数       | 类型       | 必填   | 说明                                                                                                                  | 最低版本                                                        |

 | code       | Number     | 否     | 一个数字值表示关闭连接的状态号，表示连接被关闭的原因。如果这个参数没有被指定，默认的取值是1000 （表示正常连接关闭）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | reason     | String     | 否     | 一个可读的字符串，表示连接被关闭的原因。这个字符串必须是不长于123字节的UTF-8 文本（不是字符）                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                                                                |                                                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                                                                |                                                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                                      |                                                                 |

 \\
*** wx.onSocketClose(CALLBACK)
   
 
  
   



 监听WebSocket关闭。

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })

     //注意这里有时序问题，
     //如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。
     //必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。
     wx.onSocketOpen(function() {
       wx.closeSocket()
     })

     wx.onSocketClose(function(res) {
       console.log('WebSocket 已关闭！')
     })
 #+END_EXAMPLE

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.7.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个 SocketTask。

*** SocketTask
    WebSocket任务，可通过[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][ wx.connectSocket() ]]接口创建返回。
** 图片   
*** wx.chooseImage(OBJECT)
   
 
  
   



 从本地相册选择图片或使用相机拍照。

 *OBJECT参数说明：*

 | 参数         | 类型          | 必填   | 说明                                                |

 | count        | Number        | 否     | 最多可以选择的图片张数，默认9                       |
 | sizeType     | StringArray   | 否     | "original"原图，"compressed"压缩图，默认二者都有    |
 | sourceType   | StringArray   | 否     | "album"从相册选图，"camera"使用相机，默认二者都由   |
 | success      | Function      | 是     | 成功则返回图片的本地文件路径列表tempFilePaths       |
 | fail         | Function      | 否     | 接口调用失败的回调函数                              |
 | complete     | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
 [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

 *success返回参数说明：*

 | 参数            | 类型          | 说明                                         | 最低版本                                                        |

 | tempFilePaths   | StringArray   | 图片的本地文件路径列表                       |                                                                 |
 | tempFiles       | ObjectArray   | 图片的本地文件列表，每一项是一个 File 对象   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

 *File 对象结构如下:*

 | 字段   | 类型     | 说明                    |

 | path   | String   | 本地文件路径            |
 | size   | Number   | 本地文件大小，单位：B   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.chooseImage({
         count: 1, // 默认9
         sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
         sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
         success: function (res) {
               // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
             var tempFilePaths = res.tempFilePaths
         }
     })
 #+END_EXAMPLE

*** wx.previewImage(OBJECT)
   
 
  
   



 预览图片。

 *OBJECT参数说明：*

 | 参数       | 类型          | 必填   | 说明                                               |

 | current    | String        | 否     | 当前显示图片的链接，不填则默认为urls的第一张       |
 | urls       | StringArray   | 是     | 需要预览的图片链接列表                             |
 | success    | Function      | 否     | 接口调用成功的回调函数                             |
 | fail       | Function      | 否     | 接口调用失败的回调函数                             |
 | complete   | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.previewImage({
         current: '', // 当前显示图片的http链接
         urls: [] // 需要预览的图片http链接列表
     })
 #+END_EXAMPLE





 wx.getImageInfo(OBJECT)




   </h2>


 获取图片信息。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                   |

 | src        | String     | 是     | 图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                       |

 *success返回参数说明：*

 | 参数     | 类型     | 说明                 |

 | width    | Number   | 图片宽度，单位px     |
 | height   | Number   | 图片高度 单位px      |
 | path     | String   | 返回图片的本地路径   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getImageInfo({
       src: 'images/a.jpg',
       success: function (res) {
         console.log(res.width)
         console.log(res.height)
       }
     })

     wx.chooseImage({
       success: function (res) {
         wx.getImageInfo({
           src: res.tempFilePaths[0],
           success: function (res) {
             console.log(res.width)
             console.log(res.height)
           }
         })
       }
     })
 #+END_EXAMPLE

*** wx.saveImageToPhotosAlbum(OBJECT)
   
  
   

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 保存图片到系统相册，需要用户授权（scope.writePhotosAlbum），详见
 [[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                                                       |

 | filePath   | String     | 是     | 图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                     |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                     |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                           |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明       |
 |----------+----------+------------|
 | errMsg   | String   | 调用结果   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.saveImageToPhotosAlbum({
         success(res) {
         }
     })
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-media-picture.html]]

 \\
 \\






** 录音
*** wx.startRecord(OBJECT)
  
 开始录音。当主动调用wx.stopRecord，或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。当用户离开小程序时，此接口无法调用。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                                  |

 | success    | Function   | 否     | 录音成功后调用，返回录音文件的临时文件路径，res={tempFilePath:"录音文件的临时路径"}   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                                |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                      |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

 *success返回参数说明：*

 | 参数           | 说明                 |

 | tempFilePath   | 录音文件的临时路径   |

 \\
*** wx.stopRecord()
   
 
  
   



 主动调用停止录音。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.starRecord({
       success:function(res){
          var tempFilePath = res.tempFilePath
       },
       fail:function(res){
          //录音失败
       }
     })
     setTimeout(function(){  
       //结束录音  
       wx.stopRecord()
     },10000)
 #+END_EXAMPLE

*** wx.playVoice(OBJECT)
   
 
  
   



 开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | filePath   | String     | 是     | 需要播放的语音文件的文件路径                       |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startRecord({
       success:function(res){
         var tempFilePath = res.tempFilePath
         wx.playVoice({
           filePath:tempFilePath,
           complete:function(){
           } 
         })
       }
     })
 #+END_EXAMPLE

*** wx.pauseVoice()
   
 
  
   



 暂停正在播放的语音。再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用wx.stopVoice。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startRecord({
       success:function(res){
         var tempFilePath = res.tempFilePath
           wx.playVoice({
           filePath: tempFilePath
         })

         setTimeout(function(){
             //暂停播放
           wx.pauseVoice()
         },5000)
       }
     })
 #+END_EXAMPLE

*** wx.stopVoice()
   
 
  
   



 结束播放语音。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startRecord({
       success:function(res){
         var tempFilePath = res.tempFilePath
         wx.playVoice({
           filePath:tempFilePath
         })

         setTimeout(function(){
           wx.stopVoice()
         },5000)
       }
     })
 #+END_EXAMPLE









*** wx.getBackgroundAudioPlayerState(OBJECT)
   
 
  
   



 获取音乐播放状态。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 \\
 *success返回参数说明：*

 | 参数              | 说明                                                              |

 | duration          | 选定音频的长度（单位：s），只有在当前有音乐播放时返回             |
 | currentPosition   | 选定音频的播放位置（单位：s），只有在当前有音乐播放时返回         |
 | status            | 播放状态（2：没有音乐在播放，1：播放中，0：暂停中）               |
 | downloadPercent   | 音频的下载进度（整数，80 代表 80%），只有在当前有音乐播放时返回   |
 | dataUrl           | 歌曲数据链接，只有在当前有音乐播放时返回                          |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getBackgroundAudioPlayerState({
         success:function(res){
             var status = res.status
             var dataUrl = res.dataUrl
             var currentPosition = res.currentPosition
             var duration = res.duration
             var downloadPercent = res.downloadPercent
         }
     })
 #+END_EXAMPLE

*** wx.playBackgroundAudio(OBJECT)
   
 
  
   



 使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户点击“显示在聊天顶部”时，音乐不会暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。

 *OBJECT参数说明*

 | 参数          | 类型       | 必填   | 说明                                               |

 | dataUrl       | String     | 是     | 音乐链接                                           |
 | title         | String     | 否     | 音乐标题                                           |
 | coverImgUrl   | String     | 否     | 封面URL                                            |
 | success       | Function   | 否     | 接口调用成功的回调函数                             |
 | fail          | Function   | 否     | 接口调用失败的回调函数                             |
 | complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码*\\

 #+BEGIN_EXAMPLE
     wx.playBackgroundAudio({
         dataUrl: '',
         title: '',
         coverImgUrl: ''
     })
 #+END_EXAMPLE

*** wx.pauseBackgroundAudio()
   
 
  
   



 暂停播放音乐。

 *示例代码*

 #+BEGIN_EXAMPLE
     wx.pauseBackgroundAudio()
 #+END_EXAMPLE

*** wx.seekBackgroundAudio(OBJECT)
   
 
  
   



 控制音乐播放进度。

 *OBJECT参数说明*

 | 参数       | 类型       | 必填   | 说明                                               |

 | position   | Number     | 是     | 音乐位置，单位：秒                                 |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码*\\

 #+BEGIN_EXAMPLE
     wx.seekBackgroundAudio({
         position: 30
     })
 #+END_EXAMPLE

*** wx.stopBackgroundAudio()
   
 
  
   



 停止播放音乐。

 *示例代码*

 #+BEGIN_EXAMPLE
     wx.stopBackgroundAudio()
 #+END_EXAMPLE

*** wx.onBackgroundAudioPlay(CALLBACK)
   
 
  
   



 监听音乐播放。

*** wx.onBackgroundAudioPause(CALLBACK)
   
 
  
   



 监听音乐暂停。

*** wx.onBackgroundAudioStop(CALLBACK)
   
 
  
   



 监听音乐停止。

 \\

*** wx.getBackgroundAudioManager()
   
  
   

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取*全局唯一*的背景音频管理器=backgroundAudioManager=

*** backgroundAudioManager
   
  
   

 *backgroundAudioManager 对象的属性列表：*

 | 属性          | 类型      | 说明                                                                                                        | 只读   |

 | duration      | Number    | 当前音频的长度（单位：s），只有在当前有合法的 src 时返回                                                    | 是     |
 | currentTime   | Number    | 当前音频的播放位置（单位：s），只有在当前有合法的 src 时返回                                                | 是     |
 | paused        | Boolean   | 当前是是否暂停或停止状态，true 表示暂停或停止，false 表示正在播放                                           | 是     |
 | src           | String    | 音频的数据源，默认为空字符串，*当设置了新的 src 时，会自动开始播放* ，目前支持的格式有 m4a, aac, mp3, wav   | 否     |
 | startTime     | Number    | 音频开始播放的位置（单位：s）                                                                               | 否     |
 | buffered      | Number    | 音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲。                                                | 是     |
 | title         | String    | 音频标题，用于做原生音频播放器音频标题。原生音频播放器中的分享功能，分享出去的卡片标题，也将使用该值。      | 否     |
 | epname        | String    | 专辑名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
 | singer        | String    | 歌手名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
 | coverImgUrl   | String    | 封面图url，用于做原生音频播放器背景图。原生音频播放器中的分享功能，分享出去的卡片配图及背景也将使用该图。   | 否     |
 | webUrl        | String    | 页面链接，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                    | 否     |

 *backgroundAudioManager 对象的方法列表：*

 | 方法           | 参数       | 说明                                                         |

 | play           |            | 播放                                                         |
 | pause          |            | 暂停                                                         |
 | stop           |            | 停止                                                         |
 | seek           | position   | 跳转到指定位置，单位 s                                       |
 | onCanplay      | callback   | 背景音频进入可以播放状态，但不保证后面可以流畅播放           |
 | onPlay         | callback   | 背景音频播放事件                                             |
 | onPause        | callback   | 背景音频暂停事件                                             |
 | onStop         | callback   | 背景音频停止事件                                             |
 | onEnded        | callback   | 背景音频自然播放结束事件                                     |
 | onTimeUpdate   | callback   | 背景音频播放进度更新事件                                     |
 | onPrev         | callback   | 用户在系统音乐播放面板点击上一曲事件（iOS only）             |
 | onNext         | callback   | 用户在系统音乐播放面板点击下一曲事件（iOS only）             |
 | onError        | callback   | 背景音频播放错误事件                                         |
 | onWaiting      | callback   | 音频加载中事件，当音频因为数据不足，需要停下来加载时会触发   |

 *errcode 说明*

 | errCode   | 说明       |
 |-----------+------------|
 | 10001     | 系统错误   |
 | 10002     | 网络错误   |
 | 10003     | 文件错误   |
 | 10004     | 格式错误   |
 | -1        | 未知错误   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     const backgroundAudioManager = wx.getBackgroundAudioManager()

     backgroundAudioManager.title = '此时此刻'
     backgroundAudioManager.epname = '此时此刻'
     backgroundAudioManager.singer = '汪峰'
     backgroundAudioManager.coverImgUrl = 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'
     backgroundAudioManager.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46' // 设置了 src 之后会自动播放 
 #+END_EXAMPLE

 wx.createAudioContext(audioId)
 创建并返回 audio 上下文=audioContext=对象

*** *audioContext*
   
  
   

 =audioContext=通过 audioId 跟一个 audio 组件绑定，通过它可以操作一个
 audio 组件。

 *audioContext对象的方法列表：*

 | 方法     | 参数       | 说明                     |

 | setSrc   | src        | 音频的地址               |
 | play     | 无         | 播放                     |
 | pause    | 无         | 暂停                     |
 | seek     | position   | 跳转到指定位置，单位 s   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     <!-- audio.wxml --><audio  src="{{src}}" id="myAudio" ></audio>

     <button type="primary" bindtap="audioPlay">播放</button>
     <button type="primary" bindtap="audioPause">暂停</button>
     <button type="primary" bindtap="audio14">设置当前播放时间为14秒</button>
     <button type="primary" bindtap="audioStart">回到开头</button>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // audio.js
     Page({
       onReady: function (e) {
         // 使用 wx.createAudioContext 获取 audio 上下文 context
         this.audioCtx = wx.createAudioContext('myAudio')    this.audioCtx.setSrc('http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&fromtag=46')
         this.audioCtx.play()
       },
       data: {    src: ''
       },
       audioPlay: function () {
         this.audioCtx.play()
       },
       audioPause: function () {
         this.audioCtx.pause()
       },
       audio14: function () {
         this.audioCtx.seek(14)
       },
       audioStart: function () {
         this.audioCtx.seek(0)
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-audio.html]]

 \\
 \\








** 视频
*** wx.chooseVideo(OBJECT)
 拍摄视频或从手机相册中选视频，返回视频的临时文件路径。

 *OBJECT参数说明：*

 | 参数          | 类型          | 必填   | 说明                                                                     |

 | sourceType    | StringArray   | 否     | "album"从相册选视频，"camera"使用相机拍摄，默认为：['album', 'camera']   |
 | maxDuration   | Number        | 否     | 拍摄视频最长拍摄时间，单位秒。最长支持60秒                               |
 | camera        | String        | 否     | 默认调起的为前置还是后置摄像头。front: 前置，back: 后置，默认 back       |
 | success       | Function      | 否     | 接口调用成功，返回视频文件的临时文件路径，详见返回参数说明               |
 | fail          | Function      | 否     | 接口调用失败的回调函数                                                   |
 | complete      | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                         |

 *success返回参数说明：*

 | 参数           | 说明                     |

 | tempFilePath   | 选定视频的临时文件路径   |
 | duration       | 选定视频的时间长度       |
 | size           | 选定视频的数据量大小     |
 | height         | 返回选定视频的长         |
 | width          | 返回选定视频的宽         |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
 [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*\\
 *示例代码：*

 #+BEGIN_EXAMPLE
     <view class="container">
         <video src="{{src}}"></video>
         <button bindtap="bindButtonTap">获取视频</button>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
         bindButtonTap:function(){
             var that = this
             wx.chooseVideo({
                 sourceType: ['album','camera'],
                 maxDuration:60,
           camera: 'back',
                 success: function(res){
                     that.setData({
                         src:res.tempFilePath
                     })
                 }
             })
         }
     })
 #+END_EXAMPLE

*** wx.saveVideoToPhotosAlbum(OBJECT)
   
  
   

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 保存视频到系统相册，需要用户授权（scope.writePhotosAlbum），详见
 [[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                                   |

 | filePath   | String     | 是     | 视频文件路径，可以是临时文件路径也可以是永久文件路径   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）       |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明       |
 |----------+----------+------------|
 | errMsg   | String   | 调用结果   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.saveVideoToPhotosAlbum({
         success(res) {
         }
     })
 #+END_EXAMPLE

*** videoContext
   
  
   

 =videoContext=通过 videoId 跟一个 video 组件绑定，通过它可以操作一个
 video 组件。

 *videoContext对象的方法列表：*

 | 方法                | 参数       | 说明                                              | 最低版本                                                        |

 | play                | 无         | 播放                                              |                                                                 |
 | pause               | 无         | 暂停                                              |                                                                 |
 | seek                | position   | 跳转到指定位置，单位 s                            |                                                                 |
 | sendDanmu           | danmu      | 发送弹幕，danmu 包含两个属性 text, color。        |                                                                 |
 | playbackRate        | rate       | 设置倍速播放，支持的倍率有 0.5/0.8/1.0/1.25/1.5   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | requestFullScreen   | 无         | 进入全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | exitFullScreen      | 无         | 退出全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     <view class="section tc">  <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400"   enable-danmu danmu-btn controls></video>
       <view class="btn-area">
         <input bindblur="bindInputBlur"/>
         <button bindtap="bindSendDanmu">发送弹幕</button>
       </view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     function getRandomColor () {
       let rgb = []
       for (let i = 0 ; i < 3; ++i){
         let color = Math.floor(Math.random() * 256).toString(16)
         color = color.length == 1 ? '0' + color : color
         rgb.push(color)
       }
       return '#' + rgb.join('')
     }

     Page({
       onReady: function (res) {
         this.videoContext = wx.createVideoContext('myVideo')
       },
       inputValue: '',
       bindInputBlur: function(e) {
         this.inputValue = e.detail.value
       },
       bindSendDanmu: function () {
         this.videoContext.sendDanmu({
           text: this.inputValue,
           color: getRandomColor()
         })
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-video.html]]

 \\
 \\











*** wx.createCameraContext(this)
   
  
   



 #+BEGIN_QUOTE
   基础库 1.6.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 创建并返回 camera
 上下文 cameraContext 对象，cameraContext 与页面的 camera 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 <camera/> 组件。
 在自定义组件下，第一个参数传入组件实例this，以操作组件内 <camera/> 组件

** 文件
*** wx.saveFile(OBJECT)
    保存文件到本地。

*** wx.getFileInfo(OBJECT)
   获取文件信息

 *OBJECT参数说明：*

 | 参数名            | 类型       | 必填   | 说明                                                |
 | filePath          | String     | 是     | 本地文件路径                                        |
 | digestAlgorithm   | String     | 否     | 计算文件摘要的算法，默认值 md5，有效值：md5，sha1   |
 | success           | Function   | 否     | 接口调用成功的回调函数                              |
 | fail              | Function   | 否     | 接口调用失败的回调函数                              |
 | complete          | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明                                              |
 | size     | Number   | 文件大小，单位：B                                 |
 | digest   | String   | 按照传入的 digestAlgorithm 计算得出的的文件摘要   |
 | errMsg   | String   | 调用结果                                          |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getFileInfo({
         success(res) {
             console.log(res.size)
             console.log(res.digest)
         }
     })
 #+END_EXAMPLE

*** wx.getSavedFileList(OBJECT)
   
 
  
   



 获取本地已保存的文件列表

**** *OBJECT参数说明：*
    
  
    

 | 参数       | 类型       | 必填   | 说明                                                      |

 | success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                    |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

**** *success返回参数说明：*
    
  
    

 | 参数       | 类型           | 说明           |

 | errMsg     | String         | 接口调用结果   |
 | fileList   | Object Array   | 文件列表       |

**** *fileList中的项目说明：*
    
  
    

 | 键           | 类型     | 说明                                                           |

 | filePath     | String   | 文件的本地路径                                                 |
 | createTime   | Number   | 文件的保存时的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |
 | size         | Number   | 文件大小，单位B                                                |

**** *示例代码：*
    
  
    

 #+BEGIN_EXAMPLE
     wx.getSavedFileList({
       success: function(res) {
         console.log(res.fileList)
       }
     })
 #+END_EXAMPLE

 \\





 wx.getSavedFileInfo(OBJECT)




   </h2>


 获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用
 [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_82/weixinapp-file.xhtml#wxgetFileInfo][wx.getFileInfo]]
 接口。\\

**** *OBJECT参数说明：*
    
  
    

 | 参数       | 类型       | 必填   | 说明                                                      |

 | filePath   | String     | 是     | 文件路径                                                  |
 | success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                    |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

**** *success返回参数说明：*
    
  
    

 | 参数         | 类型     | 说明                                                           |

 | errMsg       | String   | 接口调用结果                                                   |
 | size         | Number   | 文件大小，单位B                                                |
 | createTime   | Number   | 文件的保存是的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |

**** *示例代码：*
    
  
    

 #+BEGIN_EXAMPLE
     wx.getSavedFileInfo({
       filePath: 'wxfile://somefile', //仅做示例用，非真正的文件路径
       success: function(res) {
         console.log(res.size)
         console.log(res.createTime)
       }
     })
 #+END_EXAMPLE

 \\





 wx.removeSavedFile(OBJECT)




   </h2>


 删除本地存储的文件

**** *OBJECT参数说明：*
    
  
    

 | 参数       | 类型       | 必填   | 说明                                               |

 | filePath   | String     | 是     | 需要删除的文件路径                                 |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

**** *示例代码：*
    
  
    

 #+BEGIN_EXAMPLE
     wx.getSavedFileList({
       success: function(res) {
         if (res.fileList.length > 0){
           wx.removeSavedFile({
             filePath: res.fileList[0].filePath,
             complete: function(res) {
               console.log(res)
             }
           })
         }
       }
     })
 #+END_EXAMPLE

 \\





 wx.openDocument(OBJECT)




   </h2>


 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx

 *OBJECT参数说明：*

 | 参数       | 说明       | 必填   | 说明                                                                          | 最低版本                                                        |

 | filePath   | String     | 是     | 文件路径，可通过 downFile 获得                                                |                                                                 |
 | fileType   | String     | 否     | 文件类型，指定文件类型打开文件，有效值 doc, xls, ppt, pdf, docx, xlsx, pptx   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                        |                                                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                        |                                                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                              |                                                                 |

**** 示例代码
    
  
    

 #+BEGIN_EXAMPLE
     wx.downloadFile({  url: 'http://example.com/somefile.pdf',
       success: function (res) {
         var filePath = res.tempFilePath 
         wx.openDocument({
           filePath: filePath,
           success: function (res) {
             console.log('打开文档成功')
           }
         })
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-file.html]]

 \\
 \\












 每个微信小程序都可以有自己的本地缓存，可以通过wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。同一个微信用户，同一个小程序
 storage 上限为 10MB。localStorage 以用户维度隔离，同一台设备上，A
 用户无法读取到 B 用户的数据。

 *注意：*
 localStorage是永久存储的，但是我们不建议将关键信息全部存在localStorage，以防用户换设备的情况。

*** wx.setStorage(OBJECT)
   
 
  
   



 将数据存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个异步接口。

 *OBJECT参数说明：*

 | 参数       | 类型            | 必填   | 说明                                               |

 | key        | String          | 是     | 本地缓存中的指定的 key                             |
 | data       | Object/String   | 是     | 需要存储的内容                                     |
 | success    | Function        | 否     | 接口调用成功的回调函数                             |
 | fail       | Function        | 否     | 接口调用失败的回调函数                             |
 | complete   | Function        | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码*

 #+BEGIN_EXAMPLE
     wx.setStorage({
       key:"key"
       data:"value"
     })
 #+END_EXAMPLE

*** wx.setStorageSync(KEY,DATA)
   
 
  
   



 将data存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个同步接口。

 *参数说明：*

 | 参数   | 类型            | 必填   | 说明                    |

 | key    | String          | 是     | 本地缓存中的指定的key   |
 | data   | Object/String   | 是     | 需要存储的内容          |

 *示例代码*

 #+BEGIN_EXAMPLE
     try {
        wx.setStorageSync("key","value")
     } catch (e) {
     }
 #+END_EXAMPLE

*** wx.getStorage(OBJECT)
   
 
  
   



 从本地缓存中异步获取指定key对应的内容。

 *OBJECT参数说明：*\\

 | 参数       | 类型       | 必填   | 说明                                               |

 | key        | String     | 是     | 本地缓存中的指定的 key                             |
 | success    | Function   | 是     | 接口调用的回调函数,res = {data: key对应的内容}     |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数   | 类型     | 说明            |

 | data   | String   | key对应的内容   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getStorage({
       key:'key',
       success: function(res){
           console.log(res.data)
       } 
     })
 #+END_EXAMPLE

*** wx.getStorageSync(KEY)
 本地缓存中同步获取指定key对应的内容。

 *参数说明：*

 | 参数   | 类型     | 必填   | 说明                    |

 | key    | String   | 是     | 本地缓存中的指定的key   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var value = wx.getStorageSync('key')
       if (value) {
           // Do something with return value
       }
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE





 wx.getStorageInfo(OBJECT)




   </h2>


 异步获取当前storage的相关信息

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用的回调函数，详见返回参数说明               |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数          | 类型           | 说明                         |

 | keys          | String Array   | 当前storage中所有的key       |
 | currentSize   | Number         | 当前占用的空间大小, 单位kb   |
 | limitSize     | Number         | 限制的空间大小，单位kb       |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getStorageInfo({
       success: function(res) {
         console.log(res.keys)
         console.log(res.currentSize)
         console.log(res.limitSize)
       }
     })
 #+END_EXAMPLE





 wx.getStorageInfoSync




   </h2>


 同步获取当前storage的相关信息

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var res = wx.getStorageInfoSync()
       console.log(res.keys)
       console.log(res.currentSize)
       console.log(res.limitSize)
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE





 wx.removeStorage(OBJECT)




   </h2>


 从本地缓存中异步移除指定 key 。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | key        | String     | 是     | 本地缓存中的指定的 key                             |
 | success    | Function   | 是     | 接口调用的回调函数                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.removeStorage({
       key: 'key',
       success: function(res) {
         console.log(res.data)
       } 
     })
 #+END_EXAMPLE





 wx.removeStorageSync(KEY)




   </h2>


 从本地缓存中同步移除指定 key 。

 *参数说明：*

 | 参数   | 类型     | 必填   | 说明                     |

 | key    | String   | 是     | 本地缓存中的指定的 key   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       wx.removeStorageSync('key')
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE

*** wx.clearStorage()
   

 
   



 清理本地数据缓存。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.clearStorage()
 #+END_EXAMPLE

*** wx.clearStorageSync()
   

 
   



 同步清理本地数据缓存

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
         wx.clearStorageSync()
     } catch(e) {
       // Do something when catch error
     }
 #+END_EXAMPLE

*** wx.chooseLocation(OBJECT)
   
 
   



 打开地图选择位置。

 需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]] scope.userLocation\\

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                 |

 | success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
 | cancel     | Function   | 否     | 用户取消时调用                                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                               |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

 *success返回参数说明：*

 | 参数        | 说明                                         |

 | name        | 位置名称                                     |
 | address     | 详细地址                                     |
 | latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
 | longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

 \\
 \\




 [[http://caibaojian.com/weixinapp/weixinapp-location.html]]

 \\
 \\








** 定位
*** wx.getLocation(OBJECT)
   获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                  |

 | type       | String     | 否     | 默认为 wgs84 返回 gps 坐标，gcj02 返回可用于=wx.openLocation=的坐标   |
 | success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。                    |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

 *success返回参数说明：*

 | 参数                 | 说明                                           | 最低版本                                                        |

 | latitude             | 纬度，浮点数，范围为-90~90，负数表示南纬       |                                                                 |
 | longitude            | 经度，浮点数，范围为-180~180，负数表示西经     |                                                                 |
 | speed                | 速度，浮点数，单位m/s                          |                                                                 |
 | accuracy             | 位置的精确度                                   |                                                                 |
 | altitude             | 高度，单位 m                                   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | verticalAccuracy     | 垂直精度，单位 m（Android 无法获取，返回 0）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | horizontalAccuracy   | 水平精度，单位 m                               | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getLocation({
       type: 'wgs84',
       success: function(res) {
         var latitude = res.latitude
         var longitude = res.longitude
         var speed = res.speed
         var accuracy = res.accuracy
       }
     })
 #+END_EXAMPLE

*** wx.chooseLocation(OBJECT)
   

 
   



 打开地图选择位置。

 需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
 scope.userLocation

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                 |

 | success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                               |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

 *success返回参数说明：*

 | 参数        | 说明                                         |

 | name        | 位置名称                                     |
 | address     | 详细地址                                     |
 | latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
 | longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

*** wx.openLocation(OBJECT)
   

 
   



 使用微信内置地图查看位置。

 需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
 scope.userLocation

 *OBJECT参数说明：*

 | 参数        | 类型       | 必填   | 说明                                               |

 | latitude    | Float      | 是     | 纬度，范围为-90~90，负数表示南纬                   |
 | longitude   | Float      | 是     | 经度，范围为-180~180，负数表示西经                 |
 | scale       | INT        | 否     | 缩放比例，范围5~18，默认为18                       |
 | name        | String     | 否     | 位置名                                             |
 | address     | String     | 否     | 地址的详细说明                                     |
 | success     | Function   | 否     | 接口调用成功的回调函数                             |
 | fail        | Function   | 否     | 接口调用失败的回调函数                             |
 | complete    | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getLocation({
       type: 'gcj02', //返回可以用于wx.openLocation的经纬度
       success: function(res) {
         var latitude = res.latitude
         var longitude = res.longitude
         wx.openLocation({
           latitude: latitude,
           longitude: longitude,
           scale: 28
         })
       }
     })
 #+END_EXAMPLE

*** wx.createMapContext(mapId)
   

 
   



 创建并返回 map
 上下文 =mapContext= 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 =<map/>= 组件\\

 \\

 *mapContext*

 =mapContext=通过 mapId
 跟一个=<map/>=组件绑定，通过它可以操作对应的=<map/>=组件。

 *mapContext 对象的方法列表*

 | 方法                | 参数     | 说明                                                                                                                                           | 最低版本                                                        |

 | getCenterLocation   | OBJECT   | 获取当前地图中心的经纬度，返回的是 gcj02 坐标系，可以用于 [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][=wx.openLocation=]]   |                                                                 |
 | moveToLocation      | 无       | 将地图中心移动到当前定位点，需要配合map组件的show-location使用                                                                                 |                                                                 |
 | translateMarker     | OBJECT   | 平移marker，带动画                                                                                                                             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | includePoints       | OBJECT   | 缩放视野展示所有经纬度                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | getRegion           | OBJECT   | 获取当前地图的视野范围                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | getScale            | OBJECT   | 获取当前地图的缩放级别                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 *getCenterLocation 的 OBJECT 参数列表*

 | 参数       | 类型       | 必填   | 说明                                                                    |

 | success    | Function   | 否     | 接口调用成功的回调函数 ，res = { longitude: "经度", latitude: "纬度"}   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                  |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                        |

 *translateMarker 的 OBJECT 参数列表*

 | 参数           | 类型       | 必填   | 说明                                             |

 | markerId       | Number     | 是     | 指定marker                                       |
 | destination    | Object     | 是     | 指定marker移动到的目标点                         |
 | autoRotate     | Boolean    | 是     | 移动过程中是否自动旋转marker                     |
 | rotate         | Number     | 是     | marker的旋转角度                                 |
 | duration       | Number     | 否     | 动画持续时长，默认值1000ms，平移与旋转分别计算   |
 | animationEnd   | Function   | 否     | 动画结束回调函数                                 |
 | fail           | Function   | 否     | 接口调用失败的回调函数                           |

 *includePoints 的 OBJECT 参数列表*

 | 参数      | 类型    | 必填   | 说明                                                                                                                                                    |

 | points    | Array   | 是     | 要显示在可视区域内的坐标点列表，[{latitude, longitude}]                                                                                                 |
 | padding   | Array   | 否     | 坐标点形成的矩形边缘到地图边缘的距离，单位像素。格式为[上,右,下,左]，安卓上只能识别数组第一项，上下左右的padding一致。开发者工具暂不支持padding参数。   |

 *getRegion 的 OBJECT 参数列表*

 | 参数       | 类型       | 必填   | 说明                                                                           |

 | success    | Function   | 否     | 接口调用成功的回调函数，res = {southwest, northeast}，西南角与东北角的经纬度   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                         |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                               |

 *getScale 的 OBJECT 参数列表*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数，res = {scale}              |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 \\

 *示例代码：*

 **

 #+BEGIN_EXAMPLE
     <!-- map.wxml -->
     <map id="myMap" show-location />

     <button type="primary" bindtap="getCenterLocation">获取位置</button>
     <button type="primary" bindtap="moveToLocation">移动位置</button>
     <button type="primary" bindtap="translateMarker">移动标注</button>
     <button type="primary" bindtap="includePoints">缩放视野展示所有经纬度</button>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // map.js
     Page({
       onReady: function (e) {
         // 使用 wx.createMapContext 获取 map 上下文
         this.mapCtx = wx.createMapContext('myMap')
       },
       getCenterLocation: function () {
         this.mapCtx.getCenterLocation({
           success: function(res){
             console.log(res.longitude)
             console.log(res.latitude)
           }
         })
       },
       moveToLocation: function () {
         this.mapCtx.moveToLocation()
       },
       translateMarker: function() {
         this.mapCtx.translateMarker({
           markerId: 0,
           autoRotate: true,
           duration: 1000,
           destination: {
             latitude:23.10229,
             longitude:113.3345211,
           },
           animationEnd() {
             console.log('animation end')
           }
         })
       },
       includePoints: function() {
         this.mapCtx.includePoints({
           padding: [10],
           points: [{
             latitude:23.10229,
             longitude:113.3345211,
           }, {
             latitude:23.00229,
             longitude:113.3345211,
           }]
         })
       }
     })
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-map.html]]

 \\
 \\
















 微信小程序API设备概览




   </h2>


 - [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][系统信息]]------（[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][wx.getSystemInfo]]、[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfosync][wx.getSystemInfoSync]]）\\
 - [[file:weixinapp-api-device.html][网络状态]]------（[[file:weixinapp-api-device.html#wxgetnetworktypeobject][wx.getNetworkType]]）\\
 - [[file:weixinapp-api-accelerometer.html][重力感应]]------（[[file:weixinapp-api-accelerometer.html#wxonaccelerometerchangecallback][wx.onAccelerometerChange]]）\\
 - [[file:weixinapp-api-campass.html][罗
   盘]]------（[[file:weixinapp-api-campass.html#wxoncompasschangecallback][wx.onCompassChange]]）\\
 - [[file:weixinapp-api-phonecall.html][拨打电话]]------（[[file:weixinapp-api-phonecall.html#wxmakephonecallobject][wx.makePhoneCall]]）\\
 - [[file:weixinapp-api-scancode.html][扫
   码]]------（[[file:weixinapp-api-scancode.html#wxscancodeobject][wx.scanCode]]）\\

*** wx.getSystemInfo(OBJECT)

 获取系统信息。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用成功的回调                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success回调参数说明：*

 | 属性           | 说明             |

 | model          | 手机型号         |
 | pixelRatio     | 设备像素比       |
 | windowWidth    | 窗口宽度         |
 | windowHeight   | 窗口高度         |
 | language       | 微信设置的语言   |
 | version        | 微信版本号       |
 | system         | 操作系统版本     |
 | platform       | 客户端平台       |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getSystemInfo({
       success: function(res) {
         console.log(res.model)
         console.log(res.pixelRatio)
         console.log(res.windowWidth)
         console.log(res.windowHeight)
         console.log(res.language)
         console.log(res.version)
         console.log(res.platform)
       }
     })
 #+END_EXAMPLE

 \\
*** wx.getSystemInfoSync()

 获取系统信息同步接口

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var res = wx.getSystemInfoSync()
       console.log(res.model)
       console.log(res.pixelRatio)
       console.log(res.windowWidth)
       console.log(res.windowHeight)
       console.log(res.language)
       console.log(res.version)
       console.log(res.platform)
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-o1xc1xz3.html]]

 \\
 \\
















 wx.getSystemInfo(OBJECT)




   </h2>


 获取系统信息。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用成功的回调                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success回调参数说明：*

 | 参数              | 说明                                                                | 最低版本                                                        |

 | model             | 手机型号                                                            |                                                                 |
 | pixelRatio        | 设备像素比                                                          |                                                                 |
 | screenWidth       | 屏幕宽度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | screenHeight      | 屏幕高度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | windowWidth       | 可使用窗口宽度                                                      |                                                                 |
 | windowHeight      | 可使用窗口高度                                                      |                                                                 |
 | language          | 微信设置的语言                                                      |                                                                 |
 | version           | 微信版本号                                                          |                                                                 |
 | system            | 操作系统版本                                                        |                                                                 |
 | platform          | 客户端平台                                                          |                                                                 |
 | fontSizeSetting   | 用户字体大小设置。以“我-设置-通用-字体大小”中的设置为准，单位：px   | [[http://caibaojian.com/weixinapp/compatibility.html][1.5.0]]   |
 | SDKVersion        | 客户端基础库版本                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getSystemInfo({
       success: function(res) {
         console.log(res.model)
         console.log(res.pixelRatio)
         console.log(res.windowWidth)
         console.log(res.windowHeight)
         console.log(res.language)
         console.log(res.version)
         console.log(res.platform)
       }
     })
 #+END_EXAMPLE





 wx.getSystemInfoSync()




   </h2>


 获取系统信息同步接口

 *同步返回参数说明：*

 | 参数           | 说明               | 最低版本                                                        |

 | model          | 手机型号           |                                                                 |
 | pixelRatio     | 设备像素比         |                                                                 |
 | screenWidth    | 屏幕宽度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | screenHeight   | 屏幕高度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | windowWidth    | 可使用窗口宽度     |                                                                 |
 | windowHeight   | 可使用窗口高度     |                                                                 |
 | language       | 微信设置的语言     |                                                                 |
 | version        | 微信版本号         |                                                                 |
 | system         | 操作系统版本       |                                                                 |
 | platform       | 客户端平台         |                                                                 |
 | SDKVersion     | 客户端基础库版本   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var res = wx.getSystemInfoSync()
       console.log(res.model)
       console.log(res.pixelRatio)
       console.log(res.windowWidth)
       console.log(res.windowHeight)
       console.log(res.language)
       console.log(res.version)
       console.log(res.platform)
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE


 wx.canIUse(String)

 判断小程序的API，回调，参数，组件等是否在当前版本可用。

 *String参数说明：* 使用=${API}.${method}.${param}.${options}=或者=${component}.${attribute}.${option}=方式来调用，例如：

 - =${API}=代表 API 名字
 - =${method}=代表调用方式，有效值为=return=, =success=, =object=, =callback=
 - =${param}=代表参数或者返回值
 - =${options}=代表参数的可选值
 - =${component}=代表组件名字
 - =${attribute}=代表组件属性
 - =${option}=代表组件属性的可选值

 例子：

 #+BEGIN_EXAMPLE
     wx.canIUse('openBluetoothAdapter')wx.canIUse('getSystemInfoSync.return.screenWidth')
     wx.canIUse('getSystemInfo.success.screenWidth')
     wx.canIUse('showToast.object.image')
     wx.canIUse('onCompassChange.callback.direction')
     wx.canIUse('request.object.method.GET')
     wx.canIUse('contact-button')
     wx.canIUse('text.selectable')
     wx.canIUse('button.open-type.contact')
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-device.html]]

 \\
 \\











*** wx.getNetworkType(OBJECT)
   

 
   



 获取网络类型。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用成功，返回网络类型 networkType             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数          | 说明       |

 | networkType   | 网络类型   |

 #+BEGIN_EXAMPLE
     wx.getNetworkType({
       success: function(res) {
         // 返回网络类型, 有效值：
         // wifi/2g/3g/4g/unknown(Android下不常见的网络类型)/none(无网络)
         var networkType = res.networkType
       }
     })
 #+END_EXAMPLE





 wx.onNetworkStatusChange(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听网络状态变化。

 *CALLBACK返回参数：*

 | 参数          | 类型      | 说明                 |

 | isConnected   | Boolean   | 当前是否有网络连接   |
 | networkType   | String    | 网络类型             |

 *networkType 有效值：*

 | 值        | 说明                        |

 | wifi      | wifi 网络                   |
 | 2g        | 2g 网络                     |
 | 3g        | 3g 网络                     |
 | 4g        | 4g 网络                     |
 | none      | 无网络                      |
 | unknown   | Android下不常见的网络类型   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onNetworkStatusChange(function(res) {
       console.log(res.isConnected)
       console.log(res.networkType)
     })
 #+END_EXAMPLE

 \\
 \\
 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-device.html]]

 \\
 \\











*** wx.onAccelerometerChange(CALLBACK)
   

 
   



 监听重力感应数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopAccelerometer=停止监听。\\

 *CALLBACK返回参数：*

 | 参数   | 类型     | 说明   |
 |--------+----------+--------|
 | x      | Number   | X 轴   |
 | y      | Number   | Y 轴   |
 | z      | Number   | Z 轴   |

 **

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onAccelerometerChange(function(res) {
       console.log(res.x)
       console.log(res.y)
       console.log(res.z)
     })
 #+END_EXAMPLE





 wx.startAccelerometer(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

   微信客户端 6.5.6 版本开始支持
 #+END_QUOTE

 开始监听加速度数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startAccelerometer()
 #+END_EXAMPLE





 wx.stopAccelerometer(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

   微信客户端 6.5.6 版本开始支持
 #+END_QUOTE

 停止监听加速度数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.stopAccelerometer()
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html]]

 \\
 \\
















 wx.onCompassChange(CALLBACK)




   </h2>


 监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopCompass=停止监听。\\

 *CALLBACK返回参数：*

 | 参数        | 类型     | 说明             |

 | direction   | Number   | 面对的方向度数   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onCompassChange(function (res) {
       console.log(res.direction)
     })
 #+END_EXAMPLE





 wx.startCompass(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 开始监听罗盘数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startCompass()
 #+END_EXAMPLE





 wx.stopCompass(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 停止监听罗盘数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.stopCompass()
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html]]

 \\
 \\











*** wx.makePhoneCall(OBJECT)
   

 
   



 *OBJECT参数说明：*

 | 参数          | 类型       | 必填   | 说明                                               |

 | phoneNumber   | String     | 是     | 需要拨打的电话号码                                 |
 | success       | Function   | 否     | 接口调用成功的回调                                 |
 | fail          | Function   | 否     | 接口调用失败的回调函数                             |
 | complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.makePhoneCall({
       phoneNumber: '1340000' //仅为示例，并非真实的电话号码
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html]]

 \\
 \\











*** wx.scanCode(OBJECT)
   

 
   



 调起客户端扫码界面，扫码成功后返回对应的结果

 *Object 参数说明：*

 | 参数             | 类型       | 必填   | 说明                                                 | 最低版本                                                        |

 | onlyFromCamera   | Boolean    | 否     | 是否只能从相机扫码，不允许从相册选择图片             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | success          | Function   | 否     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |                                                                 |
 | fail             | Function   | 否     | 接口调用失败的回调函数                               |                                                                 |
 | complete         | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |                                                                 |

 *success返回参数说明：*

 | 参数       | 说明                                                                          |

 | result     | 所扫码的内容                                                                  |
 | scanType   | 所扫码的类型                                                                  |
 | charSet    | 所扫码的字符集                                                                |
 | path       | 当所扫的码为当前小程序的合法二维码时，会返回此字段，内容为二维码携带的 path   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     // 允许从相机和相册扫码
     wx.scanCode({
       success: (res) => {
         console.log(res)
       }
     })

     // 只允许从相机扫码
     wx.scanCode({
       onlyFromCamera: true,
       success: (res) => {
         console.log(res)
       }
     })
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html]]

 \\
 \\
















 wx.setClipboardData(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 设置系统剪贴板的内容。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | data       | String     | 是     | 需要设置的内容                                     |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.setClipboardData({
       data: 'data',
       success: function(res) {
         wx.getClipboardData({
           success: function(res) {
             console.log(res.data) // data
           }
         })
       }
     })
 #+END_EXAMPLE





 wx.getClipboardData(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取系统剪贴板内容

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数   | 类型     | 说明           |

 | data   | String   | 剪贴板的内容   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getClipboardData({
       success: function(res){
         console.log(res.data)
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html]]

 \\
 \\








