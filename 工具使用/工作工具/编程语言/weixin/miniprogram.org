#+TITLE: 微信小程序简介
#+DESCRIPTION: 微信小程序简介
#+TAGS: 小程序
#+CATEGORIES: 框架使用

* API
** 简介
- wx.on开头的API是监听某个事件发生的API接口，接受一个CALLBACK函数作为参数。当该事件触发时，会调用CALLBACK函数。
- 如未特殊约定，其他API接口都接受一个OBJECT作为参数。
- OBJECT中可以指定success,fail,complete来接收接口调用结果。

| 参数名     | 类型       | 必填   | 说明                                               |
| success    | Function   | 否     | 接口调用成功的回调函数                             |
| fail       | Function   | 否     | 接口调用失败的回调函数                             |
| complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |
** API列表
*** *网络API列表：*
    | API                  | 说明              |
    | [[file:weixinapp-network-request.html][wx.request]]           | 发起网络请求      |
    | [[file:4g8s1q9c.html][wx.uploadFile]]        | 上传文件          |
    | [[file:4g8s1q9c.html#wxdownloadfileobject][wx.downloadFile]]      | 下载文件          |
    | [[file:weixinapp-network-socket.html#wxconnectsocketobject][wx.connectSocket]]     | 创建WebSocket连接 |
    | [[file:weixinapp-network-socket.html#wxonsocketopencallback][wx.onSocketOpen]]      | 监听WebSocket打开 |
    | [[file:weixinapp-network-socket.html#wxonsocketerrorcallback][wx.onSocketError]]     | 监听WebSocket错误 |
    | [[file:weixinapp-network-socket.html#wxsendsocketmessageobject][wx.sendSocketMessage]] | 发送WebSocket消息 |
    | [[file:weixinapp-network-socket.html#wxonsocketmessagecallback][wx.onSocketMessage]]   | 接受WebSocket消息 |
    | [[file:weixinapp-network-socket.html#wxclosesocket][wx.closeSocket]]       | 关闭WebSocket连接 |
    | [[file:weixinapp-network-socket.html#wxonsocketclosecallback][wx.onSocketClose]]     | 监听WebSocket关闭 |
*** *媒体API列表：*

    | API                                                                                                                      | 说明                       |

    | [[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]                                                | 从相册选择图片，或者拍照   |
    | [[file:weixinapp-media-picture.html#wxpreviewimageobject][wx.previewImage]]                                              | 预览图片                   |
    | [[file:weixinapp-media-record.html#wxstartrecordobject][wx.startRecord]]                                                 | 开始录音                   |
    | [[file:weixinapp-media-record.html#wxstoprecord][wx.stopRecord]]                                                         | 结束录音                   |
    | [[file:weixinapp-media-voice.html#wxplayvoice][wx.playVoice]]                                                            | 播放语音                   |
    | [[file:weixinapp-media-voice.html#wxpausevoice][wx.pauseVoice]]                                                          | 暂停播放语音               |
    | [[file:weixinapp-media-voice.html#wxstopvoice][wx.stopVoice]]                                                            | 结束播放语音               |
    | [[file:weixinapp-media-background-audio.html#wxgetbackgroundaudioplayerstateobject][wx.getBackgroundAudioPlayerState]]   | 获取音乐播放状态           |
    | [[file:weixinapp-media-background-audio.html#wxplaybackgroundaudioobject][wx.playBackgroundAudio]]                       | 播放音乐                   |
    | [[file:weixinapp-media-background-audio.html#wxpausebackgroundaudio][wx.pauseBackgroundAudio]]                           | 暂停播放音乐               |
    | [[file:weixinapp-media-background-audio.html#wxseekbackgroundaudioobject][wx.seekBackgroundAudio]]                       | 控制音乐播放进度           |
    | [[file:weixinapp-media-background-audio.html#wxstopbackgroundaudio][wx.stopBackgroundAudio]]                             | 停止播放音乐               |
    | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudioplaycallback][wx.onBackgroundAudioPlay]]                 | 监听音乐开始播放           |
    | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiopausecallback][wx.onBackgroundAudioPause]]               | 监听音乐暂停               |
    | [[file:weixinapp-media-background-audio.html#wxonbackgroundaudiostopcallback][wx.onBackgroundAudioStop]]                 | 监听音乐结束               |
    | [[file:weixinapp-media-video.html][wx.chooseVideo]]                                                                      | 从相册选择视频，或者拍摄   |
*** *文件 API 列表：*

    | API                                                                                                     | 说明                   |

    | [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]                                    | 保存文件               |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfilelistobject][wx.getSavedFileList]]   | 获取已保存的文件列表   |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxgetsavedfileinfoobject][wx.getSavedFileInfo]]   | 获取已保存的文件信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxremovesavedfileobject][wx.removeSavedFile]]     | 删除已保存的文件信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-file.html#wxopendocumentobject][wx.openDocument]]           | 打开文件               |
*** *数据 API 列表：*

    | API                                                                                                       | 说明                     |

    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageobject][wx.getStorage]]              | 获取本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstoragesynckey][wx.getStorageSync]]         | 获取本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstorageobject][wx.setStorage]]              | 设置本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxsetstoragesynckeydata][wx.setStorageSync]]     | 设置本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfoobject][wx.getStorageInfo]]      | 获取本地缓存的相关信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxgetstorageinfosync][wx.getStorageInfoSync]]    | 获取本地缓存的相关信息   |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestorageobject][wx.removeStorage]]        | 删除本地缓存内容         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxremovestoragesynckey][wx.removeStorageSync]]   | 删除本地缓存内容         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstorage][wx.clearStorage]]                | 清理本地数据缓存         |
    | [[http://caibaojian.com/weixinapp/weixinapp-apidate.html#wxclearstoragesync][wx.clearStorageSync]]        | 清理本地数据缓存         |
*** *位置 API 列表：*

    | API                                                                                                     | 说明               |

    | [[http://caibaojian.com/weixinapp/weixinapp-location.html][wx.getLocation]]                             | 获取当前位置       |
    | [[http://caibaojian.com/weixinapp/weixinapp-location.html#wxchooselocationobject][wx.chooseLocation]]   | 打开地图选择位置   |
    | [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][wx.openLocation]]                        | 打开内置地图       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-map.html][wx.createMapContext]]                         | 地图组件控制       |
*** *设备 API 列表：*

    | API                                                                                                                       | 说明                 |

    | [[http://caibaojian.com/weixinapp/weixinapp-api-device.html][wx.getNetworkType]]                                          | 获取网络类型         |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-device.html#wxonnetworkstatuschangecallback][wx.onNetworkStatusChange]]   | 监听网络状态变化     |
    | [[http://caibaojian.com/weixinapp/weixinapp-device.html][wx.getSystemInfo]]                                               | 获取系统信息         |
    | [[http://caibaojian.com/weixinapp/weixinapp-device.html#wxgetsysteminfosync][wx.getSystemInfoSync]]                       | 获取系统信息         |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html][wx.onAccelerometerChange]]                            | 监听加速度数据       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstartaccelerometerobject][wx.startAccelerometer]]    | 开始监听加速度数据   |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html#wxstopaccelerometerobject][wx.stopAccelerometer]]      | 停止监听加速度数据   |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html][wx.onCompassChange]]                                        | 监听罗盘数据         |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstartcompassobject][wx.startCompass]]                      | 开始监听罗盘数据     |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html#wxstopcompassobject][wx.stopCompass]]                        | 停止监听罗盘数据     |
    | [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html][wx.setClipboardData]]                                         | 设置剪贴板内容       |
    | [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html#wxgetclipboarddataobject][wx.getClipboardData]]                | 获取剪贴板内容       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html][wx.makePhoneCall]]                                        | 拨打电话             |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html][wx.scanCode]]                                              | 扫码                 |
*** *界面 API 列表：*

    | API                                                                                                             | 说明                 |

    | [[http://caibaojian.com/weixinapp/weixinapp-react.html][wx.showToast]]                                          | 显示提示框           |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowloadingobject][wx.showLoading]]                    | 显示加载提示框       |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxhidetoast][wx.hideToast]]                              | 隐藏提示框           |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#loentarget][wx.hideLoading]]                             | 隐藏提示框           |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowmodalobject][wx.showModal]]                        | 显示模态弹窗         |
    | [[http://caibaojian.com/weixinapp/weixinapp-react.html#wxshowactionsheetobject][wx.showActionSheet]]            | 显示菜单列表         |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui.html][wx.setNavigationBarTitle]]                                 | 设置当前页面标题     |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxshownavigationbarloading][wx.showNavigationBarLoading]]   | 显示导航条加载动画   |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui.html#wxhidenavigationbarloading][wx.hideNavigationBarLoading]]   | 隐藏导航条加载动画   |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html][wx.navigateTo]]                                   | 新窗口打开页面       |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxredirecttoobject][wx.redirectTo]]                | 原窗口打开页面       |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxswitchtabobject][wx.switchTab]]                  | 切换到 tabbar 页面   |
    | [[http://caibaojian.com/weixinapp/weixinapp-ui-navigate.html#wxnavigateback][wx.navigateBack]]                  | 退回上一个页面       |
    | [[http://caibaojian.com/weixinapp/tcga1qcz.html][wx.createAnimation]]                                           | 动画                 |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-context.html][wx.createCanvasContext]]                   | 创建绘图上下文       |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-canvas-drawcanvas.html][wx.drawCanvas]]                         | 绘图                 |
    | [[http://caibaojian.com/weixinapp/weixinapp-api-pulldown.html#wxstoppulldownrefresh][wx.stopPullDownRefresh]]   | 停止下拉刷新动画     |
*** *WXML节点信息 API 列表：*

    | API                                                                                                                                  | 说明                     |

    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html][wx.createSelectorQuery]]                                           | 创建查询请求             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectselector][selectorQuery.select]]                 | 根据选择器选择单个节点   |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectallselector][selectorQuery.selectAll]]           | 根据选择器选择全部节点   |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryselectviewport][selectorQuery.selectViewport]]         | 选择显示区域             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefboundingclientrectcallback][nodesRef.boundingClientRect]]   | 获取布局位置和尺寸       |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesrefscrolloffsetcallback][nodesRef.scrollOffset]]               | 获取滚动位置             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#nodesreffieldsfieldscallback][nodesRef.fields]]                     | 获取任意字段             |
    | [[http://caibaojian.com/weixinapp/weixinapp-wxml-nodes-info.html#selectorqueryexeccallback][selectorQuery.exec]]                     | 执行查询请求             |
*** *开放接口：*
 | API                                                                                     | 说明               |

 | [[http://caibaojian.com/weixinapp/weixinapp-api-login.html][wx.login]]                  | 登录               |
 | [[http://caibaojian.com/weixinapp/weixinapp-open.html][wx.getUserInfo]]                 | 获取用户信息       |
 | [[http://caibaojian.com/weixinapp/weixinapp-address.html][wx.chooseAddress]]            | 获取用户收货地址   |
 | [[http://caibaojian.com/weixinapp/uvq81qdh.html][wx.requestPayment]]                    | 发起微信支付       |
 | [[http://caibaojian.com/weixinapp/weixinapp-card.html][wx.addCard]]                     | 添加卡券           |
 | [[http://caibaojian.com/weixinapp/weixinapp-card.html#wxopencardobject][wx.openCard]]   | 打开卡券           |
 每个微信小程序需要事先设置一个通讯域名，小程序可以跟指定的域名与进行网络通信。包括普通
 HTTPS 请求（wx.request）、 WebSocket
 通信（wx.connectSocket）、上传文件（wx.uploadFile）和下载文件（wx.downloadFile)。
** 网络 
*** wx.request(OBJECT)
 *OBJECT参数说明：*\\

 | 参数名     | 类型             | 必填   | 说明                                                                              |

 | url        | String           | 是     | 开发者服务器接口地址                                                              |
 | data       | Object、String   | 否     | 请求的参数                                                                        |
 | header     | Object           | 否     | 设置请求的 header , header 中不能设置 Referer                                     |
 | method     | String           | 否     | 默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT         |
 | dataType   | String           | 否     | 默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse   |
 | success    | Function         | 否     | 收到开发者服务成功返回的回调函数，res = {data: '开发者服务器返回的内容'}          |
 | fail       | Function         | 否     | 接口调用失败的回调函数                                                            |
 | complete   | Function         | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                  |

 *success返回参数说明：*

 | 参数         | 类型                        | 说明                                      | 最低版本                                                        |

 | data         | Object/String/ArrayBuffer   | 开发者服务器返回的数据                    |                                                                 |
 | statusCode   | Number                      | 开发者服务器返回的 HTTP 状态码            |                                                                 |
 | header       | Object                      | 开发者服务器返回的 HTTP Response Header   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

 *data 数据说明* 最终发送给服务器的数据是 String 类型，如果传入的 data
 不是 String 类型，会被转换成 String 。转换规则如下：\\

 - 对于 header['content-type'] 为 'application/json' 的数据，会对数据进行
   JSON 序列化
 - 对于 header['content-type'] 为 'application/x-www-form-urlencoded'
   的数据，会将数据转换成 query string
   （encodeURIComponent(k)=encodeURIComponent(v)&encodeURIComponent(k)=encodeURIComponent(v)...）

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.request({
       url: 'test.php', //仅为示例，并非真实的接口地址
       data: {
          x: '' ,
          y: ''
       },
       header:{
           "Content-Type":"application/json"
       },
       success: function(res) {
          console.log(res.data)
       }
     })
 #+END_EXAMPLE

 **

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个=requestTask=对象，通过=requestTask=，可中断请求任务。

 *requestTask 对象的方法列表：*

 | 方法    | 参数   | 说明           | 最低版本                                                        |

 | abort   |        | 中断请求任务   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     const requestTask = wx.request({
       url: 'test.php', //仅为示例，并非真实的接口地址
       data: {
          x: '' ,
          y: ''
       },
       header: {
           'content-type': 'application/json'
       },
       success: function(res) {
         console.log(res.data)
       }
     })

     requestTask.abort() // 取消请求任务
 #+END_EXAMPLE

*** wx.uploadFile(OBJECT)
 将本地资源上传到开发者服务器。如页面通过
 [[file:weixinapp-media-picture.html#wxchooseimageobject][wx.chooseImage]]
 等接口获取到一个本地资源的临时文件路径后，可通过此接口将本地资源上传到指定服务器。客户端发起一个HTTPS
 POST请求，其中=Content-Type=为=multipart/form-data=。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                  |

 | url        | String     | 是     | 开发者服务器url                                                       |
 | filePath   | String     | 是     | 要上传文件资源的路径                                                  |
 | name       | String     | 是     | 文件对应的key , 开发者在服务器端通过这个key可以获取到文件二进制内容   |
 | header     | Object     | 否     | HTTP 请求 Header，header中不能设置Referer                             |
 | formData   | Object     | 否     | HTTP 请求中其他额外的form data                                        |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

 *success返回参数说明：*

 | 参数         | 类型     | 说明                     |

 | data         | String   | 开发者服务器返回的数据   |
 | statusCode   | Number   | HTTP状态码               |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.chooseImage({
       success:function(res){
         var tempFilePaths = res.tempFilePaths
         wx.uploadFile({
           url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
           filePath: tempFilePaths[0],
           name:"file",
           formData:{
             "user":"test"
           }      success: function(res){        var data = res.data        //do something      }
         })
       }
     })
 #+END_EXAMPLE

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个=uploadTask=对象，通过=uploadTask=，可监听上传进度变化事件，以及取消上传任务。

**** uploadTask
  *uploadTask 对象的方法列表：*

  | 方法               | 参数       | 说明               | 最低版本                                                        |

  | onProgressUpdate   | callback   | 监听上传进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
  | abort              |            | 中断上传任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

  *onProgressUpdate 返回参数说明：*

  | 参数                       | 类型     | 说明                                   |

  | progress                   | Number   | 上传进度百分比                         |
  | totalBytesSent             | Number   | 已经上传的数据长度，单位 Bytes         |
  | totalBytesExpectedToSend   | Number   | 预期需要上传的数据总长度，单位 Bytes   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      const uploadTask = wx.uploadFile({
          url: 'http://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址
          filePath: tempFilePaths[0],
          name: 'file',
          formData:{
              'user': 'test'
          },
          success: function(res){
              var data = res.data
              //do something
          }
      })

      uploadTask.onProgressUpdate((res) => {
          console.log('上传进度', res.progress)
          console.log('已经上传的数据长度', res.totalBytesSent)
          console.log('预期需要上传的数据总长度', res.totalBytesExpectedToSend)
      })

      uploadTask.abort() // 取消上传任务
  #+END_EXAMPLE

*** wx.downloadFile(OBJECT)
   
 
  
   



 下载文件资源到本地。客户端直接发起一个HTTP
 GET请求，返回文件的本地临时路径。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 必填                                                                            |

 | url        | String     | 是     | 下载资源的 url                                                                  |
 | header     | Object     | 否     | HTTP 请求 Header                                                                |
 | success    | Function   | 否     | 下载成功后以 tempFilePath 的形式传给页面，res={tempFilePath:'文件的临时路径'}   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                          |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
 [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

 *示例代码:*

 #+BEGIN_EXAMPLE
     wx.downloadFile({
       url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
       success: function(res) {
         wx.playVoice({
           filePath: res.tempFilePath
         })
       }
     })
 #+END_EXAMPLE

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.4.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个=downloadTask=对象，通过=downloadTask=，可监听下载进度变化事件，以及取消下载任务。

**** downloadTask
   
  
   

  *downloadTask 对象的方法列表：*

  | 方法               | 参数       | 说明               | 最低版本                                                        |

  | onProgressUpdate   | callback   | 监听下载进度变化   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
  | abort              |            | 中断下载任务       | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

  *onProgressUpdate 返回参数说明：*

  | 参数                        | 类型     | 说明                                   |

  | progress                    | Number   | 下载进度百分比                         |
  | totalBytesWritten           | Number   | 已经下载的数据长度，单位 Bytes         |
  | totalBytesExpectedToWrite   | Number   | 预期需要下载的数据总长度，单位 Bytes   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      const downloadTask = wx.downloadFile({
          url: 'http://example.com/audio/123', //仅为示例，并非真实的资源
          success: function(res) {
              wx.playVoice({
                  filePath: res.tempFilePath
              })
          }
      })

      downloadTask.onProgressUpdate((res) => {
          console.log('下载进度', res.progress)
          console.log('已经下载的数据长度', res.totalBytesWritten)
          console.log('预期需要下载的数据总长度', res.totalBytesExpectedToWrite)
      })

      downloadTask.abort() // 取消下载任务
  #+END_EXAMPLE

*** wx.connectSocket(OBJECT)
 创建一个
 [[https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket][WebSocket]]
 连接；*一个微信小程序同时只能有一个 WebSocket 连接，如果当前已存在一个
 WebSocket 连接，会自动关闭该连接，并重新创建一个 WebSocket 连接。*

 *OBJECT参数说明：*

 | 参数        | 类型          | 必填   | 说明                                                                        | 最低版本                                                        |

 | url         | String        | 是     | 开发者服务器接口地址，必须是 wss 协议，且域名必须是后台配置的合法域名       |                                                                 |
 | data        | Object        | 否     | 请求的数据                                                                  |                                                                 |
 | header      | Object        | 否     | HTTP Header , header 中不能设置 Referer                                     |                                                                 |
 | method      | String        | 否     | 默认是GET，有效值： OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT   |                                                                 |
 | protocols   | StringArray   | 否     | 子协议数组                                                                  | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | success     | Function      | 否     | 接口调用成功的回调函数                                                      |                                                                 |
 | fail        | Function      | 否     | 接口调用失败的回调函数                                                      |                                                                 |
 | complete    | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                            |                                                                 |

 \\
 *示例代码：*
 #+BEGIN_EXAMPLE
     wx.connectSocket({  
       url: 'test.php',
       data:{
         x: '',
         y: ''
       },
       header:{ 
         'content-type': 'application/json'
       },  protocols: ['protocol1'],
       method:"GET"
     })
 #+END_EXAMPLE

*** wx.onSocketOpen(CALLBACK)
 监听WebSocket连接打开事件。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })
     wx.onSocketOpen(function(res) {
       console.log('WebSocket连接已打开！')
     })
 #+END_EXAMPLE

*** wx.onSocketError(CALLBACK)
 监听WebSocket错误。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })
     wx.onSocketOpen(function(res){
       console.log('WebSocket连接已打开！')
     })
     wx.onSocketError(function(res){
       console.log('WebSocket连接打开失败，请检查！')
     })
 #+END_EXAMPLE

*** wx.sendSocketMessage(OBJECT)
 通过 WebSocket 连接发送数据，需要先
 [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][wx.connectSocket]]，并在
 [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxonsocketopencallback][wx.onSocketOpen]]
 回调之后才能发送。

 *OBJECT参数说明：*

 | 参数       | 类型                 | 必填   | 说明                                               |

 | data       | String/ArrayBuffer   | 是     | 需要发送的内容                                     |
 | success    | Function             | 否     | 接口调用成功的回调函数                             |
 | fail       | Function             | 否     | 接口调用失败的回调函数                             |
 | complete   | Function             | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     var socketOpen = false
     var socketMsgQueue = []
     wx.connectSocket({
       url: 'test.php'
     })

     wx.onSocketOpen(function(res) {
       socketOpen = true
       for (var i = 0; i < socketMsgQueue.length; i++){
          sendSocketMessage(socketMsgQueue[i])
       }
       socketMsgQueue = []
     })

     function sendSocketMessage(msg) {
       if (socketOpen) {
         wx.sendSocketMessage({
           data:msg
         })
       } else {
          socketMsgQueue.push(msg)
       }
     }
 #+END_EXAMPLE

 \\
*** wx.onSocketMessage(CALLBACK)
 监听WebSocket接受到服务器的消息事件。

 *CALLBACK返回参数：*

 | 参数   | 类型                 | 说明               |

 | data   | String/ArrayBuffer   | 服务器返回的消息   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })

     wx.onSocketMessage(function(res) {
       console.log('收到服务器内容：' + res.data)
     })
 #+END_EXAMPLE

 \\
*** wx.closeSocket(OBJECT)
   
 
  
   



 关闭WebSocket连接。

 | 参数       | 类型       | 必填   | 说明                                                                                                                  | 最低版本                                                        |

 | code       | Number     | 否     | 一个数字值表示关闭连接的状态号，表示连接被关闭的原因。如果这个参数没有被指定，默认的取值是1000 （表示正常连接关闭）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | reason     | String     | 否     | 一个可读的字符串，表示连接被关闭的原因。这个字符串必须是不长于123字节的UTF-8 文本（不是字符）                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                                                                |                                                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                                                                |                                                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                                      |                                                                 |

 \\
*** wx.onSocketClose(CALLBACK)
   
 
  
   



 监听WebSocket关闭。

 #+BEGIN_EXAMPLE
     wx.connectSocket({
       url: 'test.php'
     })

     //注意这里有时序问题，
     //如果 wx.connectSocket 还没回调 wx.onSocketOpen，而先调用 wx.closeSocket，那么就做不到关闭 WebSocket 的目的。
     //必须在 WebSocket 打开期间调用 wx.closeSocket 才能关闭。
     wx.onSocketOpen(function() {
       wx.closeSocket()
     })

     wx.onSocketClose(function(res) {
       console.log('WebSocket 已关闭！')
     })
 #+END_EXAMPLE

 *返回值：*

 #+BEGIN_QUOTE
   基础库 1.7.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 返回一个 SocketTask。

*** SocketTask
    WebSocket任务，可通过[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_72/weixinapp-network-socket.xhtml#wxconnectsocketobject][ wx.connectSocket() ]]接口创建返回。
** 图片   
*** wx.chooseImage(OBJECT)
   
 
  
   



 从本地相册选择图片或使用相机拍照。

 *OBJECT参数说明：*

 | 参数         | 类型          | 必填   | 说明                                                |

 | count        | Number        | 否     | 最多可以选择的图片张数，默认9                       |
 | sizeType     | StringArray   | 否     | "original"原图，"compressed"压缩图，默认二者都有    |
 | sourceType   | StringArray   | 否     | "album"从相册选图，"camera"使用相机，默认二者都由   |
 | success      | Function      | 是     | 成功则返回图片的本地文件路径列表tempFilePaths       |
 | fail         | Function      | 否     | 接口调用失败的回调函数                              |
 | complete     | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
 [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

 *success返回参数说明：*

 | 参数            | 类型          | 说明                                         | 最低版本                                                        |

 | tempFilePaths   | StringArray   | 图片的本地文件路径列表                       |                                                                 |
 | tempFiles       | ObjectArray   | 图片的本地文件列表，每一项是一个 File 对象   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

 *File 对象结构如下:*

 | 字段   | 类型     | 说明                    |

 | path   | String   | 本地文件路径            |
 | size   | Number   | 本地文件大小，单位：B   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.chooseImage({
         count: 1, // 默认9
         sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
         sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
         success: function (res) {
               // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
             var tempFilePaths = res.tempFilePaths
         }
     })
 #+END_EXAMPLE

*** wx.previewImage(OBJECT)
   
 
  
   



 预览图片。

 *OBJECT参数说明：*

 | 参数       | 类型          | 必填   | 说明                                               |

 | current    | String        | 否     | 当前显示图片的链接，不填则默认为urls的第一张       |
 | urls       | StringArray   | 是     | 需要预览的图片链接列表                             |
 | success    | Function      | 否     | 接口调用成功的回调函数                             |
 | fail       | Function      | 否     | 接口调用失败的回调函数                             |
 | complete   | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.previewImage({
         current: '', // 当前显示图片的http链接
         urls: [] // 需要预览的图片http链接列表
     })
 #+END_EXAMPLE





 wx.getImageInfo(OBJECT)




   </h2>


 获取图片信息。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                   |

 | src        | String     | 是     | 图片的路径，可以是相对路径，临时文件路径，存储文件路径，网络图片路径   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                       |

 *success返回参数说明：*

 | 参数     | 类型     | 说明                 |

 | width    | Number   | 图片宽度，单位px     |
 | height   | Number   | 图片高度 单位px      |
 | path     | String   | 返回图片的本地路径   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getImageInfo({
       src: 'images/a.jpg',
       success: function (res) {
         console.log(res.width)
         console.log(res.height)
       }
     })

     wx.chooseImage({
       success: function (res) {
         wx.getImageInfo({
           src: res.tempFilePaths[0],
           success: function (res) {
             console.log(res.width)
             console.log(res.height)
           }
         })
       }
     })
 #+END_EXAMPLE

*** wx.saveImageToPhotosAlbum(OBJECT)
   
  
   

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 保存图片到系统相册，需要用户授权（scope.writePhotosAlbum），详见
 [[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                                                       |

 | filePath   | String     | 是     | 图片文件路径，可以是临时文件路径也可以是永久文件路径，不支持网络图片路径   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                     |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                     |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                           |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明       |
 |----------+----------+------------|
 | errMsg   | String   | 调用结果   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.saveImageToPhotosAlbum({
         success(res) {
         }
     })
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-media-picture.html]]

 \\
 \\








** 录音
*** wx.startRecord(OBJECT)
  
 开始录音。当主动调用wx.stopRecord，或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。当用户离开小程序时，此接口无法调用。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                                  |

 | success    | Function   | 否     | 录音成功后调用，返回录音文件的临时文件路径，res={tempFilePath:"录音文件的临时路径"}   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                                |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                      |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用[[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*

 *success返回参数说明：*

 | 参数           | 说明                 |

 | tempFilePath   | 录音文件的临时路径   |

 \\
*** wx.stopRecord()
   
 
  
   



 主动调用停止录音。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.starRecord({
       success:function(res){
          var tempFilePath = res.tempFilePath
       },
       fail:function(res){
          //录音失败
       }
     })
     setTimeout(function(){  
       //结束录音  
       wx.stopRecord()
     },10000)
 #+END_EXAMPLE

*** wx.playVoice(OBJECT)
   
 
  
   



 开始播放语音，同时只允许一个语音文件正在播放，如果前一个语音文件还没播放完，将中断前一个语音播放。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | filePath   | String     | 是     | 需要播放的语音文件的文件路径                       |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startRecord({
       success:function(res){
         var tempFilePath = res.tempFilePath
         wx.playVoice({
           filePath:tempFilePath,
           complete:function(){
           } 
         })
       }
     })
 #+END_EXAMPLE

*** wx.pauseVoice()
   
 
  
   



 暂停正在播放的语音。再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。如果想从头开始播放，需要先调用wx.stopVoice。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startRecord({
       success:function(res){
         var tempFilePath = res.tempFilePath
           wx.playVoice({
           filePath: tempFilePath
         })

         setTimeout(function(){
             //暂停播放
           wx.pauseVoice()
         },5000)
       }
     })
 #+END_EXAMPLE

*** wx.stopVoice()
   
 
  
   



 结束播放语音。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startRecord({
       success:function(res){
         var tempFilePath = res.tempFilePath
         wx.playVoice({
           filePath:tempFilePath
         })

         setTimeout(function(){
           wx.stopVoice()
         },5000)
       }
     })
 #+END_EXAMPLE









*** wx.getBackgroundAudioPlayerState(OBJECT)
   
 
  
   



 获取音乐播放状态。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 \\
 *success返回参数说明：*

 | 参数              | 说明                                                              |

 | duration          | 选定音频的长度（单位：s），只有在当前有音乐播放时返回             |
 | currentPosition   | 选定音频的播放位置（单位：s），只有在当前有音乐播放时返回         |
 | status            | 播放状态（2：没有音乐在播放，1：播放中，0：暂停中）               |
 | downloadPercent   | 音频的下载进度（整数，80 代表 80%），只有在当前有音乐播放时返回   |
 | dataUrl           | 歌曲数据链接，只有在当前有音乐播放时返回                          |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getBackgroundAudioPlayerState({
         success:function(res){
             var status = res.status
             var dataUrl = res.dataUrl
             var currentPosition = res.currentPosition
             var duration = res.duration
             var downloadPercent = res.downloadPercent
         }
     })
 #+END_EXAMPLE

*** wx.playBackgroundAudio(OBJECT)
   
 
  
   



 使用后台播放器播放音乐，对于微信客户端来说，只能同时有一个后台音乐在播放。当用户离开小程序后，音乐将暂停播放；当用户点击“显示在聊天顶部”时，音乐不会暂停播放；当用户在其他小程序占用了音乐播放器，原有小程序内的音乐将停止播放。

 *OBJECT参数说明*

 | 参数          | 类型       | 必填   | 说明                                               |

 | dataUrl       | String     | 是     | 音乐链接                                           |
 | title         | String     | 否     | 音乐标题                                           |
 | coverImgUrl   | String     | 否     | 封面URL                                            |
 | success       | Function   | 否     | 接口调用成功的回调函数                             |
 | fail          | Function   | 否     | 接口调用失败的回调函数                             |
 | complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码*\\

 #+BEGIN_EXAMPLE
     wx.playBackgroundAudio({
         dataUrl: '',
         title: '',
         coverImgUrl: ''
     })
 #+END_EXAMPLE

*** wx.pauseBackgroundAudio()
   
 
  
   



 暂停播放音乐。

 *示例代码*

 #+BEGIN_EXAMPLE
     wx.pauseBackgroundAudio()
 #+END_EXAMPLE

*** wx.seekBackgroundAudio(OBJECT)
   
 
  
   



 控制音乐播放进度。

 *OBJECT参数说明*

 | 参数       | 类型       | 必填   | 说明                                               |

 | position   | Number     | 是     | 音乐位置，单位：秒                                 |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码*\\

 #+BEGIN_EXAMPLE
     wx.seekBackgroundAudio({
         position: 30
     })
 #+END_EXAMPLE

*** wx.stopBackgroundAudio()
   
 
  
   



 停止播放音乐。

 *示例代码*

 #+BEGIN_EXAMPLE
     wx.stopBackgroundAudio()
 #+END_EXAMPLE

*** wx.onBackgroundAudioPlay(CALLBACK)
   
 
  
   



 监听音乐播放。

*** wx.onBackgroundAudioPause(CALLBACK)
   
 
  
   



 监听音乐暂停。

*** wx.onBackgroundAudioStop(CALLBACK)
   
 
  
   



 监听音乐停止。

 \\

*** wx.getBackgroundAudioManager()
   
  
   

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取*全局唯一*的背景音频管理器=backgroundAudioManager=

*** backgroundAudioManager
   
  
   

 *backgroundAudioManager 对象的属性列表：*

 | 属性          | 类型      | 说明                                                                                                        | 只读   |

 | duration      | Number    | 当前音频的长度（单位：s），只有在当前有合法的 src 时返回                                                    | 是     |
 | currentTime   | Number    | 当前音频的播放位置（单位：s），只有在当前有合法的 src 时返回                                                | 是     |
 | paused        | Boolean   | 当前是是否暂停或停止状态，true 表示暂停或停止，false 表示正在播放                                           | 是     |
 | src           | String    | 音频的数据源，默认为空字符串，*当设置了新的 src 时，会自动开始播放* ，目前支持的格式有 m4a, aac, mp3, wav   | 否     |
 | startTime     | Number    | 音频开始播放的位置（单位：s）                                                                               | 否     |
 | buffered      | Number    | 音频缓冲的时间点，仅保证当前播放时间点到此时间点内容已缓冲。                                                | 是     |
 | title         | String    | 音频标题，用于做原生音频播放器音频标题。原生音频播放器中的分享功能，分享出去的卡片标题，也将使用该值。      | 否     |
 | epname        | String    | 专辑名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
 | singer        | String    | 歌手名，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                      | 否     |
 | coverImgUrl   | String    | 封面图url，用于做原生音频播放器背景图。原生音频播放器中的分享功能，分享出去的卡片配图及背景也将使用该图。   | 否     |
 | webUrl        | String    | 页面链接，原生音频播放器中的分享功能，分享出去的卡片简介，也将使用该值。                                    | 否     |

 *backgroundAudioManager 对象的方法列表：*

 | 方法           | 参数       | 说明                                                         |

 | play           |            | 播放                                                         |
 | pause          |            | 暂停                                                         |
 | stop           |            | 停止                                                         |
 | seek           | position   | 跳转到指定位置，单位 s                                       |
 | onCanplay      | callback   | 背景音频进入可以播放状态，但不保证后面可以流畅播放           |
 | onPlay         | callback   | 背景音频播放事件                                             |
 | onPause        | callback   | 背景音频暂停事件                                             |
 | onStop         | callback   | 背景音频停止事件                                             |
 | onEnded        | callback   | 背景音频自然播放结束事件                                     |
 | onTimeUpdate   | callback   | 背景音频播放进度更新事件                                     |
 | onPrev         | callback   | 用户在系统音乐播放面板点击上一曲事件（iOS only）             |
 | onNext         | callback   | 用户在系统音乐播放面板点击下一曲事件（iOS only）             |
 | onError        | callback   | 背景音频播放错误事件                                         |
 | onWaiting      | callback   | 音频加载中事件，当音频因为数据不足，需要停下来加载时会触发   |

 *errcode 说明*

 | errCode   | 说明       |
 |-----------+------------|
 | 10001     | 系统错误   |
 | 10002     | 网络错误   |
 | 10003     | 文件错误   |
 | 10004     | 格式错误   |
 | -1        | 未知错误   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     const backgroundAudioManager = wx.getBackgroundAudioManager()

     backgroundAudioManager.title = '此时此刻'
     backgroundAudioManager.epname = '此时此刻'
     backgroundAudioManager.singer = '汪峰'
     backgroundAudioManager.coverImgUrl = 'http://y.gtimg.cn/music/photo_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000'
     backgroundAudioManager.src = 'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E061FF02C31F716658E5C81F5594D561F2E88B854E81CAAB7806D5E4F103E55D33C16F3FAC506D1AB172DE8600B37E43FAD&fromtag=46' // 设置了 src 之后会自动播放 
 #+END_EXAMPLE

 wx.createAudioContext(audioId)
 创建并返回 audio 上下文=audioContext=对象

*** *audioContext*
   
  
   

 =audioContext=通过 audioId 跟一个 audio 组件绑定，通过它可以操作一个
 audio 组件。

 *audioContext对象的方法列表：*

 | 方法     | 参数       | 说明                     |

 | setSrc   | src        | 音频的地址               |
 | play     | 无         | 播放                     |
 | pause    | 无         | 暂停                     |
 | seek     | position   | 跳转到指定位置，单位 s   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     <!-- audio.wxml --><audio  src="{{src}}" id="myAudio" ></audio>

     <button type="primary" bindtap="audioPlay">播放</button>
     <button type="primary" bindtap="audioPause">暂停</button>
     <button type="primary" bindtap="audio14">设置当前播放时间为14秒</button>
     <button type="primary" bindtap="audioStart">回到开头</button>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // audio.js
     Page({
       onReady: function (e) {
         // 使用 wx.createAudioContext 获取 audio 上下文 context
         this.audioCtx = wx.createAudioContext('myAudio')    this.audioCtx.setSrc('http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&fromtag=46')
         this.audioCtx.play()
       },
       data: {    src: ''
       },
       audioPlay: function () {
         this.audioCtx.play()
       },
       audioPause: function () {
         this.audioCtx.pause()
       },
       audio14: function () {
         this.audioCtx.seek(14)
       },
       audioStart: function () {
         this.audioCtx.seek(0)
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-audio.html]]

 \\
 \\










** 视频
*** wx.chooseVideo(OBJECT)
 拍摄视频或从手机相册中选视频，返回视频的临时文件路径。

 *OBJECT参数说明：*

 | 参数          | 类型          | 必填   | 说明                                                                     |

 | sourceType    | StringArray   | 否     | "album"从相册选视频，"camera"使用相机拍摄，默认为：['album', 'camera']   |
 | maxDuration   | Number        | 否     | 拍摄视频最长拍摄时间，单位秒。最长支持60秒                               |
 | camera        | String        | 否     | 默认调起的为前置还是后置摄像头。front: 前置，back: 后置，默认 back       |
 | success       | Function      | 否     | 接口调用成功，返回视频文件的临时文件路径，详见返回参数说明               |
 | fail          | Function      | 否     | 接口调用失败的回调函数                                                   |
 | complete      | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                         |

 *success返回参数说明：*

 | 参数           | 说明                     |

 | tempFilePath   | 选定视频的临时文件路径   |
 | duration       | 选定视频的时间长度       |
 | size           | 选定视频的数据量大小     |
 | height         | 返回选定视频的长         |
 | width          | 返回选定视频的宽         |

 *注：文件的临时路径，在小程序本次启动期间可以正常使用，如需持久保存，需在主动调用
 [[http://caibaojian.com/weixinapp/weixinapp-file.html][wx.saveFile]]，在小程序下次启动时才能访问得到。*\\
 *示例代码：*

 #+BEGIN_EXAMPLE
     <view class="container">
         <video src="{{src}}"></video>
         <button bindtap="bindButtonTap">获取视频</button>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     Page({
         bindButtonTap:function(){
             var that = this
             wx.chooseVideo({
                 sourceType: ['album','camera'],
                 maxDuration:60,
           camera: 'back',
                 success: function(res){
                     that.setData({
                         src:res.tempFilePath
                     })
                 }
             })
         }
     })
 #+END_EXAMPLE

*** wx.saveVideoToPhotosAlbum(OBJECT)
   
  
   

 #+BEGIN_QUOTE
   基础库 1.2.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 保存视频到系统相册，需要用户授权（scope.writePhotosAlbum），详见
 [[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]

 *OBJECT参数说明：*

 | 参数名     | 类型       | 必填   | 说明                                                   |

 | filePath   | String     | 是     | 视频文件路径，可以是临时文件路径也可以是永久文件路径   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）       |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明       |
 |----------+----------+------------|
 | errMsg   | String   | 调用结果   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.saveVideoToPhotosAlbum({
         success(res) {
         }
     })
 #+END_EXAMPLE

*** videoContext
   
  
   

 =videoContext=通过 videoId 跟一个 video 组件绑定，通过它可以操作一个
 video 组件。

 *videoContext对象的方法列表：*

 | 方法                | 参数       | 说明                                              | 最低版本                                                        |

 | play                | 无         | 播放                                              |                                                                 |
 | pause               | 无         | 暂停                                              |                                                                 |
 | seek                | position   | 跳转到指定位置，单位 s                            |                                                                 |
 | sendDanmu           | danmu      | 发送弹幕，danmu 包含两个属性 text, color。        |                                                                 |
 | playbackRate        | rate       | 设置倍速播放，支持的倍率有 0.5/0.8/1.0/1.25/1.5   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | requestFullScreen   | 无         | 进入全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | exitFullScreen      | 无         | 退出全屏                                          | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     <view class="section tc">  <video id="myVideo" src="http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400"   enable-danmu danmu-btn controls></video>
       <view class="btn-area">
         <input bindblur="bindInputBlur"/>
         <button bindtap="bindSendDanmu">发送弹幕</button>
       </view>
     </view>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     function getRandomColor () {
       let rgb = []
       for (let i = 0 ; i < 3; ++i){
         let color = Math.floor(Math.random() * 256).toString(16)
         color = color.length == 1 ? '0' + color : color
         rgb.push(color)
       }
       return '#' + rgb.join('')
     }

     Page({
       onReady: function (res) {
         this.videoContext = wx.createVideoContext('myVideo')
       },
       inputValue: '',
       bindInputBlur: function(e) {
         this.inputValue = e.detail.value
       },
       bindSendDanmu: function () {
         this.videoContext.sendDanmu({
           text: this.inputValue,
           color: getRandomColor()
         })
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-video.html]]

 \\
 \\











*** wx.createCameraContext(this)
   
  
   



 #+BEGIN_QUOTE
   基础库 1.6.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 创建并返回 camera
 上下文 cameraContext 对象，cameraContext 与页面的 camera 组件绑定，一个页面只能有一个camera，通过它可以操作对应的 <camera/> 组件。
 在自定义组件下，第一个参数传入组件实例this，以操作组件内 <camera/> 组件

** 文件
*** wx.saveFile(OBJECT)
    保存文件到本地。

*** wx.getFileInfo(OBJECT)
   获取文件信息

 *OBJECT参数说明：*

 | 参数名            | 类型       | 必填   | 说明                                                |
 | filePath          | String     | 是     | 本地文件路径                                        |
 | digestAlgorithm   | String     | 否     | 计算文件摘要的算法，默认值 md5，有效值：md5，sha1   |
 | success           | Function   | 否     | 接口调用成功的回调函数                              |
 | fail              | Function   | 否     | 接口调用失败的回调函数                              |
 | complete          | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）    |

 *success返回参数说明：*

 | 参数名   | 类型     | 说明                                              |
 | size     | Number   | 文件大小，单位：B                                 |
 | digest   | String   | 按照传入的 digestAlgorithm 计算得出的的文件摘要   |
 | errMsg   | String   | 调用结果                                          |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getFileInfo({
         success(res) {
             console.log(res.size)
             console.log(res.digest)
         }
     })
 #+END_EXAMPLE

*** wx.getSavedFileList(OBJECT)
   
 
  
   



 获取本地已保存的文件列表

**** *OBJECT参数说明：*
    
  
    

 | 参数       | 类型       | 必填   | 说明                                                      |

 | success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                    |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

**** *success返回参数说明：*
    
  
    

 | 参数       | 类型           | 说明           |

 | errMsg     | String         | 接口调用结果   |
 | fileList   | Object Array   | 文件列表       |

**** *fileList中的项目说明：*
    
  
    

 | 键           | 类型     | 说明                                                           |

 | filePath     | String   | 文件的本地路径                                                 |
 | createTime   | Number   | 文件的保存时的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |
 | size         | Number   | 文件大小，单位B                                                |

**** *示例代码：*
    
  
    

 #+BEGIN_EXAMPLE
     wx.getSavedFileList({
       success: function(res) {
         console.log(res.fileList)
       }
     })
 #+END_EXAMPLE

 \\





 wx.getSavedFileInfo(OBJECT)




   </h2>


 获取本地文件的文件信息。此接口只能用于获取已保存到本地的文件，若需要获取临时文件信息，请使用
 [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_82/weixinapp-file.xhtml#wxgetFileInfo][wx.getFileInfo]]
 接口。\\

**** *OBJECT参数说明：*
    
  
    

 | 参数       | 类型       | 必填   | 说明                                                      |

 | filePath   | String     | 是     | 文件路径                                                  |
 | success    | Function   | 否     | 接口调用成功的回调函数，返回结果见=success返回参数说明=   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                    |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）          |

**** *success返回参数说明：*
    
  
    

 | 参数         | 类型     | 说明                                                           |

 | errMsg       | String   | 接口调用结果                                                   |
 | size         | Number   | 文件大小，单位B                                                |
 | createTime   | Number   | 文件的保存是的时间戳，从1970/01/01 08:00:00 到当前时间的秒数   |

**** *示例代码：*
    
  
    

 #+BEGIN_EXAMPLE
     wx.getSavedFileInfo({
       filePath: 'wxfile://somefile', //仅做示例用，非真正的文件路径
       success: function(res) {
         console.log(res.size)
         console.log(res.createTime)
       }
     })
 #+END_EXAMPLE

 \\





 wx.removeSavedFile(OBJECT)




   </h2>


 删除本地存储的文件

**** *OBJECT参数说明：*
    
  
    

 | 参数       | 类型       | 必填   | 说明                                               |

 | filePath   | String     | 是     | 需要删除的文件路径                                 |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

**** *示例代码：*
    
  
    

 #+BEGIN_EXAMPLE
     wx.getSavedFileList({
       success: function(res) {
         if (res.fileList.length > 0){
           wx.removeSavedFile({
             filePath: res.fileList[0].filePath,
             complete: function(res) {
               console.log(res)
             }
           })
         }
       }
     })
 #+END_EXAMPLE

 \\





 wx.openDocument(OBJECT)




   </h2>


 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx

 *OBJECT参数说明：*

 | 参数       | 说明       | 必填   | 说明                                                                          | 最低版本                                                        |

 | filePath   | String     | 是     | 文件路径，可通过 downFile 获得                                                |                                                                 |
 | fileType   | String     | 否     | 文件类型，指定文件类型打开文件，有效值 doc, xls, ppt, pdf, docx, xlsx, pptx   | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | success    | Function   | 否     | 接口调用成功的回调函数                                                        |                                                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                        |                                                                 |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                              |                                                                 |

**** 示例代码
    
  
    

 #+BEGIN_EXAMPLE
     wx.downloadFile({  url: 'http://example.com/somefile.pdf',
       success: function (res) {
         var filePath = res.tempFilePath 
         wx.openDocument({
           filePath: filePath,
           success: function (res) {
             console.log('打开文档成功')
           }
         })
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-file.html]]

 \\
 \\












 每个微信小程序都可以有自己的本地缓存，可以通过wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。同一个微信用户，同一个小程序
 storage 上限为 10MB。localStorage 以用户维度隔离，同一台设备上，A
 用户无法读取到 B 用户的数据。

 *注意：*
 localStorage是永久存储的，但是我们不建议将关键信息全部存在localStorage，以防用户换设备的情况。

*** wx.setStorage(OBJECT)
   
 
  
   



 将数据存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个异步接口。

 *OBJECT参数说明：*

 | 参数       | 类型            | 必填   | 说明                                               |

 | key        | String          | 是     | 本地缓存中的指定的 key                             |
 | data       | Object/String   | 是     | 需要存储的内容                                     |
 | success    | Function        | 否     | 接口调用成功的回调函数                             |
 | fail       | Function        | 否     | 接口调用失败的回调函数                             |
 | complete   | Function        | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码*

 #+BEGIN_EXAMPLE
     wx.setStorage({
       key:"key"
       data:"value"
     })
 #+END_EXAMPLE

*** wx.setStorageSync(KEY,DATA)
   
 
  
   



 将data存储在本地缓存中指定的key中，会覆盖掉原来该key对应的内容，这是一个同步接口。

 *参数说明：*

 | 参数   | 类型            | 必填   | 说明                    |

 | key    | String          | 是     | 本地缓存中的指定的key   |
 | data   | Object/String   | 是     | 需要存储的内容          |

 *示例代码*

 #+BEGIN_EXAMPLE
     try {
        wx.setStorageSync("key","value")
     } catch (e) {
     }
 #+END_EXAMPLE

*** wx.getStorage(OBJECT)
   
 
  
   



 从本地缓存中异步获取指定key对应的内容。

 *OBJECT参数说明：*\\

 | 参数       | 类型       | 必填   | 说明                                               |

 | key        | String     | 是     | 本地缓存中的指定的 key                             |
 | success    | Function   | 是     | 接口调用的回调函数,res = {data: key对应的内容}     |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数   | 类型     | 说明            |

 | data   | String   | key对应的内容   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getStorage({
       key:'key',
       success: function(res){
           console.log(res.data)
       } 
     })
 #+END_EXAMPLE

*** wx.getStorageSync(KEY)
 本地缓存中同步获取指定key对应的内容。

 *参数说明：*

 | 参数   | 类型     | 必填   | 说明                    |

 | key    | String   | 是     | 本地缓存中的指定的key   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var value = wx.getStorageSync('key')
       if (value) {
           // Do something with return value
       }
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE





 wx.getStorageInfo(OBJECT)




   </h2>


 异步获取当前storage的相关信息

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用的回调函数，详见返回参数说明               |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数          | 类型           | 说明                         |

 | keys          | String Array   | 当前storage中所有的key       |
 | currentSize   | Number         | 当前占用的空间大小, 单位kb   |
 | limitSize     | Number         | 限制的空间大小，单位kb       |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getStorageInfo({
       success: function(res) {
         console.log(res.keys)
         console.log(res.currentSize)
         console.log(res.limitSize)
       }
     })
 #+END_EXAMPLE





 wx.getStorageInfoSync




   </h2>


 同步获取当前storage的相关信息

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var res = wx.getStorageInfoSync()
       console.log(res.keys)
       console.log(res.currentSize)
       console.log(res.limitSize)
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE





 wx.removeStorage(OBJECT)




   </h2>


 从本地缓存中异步移除指定 key 。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | key        | String     | 是     | 本地缓存中的指定的 key                             |
 | success    | Function   | 是     | 接口调用的回调函数                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.removeStorage({
       key: 'key',
       success: function(res) {
         console.log(res.data)
       } 
     })
 #+END_EXAMPLE





 wx.removeStorageSync(KEY)




   </h2>


 从本地缓存中同步移除指定 key 。

 *参数说明：*

 | 参数   | 类型     | 必填   | 说明                     |

 | key    | String   | 是     | 本地缓存中的指定的 key   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       wx.removeStorageSync('key')
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE

*** wx.clearStorage()
   

 
   



 清理本地数据缓存。

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.clearStorage()
 #+END_EXAMPLE

*** wx.clearStorageSync()
   

 
   



 同步清理本地数据缓存

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
         wx.clearStorageSync()
     } catch(e) {
       // Do something when catch error
     }
 #+END_EXAMPLE

*** wx.chooseLocation(OBJECT)
   
 
   



 打开地图选择位置。

 需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]] scope.userLocation\\

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                 |

 | success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
 | cancel     | Function   | 否     | 用户取消时调用                                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                               |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

 *success返回参数说明：*

 | 参数        | 说明                                         |

 | name        | 位置名称                                     |
 | address     | 详细地址                                     |
 | latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
 | longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

 \\
 \\




 [[http://caibaojian.com/weixinapp/weixinapp-location.html]]

 \\
 \\










** 定位
*** wx.getLocation(OBJECT)
   获取当前的地理位置、速度。当用户离开小程序后，此接口无法调用；当用户点击“显示在聊天顶部”时，此接口可继续调用。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                                  |

 | type       | String     | 否     | 默认为 wgs84 返回 gps 坐标，gcj02 返回可用于=wx.openLocation=的坐标   |
 | success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。                    |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                      |

 *success返回参数说明：*

 | 参数                 | 说明                                           | 最低版本                                                        |

 | latitude             | 纬度，浮点数，范围为-90~90，负数表示南纬       |                                                                 |
 | longitude            | 经度，浮点数，范围为-180~180，负数表示西经     |                                                                 |
 | speed                | 速度，浮点数，单位m/s                          |                                                                 |
 | accuracy             | 位置的精确度                                   |                                                                 |
 | altitude             | 高度，单位 m                                   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | verticalAccuracy     | 垂直精度，单位 m（Android 无法获取，返回 0）   | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | horizontalAccuracy   | 水平精度，单位 m                               | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getLocation({
       type: 'wgs84',
       success: function(res) {
         var latitude = res.latitude
         var longitude = res.longitude
         var speed = res.speed
         var accuracy = res.accuracy
       }
     })
 #+END_EXAMPLE

*** wx.chooseLocation(OBJECT)
   

 
   



 打开地图选择位置。

 需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
 scope.userLocation

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                                 |

 | success    | Function   | 是     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                               |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |

 *success返回参数说明：*

 | 参数        | 说明                                         |

 | name        | 位置名称                                     |
 | address     | 详细地址                                     |
 | latitude    | 纬度，浮点数，范围为-90~90，负数表示南纬     |
 | longitude   | 经度，浮点数，范围为-180~180，负数表示西经   |

*** wx.openLocation(OBJECT)
   

 
   



 使用微信内置地图查看位置。

 需要[[http://caibaojian.com/weixinapp/weixinapp-cbea28nm.html][用户授权]]
 scope.userLocation

 *OBJECT参数说明：*

 | 参数        | 类型       | 必填   | 说明                                               |

 | latitude    | Float      | 是     | 纬度，范围为-90~90，负数表示南纬                   |
 | longitude   | Float      | 是     | 经度，范围为-180~180，负数表示西经                 |
 | scale       | INT        | 否     | 缩放比例，范围5~18，默认为18                       |
 | name        | String     | 否     | 位置名                                             |
 | address     | String     | 否     | 地址的详细说明                                     |
 | success     | Function   | 否     | 接口调用成功的回调函数                             |
 | fail        | Function   | 否     | 接口调用失败的回调函数                             |
 | complete    | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getLocation({
       type: 'gcj02', //返回可以用于wx.openLocation的经纬度
       success: function(res) {
         var latitude = res.latitude
         var longitude = res.longitude
         wx.openLocation({
           latitude: latitude,
           longitude: longitude,
           scale: 28
         })
       }
     })
 #+END_EXAMPLE

*** wx.createMapContext(mapId)
   

 
   



 创建并返回 map
 上下文 =mapContext= 对象。在自定义组件下，第二个参数传入组件实例this，以操作组件内 =<map/>= 组件\\

 \\

 *mapContext*

 =mapContext=通过 mapId
 跟一个=<map/>=组件绑定，通过它可以操作对应的=<map/>=组件。

 *mapContext 对象的方法列表*

 | 方法                | 参数     | 说明                                                                                                                                           | 最低版本                                                        |

 | getCenterLocation   | OBJECT   | 获取当前地图中心的经纬度，返回的是 gcj02 坐标系，可以用于 [[http://caibaojian.com/weixinapp/weixinapp-openlocation.html][=wx.openLocation=]]   |                                                                 |
 | moveToLocation      | 无       | 将地图中心移动到当前定位点，需要配合map组件的show-location使用                                                                                 |                                                                 |
 | translateMarker     | OBJECT   | 平移marker，带动画                                                                                                                             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | includePoints       | OBJECT   | 缩放视野展示所有经纬度                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | getRegion           | OBJECT   | 获取当前地图的视野范围                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |
 | getScale            | OBJECT   | 获取当前地图的缩放级别                                                                                                                         | [[http://caibaojian.com/weixinapp/compatibility.html][1.4.0]]   |

 *getCenterLocation 的 OBJECT 参数列表*

 | 参数       | 类型       | 必填   | 说明                                                                    |

 | success    | Function   | 否     | 接口调用成功的回调函数 ，res = { longitude: "经度", latitude: "纬度"}   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                  |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                        |

 *translateMarker 的 OBJECT 参数列表*

 | 参数           | 类型       | 必填   | 说明                                             |

 | markerId       | Number     | 是     | 指定marker                                       |
 | destination    | Object     | 是     | 指定marker移动到的目标点                         |
 | autoRotate     | Boolean    | 是     | 移动过程中是否自动旋转marker                     |
 | rotate         | Number     | 是     | marker的旋转角度                                 |
 | duration       | Number     | 否     | 动画持续时长，默认值1000ms，平移与旋转分别计算   |
 | animationEnd   | Function   | 否     | 动画结束回调函数                                 |
 | fail           | Function   | 否     | 接口调用失败的回调函数                           |

 *includePoints 的 OBJECT 参数列表*

 | 参数      | 类型    | 必填   | 说明                                                                                                                                                    |

 | points    | Array   | 是     | 要显示在可视区域内的坐标点列表，[{latitude, longitude}]                                                                                                 |
 | padding   | Array   | 否     | 坐标点形成的矩形边缘到地图边缘的距离，单位像素。格式为[上,右,下,左]，安卓上只能识别数组第一项，上下左右的padding一致。开发者工具暂不支持padding参数。   |

 *getRegion 的 OBJECT 参数列表*

 | 参数       | 类型       | 必填   | 说明                                                                           |

 | success    | Function   | 否     | 接口调用成功的回调函数，res = {southwest, northeast}，西南角与东北角的经纬度   |
 | fail       | Function   | 否     | 接口调用失败的回调函数                                                         |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                               |

 *getScale 的 OBJECT 参数列表*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数，res = {scale}              |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 \\

 *示例代码：*

 **

 #+BEGIN_EXAMPLE
     <!-- map.wxml -->
     <map id="myMap" show-location />

     <button type="primary" bindtap="getCenterLocation">获取位置</button>
     <button type="primary" bindtap="moveToLocation">移动位置</button>
     <button type="primary" bindtap="translateMarker">移动标注</button>
     <button type="primary" bindtap="includePoints">缩放视野展示所有经纬度</button>
 #+END_EXAMPLE

 #+BEGIN_EXAMPLE
     // map.js
     Page({
       onReady: function (e) {
         // 使用 wx.createMapContext 获取 map 上下文
         this.mapCtx = wx.createMapContext('myMap')
       },
       getCenterLocation: function () {
         this.mapCtx.getCenterLocation({
           success: function(res){
             console.log(res.longitude)
             console.log(res.latitude)
           }
         })
       },
       moveToLocation: function () {
         this.mapCtx.moveToLocation()
       },
       translateMarker: function() {
         this.mapCtx.translateMarker({
           markerId: 0,
           autoRotate: true,
           duration: 1000,
           destination: {
             latitude:23.10229,
             longitude:113.3345211,
           },
           animationEnd() {
             console.log('animation end')
           }
         })
       },
       includePoints: function() {
         this.mapCtx.includePoints({
           padding: [10],
           points: [{
             latitude:23.10229,
             longitude:113.3345211,
           }, {
             latitude:23.00229,
             longitude:113.3345211,
           }]
         })
       }
     })
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-map.html]]

 \\
 \\
















 微信小程序API设备概览




   </h2>


 - [[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][系统信息]]------（[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfoobject][wx.getSystemInfo]]、[[http://caibaojian.com/tmp/calibre_4.99.4_tmp_27684y_m/eyzubqm__plumber/feed_0/article_87/weixinapp-o1xc1xz3.xhtml#wxgetsysteminfosync][wx.getSystemInfoSync]]）\\
 - [[file:weixinapp-api-device.html][网络状态]]------（[[file:weixinapp-api-device.html#wxgetnetworktypeobject][wx.getNetworkType]]）\\
 - [[file:weixinapp-api-accelerometer.html][重力感应]]------（[[file:weixinapp-api-accelerometer.html#wxonaccelerometerchangecallback][wx.onAccelerometerChange]]）\\
 - [[file:weixinapp-api-campass.html][罗
   盘]]------（[[file:weixinapp-api-campass.html#wxoncompasschangecallback][wx.onCompassChange]]）\\
 - [[file:weixinapp-api-phonecall.html][拨打电话]]------（[[file:weixinapp-api-phonecall.html#wxmakephonecallobject][wx.makePhoneCall]]）\\
 - [[file:weixinapp-api-scancode.html][扫
   码]]------（[[file:weixinapp-api-scancode.html#wxscancodeobject][wx.scanCode]]）\\

*** wx.getSystemInfo(OBJECT)

 获取系统信息。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用成功的回调                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success回调参数说明：*

 | 属性           | 说明             |

 | model          | 手机型号         |
 | pixelRatio     | 设备像素比       |
 | windowWidth    | 窗口宽度         |
 | windowHeight   | 窗口高度         |
 | language       | 微信设置的语言   |
 | version        | 微信版本号       |
 | system         | 操作系统版本     |
 | platform       | 客户端平台       |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getSystemInfo({
       success: function(res) {
         console.log(res.model)
         console.log(res.pixelRatio)
         console.log(res.windowWidth)
         console.log(res.windowHeight)
         console.log(res.language)
         console.log(res.version)
         console.log(res.platform)
       }
     })
 #+END_EXAMPLE

 \\
*** wx.getSystemInfoSync()

 获取系统信息同步接口

 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var res = wx.getSystemInfoSync()
       console.log(res.model)
       console.log(res.pixelRatio)
       console.log(res.windowWidth)
       console.log(res.windowHeight)
       console.log(res.language)
       console.log(res.version)
       console.log(res.platform)
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-o1xc1xz3.html]]

 \\
 \\
















 wx.getSystemInfo(OBJECT)




   </h2>


 获取系统信息。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用成功的回调                                 |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success回调参数说明：*

 | 参数              | 说明                                                                | 最低版本                                                        |

 | model             | 手机型号                                                            |                                                                 |
 | pixelRatio        | 设备像素比                                                          |                                                                 |
 | screenWidth       | 屏幕宽度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | screenHeight      | 屏幕高度                                                            | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | windowWidth       | 可使用窗口宽度                                                      |                                                                 |
 | windowHeight      | 可使用窗口高度                                                      |                                                                 |
 | language          | 微信设置的语言                                                      |                                                                 |
 | version           | 微信版本号                                                          |                                                                 |
 | system            | 操作系统版本                                                        |                                                                 |
 | platform          | 客户端平台                                                          |                                                                 |
 | fontSizeSetting   | 用户字体大小设置。以“我-设置-通用-字体大小”中的设置为准，单位：px   | [[http://caibaojian.com/weixinapp/compatibility.html][1.5.0]]   |
 | SDKVersion        | 客户端基础库版本                                                    | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getSystemInfo({
       success: function(res) {
         console.log(res.model)
         console.log(res.pixelRatio)
         console.log(res.windowWidth)
         console.log(res.windowHeight)
         console.log(res.language)
         console.log(res.version)
         console.log(res.platform)
       }
     })
 #+END_EXAMPLE





 wx.getSystemInfoSync()




   </h2>


 获取系统信息同步接口

 *同步返回参数说明：*

 | 参数           | 说明               | 最低版本                                                        |

 | model          | 手机型号           |                                                                 |
 | pixelRatio     | 设备像素比         |                                                                 |
 | screenWidth    | 屏幕宽度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | screenHeight   | 屏幕高度           | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |
 | windowWidth    | 可使用窗口宽度     |                                                                 |
 | windowHeight   | 可使用窗口高度     |                                                                 |
 | language       | 微信设置的语言     |                                                                 |
 | version        | 微信版本号         |                                                                 |
 | system         | 操作系统版本       |                                                                 |
 | platform       | 客户端平台         |                                                                 |
 | SDKVersion     | 客户端基础库版本   | [[http://caibaojian.com/weixinapp/compatibility.html][1.1.0]]   |

 \\
 *示例代码：*

 #+BEGIN_EXAMPLE
     try {
       var res = wx.getSystemInfoSync()
       console.log(res.model)
       console.log(res.pixelRatio)
       console.log(res.windowWidth)
       console.log(res.windowHeight)
       console.log(res.language)
       console.log(res.version)
       console.log(res.platform)
     } catch (e) {
       // Do something when catch error
     }
 #+END_EXAMPLE


 wx.canIUse(String)

 判断小程序的API，回调，参数，组件等是否在当前版本可用。

 *String参数说明：* 使用=${API}.${method}.${param}.${options}=或者=${component}.${attribute}.${option}=方式来调用，例如：

 - =${API}=代表 API 名字
 - =${method}=代表调用方式，有效值为=return=, =success=, =object=, =callback=
 - =${param}=代表参数或者返回值
 - =${options}=代表参数的可选值
 - =${component}=代表组件名字
 - =${attribute}=代表组件属性
 - =${option}=代表组件属性的可选值

 例子：

 #+BEGIN_EXAMPLE
     wx.canIUse('openBluetoothAdapter')wx.canIUse('getSystemInfoSync.return.screenWidth')
     wx.canIUse('getSystemInfo.success.screenWidth')
     wx.canIUse('showToast.object.image')
     wx.canIUse('onCompassChange.callback.direction')
     wx.canIUse('request.object.method.GET')
     wx.canIUse('contact-button')
     wx.canIUse('text.selectable')
     wx.canIUse('button.open-type.contact')
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-device.html]]

 \\
 \\












*** wx.getNetworkType(OBJECT)
   

 
   



 获取网络类型。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 接口调用成功，返回网络类型 networkType             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数          | 说明       |

 | networkType   | 网络类型   |

 #+BEGIN_EXAMPLE
     wx.getNetworkType({
       success: function(res) {
         // 返回网络类型, 有效值：
         // wifi/2g/3g/4g/unknown(Android下不常见的网络类型)/none(无网络)
         var networkType = res.networkType
       }
     })
 #+END_EXAMPLE





 wx.onNetworkStatusChange(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听网络状态变化。

 *CALLBACK返回参数：*

 | 参数          | 类型      | 说明                 |

 | isConnected   | Boolean   | 当前是否有网络连接   |
 | networkType   | String    | 网络类型             |

 *networkType 有效值：*

 | 值        | 说明                        |

 | wifi      | wifi 网络                   |
 | 2g        | 2g 网络                     |
 | 3g        | 3g 网络                     |
 | 4g        | 4g 网络                     |
 | none      | 无网络                      |
 | unknown   | Android下不常见的网络类型   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onNetworkStatusChange(function(res) {
       console.log(res.isConnected)
       console.log(res.networkType)
     })
 #+END_EXAMPLE

 \\
 \\
 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-device.html]]

 \\
 \\












*** wx.onAccelerometerChange(CALLBACK)
   

 
   



 监听重力感应数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopAccelerometer=停止监听。\\

 *CALLBACK返回参数：*

 | 参数   | 类型     | 说明   |
 |--------+----------+--------|
 | x      | Number   | X 轴   |
 | y      | Number   | Y 轴   |
 | z      | Number   | Z 轴   |

 **

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onAccelerometerChange(function(res) {
       console.log(res.x)
       console.log(res.y)
       console.log(res.z)
     })
 #+END_EXAMPLE





 wx.startAccelerometer(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

   微信客户端 6.5.6 版本开始支持
 #+END_QUOTE

 开始监听加速度数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startAccelerometer()
 #+END_EXAMPLE





 wx.stopAccelerometer(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

   微信客户端 6.5.6 版本开始支持
 #+END_QUOTE

 停止监听加速度数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.stopAccelerometer()
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-accelerometer.html]]

 \\
 \\
















 wx.onCompassChange(CALLBACK)




   </h2>


 监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用=wx.stopCompass=停止监听。\\

 *CALLBACK返回参数：*

 | 参数        | 类型     | 说明             |

 | direction   | Number   | 面对的方向度数   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onCompassChange(function (res) {
       console.log(res.direction)
     })
 #+END_EXAMPLE





 wx.startCompass(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 开始监听罗盘数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.startCompass()
 #+END_EXAMPLE





 wx.stopCompass(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 停止监听罗盘数据。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.stopCompass()
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-campass.html]]

 \\
 \\












*** wx.makePhoneCall(OBJECT)
   

 
   



 *OBJECT参数说明：*

 | 参数          | 类型       | 必填   | 说明                                               |

 | phoneNumber   | String     | 是     | 需要拨打的电话号码                                 |
 | success       | Function   | 否     | 接口调用成功的回调                                 |
 | fail          | Function   | 否     | 接口调用失败的回调函数                             |
 | complete      | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.makePhoneCall({
       phoneNumber: '1340000' //仅为示例，并非真实的电话号码
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-api-phonecall.html]]

 \\
 \\












*** wx.scanCode(OBJECT)
   

 
   



 调起客户端扫码界面，扫码成功后返回对应的结果

 *Object 参数说明：*

 | 参数             | 类型       | 必填   | 说明                                                 | 最低版本                                                        |

 | onlyFromCamera   | Boolean    | 否     | 是否只能从相机扫码，不允许从相册选择图片             | [[http://caibaojian.com/weixinapp/compatibility.html][1.2.0]]   |
 | success          | Function   | 否     | 接口调用成功的回调函数，返回内容详见返回参数说明。   |                                                                 |
 | fail             | Function   | 否     | 接口调用失败的回调函数                               |                                                                 |
 | complete         | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）     |                                                                 |

 *success返回参数说明：*

 | 参数       | 说明                                                                          |

 | result     | 所扫码的内容                                                                  |
 | scanType   | 所扫码的类型                                                                  |
 | charSet    | 所扫码的字符集                                                                |
 | path       | 当所扫的码为当前小程序的合法二维码时，会返回此字段，内容为二维码携带的 path   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     // 允许从相机和相册扫码
     wx.scanCode({
       success: (res) => {
         console.log(res)
       }
     })

     // 只允许从相机扫码
     wx.scanCode({
       onlyFromCamera: true,
       success: (res) => {
         console.log(res)
       }
     })
 #+END_EXAMPLE

 \\




 [[http://caibaojian.com/weixinapp/weixinapp-api-scancode.html]]

 \\
 \\
















 wx.setClipboardData(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 设置系统剪贴板的内容。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | data       | String     | 是     | 需要设置的内容                                     |
 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.setClipboardData({
       data: 'data',
       success: function(res) {
         wx.getClipboardData({
           success: function(res) {
             console.log(res.data) // data
           }
         })
       }
     })
 #+END_EXAMPLE





 wx.getClipboardData(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取系统剪贴板内容

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 否     | 接口调用成功的回调函数                             |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数说明：*

 | 参数   | 类型     | 说明           |

 | data   | String   | 剪贴板的内容   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getClipboardData({
       success: function(res){
         console.log(res.data)
       }
     })
 #+END_EXAMPLE




 [[http://caibaojian.com/weixinapp/weixinapp-clipboard.html]]

 \\
 \\










** 蓝牙
*** 蓝牙适配器接口
   
 
   



 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]

   iOS 微信客户端 6.5.6 版本开始支持，Android 客户端暂不支持
 #+END_QUOTE





 wx.openBluetoothAdapter(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 初始化蓝牙适配器

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 成功则返回成功初始化信息                           |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.openBluetoothAdapter({
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE

*** Bug & Tip
   
 
   

 1. =tip=: 由于系统的问题，目前仅在 mac 版的开发工具上支持蓝牙调试
 2. =tip=: 基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]





 wx.closeBluetoothAdapter(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 关闭蓝牙模块。调用该方法将断开所有已建立的链接并释放系统资源

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 成功则返回成功关闭模块信息                         |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.closeBluetoothAdapter({
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE





 wx.getBluetoothAdapterState(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取本机蓝牙适配器状态

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数          | 类型      | 说明                       |

 | discovering   | Boolean   | 是否正在搜索设备           |
 | available     | Boolean   | 蓝牙适配器是否可用         |
 | errMsg        | String    | 成功：ok，错误：详细信息   |

***** *示例代码：*\\
     

 
     

 #+BEGIN_EXAMPLE
     wx.getBluetoothAdapterState({
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE





 wx.onBluetoothAdapterStateChange(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听蓝牙适配器状态变化事件

 *CALLBACK参数说明：*

 | 参数          | 类型      | 说明                         |

 | available     | boolean   | 蓝牙适配器是否可用           |
 | discovering   | boolean   | 蓝牙适配器是否处于搜索状态   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onBluetoothAdapterStateChange(function(res) {
       console.log(`adapterState changed, now is`, res)
     })
 #+END_EXAMPLE





 wx.startBluetoothDevicesDiscovery(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用
 stop 方法停止搜索。

 *OBJECT参数说明：*

 | 参数                 | 类型       | 必填   | 说明                                                                                                        |

 | services             | Array      | 否     | 蓝牙设备主 service 的 uuid 列表                                                                             |
 | allowDuplicatesKey   | boolean    | 否     | 是否允许重复上报同一设备， 如果允许重复上报，则onDeviceFound 方法会多次上报同一设备，但是 RSSI 值会有不同   |
 | interval             | integer    | 否     | 上报设备的间隔，默认为0，意思是找到新设备立即上报，否则根据传入的间隔上报                                   |
 | success              | Function   | 是     | 成功则返回本机蓝牙适配器状态                                                                                |
 | fail                 | Function   | 否     | 接口调用失败的回调函数                                                                                      |
 | complete             | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                                            |

 *services*参数说明：某些蓝牙设备会广播自己的主 service 的
 uuid。如果这里传入该数组，那么根据该 uuid
 列表，只搜索有这个主服务的设备。

 *success返回参数：*

 | 参数            | 类型      | 说明                             |

 | errMsg          | string    | 成功：ok，错误：详细信息         |
 | isDiscovering   | boolean   | 当前蓝牙适配器是否处于搜索状态   |

 *示例代码：*\\

 #+BEGIN_EXAMPLE
     // 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备
     wx.startBluetoothDevicesDiscovery({
       services: ['FEE7'],
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE





 wx.stopBluetoothDevicesDiscovery(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 停止搜寻附近的蓝牙外围设备。请在确保找到需要连接的设备后调用该方法停止搜索。

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数     | 类型     | 说明                       |

 | errMsg   | string   | 成功：ok，错误：详细信息   |

 *adapterState*

 蓝牙适配器状态信息

 | 参数          | 类型      | 说明                 |

 | discovering   | boolean   | 是否正在搜索设备     |
 | available     | boolean   | 蓝牙适配器是否可用   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.stopBluetoothDevicesDiscovery({
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE





 wx.getBluetoothDevices(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 获取所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数      | 类型     | 说明                          |

 | devices   | Array    | uuid 对应的的已连接设备列表   |
 | errMsg    | string   | 成功：ok，错误：详细信息      |

 *device 对象*

 蓝牙设备信息

 | 参数           | 类型          | 说明                                                                         |

 | name           | string        | 蓝牙设备名称，某些设备可能没有                                               |
 | deviceId       | string        | 用于区分设备的 id                                                            |
 | RSSI           | int           | 当前蓝牙设备的信号强度                                                       |
 | advertisData   | ArrayBuffer   | 当前蓝牙设备的广播内容*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getBluetoothDevices({
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE

*** Bug & Tip
   
 
   

 1. =tip=: Mac系统可能无法获取=advertisData=及=RSSI=，请使用真机调试
 2. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
    上则为设备 uuid。因此=deviceId=不能硬编码到代码中





 wx.getConnectedBluetoothDevices(OBJECT)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 根据 uuid 获取处于已连接状态的设备

 *OBJECT参数说明：*

 | 参数       | 类型       | 必填   | 说明                                               |

 | services   | Array      | 是     | 蓝牙设备主 service 的 uuid 列表                    |
 | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
 | fail       | Function   | 否     | 接口调用失败的回调函数                             |
 | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

 *success返回参数：*

 | 参数      | 类型     | 说明                       |

 | devices   | Array    | 搜索到的设备列表           |
 | errMsg    | string   | 成功：ok，错误：详细信息   |

 *device对象*

 蓝牙设备信息

 | 参数       | 类型     | 说明                             |

 | name       | string   | 蓝牙设备名称，某些设备可能没有   |
 | deviceId   | string   | 用于区分设备的 id                |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.getConnectedBluetoothDevices({
       success: function (res) {
         console.log(res)
       }
     })
 #+END_EXAMPLE

*** Bug & Tip
   
 
   

 1. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
    上则为设备 uuid。因此=deviceId=不能硬编码到代码中





 wx.onBluetoothDeviceFound(CALLBACK)




   </h2>


 #+BEGIN_QUOTE
   基础库版本 1.1.0
   开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
 #+END_QUOTE

 监听寻找到新设备的事件

 *CALLBACK参数说明：*

 | 参数      | 类型    | 说明                 |

 | devices   | Array   | 新搜索到的设备列表   |

 *device对象*

 | 参数           | 类型          | 说明                                                                         |

 | deviceId       | string        | 蓝牙设备 id，参考 device 对象                                                |
 | name           | string        | 蓝牙设备名称，参考 device 对象                                               |
 | RSSI           | int           | 当前蓝牙设备的信号强度                                                       |
 | advertisData   | ArrayBuffer   | 当前蓝牙设备的广播内容*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

 *示例代码：*

 #+BEGIN_EXAMPLE
     wx.onBluetoothDeviceFound(function(devices) {
       console.log('new device list has founded')
       console.dir(devices)
     })
 #+END_EXAMPLE

*** Bug & Tip
   
 
   

 1. =tip=: Mac系统可能无法获取=advertisData=及=RSSI=，请使用真机调试
 2. =tip=: 开发者工具和 Android 上获取到的=deviceId=为设备 MAC 地址，iOS
    上则为设备 uuid。因此=deviceId=不能硬编码到代码中

*** 低功耗蓝牙接口
   
 
   





  wx.createBLEConnection(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  连接低功耗蓝牙设备

  *OBJECT参数说明：*

  | 参数       | 类型       | 必填   | 说明                                               |

  | deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
  | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数：*

  | 参数     | 类型     | 说明                       |

  | errMsg   | string   | 成功：ok，错误：详细信息   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.createBLEConnection({
        // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
        deviceId: deviceId,
        success: function (res) {
          console.log(res)
        }
      })
  #+END_EXAMPLE





  wx.closeBLEConnection(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  断开与低功耗蓝牙设备的连接

  *OBJECT参数说明：*

  | 参数       | 类型       | 必填   | 说明                                               |

  | deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
  | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数：*

  | 参数     | 类型     | 说明                       |

  | errMsg   | string   | 成功：ok，错误：详细信息   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.closeBLEConnection({
        success: function (res) {
          console.log(res)
        }
      })
  #+END_EXAMPLE





  wx.getBLEDeviceServices(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  获取蓝牙设备所有 service（服务）

  *OBJECT参数说明：*

  | 参数       | 类型       | 必填   | 说明                                               |

  | deviceId   | string     | 是     | 蓝牙设备 id，参考 getDevices 接口                  |
  | success    | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数：*

  | 参数       | 类型     | 说明                       |

  | services   | array    | 设备服务列表               |
  | errMsg     | string   | 成功：ok，错误：详细信息   |

  *service对象*

  蓝牙设备service(服务)信息

  | 参数        | 类型      | 说明                  |

  | uuid        | string    | 蓝牙设备服务的 uuid   |
  | isPrimary   | boolean   | 该服务是否为主服务    |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.getBLEDeviceServices({
        // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
        deviceId: deviceId,
        success: function (res) {
          console.log('device services:', res.services)
        }
      })
  #+END_EXAMPLE





  wx.getBLEDeviceCharacteristics(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  获取蓝牙设备所有 characteristic（特征值）

  *OBJECT参数说明：*

  | 参数        | 类型       | 必填   | 说明                                               |

  | deviceId    | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
  | serviceId   | string     | 是     | 蓝牙服务 uuid                                      |
  | success     | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
  | fail        | Function   | 否     | 接口调用失败的回调函数                             |
  | complete    | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数：*

  | 参数              | 类型     | 说明                       |

  | characteristics   | array    | 设备特征值列表             |
  | errMsg            | string   | 成功：ok，错误：详细信息   |

  *characteristic对象*

  蓝牙设备characteristic(特征值)信息

  | 参数         | 类型     | 说明                     |

  | uuid         | string   | 蓝牙设备特征值的 uuid    |
  | properties   | object   | 该特征值支持的操作类型   |

  *properties对象*

  | 参数       | 类型      | 说明                             |

  | read       | boolean   | 该特征值是否支持 read 操作       |
  | write      | boolean   | 该特征值是否支持 write 操作      |
  | notify     | boolean   | 该特征值是否支持 notify 操作     |
  | indicate   | boolean   | 该特征值是否支持 indicate 操作   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.getBLEDeviceCharacteristics({
        // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
        deviceId: deviceId,
        // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
        serviceId: serviceId,
        success: function (res) {
          console.log('device getBLEDeviceCharacteristics:', res.characteristics)
        }
      })
  #+END_EXAMPLE





  wx.readBLECharacteristicValue(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  读取低功耗蓝牙设备的特征值的二进制数据值。注意：必须设备的特征值支持=read=才可以成功调用，具体参照
  characteristic 的 properties 属性

  *OBJECT参数说明：*

  | 参数               | 类型       | 必填   | 说明                                               |

  | deviceId           | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
  | serviceId          | string     | 是     | 蓝牙特征值对应服务的 uuid                          |
  | characteristicId   | string     | 是     | 蓝牙特征值的 uuid                                  |
  | success            | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
  | fail               | Function   | 否     | 接口调用失败的回调函数                             |
  | complete           | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数：*

  | 参数             | 类型     | 说明                       |

  | characteristic   | object   | 设备特征值信息             |
  | errMsg           | string   | 成功：ok，错误：详细信息   |

  *characteristic对象*

  蓝牙设备characteristic(特征值)信息

  | 参数               | 类型          | 说明                                                                               |

  | characteristicId   | string        | 蓝牙设备特征值的 uuid                                                              |
  | serviceId          | object        | 蓝牙设备特征值对应服务的 uuid                                                      |
  | value              | ArrayBuffer   | 蓝牙设备特征值对应的二进制值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      // 必须在这里的回调才能获取
      wx.onBLECharacteristicValueChange(function(characteristic) {
        console.log('characteristic value comed:', characteristic)
      })

      wx.readBLECharacteristicValue({
        // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
        deviceId: deviceId,
        // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
        serviceId: serviceId,
        // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
        characteristicId: characteristicId,
        success: function (res) {
          console.log('readBLECharacteristicValue:', res.characteristic.value)
        }
      })
  #+END_EXAMPLE

**** Bug & Tip
    
 
    

  1. =tip=: 并行调用多次读写接口存在读写失败的可能性。
  2. =tip=:=read=接口读取到的信息需要在=onBLECharacteristicValueChange=方法注册的回调中获取。





  wx.writeBLECharacteristicValue(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  向低功耗蓝牙设备特征值中写入二进制数据。注意：必须设备的特征值支持=write=才可以成功调用，具体参照
  characteristic 的 properties 属性

  /tips: 并行调用多次读写接口存在读写失败的可能性/

  *OBJECT参数说明：*

  | 参数               | 类型          | 必填   | 说明                                                                               |

  | deviceId           | string        | 是     | 蓝牙设备 id，参考 device 对象                                                      |
  | serviceId          | string        | 是     | 蓝牙特征值对应服务的 uuid                                                          |
  | characteristicId   | string        | 是     | 蓝牙特征值的 uuid                                                                  |
  | value              | ArrayBuffer   | 是     | 蓝牙设备特征值对应的二进制值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |
  | success            | Function      | 是     | 成功则返回本机蓝牙适配器状态                                                       |
  | fail               | Function      | 否     | 接口调用失败的回调函数                                                             |
  | complete           | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）                                   |

  *success返回参数：*

  | 参数     | 类型     | 说明                       |

  | errMsg   | string   | 成功：ok，错误：详细信息   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      // 这里的回调可以获取到 write 导致的特征值改变
      wx.onBLECharacteristicValueChange(function(characteristic) {
        console.log('characteristic value changed:', characteristic)
      })

      // 向蓝牙设备发送一个0x00的16进制数据
      let buffer = new ArrayBuffer(1)
      let dataView = new DataView(buffer)
      dataView.setUint8(0, 0)

      wx.writeBLECharacteristicValue({
        // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
        deviceId: deviceId,
        // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
        serviceId: serviceId,
        // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
        characteristicId: characteristicId,
        // 这里的value是ArrayBuffer类型
        value: buffer,
        success: function (res) {
          console.log('writeBLECharacteristicValue success', res.errMsg)
        }
      })
  #+END_EXAMPLE

**** wx.notifyBLECharacteristicValueChanged(OBJECT)
    
 
    








    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  启用低功耗蓝牙设备特征值变化时的 notify
  功能。注意：必须设备的特征值支持=notify=才可以成功调用，具体参照
  characteristic 的 properties 属性

  另外，必须先启用=notify=才能监听到设备 characteristicValueChange 事件

  *OBJECT参数说明：*

  | 参数               | 类型       | 必填   | 说明                                               |

  | deviceId           | string     | 是     | 蓝牙设备 id，参考 device 对象                      |
  | serviceId          | string     | 是     | 蓝牙特征值对应服务的 uuid                          |
  | characteristicId   | string     | 是     | 蓝牙特征值的 uuid                                  |
  | state              | boolean    | 是     | true: 启用 notify; false: 停用 notify              |
  | success            | Function   | 是     | 成功则返回本机蓝牙适配器状态                       |
  | fail               | Function   | 否     | 接口调用失败的回调函数                             |
  | complete           | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数：*

  | 参数     | 类型     | 说明                       |

  | errMsg   | string   | 成功：ok，错误：详细信息   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.notifyBLECharacteristicValueChanged({
        state: true, // 启用 notify 功能
        // 这里的 deviceId 需要在上面的 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
        deviceId: deviceId,
        // 这里的 serviceId 需要在上面的 getBLEDeviceServices 接口中获取
        serviceId: serviceId,
        // 这里的 characteristicId 需要在上面的 getBLEDeviceCharacteristics 接口中获取
        characteristicId: characteristicId,
        success: function (res) {
          console.log('notifyBLECharacteristicValueChanged success', res.errMsg)
        }
      })
  #+END_EXAMPLE





  wx.onBLEConnectionStateChanged(CALLBACK)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等。

  *CALLBACK参数说明：*

  | 参数        | 类型      | 说明                            |

  | deviceId    | string    | 蓝牙设备 id，参考 device 对象   |
  | connected   | boolean   | 连接目前的状态                  |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.onBLEConnectionStateChanged(function(res) {
        // 该方法回调中可以用于处理连接意外断开等异常情况
        console.log(`device ${res.deviceId} state has changed, connected: ${res.connected}`)
      })
  #+END_EXAMPLE





  wx.onBLECharacteristicValueChange(CALLBACK)




    </h2>


  #+BEGIN_QUOTE
    基础库版本 1.1.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  监听低功耗蓝牙设备的特征值变化。必须先启用=notify=接口才能接收到设备推送的notification。

  *CALLBACK参数说明：*

  | 参数               | 类型          | 说明                                                                 |

  | deviceId           | string        | 蓝牙设备 id，参考 device 对象                                        |
  | serviceId          | string        | 特征值所属服务 uuid                                                  |
  | characteristicId   | string        | 特征值 uuid                                                          |
  | value              | ArrayBuffer   | 特征值最新的值*（注意：vConsole 无法打印出 ArrayBuffer 类型数据）*   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.onBLECharacteristicValueChange(function(res) {
        console.log(`characteristic ${res.characteristicId} has changed, now is ${res.value}`)
      })
  #+END_EXAMPLE

**** 蓝牙错误码(errCode)列表
    
 
    

  | 错误码   | 说明                   | 备注                                           |

  | 0        | ok                     | 正常                                           |
  | 10000    | not init               | 未初始化蓝牙适配器                             |
  | 10001    | not available          | 当前蓝牙适配器不可用                           |
  | 10002    | no device              | 没有找到指定设备                               |
  | 10003    | connection fail        | 连接失败                                       |
  | 10004    | no service             | 没有找到指定服务                               |
  | 10005    | no characteristic      | 没有找到指定特征值                             |
  | 10006    | no connection          | 当前连接已断开                                 |
  | 10007    | property not support   | 当前特征值不支持此操作                         |
  | 10008    | system error           | 其余所有系统上报的异常                         |
  | 10009    | system not support     | Android 系统特有，系统版本低于 4.3 不支持BLE   |
  | 10010    | no descriptor          | 没有找到指定描述符                             |

  [[https://mp.weixin.qq.com/debug/wxadoc/dev/api/clipboard.html#wxgetclipboarddataobject][<<>>]]\\



 
  [[http://caibaojian.com/weixinapp/weixinapp-bluetooth.html]]

  \\
  \\








 







  wx.startBeaconDiscovery(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  开始搜索附近的=iBeacon=设备

  *OBJECT参数说明：*

  | 参数名     | 类型          | 必填   | 说明                                               |

  | uuids      | StringArray   | 是     | iBeacon设备广播的 uuids                            |
  | success    | Function      | 否     | 接口调用成功的回调函数                             |
  | fail       | Function      | 否     | 接口调用失败的回调函数                             |
  | complete   | Function      | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数说明：*

  | 参数名   | 类型     | 说明       |
  |----------+----------+------------|
  | errMsg   | String   | 调用结果   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.startBeaconDiscovery({
          success(res) {
          }
      })
  #+END_EXAMPLE





  wx.stopBeaconDiscovery(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[https://mp.weixin.qq.com/debug/wxadoc/dev/framework/compatibility.html][兼容处理]]
  #+END_QUOTE

  停止搜索附近的=iBeacon=设备

  *OBJECT参数说明：*

  | 参数名     | 类型       | 必填   | 说明                                               |

  | success    | Function   | 否     | 接口调用成功的回调函数                             |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数说明：*

  | 参数名   | 类型     | 说明       |
  |----------+----------+------------|
  | errMsg   | String   | 调用结果   |





  wx.getBeacons(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  获取所有已搜索到的=iBeacon=设备

  *OBJECT参数说明：*

  | 参数名     | 类型       | 必填   | 说明                                               |

  | success    | Function   | 否     | 接口调用成功的回调函数                             |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数说明：*

  | 参数名    | 类型          | 说明               |

  | beacons   | ObjectArray   | iBeacon 设备列表   |
  | errMsg    | String        | 调用结果           |

  *iBeacon 结构：*

  | 参数        | 类型     | 说明                      |

  | uuid        | String   | iBeacon 设备广播的 uuid   |
  | major       | String   | iBeacon 设备的主 id       |
  | minor       | String   | iBeacon 设备的次 id       |
  | proximity   | Number   | 表示设备距离的枚举值      |
  | accuracy    | Number   | iBeacon 设备的距离        |
  | rssi        | Number   | 表示设备的信号强度        |





  wx.onBeaconUpdate(CALLBACK)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  监听=iBeacon=设备的更新事件

  *CALLBACK返回参数说明：*

  | 参数名    | 类型           | 说明                                |

  | beacons   | array object   | 当前搜寻到的所有 iBeacon 设备列表   |

  *iBeacon 结构：*

  | 参数        | 类型     | 说明                      |

  | uuid        | String   | iBeacon 设备广播的 uuid   |
  | major       | String   | iBeacon 设备的主 id       |
  | minor       | String   | iBeacon 设备的次 id       |
  | proximity   | Number   | 表示设备距离的枚举值      |
  | accuracy    | Number   | iBeacon 设备的距离        |
  | rssi        | Number   | 表示设备的信号强度        |





  wx.onBeaconServiceChange(CALLBACK)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  监听=iBeacon=服务的状态变化

  *CALLBACK返回参数说明：*

  | 参数名        | 类型      | 说明                   |

  | available     | Boolean   | 服务目前是否可用       |
  | discovering   | Boolean   | 目前是否处于搜索状态   |

**** 错误码列表
    
 
    

  | 错误码   | 说明                            | 备注               |

  | 0        | ok                              | 正常               |
  | 11000    | unsupport                       | 系统或设备不支持   |
  | 11001    | bluetooth service unavailable   | 蓝牙服务不可用     |
  | 11002    | location service unavailable    | 位置服务不可用     |
  | 11003    | already start                   | 已经开始搜索       |



 
  [[http://caibaojian.com/weixinapp/weixinapp-ibeacon.html]]

  \\
  \\








 







  wx.setScreenBrightness(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  设置屏幕亮度。

  *OBJECT参数说明：*

  | 参数       | 类型       | 必填   | 说明                                               |

  | value      | Number     | 是     | 屏幕亮度值，范围 0~1，0 最暗，1 最亮               |
  | success    | Function   | 否     | 接口调用成功                                       |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |





  wx.getScreenBrightness(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  获取屏幕亮度。

  *OBJECT参数说明：*

  | 参数       | 类型       | 必填   | 说明                                               |

  | success    | Function   | 否     | 接口调用成功                                       |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数说明：*

  | 参数    | 类型     | 说明                                   |

  | value   | Number   | 屏幕亮度值，范围 0~1，0 最暗，1 最亮   |





  wx.setKeepScreenOn(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.4.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  设置是否保持常亮状态。仅在当前小程序生效，离开小程序后设置失效。

  *OBJECT参数说明：*

  | 参数名         | 类型       | 必填   | 说明                                               |

  | keepScreenOn   | Boolean    | 是     | 是否保持屏幕常亮                                   |
  | success        | Function   | 否     | 接口调用成功的回调函数                             |
  | fail           | Function   | 否     | 接口调用失败的回调函数                             |
  | complete       | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

  *success返回参数说明：*

  | 参数名   | 类型     | 说明       |
  |----------+----------+------------|
  | errMsg   | String   | 调用结果   |

  *示例代码：*

  #+BEGIN_EXAMPLE
      // 保持屏幕常亮
      wx.setKeepScreenOn({
          keepScreenOn: true
      })
  #+END_EXAMPLE

  \\



 
  [[http://caibaojian.com/weixinapp/weixinapp-screenbrightness.html]]

  \\
  \\








 







  wx.onUserCaptureScreen(CALLBACK)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.4.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  监听用户主动截屏事件，用户使用系统截屏按键截屏时触发此事件

  *CALLBACK返回参数：*

  无

  *示例代码：*

  #+BEGIN_EXAMPLE
      wx.onUserCaptureScreen(function(res) {
          console.log('用户截屏了')
      })
  #+END_EXAMPLE



 
  [[http://caibaojian.com/weixinapp/weixinapp-onusercapturescreen.html]]

  \\
  \\








 







  wx.vibrateLong(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  使手机发生较长时间的振动（400ms）

  *OBJECT参数说明：*

  | 参数名     | 类型       | 必填   | 说明                                               |

  | success    | Function   | 否     | 接口调用成功的回调函数                             |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |





  wx.vibrateShort(OBJECT)




    </h2>


  #+BEGIN_QUOTE
    基础库 1.2.0
    开始支持，低版本需做[[http://caibaojian.com/weixinapp/compatibility.html][兼容处理]]
  #+END_QUOTE

  使手机发生较短时间的振动（15ms）

  *OBJECT参数说明：*

  | 参数名     | 类型       | 必填   | 说明                                               |

  | success    | Function   | 否     | 接口调用成功的回调函数                             |
  | fail       | Function   | 否     | 接口调用失败的回调函数                             |
  | complete   | Function   | 否     | 接口调用结束的回调函数（调用成功、失败都会执行）   |

****** Bug & Tip
      
 
      

  1. =tip=：=vibrateShort=接口仅在 iPhone7/iPhone7Plus 及 Android 机型生效
  2. =tip=:=getScreenBrightness=接口若安卓系统设置中开启了自动调节亮度功能，则屏幕亮度会根据光线自动调整，该接口仅能获取自动调节亮度之前的值，而非实时的亮度值。



 
  [[http://caibaojian.com/weixinapp/weixinapp-vibrate.html]]

  \\
  \\

