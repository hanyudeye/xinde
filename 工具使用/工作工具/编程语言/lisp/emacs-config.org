* 定制自己使用习惯的 emacs
** 起步
*** 初始化文件
**** 默认的初始化文件
     假如执行 *emacs* 不带参数，它就会加载默认的配置文件
     1. ~/.emacs
     2. ~/.emacs.el
     3. ~/.emacs.d/init.el
**** 加载自定义配置文件
     可以用 *-l* 参数加载自己的配置文件
     #+begin_src lisp
     emacs -q -l ~/.emacs-light
     #+end_src
**** 执行配置文件而不重启
     可以使用命令 ~evil-buffer~ ， ~eval-region~
*** 主模式
    主模式是一个模块名称，其包含其他模块的集合
**** How to Get a List of Major Modes
 Alt+x apropos-command, then type “-mode”. (it's not a complete list, because some major mode's name does not end in “mode”)

 Or, Alt+x describe-variable, then type auto-mode-alist. It'll list major modes associated with file name extension.
**** Find Current Major Mode
 Current buffer's major mode's name is stored in the variable major-mode.

 To find out its value, Alt+x describe-variable, then type “major-mode”.
*** 次模式
    可以给主模式添加一些自定义模式
    describe-mode
*** customize
**** customize
     全局配置
**** customize-group 
    方便的配置模式下的配置 
*** 分割 init 文件
    #+begin_src lisp
      (require 'package)
      (package-initialize)

      (require 'ido)

      ;; more stuff

      (defun xah-get-fullpath (@file-relative-path)
        "Return the full path of *file-relative-path, relative to caller's file location.

      Example: If you have this line
       (xah-get-fullpath \"../xyz.el\")
      in the file at
       /home/mary/emacs/emacs_lib.el
      then the return value is
       /home/mary/xyz.el
      Regardless how or where emacs_lib.el is called.

      This function solves 2 problems.

      ① If you have file A, that calls the `load' on a file at B, and B calls `load' on file C using a relative path, then Emacs will complain about unable to find C. Because, emacs does not switch current directory with `load'.

      To solve this problem, when your code only knows the relative path of another file C, you can use the variable `load-file-name' to get the current file's full path, then use that with the relative path to get a full path of the file you are interested.

      ② To know the current file's full path, emacs has 2 ways: `load-file-name' and `buffer-file-name'. If the file is loaded by `load', then `load-file-name' works but `buffer-file-name' doesn't. If the file is called by `eval-buffer', then `load-file-name' is nil. You want to be able to get the current file's full path regardless the file is run by `load' or interactively by `eval-buffer'."

        (concat (file-name-directory (or load-file-name buffer-file-name)) @file-relative-path)
        )

      ;; --------------------------------------------------
      ;; load the plain emacs settings

      (load (xah-get-fullpath "xah_emacs_settings"))

      ;; --------------------------------------------------
      ;; load packages

      (add-to-list 'load-path "~/git/xah-fly-keys/")
      (require 'xah-fly-keys)

      (add-to-list 'load-path "~/git/xah-find/")
      (require 'xah-find)

      ;; more here

      ;; --------------------------------------------------
      ;; load files

      (load (xah-get-fullpath "xah_emacs_abbr"))
      (load (xah-get-fullpath "xah_emacs_keybinding"))
      (load (xah-get-fullpath "xah_emacs_keybinding_mode_specific"))
      (load (xah-get-fullpath "xah_emacs_settings_external_packages"))
      (load (xah-get-fullpath "xah_emacs_file_association"))
      (load (xah-get-fullpath "xah_emacs_html"))
      ;; more here
      (load (xah-get-fullpath "xah_emacs_misc"))
#+end_src
*** hook
    钩子被设计为在某些事件发生时“运行”。当钩子“运行”时，钩子中的所有函数都被调用。
**** 钩子示例 
     #+begin_src lisp
       (add-hook 'ruby-mode-hook 'variable-pitch-mode)
       (add-hook 'js-mode-hook 'variable-pitch-mode)
     #+end_src
**** 删除钩子
     #+begin_src lisp
       (remove-hook 'html-mode-hook 'xyz)
     #+end_src
**** Avoid Lambda in Hook (为了可读性)
*** 在 Emacs 中设置环境变量(OSX 默认不继承 SHELL 环境变量)
    emacs  会将  (getenv "PATH") 的值复制到 exec-path 中，用来查找程序
*** Packages 包
    emacs 带有一个 ELPA (Emacs Lisp Package Archive)包管理系统，来管理您安装的包。
**** 配置包管理系统 
     #+begin_src lisp
       ;; load emacs 24's package system. Add MELPA repository.
       (when (>= emacs-major-version 24)
         (require 'package)
         (add-to-list
          'package-archives
          ;; '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
          '("melpa" . "https://melpa.org/packages/")
          t))
     #+end_src
**** Install Packages
     使用命令 list-packages  列出包，就可以在里面安装和卸载包了。此系统会自动安装依赖的包。  
     
     有用的命令
     package-enable-at-startup. By default, this is t (true).

     在启动时启用 package-enable-at-startup。默认情况下，这是 t (true)。

     package-load-list. This determines which packages should be loaded at start-up.

     包装加载列表。这决定了在启动时应该加载哪些包。

**** Install Package Manually
     对于自己编写或下载的包，可以手动加载
     
     ;; Tell emacs where is your personal elisp lib dir
     (add-to-list 'load-path "~/.emacs.d/lisp/")

     ;; load the packaged named xyz.
     (load "xyz") ;; best not to include the ending “.el” or “.elc”

***** Byte Compile
      byte-compile-file 字节编译后，速度更快
     
*****  Auto Activate Mode When Opening File
      自动激活模式 
      #+begin_src lisp
        ;; setup files ending in “.js” to open in js2-mode
        (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
      #+end_src

*** text editing
**** Tab/Space/Indent Setup
**** electric-pair-mode
     Isearch space for - _
     Move Cursor by camelCase
     Ido Mode Setup
     Icomplete Completion
     Stop Cursor Going into Minibuffer Prompt
     Sync Clipboard with Linux X11
     file
     Default Major Mode
     Auto Backup Off
     Auto Save
     Restore Opened Files
     Save Cursor Position
     Dired Customization
     appearance
     Font Setup
     Proportional Font
     Cycle Fonts
     Show Line Numbers
     Show Cursor Position
     High Light Current Line
     Show Formfeed ^L as Line
     Line Spacing
     Set Color Theme
     Highlight Brackets ()[]{}
     Show lambda as λ
     Default Window Size
     misc
     Default Browser
     Misc Init Tips

* search 
  ( search-engine
       :variables
       search-engine-config-list '((wikipediacn
                                    :name "Wikipedia 中国"
                                    :url "https://www.wikipedia.org/search-redirect.php?language=zh&go=Go&search=%s"
                                    :keywords (:docstring "维基中国"
                                                          ;; :browser 'eww-browse-url
                                                          ))
                                   (baiduindex
                                    :name "baidu index"
                                    :url "http://index.baidu.com/v2/main/index.html#/trend/%s?words=%s"
                                    :keywords (:docstring "百度指数"
                                                          ))
                                   (tieba
                                    :name "tieba"
                                    :url "http://tieba.baidu.com/f?kw=%s"
                                    :keywords (:docstring "贴吧"
                                                          ))
                                   (taobao
                                    :name "taobao"
                                    :url "https://s.taobao.com/search?q=%s"
                                    :keywords (:docstring "淘宝"
                                                          ))
                                   (zhihu
                                    :name "zhihu"
                                    :url "https://www.zhihu.com/search?type=content&q=%s"
                                    :keywords (:docstring "知乎"
                                                          ))
                                   (oschina
                                    :name "oschina"
                                    :url "https://www.oschina.net/search?scope=project&q=%s"
                                    :keywords (:docstring "oschina"
                                                          ))
                                   (appinn
                                    :name "appinn"
                                    :url "https://www.appinn.com/?s=%s"
                                    :keywords (:docstring "小众软件"
                                                          ))
                                   (sogou
                                    :name "sogou"
                                    :url "https://www.sogou.com/web?query=%s"
                                    :keywords (:docstring "搜狗"
                                                          ))
                                   (emacschina
                                    :name "emacschina"
                                    :url "https://emacs-china.org/search?q=%s"
                                    :keywords (:docstring "Emacs China"
                                                          ;; :browser 'eww-browse-url
                                                          ))
                                   (juejin
                                    :name "juejin"
                                    :url "https://juejin.im/search?query=%s&type=all"
                                    :keywords (:docstring "掘金"
                                                          ;; :browser 'eww-browse-url
                                                          ))
                                   (tupianzcool
                                    :name "tupianzcool"
                                    :url "https://www.zcool.com.cn/search/content?&word=%s"
                                    :keywords (:docstring "站酷"
                                                          ))
                                   (tupianpexels
                                    :name "tupianpexels"
                                    :url "https://www.pexels.com/search/%s"
                                    :keywords (:docstring "pexels"
                                                          ))
                                   )
       )
* Emacs: Organize Init File
This page is a guide on organizing your emacs init file.

Many emacs users, have hundreds of lines in their emacs init file,
accumulated over the years. Large emacs init file makes emacs start
slow, and is a problem when you upgrade emacs.

When you find some elisp code on the web, you pile it in your emacs init
and you can immediately go back to work on things you need done. That is
the beauty of it. The best way i find in keeping emacs init organized,
is just to break them into multiple files.

** Split Init File into Multiple Files
   My structure is like this

- =~/.emacs.d/init.el=

The sole content of this file is:

#+BEGIN_SRC emacs-lisp
    (load "~/git/xah_emacs_init/xah_emacs_init.el")
#+END_SRC

Then i have

- =xah_emacs_init.el= → this loads all others.
- =xah_emacs_settings.el= → settings for plain emacs.

The =xah_emacs_init.el= basically just contain lines to load other
files.

The =xah_emacs_settings.el= settings file is all the essential settings
and does not need installing extra packages.

If i'm on a new machine, i just use the settings file to begin with.
(For different machines setup, i prefer case-by-case per machine manual
setup basis.)

The content of =xah_emacs_init.el= looks like this:

#+BEGIN_SRC emacs-lisp
    (require 'package)
    (package-initialize)

    (require 'ido)

    ;; more stuff

    (defun xah-get-fullpath (@file-relative-path)
      "Return the full path of *file-relative-path, relative to caller's file location.

    Example: If you have this line
     (xah-get-fullpath \"../xyz.el\")
    in the file at
     /home/mary/emacs/emacs_lib.el
    then the return value is
     /home/mary/xyz.el
    Regardless how or where emacs_lib.el is called.

    This function solves 2 problems.

    ① If you have file A, that calls the `load' on a file at B, and B calls `load' on file C using a relative path, then Emacs will complain about unable to find C. Because, emacs does not switch current directory with `load'.

    To solve this problem, when your code only knows the relative path of another file C, you can use the variable `load-file-name' to get the current file's full path, then use that with the relative path to get a full path of the file you are interested.

    ② To know the current file's full path, emacs has 2 ways: `load-file-name' and `buffer-file-name'. If the file is loaded by `load', then `load-file-name' works but `buffer-file-name' doesn't. If the file is called by `eval-buffer', then `load-file-name' is nil. You want to be able to get the current file's full path regardless the file is run by `load' or interactively by `eval-buffer'."

      (concat (file-name-directory (or load-file-name buffer-file-name)) @file-relative-path)
    )

    ;; --------------------------------------------------
    ;; load the plain emacs settings

    (load (xah-get-fullpath "xah_emacs_settings"))

    ;; --------------------------------------------------
    ;; load packages

    (add-to-list 'load-path "~/git/xah-fly-keys/")
    (require 'xah-fly-keys)

    (add-to-list 'load-path "~/git/xah-find/")
    (require 'xah-find)

    ;; more here

    ;; --------------------------------------------------
    ;; load files

    (load (xah-get-fullpath "xah_emacs_abbr"))
    (load (xah-get-fullpath "xah_emacs_keybinding"))
    (load (xah-get-fullpath "xah_emacs_keybinding_mode_specific"))
    (load (xah-get-fullpath "xah_emacs_settings_external_packages"))
    (load (xah-get-fullpath "xah_emacs_file_association"))
    (load (xah-get-fullpath "xah_emacs_html"))
    ;; more here
    (load (xah-get-fullpath "xah_emacs_misc"))
#+END_SRC

It loads other init files such as:

- =xah_emacs_abbr.el=
- =xah_emacs_file_association.el=
- =xah_emacs_font.el=
- =xah_emacs_keybinding.el=
- =xah_emacs_keybinding_mode_specific.el=
- =xah_emacs_settings_external_packages.el=
- =xah_emacs_misc.el= → this is kinda is catch all

The =misc.el= is catch all. Anything misc or temp or worry-later i dump
there.

When next time you have more code you want to add, just pick a file and
add there.

The advantage of separate files is that you can selectively add or
comment out which one to load. (as opposed to comment out blocks of code
in a big file, which is less easy to manage)

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/organize_your_dot_emacs.html]]

\\
\\
| [[../index_u6.html#article_0][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u4.html>>

| [[../article_2/index_u17.html][下一项]] |
[[../index_u6.html#article_1][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_0/index_u28.html][上一项]] |

--------------

* Emacs: Byte Compile Elisp Files
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2011-07-15. Last updated: 2016-01-30.

Emacs lisp files can be byte compiled.

Byte compiled elisp file has “.elc” suffix (aka extension). Normal elisp
file has “.el” suffix.

** Advantage of Byte Compiled Elisp File
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Byte compiled elisp files will load faster, and also run faster. (by a
simple test of a loop, it seems to run about 4 times faster.)

Another advantage is that byte compiling will often tell you errors or
warning in your elisp code that you normally wouldn't know.

[[file:feed_0/article_1/images/img1_u16.png]]

elisp byte compile warning

When you use ELPA to install packages, they are automatically byte
compiled. [see [[file:emacs_package_system.html][Emacs: Install Package
with ELPA/MELPA]]]

As of today (2016-01), for init files and light-weight packages, byte
compile doesn't make any noticeable speed difference. In general, you
should byte-compile lisp packages. (example of heavy weight packages
that need or must be byte-compiled: js2-mode, nxml-mode,
auto-complete-mode.)

** Loading Byte Compiled File
   :PROPERTIES:
   :CLASS: calibre11
   :END:

In your init file, when you use =load=, if you want emacs to load the
byte compiled file if it exists, you should not include the “.el”
suffix. For example, do it like this

#+BEGIN_SRC emacs-lisp
    ;; load elisp file, use byte compiled version (.elc) if exist
    (load "my_emacs_keybinding") ; no file name extension here
#+END_SRC

[see [[file:elisp_library_system.html][Elisp: load, load-file,
autoload]]]

** How to Byte Compile
   :PROPERTIES:
   :CLASS: calibre11
   :END:

There are several ways to byte compile elisp files. The simplest and
most useful are:

- Alt+x =byte-compile-file=, it'll prompt for a file name.
- In dired, Alt+x =dired-mark-files-regexp= 【% m】 on “.el” files, then
  Alt+x =dired-do-byte-compile= 【B】.

*** Batch Byte Compile
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Alt+x =byte-recompile-directory= to batch byte compile all elisp files
in current dir and sub-directory, if a “.elc” for the file exists, and
has a file timestamp older than the “.el” file.

Evaluate =(byte-recompile-directory directory_path 0)= to recompile
every “.el” file. (regardless whether “.elc” exists.), but still compare
timestamp.

Evaluate =(byte-recompile-directory directory_path 0 t)= to recompile
every “.el” file. (regardless whether “.elc” exists and regardless of
timestamp.)

Evaluate =(byte-recompile-directory directory_path nil t)= to byte
compile all “.el” file that has a existing “.elc” file. (regardless of
timestamp.)

[see [[file:elisp_eval_lisp_code.html][Evaluate Emacs Lisp Code]]]

** Recompile When Upgrade
   :PROPERTIES:
   :CLASS: calibre11
   :END:

When you upgrade to a new emcas version, or upgrade packages, or bring
over your byte compiled elisp directory from one machine to another, you
should recompile your elisp files, because often, emacs has some
incompatible elisp changes, and big packages may fail without recompile.

** Reference
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[../emacs_manual/elisp/Byte-Compilation.html][(info "(elisp) Byte
Compilation")]]

2011-07-15 thanks to [[https://twitter.com/adben][Adolfo Benedetti]].

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_byte_compile.html]]

\\
\\
| [[../index_u6.html#article_1][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u17.html>>

| [[../article_3/index_u34.html][下一项]] |
[[../index_u6.html#article_2][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_1/index_u4.html][上一项]] |

--------------

* Emacs: What's Hook?
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2016-04-12. Last updated: 2019-11-06.

A hook is a variable, its value is a list of functions (lisp symbols or
lambda).

Hook is designed to “run” when some event happens. When a hook “run”,
all functions in that hook are called.

For example,

- when =js-mode= is loaded, js-mode-hook's functions are run.
- when any command is called, post-command-hook's functions are run.

There are hundreds of hooks. Each major mode usually have at least 1
hook, designed to run when the mode is loaded. [see
[[file:emacs_hooks_list.html][List of Emacs Hooks]]]

Hook is similar to the concept of *event* in other systems. Adding
functions to a hook is similar to adding event handlers. (note: emacs
lisp manual also uses the term “event”, but that is lower level events
to emacs (such as pressing a key), not events from emacs.)

** Hook Example
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Here's example of setting proportional width font for some modes:

#+BEGIN_SRC emacs-lisp
    ;; use proportional width font for some modes
    (add-hook 'ruby-mode-hook 'variable-pitch-mode)
    (add-hook 'js-mode-hook 'variable-pitch-mode)
#+END_SRC

[see [[file:emacs_avoid_lambda_in_hook.html][Emacs: Avoid Lambda in
Hook]]]

Note, hook is most often used to change Keys for Major Mode. see
[[file:emacs_set_keys_for_major_mode.html][Emacs: Change Major Mode
Keys]]

** List All Hooks
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:emacs_hooks_list.html][List of Emacs Hooks]]

** How to Find Hook
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Most major modes have a hook. If a mode's name is “xyz-mode”, its hook
by convention is named “xyz-mode-hook”.

First, be sure you load the mode first. Some hook many not show when the
mode isn't loaded or initialized.

To load a mode, just e.g. Alt+x =js-mode=

To find a mode's hook,

Alt+x =describe-variable=, then try to type a name you guessed, press
Tab for completion.

Or

1. Alt+x =apropos-variable=
2. Type “-hook”, press Enter.

Note: A major mode may have more than 1 hook.

** Show Value of a Hook
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =describe-variable=, then type the hook name, to see its current
value.

** Remove Function in Hook
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    (remove-hook 'html-mode-hook 'xyz)
#+END_SRC

** Avoid Lambda in Hook
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:emacs_avoid_lambda_in_hook.html][Emacs: Avoid Lambda in Hook]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_whats_hook.html]]

\\
\\
| [[../index_u6.html#article_2][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u34.html>>

| [[../article_4/index_u26.html][下一项]] |
[[../index_u6.html#article_3][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_2/index_u17.html][上一项]] |

--------------

* Emacs: Avoid Lambda in Hook
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2010-01-01. Last updated: 2018-06-13.

When you add function to a hook, it is best to avoid using lambda.
Instead, define the function of what you want to do, then add that
function name to the hook.

[see [[file:emacs_whats_hook.html][Emacs: What's Hook?]]]

Here's a hook definition, written with lambda.

#+BEGIN_SRC emacs-lisp
    ;; modify nxml-mode's shortcut keys
    (add-hook 'nxml-mode-hook
              (lambda ()
                (local-set-key (kbd "<f8>") 'browse-url-of-buffer)))
#+END_SRC

However, it is better done like this:

#+BEGIN_SRC emacs-lisp
    (defun my-xml-mode-keys ()
      "my keys for `xml-mode'."
      (interactive)
      (local-set-key (kbd "<f8>") 'browse-url-of-buffer))

    (add-hook 'nxml-mode-hook 'my-xml-mode-keys)
#+END_SRC

** Problems of Using Lambda in Hook
   :PROPERTIES:
   :CLASS: calibre11
   :END:

1. Lambda in hook is unreadable when reading value of a hook, such as in
   =describe-variable= or any keybinding help or log.
2. Lambda in hook cannot be removed using =remove-hook=.

Following are details.

when you type some key followed by Ctrl+h, those bound to a lambda shows
as question mark. Example:

#+BEGIN_SRC emacs-lisp
    <tab> m         xah-html-pre-source-code
    <tab> p         xah-html-wrap-p-tag
    <tab> r         ??
    <tab> s         ??
    <tab> u         xah-html-wrap-html-tag
    <tab> w         ??
#+END_SRC

Also, you can lookup a hook's value by Alt+x =describe-variable=. If you
used lambda, it's harder to read.

A hook is a list of functions. If you use function symbols, you can
remove some of your hooked function by =remove-hook=.

#+BEGIN_SRC emacs-lisp
    ;; removing a hook
    (remove-hook 'html-mode-hook 'xah-html-mode-keys)
#+END_SRC

thanks to [Steve Youngs
+https://plus.google.com/117914896572210140511/posts+] for input.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_avoid_lambda_in_hook.html]]

\\
\\
| [[../index_u6.html#article_3][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u26.html>>

| [[../article_5/index_u8.html][下一项]] |
[[../index_u6.html#article_4][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_3/index_u34.html][上一项]] |

--------------

* Emacs: Set Environment Variables within Emacs
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2009-08-04. Last updated: 2013-07-19.

This page shows you how to set environment variables in emacs,
especially if you have problems in Windows emacs of getting aspell or
other unix utils to run.

- When you start emacs from a shell, emacs inherits shell's environment
  variables. (true on Windows, Mac, Linux)
- On Windows, when you start emacs from GUI, emacs also inherit
  environment variables. (on Windows, perm env var is stored in the
  Registry. [see [[http://xahlee.info/mswin/env_var.html][Windows
  Environment Variables Basic Tutorial]]]).
- On Windows, you can start GUI emacs from Windows Console (cmd.exe) or
  [[http://xahlee.info/powershell/index.html][PowerShell]]. You want to
  execute the =bin/runemacs.exe=.
- On Mac OS X, when you start emacs from GUI, emacs does not inherit
  environment variables from your shell, but does inherit the
  system-wide environment variables from =~/.MacOSX/environment.plist=.
- On Mac OS X, you can start GUI emacs from shell, like this:
  =nohup /Applications/Emacs.app/Contents/MacOS/Emacs &=. This way,
  it'll inherit shell's environment variables.

** Setting Environment Variable within Emacs
   :PROPERTIES:
   :CLASS: calibre11
   :END:

You can also set environment variables within emacs without setting them
in the OS.

You might want to do this if you are using Cywin. You want cygwin's bin
paths in emacs, but you don't necessarily want them when running cmd.exe
in Windows console, because you might want that to stay pure Windows.

Here's the elisp code to set environment variable within emacs only:

#+BEGIN_SRC emacs-lisp
    ;; example of setting env var named “path”, by appending a new path to existing path
    (setenv "PATH"
      (concat
       "C:/cygwin/usr/local/bin" ";"
       "C:/cygwin/usr/bin" ";"
       "C:/cygwin/bin" ";"
       (getenv "PATH")
      )
    )
#+END_SRC

- You can use slash =/= and you don't have to use backslash =\=.
- Dir path may end with a path separator =/=, or without.
- the builtin variable path-separator can be used instead of =;=.

#+BEGIN_SRC emacs-lisp
    ;; show env var named path
    (getenv "PATH")
#+END_SRC

(to evaluate elisp code, select it and Alt+x =eval-region=. [see
[[file:elisp_eval_lisp_code.html][Evaluate Emacs Lisp Code]]])

** Emacs's exec-path
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Emacs has a variable named exec-path. Its value is a list of dir paths.
Emacs uses exec-path to find executable binary programs. For example,
when spell checking, emacs will try to find ispell or aspell in
exec-path. When you press Z to compress file in =dired=, emacs will try
to find gzip or gunzip in exec-path. When you call any of emacs
commands: {=diff=, =grep=, =shell=}, emacs will try to find the program
in exec-path too.

If emacs complains that it cannot find ispell, aspell, ftp, gzip, etc,
the problem is probably with your exec-path.

By default, emacs copies the value of =(getenv "PATH")= to exec-path.
So, their values should be identical.

** Difference between exec-path and PATH
   :PROPERTIES:
   :CLASS: calibre11
   :END:

- The value of environment variable “PATH” is used by emacs when you are
  running a shell in emacs, similar to when you are using a shell in a
  terminal.
- The exec-path is used by emacs itself to find programs it needs for
  its features, such as spell checking, file compression, compiling,
  grep, diff, etc.

If you did set the PATH env var within emacs, you probably also want to
adjust your exec-path. Here's a example of setting exec-path:

#+BEGIN_SRC emacs-lisp
    (when (string-equal system-type "windows-nt")
      (setq exec-path
    '(
    "C:/Program Files (x86)/Emacs/emacs/bin/"
    "C:/Program Files (x86)/Emacs/EmacsW32/gnuwin32/bin/"
    "C:/Windows/system32/"
    "C:/Windows/"
    "C:/Windows/System32/Wbem/"
    "C:/Windows/system32/WindowsPowerShell/v1.0/"
    )
     ))
#+END_SRC

The value of =(getenv "PATH")= and exec-path do not need to be the same.

[see [[file:elisp_determine_OS_version.html][Elisp: Determine OS, Emacs
Version, Machine Host Name]]]

** Emacs Lisp Code for Setting PATH and exec-path
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Here's emacs lisp code template to set both PATH and exec-path in sync.

#+BEGIN_SRC emacs-lisp
    (when (string-equal system-type "windows-nt")
      (let (
            (mypaths
             '(
               "C:/Python27"
               ;; "C:/Python32"
               "C:/strawberry/c/bin"
               "C:/strawberry/perl/site/bin"
               "C:/strawberry/perl/bin"

               "C:/Users/h3/AppData/Roaming/npm"
               "C:/Program Files (x86)/nodejs/"

               "C:/cygwin/usr/local/bin"
               "C:/cygwin/usr/bin"
               "C:/cygwin/bin"

               "C:/Program Files (x86)/ErgoEmacs/msys/bin"
               "C:/Program Files (x86)/Mozilla Firefox/"
               "C:/Program Files (x86)/Opera"
               "C:/Program Files (x86)/Safari"
               "C:/Users/h3/AppData/Local/Google/Chrome/Application"
               ) )
            )

        (setenv "PATH" (mapconcat 'identity mypaths ";") )

        (setq exec-path (append mypaths (list "." exec-directory)) )
        ) )
#+END_SRC

** Reference
   :PROPERTIES:
   :CLASS: calibre11
   :END:

- [[../emacs_manual/elisp/System-Environment.html][(info "(elisp) System
  Environment")]]
- [[../emacs_manual/elisp/Subprocess-Creation.html][(info "(elisp)
  Subprocess Creation")]]
- [[http://groups.google.com/group/gnu.emacs.help/browse_frm/thread/92d492157fbd7992/67a41e0f64658ac5][groups.google.com]]

Thanks to Steve Purcell [[https://twitter.com/sanityinc]] for
path-separator.

- [[file:emacs_mswin.html][Emacs in Microsoft Windows FAQ]]
- [[http://xahlee.info/mswin/env_var.html][Windows Environment Variables
  Basic Tutorial]]
- [[http://xahlee.info/powershell/environment_variables.html][Using
  PowerShell to Manage Environment Variables]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_env_var_paths.html]]

\\
\\
| [[../index_u6.html#article_4][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u8.html>>

| [[../article_6/index_u37.html][下一项]] |
[[../index_u6.html#article_5][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_4/index_u26.html][上一项]] |

--------------

* Elisp: Determine OS, Emacs Version, Machine Host Name
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2012-12-30. Last updated: 2020-06-04.

The following are useful for setting up emacs init file on different
machines.

*** Find Operating System Type
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Here's how to find out what operating system emacs is running on.

#+BEGIN_SRC emacs-lisp
    (cond
     ((string-equal system-type "windows-nt")
      (progn
        (message "Microsoft Windows")))
     ((string-equal system-type "darwin") ;  macOS
      (progn
        (message "Mac OS X")))
     ((string-equal system-type "gnu/linux")
      (progn
        (message "Linux"))))
#+END_SRC

*** Find Emacs Version
    :PROPERTIES:
    :CLASS: calibre15
    :END:

The following variables returns emacs version number.

- emacs-version (a dotted string)
- emacs-major-version (a integer type)
- emacs-minor-version (a integer type)

#+BEGIN_SRC emacs-lisp
    ;; full emacs version number. A string.
    emacs-version
    ;; sample value: "24.5.1"

    ;; A integer, emacs major version number.
    emacs-major-version
    ;; sample value: 24

    ;; A integer, emacs minor version number.
    emacs-minor-version
    ;; sample value: 5
#+END_SRC

**** Compare Version String
     :PROPERTIES:
     :CLASS: calibre18
     :END:

- =version==
- =version<=
- =version<==

#+BEGIN_SRC emacs-lisp
    ;; check emacs version
    (if (version< emacs-version "24.4")
        (message "is before 24.4")
      (message "is 24.4 or after"))
#+END_SRC

*** Get Host Name, User Name, Init File Path
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Here's some other useful elisp function or variable to determine machine
name (host name), user name, emacs init path.

- =system-name= → returns the host name.
- =user-login-name= → returns user login name.
- user-emacs-directory → init file dir.
- user-init-file → init file path.

For detail, see:

- [[../emacs_manual/elisp/User-Identification.html][(info "(elisp) User
  Identification")]]
- [[../emacs_manual/elisp/System-Environment.html][(info "(elisp) System
  Environment")]]

*** Check If a Package is Loaded
    :PROPERTIES:
    :CLASS: calibre15
    :END:

[[file:elisp_check_defined.html][Elisp: Check If a {function, variable,
feature} is Defined/Loaded]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/elisp_determine_OS_version.html]]

\\
\\
| [[../index_u6.html#article_5][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u37.html>>

| [[../article_7/index_u29.html][下一项]] |
[[../index_u6.html#article_6][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_5/index_u8.html][上一项]] |

--------------

* Emacs: Install Package with ELPA/MELPA
Starting with emacs 24 (year 2012), it comes with a package system
called ELPA (Emacs Lisp Package Archive). It lets you install and manage
emacs packages. [see [[file:emacs24_features.html][Emacs 24.1 Features
(released 2012-06)]]]

- ELPA is a mechanism for emacs to support packages.
- “ELPA” also means “GNU Emacs Lisp Package Archive”, a emacs lisp
  package repository containing packages sactioned by Free Software
  Foundation.
- MELPA (Milkypostman's Emacs Lisp Package Archive) is a ELPA-compatible
  package repository. It contains some thousands times more packages
  than ELPA.

** Quick Start
Add this to your emacs init:

#+BEGIN_SRC emacs-lisp
    ;; load emacs 24's package system. Add MELPA repository.
    (when (>= emacs-major-version 24)
      (require 'package)
      (add-to-list
       'package-archives
       ;; '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
       '("melpa" . "https://melpa.org/packages/")
       t))
#+END_SRC

restart emacs.

Emacs Alt+x =list-packages=

To install a package:

1. Alt+x =list-packages=.
2. Find the package you want, move cursor to the line, press Enter. A
   description pane will pop up.
3. Put cursor on the pane, press Tab to move cursor to the “Install”
   button then press Enter.
4. The package is now installed.
5. Read the package doc to see what command to start it, if necessary.
   (no restart is needed)

By default, packages are installed at =~/.emacs.d/elpa/=

You can go to that directory, open the package you are interested, and
read the file header doc.

Following are details.

** Listing Available Packages
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =list-packages=.

** Install Packages
   :PROPERTIES:
   :CLASS: calibre11
   :END:

This list is shown in =package-menu-mode=. In this mode, here's the most
useful keys:

- Enter (=package-menu-describe-package=) → Describe the package under
  cursor.
- i (=package-menu-mark-install=) → mark for installation.
- u (=package-menu-mark-unmark=) → unmark.
- d (=package-menu-mark-delete=) → mark for deletion (removal of a
  installed package).
- x (=package-menu-execute=) → for “execute” (start install/uninstall of
  marked items).
- r (=package-menu-refresh=) → refresh the list from server.

(For complete list of keys, Alt+x =describe-mode=)

For example, i want to install the =clojure-mode=. I type i to mark it,
x to run install. Then, i got the following files in my dir, all
automatically byte-compiled and loaded.

#+BEGIN_SRC emacs-lisp
    ~/.emacs.d/elpa/clojure-mode-1.7.1:
    clojure-mode-autoloads.el
    clojure-mode-pkg.el
    clojure-mode-pkg.elc
    clojure-mode.el
    clojure-mode.elc
#+END_SRC

and now i can call =clojure-mode=, and it works right there! (no need to
restart, but for some packages, you may need to turn it on or restart
emacs.)

** Upgrade Packages
   :PROPERTIES:
   :CLASS: calibre11
   :END:

To upgrade packages, just press U x.

- =package-menu-mark-upgrades= 【U】 → For any package that has a new
  version, the installed one will be marked “D” (for delete), and new
  one will be marked “I” (to install).
- =package-menu-execute= 【x】 → run the marked commands on packages.

*WARNING*: package upgrade is not reliable. It is better to upgrade one
package at a time. First delete the package, then install the latest.

** Package Location
   :PROPERTIES:
   :CLASS: calibre11
   :END:

New packages are installed at =~/.emacs.d/elpa/=.

If you want to remove all external packages, you can delete this entire
directory and restart emacs. It is harmless to do so.

** Package Repositories
   :PROPERTIES:
   :CLASS: calibre11
   :END:

The source of the packages are from package servers. There are several.

- [[http://elpa.gnu.org/]] Default. Official GNU Emacs package
  repository. This repository contains the minimal set, and each package
  is copyrighted by Free Software Foundation.
- [[https://marmalade-repo.org/][http://marmalade-repo.org/]] Marmalade.
  More extensive number of packages.
- [[https://melpa.org/]] MELPA. As of 2017-03-25, MELPA has most
  packages, and updated daily.

Note: the emacs package system, called ELPA (aka package.el), is started
by Tom Tromey. Marmalade is started by Nathan Weizenbaum. MELPA is
started by Donald Ephraim Curtis (aka milkypostman)
+http://milkbox.net/+ Thank you guys.

** Helpful Commands and Variables
   :PROPERTIES:
   :CLASS: calibre11
   :END:

package-enable-at-startup. By default, this is =t= (true).

package-load-list. This determines which packages should be loaded at
start-up.

Alt+x =describe-function= or =describe-variable= for details.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_package_system.html]]

\\
\\
| [[../index_u6.html#article_6][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u29.html>>

| [[../article_8/index_u12.html][下一项]] |
[[../index_u6.html#article_7][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_6/index_u37.html][上一项]] |

--------------

* How to Install Emacs Package Manually
By Xah Lee. Date: 2008-07-30. Last updated: 2016-05-20.

This page is a tutorial on how to install emacs packages manually.

If you are using emacs 24 or later, it's better to use its ELPA package
system instead. See: [[file:emacs_package_system.html][Emacs: Install
Package with ELPA/MELPA]].

There are hundreds of useful emacs packages on the web that are not
bundled with emacs. Often, there is no install instruction included, and
you may notice that each's installation methods seem to differ wildly.
The following gives a overview on how emacs package are installed.

** Load the File
   :PROPERTIES:
   :CLASS: calibre11
   :END:

*** Load the File Manually
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Suppose you downloaded a simple emacs package on the web named “xyz.el”.
To use the package, all you have to do is to make emacs load the file.

- Alt+x =load-file= then give the file path.
- Now, emacs is aware of the package. To activate, call the command in
  the package. For example, if the file name is =xyz.el=, then the
  command to activate it is typically Alt+x xyz or xyz-mode.

*** Load File at Startup
    :PROPERTIES:
    :CLASS: calibre15
    :END:

If you want emacs to load the file when it starts, put the file in the
dir =~/.emacs.d/lisp/=, (create that directory if it doesn't exist.)
then put the following in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; Tell emacs where is your personal elisp lib dir
    (add-to-list 'load-path "~/.emacs.d/lisp/")

    ;; load the packaged named xyz.
    (load "xyz") ;; best not to include the ending “.el” or “.elc”
#+END_SRC

*** What is the Purpose of 〔~/.emacs.d/〕 Path?
    :PROPERTIES:
    :CLASS: calibre15
    :END:

By convention, the =~/.emacs.d/= is a dir for all your personal emacs
files. It is the default value of the variable user-emacs-directory. On
Windows, the path is =%HOMEPATH%/.emacs.d/=. [see
[[http://xahlee.info/mswin/env_var.html][Windows Environment Variables
Basic Tutorial]]] Emacs 23 should have created this dir for you. If it's
not there, you can just create it yourself.

By convention, the dir =~/.emacs.d/lisp/= is for packages you manually
installed.

** Byte Compile
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Elisp source code can be byte compiled. When a file is byte compiled, it
loads faster, and the functions will run faster too (about 6 times
faster). For simple packages, the difference in speed is not noticeable.

To compile your code, Alt+x =byte-compile-file=. Once you compiled the
code, you'll get a file with suffix “.elc”.

You can byte-compile multiple files. In =dired=, press m to mark them
(press u to unmark), then press B (=diredp-byte-compile-this-file=) .
[see [[file:file_management.html][Emacs: File Manager, dired]]]

[[../emacs_manual/elisp/Byte-Compilation.html][(info "(elisp) Byte
Compilation")]]

** Auto Activate Mode When Opening File
   :PROPERTIES:
   :CLASS: calibre11
   :END:

This is usually setup by the package, but not always. Here's the basics:

#+BEGIN_SRC emacs-lisp
    ;; setup files ending in “.js” to open in js2-mode
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC

For detail, see: [[file:emacs_auto-activate_a_major-mode.html][Emacs:
Set Default Major Mode]].

** Mode Documentation
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Emacs mode usually comes with doc string. To view it, first activate the
mode (Alt+x mode_name). Once in the mode, Alt+x =describe-mode=. Emacs
will show its doc string.

Robust modes usually have graphical menus too. So, activate the mode,
then you can check what menu commands it has in the menu bar.

Sometimes, a mode comes with complete documentation in =info= format
(file with suffix “.info”). To read the info, type Ctrl+u Alt+x =info=
then type the info file's name.

** What's the difference between {load-file, load, autoload, require}?
   :PROPERTIES:
   :CLASS: calibre11
   :END:

See: [[file:elisp_library_system.html][Emacs Lisp's Library System]].

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_installing_packages.html]]

\\
\\
| [[../index_u6.html#article_7][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u12.html>>

| [[../article_9/index_u10.html][下一项]] |
[[../index_u6.html#article_8][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_7/index_u29.html][上一项]] |

--------------

* Emacs: Tab/Space/Indent Setup
By Xah Lee. Date: 2013-01-05. Last updated: 2020-04-24.

** Set Default Tab Display Width
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    ;; set default tab char's display width to 4 spaces
    (setq-default tab-width 4) ; emacs 23.1 to 26 default to 8

    ;; set current buffer's tab char's display width to 4 spaces
    (setq tab-width 4)
#+END_SRC

** Set Indent Commands to Always Use Space Only
Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (progn
      ;; make indent commands use space only (never tab character)
      (setq-default indent-tabs-mode nil)
      ;; emacs 23.1 to 26, default to t
      ;; if indent-tabs-mode is t, it means it may use tab, resulting mixed space and tab
      )
#+END_SRC

** Set Indent Commands to Always Use Tab Characters Only
   :PROPERTIES:
   :CLASS: calibre11
   :END:

There is no easy way to do it globally.

You need to look into each mode's documentation, and see if the mode
supports that feature.

A simple workaround, is just to insert/delete literal tab yourself for
indentation.

You can insert a literal tab by Ctrl+q Tab .

Or, you can make the Tab key to always insert a literal tab.

#+BEGIN_SRC emacs-lisp
    (defun my-insert-tab-char ()
      "Insert a tab char. (ASCII 9, \t)"
      (interactive)
      (insert "\t"))

    (global-set-key (kbd "TAB") 'my-insert-tab-char)
#+END_SRC

But major mode may override your key. You can force your Tab keybinding
by using a hook for a major mode. [see
[[file:emacs_set_keys_for_major_mode.html][Emacs: Change Major Mode
Keys]]]

** Make Tab Key Do Indent or Completion
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Here's the official GNU Emacs's convention for controlling what the Tab
key does, globally for programing language major modes:

#+BEGIN_SRC emacs-lisp
    ;; make tab key always call a indent command.
    (setq-default tab-always-indent t)

    ;; make tab key call indent command or insert tab character, depending on cursor position
    (setq-default tab-always-indent nil)

    ;; make tab key do indent first then completion.
    (setq-default tab-always-indent 'complete)
#+END_SRC

Note:

- To set globally, use =setq-default= (but major modes may override it.)
- To set for current buffer only, use =setq=
- To set for specific major mode only, use =setq= in a hook. [see
  [[../emacs/emacs_whats_hook.html][Emacs: What's Hook?]]]
- Major mode may not respect these settings (either because it has its
  own design, or because of bad quality). (most or all bundled GNU Emacs
  major modes for programing languages do conform.)
- Major modes may have its own idea of indentation or system to control
  whether indentation insert tab char or space.
- Major modes may have its own idea of controlling whether the Tab key
  should do indentation or completion.

If you really want to control what the Tab key does, just hard set that
key directly to a command of your choice. The disadvantage is that
completion packages such as yasnippet that by default uses Tab key, may
not work automatically.

Here's example:

#+BEGIN_SRC emacs-lisp
    ;; example of a function that just insert a tab char
    (defun my-insert-tab-char ()
      "insert a tab char. (ASCII 9, \t)"
      (interactive)
      (insert "\t")
    )

    (global-set-key (kbd "TAB") 'my-insert-tab-char)
    (global-set-key (kbd "<tab>") 'my-insert-tab-char)

    ;; • the syntax (kbd "TAB") corresponds to ASCII 9 control character, which is also equivalent to (kbd "C-i"). At the core, Emacs uses characters with control bits to represent key press.

    ;; • the syntax (kbd "<tab>") is the tab key, higher level. when emacs is running in GUI, it can distinguish <tab> key vs the ASCII control character ASCII 9.

    ;; • by default (kbd "<tab>") is translated to (kbd "TAB").
#+END_SRC

To make sure that major mode does not override your key, see
[[file:emacs_set_keys_for_major_mode.html][Emacs: Change Major Mode
Keys]]

[see [[file:keyboard_shortcuts.html][Emacs: How to Define Keys]]]

** Make Return Key Also Do Indent of Previous Line
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; make return key also do indent, for current buffer only
    (electric-indent-local-mode 1)

    ;; make return key also do indent, globally
    (electric-indent-mode 1)
#+END_SRC

** Indentation/Completion Commands
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:emacs_indentation.html][Emacs: Indentation/Completion Commands]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html]]

\\
\\
| [[../index_u6.html#article_8][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u10.html>>

| [[../article_10/index_u24.html][下一项]] |
[[../index_u6.html#article_9][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_8/index_u12.html][上一项]] |

--------------

* Emacs: Auto Brackets electric-pair-mode
By Xah Lee. Date: 2011-11-25. Last updated: 2018-09-05.

This page shows you ways to insert brackets in pairs.

** electric-pair-mode
Emacs 24 has a new minor mode =electric-pair-mode=. When on, typing any
left bracket automatically insert the right matching bracket. 

You can have it on always. Put this in your emacs init:

#+BEGIN_SRC emacs-lisp
    ;; auto close bracket insertion. New in emacs 24
    (electric-pair-mode 1)
#+END_SRC

Brackets includes ASCII and Unicode brackets or quotation marks: " ' “”
‘' () {} [] «» ‹› 「」 and more [see
[[http://xahlee.info/comp/unicode_matching_brackets.html][Matching
Brackets in Unicode]]]

Deleting one bracket doesn't delete the other.

Exactly which brackets are auto-closed depends on the current major
mode's syntax table.

[see [[../emacs/elisp_syntax_table.html][Elisp: Syntax Table]]]

If you always want certain brackets be inserted in pairs, you can
customize the variable electric-pair-pairs. Its value should be a
Association List.

[see [[file:elisp_association_list.html][Elisp: Association List]]]

For example, the curly bracket {} isn't auto-closed when in
=emacs-lisp-mode=. You can make it do so, like this:

#+BEGIN_SRC emacs-lisp
    ;; make electric-pair-mode work on more brackets
    (setq electric-pair-pairs
          '(
            (?\" . ?\")
            (?\{ . ?\})))
#+END_SRC

** Better Brackets Pairs Insert Command
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:elisp_insert_brackets_by_pair.html][Emacs: Insert Brackets by
Pair]]

** Highlight Brackets
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:emacs_highlight_parenthesis.html][Emacs: Highlight Brackets
()[]{}]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html]]

\\
\\
| [[../index_u6.html#article_9][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u24.html>>

| [[../article_11/index_u11.html][下一项]] |
[[../index_u6.html#article_10][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_9/index_u10.html][上一项]] |

--------------

* Emacs Isearch Whitespace Regex
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2019-02-22.

In emacs isearch (Alt+x =isearch-forward=) , you can type a space and it
will also search for hyphen - and low line _ and tab and newline.

This this very convenient.

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; for isearch-forward, make these equivalent: space newline tab hyphen underscore
    (setq search-whitespace-regexp "[-_ \t\n]+")
#+END_SRC

But sometimes you want literal. This command makes it easy to toggle.

#+BEGIN_SRC emacs-lisp
    (defun xah-toggle-search-whitespace ()
      "Set `search-whitespace-regexp' to nil or includes hyphen lowline tab newline.
    Explanation: When in isearch (M-x `isearch-forward'), space key can also stand for other chars such as hyphen lowline tab newline. It depend on a regex. It's convenient. But sometimes you want literal. This command makes it easy to toggle.

    Emacs Isearch Space Toggle
    http://ergoemacs.org/emacs/emacs_isearch_space.html
    Version 2019-02-22"
      (interactive)
      (if (string-equal search-whitespace-regexp nil)
          (progn
            (setq search-whitespace-regexp "[-_ \t\n]+")
            (message "Space set to hyphen lowline tab newline space"))
        (progn
          (setq search-whitespace-regexp nil)
          (message "Space set to literal."))))
#+END_SRC

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_isearch_space.html]]

\\
\\
| [[../index_u6.html#article_10][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u11.html>>

| [[../article_12/index_u18.html][下一项]] |
[[../index_u6.html#article_11][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_10/index_u24.html][上一项]] |

--------------

* Emacs: Move Cursor by camelCase, snake_case
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-03-17. Last updated: 2018-09-30.

| normal                   | subword                  | superword                |
|--------------------------+--------------------------+--------------------------|
| #+BEGIN_SRC emacs-lisp   | #+BEGIN_SRC emacs-lisp   | #+BEGIN_SRC emacs-lisp   |
|     someThing▮           |     some▮Thing           |     someThing▮           |
|     some▮-thing          |     some▮-thing          |     some-thing▮          |
|     some▮_thing          |     some▮_thing          |     some_thing▮          |
| #+END_SRC                | #+END_SRC                | #+END_SRC                |
#+CAPTION: emacs normal/subword/superword modes.\\
Cursor position from left to right

Alt+x =subword-mode=. It change all cursor movement/edit commands to
stop in-between the “camelCase” words.

Alt+x =superword-mode= (emacs 24.4) is similar. It treats text like
“x_y” as one word. Useful for “snake_case”.

=subword-mode= and =superword-mode= are mutally exclusive. Turning one
on turns off the other.

To turn them on globally, put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; move cursor by camelCase
    (global-subword-mode 1)
    ;; 1 for on, 0 for off
#+END_SRC

Subword mode is new in Emacs 23.2. [see
[[file:emacs23.2_features.html][Emacs 23.2 Features (released
2010-05)]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_subword-mode_superword-mode.html]]

\\
\\
| [[../index_u6.html#article_11][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u18.html>>

| [[../article_13/index_u13.html][下一项]] |
[[../index_u6.html#article_12][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_11/index_u11.html][上一项]] |

--------------

* Emacs: Ido Mode Setup
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2020-03-02. Last updated: 2020-04-25.

** Make Ido Display Vertically
   :PROPERTIES:
   :CLASS: calibre11
   :END:

You can setup [[file:emacs_ido_mode.html][Ido Mode]] to display choices
vertically, and turn on flex match.

[[file:feed_0/article_12/images/img1_u3.png]]

emacs ido display vertically 2020-04-25

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (progn
      ;; make buffer switch command do suggestions, also for find-file command
      (require 'ido)
      (ido-mode 1)

      ;; show choices vertically
      (if (version< emacs-version "25")
          (progn
            (make-local-variable 'ido-separator)
            (setq ido-separator "\n"))
        (progn
          (make-local-variable 'ido-decorations)
          (setf (nth 2 ido-decorations) "\n")))

      ;; show any name that has the chars you typed
      (setq ido-enable-flex-matching t)

      ;; use current pane for newly opened file
      (setq ido-default-file-method 'selected-window)

      ;; use current pane for newly switched buffer
      (setq ido-default-buffer-method 'selected-window)

      ;; stop ido from suggesting when naming new file
      (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; big minibuffer height, for ido to show choices vertically
    (setq max-mini-window-height 0.5)
#+END_SRC

** Stop ido Suggestion When Writing File
   :PROPERTIES:
   :CLASS: calibre11
   :END:

When you call =write-file= 【Ctrl+x Ctrl+w】 (aka “save as”), when ido
is on, it'll make suggestions. This is annoying because usually you
don't want the name to be a existing file.

Here's how to stop ido suggestion when calling =write-file=.

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (require 'ido)
    ;; stop ido suggestion when doing a save-as
    (define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil)
#+END_SRC

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_ido_setup.html]]

\\
\\
| [[../index_u6.html#article_12][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u13.html>>

| [[../article_14/index_u21.html][下一项]] |
[[../index_u6.html#article_13][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_12/index_u18.html][上一项]] |

--------------

* Emacs: Icomplete Mode
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2017-07-12. Last updated: 2017-07-13.

=icomplete-mode= enhances emacs's name completion when in minibuffer
prompts.

icomplete mode is part of emacs.

[[file:feed_0/article_13/images/img1_u14.png]]

emacs Alt+x =icomplete-mode=

icomplete does completion for any command that prompts for a list of
choices. Here's some of them:

- =execute-extended-command= 【Alt+x】
- =find-file= 【Ctrl+x Ctrl+f】
- =switch-to-buffer= 【Ctrl+x b】
- =dired= 【Ctrl+x d】
- =describe-function= 【Ctrl+h f】
- =describe-variable= 【Ctrl+h v】

** icomplete keys
   :PROPERTIES:
   :CLASS: calibre11
   :END:

- Tab to show choices.
- Enter to select current choice.

- Ctrl+. → next choice
- Ctrl+, → previous choice
- Ctrl+j → select current choice

** Icomplete Mode Setup
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    (progn
      ;; minibuffer enhanced completion
      (require 'icomplete)
      (icomplete-mode 1)
      ;; show choices vertically
      (setq icomplete-separator "\n")
      (setq icomplete-hide-common-prefix nil)
      (setq icomplete-in-buffer t)

      (define-key icomplete-minibuffer-map (kbd "<right>") 'icomplete-forward-completions)
      (define-key icomplete-minibuffer-map (kbd "<left>") 'icomplete-backward-completions))
#+END_SRC

--------------

icomplete is written by Ken Manheimer, first released in 1993. (Ken
Manheimer's home page: [[http://myriadicity.net/]] •
[[https://twitter.com/myriadicity]] )

--------------

See also: [[file:emacs_icomplete_vs_ido.html][Emacs: icomplete vs ido
mode]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_icomplete_mode.html]]

\\
\\
| [[../index_u6.html#article_13][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u21.html>>

| [[../article_15/index_u22.html][下一项]] |
[[../index_u6.html#article_14][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_13/index_u13.html][上一项]] |

--------------

* Emacs: Stop Cursor Going into Minibuffer Prompt
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-06-06. Last updated: 2018-07-11.

in emacs minibuffer prompt, when you press the left arrow key, the
cursor will move back all the way over the prompt text. This is annoying
because user often will hold down Alt+b to move back by word to edit,
and when user starts to type something, emacs will say “This is
read-only”. Then you have to manually move cursor out of the prompt. You
can try it now by Alt+x =query-replace=.

Here's how to set the cursor not going into prompt. Put the following in
your emacs init.

#+BEGIN_SRC emacs-lisp
    ;; minibuffer, stop cursor going into prompt
    (customize-set-variable
     'minibuffer-prompt-properties
     (quote (read-only t cursor-intangible t face minibuffer-prompt)))
#+END_SRC

(2016-06-17 Thanks to Clément Pit-Claudel)

Here's alternative way to do it. Might work better if emacs changed in
the future by the time you read this.

1. Alt+x =customize-group=.
2. Type “minibuffer”.
3. scroll down to “Minibuffer Prompt Properties”.
4. Check box “Don't Enter”.
5. Go to the top, click “Apply and Save”

[[file:feed_0/article_14/images/img1_u10.png]]

M-x customize-group, “minibuffer”.

After that, emacs will insert the following to your init file:

#+BEGIN_SRC emacs-lisp
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(minibuffer-prompt-properties
       (quote
        (read-only t cursor-intangible t face minibuffer-prompt))))
#+END_SRC

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html]]

\\
\\
| [[../index_u6.html#article_14][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u22.html>>

| [[../article_16/index_u36.html][下一项]] |
[[../index_u6.html#article_15][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_14/index_u21.html][上一项]] |

--------------

* Emacs: Sync Copy/Paste Clipboards with Linux X11
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2012-07-17. Last updated: 2014-08-31.

In Linux, if copy/paste doesn't work with other apps, you can add this:

#+BEGIN_SRC emacs-lisp
    ;; after copy Ctrl+c in Linux X11, you can paste by `yank' in emacs
    (setq x-select-enable-clipboard t)

    ;; after mouse selection in X11, you can paste by `yank' in emacs
    (setq x-select-enable-primary t)
#+END_SRC

In X11, there are 2 major copy/paste mechanisms:

- ① *primary selection*. When you select a text using mouse, the text is
  automatically put into the primary selection, and middle click will
  paste it.
- ② *clipboard*. X11's clipboard is similar to the clipboard in Mac or
  Windows. You copy/paste by menu or keyboard.

The primary selection and clipboard are independent.

References:

- [[../emacs_manual/elisp/Window-System-Selections.html][(info "(elisp)
  Window System Selections")]]
- X Selections, Cut Buffers, and Kill Rings ~2002-01-01 By Jamie
  Zawinski. At [[http://www.jwz.org/doc/x-cut-and-paste.html]]
- [[https://en.wikipedia.org/wiki/X_Window_selection][X Window
  selection]]

If you want to sync X11's “primary selection” and “clipboard” always,
see:
[[http://xahlee.info/linux/linux_sync_x11_primary_selection_and_clipboard.html][Linux:
Sync X11 Primary Selection and Clipboard]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_x11_sync_clipboard.html]]

\\
\\
| [[../index_u6.html#article_15][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u36.html>>

| [[../article_17/index_u32.html][下一项]] |
[[../index_u6.html#article_16][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_15/index_u22.html][上一项]] |

--------------

* Emacs: Set Default Major Mode
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2008-07-30. Last updated: 2019-11-06.

** Set Default Major Mode for New Empty Buffer
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Put this in your init file:

#+BEGIN_SRC emacs-lisp
    (setq initial-major-mode 'js-mode)
#+END_SRC

** Associate Major Mode by File Name Extension
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Use auto-mode-alist to associate a major mode with file name extension.

#+BEGIN_SRC emacs-lisp
    ;; setup files ending in “.js” to open in js2-mode
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC

auto-mode-alist is a built-in variable. Its value is a association list.
Each key is a regex string, and value is mode name symbol.

[see [[file:elisp_association_list.html][Elisp: Association List]]]

Note: in the elisp code above, the double backslash in the string
=\\.js\\'= is used to escape the backslash. So, the regex engine just
got =\.js\'=. The =\.= is to match a period. The =\'= is one of emacs
special regex syntax, to match end of a string (not including end of a
line that's not end of string. End of line is =$=). (See also:
[[file:emacs_regex.html][emacs regex tutorial]].)
[[../emacs_manual/elisp/Regexp-Backslash.html][(info "(elisp) Regexp
Backslash")]]

You can see the value of auto-mode-alist by Alt+x =describe-variable=.

*** Remove File Extension Association
    :PROPERTIES:
    :CLASS: calibre15
    :END:

You can remove file name association with a major mode. Example:

#+BEGIN_SRC emacs-lisp
    ;; remove any file name suffix associated with js-mode
    (setq auto-mode-alist (rassq-delete-all 'js-mode auto-mode-alist))
#+END_SRC

To check if a mode is in the list, eval the following and look at the
output. (=view-echo-area-messages=)

#+BEGIN_SRC emacs-lisp
    ;; check if js-mode is in the list.
    (rassoc 'js-mode auto-mode-alist)
#+END_SRC

[see [[file:elisp_eval_lisp_code.html][Evaluate Emacs Lisp Code]]]

Normally, you should not need to remove items in =auto-mode-alist=.
Simply add to the front using =add-to-list=.

** Associate Major Mode by First Line in File
   :PROPERTIES:
   :CLASS: calibre11
   :END:

The magic-mode-alist is for associating first line of a file with a
mode. (when the line otherwise isn't the unix shebang =#!…= or embedded
elisp variable.) Use it like this:

#+BEGIN_SRC emacs-lisp
    ;; if first line of file matches, activate nxml-mode
    (add-to-list 'magic-mode-alist '("<!DOCTYPE html .+DTD XHTML .+>" . nxml-mode) )
#+END_SRC

The magic-mode-alist is variable. Its value is a list of pairs. The
first element is a regex string, the second is a mode name (of type
symbol). Emacs tries to match the first line of a file to values in
magic-mode-alist. If there's a match, it sets the buffer to that mode.

** How Emacs Determines Which Major Mode to Load
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Emacs determines what mode to activate by the following mechanisms, in
order. If a match is found, the process stops.

1. Look for a special emacs-specific syntax in the file. For example: if
   first line in the file contains =-*- mode: xyz-*-=, emacs will load
   “xyz-mode”. This is from a general mechanism for emacs to load elisp
   variables. (See: [[../emacs_manual/emacs/File-Variables.html][(info
   "(emacs) File Variables")]].) This has the top priority, but this
   mechanism is not the usual way for programing language files to
   associate with a major mode.
2. Check the first line in the file for unix “shebang” syntax (For
   example, =#!/usr/bin/perl=) and match it with interpreter-mode-alist.
3. Trys to match first line text with magic-mode-alist. (As of emacs
   24.1.1, by default this list is empty.)
4. Match the file name with auto-mode-alist.

[[../emacs_manual/emacs/Choosing-Modes.html][(info "(emacs) Choosing
Modes")]]

Note that when you install a new package, some has the file association
setting code within the package, while others ask you to put a few lines
in your emacs init file instead.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_auto-activate_a_major-mode.html]]

\\
\\
| [[../index_u6.html#article_16][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u32.html>>

| [[../article_18/index_u9.html][下一项]] |
[[../index_u6.html#article_17][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_16/index_u36.html][上一项]] |

--------------

* Emacs: Turn Off Backup
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2005-12-30. Last updated: 2019-11-05.

*** disable emacs's automatic backup~ file
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Put this code in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
#+END_SRC

*** disable emacs's #autosave#
    :PROPERTIES:
    :CLASS: calibre15
    :END:

[[file:emacs_auto_save.html][Emacs: Auto Save]]

*** set emacs so that all backups are placed into one backup folder
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Put the following in your emacs init:

#+BEGIN_SRC emacs-lisp
    ;; backup in one place. flat, no tree structure
    (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
#+END_SRC

This will create backup files flat in the given dir, and the backup file
names will have “!” characters in place of the directory separator.

For example:

- file =/A/B/web/xyz/myfile.txt=
- backup root dir =/A/B/.emacs.d/backup=
- backup at =/A/B/.emacs.d/backup/A!B!web!emacs!myfile.txt~=

If you use long file names or many nested dirs, this scheme will reach
file name length limit quickly. (Mac and Windows allow 255 chars for
file name.)

*** set emacs backups in one dir with tree structure
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Put the following in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; make backup to a designated dir, mirroring the full path

    (defun my-backup-file-name (fpath)
      "Return a new file path of a given file path.
    If the new path's directories does not exist, create them."
      (let* (
            (backupRootDir "~/.emacs.d/backup/")
            (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
            (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
            )
        (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
        backupFilePath
      )
    )

    (setq make-backup-file-name-function 'my-backup-file-name)
#+END_SRC

The above will mirror tree structure to the backup dir.

For example:

- file =/A/B/web/xyz/myfile.txt=
- backup root dir =/A/B/.emacs.d/backup/=
- backup at =/A/B/.emacs.d/backup/A/B/web/xyz/myfile.txt~=

[[../emacs_manual/elisp/Backup-Files.html][(info "(elisp) Backup
Files")]] [[../emacs_manual/emacs/Backup.html][(info "(emacs) Backup")]]

*** stop emacs's backup changing the file's creation date of the
original file
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Put this code in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (setq backup-by-copying t)
#+END_SRC

Explanation: when emacs does a backup, by default it renames the
original file into the backup file name, then create a new file and
insert new file content into it. This effectively destroys the creation
date of your file. (If a file is created in 2001, and you modified it
today, the file's creation date will become today. Note: unixes
(including Linux and BSD) do not record file creation date, so this
doesn't matter. (ctime is not creation date.) Microsoft Windows and Mac
OS X do record file creation date.).

** How to Delete Emacs Backup Files
   :PROPERTIES:
   :CLASS: calibre11
   :END:

To delete all backup files in current dir:

1. Alt+x =dired=.
2. =dired-flag-backup-files= 【~】 → mark all backup files for deletion.
3. =dired-do-flagged-delete= 【x】 → (execute) delete files flagged for
   deletion.

[see [[file:file_management.html][Emacs: File Manager, dired]]]

Or, you can use the linux shell command:

#+BEGIN_SRC emacs-lisp
    # delete all file whose name end in ~. All subdir too.
    find . -name "*~" -delete
#+END_SRC

You can setup a abbrev to quickly type the shell line.

[see [[../emacs/emacs_abbrev_mode.html][Emacs: Abbrev Mode]]]

Even more efficient is to set a command that lets you pick a shell
command. See: [[file:emacs_interactive_abbrev.html][Emacs: Interactive
Abbrev]].

** Backup on Demand
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:elisp_make-backup.html][Emacs: Backup Current File]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html]]

\\
\\
| [[../index_u6.html#article_17][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u9.html>>

| [[../article_19/index_u16.html][下一项]] |
[[../index_u6.html#article_18][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_17/index_u32.html][上一项]] |

--------------

* Emacs: Auto Save
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-08. Last updated: 2019-11-05.

*** Real Auto Save File
    :PROPERTIES:
    :CLASS: calibre15
    :END:

put this in emacs init.

#+BEGIN_SRC emacs-lisp
    (defun xah-save-all-unsaved ()
      "Save all unsaved files. no ask.
    Version 2019-11-05"
      (interactive)
      (save-some-buffers t ))

    ;; when switching out of emacs, all unsaved files will be saved
    (add-hook 'focus-out-hook 'xah-save-all-unsaved)
#+END_SRC

*** disable emacs's “#auto-save#” backup
    :PROPERTIES:
    :CLASS: calibre15
    :END:

#+BEGIN_SRC emacs-lisp
    ;; stop creating those #auto-save# files
    (setq auto-save-default nil)
#+END_SRC

emacs has =auto-save-mode=, however, it's not what you think.

Emacs's =auto-save-mode= periodically *saves a copy* of your file with
the name =#filename#=.

When you save the file, those #files# are deleted automatically.

In case of crash or electricity outage, when you open a file afterward,
emacs will detect those #files# and ask if you want to recover.

But the problem is, even if no crash, in lots of situations (such as
sync to server), you'll find those #files# annoying, because they are
often symbolic links to non-existent files, and will cause tools like
rsync to complain or choke some dir walk scripts.

See also: [[file:emacs_set_backup_into_a_directory.html][Emacs: Turn Off
Backup]]

*** stop emacs from creating .#lock file links
    :PROPERTIES:
    :CLASS: calibre15
    :END:

[[file:feed_0/article_18/images/img1_u7.png]]

emacs lock file problem 2018-10-12

emacs backup is so annoying. even when you have it off (setq
auto-save-default nil) , it still creates temp # files. which crashes
script that traverse dir.

Solution:

#+BEGIN_SRC emacs-lisp
    (setq create-lockfiles nil)
#+END_SRC

This will completely stop emacs from creating temoporary symbolic link
file named “#something”.

(disable lock file may be a problem if you have situations where a file
is being edited by different people or instances of emacs.)

2018-10-12 thanks to Dale Hagglund [
https://twitter.com/DaleHagglund/status/1050786629844004865 accessed:
2018-10-12] for create-lockfiles

** alternative solution and problem
   :PROPERTIES:
   :CLASS: calibre11
   :END:

You can set emacs to auto save files directly, instead of creating those
#filename#.

Put the following in your emacs init:

#+BEGIN_SRC emacs-lisp
    (setq auto-save-default t)
    (setq auto-save-visited-file-name t)
#+END_SRC

*** Problems
    :PROPERTIES:
    :CLASS: calibre15
    :END:

However, this does not work well. Emacs still generates those #files#,
this time, named like this:

#+BEGIN_SRC emacs-lisp
    .#xxtemp.201601134145.44920.el -> xah@xah-p6813w.21261:1452244010
#+END_SRC

If you have scripts going thru your machine, you get this error:

#+BEGIN_SRC emacs-lisp
    error: cannot open /home/john/web/.#vocabulary.html No such file or directory
#+END_SRC

[[../emacs_manual/elisp/Auto_002dSaving.html][(info "(elisp)
Auto-Saving")]]

There are probably ways to fix this, with hooks or timer, but i haven't
looked into.

2013-08-20 thanks to xfq [[[https://github.com/xfq/]]] and finalpatch
[[[http://www.weibo.com/u/1885517634]]]

2016-01-11 thanks to [[http://irreal.org/blog/?p=4867]], Anna Pawlicka
(@AnnaPawlicka)

- [[file:emacs_save_restore_opened_files.html][Emacs: Restore Opened
  Files, Windows Config]]
- [[file:emacs_save_cursor_position.html][Emacs: Save Cursor Position]]
- [[file:emacs_recentf.html][Emacs: Open Recently Opened File]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_auto_save.html]]

\\
\\
| [[../index_u6.html#article_18][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u16.html>>

| [[../article_20/index_u7.html][下一项]] |
[[../index_u6.html#article_19][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_18/index_u9.html][上一项]] |

--------------

* Emacs: Restore Opened Files, Windows Config
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-03-18. Last updated: 2019-02-20.

emacs has =desktop-save-mode=. When on, it save and restore all
previously opened files in last emacs session, and also previous windows
configuration (size, position, etc.)

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; save/restore opened files and windows config
    (desktop-save-mode 1) ; 0 for off
#+END_SRC

** Starting Emacs Without Opening Last Session's Files
   :PROPERTIES:
   :CLASS: calibre11
   :END:

To start emacs without opening last session's files, start it by:

=emacs --no-desktop=

This is useful because sometimes you have a corrupted desktop file.

** Desktop File Path Location
   :PROPERTIES:
   :CLASS: calibre11
   :END:

By default, the temp file used by emacs to store your “desktop” status
is at =~/.emacs.d/.emacs.desktop=.

The desktop file path is controlled by the variable desktop-dirname and
desktop-base-file-name.

Alt+x =describe-variable=, type “desktop-”, then press Tab, to see all
desktop mode's variables.

Alt+x =customize-group= type “desktop”, to set preferences. [see
[[file:emacs_custom_system.html][Emacs: M-x customize Tutorial]]]

** desktop-save-mode Changes in Emacs 24.4
   :PROPERTIES:
   :CLASS: calibre11
   :END:

In emacs 24.4: new variable desktop-save. Default is =t=. When =t=,
desktop are automatically saved when you quit.

In emacs 24.4: new variable desktop-auto-save-timeout. Default value is
=30= (seconds). It specifies the time interval to periodically save
“desktop”. Before, it saves only when you quit emacs.

In emacs 24.4: New variable desktop-restore-frames. Default value is t.
When t, save and restore the frame and window configuration.

More options for restoring windows, see:
desktop-restore-in-current-display, desktop-restore-reuses-frames,
desktop-restore-forces-onscreen

Alt+x =describe-variable= to see a variable's value and documentation.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_save_restore_opened_files.html]]

\\
\\
| [[../index_u6.html#article_19][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u7.html>>

| [[../article_21/index_u31.html][下一项]] |
[[../index_u6.html#article_20][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_19/index_u16.html][上一项]] |

--------------

* Emacs: Save Cursor Position
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-05-26. Last updated: 2019-02-26.

You can save the cursor position for every file you opened. So, next
time you open the file, the cursor will be at the position you last
opened it.

Put this code in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; remember cursor position, for emacs 25.1 or later
    (save-place-mode 1)
#+END_SRC

For before emacs 25.1, the syntax is different. Use this code:

#+BEGIN_SRC emacs-lisp
    ;; remember cursor position
    (if (version< emacs-version "25.0")
        (progn
          (require 'saveplace)
          (setq-default save-place t))
      (save-place-mode 1))
#+END_SRC

By default, the cursor position info is saved at =~/.emacs.d/places=

The file location is controlled by the variable save-place-file.

=saveplace.el= is written by Karl Fogel since 1993. Karl is also the
author of Emacs's Bookmark Feature. [see [[file:bookmark.html][Emacs:
Bookmark]]] Thanks Karl.

**** Emacs Show Line/Column Number
     :PROPERTIES:
     :CLASS: calibre18
     :END:

- [[file:emacs_line_number_mode.html][Show Line Numbers]]
- [[file:emacs_column_number_mode.html][Show Cursor Position]]
- [[http://ergoemacs.org/tmp/calibre_4.99.4_tmp_jtk2bf13/eb5s3ele_plumber/feed_0/article_20/emacs_save_cursor_position.xhtml][Save
  Cursor Position]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_save_cursor_position.html]]

\\
\\
| [[../index_u6.html#article_20][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u31.html>>

| [[../article_22/index_u35.html][下一项]] |
[[../index_u6.html#article_21][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_20/index_u7.html][上一项]] |

--------------

* Emacs: Dired Customization
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2011-07-10. Last updated: 2020-04-19.

Tips for setting up emacs's dired. [see
[[file:file_management.html][Emacs: File Manager, dired]]]

** Jump to File in Dired
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (require 'dired-x)
#+END_SRC

In any file buffer, Alt+x =dired-jump= 【Ctrl+x Ctrl+j】 to jump to the
directory of current buffer.

** Delete Directory, Copy Directory
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; allow dired to delete or copy dir
    (setq dired-recursive-copies (quote always)) ; “always” means no asking
    (setq dired-recursive-deletes (quote top)) ; “top” means ask once
#+END_SRC

Then in dired, Alt+x =dired-do-delete= 【D】 to delete directory.

** Target Split Window
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Copy from one dired dir to the next dired dir shown in a split window

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (setq dired-dwim-target t)
#+END_SRC

Eval the above or restart emacs. [see
[[file:elisp_eval_lisp_code.html][Evaluate Emacs Lisp Code]]]

Now, go to dired, then Alt+x =split-window-below=, then go to another
dired dir. Now, when you press C to copy, the other dir in the split
pane will be default destination. Same for =dired-do-rename= 【R】 and
others.

** Hide File Owner Permission Info
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:feed_0/article_21/images/img1_u9.png]]

Alt+x =dired-hide-details-mode=. Top is normal dired, bottom is dired
with hide details on.

In dired, Alt+x =dired-hide-details-mode=. Key is (.

If you want it always on, add a hook. Like this:

#+BEGIN_SRC emacs-lisp
    (defun xah-dired-mode-setup ()
      "to be run as hook for `dired-mode'."
      (dired-hide-details-mode 1))
    (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
#+END_SRC

** make dired use the same buffer for viewing directory
   :PROPERTIES:
   :CLASS: calibre11
   :END:

In dired, Alt+x =dired-find-alternate-file= 【a】 to open the
file/directory without creating a new buffer.

If you want Enter and ^ (parent dir) to use the same buffer, put the
following in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (require 'dired )

    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file

    (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
#+END_SRC

** Hide Some Files
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =dired-do-kill-lines= 【k】 to hide marked files.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_dired_tips.html]]

\\
\\
| [[../index_u6.html#article_21][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u35.html>>

| [[../article_23/index_u1.html][下一项]] |
[[../index_u6.html#article_22][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_21/index_u31.html][上一项]] |

--------------

* Emacs: Font Setup
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2012-10-22. Last updated: 2020-05-27.

This page shows you how to set font for emacs.

** Change font size
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =text-scale-adjust=, then press + to increase, - to decrease. You
can press them repeatedly. Press0 to set it back to default size. Press
any key to exit.

Or, Alt+x =text-scale-increase=.

#+BEGIN_SRC emacs-lisp
    (text-scale-increase 2)  ; 2 steps larger
    (text-scale-normal-size) ; default size
    (text-scale-decrease 2)  ; 2 steps smaller
#+END_SRC

You can make mouse wheel with Ctrl key to increase/descrease font size.
See: [[file:emacs_mouse_wheel_config.html][Emacs: Mouse Config]].

To set font size globally in init file, just put the point size in the
font name:

#+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-10"))
#+END_SRC

[see [[file:elisp_determine_OS_version.html][Elisp: Determine OS, Emacs
Version, Machine Host Name]]]

** Find the current font used
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =describe-char=, then look at the line in “display:”. It shows the
font used for the character under cursor.

[[file:feed_0/article_22/images/img1_u13.png]]

emacs Alt+x =describe-char=

** Set default font
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Use =set-frame-font= to set font and size for all windows. Like this:

#+BEGIN_SRC emacs-lisp
    (when (member "Consolas" (font-family-list))
      (set-frame-font "Consolas" t t))
#+END_SRC

You can add a font size:

#+BEGIN_SRC emacs-lisp
    (when (member "Consolas" (font-family-list))
      (set-frame-font "Consolas-14" t t))
#+END_SRC

or

#+BEGIN_SRC emacs-lisp
    ;; set default font
    (cond
     ((string-equal system-type "windows-nt") ; Microsoft Windows
      (when (member "Consolas" (font-family-list))
        (set-frame-font "Consolas" t t)))
     ((string-equal system-type "darwin") ; macOS
      (when (member "Menlo" (font-family-list))
        (set-frame-font "Menlo" t t)))
     ((string-equal system-type "gnu/linux") ; linux
      (when (member "DejaVu Sans Mono" (font-family-list))
        (set-frame-font "DejaVu Sans Mono" t t))))
#+END_SRC

** Change Font Interactively
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Chose the menu 〖Options ▸ Set Default Font...〗, then 〖Options ▸ Save
Options〗.

Or, Alt+x =eval-region= one of the following code:

#+BEGIN_SRC emacs-lisp
    (set-frame-font "DejaVu Sans Mono-10")  ; set font for current window
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; set font for all windows. keep window size fixed
    (set-frame-font "DejaVu Sans Mono-10" t t)

    ;; set font for all windows. don't keep window size fixed
    (set-frame-font "DejaVu Sans Mono-10" nil t)
#+END_SRC

** List available fonts
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    (print (font-family-list))
#+END_SRC

Select the elisp code, then Alt+x =eval-region=. [see
[[file:elisp_eval_lisp_code.html][Evaluate Emacs Lisp Code]]]

You can see the result in “*Messages*” buffer. =view-echo-area-messages=
【Ctrl+h e】.

To list fonts in Linux, in terminal, type =fc-list=.

For linux, see [[http://xahlee.info/linux/linux_fonts.html][Standard
Fonts on Linuxes]]

** Check if a font exist
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    ;; returns true if Symbola exists
    (member "Symbola" (font-family-list))
#+END_SRC

[see [[file:elisp_eval_lisp_code.html][Emacs: Evaluate Elisp Code]]]

** Set Font for Emoji
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    ;; set font for emoji
    (set-fontset-font
     t
     '(#x1f300 . #x1fad0)
     (cond
      ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
      ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
      ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
      ((member "Symbola" (font-family-list)) "Symbola")
      ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji"))
     ;; Apple Color Emoji should be before Symbola, but Richard Stallman disabled it.
     ;; GNU Emacs Removes Color Emoji Support on the Mac
     ;; http://ergoemacs.org/misc/emacs_macos_emoji.html
     ;;
     )
#+END_SRC

[see [[http://xahlee.info/comp/unicode_emoticons.html][Unicode Emoji 😄 😱
😸 👸 👽 🙋]]]

[see [[http://xahlee.info/comp/unicode_font_download.html][Download Free
Unicode Fonts]]]

** Set Font for Chinese
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    (cond
     ;; specify font for all chinese characters
     ((string-equal system-type "windows-nt")
      (set-fontset-font
       t
       '(#x4e00 . #x9fff)
       (cond
        ((member "Microsoft YaHei" (font-family-list)) "Microsoft YaHei")
        ((member "PMingLiU" (font-family-list)) "PMingLiU")
        ((member "SimHei" (font-family-list)) "SimHei")
        ((member "Microsoft YaHei UI" (font-family-list)) "Microsoft YaHei UI")
        ((member "MingLiU" (font-family-list)) "MingLiU")
        ((member "SimHei" (font-family-list)) "SimHei")
        ((member "DengXian" (font-family-list)) "DengXian")
        ((member "KaiTi" (font-family-list)) "KaiTi")
        ((member "SimSun" (font-family-list)) "SimSun"))))
     ((string-equal system-type "darwin")
      (cond
       ((member "Heiti SC" (font-family-list)) "Heiti SC")
       ((member "Heiti TC" (font-family-list)) "Heiti TC")
       ((member "Songti SC" (font-family-list)) "Songti SC")
       ((member "Songti TC" (font-family-list)) "Songti TC")
       ((member "Kaiti SC" (font-family-list)) "Kaiti SC")
       ((member "BiauKai" (font-family-list)) "BiauKai")))
     ((string-equal system-type "gnu/linux")
      (cond
       ((member "WenQuanYi Micro Hei" (font-family-list)) "WenQuanYi Micro Hei"))))
#+END_SRC

Note: if you don't set this, and if a buffer has Chinese character, then
emacs operation such as moving cursor will be noticeably slow, like 1/3
of a second when you press arrow key. This is so at least on Microsoft
Windows 10, 2020-05-28.

** How to Display Emoji on MacOS
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:feed_0/article_22/images/img2_u3.png]]

Emacs on macOS does not do emoji by default, 2017-09-22

FSF GNU emacs disabled displaying color emoji on Mac, so that Mac won't
work better than linux. See [[../misc/emacs_macos_emoji.html][GNU Emacs
Removes Color Emoji Support on the Mac]]

Solution:

download font “symbola” at
[[http://xahlee.info/comp/unicode_font_download.html][Download Free
Unicode Fonts]]

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; specify font for all unicode characters
    (when (member "Symbola" (font-family-list))
      (set-fontset-font t 'unicode "Symbola" nil 'prepend))
#+END_SRC

[[file:feed_0/article_22/images/img3_u1.png]]

Emacs on MacOS, displaying emoji using font Symbola, 2017-09-22

** How to install font
   :PROPERTIES:
   :CLASS: calibre11
   :END:

- Microsoft Windows: double click on the font.
- MacOS: double click on the font.
- [[http://xahlee.info/linux/linux_install_fonts.html][Linux: How to
  Install Font, List Fonts]]

Restart emacs. Emacs should see it.

** Reference
   :PROPERTIES:
   :CLASS: calibre11
   :END:

- [[../emacs_manual/emacs/Fonts.html][(info "(emacs) Fonts")]]
- [[../emacs_manual/elisp/Fontsets.html][(info "(elisp) Fontsets")]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_list_and_set_font.html]]

\\
\\
| [[../index_u6.html#article_22][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u1.html>>

| [[../article_24/index_u33.html][下一项]] |
[[../index_u6.html#article_23][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_22/index_u35.html][上一项]] |

--------------

* Emacs: Proportional Font
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2017-04-29. Last updated: 2020-09-01.

Alt+x =variable-pitch-mode= to toggle between fixed-width and
variable-width font. (monospace vs proportional)

The font change is for current file/buffer only.

(For setting up font in init file, see
[[file:emacs_list_and_set_font.html][Emacs: Font Setup]])

[[file:feed_0/article_23/images/img1_u4.png]]

Alt+x =variable-pitch-mode=

[[file:feed_0/article_23/images/img2_u2.png]]

Alt+x =variable-pitch-mode= , for reading code.

Proportional font is useful for reading info doc, email, etc.
Proportional font is easier to read, and shows 20 or more characters per
line. It also works great for coding too (except
[[http://xahlee.info/python/python3_basics.html][Python]]). Try it. You
may be surprised.

(Thanks to Oscar Carlsson for suggesting variable-pitch-mode.)

** Setup Proportional Font by Major Mode
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Here's how to make some mode always use proportional font.

#+BEGIN_SRC emacs-lisp
    (progn
      ;; use variable-width font for some modes
      (defun xah-use-variable-width-font ()
        "Set current buffer to use variable-width font."
        (variable-pitch-mode 1)
        ;; (text-scale-increase 1 )
        )
      (add-hook 'nxml-mode-hook 'xah-use-variable-width-font)
      (add-hook 'emacs-lisp-mode-hook 'xah-use-variable-width-font)
      (add-hook 'js-mode-hook 'xah-use-variable-width-font)
      (add-hook 'css-mode-hook 'xah-use-variable-width-font)
      (add-hook 'html-mode-hook 'xah-use-variable-width-font)
      (add-hook 'mhtml-mode-hook 'xah-use-variable-width-font))
#+END_SRC

[see [[file:emacs_list_and_set_font.html][Emacs: Font Setup]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_proportional_font.html]]

\\
\\
| [[../index_u6.html#article_23][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u33.html>>

| [[../article_25/index_u27.html][下一项]] |
[[../index_u6.html#article_24][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_23/index_u1.html][上一项]] |

--------------

* Emacs: Cycle Fonts by Command
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2010-04-10. Last updated: 2019-11-02.

These commands lets you quickly switch fonts for comparison.

** Cycle between 2 Fonts
   :PROPERTIES:
   :CLASS: calibre11
   :END:

This command cycles between 2 fonts.

#+BEGIN_SRC emacs-lisp
    (defun xah-cycle-font-2 (@n)
      "Change font in current window between 2 fonts.

    URL `http://ergoemacs.org/emacs/emacs_switching_fonts.html'
    Version 2015-09-21"
      (interactive "p")
      ;; this function sets a property “state”. It is a integer. Possible values are 0 to length of $fontList
      (let (
            ($fontList '("Courier-14" "Menlo-14"))
            $fontToUse
            $stateBefore
            $stateAfter)

        (setq $stateBefore (if (get 'xah-cycle-font-2 'state) (get 'xah-cycle-font-2 'state) 0))
        (setq $stateAfter (% (+ $stateBefore (length $fontList) @n) (length $fontList)))
        (put 'xah-cycle-font-2 'state $stateAfter)

        (setq $fontToUse (nth $stateAfter $fontList))
        (set-frame-parameter nil 'font $fontToUse)
        (message "Font set to: %s" $fontToUse)))
#+END_SRC

** Cycle Multiple Fonts
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Here's commands that switch among your font choices for current window.

#+BEGIN_SRC emacs-lisp
    (defvar xah-font-list nil "A list of fonts for `xah-cycle-font' to cycle from.")

    (setq xah-font-list
          (cond
           ((string-equal system-type "windows-nt")
            '(
              "Courier-10"
              "Lucida Console-10"
              "Segoe UI Symbol-12"
              "Lucida Sans Unicode-10"
              ))
           ((string-equal system-type "gnu/linux")
            '(
              "DejaVu Sans Mono-10"
              "DejaVu Sans-10"
              "Symbola-13"
              ))
           ((string-equal system-type "darwin") ; Mac
            '("Courier-14"
              "Menlo-14"))))

    (defun xah-cycle-font (@n)
      "Change font in current frame.
    Each time this is called, font cycles thru a predefined list of fonts in the variable `xah-font-list' .
    If @n is 1, cycle forward.
    If @n is -1, cycle backward.
    See also `xah-cycle-font-next', `xah-cycle-font-previous'.

    URL `http://ergoemacs.org/emacs/emacs_switching_fonts.html'
    Version 2015-09-21"
      (interactive "p")
      ;; this function sets a property “state”. It is a integer. Possible values are any index to the fontList.
      (let ($fontToUse $stateBefore $stateAfter )
        (setq $stateBefore (if (get 'xah-cycle-font 'state) (get 'xah-cycle-font 'state) 0))
        (setq $stateAfter (% (+ $stateBefore (length xah-font-list) @n) (length xah-font-list)))
        (setq $fontToUse (nth $stateAfter xah-font-list))
        (set-frame-font $fontToUse t)
        ;; (set-frame-parameter nil 'font $fontToUse)
        (message "Current font is: %s" $fontToUse )
        (put 'xah-cycle-font 'state $stateAfter)))

    (defun xah-cycle-font-next ()
      "Switch to the next font, in current window.
    See `xah-cycle-font'."
      (interactive)
      (xah-cycle-font 1))

    (defun xah-cycle-font-previous ()
      "Switch to the previous font, in current window.
    See `xah-cycle-font'."
      (interactive)
      (xah-cycle-font -1))
#+END_SRC

Modify the variable list “xah-font-list” above, so that you can use this
function to cycle among the fonts of your choice.

To get a list of fonts in emacs, see
[[file:emacs_list_and_set_font.html][Emacs: Font Setup]].

You can set Ctrl+F7 and Ctrl+F8 to switch to the prev/next font. [see
[[file:keyboard_shortcuts.html][Emacs: How to Define Keys]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_switching_fonts.html]]

\\
\\
| [[../index_u6.html#article_24][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u27.html>>

| [[../article_26/index_u3.html][下一项]] |
[[../index_u6.html#article_25][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_24/index_u33.html][上一项]] |

--------------

* Emacs: Show Line Numbers
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2009-08-12. Last updated: 2019-11-05.

emacs has 2 line numbers mode.

- Alt+x =linum-mode= → old, hack, slow. Emacs 23 (released in 2009).
- Alt+x =global-display-line-numbers-mode= → Emacs 26 (released in
  2018-05)

[[file:feed_0/article_25/images/img1_u11.png]]

emacs. Alt+x =global-display-line-numbers-mode=

** global-display-line-numbers-mode
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Emacs 26 (released in 2018-05) has a new line number mode.

- Alt+x =global-display-line-numbers-mode= → show line numbers in all
  buffers.
- Alt+x =display-line-numbers-mode= → show line numbers in current
  buffer.

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (when (version<= "26.0.50" emacs-version )
      (global-display-line-numbers-mode))
#+END_SRC

display-line-numbers-mode is written by Eli Zaretskii. Thanks Eli.

** linum-mode
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Emacs 23 (released in 2009) has a line number mode. It shows line
numbers in margin. [see [[file:emacs23_features.html][Emacs 23.1
Features (released 2009-07)]]]

- Alt+x =linum-mode= → toggle line number in current.
- Alt+x =global-linum-mode= → toggle line number in all buffers.

To set it permanetnly, put this in your emacs init:

#+BEGIN_SRC emacs-lisp
    (global-linum-mode 1) ; always show line numbers
#+END_SRC

** How to set linum line number to start at 0?
   :PROPERTIES:
   :CLASS: calibre11
   :END:

If you want line number to start at 0, put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (require 'linum)
    (setq linum-format
          (lambda (line)
            (propertize (number-to-string (1- line)) 'face 'linum)))
#+END_SRC

Setting line number to start at 0 is useful because some editors do
that. See:
[[http://debbugs.gnu.org/cgi/bugreport.cgi?bug=4274][bug#4274]].

linum-mode is written by Markus Triska. Thanks Markus.

** Jump to a Line Number
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =goto-line= → move cursor to a given line position.

**** Emacs Show Line/Column Number
     :PROPERTIES:
     :CLASS: calibre18
     :END:

- [[http://ergoemacs.org/tmp/calibre_4.99.4_tmp_jtk2bf13/eb5s3ele_plumber/feed_0/article_25/emacs_line_number_mode.xhtml][Show
  Line Numbers]]
- [[file:emacs_column_number_mode.html][Show Cursor Position]]
- [[file:emacs_save_cursor_position.html][Save Cursor Position]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_line_number_mode.html]]

\\
\\
| [[../index_u6.html#article_25][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u3.html>>

| [[../article_27/index_u20.html][下一项]] |
[[../index_u6.html#article_26][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_25/index_u27.html][上一项]] |

--------------

* Emacs: Show Cursor Position
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2018-03-01. Last updated: 2019-11-05.

** Show Cursor Column Number
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:feed_0/article_26/images/img1_u5.png]]

Alt+x =column-number-mode=

Alt+x =column-number-mode= → show line number and cursor column position
in mode line (aka status bar), like this: =(166,3)=. The first is line
number, the second is position from the beginning of line.

To always have it on, put the following code in your emacs init file.

#+BEGIN_SRC emacs-lisp
    ;; show cursor position within line
    (column-number-mode 1)
#+END_SRC

** Show Ruler
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =ruler-mode= → display a ruler at top of current window.

[[file:feed_0/article_26/images/img2_u4.png]]

Emacs Alt+x =ruler-mode=

** Cursor Position in Buffer
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =describe-char= → show the current cursor position.

In a buffer, the left of first character has position 0.

[[file:feed_0/article_26/images/img3.png]]

emacs Alt+x =describe-char=

** Jump to a Cursor Position
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Alt+x =goto-char= → move cursor to a given position.

**** Emacs Show Line/Column Number
     :PROPERTIES:
     :CLASS: calibre18
     :END:

- [[file:emacs_line_number_mode.html][Show Line Numbers]]
- [[http://ergoemacs.org/tmp/calibre_4.99.4_tmp_jtk2bf13/eb5s3ele_plumber/feed_0/article_26/emacs_column_number_mode.xhtml][Show
  Cursor Position]]
- [[file:emacs_save_cursor_position.html][Save Cursor Position]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_column_number_mode.html]]

\\
\\
| [[../index_u6.html#article_26][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u20.html>>

| [[../article_28/index.html][下一项]] |
[[../index_u6.html#article_27][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_26/index_u3.html][上一项]] |

--------------

* Emacs: High Light Current Line
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2019-11-06.

[[file:feed_0/article_27/images/img1_u17.png]]

emacs =global-hl-line-mode=

Alt+x =hl-line-mode= to toggle on/off for current buffer.

Alt+x =global-hl-line-mode= to toggle globally.

** Turn on by Default
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; highlight current line
    (global-hl-line-mode 1)
#+END_SRC

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_high_light_current_line.html]]

\\
\\
| [[../index_u6.html#article_27][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index.html>>

| [[../article_29/index_u30.html][下一项]] |
[[../index_u6.html#article_28][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_27/index_u20.html][上一项]] |

--------------

* Emacs: Show Formfeed ^L as Line
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2011-04-25. Last updated: 2018-08-30.

** Displaying Form Feed Character as Line
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Emacs lisp uses the Form Feed character (Form Feed; U+0C) as source code
section marker. It is displayed as “^L”.

[[file:feed_0/article_28/images/img1_u2.png]]

emacs formfeed as line 2018-08-30

Here's a command to display the Form Feed character as a line.

#+BEGIN_SRC emacs-lisp
    (defun xah-show-formfeed-as-line ()
      "Display the formfeed ^L char as line.
    URL `http://ergoemacs.org/emacs/emacs_form_feed_section_paging.html'
    Version 2018-08-30"
      (interactive)
      ;; 2016-10-11 thanks to Steve Purcell's page-break-lines.el
      (progn
        (when (not buffer-display-table)
          (setq buffer-display-table (make-display-table)))
        (aset buffer-display-table ?\^L
              (vconcat (make-list 70 (make-glyph-code ?─ 'font-lock-comment-face))))
        (redraw-frame)))
#+END_SRC

** Insert Form Feed Character
   :PROPERTIES:
   :CLASS: calibre11
   :END:

To insert form feed character, press Ctrl+q then Ctrl+l.

[see [[file:keystroke_rep.html][Emacs's Key Syntax Explained]]]

** Move Cursor to Prev/Next Formfeed
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Move cursor to the prev/next page break:

- =forward-page= 【Ctrl+x ]】
- =backward-page= 【Ctrl+x [】

You can set a more easy key that can be held down:

#+BEGIN_SRC emacs-lisp
    ;; keys for moving to prev/next code section (Form Feed; ^L)
    (global-set-key (kbd "<C-M-prior>") 'backward-page) ; Ctrl+Alt+PageUp
    (global-set-key (kbd "<C-M-next>") 'forward-page)   ; Ctrl+Alt+PageDown
#+END_SRC

Using Ctrl+Alt makes it consistent with the default keys to navigate
lisp code. [see [[file:emacs_editing_lisp.html][Emacs: How to Edit Lisp
Code]]]

For a detailed discussion of using the Form Feed character as page
section marker, see: [[file:modernization_formfeed.html][Emacs Form Feed
^L]].

2012-11-14 Thanks to Steve Purcell ( [[https://twitter.com/sanityinc]] )
for his page-break-lines.el package.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_form_feed_section_paging.html]]

\\
\\
| [[../index_u6.html#article_28][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u30.html>>

| [[../article_30/index_u5.html][下一项]] |
[[../index_u6.html#article_29][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_28/index.html][上一项]] |

--------------

* Emacs: Set Line Spacing
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2008-06-30. Last updated: 2020-04-13.

You can change line spacing by setting the variable line-spacing.

[[file:feed_0/article_29/images/img1_u1.png]]

emacs line spacing 2020-04-13

To set a default line spacing, put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (setq-default line-spacing 0.5)
#+END_SRC

The value can be a integer or decimal number.

- If integer, it means pixels, added below each line.
- If float, a scaling factor relative to current window's default line
  height.
- If nil, add no extra spacing.

To experiment without restart, you can set line spacing in current
buffer, by typing =(setq line-spacing 0.5)= in a buffer, move cursor to
the end, then Alt+x =eval-last-sexp= 【Ctrl+x Ctrl+e】. [see
[[file:elisp_eval_lisp_code.html][Emacs: Evaluate Elisp Code]]]

Note that the spacing height between lines also depends on font. [see
[[file:emacs_list_and_set_font.html][Emacs: Font Setup]]]

** Toggle Line Spacing Command
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Here's a command that lets you toggle line spacing between 2 values.

#+BEGIN_SRC emacs-lisp
    (defun xah-toggle-line-spacing ()
      "Toggle line spacing between no extra space to extra half line height.
    URL `http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html'
    Version 2017-06-02"
      (interactive)
      (if line-spacing
          (setq line-spacing nil)
        (setq line-spacing 0.5))
      (redraw-frame (selected-frame)))
#+END_SRC

This is useful for switching between reading source code and reading
novels. [see [[file:emacs_novel_reading_mode.html][Emacs: Novel Reading
Mode]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html]]

\\
\\
| [[../index_u6.html#article_29][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u5.html>>

| [[../article_31/index_u25.html][下一项]] |
[[../index_u6.html#article_30][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_29/index_u30.html][上一项]] |

--------------

* Emacs: Set Color Theme
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2012-10-11. Last updated: 2018-11-03.

Here's how to set emacs to use color themes. (new in Emacs 24 (released
2012-06))

Alt+x =customize-themes= to set a color theme.

[[file:feed_0/article_30/images/img1_u8.png]]

emacs M-x customize-themes. Click to see the change immediately.

Alternatively, Alt+x =load-theme=, then press Tab to show a list of
available themes.

To clear theme, Alt+x =disable-theme=. Press Tab for completion.

To find enabled themes, Alt+x =describe-variable= then type
custom-enabled-themes

[[file:feed_0/article_30/images/img2_u6.png]]

emacs color theme “misterioso”

*** Set a Color Theme Permanently
    :PROPERTIES:
    :CLASS: calibre15
    :END:

To set it permanently, put this in your emacs init file.

#+BEGIN_SRC emacs-lisp
    (load-theme 'misterioso)
#+END_SRC

Here's list of emacs 24.3 themes.

- adwaita
- deeper-blue
- dichromacy
- light-blue
- manoj-dark
- misterioso
- tango
- tango-dark
- tsdh-dark
- tsdh-light
- wheatgrass
- whiteboard
- wombat

2012-10-11 Thanks to • Gabriel Saldaña
[[[https://twitter.com/gabrielsaldana]]] • Torsten Wagner
[+https://plus.google.com/b/113859563190964307534/102520135125330850042/posts+]
• Steve Purcell [[[https://github.com/purcell]]] for tips.

** Simple Setting of Background Color
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Sometimes a color theme is too much. All you need is a mild background
color.

To set background color, Alt+x =set-background-color= then type
“honeydew”.

Alt+x =list-colors-display= to see color names.

For permanent setup, put the following in your emacs init file.

#+BEGIN_SRC emacs-lisp
    (if (display-graphic-p)
        (setq initial-frame-alist
              '(
                (tool-bar-lines . 0)
                (width . 106)
                (height . 60)
                (background-color . "honeydew")
                (left . 50)
                (top . 50)))
      (setq initial-frame-alist '( (tool-bar-lines . 0))))

    (setq default-frame-alist initial-frame-alist)
#+END_SRC

[[../emacs_manual/elisp/Frame-Parameters.html][(info "(elisp) Frame
Parameters")]]

[see [[file:emacs_customize_default_window_size.html][Emacs: Set Default
Window Size]]]

[see [[file:emacs_list_and_set_font.html][Emacs: Font Setup]]]

** Simple White on Black, Reverse Video
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:feed_0/article_30/images/img3_u2.png]]

emacs started with =emacs --reverse-video=

In terminal, =emacs --reverse-video= will start emacs with white text on
black background. This is useful under bright sunlight.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_playing_with_color_theme.html]]

\\
\\
| [[../index_u6.html#article_30][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u25.html>>

| [[../article_32/index_u23.html][下一项]] |
[[../index_u6.html#article_31][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_30/index_u5.html][上一项]] |

--------------

* Emacs: Highlight Brackets ()[]{}
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2007-12-30. Last updated: 2018-03-03.

Alt+x =show-paren-mode= → highlight matching brackets when your cursor
is on one of the bracket.

#+BEGIN_SRC emacs-lisp
    ;; turn on highlight matching brackets when cursor is on one
    (show-paren-mode 1)
#+END_SRC

=show-paren-mode= has 2 styles of highlighting brackets.

[[file:feed_0/article_31/images/img1_u12.png]]

Alt+x =show-paren-mode=, highlight brackets

[[file:feed_0/article_31/images/img2.png]]

Alt+x =show-paren-mode=, highlight whole expression

By default, emacs highlights just the brackets.

To change a style, put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; highlight brackets
    (setq show-paren-style 'parenthesis)

    ;; highlight entire expression
    (setq show-paren-style 'expression)

    ;; highlight brackets if visible, else entire expression
    (setq show-paren-style 'mixed)
#+END_SRC

Note: =show-paren-mode= will highlight any brackets, including [] {}
『』 【】 〈〉 «» etc.

[see [[http://xahlee.info/comp/unicode_matching_brackets.html][Unicode:
Brackets, Quotes «»「」【】《》]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_highlight_parenthesis.html]]

\\
\\
| [[../index_u6.html#article_31][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u23.html>>

| [[../article_33/index_u19.html][下一项]] |
[[../index_u6.html#article_32][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_31/index_u25.html][上一项]] |

--------------

* Emacs: Display Lambda as λ
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-03-09. Last updated: 2016-09-01.

Emacs 24.4 has a nice =prettify-symbols-mode=. In lisp modes, it
displays =lambda= as “λ”. [see [[file:emacs24.4_features.html][Emacs
24.4 Features (released 2014-10)]]]

[[file:feed_0/article_32/images/img1_u15.png]]

emacs =prettify-symbols-mode=

Alt+x =prettify-symbols-mode= to activate it.

Open a emacs lisp file. (For example, Alt+x =describe-function= 【Ctrl+h
f】 then type =byte-compile=, then click to open the lisp source code
file.) Then, search for “lambda”. Then, Alt+x =prettify-symbols-mode= to
watch it change.

Note that it only DISPLAYS the function named “lambda” as λ, it doesn't
really change the text.

** global-prettify-symbols-mode
   :PROPERTIES:
   :CLASS: calibre11
   :END:

To set it globally, put the following in your emacs init:

#+BEGIN_SRC emacs-lisp
    ;; display “lambda” as “λ”
    (global-prettify-symbols-mode 1)
#+END_SRC

[[file:feed_0/article_32/images/img2_u5.png]]

emacs =prettify-symbols-mode=

** Adding Support for Pretty Lambda Mode
   :PROPERTIES:
   :CLASS: calibre11
   :END:

=prettify-symbols-mode= only works for major modes that supports it.

To add support, in your major mode, do:

#+BEGIN_SRC emacs-lisp
    (setq prettify-symbols-alist '(("lambda" . 955)))
#+END_SRC

The 955 is Unicode code point for λ in decimal. To find the Unicode code
point of a char, type the char, then Alt+x =describe-char=. [see
[[file:emacs_n_unicode.html][Emacs: Unicode Tutorial]]]

You can add other pairs. For example, to have arrow, do:

#+BEGIN_SRC emacs-lisp
    (setq prettify-symbols-alist
          '(
            ("lambda" . 955) ; λ
            ("->" . 8594)    ; →
            ("=>" . 8658)    ; ⇒
            ("map" . 8614)    ; ↦
            ))
#+END_SRC

You can add it as a hook for any major mode. Here's a example:

#+BEGIN_SRC emacs-lisp
    (defun my-add-pretty-lambda ()
      "make some word or string show as pretty Unicode symbols"
      (setq prettify-symbols-alist
            '(
              ("lambda" . 955) ; λ
              ("->" . 8594)    ; →
              ("=>" . 8658)    ; ⇒
              ("map" . 8614)   ; ↦
              )))

    (add-hook 'clojure-mode-hook 'my-add-pretty-lambda)
    (add-hook 'haskell-mode-hook 'my-add-pretty-lambda)
    (add-hook 'shen-mode-hook 'my-add-pretty-lambda)
    (add-hook 'tex-mode-hook 'my-add-pretty-lambda)
#+END_SRC

[see [[../emacs/emacs_whats_hook.html][Emacs: What's Hook?]]]

For other math symbols you might want to add, see:

- [[http://xahlee.info/comp/unicode_math_operators.html][Unicode: Math
  Symbols ∑ ∞ ∫ π ∈ ℝ²]]
- [[http://xahlee.info/comp/unicode_arrows.html][Unicode Arrows → ⇒ ⇄ ↑
  ↩ ⤢ ↱ ↷ ↻]]

- [[file:emacs_form_feed_section_paging.html][Emacs: Show Formfeed ^L as
  Line]]
- [[file:emacs_editing_lisp.html][Emacs: How to Edit Lisp Code]]
- [[file:emacs_insert_brackets_by_pair.html][Emacs: Auto Brackets
  electric-pair-mode]]
- [[file:emacs_navigating_keys_for_brackets.html][Emacs: Move Cursor to
  Bracket/Quote]]
- [[file:emacs24.4_features.html][Emacs 24.4 Features (released
  2014-10)]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_pretty_lambda.html]]

\\
\\
| [[../index_u6.html#article_32][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u19.html>>

| [[../article_34/index_u2.html][下一项]] |
[[../index_u6.html#article_33][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_32/index_u23.html][上一项]] |

--------------

* Emacs: Set Default Window Size
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-02-18. Last updated: 2018-06-15.

** Set Default Window (Emacs Frame) Size
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (if (display-graphic-p)
        (progn
          (setq initial-frame-alist
                '(
                  (tool-bar-lines . 0)
                  (width . 106) ; chars
                  (height . 60) ; lines
                  (background-color . "honeydew")
                  (left . 50)
                  (top . 50)))
          (setq default-frame-alist
                '(
                  (tool-bar-lines . 0)
                  (width . 106)
                  (height . 60)
                  (background-color . "honeydew")
                  (left . 50)
                  (top . 50))))
      (progn
        (setq initial-frame-alist '( (tool-bar-lines . 0)))
        (setq default-frame-alist '( (tool-bar-lines . 0)))))
#+END_SRC

The =display-graphic-p= check if emacs is running in graphical
environment. (that is, not terminal)

Many settings related to windows size are not relevant if emacs is
running in terminal.

initial-frame-alist is a variable that holds a alist of settings for the
first window emacs starts with.

default-frame-alist is a variable that holds a alist of any new window.

[see [[../emacs/elisp_association_list.html][Elisp: Association List]]]

Alt+x =describe-variable= to see a variable's values.

[[../emacs_manual/elisp/Frame-Parameters.html][(info "(elisp) Frame
Parameters")]]

** Background Color for New Window
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    (setq default-frame-alist
      '((background-color . "cornsilk")))
#+END_SRC

To see a list of color names emacs support, Alt+x =list-colors-display=.

** Set Default Font
   :PROPERTIES:
   :CLASS: calibre11
   :END:

[[file:emacs_list_and_set_font.html][Emacs: Font Setup]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_customize_default_window_size.html]]

\\
\\
| [[../index_u6.html#article_33][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u2.html>>

| [[../article_35/index_u15.html][下一项]] |
[[../index_u6.html#article_34][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_33/index_u19.html][上一项]] |

--------------

* Emacs: Set Default Browser
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2015-12-05. Last updated: 2016-07-15.

When you click on a link or Alt+x =find-file-at-point= (alias =ffap=)
when cursor is on a URL, emacs will call OS's default browser. [see
[[file:emacs_open_file_path_fast.html][Emacs: Open File Path Under
Cursor]]]

You can tell emacs to use a specific browser (For example, Firefox,
Google Chrome).

Here's how to set specific browser to open links. Put in your emacs
init.

#+BEGIN_SRC emacs-lisp
    ;; set specific browser to open links
    (setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (setq browse-url-browser-function 'browse-url-chromium) ; google's browser
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (setq browse-url-browser-function 'eww-browse-url) ; emacs browser
#+END_SRC

You can also set up a regex list to open specific browser depending on
URL.

#+BEGIN_SRC emacs-lisp
    ;; use browser depending on url
    (setq
     browse-url-browser-function
     '(
      ("wikipedia\\.org" . browse-url-firefox)
      ("github" . browse-url-chromium)
      ("thefreedictionary\\.com" . eww-browse-url)
      ("." . browse-url-default-browser)
      ))
#+END_SRC

[see [[file:emacs_regex.html][Emacs: Regex Tutorial]]]

To see more browsers, Alt+x =describe-variable= then
browse-url-browser-function, then click on the link to jump to the
source code definition.

** Linux: Set Default Browser
   :PROPERTIES:
   :CLASS: calibre11
   :END:

“Default Browser” depends on your operating system's settings.

[[http://xahlee.info/linux/linux_set_default_app.html][Linux: Set
Default App]]

- [[file:emacs_eww_web_browser.html][Emacs: Eww Web Browser]]
- [[file:elisp_browse_url.html][Elisp: View URL in Web Browser:
  browse-url]]
- [[file:emacs_open_file_path_fast.html][Emacs: Open File Path Under
  Cursor]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_set_default_browser.html]]

\\
\\
| [[../index_u6.html#article_34][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |

<<index_u15.html>>

| [[../../feed_1/index.html][下一项]] |
[[../index_u6.html#article_35][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
[[../article_34/index_u2.html][上一项]] |

--------------

* Emacs: Misc Init Tips
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2019-11-06.

*** standard keyboard shortcuts for Copy and Paste
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Alt+x =cua-mode= to toggle it on/off.

Put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; make {copy, cut, paste, undo} have {C-c, C-x, C-v, C-z} keys
    (cua-mode 1)
#+END_SRC

*** standard keyboard shortcuts for {Open, Close, Save, Save As, Select
All, ...}
    :PROPERTIES:
    :CLASS: calibre15
    :END:

You can put the following in your emacs init, but they don't work well,
because some major mode or minor will override these keys, and you lost
some default emacs cursor movement keys.

#+BEGIN_SRC emacs-lisp
    (progn
     ;; make emacs use standard keys

      ;; Select All. was move-beginning-of-line
      (global-set-key (kbd "C-a") 'mark-whole-buffer-buffer)

      ;; Find. was forward-char
      (global-set-key (kbd "C-f") 'isearch-forward)

      ;; New. was next-line
      (global-set-key (kbd "C-n") 'xah-new-empty-buffer)

      ;; New Window. was nil
      (global-set-key (kbd "C-S-n") 'make-frame-command)

      ;; Open. was open-line
      (global-set-key (kbd "C-o") 'ido-find-file)

      ;; Save. was isearch-forward
      (global-set-key (kbd "C-s") 'save-buffer)

      ;; Save As. was nil
      (global-set-key (kbd "C-S-s") 'write-file)

      ;; Paste. was scroll-up-command
      (global-set-key (kbd "C-v") 'yank)

      ;; Close. was kill-region
      (global-set-key (kbd "C-w") 'kill-buffer)

      ;; Redo. was yank
      (global-set-key (kbd "C-y") 'redo)

      ;; Undo. was suspend-frame
      (global-set-key (kbd "C-z") 'undo)
      ;;
      )
#+END_SRC

For the command =xah-new-empty-buffer=, get it at
[[file:emacs_new_empty_buffer.html][Emacs: New Empty Buffer]].

For the command =redo=, install redo mode. [see
[[file:emacs_best_redo_mode.html][Emacs: Best Undo/Redo Mode]]]

A robust solution is to install the package ergoemacs-mode.
[[https://ergoemacs.github.io/]]

or xah-fly-keys. [see [[../misc/ergoemacs_vi_mode.html][Emacs: Xah Fly
Keys]]]

*** make typing overwrite selected text
    :PROPERTIES:
    :CLASS: calibre15
    :END:

#+BEGIN_SRC emacs-lisp
    ;; make typing delete/overwrites selected text
    (delete-selection-mode 1)
#+END_SRC

*** set default file encoding
    :PROPERTIES:
    :CLASS: calibre15
    :END:

#+BEGIN_SRC emacs-lisp
    ;; UTF-8 as default encoding
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
#+END_SRC

Do not add a bunch of other variables such as
=set-terminal-coding-system=, unless you know emacs's encoding system
well.

[see [[file:emacs_n_unicode.html][Emacs: Unicode Tutorial]]]

[see [[file:unicode_basics.html][Unicode Basics]]]

*** refresh file automatically
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Sometimes other program may have changed file that is already opened in
emacs.

To refresh, Alt+x =revert-buffer=

To always refresh automatically, put this in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; when a file is updated outside emacs, make it update if it's already opened in emacs
    (global-auto-revert-mode 1)
#+END_SRC

** Line Margin, Line Wrap, Line Spacing
   :PROPERTIES:
   :CLASS: calibre11
   :END:

*** have the down arrow key move by screen lines
    :PROPERTIES:
    :CLASS: calibre15
    :END:

This is default with emacs 23. [see [[file:emacs23_features.html][Emacs
23.1 Features (released 2009-07)]]]

#+BEGIN_SRC emacs-lisp
    (setq line-move-visual nil)
    ;; t means true, nil mean false
#+END_SRC

*** adjust margin
    :PROPERTIES:
    :CLASS: calibre15
    :END:

You can use this command:

#+BEGIN_SRC emacs-lisp
    (defun xah-toggle-margin-right ()
      "Toggle the right margin between `fill-column' or window width.
    This command is convenient when reading novel, documentation."
      (interactive)
      (if (eq (cdr (window-margins)) nil)
          (set-window-margins nil 0 (- (window-body-width) fill-column))
        (set-window-margins nil 0 0) ) )
#+END_SRC

*** make lines NOT soft-wrap
    :PROPERTIES:
    :CLASS: calibre15
    :END:

[[file:feed_0/article_35/images/img1.png]]

emacs Alt+x =toggle-truncate-lines=

Alt+x =toggle-truncate-lines=.

When =toggle-truncate-lines= is on, lines runs off and disappears on the
right window margin. You have to horizontal scroll right to see them.
This is useful when you just want to get an overview of lines.

Note: the command name is misleading. It doesn't really “truncate”.
Proper name would be “toggle-line-softwrap”.

** Format Lines
   :PROPERTIES:
   :CLASS: calibre11
   :END:

*** reformat lines so that lines are not longer than 70 chars
    :PROPERTIES:
    :CLASS: calibre15
    :END:

[[file:feed_0/article_35/images/img2_u1.png]]

emacs Alt+x =fill-paragraph=

Alt+x =fill-paragraph= 【Alt+q】 to reformat the current block of text
your cursor is on.

Alt+x =fill-region= to reformat a text selection.

To have emacs automatically insert a newline char when your line reaches
to the right, Alt+x =auto-fill-mode=.

The variable fill-column controls the width used in the above commands.
Alt+x =set-variable=, to change value.

Note: these commands insert newline characters into your file. This type
of wrapping is called hard-wrap. Hard-wrap convention of 80 chars came
from punched card. You should avoid hard-wrap when possible; add newline
char only at logical positions. (Rant:
[[http://xahlee.info/UnixResource_dir/writ/hard-wrap.html][The Harm of
hard-wrapping Lines]].)

*** make sentence ending by single space
    :PROPERTIES:
    :CLASS: calibre15
    :END:

When Alt+x =fill-paragraph= etc, emacs will reformat it so that there
are 2 spaces after a period.

#+BEGIN_SRC emacs-lisp
    ;; make sentence ending by single space
    (setq sentence-end-double-space nil )
#+END_SRC

[see [[file:emacs_unfill-paragraph.html][Emacs: Hard Wrap Lines]]]

*** have fixed scroll
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Alt+x =scroll-lock-mode=. When on, up/down arrow keys move the page,
instead of the cursor.

This only turns it on in current buffer.

** Type y/n instead of yes/no
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Many emacs commands will ask you a “yes/no” question, and you have to
type the full word “yes” or “no”. (such as when deleting a file)

You can make emacs just ask “y/n” instead.

#+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** disable warnings
   :PROPERTIES:
   :CLASS: calibre11
   :END:

Emacs by default will warn you when you use some commands for the first
time. You have to answer yes or no. They are annoying.

Here's how to disable them:

#+BEGIN_SRC emacs-lisp
    (progn
      ;; stop warning prompt for some commands. There's always undo.
      (put 'narrow-to-region 'disabled nil)
      (put 'narrow-to-page 'disabled nil)
      (put 'upcase-region 'disabled nil)
      (put 'downcase-region 'disabled nil)
      (put 'erase-buffer 'disabled nil)
      (put 'scroll-left 'disabled nil)
      (put 'dired-find-alternate-file 'disabled nil)
    )
#+END_SRC

*** save/store minibuffer history
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Many emacs commands lets you use ↑ key to use last command or parameter.
But after you restart emacs, command history is forgotten.

You can make emacs remember command history.

#+BEGIN_SRC emacs-lisp
    ;; save minibuffer history
    (savehist-mode 1)
#+END_SRC

Command history is saved as a file, by default at =~/.emacs.d/history=

*** set minibuffer height
    :PROPERTIES:
    :CLASS: calibre15
    :END:

#+BEGIN_SRC emacs-lisp
    ;; big minibuffer height, for ido to show choices vertically
    (setq max-mini-window-height 0.5)
#+END_SRC

** misc
   :PROPERTIES:
   :CLASS: calibre11
   :END:

*** stop cursor blinking
    :PROPERTIES:
    :CLASS: calibre15
    :END:

#+BEGIN_SRC emacs-lisp
    ;; make cursor not blink
    (blink-cursor-mode 0)
#+END_SRC

*** set cursor to i-beam
    :PROPERTIES:
    :CLASS: calibre15
    :END:

#+BEGIN_SRC emacs-lisp
    (modify-all-frames-parameters (list (cons 'cursor-type 'bar)))
#+END_SRC

Note: this will not work if you run emacs in terminal.

*** set up emacs so that each file opens in a new window
    :PROPERTIES:
    :CLASS: calibre15
    :END:

Put this code in your emacs init file:

#+BEGIN_SRC emacs-lisp
    (setq pop-up-frames t)
#+END_SRC

** hippie-expand setup
   :PROPERTIES:
   :CLASS: calibre11
   :END:

#+BEGIN_SRC emacs-lisp
    (setq hippie-expand-try-functions-list
          '(
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            ;; try-expand-dabbrev-from-kill
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol
            try-complete-file-name-partially
            try-complete-file-name
            ;; try-expand-all-abbrevs
            ;; try-expand-list
            ;; try-expand-line
            ))
#+END_SRC

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_misc_init.html]]

\\
\\
| [[../index_u6.html#article_35][段落菜单]] |
[[../../index_u14.html#feed_0][主菜单]] |
<<titlepage.xhtml>>

#+BEGIN_HTML
  <svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" version="1.1" width="100%" height="100%" viewbox="0 0 889 1186" preserveaspectratio="none">
#+END_HTML

#+BEGIN_HTML
  </svg>
#+END_HTML

<<index_u10.html>>

[[file:mastheadImage.jpg]]

[四, 01 10月 2020]

- [[file:feed_0/index_u34.html][thinkphp3]]

<<index_u34.html>>

** thinkphp3
   :PROPERTIES:
   :CLASS: calibre_feed_title
   :END:

- [[file:article_0/index_u1.html][Emacs Tutorial]]
- [[file:article_1/index_u36.html][Emacs Init]]
- [[file:article_2/index_u22.html][Emacs Keys]]
- [[file:article_3/index_u55.html][ELisp]]
- [[file:article_4/index_u5.html][ELisp Examples]]
- [[file:article_5/index_u3.html][ELisp Write Major Mode]]
- [[file:article_6/index_u37.html][Emacs Keys Overview]]
- [[file:article_7/index_u18.html][Key Layout Diagram]]
- [[file:article_8/index_u31.html][How to Define Keys]]
- [[file:article_9/index_u20.html][Key Syntax Examples]]
- [[file:article_10/index_u46.html][Change Major Mode Keys]]
- [[file:article_11/index_u47.html][Change Minor Mode Keys]]
- [[file:article_12/index_u9.html][Fix Minor Mode Key Priority]]
- [[file:article_13/index_u6.html][Define Key Sequence]]
- [[file:article_14/index_u48.html][Bind Super/Hyper Keys]]
- [[file:article_15/index.html][Bind Menu/App Key]]
- [[file:article_16/index_u56.html][key-translation-map]]
- [[file:article_17/index_u8.html][Set Mouse Buttons]]
- [[file:article_18/index_u15.html][Add Keys for Productivity]]
- [[file:article_19/index_u50.html][isearch by Arrow Keys]]
- [[file:article_20/index_u4.html][Bind Number Pad Keys]]
- [[file:article_21/index_u59.html][Fast M-x]]
- [[file:article_22/index_u43.html][Add Key to Info]]
- [[file:article_23/index_u29.html][Ctrl+x and Dvorak]]
- [[file:article_24/index_u23.html][Why Emacs Keys are Painful]]
- [[file:article_25/index_u49.html][Xah Fly Keys]]
- [[file:article_26/index_u11.html][ergoemacs mode]]
- [[file:article_27/index_u60.html][How to Avoid Emacs Pinky]]
- [[file:article_28/index_u30.html][Emacs Command Frequency Statistics]]
- [[file:article_29/index_u53.html][Swap CapsLock and Control]]
- [[file:article_30/index_u61.html][Famous Programers with RSI]]
- [[file:article_31/index_u57.html][My Typing/RSI Experience]]
- [[file:article_32/index_u42.html][Xah Lee Emacs Pinky 2020]]
- [[file:article_33/index_u40.html][Hand Health: vi Esc Key Syndrome]]
- [[file:article_34/index_u32.html][Emacs, RSI, My Experiences]]
- [[file:article_35/index_u27.html][Using Voice to Code Faster than
  Keyboard 📺]]
- [[file:article_36/index_u14.html][emacs and vi: Science of Command
  Efficiency]]
- [[file:article_37/index_u54.html][Page Up/Down and Pigeon Hole
  Principle]]
- [[file:article_38/index_u13.html][Roadmap to Completely Replace Emacs
  Key System, Part 1]]
- [[file:article_39/index_u44.html][Roadmap to Completely Replace Emacs
  Key System, Part 2]]
- [[file:article_40/index_u26.html][Roadmap to Completely Replace Emacs
  Key System, Part 2.5]]
- [[file:article_41/index_u16.html][menu e vs Tab Keys]]
- [[file:article_42/index_u7.html][Emacs C-u vs Prompt]]
- [[file:article_43/index_u21.html][Emacs One Thousand Keybindings]]
- [[file:article_44/index_u17.html][Key Notations /r ^M C-m RET
  <return>]]
- [[file:article_45/index_u25.html][<return> vs RET]]
- [[file:article_46/index_u24.html][Eric S Raymond on keyboardio]]
- [[file:article_47/index_u52.html][Dogma of Swapping Control/Capslock]]
- [[file:article_48/index_u38.html][on vi Keybinding vs Emacs
  Keybinding]]
- [[file:article_49/index_u2.html][Emacs cua-mode Keybinding Problems]]
- [[file:article_50/index_u33.html][Programer Workflow Efficiency]]
- [[file:article_51/index_u12.html][Full-Screen vs Multiple Window]]
- [[file:article_52/index_u28.html][Display Key Command in Real Time]]
- [[file:article_53/index_u58.html][Hello ergoemacs-mode Again]]
- [[file:article_54/index_u45.html][RSI is Coming for You]]
- [[file:article_55/index_u35.html][Emacs of the Dead]]
- [[file:article_56/index_u19.html][Make the CapsLock Key do Home]]
- [[file:article_57/index_u41.html][major mode keys not compatible as
  key sequence]]
- [[file:article_58/index_u51.html][Typing Speed and Hand Motion Speed
  Study]]
- [[file:article_59/index_u39.html][comment-line vs comment-dwim]]

<<index_u1.html>>

| [[../article_1/index_u36.html][下一项]] |
[[../index_u34.html#article_0][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

--------------

* Practical Emacs Tutorial
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2005-12-30. Last updated: 2020.

the church of emacs filling,\\
of chars lispy and binding,\\
buffers insert yank,\\
meta sexp add-hook,\\
Eight M-bites And C. Swapping.\\

[[file:emacs_logo.html][[[file:feed_0/article_0/images/img1_u1.svg]]]]

This tutorial is designed for writers, scientists, engineers, to get
started on emacs quickly. Each page teaches you something practical you
can use right away. No emacs jargons. No need programing experience.

Start at\\
[[file:which_emacs.html][Download Emacs for Windows, Mac, Linux]]

Those marked with a rocket ship 🚀 means it's a enhanced, efficient
command. They are part of [[../misc/ergoemacs_vi_mode.html][Emacs: Xah
Fly Keys]]

*** About This Tutorial
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_0/images/img2.png]]
[[file:feed_0/article_0/images/img3.jpg]]

emacs books from 1990s.

If you were to spend 3 months reading 3 emacs books, it is more
efficient to just read Xah Emacs Tutorial for just 1 month. Xah tutorial
focus on actually using emacs in practice, and on efficiency of using
emacs, as well as efficiency of learning.

- This tutorial skips the emacs parts that are rarely used. Every single
  one thousand emacs C-x commands are looked, the practical ones are
  presented to you.
- The writing style is concrete, and example based. No story telling, no
  joke, just what you need to know to use emacs in the most efficient
  way.
- This tutorial does not force emacs jargons and emacs hacker methods.
  If you are new to emacs, you will understand it. If you are old time
  hacker, you will improve your efficiency of using emacs.
- This tutorial covers emacs lisp, more extensive than any existing
  emacs lisp book (except the elisp manual) or elisp tutorial online. A
  little elisp makes you a far better emacs user and understanding
  emacs. [see [[file:elisp.html][Practical Emacs Lisp]]]
- There are more examples and elisp code in Xah Emacs Tutorial than all
  existing emacs books or web sites combined. You do not need to read it
  all, but any time spent reading this tutorial, you'll learn more
  useful things than same amount of time spent elsewhere.

The author lives in emacs since 1999. And has been obsessively writing
emacs tutorial since 2006.

** Buy Xah Emacs Tutorial
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Buy my tutorial to support the site.

[[file:buy_xah_emacs_tutorial.html][[[file:feed_0/article_3/images/img2_u2.jpg]]\\
Buy Xah Emacs Tutorial]]

** What Do People Say?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:user_comments.html][Testimonial on Xah Emacs Tutorial]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs.html]]

\\
\\
| [[../index_u34.html#article_0][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u36.html>>

| [[../article_2/index_u22.html][下一项]] |
[[../index_u34.html#article_1][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_0/index_u1.html][上一项]] |

--------------

* Emacs Init Setup
  :PROPERTIES:
  :CLASS: calibre9
  :END:

This sections shows you how to customize emacs by editing the init file.

Start at [[file:emacs_make_modern.html][Emacs: Init File Tutorial]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_init_index.html]]

\\
\\
| [[../index_u34.html#article_1][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u22.html>>

| [[../article_3/index_u55.html][下一项]] |
[[../index_u34.html#article_2][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_1/index_u36.html][上一项]] |

--------------

* Emacs Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

The essence of using emacs is commands and keys.

This section shows you how to customize emacs keys. Start at\\
[[file:keyboard_shortcuts.html][Emacs: How to Define Keys]]

or watch a video:

dvorak colemak minimak layouts, ergodox, keyboard firmware, keybinding,
ergodox, programable keypads 2019-09-20

[[file:feed_0/article_2/images/img1_u5.jpg]]

“Emacs user at work”. (by
[[http://earlcolour.deviantart.com/][earlcolour.deviantart.com]])

\\

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_keys_index.html]]

\\
\\
| [[../index_u34.html#article_2][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u55.html>>

| [[../article_4/index_u5.html][下一项]] |
[[../index_u34.html#article_3][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_2/index_u22.html][上一项]] |

--------------

* Practical Emacs Lisp
  :PROPERTIES:
  :CLASS: calibre9
  :END:

[[file:lisp_logo.html][[[file:feed_0/article_3/images/img1.svg]]]]

[[file:buy_xah_emacs_tutorial.html][[[file:feed_0/article_3/images/img2_u2.jpg]]\\
Buy Xah Emacs Tutorial]]

Emacs is possible because of the embedded programing language emacs
lisp. Learning a bit emacs lisp will increase your understanding of
emacs by a lot.

This is a example based tutorial on emacs lisp, with focus on how-to.

Start at\\
[[file:elisp_basics.html][Emacs Lisp Basics]]

or watch a video:

Xah Lee Live Stream. emacs lisp for beginner.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/elisp.html]]

\\
\\
| [[../index_u34.html#article_3][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u5.html>>

| [[../article_5/index_u3.html][下一项]] |
[[../index_u34.html#article_4][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_3/index_u55.html][上一项]] |

--------------

* Emacs Lisp Examples
  :PROPERTIES:
  :CLASS: calibre9
  :END:

This section is collection of simple emacs lisp examples. They are great
for studying elisp but also as practical useful commands.

Start at:\\
[[file:elisp_title_case_text.html][Emacs: Change to Title Case]]

Note, you can also use other programing language and call them in emacs.
see [[file:elisp_perl_wrapper.html][Elisp: Write Emacs Commands Using
Python, Ruby, ...]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/elisp_command_examples_index.html]]

\\
\\
| [[../index_u34.html#article_4][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u3.html>>

| [[../article_6/index_u37.html][下一项]] |
[[../index_u34.html#article_5][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_4/index_u5.html][上一项]] |

--------------

* Emacs Lisp How to Write Major Mode
  :PROPERTIES:
  :CLASS: calibre9
  :END:

This sections shows you how to write a emacs major mode.

Starts at\\
[[file:elisp_syntax_coloring.html][How to Write a Emacs Major Mode for
Syntax Coloring]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/elisp_write_major_mode_index.html]]

\\
\\
| [[../index_u34.html#article_5][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u37.html>>

| [[../article_7/index_u18.html][下一项]] |
[[../index_u34.html#article_6][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_5/index_u3.html][上一项]] |

--------------

* Emacs Keys Overview
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2012-03-22. Last updated: 2020-04-12.

For emacs's basic keys, see [[file:emacs_keys_basics.html][Emacs Keys
Basics]]

** Organization of Emacs Key Shortcuts
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Emacs keys are often confusing to beginners. Here's a summary.

• Alt+x is to call a command by name.

• Ctrl+letter is for frequently used editing commands. For example:
cursor movement =next-line= , Paste =C-y=, mark =C-SPC=, =keyboard-quit=
=C-g=, =isearch-forward= =C-s=, etc.

• Alt+letter is for somewhat less frequently used operations, often
complement to Ctrl. For example: move by words {=M-f=, =M-b=}, Copy
=M-w=, =comment-dwim= =M-;=, etc.

• Ctrl+x ... is for commands that are useful globally. For example:
=dired= =C-x d=, =switch-to-buffer= =C-x b=, =string-rectangle=
=C-x r t=, =list-bookmark= =C-x r l=, etc.

• Ctrl+c ... is for major-mode specific commands. For example: in
[[file:emacs_outline.html][org-mode]], =org-time-stamp= =C-c .= inserts
date.

• Ctrl+h ... or F1 ... is for help or getting info. For example:
=describe-function= =C-h f=, =apropos-command= =C-h a=, =info= =C-h i=.

• Ctrl+Alt+key is for lisp coding related commands. For example:
=backward-sexp= =<C-M-left>=. [see
[[file:emacs_editing_lisp.html][Emacs: How to Edit Lisp Code]]]

Note Alt+x is technically Meta+x, ususually written as =M-x=. “Meta” is
a physical key on lisp machine keyboards. If you are in a text terminal,
and no Meta remapping has been setup, you can type Meta+x by pressing
Escape x. [see [[http://xahlee.info/kbd/lisp_keyboards.html][Space-cadet
Keyboard and Lisp Machine Keyboards]]]

See also: [[file:gnu_emacs_keybinding.html][A Curious Look at Emacs's
One Thousand Keybindings]].

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_keybinding_overview.html]]

\\
\\
| [[../index_u34.html#article_6][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u18.html>>

| [[../article_8/index_u31.html][下一项]] |
[[../index_u34.html#article_7][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_6/index_u37.html][上一项]] |

--------------

* Emacs Key Layout Diagram
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2006. Last updated: 2019-01-08.

** Emacs Keybinding Layout (QWERTY)
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_HTML
  <table class="kb-layout">
#+END_HTML

#+BEGIN_HTML
  <tbody class="calibre25">
#+END_HTML

#+BEGIN_HTML
  <tr class="calibre26">
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

1

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

2

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

3

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

4

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

5

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

6

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

7

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

8

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

9

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

0

#n

#n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

-

#-n

#-n

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

=

nil

count lines

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

⌫

⌫w

nil

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="calibre26">
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

q

quoted-insert

fill¶

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

w

cut

copy

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

e

⇥

→s

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

r

search←

center▮↕

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

t

⇋

⇋w

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

y

paste

paste↖

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

u

#arg

upcase

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

i

↦

⇥

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

o

↩↑

facemenu

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

p

↑

nil

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

[

esc

nil

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

]

abort-recursive-edit

nil

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

\

toggle-input-method

⌦␣⌫

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="calibre26">
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

a

⇤

←s

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

s

search→

highlight

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

d

⌦

⌦w

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

f

→

→w

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

g

cancel

goto

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

h

help

mark¶

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

j

↩

↩↦cmt

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

k

⌦l

⌦s

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

l

center↕

downcase

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

;

nil

comment

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

'

nil

abbrev-prefix-mark

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

↵

nil

nil

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="calibre26">
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

z

suspend-frame

⌦tochar

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

x

misc

M-x

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

c

mode specific

cap case

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

v

⇟

⇞

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

b

←

←w

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

n

↓

nil

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

m

↩

↤▮

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

,

nil

tags-loop-continue

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

.

nil

find-tag

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

/

undo

dabbrev-expand

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  <tr class="calibre26">
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

Ctrl

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td class="calibre27">
#+END_HTML

Alt

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  <td colspan="5" class="calibre27">
#+END_HTML

Space

set-mark-command

just-one-space

#+BEGIN_HTML
  </td>
#+END_HTML

#+BEGIN_HTML
  </tr>
#+END_HTML

#+BEGIN_HTML
  </tbody>
#+END_HTML

#+BEGIN_HTML
  </table>
#+END_HTML

Ctrl Alt prefix key

[[file:i/emacs_keybinding_qwerty_2016-07-26.png][png image 1255×539]]

[[file:emacs_kb_shortcuts_dv.html][Emacs Keybinding Layout, Dvorak]]

** Key Symbols
   :PROPERTIES:
   :CLASS: calibre17
   :END:

| ↑         | =previous-line=            | ↓         | =next-line=              |
| ←         | =backward-char=            | →         | =forward-char=           |
| ←w        | =backward-word=            | →w        | =forward-word=           |
| ←s        | =backward-sentence=        | →s        | =forward-sentence=       |
| ←¶        | =backward-paragraph=       | →¶        | =forward-paragraph=      |
| ⇤         | =move-beginning-of-line=   | ⇥         | =move-end-of-line=       |
| ↤▮        | =back-to-indentation=      |           |                          |
| ⇞         | =scroll-down= (PageUp)     | ⇟         | =scroll-up= (PageDown)   |
| ⤒         | =beginning-of-buffer=      | ⤓         | =end-of-buffer=          |
| search←   | =isearch-backward=         | search→   | =isearch-forward=        |

| ⌫         | =delete-backward-char=      | ⌦    | =delete-char=     |
| ⌫w        | =backward-kill-word=        | ⌦w   | =kill-word=       |
| |⌫        | =kill-line-backward=        | ⌦|   | =kill-line=       |
| ⌦tochar   | =zap-to-char=               | ⌦s   | =kill-sentence=   |
| ⌦␣⌫       | =delete-horizontal-space=   |      |                   |

| ↩          | =newline=                                  |
| ↩↑         | =open-line=                                |
| ↩↦cmt      | =indent-new-comment-line=                  |
| ⇥          | =tab-to-tab-stop= (insert tab or spaces)   |
| ↦          | =indent-for-tab-command=                   |
| #n         | =digit-argument=                           |
| #-n        | =negative-argument=                        |
| #arg       | =universal-argument=                       |
| center▮↕   | =move-to-window-line=                      |
| center↕    | =recenter=                                 |
| ⇋          | =transpose-chars=                          |
| ⇋w         | =transpose-words=                          |
| undo       | undo                                       |
| copy       | =kill-ring-save=                           |
| cut        | =kill-region=                              |
| cancel     | =keyboard-quit=                            |
| iconify    | =iconify-or-deiconify-frame=               |
| mark¶      | =mark-paragraph=                           |
| paste      | =yank=                                     |
| paste↖     | =yank-pop=                                 |
| M-x        | =execute-extended-command=                 |

Older version of this page in images:
[[file:i/emacs_kbd_layout_2.png][layout]] and
[[file:i/emacs_kbd_layout_symbols.png][legend]].

** Top Row Symbols
   :PROPERTIES:
   :CLASS: calibre17
   :END:

| ~               | `                  |       |               |                 |    |                      |       |                |                      |                                |       |       |
|                 |                    |       |               |                 |    |                      |       |                |                      |                                |       |       |
| nil             | nil                |       |               |                 |    |                      |       |                |                      |                                |       |       |
|                 |                    |       |               |                 |    |                      |       |                |                      |                                |       |       |
| not-modified    | tmm-menubar        |       |               |                 |    |                      |       |                |                      |                                |       |       |
| !               | @                  | #     | $             | %               |    | ^                    | &     | *              | (                    | )                              | _     | +     |
|                 |                    |       |               |                 |    |                      |       |                |                      |                                |       |       |
| nil             | set-mark-command   | nil   | nil           | nil             |    | nil                  | nil   | nil            | nil                  | nil                            | nil   | nil   |
|                 |                    |       |               |                 |    |                      |       |                |                      |                                |       |       |
| shell-command   | mark-word          | nil   | ispell-word   | query-replace   |    | delete-indentation   | nil   | pop-tag-mark   | insert-parentheses   | move-past-close-and-reindent   | nil   | nil   |

Ctrl Alt

** Function Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- F1 is help prefix. Same as C-h.
- F2 is =2C-two-columns=
- F3 is =kmacro-start-macro-or-insert-counter=
- F4 is =kmacro-end-or-call-macro=
- F10 is =menu-bar-open=
- F11 is =toggle-frame-fullscreen=

No Ctrl nor Meta are defined with function keys by default.

** Home/End Key Cluster
   :PROPERTIES:
   :CLASS: calibre17
   :END:

| Ins              | Home   | PgUp   |
|                  |        |        |
| overwrite-mode   | ⇤      | ⇞      |
| Del              | End    | PgDn   |
|                  |        |        |
| ⌦                | ⇥      | ⇟      |

no modifier

| Ins              | Home              | PgUp                       |
|                  |                   |                            |
| kill-ring-save   | |◀                | scroll-right               |
|                  |                   |                            |
| nil              | |◀-other-window   | scroll-other-window-down   |
| Del              | End               | PgDn                       |
|                  |                   |                            |
| ⌦w               | ▶|                | scroll-left                |
|                  |                   |                            |
| ⌫w               | ▶|-other-window   | scroll-other-window        |

Ctrl Alt

** Arrow Key Cluster
   :PROPERTIES:
   :CLASS: calibre17
   :END:

|      | ↑     |      |
|      |       |      |
|      | ↑¶    |      |
|      |       |      |
|      | nil   |      |
| ←    | ↓     | →    |
|      |       |      |
| ←w   | ↓¶    | →w   |
|      |       |      |
| ←w   | nil   | →w   |

Ctrl Alt

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

#+BEGIN_HTML
  </main>
#+END_HTML

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_kb_shortcuts.html]]

\\
\\
| [[../index_u34.html#article_7][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u31.html>>

| [[../article_9/index_u20.html][下一项]] |
[[../index_u34.html#article_8][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_7/index_u18.html][上一项]] |

--------------

* Emacs: How to Define Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2005-12-30. Last updated: 2020-03-11.

In emacs, you can create any keyboard shortcut to any command. This page
shows you how.

For example, if you want F9 for =whitespace-mode=, then, place this code
=(global-set-key (kbd "<f9>") 'whitespace-mode)= in your emacs init file
and restart emacs.

If you are experimenting, and don't want to restart emacs every time you
try to define a new key, you can place cursor at the end of parenthesis
and Alt+x =eval-last-sexp= 【Ctrl+x Ctrl+e】. The new key will be active
right away. [see [[file:elisp_eval_lisp_code.html][Evaluate Emacs Lisp
Code]]]

If you made some mistake and need to start emacs without loading your
init file, you can start emacs from terminal like this: =emacs -q=.

** Emacs Keybinding Syntax Examples
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-a") 'backward-char) ; Alt+a

    (global-set-key (kbd "C-a") 'backward-char) ; Ctrl+a

    (global-set-key (kbd "C-c t") 'backward-char) ; Ctrl+c t

    (global-set-key (kbd "<f7> <f8>") 'whitespace-mode)    ; F7 F8
#+END_SRC

More examples at [[file:keyboard_shortcuts_examples.html][Emacs
Keybinding Syntax Examples]].

** Find Key Syntax
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Alt+x =describe-key=, then press the key you want. Emacs will then
display its syntax.

For example, suppose you want to know the syntax for the key press of
Ctrl+Alt+F8.

Alt+x =describe-key=, then press Ctrl+Alt+F8, then emacs will print
“<C-M-f8> is undefined”. That means, you can use =(kbd "<C-M-f8>")= to
represent that key combination in lisp code.

Note: emacs has lot syntax variations for a given keyboard shortcut, but
the one printed by =describe-key= is guaranteed to work. For details of
emacs's keystroke syntax variation, see:
[[file:keystroke_rep.html][Emacs's Key Syntax Explained]].

** What's Meta key?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:feed_0/article_8/images/img1_u12.jpg]]

Symbolics's Lisp Machine keyboard PN 365407 Rev C. (Photo by Joey
Devilla
[+http://www.globalnerdy.com/2009/02/05/hacklabtos-lisp-machine-keyboard/+].
Used with permission.)

[see [[http://xahlee.info/kbd/lisp_keyboards.html][Lisp Machine
Keyboards]]]

The Meta key is a key on Lisp Machine keyboards in the 1970s and 1980s.

GNU Emacs for Microsoft and Linux by default make the Alt key do Meta.

On the Mac OS X, it's either ⌥option or ⌘command, depending on which
emacs distribution you are using. There's usually a menu that lets you
chose.

In emacs documenation, the Meta key's notation is =M-=. For example,
=M-x= means Meta+x.

** Remove a Keybinding
   :PROPERTIES:
   :CLASS: calibre17
   :END:

To unset a keybinding, set it to =nil=.

#+BEGIN_SRC emacs-lisp
    ;; unset a key
    (global-set-key (kbd "C-b") nil)
#+END_SRC

Or use =global-unset-key=.

#+BEGIN_SRC emacs-lisp
    ;; unset a key
    (global-unset-key (kbd "C-b"))
#+END_SRC

** Find the Command of a Given Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Alt+x =describe-key=, then type the key combination.

** List Current Major Mode's Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Alt+x =describe-mode=.

** List ALL Keybinding
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Alt+x =describe-bindings=.

Each major mode or minor mode usually add or change some keys. So, key
list generated is specific to current buffer.

** Swap Caps Lock and Control Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

You cannot do it within emacs, because these are at the OS level. See:

- [[http://xahlee.info/linux/linux_swap_control_and_alt_xmodmap.html][Linux:
  Swap Control Alt Keys, xmodmap]]
- [[http://xahlee.info/mswin/autohotkey_swap_capslock.html][Microsoft
  Windows: Swap Caps Lock, Alt, Control Keys]]
- [[http://xahlee.info/kbd/osx_swapping_modifier_keys.html][Mac OS X:
  How to Swap Control, Caps Lock, Option, Command Keys]]
- [[file:swap_CapsLock_Ctrl.html][Emacs: Why You Should Not Swap
  CapsLock and Control]]

** Keys to Avoid
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Emacs has its quirks. It's best not to define the following keys, unless
you know what you are doing.

- Ctrl+?. (due to emacs technical implementation quirk.
  [[../emacs_manual/elisp/Ctl_002dChar-Syntax.html][(info "(elisp)
  Ctl-Char Syntax")]])
- F1 or Ctrl+h. (This key is used for emacs help system and have a
  special status in emacs's key system. For example, type Ctrl+x, then
  type Ctrl+h, it'll list what valid keys can follow and the associated
  command.) [[../emacs_manual/elisp/Help-Functions.html][(info "(elisp)
  Help Functions")]]
- The Escape key or Ctrl+[. (The Escape key is tied to Ctrl+[ and Meta.
  Escape by itself has complicated meanings depending when it is pressed
  and how many times it is pressed.)
- Ctrl+Shift+letter. In text terminals, it cannot distinguish shifted
  and unshifted versions of such combination. Works fine if you always
  use emacs in a GUI environment.
  [[../emacs_manual/elisp/Other-Char-Bits.html][(info "(elisp) Other
  Char Bits")]]
- Ctrl+m or Enter. These are the same by default. It sends ASCII
  carriage return character.
- Ctrl+i or Tab. These are the same by default. It sends ASCII
  horizontal tab character.

** What's the difference between emacs "<tab>" and "TAB" key notation?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:emacs_key_notation_return_vs_RET.html][Emacs's Key Notation:
What's the difference between "<return>" and "RET"?]]

** Good Key Choices
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Emacs has some 7 thousand commands. By default, 800 of them have key
shortcuts. [see [[file:gnu_emacs_keybinding.html][A Curious Look at
Emacs's One Thousand Keybindings]]] All the common key spots are used.
If you define your own keys without care, you may find that many major
mode or minor mode override your keys, because they have priority.

By official emacs documentation
[[../emacs_manual/elisp/Key-Binding-Conventions.html][(info "(elisp) Key
Binding Conventions")]], the key space reserved for users are the
function keys F5 to F9, and Ctrl+c letter. This is very restrictive.

The following keys are good spots for your own definitions, and does not
cause any problems in practice.

F5, F6, F7, F8, F9, F11, F12 → Good. Combination with Alt or Ctrl or
Shift is also good. Make sure they are not used by the OS.

F1, F2, F3, F4, F10, F11 → Good if you don't use their defaults actions.

For their default actions, see [[../emacs/emacs_kb_shortcuts.html][Emacs
Key Layout Diagram]]

Ctrl+0 to Ctrl+9 → Good. By default they are =digit-argument=. Use
=universal-argument= 【Ctrl+u】 instead.

Alt+0 to Alt+9 → good.

Number Pad Keys → Very useful, but depending on which emacs distro/OS
you are using, or if you use emacs in terminal or GUI, binding these
keys may not work. [see [[file:emacs_bind_number_pad_keys.html][Emacs:
Bind Number Pad Keys]]]

** Practical Examples
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:emacs_useful_user_keybinding.html][Emacs Custom Keybinding to
Enhance Productivity]].

** Operating System Wide Key Keybinding Setup
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- [[http://xahlee.info/kbd/osx_keybinding.html][How to Create Your Own
  Keybinding in Mac OS X]]
- [[http://xahlee.info/mswin/Windows_keybinding.html][How to Create Your
  Own Keybinding in Microsoft Windows]]
- [[http://xahlee.info/linux/linux_keyboard_tools.html][Linux: Keyboard
  Software Guide ⌨]]

** Get Programable Keyboard
   :PROPERTIES:
   :CLASS: calibre17
   :END:

These days, best option is to get a programable keyboard. This way, you
don't have to worry about OS keyboard config. Just plug it in in any OS
and the keys do what you want.

see
[[http://xahlee.info/kbd/programable_keyboards_with_onboard_memory.html][Programable
Keyboards with Onboard Memory]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/keyboard_shortcuts.html]]

\\
\\
| [[../index_u34.html#article_8][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u20.html>>

| [[../article_10/index_u46.html][下一项]] |
[[../index_u34.html#article_9][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_8/index_u31.html][上一项]] |

--------------

* Emacs Keybinding Syntax Examples
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2005-12-30. Last updated: 2017-05-09.

This page shows sample syntax for defining keys in emacs.

In the following, the =left-char= is a example command. Replace it with
the command name you want.

** Single Modifier Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-a") 'left-char) ; Alt+a
    (global-set-key (kbd "C-a") 'left-char) ; Ctrl+a
#+END_SRC

** Function keys and Special keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f3>")   'left-char)   ; F3 key
    (global-set-key (kbd "<kp-3>") 'left-char)   ; the “3” key on number pad

    (global-set-key (kbd "<insert>") 'left-char) ; Ins key
    (global-set-key (kbd "<delete>") 'left-char) ; Del key ⌦ (forward delete)

    (global-set-key (kbd "<home>") 'left-char)
    (global-set-key (kbd "<end>") 'left-char)

    (global-set-key (kbd "<next>") 'left-char)   ; page down key
    (global-set-key (kbd "<prior>") 'left-char)  ; page up key

    (global-set-key (kbd "<left>") 'left-char)   ; ←
    (global-set-key (kbd "<right>") 'left-char)  ; →
    (global-set-key (kbd "<up>") 'left-char)     ; ↑
    (global-set-key (kbd "<down>") 'left-char)   ; ↓

    (global-set-key (kbd "DEL") 'left-char) ; backspace key ⌫
    (global-set-key (kbd "RET") 'left-char) ; Enter/Return key ⏎
    (global-set-key (kbd "SPC") 'left-char) ; Space bar key
#+END_SRC

[[../emacs_manual/elisp/Function-Keys.html][(info "(elisp) Function
Keys")]]

*** Menu/App Key
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:emacs_menu_app_keys.html][Emacs: Bind Menu/App Key]].

*** Super and Hyper Keys
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:emacs_hyper_super_keys.html][Emacs: How to Bind Super Hyper
Keys]].

** Key Sequence
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    ;; Example of single key sequence
    (global-set-key (kbd "<f7>") nil) ; good idea to put nil to the starting key
    (global-set-key (kbd "<f7> <f8>") 'calendar)
    (global-set-key (kbd "<f7> <f9>") 'calc)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; Example of sequence of single or chord keys

    (global-set-key (kbd "C-e") nil) ; good idea to put nil to the starting key
    (global-set-key (kbd "C-e a") 'calendar)  ; Ctrl+e a
    (global-set-key (kbd "C-e SPC") 'calendar)  ; Ctrl+e Space
    (global-set-key (kbd "C-e C-a") 'calendar); Ctrl+e Ctrl+a
#+END_SRC

** 1 Modifier + Special Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-<f3>") 'left-char) ; Alt+F3
    (global-set-key (kbd "C-<f3>") 'left-char)  ; Ctrl+F3
    (global-set-key (kbd "S-<f3>") 'left-char)  ; Shift+F3

    (global-set-key (kbd "M-<up>") 'left-char)  ; Alt+↑
    (global-set-key (kbd "C-<up>") 'left-char)  ; Ctrl+↑
    (global-set-key (kbd "S-<up>") 'left-char)  ; Shift+↑
#+END_SRC

** 2 Modifier Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2 modifier keys pressed simultaneously, plus a letter key:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-A") 'left-char) ; Alt+Shift+a
    (global-set-key (kbd "C-A") 'left-char) ; Ctrl+Shift+a
    (global-set-key (kbd "C-M-a") 'left-char) ; Ctrl+Alt+a
#+END_SRC

Example of 2 modifier keys with a digit key:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-#") 'left-char)       ; Alt+Shift+3 or Alt+#
    (global-set-key (kbd "C-#") 'left-char)       ; Ctrl+Shift+3 or Ctrl+#
    (global-set-key (kbd "C-M-3") 'left-char)     ; Ctrl+Alt+3

    (global-set-key (kbd "C-S-<kp-3>") 'left-char); Ctrl+Shift+“number pad 3”
#+END_SRC

** 3 Modifier Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

3 modifier keys pressed simultaneously:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-M-S-a") 'left-char)   ; Ctrl+Alt+Shift+a
    (global-set-key (kbd "C-M-!") 'left-char)     ; Ctrl+Alt+Shift+1 or Ctrl+Alt+!
    (global-set-key (kbd "C-M-S-<up>") 'left-char); Ctrl+Alt+Shift+↑
#+END_SRC

** No Modifiers
   :PROPERTIES:
   :CLASS: calibre17
   :END:

A shortcut can be created without any modifier keys.

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "3") 'left-char)
    (global-set-key (kbd "a") 'left-char)
    (global-set-key (kbd "é") 'left-char)
    (global-set-key (kbd "α") 'left-char)
    (global-set-key (kbd "你") 'left-char)
#+END_SRC

Emacs's keybinding system is based on character input, not on
key-presses. That's why you can define a key such that when the
character alpha α is entered, it invokes the command. For how to enter
Unicode characters, see [[file:emacs_n_unicode.html][Emacs: Unicode
Tutorial]].

[see [[file:keystroke_rep.html][Emacs's Key Syntax Explained]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/keyboard_shortcuts_examples.html]]

\\
\\
| [[../index_u34.html#article_9][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u46.html>>

| [[../article_11/index_u47.html][下一项]] |
[[../index_u34.html#article_10][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_9/index_u20.html][上一项]] |

--------------

* Emacs: Change Major Mode Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2005-12-30. Last updated: 2020-03-11.

** How to change/add keys to a major mode?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Use a hook for the mode. A hook will load your code whenever that mode
is activated.

#+BEGIN_SRC emacs-lisp
    (when (fboundp 'go-mode)

      (defun my-golang-config ()
        "For use in `go-mode-hook'."
        (local-set-key (kbd "C-c C-c") 'gofmt)
        ;; more stuff here
        )

      (add-hook 'go-mode-hook 'my-golang-config)

      (add-hook 'before-save-hook 'gofmt-before-save)
      )
#+END_SRC

[see [[file:emacs_whats_hook.html][Emacs: What's Hook?]]]

If you know the mode's keymap variable name, you can modify it directly.

#+BEGIN_SRC emacs-lisp
    (progn
      ;; modify dired keys
      (require 'dired )
      (define-key dired-mode-map (kbd "o") 'other-window)
      (define-key dired-mode-map (kbd "2") 'delete-window)
      (define-key dired-mode-map (kbd "3") 'delete-other-windows)
      (define-key dired-mode-map (kbd "4") 'split-window-below)
      (define-key dired-mode-map (kbd "C-o") 'find-file))
#+END_SRC

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_set_keys_for_major_mode.html]]

\\
\\
| [[../index_u34.html#article_10][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u47.html>>

| [[../article_12/index_u9.html][下一项]] |
[[../index_u34.html#article_11][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_10/index_u46.html][上一项]] |

--------------

* Emacs: Change Minor Mode Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2008-07-30. Last updated: 2017-05-31.

To change minor mode keys, you need to change the mode's keymap.

Here's a simple example:

#+BEGIN_SRC emacs-lisp
    (progn
      ;; change isearch's keys to arrows
      (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
      (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )

      (define-key isearch-mode-map (kbd "<left>") 'isearch-repeat-backward)
      (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward)
      )
#+END_SRC

** General Steps
   :PROPERTIES:
   :CLASS: calibre17
   :END:

1. Alt+x =describe-function=, then type the mode activation command
   name, then click on the link to open its elisp source code file.
2. in the mode's source code, search for “-map” to find its keymap name.
   Let's say it's “xyz-map”.
3. in the mode's source code, go all the way to bottom to find
   =(provide 'xyz)= if it exists. The “'xyz” would be the symbol for the
   mode.
4. In your emacs init file, start with =(require 'xyz)= (if the mode has
   a symbol), then =(define-key keymap_name (kbd "key") 'command_name)=

Not all mode defines a keymap in its source file. Some inherit from
other modes, some use keymaps from other elisp file that are not modes,
some don't have keymaps.

When you redefine some keys in a mode's keymap, be sure to make
keybinding for the displaced commands if you still want a key for them.

For example, in “shell-mode”, i wanted Alt+p to do something. The Alt+p
is =previous-history-element=. I think that command is useful enough to
have a hotkey. So, i defined some other key for that. (You can Alt+x
=describe-key= to find out a key's binding while in that mode.)

** Examples
   :PROPERTIES:
   :CLASS: calibre17
   :END:

*** Modify Isearch Keys
    :PROPERTIES:
    :CLASS: calibre14
    :END:

By default, Ctrl+s will do a interactive search. Pressing that again
will find the next match. Suppose you prefer to have Alt+s instead, so
in your emacs init file you defined:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-s") 'isearch-forward)
    (global-set-key (kbd "M-S") 'isearch-backward)
#+END_SRC

You want to use “M-s” to repeat the search. However, once you are in the
isearch prompt, technically it is a minor mode called =isearch-mode=. In
=isearch-mode=, “C-s” is defined to run =isearch-repeat-forward=. You
want “M-s” to run =isearch-repeat-forward=. Here's the code to reclaim
it:

#+BEGIN_SRC emacs-lisp
    (define-key isearch-mode-map (kbd "M-s") 'isearch-repeat-forward)
    (define-key isearch-mode-map (kbd "M-S") 'isearch-repeat-backward)
#+END_SRC

*** Modify Shell Keys
    :PROPERTIES:
    :CLASS: calibre14
    :END:

=shell= and =shell-command= 【Alt+!】 have many special keys. Suppose
you want to change them. They both use a keymap named comint-mode-map.
The following is a example of redefining some of its keys.

#+BEGIN_SRC emacs-lisp
    (progn
      ;; "change keybindings for shell related modes."
       (define-key comint-mode-map (kbd "M-p") 'recenter) ; was comint-previous-input
       (define-key comint-mode-map (kbd "M-n") 'nil) ; was comint-next-input
       (define-key comint-mode-map (kbd "M-r") 'kill-word) ; was comint-previous-matching-input
       (define-key comint-mode-map (kbd "M-s") 'other-window) ; was comint-next-matching-input

       ;; rebind displaced commands that i still want a key
       (define-key comint-mode-map (kbd "<f11>") 'comint-previous-input)
       (define-key comint-mode-map (kbd "<f12>") 'comint-next-input)
       (define-key comint-mode-map (kbd "S-<f11>") 'comint-previous-matching-input)
       (define-key comint-mode-map (kbd "S-<f12>") 'comint-next-matching-input)
    )
#+END_SRC

*** Modify Minibuffer Keys
    :PROPERTIES:
    :CLASS: calibre14
    :END:

The minibuffer is where emacs does prompts. It defines the following
keys:

- =C-j= :: =exit-minibuffer=
- =<RET>= :: =exit-minibuffer=
- =C-g= :: =abort-recursive-edit=
- =M-n= :: =next-history-element=
- =<down>= :: =next-history-element=
- =M-p= :: =previous-history-element=
- =<up>= :: =previous-history-element=
- =M-s= :: =next-matching-history-element=
- =M-r= :: =previous-matching-history-element=

Here's a example of how to redefine its keybinding:

#+BEGIN_SRC emacs-lisp
    ;; reclaim some bindings used in minibuffer for ergoemacs bindings for QWERTY
    (define-key minibuffer-local-map (kbd "M-p") 'recenter) ; was previous-history-element. Use ↑ key or f11.
    (define-key minibuffer-local-map (kbd "M-n") 'nil) ; was next-history-element. Use ↓ key or f12.

    (define-key minibuffer-local-map (kbd "M-r") 'kill-word) ; was previous-matching-history-element.
    (define-key minibuffer-local-map (kbd "M-s") 'other-window) ; was nest-matching-history-element

    ;; add back some bindings for commands whose binding we displaced
    (define-key minibuffer-local-map (kbd "<f11>") 'previous-history-element)
    (define-key minibuffer-local-map (kbd "<f12>") 'next-history-element)
    (define-key minibuffer-local-map (kbd "S-<f11>") 'previous-matching-history-element)
    (define-key minibuffer-local-map (kbd "S-<f12>") 'next-matching-history-element)
#+END_SRC

[[../emacs_manual/elisp/Text-from-Minibuffer.html][(info "(elisp) Text
from Minibuffer")]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/reclaim_keybindings.html]]

\\
\\
| [[../index_u34.html#article_11][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u9.html>>

| [[../article_13/index_u6.html][下一项]] |
[[../index_u34.html#article_12][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_11/index_u47.html][上一项]] |

--------------

* Emacs: Fix Minor Mode Key Priority
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2017-01-27.

2017-01-27 this page is work in progress

This page shows you how to change minor modes's key priority, when they
conflict.

** minor-mode-map-alist
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Minor mode's keys priority depends on the variable minor-mode-map-alist
.

minor-mode-map-alist is a association list. [see
[[file:elisp_association_list.html][Elisp: Association List]]]

Each element of minor-mode-map-alist is a cons pair, of the form

=(cons 'minor_mode_x_var minor_mode_x_keymap)=

The minor_mode_x_var is a variable of the same name of the command to
toggle the minor mode, and has value of t or nil. (all minor modes have
this variable)

The minor_mode_x_keymap is a keymap for that minor mode. (keymap is
basically a list, used for keybinding.
[[../emacs_manual/elisp/Format-of-Keymaps.html][(info "(elisp) Format of
Keymaps")]] )

Each minor_mode_x_var may have value true or false. When true, it means
the corresponding keymap is active.

Emacs goes thru the active one in minor-mode-map-alist, the front ones
has priority.

Note: emacs has other mechanisms about priority of keys.

- keymap embedded as text properties has priority. [see
  [[file:elisp_text_properties.html][Elisp: Text Properties]]]
- emulation-mode-map-alists
- minor-mode-map-alist

[[../emacs_manual/elisp/Controlling-Active-Maps.html][(info "(elisp)
Controlling Active Maps")]]

** Show Minor Mode Key Priority
   :PROPERTIES:
   :CLASS: calibre17
   :END:

You can use this command to show minor mode key priority.

#+BEGIN_SRC emacs-lisp
    (defun xah-display-minor-mode-key-priority  ()
      "Print out minor mode's key priority.
    URL `http://ergoemacs.org/emacs/minor_mode_key_priority.html'
    Version 2017-01-27"
      (interactive)
      (mapc
       (lambda (x) (prin1 (car x)) (terpri))
       minor-mode-map-alist))
#+END_SRC

[[file:emacs_minor_mode.html][Emacs: What's Minor Mode]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/minor_mode_key_priority.html]]

\\
\\
| [[../index_u34.html#article_12][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u6.html>>

| [[../article_14/index_u48.html][下一项]] |
[[../index_u34.html#article_13][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_12/index_u9.html][上一项]] |

--------------

* Emacs: Define Key Sequence
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-09-09. Last updated: 2018-03-27.

In emacs, you can define key sequences.

Suppose you want:

- F9 F6 for =visual-line-mode=
- F9 f7 for =whitespace-mode=
- F9 F8 for =toggle-frame-fullscreen=

#+BEGIN_SRC emacs-lisp
    (progn
      ;; define a prefix keymap
      (define-prefix-command 'my-f9-key-map)
      (define-key my-xyz-map (kbd "<f6>") 'visual-line-mode)
      (define-key my-xyz-map (kbd "<f7>") 'whitespace-mode)
      (define-key my-xyz-map (kbd "<f8>") 'toggle-frame-fullscreen)
      )

    (global-set-key (kbd "<f9>") my-f9-key-map)

    ;; now, 【F9 F6】 will call visual-line-mode
#+END_SRC

Press the lead key, then you can press Ctrl+h to see all available
key/commands that follows.

** Why is Key Sequence Useful
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- Key sequence shortcuts multiplies your available function keys. You
  trade one single easy key spot for some 50 possible 2 key strokes.
- These commands are take-a-break commands. That is, they are often used
  when there is a discontinuity in your editing activity.
- Yes, function keys are further away and need reach. That's why they
  are used for discontinuity commands here. Also, when the amount of
  typing comes close to a data-entry clerk, you want to move your hand
  about, to reduce overuse of the same hand muscle in the same position.

You can add other commands you use, for example:

- =dired= [see [[file:file_management.html][Emacs: File Manager,
  dired]]]
- =ibuffer= [see [[file:emacs_buffer_management.html][Emacs: List/Switch
  Buffers]]]
- =list-bookmark= [see [[file:bookmark.html][Emacs: Bookmark Tutorial]]]
- =recentf-open-files=[see [[file:emacs_recentf.html][Emacs: Open
  Recently Opened File]]]
- Any command to activate a major mode that you use often.
- Any minor mode you want to toggle often.

[[../emacs_manual/elisp/Keymaps.html][(info "(elisp) Keymaps")]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_keybinding_power_of_keys_sequence.html]]

\\
\\
| [[../index_u34.html#article_13][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u48.html>>

| [[../article_15/index.html][下一项]] |
[[../index_u34.html#article_14][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_13/index_u6.html][上一项]] |

--------------

* Emacs: How to Bind Super Hyper Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2010-07-31. Last updated: 2018-09-28.

This page shows you how to define Super and Hyper keys in emacs.

Emacs supports extra modifier keys called Super and Hyper. These keys
are from lisp keyboards.

[[file:feed_0/article_8/images/img1_u12.jpg]]

Symbolics's lisp machine keyboard PN 365407 Rev C. (Photo by
[[http://www.globalnerdy.com/2009/02/05/hacklabtos-lisp-machine-keyboard/][Joey
Devilla]]. Used with permission.)

[see [[http://xahlee.info/kbd/lisp_keyboards.html][Lisp Machine
Keyboards]]]

You can set Hyper and Super to PC keyboard's ❖Window key or the ▤Menu
key, or Apple Keyboard's ⌥option key.

** Why Use Super and Hyper?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The advantage of creating the Super and Hyper in emacs is that you can
have more hotkeys, and no major or minor modes will stamp on your keys.
For example, Super for all your personal hotkeys, or for entering math
symbols or Unicode. [see
[[http://xahlee.info/kbd/creating_apl_keyboard_layout.html][How to
Create a APL or Math Symbols Keyboard Layout ⌨]]]

However, if you have extra keys on your keyboard, i recommend not to use
them for modifier combinations. Instead, use them as leader keys to
create key sequences. That way, it's easier to press, and you get far
more possible keybindings.

[see [[http://xahlee.info/kbd/how_many_keyboard_shortcuts.html][How Many
Keyboard Shortcuts Are There]]]

[see [[http://xahlee.info/kbd/banish_key_chords.html][Ban Key Chords]]]

[see [[../emacs/emacs_keybinding_power_of_keys_sequence.html][Emacs:
Define Key Sequence]]]

** Create Super and Hyper Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

*** Microsoft Windows
    :PROPERTIES:
    :CLASS: calibre14
    :END:

#+BEGIN_SRC emacs-lisp
    ;; make PC keyboard's Win key or other to type Super or Hyper, for emacs running on Windows.
    (setq w32-pass-lwindow-to-system nil)
    (setq w32-lwindow-modifier 'super) ; Left Windows key

    (setq w32-pass-rwindow-to-system nil)
    (setq w32-rwindow-modifier 'super) ; Right Windows key

    (setq w32-pass-apps-to-system nil)
    (setq w32-apps-modifier 'hyper) ; Menu/App key
#+END_SRC

[[../emacs_manual/emacs/Windows-Keyboard.html][(info "(emacs) Windows
Keyboard")]]

Note: in Microsoft Windows, several keybindings with the Windows key is
bound at a low level, and applications do not see them. For example,
❖Window+r is for launching apps by command name. There's no way around
that unless you use other tools such as AutoHotkey. [see
[[http://xahlee.info/mswin/autohotkey.html][AutoHotkey Tutorial]]] Even
so, it may be impossible to disable ❖Window+l (lock window). (registry
edit may not work)

For more advanced keyboard tools for Microsoft Windows, see:
[[http://xahlee.info/mswin/Windows_keybinding.html][Windows: Keyboard
Layout Tools, Key Macro Tools]]

*** Mac OS X
    :PROPERTIES:
    :CLASS: calibre14
    :END:

#+BEGIN_SRC emacs-lisp
    ;; set keys for Apple keyboard, for emacs in OS X
    (setq mac-command-modifier 'meta) ; make cmd key do Meta
    (setq mac-option-modifier 'super) ; make opt key do Super
    (setq mac-control-modifier 'control) ; make Control key do Control
    (setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
#+END_SRC

Note: if you set ⌘command or Fn key, some of their Mac function remains.
For example, ⌘command+Tab still do switch app, and Fn key can still be
used as the modifier for multimedia keys. Thanks to jcs, see [A Hyper
Key for the Mac 2012-11-28 By Jon Snader. At
[[http://irreal.org/blog/?p=1450]] , accessed on 2013-04-21 ]

See also:

- [[http://xahlee.info/kbd/Mac_OS_X_keymapping_keybinding_tools.html][Mac:
  Keyboard/Automation Tools]]
- [[http://xahlee.info/kbd/osx_keybinding.html][How to Change macOS
  Keybinding]]

*** Linux
    :PROPERTIES:
    :CLASS: calibre14
    :END:

By default, the ❖Window key is Super.

On Linux, you define Super and Hyper key in the OS. For example, in
Ubuntu 11.04, it's under 〖System ▸ Preferences ▸ keyboard〗 then
“Layout” tap, “Options...” button.

Note that some Linux or the Desktop/WindowManager predefines some Super
key. You need to take them off before emacs can see it. Best way to
check is simply try define the key in emacs first and see if it works.

For more advanced settings, see:
[[http://xahlee.info/linux/linux_keybinding_index.html][Linux Keybinding
Tutorial]]

** Set Super Hyper Keybinding
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Use =H= for Hyper, =s= for Super.

#+BEGIN_SRC emacs-lisp
    ;; examples of keybinding with hyper or super key

    (global-set-key (kbd "H-b") 'backward-word) ; H is for hyper
    (global-set-key (kbd "s-b") 'backward-word) ; lower case “s” is for super

    (global-set-key (kbd "M-H-b") 'backward-word) ; Meta+Hyper+b
    (global-set-key (kbd "M-s-b") 'backward-word) ; Meta+Super+b

    (progn
      ;; some Hyper keys to insert Unicode chars
      (define-key key-translation-map (kbd "H-3") (kbd "•")) ; bullet
      (define-key key-translation-map (kbd "H-4") (kbd "◇")) ; white diamond
      (define-key key-translation-map (kbd "H-5") (kbd "†")) ; dagger
      )
#+END_SRC

For more detail, see [[file:keyboard_shortcuts.html][Emacs: How to
Define Keys]].

** Key Ghosting Warning
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Be aware that most keyboards won't be able to detect certain combination
of keys. This is called “n-key rollover”.

For example, on
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
Natural Ergonomic 4000 keyboard]], the key ▤Menu+RShift+x does not
register (but with left Shift it does). So, if you have set ▤Menu to do
Hyper, then Hyper+X with right Shift won't work.

Vast majority of keyboards have ghosting problem, including Apple
keyboards. For detail, see:
[[http://xahlee.info/kbd/keyboard_n-key_rollover_key_ghosting.html][What's
NKRO, N-key Rollover?]] .

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html]]

\\
\\
| [[../index_u34.html#article_14][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index.html>>

| [[../article_16/index_u56.html][下一项]] |
[[../index_u34.html#article_15][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_14/index_u48.html][上一项]] |

--------------

* Emacs: Bind Menu/App Key
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2015-06-28. Last updated: 2017-11-23.

On most PC keyboards, there's the ▤Menu key, also known as App key. This
page shows you how to use that key in emacs, on linux or Mac or Windows.

[[file:feed_0/article_15/images/img1_u1.jpg]]

the ▤Menu key (to the right of Alt).

** Menu Key in Linux
   :PROPERTIES:
   :CLASS: calibre17
   :END:

In Linux GNU emacs, by default, ▤Menu key invokes
=execute-extended-command=

Under linux, the menu key has the syntax =(kbd "<menu>")=

For example,

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<menu>") 'execute-extended-command)
#+END_SRC

** Menu key on Microsoft Windows
   :PROPERTIES:
   :CLASS: calibre17
   :END:

On Microsoft Windows, by default, it does nothing.

Under Windows, the menu key has the syntax =(kbd "<apps>")=

You can set it to do =execute-extended-command=, like this:

#+BEGIN_SRC emacs-lisp
    (when (string-equal system-type "windows-nt")
      (global-set-key (kbd "<apps>") 'execute-extended-command))
#+END_SRC

** Menu key on Mac
   :PROPERTIES:
   :CLASS: calibre17
   :END:

On Mac OS X, if you are using a PC keyboard, the ▤Menu key will send
Ctrl+p by default.

*** How to fix menu key on the Mac?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

You can workaround by:

#+BEGIN_SRC emacs-lisp
    ;; make Ctrl+p send the menu/app key
    (define-key key-translation-map (kbd "C-p") (kbd "<menu>"))
#+END_SRC

or

Set a command to it like this
=(global-set-key (kbd "C-p") 'execute-extended-command)=

That's still not a good fix, because you lost the C-p, but i don't know
the answer.

Might try with these Mac tools
[[http://xahlee.info/kbd/Mac_OS_X_keymapping_keybinding_tools.html][Mac:
Key Remapping and Keybinding Tools]]

*** How to make Mac's ⌘command or ⌥option key to send the ▤Menu key?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

To make Mac's ⌘command or ⌥option key to send the ▤Menu key, use the
util Seil (aka PCKeyboardHack). See:
[[http://xahlee.info/kbd/Mac_OS_X_keymapping_keybinding_tools.html][Mac:
Key Remapping and Keybinding Tools]].

But it'll still send out the C-p. So you need to remap C-p described
above.

** Make the Menu as Leader Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Best is to set ▤Menu key as the lead key of key sequences for emacs's
hundreds of commands. [see
[[http://xahlee.info/kbd/banish_key_chords.html][Ban Key Chords]]]

Example of key sequence starting with the ▤Menu key.

#+BEGIN_SRC emacs-lisp
    ;; on Linux, the menu/apps key syntax is <menu>
    ;; on Windows, the menu/apps key syntax is <apps>
    ;; make the syntax equal
    (define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))

    (progn
      ;; define set of key sequences
      (define-prefix-command 'my-leader-key-map)

      (define-key my-leader-key-map (kbd "RET") 'execute-extended-command)
      (define-key my-leader-key-map (kbd "<menu>") 'exchange-point-and-mark)

      (define-key my-leader-key-map (kbd "'") 'quoted-insert)

      (define-key my-leader-key-map (kbd "2") 'delete-window)
      (define-key my-leader-key-map (kbd "3") 'delete-other-windows)
      (define-key my-leader-key-map (kbd "4") 'split-window-below)
      (define-key my-leader-key-map (kbd "5") 'split-window-right)

      (define-key my-leader-key-map (kbd "7") 'dired-jump)
      (define-key my-leader-key-map (kbd "9") 'ispell-word)

      (define-key my-leader-key-map (kbd "a") 'mark-whole-buffer)
      (define-key my-leader-key-map (kbd "b") 'end-of-buffer)

      (define-key my-leader-key-map (kbd "d") 'beginning-of-buffer)
      (define-key my-leader-key-map (kbd "g") 'isearch-forward)

      (define-key my-leader-key-map (kbd "k") 'yank)
      (define-key my-leader-key-map (kbd "l") 'recenter-top-bottom)
      (define-key my-leader-key-map (kbd "m") 'universal-argument)

      (define-key my-leader-key-map (kbd "p") 'query-replace)

      (define-key my-leader-key-map (kbd "z") 'comment-dwim))

    ;; make the menu key as leader key
    (global-set-key (kbd "<menu>") 'my-leader-key-map)
#+END_SRC

*** Why should you use the menu key?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Setting the ▤Menu key for M-x is quite convenient. You'd know if you've
used it on linux.

but, emacs has hundreds of commands starting with Ctrl+x. It'd be nice,
if all these are just a key sequence of 3 keys. That way, you don't have
to hold down a key on the corner.

So, we can use the ▤Menu as a lead key for sequences.

But you don't have a single key for M-x anymore? what to do? The
standard PC keyboard doesn't have much convenient keys. So, you could
map one of the ❖Window key to do the M-x. Else, you can just set ▤Menu
Enter or ▤Menu Space or ▤Menu ▤Menu to do M-x.

*** How to design key sequence to replace all C-x?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

you can see example design here [[../misc/ergoemacs_vi_mode.html][Emacs:
Xah Fly Keys]]

** Use of Menu Key Outside of Emacs
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[http://xahlee.info/kbd/whats_the_use_of_the_menu_app_key.html][What's
the Use of the ▤ Menu/App Key?]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_menu_app_keys.html]]

\\
\\
| [[../index_u34.html#article_15][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u56.html>>

| [[../article_17/index_u8.html][下一项]] |
[[../index_u34.html#article_16][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_15/index.html][上一项]] |

--------------

* Emacs: Remapping Keys Using key-translation-map
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2011-03-17. Last updated: 2017-12-23.

If you want to define a key for inserting a Unicode character such as
BULLET • , the best way is to use key-translation-map.

Here's how to set a key to insert bullet character:

#+BEGIN_SRC emacs-lisp
    (define-key key-translation-map (kbd "<f8>") (kbd "•")) ; 【F8】 insert bullet char
#+END_SRC

Here's how to set a key sequence to insert different Unicode characters:

#+BEGIN_SRC emacs-lisp
    ;; set keys to type Unicode
    (define-key key-translation-map (kbd "<f9> u <down>") (kbd "↓"))
    (define-key key-translation-map (kbd "<f9> u <left>") (kbd "←"))
    (define-key key-translation-map (kbd "<f9> u <right>") (kbd "→"))
    (define-key key-translation-map (kbd "<f9> u <up>") (kbd "↑"))
#+END_SRC

You can use it to swap keys.

#+BEGIN_SRC emacs-lisp
    ;; swap keys
    (define-key key-translation-map (kbd "<f11>") (kbd "<f12>"))
    (define-key key-translation-map (kbd "<f12>") (kbd "<f11>"))
#+END_SRC

[[../emacs_manual/elisp/Translation-Keymaps.html][(info "(elisp)
Translation Keymaps")]]

*** Problem Using global-set-key
    :PROPERTIES:
    :CLASS: calibre14
    :END:

You could also use =global-set-key=, but it has problems.

#+BEGIN_SRC emacs-lisp
    ;; using global-set-key to insert unicode arrow. This won't work when in isearch
    (global-set-key (kbd "<f8>") (lambda () (interactive) (insert "→")))
#+END_SRC

When you do interactive search Ctrl+s, then when you type your key,
it'll exit the search instead of inserting the char.

** keyboard-translate
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Note: there's the function =keyboard-translate=. However, it is designed
to translate character only. So, key combination isn't a character and
you can't use it for Hyper key combination. (Due to historical reasons,
=keyboard-translate= does work for some Ctrl combination key. (thanks to
Stefan Monnier [[[http://www.iro.umontreal.ca/~monnier/]]] and Deniz
Dogan for this tip.
([[http://groups.google.com/group/gnu.emacs.help/msg/e0dc12074c776bda]])))

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_key-translation-map.html]]

\\
\\
| [[../index_u34.html#article_16][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u8.html>>

| [[../article_18/index_u15.html][下一项]] |
[[../index_u34.html#article_17][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_16/index_u56.html][上一项]] |

--------------

* Emacs: Mouse Config
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-08-29. Last updated: 2020-08-15.

This page shows you how to bind mouse buttons or mouse wheel to emacs
commands, and other mouse configuration issues.

** Syntax for Mouse Button or Wheel
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The syntax for mouse button and wheel are different for each {Microsoft
Windows, Linux, Mac}, also depends on what mouse, trackpad, etc you are
using.

Press Alt+x =describe-key=, then press the button or scroll the wheel.
Emacs will display the syntax. Then, use =(kbd syntax)=. Example:

Linux, syntax for mouse wheel scroll up/down

- =(kbd "<mouse-4>")= → up
- =(kbd "<mouse-5>")= → down

Microsoft Windows, MacOS, Syntax for mouse wheel scroll up/down:

- =(kbd "<wheel-up>")=
- =(kbd "<wheel-down>")=

** Make mouse wheel not accelerate
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (setq mouse-wheel-progressive-speed nil)
#+END_SRC

This is useful if you have
[[http://xahlee.info/kbd/mouse_with_spinning_flywheel.html][Mouse with
Spin Wheel]] .

** Adjust Scroll Amount
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    ;; 2020-08-15 this is great for logitech's spin wheel
    (setq mouse-wheel-progressive-speed nil)
#+END_SRC

** Define a command for clicked point
   :PROPERTIES:
   :CLASS: calibre17
   :END:

When you bind a mouse button to a command, the command will work on the
current cursor position, not clicked point.

for example:

#+BEGIN_SRC emacs-lisp
    ;; on linux, make right button show char info (of current cursor position, not clicked point)
    (when (string-equal system-type "gnu/linux") ; linux
      (global-set-key (kbd "<mouse-3>") 'describe-char)
      )
#+END_SRC

To make the command act on clicked point, you need to write a wrapper
command that sets the position, then call the command you want. For
example, suppose the command you want is =describe-char= on clicked
point. You write a wrapper, like this:

#+BEGIN_SRC emacs-lisp
    (defun xah-click-describe-char (@click)
      "Mouse click to `describe-char' at clicked point.
    URL `http://ergoemacs.org/emacs/emacs_mouse_wheel_config.html'
    Version 2015-04-22"
      (interactive "e")
      (let ((p1 (posn-point (event-start @click))))
        (goto-char p1)
        (describe-char p1)))

    ;; on linux, make right button show char info on clicked point
    (when (string-equal system-type "gnu/linux")
      (global-set-key (kbd "<mouse-3>") 'xah-describe-char-on-click)
      )
#+END_SRC

** Make mouse wheel move n screen
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (defun scroll-up-10-lines ()
      "Scroll up 10 lines"
      (interactive)
      (scroll-up 10))

    (defun scroll-down-10-lines ()
      "Scroll down 10 lines"
      (interactive)
      (scroll-down 10))

    (global-set-key (kbd "<mouse-4>") 'scroll-down-10-lines) ;
    (global-set-key (kbd "<mouse-5>") 'scroll-up-10-lines) ;
#+END_SRC

** Make mouse wheel move cursor n lines
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (defun cursor-down-some-lines ()
      "Move cursor down 10 logical lines"
      (interactive)
      (forward-line 10)
      )

    (defun cursor-up-some-lines ()
      "Move cursor up 10 logical lines"
      (interactive)
      (forward-line -10))

    (when (string-equal system-type "gnu/linux")
      (progn
        (global-set-key (kbd "<mouse-4>") 'cursor-up-some-lines) ; wheel up
        (global-set-key (kbd "<mouse-5>") 'cursor-down-some-lines) ; wheel down
        )
      )
#+END_SRC

** Make mouse wheel move cursor by paragraph
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    ((string-equal system-type "gnu/linux")
      (global-set-key (kbd "<mouse-4>") 'xah-backward-block) ; wheel up
      (global-set-key (kbd "<mouse-5>") 'xah-forward-block) ; wheel down
      )
#+END_SRC

you can find the definition of “xah-backward-block” at
[[file:emacs_move_by_paragraph.html][Emacs: Move Cursor by Text Block]]

** what's the default command for mouse wheel?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

It's =mwheel-scroll=. For both scroll up/down.

Note that the command =mwheel-scroll= has some special features:

- Accelerated scroll. (distance = speed + wheel turn amount.)
- Scroll the pane the mouse pointer is at, not the pane where cursor is.

If you assign a another command to the wheel, such as moving cursor
command, you do not have these features.

** Advantage of Mouse Wheel Over Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Mouse wheel is suitable for any pair of fast-repeating commands such as
{previous, next} or {backward, forward}, because you can control the
firing rate and repetition rate precisely, fast, and reverse direction
more easily, and is easier on the hand.

If you are looking to buy a mouse, see my
[[http://xahlee.info/kbd/mouse_index.html][Mouse Reviews]].

** Setup Mouse Click to Highlight Matching Words
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:emacs_mouse_click_highlight_word.html][Emacs: Setup Mouse Click
to Highlight Matching Words]]

** Add Web Browser Backspace Button
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:emacs_adding_browser_keys.html][Emacs: Add Key to Info mode]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_mouse_wheel_config.html]]

\\
\\
| [[../index_u34.html#article_17][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u15.html>>

| [[../article_19/index_u50.html][下一项]] |
[[../index_u34.html#article_18][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_17/index_u8.html][上一项]] |

--------------

* Emacs: Add Custom Keys to Enhance Productivity
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2005-12-30. Last updated: 2019-01-08.

Here are some practical emacs keybinding suggestions to enhance
productivity.

** Undo, Redo
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-z") 'undo) ; 【Ctrl+z】

    ;; Mac style redo
    (global-set-key (kbd "C-Z") 'redo) ; 【Ctrl+Shift+z】

    ;; Windows style redo
    (global-set-key (kbd "C-y") 'redo) ; 【Ctrl+y】
#+END_SRC

For redo, you'll need to install a redo mode. [see
[[file:emacs_best_redo_mode.html][Emacs: Best Undo/Redo Mode]]]

Note: use Microsoft Windows style redo key. That's better. Less key
strokes.

The following single key shortcuts are good for avoiding Repetitive
Strain Injury.

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f2>") 'xah-cut-line-or-region)
    (global-set-key (kbd "<f3>") 'xah-copy-line-or-region)
    (global-set-key (kbd "<f4>") 'yank)       ; paste
    (global-set-key (kbd "<C-f4>") 'yank-pop) ; paste previous
    (global-set-key (kbd "<f5>") 'undo)
    (global-set-key (kbd "<C-f5>") 'redo)
#+END_SRC

For the copy/cut commands, see:
[[file:emacs_copy_cut_current_line.html][Emacs: Copy/Cut Current Line If
No Selection]].

** Mac Style Home/End Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    ;; Mac style home/end keys
    (global-set-key (kbd "<home>") 'beginning-of-buffer)
    (global-set-key (kbd "<end>") 'end-of-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; Windows style home/end keys
    (global-set-key (kbd "<home>") 'move-beginning-of-line)
    (global-set-key (kbd "<end>") 'move-end-of-line)
#+END_SRC

** Remap Cursor Movement Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The cursor movement commands are the most frequently used commands. [see
[[file:command-frequency.html][Emacs's Command Frequency]]]. Make them
easier to type.

#+BEGIN_SRC emacs-lisp
    ;; make cursor movement keys under right hand's home-row.
    (global-set-key (kbd "M-i") 'previous-line)
    (global-set-key (kbd "M-j") 'backward-char)
    (global-set-key (kbd "M-k") 'next-line)
    (global-set-key (kbd "M-l") 'forward-char)

    (global-set-key (kbd "M-u") 'backward-word)
    (global-set-key (kbd "M-o") 'forward-word)

    (global-set-key (kbd "M-SPC") 'set-mark-command)
#+END_SRC

For a more systematic change, use
[[../misc/ergoemacs_vi_mode.html][Emacs: Xah Fly Keys]]

** Open Frequently Used Files
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here's examples of defining keys to open frequently used files.

#+BEGIN_SRC emacs-lisp
    (global-set-key
     (kbd "<f8> <f8>")
     (lambda ()
       (interactive)
       (find-file "~/.emacs.d/my-keybinding.el")))

    (global-set-key
     (kbd "<f8> <f7>")
     (lambda ()
       (interactive)
       (find-file "~/web/my-unicode-template.html")))

    (global-set-key
     (kbd "<f8> <f6>")
     (lambda ()
       (interactive)
       (find-file "~/todo.org")))
#+END_SRC

** Template Insertion
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Define keys to insert text you use frequently. Header, footer,
signature, copyright template, etc.

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f5> h") 'my-insert-header)
    (global-set-key (kbd "<f5> f") 'my-insert-footer)
    (global-set-key (kbd "<f5> s") 'my-insert-signature)

    ;; example. template insertion command
    (defun my-insert-header ()
      "Insert copyright header."
      (interactive)
      (insert ";; This program is free software: you can redistribute it and/or modify ..."))
#+END_SRC

If you want a systematic template system, you should use abbrev mode.
[see [[file:emacs_abbrev_mode.html][Emacs: Abbrev Mode by Commands]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_useful_user_keybinding.html]]

\\
\\
| [[../index_u34.html#article_18][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u50.html>>

| [[../article_20/index_u4.html][下一项]] |
[[../index_u34.html#article_19][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_18/index_u15.html][上一项]] |

--------------

* Emacs: isearch by Arrow Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2015-05-11. Last updated: 2019-01-08.

Here's very convenient keys for isearch. Put it in your emacs init.

#+BEGIN_SRC emacs-lisp
    (progn
      ;; set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
      (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
      (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )

      (define-key isearch-mode-map (kbd "<left>") 'isearch-repeat-backward)
      (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward)

      (define-key minibuffer-local-isearch-map (kbd "<left>") 'isearch-reverse-exit-minibuffer)
      (define-key minibuffer-local-isearch-map (kbd "<right>") 'isearch-forward-exit-minibuffer))
#+END_SRC

when in isearch, the arrow keys will:

- → next occurrence.
- ← previous occurrence.
- ↑ previous search term.
- ↓ next search term.
- Enter exit isearch.

This way, searching forward/backward is just one single key press, no
key combination.

This is especially useful with a command that searches current word.
See: [[file:modernization_isearch.html][Emacs: isearch Current Word]].

For basics of isearch, see:
[[file:emacs_search_current_word.html][Emacs: Search Text in Buffer]].

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_isearch_by_arrow_keys.html]]

\\
\\
| [[../index_u34.html#article_19][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u4.html>>

| [[../article_21/index_u59.html][下一项]] |
[[../index_u34.html#article_20][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_19/index_u50.html][上一项]] |

--------------

* Emacs: Bind Number Pad Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2015-04-19. Last updated: 2019-01-08.

[[file:feed_0/article_20/images/img1_u3.jpg]]

See that large useless number pad on your keyboard? It's your best
friend. It adds 17 programable keys!

For example, key to [[../emacs/emacs_buffer_management.html][List
Buffers]], open [[../emacs/bookmark.html][bookmark]].

#+BEGIN_SRC emacs-lisp
    ;; bind number pad keys

    (global-set-key (kbd "<kp-1>") 'bookmark-bmenu-list)
    (global-set-key (kbd "<kp-2>") 'ibuffer)
#+END_SRC

To use, be sure the number lock is on.

Note: On the Mac, defining keys for the numeric keypad will not work.
You need to use some keymap tool first to make them send numpad key
signals. [see
[[http://xahlee.info/kbd/Mac_OS_X_keymapping_keybinding_tools.html][Mac:
Key Remapping and Keybinding Tools]]]

If you run emacs in terminal, numberpad may not work.

More examples:

#+BEGIN_SRC emacs-lisp
    ;; number pad keys

    (global-set-key (kbd "<kp-decimal>") 'other-window)
    (global-set-key (kbd "<kp-0>") 'delete-window)
    (global-set-key (kbd "<kp-1>") 'delete-other-windows)
    (global-set-key (kbd "<kp-2>") 'split-window-below)
    (global-set-key (kbd "<kp-3>") 'xah-open-file-at-cursor)

    (global-set-key (kbd "<kp-subtract>") 'xah-close-current-buffer)
    (global-set-key (kbd "<kp-divide>") 'xah-previous-user-buffer)
    (global-set-key (kbd "<kp-multiply>") 'xah-next-user-buffer)

    ;; with control key down
    (global-set-key (kbd "<C-kp-divide>") 'xah-previous-emacs-buffer)
    (global-set-key (kbd "<C-kp-multiply>") 'xah-next-emacs-buffer)
#+END_SRC

You can also use the numberpad keys for outside of emacs. See:

- [[http://xahlee.info/kbd/keyboard_numpad_as_function_keys.html][How to
  Program Numeric Keypad as Function Keys]]
- [[http://xahlee.info/kbd/set_single_key_to_switch_app.html][How to Set
  Key to Switch to Browser]]

If you don't have a numberpad and want to buy one:

- [[http://xahlee.info/kbd/keyboard_number_pad.html][Best Numeric
  Keypads]]
- [[http://xahlee.info/kbd/programable_keypads.html][Programable
  Keypads]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_bind_number_pad_keys.html]]

\\
\\
| [[../index_u34.html#article_20][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u59.html>>

| [[../article_22/index_u43.html][下一项]] |
[[../index_u34.html#article_21][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_20/index_u4.html][上一项]] |

--------------

* Emacs: 1 Key for M-x
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2018-12-10. Last updated: 2020-02-21.

The default key for =execute-extended-command= is Alt+x.

On Linux, ▤Menu key does =execute-extended-command= by default.

[[file:feed_0/article_15/images/img1_u1.jpg]]

the ▤Menu key (to the right of Alt).

You should set F8 or ▤Menu key for it. Single key is easier to type than
Alt+x.

For how, see: [[file:emacs_menu_app_keys.html][Emacs: Bind Menu/App
Key]].

*** Turn On icomplete-mode
    :PROPERTIES:
    :CLASS: calibre14
    :END:

When Alt+x =execute-extended-command=, you can press the Tab key to show
a list of suggestions.

You can turn on =icomplete-mode=. It'll show a list of completions
automatically.

[see [[file:emacs_icomplete_mode.html][Emacs: Icomplete Mode]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_fast_mx.html]]

\\
\\
| [[../index_u34.html#article_21][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u43.html>>

| [[../article_23/index_u29.html][下一项]] |
[[../index_u34.html#article_22][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_21/index_u59.html][上一项]] |

--------------

* Emacs: Add Key to Info mode
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2010-12-20. Last updated: 2020-09-01.

emacs info mode uses key l for visiting to previous page viewed. [see
[[file:emacs_view_info_page.html][Emacs: View Info Page]]]

** 5 Buttons Mouse, Set Backward Thumb Buttons for Info
   :PROPERTIES:
   :CLASS: calibre17
   :END:

① Alt+x =describe-key=, then press the mouse button. Emacs might say:

=<mouse-8> … undefined=

② add the following in your info key function given above.

#+BEGIN_SRC emacs-lisp
    (defun xah-add-key-to-Info-mode ()
      "Add keybinding to `Info-mode'.
    URL `http://ergoemacs.org/emacs/emacs_adding_browser_keys.html'
    Version 2020-09-01"
      (when (string-equal system-type "darwin") ; macOS
        (local-set-key (kbd "s-[") 'Info-history-back)))

    (add-hook 'Info-mode-hook 'xah-add-key-to-Info-mode)
#+END_SRC

I recommend a mouse with 5 or more buttons, because the extra buttons
let you do lots of things without moving hand back to the keyboard.

See my Mouse Reviews [[http://xahlee.info/kbd/mouse_index.html][Mouse
Reviews]]

See also: [[file:emacs_mouse_wheel_config.html][Emacs: Mouse Config]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_adding_browser_keys.html]]

\\
\\
| [[../index_u34.html#article_22][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u29.html>>

| [[../article_24/index_u23.html][下一项]] |
[[../index_u34.html#article_23][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_22/index_u43.html][上一项]] |

--------------

* Emacs: Easy Ctrl+x for Dvorak Layout
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2009-08-05. Last updated: 2019-01-08.

if you use [[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak
Keyboard Layout]] with emacs, you may want to change the Ctrl+x key to
something else, such as Ctrl+t where the t is right under your right
hand's middle finger.

2013-09-08 addendum: i recommend not to use any of C-x at all. Define
them as key sequences. See: [[file:emacs_keybinding_redesign_2.html][The
Roadmap to Completely Replace Emacs Key System, Part 2]]. For a packaged
solution, use [[../misc/ergoemacs_vi_mode.html][Xah Fly Keys]].

** Good Solutions
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2009-08-06 Nicolas Goaziou suggested the following. It works well.

#+BEGIN_SRC emacs-lisp
    ;; Swap “C-t” and “C-x”, so it's easier to type on Dvorak layout
    (keyboard-translate ?\C-t ?\C-x)
    (keyboard-translate ?\C-x ?\C-t)
#+END_SRC

Another good solution is to make F6 or ▤Menu key do Ctrl+x.

#+BEGIN_SRC emacs-lisp
    ;; on linux, the syntax for Menu key is <menu>, on Windows its <apps>
    (define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))

    ;; make F6 type Menu key
    (define-key key-translation-map (kbd "<f6>") (kbd "<menu>"))

    ;; set Menu/App key to do emacs's C-h
    (global-set-key (kbd "<menu> h") help-map)

    ;; set Menu/App key to do emacs's C-x
    (global-set-key (kbd "<menu> x") ctl-x-map)

    ;; set 【Menu Enter】 to do emacs's M-x
    (global-set-key (kbd "<menu> <return>") 'execute-extended-command)
#+END_SRC

** Problematic Solutions
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 2 common solutions offered:

#+BEGIN_SRC emacs-lisp
    ;; Make “C-t” act like “C-x”, so it's easier to type on Dvorak layout
    (keyboard-translate ?\C-t ?\C-x)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; Make “C-t” act like “C-x”, so it's easier to type on Dvorak layout
    (global-set-key (kbd "C-t") ctl-x-map)
#+END_SRC

Both solutions are not perfect.

Using =keyboard-translate= means, ALL your Ctrl+t keys becomes Ctrl+x.
This means you lost any keybinding that has a Ctrl+t in it.

For example, in =outline-mode=, Ctrl+c Ctrl+t runs =hide-body=. But now,
when you type that, you get Ctrl+c Ctrl+x instead.

Solution with “ctl-x-map” has its own problems.

I often do Ctrl+x r l (=list-bookmark=) to get my bookmark list. But if
you are in dired, that no longer works. Ctrl+t r invokes
=image-dired-delete-tag=.

Also, with =cua-mode= on, and when you have a text selection, you need
to press Ctrl+x twice quickly to invoke the traditional Ctrl+x role. So,
that means you press Ctrl+t twice quickly.

One example i'll need to do this many times per day is Ctrl+t r t
(=string-rectangle=) and Ctrl+t r k for =kill-rectangle=, where you do
need a selection on first.

But now Ctrl+t Ctrl+t r t no longer works. It invokes =transpose-lines=
before you finish your key sequence.

Between these 2 solution, i'm not sure in practice which is better. I've
been using the =keyboard-translate= for ~4 years, and didn't really
notice any problem. Probably because if there's some binding involving
Ctrl+t in the middle, it's probably a command rarely used.

With the “ctl-x-map” solution, within a day i noticed the problem with
it in dired and calling rectangle commands. So, i presume
=keyboard-translate= is a more practical solution.

With the above info, perhaps a even better solution is just to make some
function key to do Ctrl+x.

So, i'll try

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f8>") ctl-x-map)
#+END_SRC

This solution does not have any of the problems mentioned above, it also
does away the =cua-mode='s problem of needing to type Ctrl+x twice
quickly. It is probably a good thing for reducing too many complex key
presses that starts with Ctrl+x.

PS: All these extra personalized fixes create a lot complications. If
emacs developers made the decision to update emacs UI to a modern one,
with ZXCV keys for undo/cut/copy/paste, then complications like the
above will be much reduced, as compared to individualistic customization
that tried to achieves the same thing. This is because when emacs has
something out of the box, the implementation is more thoroughly examed
at some lower level, i.e. creating much more robustness than individual
hacks. The =cua-mode= itself is a complex hack layed on top of emacs.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_dvorak_C-x.html]]

\\
\\
| [[../index_u34.html#article_23][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u23.html>>

| [[../article_25/index_u49.html][下一项]] |
[[../index_u34.html#article_24][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_23/index_u29.html][上一项]] |

--------------

* Why Emacs Keys are Painful
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2007-07-30. Last updated: 2019-02-22.

This article shows why Emacs's keyboard shortcut set is the worst with
respect to ergonomics.

A important aspect in designing a keyboard shortcut set, for a
application that has intensive, repetitive, prolonged human-machine
interaction (such as coding and text editing), is to consider ergonomic
principles. Specifically: the top most frequently used commands should
have the most easily-to-press keystrokes. For example, they should be on
the home row.

** The Tragedy of Ctrl/Meta Swap
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Emacs's keys are designed with a keyboard that practically has the Ctrl
and Alt key positions swapped.

[[file:feed_0/article_24/images/img1_u9.jpg]]

LMI Lambda keyboard [image source
[[https://deskthority.net/keyboards-f2/cadr-lisp-machine-keyboard-the-space-cadet-keyboard-t19373.html]]
]

[see [[http://xahlee.info/kbd/lisp_keyboards.html][Lisp Machine
Keyboards]]]

The keyboard used by emacs developers at MIT AI Lab in the late 1970s
are those keyboards from Lisp Machines. (GNU Emacs by Richard Stallman,
with builtin language Emacs Lisp, began in 1984.) The keyboard on lisp
machines have the Ctrl key besides the space bar (similar to the
position of Alt keys on PC keyboards), and Meta to the left of Ctrl. So,
the Ctrl key is the primary modifier, and the Meta is secondary to Ctrl.
This is why, the shortcuts for the most used commands in emacs involve
the Ctrl key instead of the Meta key.

Examples:

- The cursor movements: Ctrl+p, Ctrl+n, Ctrl+f, Ctrl+b, Ctrl+a, Ctrl+e
- the cut paste undo {Ctrl+w, Ctrl+y, Ctrl+_}
- =kill-line= 【Ctrl+k】
- =set-mark-command= 【Ctrl+Space】
- =isearch-forward= 【Ctrl+s】

Lisp Machine's keyboards died with Lisp Machines. Since the 1990s, the
[[http://xahlee.info/kbd/ibm_pc_keyboards.html][IBM PC Keyboards]] and
its decedents became the most popular. The PC keyboard does not have
Meta key but have Alt instead. The Alt is placed right beside the space
bar, while Ctrl is placed far to the corner.

Emacs did not change its keybindings to adapt the PC keyboard. Emacs
simply set the Alt to send Meta signal. Here's a excerpt from emacs
manual:

#+BEGIN_QUOTE

  #+BEGIN_HTML
    <p class="calibre13">
  #+END_HTML

  Emacs also recognizes control characters that are entered using
  “modifier keys”. Two commonly-used modifier keys are (which is usually
  labelled as ), and

  #+BEGIN_HTML
    <meta class="calibre42">
  #+END_HTML

  #+BEGIN_HTML
    </meta>
  #+END_HTML

  (which is usually labeled as )(1). For example, `Control-a' is entered
  by holding down the key while pressing `a'; we will refer to this as
  `C-a' for short. Similarly `Meta-a', or `M-a' for short, is entered by
  holding down the key and pressing `a'.

  #+BEGIN_HTML
    </p>
  #+END_HTML

  (1) We refer to <Alt> as <Meta> for historical reasons.

  From official emacs manual for version 23.2.
  [[../emacs_manual/emacs/User-Input.html][(info "(emacs) User Input")]]
#+END_QUOTE

The heavy use of {Ctrl, Alt/Meta} combinations made emacs keyboard
shortcuts painful, and the frequent need to press the far-away Ctrl key
creates the Emacs Pinky syndrome.

Many emacs users have injured their hands with emacs, and emacs's Ctrl
and Meta combinations are the most cited reasons as the major turnoff to
potential users among programers. [see
[[file:emacs_hand_pain_celebrity.html][Famous Programers with Repetitive
Strain Injury]]]

See also:
[[http://xahlee.info/kbd/keyboard_ctrl_vs_capslock_position.html][Control
Key and Capslock Key Positions in Old Keyboards]].

** The Choice of Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

| Keystroke   | Emacs Command Name   | Standard key   |
|-------------+----------------------+----------------|
| Ctrl+p      | =previous-line=      | ↑              |
| Ctrl+n      | =next-line=          | ↓              |
| Ctrl+b      | =backward-char=      | ←              |
| Ctrl+f      | =forward-char=       | →              |
#+CAPTION: Emacs's shortcuts for cursor moving keys

The shortcut's key choices are primarily based on first letter of the
commands, not based on key position and finger strength or ease of
pressing the key. For example, the cursor moving keys are scattered
around the keyboard with positions that are most difficult to press.
(these keys all together accounts for 43% of all commands executed by
key) Of these, the most frequently used is Ctrl+n, which accounts for
20% of all shortcut calls, but is assigned to the letter n, positioned
in the middle of the keyboard, which is one of the most costly key to
press. Similarly, the second most used among these is the Ctrl+p,
accounting for 16% of all shortcut command calls, is located in a
position above the right hand's pinky, also one of the most costly key
to press. [see [[file:command-frequency.html][Emacs Command Frequency]]]

[[file:feed_0/article_24/images/img2_u2.png]]

emacs cursor keys on QWERTY

[[file:feed_0/article_24/images/img3.png]]

emacs cursor keys on Dvorak

The following is a quote from a prominent lisper Daniel Weinreb, who
implement the first emacs in lisp EINE:

#+BEGIN_QUOTE
  That's true. At the time [1976] Guy Steele put together the Emacs
  default key mappings, many people in the target user community (about
  20 people at MIT!) were already using these key bindings. It would
  have been hard to get the new Emacs bindings accepted by the community
  if they differed for such basic commands. As you point out, anyone
  using Emacs can very easily change this based on their own ergonomic
  preferences.

  From [emacs keybinding 2008-06-01 By Daniel Weinreb. At
  [[http://groups.google.com/group/comp.emacs/msg/0342e0bc1aa05c0d]] ,
  accessed on 2012-09-08 ]
#+END_QUOTE

[see [[../misc/Daniel_Weinreb_died.html][Lisp Programer Daniel Weinreb
Died (1959 to 2012)]]]

** Outdated Commands
   :PROPERTIES:
   :CLASS: calibre17
   :END:

A significant portion of emacs's major shortcuts (those withMeta+key or
Ctrl+key) are mapped to commands that are almost never used today. Some
of these occupy the most precious space (For example, home row keys, or
top row keys hit by index finger or middle finger.). Most programer who
have used emacs for years never use these commands.

| Command Name                | Keystroke        |
|-----------------------------+------------------|
| =digit-argument=            | Alt+0 to Alt+9   |
| =negative-argument=         | Alt+-            |
| =move-to-window-line=       | Alt+r            |
| prefix for highlighting     | Alt+s            |
| =tab-to-tab-stop=           | Alt+i            |
| (Prefix)                    | Alt+g            |
| =indent-new-comment-line=   | Alt+j            |
| =tmm-menubar=               | Alt+'            |
| =back-to-indentation=       | Alt+m            |
| =tags-loop-continue=        | Alt+,            |
| =find-tag=                  | Alt+.            |
#+CAPTION: Some Statistically Infrequently Used Commands Occupying Easy
Key Positions

[see [[file:emacs_kb_shortcuts.html][Emacs Key Layout Diagram]]]

** Difficult Keystrokes for Frequently Used Commands
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Some commands that are used by every emacs user many times every hour,
such as {Open, Save, Close}, all require multiple keystrokes with the
difficult Ctrl key.

| Standard Name   | Emacs Command Name   | Keystroke       |
|-----------------+----------------------+-----------------|
| Open            | =find-file=          | Ctrl+x Ctrl+f   |
| Save            | =save-buffer=        | Ctrl+x Ctrl+s   |
| Close           | =kill-buffer=        | Ctrl+x k        |
#+CAPTION: Some Common Operations

** Mode Specific Keys with Difficult Prefix Ctrl+c
   :PROPERTIES:
   :CLASS: calibre17
   :END:

By Emacs key policy, key shortcuts for each language mode's commands all
have this difficult combination: Ctrl+c Ctrl+key. For example, here's
some of the keys for C language mode.

#+BEGIN_SRC emacs-lisp
    C-c C-e         c-macro-expand
    C-c C-a         c-toggle-auto-newline
    C-c C-b         c-submit-bug-report
    C-c C-c         comment-region
    C-c C-d         c-hungry-delete-forward
    C-c C-l         c-toggle-electric-state
    C-c C-n         c-forward-conditional
    C-c C-o         c-set-offset
    C-c C-p         c-backward-conditional
    C-c C-q         c-indent-defun
    C-c C-s         c-show-syntactic-information
    C-c C-u         c-up-conditional
    C-c C-w         subword-mode
    C-c C-\         c-backslash-region
    C-c .           c-set-style
    C-c DEL         c-hungry-delete-backwards
    C-c C-DEL       c-hungry-delete-backwards
    C-c <C-backspace>               c-hungry-delete-backwards
    C-c <C-delete>                  c-hungry-delete-forward
    C-c <C-deletechar>              c-hungry-delete-forward
    C-c <deletechar>                c-hungry-delete-forward
#+END_SRC

** A Flaw in Keybinding Policy
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Any major software, maintains a guide for the developers about the
choices of keyboard shortcuts, so that the shortcuts will be consistent.
Emacs has this in its Emacs Lisp manual: Key-Binding-Conventions
[[../emacs_manual/elisp/Key-Binding-Conventions.html][(info "(elisp) Key
Binding Conventions")]]

This guide, indicates that the only key space reserved for users to
define, are the function keys F5 to F9, and key stroke sequence starting
with Ctrl+c followed by a single letter key.

This is a severe restraint to the utility of customized shortcuts. F5 to
F9 are only 6 keys. The key sequence starting with Ctrl+c followed by a
letter, is multiple keystrokes and rather a painful choice, and there
are only 26 spaces there.

The function keys, F1 to F12, are very good key space for user to define
their own shortcuts. The digit key shortcuts, 0 to 9, are also good user
space. These keys can be used with any combination of Ctrl, Alt, Shift.
For example, a user might define them to insert various templates,
headers/footers, a system of customized HTML/XML tags. Or, she might
assign them to various special emacs modes such as dired, shell, ftp,
email, calendar, calc, *scratch*, make-frame-command (Open a new
window), insert signature.

It seems too drastic a policy, to limit user defined keys to only F5 to
F9, and key sequence of Ctrl+c followed by a single letter key.

** Addendum: Keyboard Shortcut History in Computing Industry
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Today, most commonly used keyboard shortcuts have been somewhat
informally standardized. For example, Z X C V is for Undo Cut Copy
Paste. O is for Open. S is for Save. P is for Print. F is for
Find/Search. These are common conventions today in every application
across Microsoft Windows, Macintosh, and Linux desktops.

These shortcut conventions are primarily brought about by Apple Computer
Inc's Human Interface Guidelines and IBM's Common User Access in the
1990s.

In the early 1990s, DOS era software, each application has its own
scheme of shortcuts. The following is a excerpt from the Wikipedia
article on [[https://en.wikipedia.org/wiki/Common_User_Access][Common
User Access]]:

#+BEGIN_QUOTE
  CUA was a detailed specification and set strict rules about how
  applications should look and function. Its aim was in part to bring
  about harmony between MS-DOS applications, which until then had
  implemented totally different user interfaces.

  Examples:

  - In WordPerfect, the command to open a file was F7, 3.
  - In Lotus 1-2-3, a file was opened with / (to open the menus), W (for
    Workspace), R (for Retrieve).
  - In Microsoft Word, a file was opened with Escape (to open the
    menus), T (for Transfer), L (for Load).
  - In WordStar, it was Ctrl+K+O.
  - In Emacs, a file was opened with Ctrl+x followed by Ctrl+f (for
    find-file).

  Some programs used Escape to cancel an action, some used it to
  complete one; WordPerfect used it to repeat a character. Some programs
  used End to go to the end of a line, some used it to complete filling
  in a form. F1 was often help but in WordPerfect that was F3. Ins
  sometimes toggled between overtype and inserting characters, but some
  programs used it for “paste”.

  Thus, every program had to be learned individually and its complete
  user interface memorized. It was a sign of expertise to have learned
  the UIs of dozens of applications, since a novice user facing a new
  program would find their existing knowledge of a similar application
  absolutely no use whatsoever.
#+END_QUOTE

If we take a survey of the market share of text editors (including IDEs)
among professional programers (as defined by those who make a living by
coding), then, it is my guess, that emacs from mid 1980s to early 1990s,
has more than 50% of market share, but gradually declined. Today,
perhaps less than 1% of professional programers use emacs. I think, part
of the reason being that emacs has not modernized (not in the sense of
being fashionable, but in the sense of keeping with hardware and
software changes in the computing industry). The other major reason, is
because emacs itself is not a IDE in a modern sense, and most programing
development using compiled languages such as Pascal, C, C++,
[[http://xahlee.info/java-a-day/java.html][Java]], C#, have moved on
with IDE platforms integrated with these language's compiler
application.

See also: [[file:modernization.html][Modernization of Emacs]].

2008-07-15 Addendum: Thanks to Rainer Joswig for correction about the
history of the lisp machine's keyboards.
[[http://groups.google.com/group/comp.lang.lisp/msg/3b3dcdc52f507b02]]

**** Emacs Modernization
     :PROPERTIES:
     :CLASS: calibre46
     :END:

- [[file:modernization.html][Simple Changes Emacs Should Adopt]]
- [[http://ergoemacs.org/tmp/calibre_4.99.4_tmp_zkpp5c1d/lq5d8u0u_plumber/feed_0/article_24/emacs_kb_shortcuts_pain.xhtml][Why
  Emacs Keys are Painful]]
- [[file:modernization_scratch_buffer.html][Ban Scratch Buffer]]
- [[file:modernization_meta_key.html][M-x vs Alt+x Notation]]
- [[file:modernization_menu.html][Menu Idiocy]]
- [[file:modernization_mode_line.html][Mode Line Problem]]
- [[file:modernization_cua-mode.html][cua-mode Problem]]
- [[file:modernization_kill-buffer.html][kill-buffer Problem]]
- [[file:modernization_formfeed.html][Form Feed ^L]]
- [[file:modernization_emacs_grep_inconsistency.html][Inconsistency of
  Search]]
- [[file:emacs_grep_problem.html][grep in emacs Pain]]
- [[file:emacs_delete_whole_line.html][Single Key Delete Whole Line]]
- [[file:emacs_html_sucks.html][Emacs HTML Mode Sucks]]
- [[file:modernization_image_support.html][Emacs No View Image on
  Windows]]
- [[file:emacs_spell_checker_problems.html][Emacs Spell Checker Pain]]
- [[file:modernization_html_vs_info.html][HTML should replace Texinfo]]
- [[file:modernization_html_mail.html][Support HTML Mail]]
- [[file:modernization_man_page.html][Problems of “man”]]
- [[file:modernization_elisp_syntax_color.html][Emacs Lisp Mode Syntax
  Coloring Problem]]
- [[file:emacs-ahk_mode_problems.html][Emacs AHK Mode Problems]]
- [[file:emacs_manual_problem.html][Problems of Emacs Manual]]
- [[file:emacs_manual_problem_example.html][Emacs Manual Sucks by
  Examples]]
- [[file:modernization_ban_syntax_table.html][Ban Syntax Table]]
- [[file:modernization_inline_doc.html][Make elisp-index-search use
  Current Symbol]]
- [[file:modernization_mode_doc.html][Problems of describe-mode]]
- [[file:texinfo_problems.html][Texinfo Invalid HTML]]
- [[file:gnu_doc.html][Disappearing FSF URLs, 2006]]
- [[file:emacs_manual_persistent_nodes.html][Emacs Manual Node
  Persistency Issues]]
- [[file:modernization_find_replace_multi.html][Emacs:
  dired-do-query-replace-regex Replace ALL (fixed)]]
- [[file:emacs_supporting_DOS.html][Problems of Emacs Supporting
  Obsolete Systems]]
- [[file:modernization_elisp_copy_dir.html][Elisp: Function to
  Copy/Delete a Dir Recursively (fixed)]]
- [[file:modernization_of_elisp.html][CommonLisp/SchemeLisp Emacs]]
- [[file:text_editor_trends.html][Text Editors Popularity]]
- [[file:text_editor_cursor_behavior.html][Cursor Movement Behavior
  Survey]]
- [[file:modernization_upcase-word.html][Letter-Case Commands Problem]]
- [[file:modernization_mark-word.html][Select Line/Block/Quote, Extend]]
- [[file:modernization_isearch.html][isearch Current Word]]
- [[file:modernization_fill-paragraph.html][Suggestions on Line Wrap
  Commands]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_kb_shortcuts_pain.html]]

\\
\\
| [[../index_u34.html#article_24][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u49.html>>

| [[../article_26/index_u11.html][下一项]] |
[[../index_u34.html#article_25][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_24/index_u23.html][上一项]] |

--------------

* Emacs: Xah Fly Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-09-30. Last updated: 2020-09-19.

*** What's New
    :PROPERTIES:
    :CLASS: calibre14
    :END:

2020-07-12 the old version of xah fly keys before the key engine change
on 2020-04-27 is now at
[[file:i/xah-fly-keys_old_2020-04-18.el][xah-fly-keys_old_2020-04-18.el]]

2020-04-27 Major engine rewrite, by Dan Langlois and Will Dey (wi11dey).
Big thank you. Now, xah fly keys has priority, won't have the very
annoying problem in modes like magit and org. In next few days am going
to update the customization page. Vast majority of code will work as is.
If you have problem, goto xahlee discord, or file a bug report.

2020-04-27 now supports QWERTY Norwegian layout. thanks to dxlr8r.

2019-11-25 now supports norman layout. All the fancy ergo layout is
there now: colemak colemak-mod-dh dvorak programer-dvorak workman
norman. plus international ones: qwerty azerty azerty-be qwerty-abnt
qwertz

2019-10-07 chat about xah-fly-keys on discord
[[https://discord.gg/QYFcqNT][xahlee discord]]

xah-fly-keys is more efficient than vim, or any keybinding set in
history.

=xah-fly-keys.el= is a modal editing mode for emacs, like
[[../emacs/emergency_vi.html][vi]], but the design of key/command choice
is based on command frequency statistics and ease-of-key score. Most
frequently used commands have most easy keys.

If you have hand pain from using emacs, consider using xah-fly-keys.
Never need to press Ctrl+x and never need to press Meta anymore.

[[file:feed_0/article_25/images/img1_u7.jpg]]

Xah Fly Keys and Kinesis keyboard, from a friend

** Video Intro
   :PROPERTIES:
   :CLASS: calibre17
   :END:

If you like to watch a video intro, here it is.

intro to xah fly keys

** Download
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Download at [[https://github.com/xahlee/xah-fly-keys]]

Also on MELPA [[http://melpa.org/#/xah-fly-keys]]

** MELPA Install
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[see [[../emacs/emacs_package_system.html][Emacs: Install Package with
ELPA/MELPA]]]

After you installed from MELPA, put the following in your init:

#+BEGIN_SRC emacs-lisp
    (require 'xah-fly-keys)

    (xah-fly-keys-set-layout "qwerty") ; required
    ;; possible layout values: azerty, azerty-be, colemak, colemak-mod-dh, dvorak, programer-dvorak, qwerty, qwerty-abnt, qwerty-no (qwerty Norwegian), qwertz, workman, norman,

    (xah-fly-keys 1)
#+END_SRC

** Manual Install
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Put the file =xah-fly-keys.el= in =~/.emacs.d/lisp/=

Put the following in your emacs init:

#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/lisp/")

    (require 'xah-fly-keys)

    (xah-fly-keys-set-layout "qwerty") ; required
    ;; possible layout values: azerty, azerty-be, colemak, colemak-mod-dh, dvorak, programer-dvorak, qwerty, qwerty-abnt, qwerty-no (qwerty Norwegian), qwertz, workman, norman,

    (xah-fly-keys 1)
#+END_SRC

** What Does Command Mode Do?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_HTML
  <svg id="xah_fly_keys_8kqx9" viewbox="0 0 901 338" class="calibre3">
#+END_HTML

1 2 3 4 5 6 7 8 9 0 a b c d e f g h i j k l m n o p q r s t u v w x y z
, . ' \ / = - [ ] ; ` Xah Fly Keys command mode layout M-x ↩ isearch ↑ ↓
→ ← ⇤↖ ⇥↘ ⌫ insert undo ←word →word ␣insert ⌦¶ mark ⌦w ⌫w ⌦␣⌫ ⌦ reformat
paste cut copy cmt ←( →) goto() next window split unsplit select ¶
leader key Cmd Mode S Line S word S quote

#+BEGIN_HTML
  </svg>
#+END_HTML

Show

#+BEGIN_HTML
  <button id="button_qwerty" type="button" class="calibre53">
#+END_HTML

QWERTY

#+BEGIN_HTML
  </button>
#+END_HTML

#+BEGIN_HTML
  <button id="button_dvorak" type="button" class="calibre53">
#+END_HTML

Dvorak

#+BEGIN_HTML
  </button>
#+END_HTML

#+BEGIN_HTML
  <button id="button_colemak" type="button" class="calibre53">
#+END_HTML

Colemak

#+BEGIN_HTML
  </button>
#+END_HTML

#+BEGIN_HTML
  <button id="button_colemak_dh" type="button" class="calibre53">
#+END_HTML

Colemak DH

#+BEGIN_HTML
  </button>
#+END_HTML

#+BEGIN_HTML
  <button id="button_workman" type="button" class="calibre53">
#+END_HTML

Workman

#+BEGIN_HTML
  </button>
#+END_HTML

When in command mode:

- Right hand letter keys are moving cursor, in general. For example, i j
  k l , are arrows.
- Left hand letter keys are deleting/modifying text.

** Key to Activate Command Mode
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The command to activate command mode is Alt+x
=xah-fly-command-mode-activate= .

By default, it has the following keys:

Alt+Space or Home or F8 or ▤Menu (the menu key is the key on Microsoft
keyboards, usually besides right Ctrl)

*** Command Mode Visual Indicator
    :PROPERTIES:
    :CLASS: calibre14
    :END:

- When in command mode, the cursor shape is a black rectangle ▮ (won't
  work in some text terminal).
- When in command mode, the first character in emacs status bar (aka
  mode line) displays capital C.

[[file:feed_0/article_25/images/img2_u1.png]]

xah-fly-keys in command mode

** Insert Mode
   :PROPERTIES:
   :CLASS: calibre17
   :END:

When in insert mode, keys insert characters. (or, whatever a letter key
does in the current major mode. For example, in dired, m marks a file.)

** Key to Activate Insert Mode
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The command to activate insert mode is Alt+x
=xah-fly-insert-mode-activate=.

When in command mode, f activates insertion mode.

When in command mode, Space Space also activates insertion mode.

*** Insert Mode Visual Indicator
    :PROPERTIES:
    :CLASS: calibre14
    :END:

- When in insert mode, the cursor shape is a i-beam ⌶. (won't work in
  some text terminal)
- When in insert mode, the first character in emacs status bar (aka mode
  line) displays capital I.

[[file:feed_0/article_25/images/img3_u1.png]]

xah-fly-keys in insert mode

** Leader Key for Commands
   :PROPERTIES:
   :CLASS: calibre17
   :END:

You NEVER need to press Ctrl+x.

For example,

- Ctrl+x b (=switch-to-buffer=) is Space f
- Ctrl+x Ctrl+f (=find-file=) is Space i e
- Ctrl+x 1 (=delete-other-windows=) is 3 while in command mode.

The first key in a key sequence we call it the “*leader key*”. For
example, the Space is the leader key in Space f.

When in command mode, the Space is a leader key.

Globally, the leader key is the F9 key. For example, F9 f is
=switch-to-buffer=. No need to switch to command mode first.

Here's example of frequently used ones.

- Space Space → =xah-fly-insert-mode-activate=
- Space Enter → =execute-extended-command=
- Space f → =switch-to-buffer=
- Space h → =beginning-of-buffer=
- Space n → =end-of-buffer=
- Space r → =query-replace=
- Space k r → =query-replace-regexp=

There are about 200 commands with leader key sequence. Most frequently
used commands have 2 keys Other commands have 3 keys. Some rarely used
have 4.

*** Use Which-Key-mode to Help Learn Leader Sequence
    :PROPERTIES:
    :CLASS: calibre14
    :END:

When learning xah-fly-keys, i recommend using which-key at
[[https://github.com/justbur/emacs-which-key]]

With which-key on, when you press a leader key, subsequent keys and
commands are displayed.

[[file:feed_0/article_25/images/img4.png]]

emacs =which-key-mode=

** Emac's M-x
   :PROPERTIES:
   :CLASS: calibre17
   :END:

When in command mode:

- a → =execute-extended-command=.
- Space Return → =execute-extended-command=.

** NEVER Need to Press Meta
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Any emacs command that has a Meta keybinding also have a keybinding
without Meta in xah-fly-keys.

For example:

- Alt+f (=forward-word=) is o while in command mode.
- Alt+% (=query-replace=) is Space r while in command mode.

To find the key, Alt+x =describe-key=, then press the meta key
combination. Emacs will print all its keybinding.

** Standard Control Key Shortcuts
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The following standard keys are supported by default. (they can be
disabled.)

- Ctrl+Tab → =xah-next-user-buffer=
- Ctrl+Shift+Tab → =xah-previous-user-buffer=
- Ctrl+v → Paste. =yank=
- Ctrl+w → =xah-close-current-buffer=
- Ctrl+z → =undo=
- Ctrl+n → =xah-new-empty-buffer=
- Ctrl+o → open. =find-file=
- Ctrl+s → =save-buffer=
- Ctrl+Shift+s → Save As. =write-file=
- Ctrl+Shift+t → =xah-open-last-closed=
- Ctrl++ → zoom-in. =text-scale-increase=
- Ctrl+- → zoom-out. =text-scale-decrease=

It is not necessary to use these key shortcuts. These commands all have
keys that do not need Ctrl.

The only time you need to press Ctrl key are:

- Ctrl+c for major mode commands.
- Ctrl+g for cancel.
- Ctrl+q for =quoted-insert=.
- Ctrl+h for help.

** isearch
   :PROPERTIES:
   :CLASS: calibre17
   :END:

When in command mode, n starts =isearch-forward=.

When in isearch:

- Ctrl+y to paste.
- left/right arrow keys ← → do search backward/forward.
- up/down arrow keys ↑ ↓ do previous/next search history.
- Return exit isearch and leave cursor at the current location.
- Ctrl+g exit isearch and leave cursor at original location.

** Dired Mode, Org Mode, Single Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

In plain GNU Emacs, in some modes, typing a letter key does not insert
letter, but runs a special command. For example, in
[[../emacs/file_management.html][dired]], m for mark, u for unmark.

With xah-fly-keys, when in insert mode, typing letter key will do
whatever of that mode's commands.

** Xah Fly Keys Tutorial
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[../misc/xah-fly-keys_tutorial.html][Emacs: Xah Fly Keys Tutorial]]

** Customization
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:xah-fly-keys_customization.html][Emacs: Xah Fly Keys
Customization]]

** Batman Keyboards
   :PROPERTIES:
   :CLASS: calibre17
   :END:

xah-fly-keys is designed for any keyboard. I made sure it works well for
• [[http://xahlee.info/kbd/microsoft_keyboards.html][normal PC
keyboards]], • [[http://xahlee.info/kbd/keyboards_Apple.html][Apple
Keyboards ⌨]], • [[http://xahlee.info/kbd/laptop_keyboards.html][Laptop
Keyboards]], and works well in both text terminal or graphical user
interface.

If you have a batman keyboard, much merrier.

Here's suggested optimal configuration.

[[file:xah-fly-keys_kinesis_config.html][[[file:feed_0/article_25/images/img5.svg]]\\
Kinesis/Ergodox layout for xah-fly-keys]]

\\
Gergo Keyboard, xah fly keys layout at
[[http://xahlee.info/kbd/xah_gergo_layout.html][Xah Gergo Layout]]

\\

[[file:xah-fly-keys_uhk.html][[[file:feed_0/article_25/images/img6.png]]\\
xah-fly-keys with Ultimate Hacking Keyboard]]

\\

[[file:xah-fly-keys_truly_ergo_keyboard_config.html][[[file:feed_0/article_25/images/img7.png]]\\
xah-fly-keys with Truly Ergonomic Keyboard]]

** Frequently Asked Questions
   :PROPERTIES:
   :CLASS: calibre17
   :END:

*** How does it compare to ergoemacs-mode?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

ergoemacs-mode remaps the most frequently used emacs commands to use
Alt+key, with key choice based on frequency of command call.

ergoemacs-mode is part of FSF GNU Emacs, in ELPA repository. (but you
should probably download the version from MELPA, because it's usually
more up-to-date.)

If you don't like modal ways, I recommend ergoemacs-mode.

[[https://ergoemacs.github.io/]] (ergoemacs-mode is lead by Matthew
Fidler.)

[[file:feed_0/article_25/images/img8.png]]

ergoemacs mode. Use Alt as the primary key for emacs commands.

*** How does it compare with evil-mode?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

evil-mode lets you use vim keys in emacs. It has large number of users,
and with the advantage that you'll be able to use both emacs and vim.

[[https://github.com/emacs-evil/evil]]

*** How long does it take to learn xah-fly-keys?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

It'll take the same time when learning vi for the first time.

If you practice 2 hours per day, probably about a month to be fluent.

*** Does xah-fly-keys work in terminal?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

YES

** Chat Forum
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- very active: [[https://discord.gg/QYFcqNT][xahlee discord]]
- not very active: [[https://www.reddit.com/r/xahflykeys/]] , created
  the subreddit on 2018-10-07. Post your questions, answers,
  experiences, wishlist, comparisions, criticisms, or your blogs about
  it there.

** History
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:xah-fly-keys_history.html][Emacs: Xah Fly Keys History]]

See also: [[file:on_vi_keybinding.html][on vi Keybinding vs Emacs
Keybinding]]

** Testimonial
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:xah_fly_keys_testimonial.html][Xah Fly Keys Testimonial]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/ergoemacs_vi_mode.html]]

\\
\\
| [[../index_u34.html#article_25][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u11.html>>

| [[../article_27/index_u60.html][下一项]] |
[[../index_u34.html#article_26][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_25/index_u49.html][上一项]] |

--------------

* ErgoEmacs Keybinding: a Ergonomics Based Keyboard Shortcut System
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2007-07-30. Last updated: 2013-05-22.

2013-07-06 ergoemacs-mode's home page is moved to
[[https://ergoemacs.github.io/]], now lead by Matthew L Fidler
[[[https://github.com/mattfidler]] ]. The page you are reading here is
kept for history.

Emacs's default keybindings are very ergonomically painful, for several
reasons. (For detail, see: [[file:emacs_kb_shortcuts_pain.html][Why
Emacs Keys are Painful]].) This page shows a emacs package that makes
your emacs use a new shortcut set. This shortcut set is designed based
on ergonomic principles, based on emacs's
[[file:command-frequency.html][command call statistics]], similar to how
[[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak Layout]] is
designed.

** The Layout
   :PROPERTIES:
   :CLASS: calibre17
   :END:

IMPORTANT: Note: in the dev version, the isearch is moved from Alt+; to
Alt+y. Cancel command is moved from Alt+n to Escape.

[[file:feed_0/article_26/images/img1_u2.png]]

| ←w         | →w         | prev/next word                    |
| ←¶         | →¶         | prev/next paragraph               |
| |←         | →|         | beginning/ending of line          |
| ⌫w         | ⌦w         | delete prev/next word             |
| |⌫         | ⌦|         | delete to beginning/end of line   |
| ▲          | ▼          | page up/down                      |
| |◀         | ▶|         | beginning/end of file             |
| isearch←   | isearch→   | isearch previous/next             |

Layout image with Dvorak key labels:
[[file:ergonomic_emacs_keybinding/ergonomic_emacs_layout_dvorak_5.3.4.png][ErgoEmacs
Keybinding Dvorak]].

** Download
   :PROPERTIES:
   :CLASS: calibre17
   :END:

• Dev version from MELPA, using emacs 24 package system. Just call
=list-packages= to install. [see
[[file:emacs_package_system.html][Emacs: Install Package with
ELPA/MELPA]]]. (Thanks to [[https://github.com/purcell][Steve Purcell]])

*** Older Versions
    :PROPERTIES:
    :CLASS: calibre14
    :END:

- [[file:ergoemacs-keybindings-5.3.9.zip]] (Released on 2011-04-17,
  tested with emacs 23.2.1.)
- [[file:ergoemacs-keybindings-5.3.7.zip]] (Released on 2010-11-15,
  tested with emacs 23.2.1.)

- [[file:ergonomic_keybinding_dvorak_4.3.13.el]]
- [[file:ergonomic_keybinding_qwerty_4.3.13.el]]
- [[file:ergonomic_keybinding_colemak_4.3.6.el]]

These older versions are provided for whatever reasons people might want
them. You shouldn't use it unless you have good reasons.

- The 4.3.x versions are simple settings of global keymap, not a minor
  mode.
- The 5.3.x or later is a minor mode.
- Version since 2013-01-24 has a complete new key engine.

** Documentation
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2013-05-22 for documentation, see [[https://ergoemacs.github.io/]].

** Questions?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

the best place to ask questions is at
[[https://groups.google.com/group/ergoemacs]]

If you sure think there's a bug, report it at
[[https://code.google.com/p/ergoemacs/issues/list]]

** Design Basis
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here's the outline of how this design is arrived.

Statistics of emacs commands are compiled from emacs users, and are
listed by frequency of use. The top about 30 ones, are given a keyboard
shortcut.

To assign the key position, the following rules are used. The rules are
listed roughly in order of priority:

1. Home row keys are the best.
2. 2nd and 3rd fingers (pointing finger and index finger) are better
   than 4th (ring finger) and 5th finger (pinky).
3. The row above home row is considered better than the row below home
   row for 2nd and 3rd fingers. (for 5th finger the row below is
   considered better.)
4. Right hand's keys are considered better than left hand's keys.
   (because most people are right handed)
5. Alt is considered better than Ctrl. (Alt is a natural thumb curl,
   Ctrl is stretched pinky. Thumb is most powerful finger, pinkie the
   weakest)
6. In general, cursor moving commands are placed all for the right hand,
   while text changing commands are all placed for the left hand.
   (grouping advantage)
7. Similar commands should be grouped together to avoid scattering. For
   example, cursor moving by single char is together (I J K L). Undo,
   Cut, Copy, Paste are together (Z X C V). Delete char/word left/right
   are together (E R D F).
8. Commands with logical reversal or extension are done with Shift key,
   after other priorities are considered. Examples: Undo/Redo, move
   cursor to previous/next pane, find replace by string/regex, isearch
   forward/backward, move cursor by beginning/ending of line. Delete
   line to the right/left.

The design is based on finger positions, not on first letter of command
names. The shortcut set is the same for QWERTY and Dvorak. The ease of
remembering what commands are on what keys are based on grouping and
positioning. For example, cursor movings are all right hand, text
changing are all left hand, moving or deleting to the left/right have
keys that are place left and right together, and similar for up/down (by
screen or to beginning/end of file). Undo, Cut, Copy, Paste are the
familiar row Z X C V.

In this design, only the Alt+key space is used. Some Alt+Shift is used
too. Ctrl+key space is not used except 7 standard keybindings (Open,
Close, Save, Save As, Print, Select All). The operation and consistency
of emacs is not affected.

** [[file:ergonomic_emacs_keybinding_features.html][ErgoEmacs Keybinding
Features]]
   :PROPERTIES:
   :CLASS: calibre17
   :END:

** [[file:ergonomic_emacs_keybinding_good.html][Testimonial for
ergoemacs-mode]]
   :PROPERTIES:
   :CLASS: calibre17
   :END:

** [[file:ergonomic_emacs_keybinding_system-wide.html][System-wide
ErgoEmacs Keybinding for Windows, Mac, Bash]]
   :PROPERTIES:
   :CLASS: calibre17
   :END:

** Acknowledgement
   :PROPERTIES:
   :CLASS: calibre17
   :END:

David Capello [[[https://davidcapello.com/]]] rewrote this package into
a full-featured minor-mode starting with version 5.0.0. (2009-09-15).

Matthew L Fidler [[[https://github.com/mattfidler]]] did complete
rewrite of the key engine, starting with version 5.6.1 (2012-11-21).
Huge number of features are added. Matthew is the current maintainer.

Thanks to many people who helped in code snippets or suggestions,
including providing versions for different keyboard layouts (For
example, UK, Italian, Swedish, Danish, etc.). Please see the package's
header for a full list.

** Reference
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- [[file:emacs_kb_shortcuts.html][Emacs's Default Keyboard Shortcut
  Layout]]
- [[file:emacs_kb_shortcuts_pain.html][Why Emacs Keys are Painful]]
- [[file:command-frequency.html][Emacs Commands Frequency]]
- [[file:keyboard_shortcuts.html][Emacs: How to Define Keys]]
- [[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak Keyboard
  Layout]]
- [[https://en.wikipedia.org/wiki/Modifier_key][Modifier key]],
  [[https://en.wikipedia.org/wiki/Table_of_keyboard_shortcuts][Table of
  keyboard shortcuts]]

- [[../emacs_manual/elisp/Keymaps.html][(info "(elisp) Keymaps")]]
- [[../emacs_manual/elisp/Character-Type.html][(info "(elisp) Character
  Type")]]
- [[../emacs_manual/elisp/Keyboard-Events.html][(info "(elisp) Keyboard
  Events")]]
- [[../emacs_manual/elisp/Function-Keys.html][(info "(elisp) Function
  Keys")]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/ergonomic_emacs_keybinding.html]]

\\
\\
| [[../index_u34.html#article_26][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u60.html>>

| [[../article_28/index_u30.html][下一项]] |
[[../index_u34.html#article_27][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_26/index_u11.html][上一项]] |

--------------

* How to Avoid Emacs Pinky
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2006-12-30. Last updated: 2020-09-19.

[[file:feed_0/article_27/images/img1_u4.jpg]]

Palm pressing Control key. [photo by lanyueniao
+http://www.weibo.com/lanyueniao+ ]

Emacs makes frequent use of the Ctrl key. On a conventional keyboard,
the Control Key is at the lower left corner of the keyboard, usually not
very large and is pressed by the pinky finger. For those who use emacs
all day, this will result in Repetitive Strain Injury. [see
[[file:emacs_hand_pain_celebrity.html][Celebrity Programers with RSI]]]
This page lists some tips on avoiding this pinky problem.

I've been using computer since 1991, at least 8 hours a day on average
every singe day. I was a QWERTY touch-typist with 80 wpm and worked as a
secretary for about 2 years, then in ~1994 i switched to
[[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak layout]]. I
started to use emacs everyday since 1998. I am a keyboard and key macro
nerd, and have used tens of keyboard macro or keymap type of utilities
on the Mac, unixes, and Windows, always looking for the most ergonomic
and efficient way to operate the keyboard. [see
[[http://xahlee.info/kbd/keyboarding.html][Keyboards, Layouts, Hotkeys,
Macros, RSI]]] This page summarize my experiences applied to emacs.

The best way to avoid the pinky problem is actually to use a good
keyboard. Let us start with some tips on choosing a good keyboard.

** Tips for Selecting a Computer Keyboard
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- Buy a keyboard such that the Ctrl and Alt keys are large.
- Buy a keyboard where Ctrl and Alt are also available on the right
  side.
- The Ctrl and Alt key's positions on the left and right sides should
  have the same distance to your left and right thumbs (while your hands
  are rested in standard touch-type position). Specifically: the
  distance from the left Alt to the F key should be the same as the
  right Alt to the J key.
- Look at the distance from left Alt and F. They should not be far. This
  lets you easily hit Alt by a thumb curl. Same for Right Alt and J.
- Mechanical keyboard helps. [see
  [[http://xahlee.info/kbd/keyboard_effect_of_mechanical_key_switches.html][Mechanical
  Keyboard and Repetitive Strain Injury]]]

*** GOOD Keyboard
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_27/images/img2_u3.jpg]]

[[http://xahlee.info/kbd/kinesis_gaming_keyboard.html][Kinesis Freestyle
Edge Keyboard]] [[http://www.amazon.com/dp/B07SXX7P6D/?tag=xahh-20][Buy
at amazon]]\\
• split. • mechanical keys. • one of the space bar can be set to Ctrl or
Alt. [image source
https://twitter.com/WillChobra/status/925600073223880710 accessed:
2017-11-12]

[see [[../emacs/emacs_best_keyboard.html][Best Keyboards for Emacs]]]

[[file:feed_0/article_29/images/img1_u6.jpg]]

[[http://xahlee.info/kbd/Microsoft_sculpt_ergonomic_keyboard.html][Microsoft
Sculpt Ergonomic Keyboard]] The keys are split and oriented for each
hand. The Ctrl and Alt are very large and symmetrically positioned with
respect to each hand's thumb. Also, note the distance from F and left
Alt. It's almost vertically adjacent. This means you just curl-in your
thumb to hold Alt.
[[http://www.amazon.com/dp/B00CYX26BC/?tag=xahh-20][Buy at amazon]]

*** BAD Keyboard
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_27/images/img3_u2.jpg]]

The Apple keyboard as of 2006. Note the distance of the right side's
modifier keys. It is not possible, to use the right thumb to press the
⌘command key while the index finger remains on the J.

** Avoid Laptop Keyboards
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:feed_0/article_27/images/img4.jpg]]

Apple iBook G4, year 2003.

[[file:feed_0/article_27/images/img5.jpg]]

Apple iBook G4 Snow, year 2003, with European layout. This laptop
injured my hands, because i was typing on it daily, 6 hours per day, for
2 years.

Laptop computer keyboards are the worst beast. It is the quickest way to
get RSI. The keys are packed into a neat little rectangular space and
flat. Ctrl and Alt become tiny squares, jammed together with Fn. Many
dedicated keys such as Home, PageDown, Arrow keys, are reshaped into
squares to fit into the rectangular array --- losing their distinct
positions that can be easily located by touch. Dedicated keypad for
numbers is gone. Time saving Function keys, great for macros, become a
thin strip and require 2 key presses with a Fn modifier key, also
requires visual-contact to hit correctly.

It is neat, alright, but anything in perfectly geometric shape is a sign
that it is the worst with respect to ergonomics and comfort. In the
environment of nature, which our body evolved to cope with, there's
almost never any straight lines, squares, or perfect circles.

I use a computer for 8 hours a day since 1991. Never had any problems.
But, during 2004 and 2005, for 2 years, i was using a laptop always, i
noticed RSI symptoms. My hand started to feel weird even when not
typing. No pain, but definitely something's not right. (I've already
read extensively about RSI)

So i went and bought a external keyboard, and actually bought a
split-keyset ergonomic keyboard, the
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard.html][Microsoft
Wireless Natural Multimedia keyboard]]. I always hated split keyboards,
in particular because emacs's Ctrl+x on Dvorak is at the B position of
QWERTY, and the B key on split keyboard is on the left side, but i
always used the right hand to do the x and left hand on Ctrl. Also, the
number 6 key is supposed to be pressed by the right hand by traditional
touch typing, but the 6 on the Microsoft keyboard is on the left side.

Despite this initial difficulty, i adopted the split ergonomic keyboard,
even after 15 years of using a traditional PC keyboard. Now, i won't go
back to non-split keyboards. Typing on non-split keyboard feels
discomfort even just for a few minutes.

** How to Press the Control Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

*** Use Your Palm or Semi-Fist
    :PROPERTIES:
    :CLASS: calibre14
    :END:

*Do not use your pinky to press the Control key.*

[[file:feed_0/article_29/images/img3_u1.jpg]]

Palm pressing Control key. (Photo by
[[http://about.me/danielarber][Daniel Arber]]
[[http://superuser.com/questions/317508/how-do-i-hit-the-ctrl-key-without-straining-my-pinky][http://superuser.com/...]])

[[file:feed_0/article_27/images/img6.jpg]]

Pressing control key by pinky knuckle 2015-06-23. Note, i don't
recommend doin this all the time. You'll get a different type of pinky
problem. [image source
[[http://www.reddit.com/r/emacs/comments/38j71d/i_want_to_use_emacs_because_it_appears_to_be_the/]]
]

For some keyboards, it's not easy to use palm. Instead, you can curl in
your fingers into a semi-fist, then sit your fist on the control key, or
knock the key with your pinky's knuckle.

[[file:feed_0/article_27/images/img7.jpg]]

Emacs pinky wedge. Makes it even easier to palm the Control. [image
source
[[https://www.reddit.com/r/emacs/comments/7zvw2b/my_weapon_against_emacs_pinky/][reddit]]]

[[file:feed_0/article_27/images/img8.jpg]]

Corner key, bip keycap. The keyboard is
[[http://xahlee.info/kbd/signum_keyboard.html][Signum keyboard]] [image
source
[[https://www.reddit.com/r/MechanicalKeyboards/comments/a7mpmb/use_sa_corner_keys_on_your_40_they_feel_c_o_m_f_y/][reddit]]]

*** Use Both Hands
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Do not use just one hand to type a Control+key combo.

Use one hand to press Ctrl, use the other hand to press the letter key.
This is the same principle for pressing the Shift key in touch-typing.

When the key you want to press is on the left side of the keyboard, use
the right side of Ctrl. For example, to press Ctrl+a, hold down the
right Ctrl with your right palm edge, and use your left hand to press a.
Make this into a habit. Using a single hand to press Ctrl+key combo
means your hand is shaped into spider legs, thus putting stress on it
when done repeatedly.

This is also why it is important to chose a keyboard with large Ctrl
keys positioned on both sides of the keyboard.

** Software Ways to Avoid the Pinky Problem
   :PROPERTIES:
   :CLASS: calibre17
   :END:

A good keyboard and good typing habit is good. But suppose you are stuck
with a laptop keyboard. Here are some suggestions for this situation.

*** Use a Ergonomic Keyboard Shortcut Layout
    :PROPERTIES:
    :CLASS: calibre14
    :END:

For programers, more than 50% of your typing are actually calling
commands. [see [[file:command-frequency.html][Emacs's Command
Frequency]]] This means, the layout for command keybinding is actually
more important than letter-key layout.

One good solution is to use a ergonomically designed keybinding.

I recommend one of the following:

1. [[../misc/ergoemacs_vi_mode.html][Emacs: Xah Fly Keys]]
2. [[https://github.com/emacs-evil/evil]]
3. [[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keybinding: a
   Ergonomics Based Keyboard Shortcut System]]

The above modes are by far the best solution. I suggest you get used to
one of them.

Following are lesser solutions.

*** Swap Control and Alt
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Try swapping the Ctrl and Alt keys.

[[file:feed_0/article_8/images/img1_u12.jpg]]

Lisp machine keyboard. [see
[[http://xahlee.info/kbd/lisp_keyboards.html][Lisp Machine Keyboards]]]

Emacs's shortcuts are developed for Lisp Machine's keyboards of the
1980s. They have Control key near the space bar, and the Meta key
further away from the space bar. So, Control key is the primary modifier
key. However, today's keyboards have Alt instead of Meta, and the Ctrl
key is placed at the far corner. Emacs did not change its shortcuts. It
simply mapped the Meta to Alt. That is why today, most frequently used
keyboard shortcuts have the more difficult to press Ctrl key instead of
the Alt. For more detail on this and other aspects of emacs's shortcuts.

[see [[file:emacs_kb_shortcuts_pain.html][Why Emacs Keys are Painful]]]

Swapping the Alt and Ctrl key will make Emacs's keyboard shortcuts
easier to use.

The other advantage of swapping Alt and Ctrl, is that on Windows and
Linuxes, most direct shortcuts involve the Ctrl key. By swapping,
shortcuts are made easier too, because now Ctrl is right under your
thumb.

*** On Laptop, Swap CapsLock and Ctrl
    :PROPERTIES:
    :CLASS: calibre14
    :END:

On a Laptop, do Swap CapsLock and Ctrl.

Remap the CapsLock and Ctrl key by swapping them. This is not a optimal
solution, because the Control key is still pressed by the pinky. But on
laptop, this may be better than swapping Alt and Ctrl, because the
CapsLock key is usually much bigger and in a easy open location.

- [[http://xahlee.info/linux/linux_swap_control_and_alt_xmodmap.html][Linux:
  Swap Control Alt Keys]]
- [[http://xahlee.info/mswin/autohotkey_swap_capslock.html][Microsoft
  Windows: Swap Caps Lock, Alt, Control Keys]]
- [[http://xahlee.info/kbd/osx_swapping_modifier_keys.html][Mac OS X:
  How to Swap Control, Caps Lock, Option, Command Keys]]

See also: [[file:swap_CapsLock_Ctrl.html][Emacs: Why You Should Not Swap
CapsLock and Control]]

*** Use Sticky Keys
    :PROPERTIES:
    :CLASS: calibre14
    :END:

On {Windows, Mac, Linux}, you can setup your OS so that Ctrl+key can be
pressed by pressing the Ctrl key then release it, then press the key
key. Recommended.

- On Windows, go to Control Panel, “Ease of Access Center”, then the
  Keyboard section.
- On Mac, go to 〖System Preferences ▸ Universal Access ▸ Keyboard
  tab〗.
- For Linux, it's usually under the system preference settings,
  Accessibility section or Keyboard section.

*** Dvorak Keyboard Layout
    :PROPERTIES:
    :CLASS: calibre14
    :END:

One ergonomic improvement is the Dvorak keyboard layout.

#+BEGIN_HTML
  <svg id="dvorak_layout_WdrPf" viewbox="0 0 901 303" class="calibre3">
#+END_HTML

! @ # $ % ^ & * ( ) 1 2 3 4 5 6 7 8 9 0 a b c d e f g h i j k l m n o p
q r s t u v w x y z , . ' \ | / + = _ - ⌫ { } [ ] ⏎ ⇥ ; ` ~

#+BEGIN_HTML
  </svg>
#+END_HTML

Dvorak layout

You might hear people with concerns about using Dvorak with emacs.
Actually, no problem at all. I never used emacs with QWERTY. I started
using Dvorak in 1994, emacs since 1997.

Dvorak layout does not help with the emacs pinky problem. However, it is
good for typing health in other ways.

In the beginning, from 1998 to 2006, the only key i remapped for using
Dvorak on emacs is to make “C-t” do emacs's “C-x”. [see
[[file:emacs_dvorak_C-x.html][Emacs: Easy Ctrl+x for Dvorak Layout]]]
But now, i recommend not to use “C-x” at all. You should use key
sequences. [see [[file:emacs_keybinding_redesign_2.html][The Roadmap to
Completely Replace Emacs Key System, Part 2]]]

For more info about alternative layout, see:
[[http://xahlee.info/kbd/dvorak_and_all_keyboard_layouts.html][Alternative
Keyboard Layouts]]

** Relax Your Hand When Not Actually Typing
   :PROPERTIES:
   :CLASS: calibre17
   :END:

When in a active coding/writing session, perhaps more than 50% of the
time your hands are actually not typing. You constantly take a pause to
read or think. This pause can be 1 second to 10 seconds or more.
However, for many people, their hands are still tensed up during these
times, ready to type.

It's a good habit to remove your hands from the keyboard or mouse when
you are not pressing keys, even if the duration is just few seconds.

Remind yourself to check your hands when you are not actually in action
of typing or using the mouse. See if your hand is completely relaxed.

** Hand Exercise Toys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here's some fun toys i use that give my hands something to do, to take
them away from the same muscle usage for typing or mousing. When i'm
reading or thinking, it's a habit to pick these toys up and play with it
unconsciously.

*** Hand Exercise Putty
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_27/images/img9.jpg]]

[[https://amzn.to/2ArWaYx][hand putty]]

*** Hand Grip
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_27/images/img10.jpg]]

[[https://amzn.to/2i9dsB2][hand grip]]

*** Rubber Band
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_27/images/img11.jpg]]

[[https://amzn.to/2iCqnj7][hand rubber band]]

Get a rubber band. Wrap them around all 5 fingers, then try to open the
fingers. This is kinda reverse exercise to squeeze balls. With the right
size of rubber band, you can easily expand your fingers once every
second.

*** Juggling ball and Squeeze Ball
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_27/images/img12.jpg]]

juggling balls and squeeze ball
[[file:i/juggling_balls_20200919_g4JCM.jpg][1170×959]]
[[https://amzn.to/2jDYbbM][juggling balls]]
[[https://amzn.to/2iCix9d][hand exercise ball]]

Get a squeeze ball. There are several types of squeeze ball. Some are
spongy and light weight, requires little effort to squeeze, and spring
back into shape immediately. Another type feels like clay; You have to
squeeze hard with the whole hand for it to deform, and they deform
slowly. I like the clay type better.

It is universal advice that you should have AT LEAST 10 minutes of break
every 2 hours. The exact schedule varies. I always take breaks. Some
people use a alarm clock, but i tend to do it spontaneously. Every 2
hours or so, i'd get up and walk for 10 minutes or do some juggling
during break. Been a juggler since age 17. (See many juggling videos at
[[http://xaharts.org/jj/vofli_bolci.html][Juggling and Performance
Arts]].)

*** Chinese Hand-Exercise Iron Ball
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_27/images/img13.jpg]]

Chinese hand exercise balls. [[https://amzn.to/2iBBLvs][Chinese hand
exercise ball]]\\
[[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Advantage 2
keyboard]]

When taking a walk, i usually carry Chinese hand exercise iron balls.
It's relaxing to rotate them. For buying advice, see:
[[http://xaharts.org/arts/chinese_baoding_ball.html][Chinese
hand-exercise iron balls]].

*** Pen Twirling
    :PROPERTIES:
    :CLASS: calibre14
    :END:

2 hands pen spinning\\
Apr 19, 2013\\
Xah Lee\\

You might try to pickup Pen Spinning. [see
[[http://xaharts.org/jj/pen_spinning.html][Pen Spinning video]]] Though,
am not sure this is good for you. Learning the tricks can be addictive,
and the constant pen dropping can be quite annoying to those around you.
(In East Asia, majority of highschool students do some form of pen
twirling. When walking into the class, you hear the sound of pen
droppings all over.) Pen twirling has become a unconscious habit for me
since age 13.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_pinky.html]]

\\
\\
| [[../index_u34.html#article_27][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u30.html>>

| [[../article_29/index_u53.html][下一项]] |
[[../index_u34.html#article_28][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_27/index_u60.html][上一项]] |

--------------

* Emacs Command Frequency Statistics
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2007-08-30. Last updated: 2012-05-18.

This page lists emacs's commands in the order of their frequency of use.

In emacs, each key press invokes a command. For example, pressing a
invokes the command =self-insert-command=. Pressing Ctrl+f invokes the
command =forward-char=. Pressing Alt+x invokes
=execute-extended-command=. Pressing the → invokes =forward-char=.
Scrolling the mouse wheel invokes the command =mwheel-scroll=.

The motivation of this study, is in designing a
[[file:ergonomic_emacs_keybinding.html][Ergonomic Keybinding]]. I need
to know what commands are more frequently used, in order to give it a
easier-to-press key.

** Command Frequency Table
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Total number of command calls: 4661763

Total number of data entry (char insert) command calls: 2234669

Percent of data entry command calls: 48%

| rank   | Command Name                           | Count     | % of Total   | % of None Data Entry   |
|--------+----------------------------------------+-----------+--------------+------------------------|
| 0      | insert char                            | 2182320   | 46.81        | N/A                    |
| 1      | ↓                                      | 415004    | 8.90         | 17.10                  |
| 2      | ↑                                      | 375600    | 8.06         | 15.48                  |
| 3      | →w                                     | 150224    | 3.22         | 6.19                   |
| 4      | →                                      | 125017    | 2.68         | 5.15                   |
| 5      | ←w                                     | 114045    | 2.45         | 4.70                   |
| 6      | ←                                      | 78465     | 1.68         | 3.23                   |
| 7      | ⌫                                      | 75657     | 1.62         | 3.12                   |
| 8      | isearch-→                              | 64477     | 1.38         | 2.66                   |
| 9      | ↵                                      | 52349     | 1.12         | 2.16                   |
| 10     | |←                                     | 43684     | 0.94         | 1.80                   |
| 11     | ⌫w                                     | 40684     | 0.87         | 1.68                   |
| 12     | paste                                  | 32972     | 0.71         | 1.36                   |
| 13     | save-buffer                            | 31310     | 0.67         | 1.29                   |
| 14     | ⌦l                                     | 28569     | 0.61         | 1.18                   |
| 15     | ▼                                      | 26389     | 0.57         | 1.09                   |
| 16     | ⌦                                      | 21173     | 0.45         | 0.87                   |
| 17     | minibuffer-complete                    | 19336     | 0.41         | 0.80                   |
| 18     | other-window                           | 19256     | 0.41         | 0.79                   |
| 19     | →|                                     | 19004     | 0.41         | 0.78                   |
| 20     | find-file                              | 18021     | 0.39         | 0.74                   |
| 21     | scroll-up-1                            | 17528     | 0.38         | 0.72                   |
| 22     | handle-switch-frame                    | 17327     | 0.37         | 0.71                   |
| 23     | isearch-other-meta-char                | 17276     | 0.37         | 0.71                   |
| 24     | comint-send-input                      | 17032     | 0.37         | 0.70                   |
| 25     | forward-sexp                           | 16045     | 0.34         | 0.66                   |
| 26     | execute-extended-command               | 15996     | 0.34         | 0.66                   |
| 27     | close-current-buffer                   | 15788     | 0.34         | 0.65                   |
| 28     | ▲                                      | 15408     | 0.33         | 0.63                   |
| 29     | set mark                               | 15281     | 0.33         | 0.63                   |
| 30     | ⌦w                                     | 15017     | 0.32         | 0.62                   |
| 31     | isearch-←                              | 12717     | 0.27         | 0.52                   |
| 32     | c-forward-subword                      | 12645     | 0.27         | 0.52                   |
| 33     | undo                                   | 12296     | 0.26         | 0.51                   |
| 34     | move-cursor-next-pane                  | 12183     | 0.26         | 0.50                   |
| 35     | copy                                   | 11949     | 0.26         | 0.49                   |
| 36     | switch-to-buffer                       | 11941     | 0.26         | 0.49                   |
| 37     | forward-block                          | 11759     | 0.25         | 0.48                   |
| 38     | shrink-whitespaces                     | 11355     | 0.24         | 0.47                   |
| 39     | ✂                                      | 10680     | 0.23         | 0.44                   |
| 40     | isearch-other-control-char             | 10213     | 0.22         | 0.42                   |
| 41     | comint-previous-input                  | 10058     | 0.22         | 0.41                   |
| 42     | ↓¶                                     | 9669      | 0.21         | 0.40                   |
| 43     | |◀                                     | 8764      | 0.19         | 0.36                   |
| 44     | backward-block                         | 8243      | 0.18         | 0.34                   |
| 45     | ▶|                                     | 8001      | 0.17         | 0.33                   |
| 46     | dired-advertised-find-file             | 7803      | 0.17         | 0.32                   |
| 47     | scroll-down-1                          | 7733      | 0.17         | 0.32                   |
| 48     | backward-sexp                          | 7476      | 0.16         | 0.31                   |
| 49     | delete-other-windows                   | 6968      | 0.15         | 0.29                   |
| 50     | set-mark-command                       | 6406      | 0.14         | 0.26                   |
| 51     | next-error                             | 6235      | 0.13         | 0.26                   |
| 52     | ↑¶                                     | 6110      | 0.13         | 0.25                   |
| 53     | switch-to-next-frame                   | 5513      | 0.12         | 0.23                   |
| 54     | isearch-yank-word-or-char              | 5508      | 0.12         | 0.23                   |
| 55     | yas/expand                             | 4921      | 0.11         | 0.20                   |
| 56     | mark-sexp                              | 4806      | 0.10         | 0.20                   |
| 57     | tj-newline-and-indent-command          | 4695      | 0.10         | 0.19                   |
| 58     | iswitchb-buffer                        | 4658      | 0.10         | 0.19                   |
| 59     | nonincremental-repeat-search-forward   | 4474      | 0.10         | 0.18                   |
| 60     | extend-selection                       | 4424      | 0.09         | 0.18                   |
| 61     | c-backward-subword                     | 4420      | 0.09         | 0.18                   |
| 62     | minibuffer-keyboard-quit               | 4355      | 0.09         | 0.18                   |
| 63     | exit-minibuffer                        | 4295      | 0.09         | 0.18                   |
| 64     | revert-buffer                          | 4205      | 0.09         | 0.17                   |
| 65     | tcl-electric-char                      | 4162      | 0.09         | 0.17                   |
| 66     | iswitchb-exit-minibuffer               | 4102      | 0.09         | 0.17                   |
| 67     | split-window-vertically                | 4035      | 0.09         | 0.17                   |
| 68     | search-forward-regexp                  | 4021      | 0.09         | 0.17                   |
| 69     | jabber-chat-buffer-send                | 3833      | 0.08         | 0.16                   |
| 70     | kill-buffer                            | 3731      | 0.08         | 0.15                   |
| 71     | rgb-doublespace-maybe                  | 3691      | 0.08         | 0.15                   |
| 72     | scroll-down-2                          | 3448      | 0.07         | 0.14                   |
| 73     | comint-beginning-of-line               | 3365      | 0.07         | 0.14                   |
| 74     | back-to-indentation-or-beginning       | 3273      | 0.07         | 0.13                   |
| 75     | select-text-in-quote                   | 3250      | 0.07         | 0.13                   |
| 76     | toggle-letter-case                     | 3235      | 0.07         | 0.13                   |
| 77     | c-electric-star                        | 3226      | 0.07         | 0.13                   |
| 78     | c-electric-backspace                   | 3196      | 0.07         | 0.13                   |
| 79     | scroll-bar-toolkit-scroll              | 2941      | 0.06         | 0.12                   |
| 80     | scroll-up-2                            | 2923      | 0.06         | 0.12                   |
| 81     | c-indent-line-or-region                | 2886      | 0.06         | 0.12                   |
| 82     | c-backward-kill-subword                | 2846      | 0.06         | 0.12                   |
| 83     | abort-recursive-edit                   | 2832      | 0.06         | 0.12                   |
| 84     | beginning-of-visual-line               | 2828      | 0.06         | 0.12                   |
| 85     | recenter                               | 2779      | 0.06         | 0.11                   |
| 86     | gnus-summary-next-unread-article       | 2772      | 0.06         | 0.11                   |
| 87     | isearch-exit                           | 2730      | 0.06         | 0.11                   |
| 88     | gnus-topic-read-group                  | 2718      | 0.06         | 0.11                   |
| 89     | exchange-point-and-mark                | 2690      | 0.06         | 0.11                   |
| 90     | ignore                                 | 2627      | 0.06         | 0.11                   |
| 91     | gnus-group-get-new-news                | 2519      | 0.05         | 0.10                   |
| 92     | insert-tag                             | 2486      | 0.05         | 0.10                   |
| 93     | cua-cancel                             | 2480      | 0.05         | 0.10                   |
| 94     | end-of-code-or-line                    | 2479      | 0.05         | 0.10                   |
| 95     | c-electric-slash                       | 2440      | 0.05         | 0.10                   |
#+CAPTION: Emacs Command List by Frequency of Use

*** Interesting Highlights
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Some interesting highlights from the stat, organized by common editing
operations.

| pictograph       | Command Name                            | %               |
|------------------+-----------------------------------------+-----------------|
| ↑                | previous-line                           | 15.48           |
| ↓                | next-line                               | 17.10           |
| ←                | backward-char                           | 3.23            |
| ←w               | backward-word                           | 4.70            |
| ←¶               | backward-paragraph                      | 0.25            |
| |←               | move-beginning-of-line                  | 1.80            |
| →                | forward-char                            | 5.51            |
| →w               | forward-word                            | 6.19            |
| →¶               | forward-paragraph                       | 0.40            |
| →|               | move-end-of-line                        | 0.78            |
| ▲                | scroll-down (page up)                   | 0.63            |
| ▼                | scroll-up (page down)                   | 1.09            |
| |◀               | beginning-of-buffer                     | 0.36            |
| ▶|               | end-of-buffer                           | 0.33            |
| ⌫                | delete-backward-char                    | 3.12            |
| ⌫w               | backward-kill-word                      | 1.68            |
| |⌫               | kill-line-backward                      | 0.00            |
| ⌦                | delete-char                             | 0.87            |
| ⌦w               | kill-word                               | 0.62            |
| ⌦|               | kill-line                               | 1.18            |
| copy             | kill-ring-save                          | 0.49            |
| cut              | kill-region                             | 0.44            |
| paste            | yank                                    | 1.36            |
| paste previous   | yank-pop                                | 0.00            |
| set-mark         | set-mark                                | 0.63            |
| undo             | undo                                    | 0.51            |
| M-x              | execute-extended-command                | 0.66            |
| Open             | find-file, dired-advertised-find-file   | (0.74+0.32)/2   |
| Close            | kill-buffer, close-current-buffer       | (0.15+0.65)/2   |
| Save             | save-buffer                             | 1.29            |
| Save As          | write-file                              | 0.00            |

† Percentage with Respect to Non Data Entry Commands Count

** Explanations
   :PROPERTIES:
   :CLASS: calibre17
   :END:

This report's data are from the following people:

| Name                                                                | Percentage   | Number of Command Call   |
|---------------------------------------------------------------------+--------------+--------------------------|
| [[http://www.emacswiki.org/emacs/AlanMackenzie][Alan Mackenzie]]    | 0            | 3170                     |
| Marc Shapiro                                                        | 1            | 27259                    |
| [[http://www.emacswiki.org/emacs/Rick_Bielawski][Rick Bielawski]]   | 4            | 166178                   |
| [[http://dacap.com.ar/][David Capello]]                             | 18           | 817127                   |
| [[http://www.emacswiki.org/emacs/TreyJackson][Trey Jackson]]        | 37           | 1736697                  |
| Xah Lee                                                             | 41           | 1911332                  |
#+CAPTION: Percentage of Each Person's Data Contribution

Total number of command calls: 4661763.

*** Data Entry Commands vs Non Data Entry Commands
    :PROPERTIES:
    :CLASS: calibre14
    :END:

For this report, emacs commands are divided into one of 2 categories:

- data entry
- none data entry

“data entry” commands are commands that are typing, such as pressing any
of letter keys, number keys, or Enter key. Emacs command name for these
are: {=self-insert-command=, =newline=, =org-self-insert-command=,
=isearch-printing-char=, =org-return=, ...}.

All other commands are considered “none data entry”.

This division is important for our study because commands that insert
characters do not need a keyboard shortcut, they already correspond to
each key on the keyboard. But also, we can tell what percentage
keystroke in emacs is spend on typing.

| Name             | Percentage of Data Entry Commands   |
|------------------+-------------------------------------|
| Rick Bielawski   | 19                                  |
| David Capello    | 35                                  |
| Xah Lee          | 50                                  |
| Alan Mackenzie   | 54                                  |
| Trey Jackson     | 54                                  |
| Marc Shapiro     | 75                                  |
#+CAPTION: Percentage of Data Entry for Each Contributor

Average: 48%

A higher percentage of data entry probably indicates that the person is
doing a lot tasks that are mostly continuous fast typing, such as
writing email, study notes, diary, irc chat.

*** Command Groups
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Commands that are executed by the same shortcut key are grouped
together. For example, the commands {=delete-backward-char=,
=backward-delete-char-untabify=, =python-backspace=,
=cperl-electric-backspace=} are all just the Backspace key.

The following is the complete list of commands that are merged, and or
represented by a glyph for clarity of reading.

| Emacs Command Name              | Merged Name or Glyph   |
|---------------------------------+------------------------|
| self-insert-command             | insert char            |
| org-self-insert-command         | insert char            |
| isearch-printing-char           | insert char            |
| newline                         | ↵                      |
| org-return                      | ↵                      |
| org-return-indent               | ↵                      |
| next-line                       | ↓                      |
| dired-next-line                 | ↓                      |
| next-history-element            | ↓                      |
| previous-line                   | ↑                      |
| dired-previous-line             | ↑                      |
| previous-history-element        | ↑                      |
| delete-backward-char            | ⌫                      |
| backward-delete-char-untabify   | ⌫                      |
| python-backspace                | ⌫                      |
| cperl-electric-backspace        | ⌫                      |
| org-delete-backward-char        | ⌫                      |
| cua-scroll-up                   | ▼                      |
| scroll-up                       | ▼                      |
| scroll-down                     | ▲                      |
| cua-scroll-down                 | ▲                      |
| isearch-forward                 | isearch-→              |
| isearch-repeat-forward          | isearch-→              |
| isearch-backward                | isearch-←              |
| isearch-repeat-backward         | isearch-←              |
| backward-char                   | ←                      |
| forward-char                    | →                      |
| backward-word                   | ←w                     |
| forward-word                    | →w                     |
| backward-sentence               | ←s                     |
| forward-sentence                | →s                     |
| backward-paragraph              | ↑¶                     |
| forward-paragraph               | ↓¶                     |
| org-beginning-of-line           | |←                     |
| move-beginning-of-line          | |←                     |
| move-end-of-line                | →|                     |
| org-end-of-line                 | →|                     |
| beginning-of-buffer             | |◀                     |
| end-of-buffer                   | ▶|                     |
| delete-char                     | ⌦                      |
| org-delete-char                 | ⌦                      |
| cua-delete-region               | ⌦                      |
| kill-word                       | ⌦w                     |
| backward-kill-word              | ⌫w                     |
| kill-line                       | ⌦l                     |
| org-kill-line                   | ⌦l                     |
| kill-sentence                   | ⌦s                     |
| kill-ring-save                  | copy                   |
| cua-copy-region                 | copy                   |
| yank                            | paste                  |
| cua-paste                       | paste                  |
| kill-region                     | ✂                      |
| cua-cut-region                  | ✂                      |
| set-mark                        | set mark               |
| cua-set-mark                    | set mark               |
#+CAPTION: Merged Commands

** How the Report is Compiled
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here we describe how the report is generated. Each person, installs this
emacs package: [[file:command-frequency.el]]. (A new version, by
[[http://www.davidcapello.com.ar/][David Capello]], renamed as
=keyfreq.el=, is available at [[https://github.com/dacap/keyfreq]]. You
should use this new version. )

The package will accumulate a key/value list of all commands the user
calls in emacs. The key is command name and the value is the number of
times that command has been called. After some time, the user calls
“command-frequency-display”. This will write the stat into a buffer,
then the user save it to file.

The raw data files used in this report are here:
[[file:command-frequency_data_files.tgz]]

A Python program [[file:command-frequency.py]], is used to parse these
raw data files. The program aggregate all user's raw data, discard some
commands such as =mwheel-scroll=, “nil”, keyboard macros, etc, then
groups some commands together as described in this report, and replace
some command names by a corresponding glyph, then computes the various
statistics used for this report, and print them in HTML. Commands used
less than 0.1% of total none data entry commands are not reported

Currently, this report is not normalized. For example Xah Lee (me)'s
data is 41% of the whole. So, that means my usage pattern has major
influence. You can use the Python program to select which file or group
of files to use for generating the stat. The overall pattern does not
change much. For comparison, see this version of report without Xah Lee
(me)'s data, see: [[file:command-frequency_sans_xl.html][Emacs's Command
Frequency Sans XL]]. For the previous version of this report, made in
2007 with much less data, see:
[[file:command-frequency_old.html][Emacs's Command Frequency (Old)]].

If you like to participate in this research, please download
[[file:command-frequency.el]] and send me the output. I will incorporate
your data into the next report update. Thank you.

Files people have sent to me for report but i haven't had time to
process:

- [[file:command-frequency/.emacs.keyfreq.Daniel_Hackney_2012-05-18.el][.emacs.keyfreq.Daniel_Hackney_2012-05-18.el]]
- [[file:command-frequency/Fabrice_Niessen2%2c%2c2010-05-04.el][Fabrice_Niessen2,,2010-05-04.el]]
- [[file:command-frequency/erik_winkels_2010-06-21.txt][erik_winkels_2010-06-21.txt]]
- [[file:command-frequency/Xue_Fuqiao_2013-05-01.txt][Xue_Fuqiao_2013-05-01.txt]]
- [[file:command-frequency/Xah_Lee_2013-09-04.txt][Xah_Lee_2013-09-04.txt]]

2013-06-06, 2013-08-06 addendum: i didn't have time to work on this.
This project needs to be automated. The keyfreq.el package should
automatically send user's results to a server (such as github, and with
user's consent in a preference), and automatically generate statistics.
If you are interested, get in contact with David Capello, the author of
keyfreq.el, or, you can join the ergoemacs-mode developement at
[[https://ergoemacs.github.io/]], led by Matthew Fidler.

*** Acknowledgment
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Ryan Yeske hacked up a quick elisp code that count commands for the
current session. Michal Nazarewicz made it into a full featured minor
mode, with the ability to read and write to a file to accumulate log
across sessions, and print percentages in report. David Capello added a
feature to also log the mode the command is from.

Thanks to Katsumi Yamaoka for pointing out the problem of
“this-command”. Thanks to Stefan Guath for pointing out
“real-last-command”. Thanks to all the people who provided me their
data.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/command-frequency.html]]

\\
\\
| [[../index_u34.html#article_28][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u53.html>>

| [[../article_30/index_u61.html][下一项]] |
[[../index_u34.html#article_29][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_28/index_u30.html][上一项]] |

--------------

* Emacs: Why You Should Not Swap CapsLock and Control
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2008-07-10. Last updated: 2016-10-13.

[[file:feed_0/article_27/images/img1_u4.jpg]]

Palm pressing Control key. (photo by
[[http://www.weibo.com/lanyueniao][lanyueniao]])

Swapping the CapsLock key with the Ctrl key is a good workaround for a
laptop keyboard, but on a full keyboard, there are many alternatives
that are better.

Here's why CapsLock as Ctrl is not optimal solution:

- On a typical PC keyboard of today, the CapsLock is pressed by the
  weakest finger pinky. The Ctrl key can be easily pressed with palm.
- CapsLock as Ctrl makes the left pinky do 2 pinky's work. (try to pick
  out your right Shift key and type for a week and see how you feel)
- It forces the left hand to strain into spider legs. Or, it forces your
  right hand to fly about wildly if the letter key is near the middle of
  the keyboard (example: CapsLock+t, CapsLock+g, CapsLock+b).
- It renders many Ctrl+key spots not usable, because now with only one
  pinky many otherwise good Ctrl+key spots are hard to use.
- The left hand now constantly shift from home position.

*** Do You Touch-Type?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

The above assumes that you do TOUCH TYPE.

If you do not touch type, then Ctrl at CapsLock position isn't too bad.

Though, you really should learn touch typing.

- [Programming's Dirtiest Little Secret 2008-09-10 By Steve Yegge. At
  [[http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html]]
  , accessed on 2011-11-19 ]
- [We Are Typists First, Programmers Second 2008-11-17 By Jeff Atwood.
  At
  [[http://www.codinghorror.com/blog/2008/11/we-are-typists-first-programmers-second.html]]
  , accessed on 2013-06-03 ]

*** I do touch-type, just not the standard way taught in school.
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Try this. Put a bath towel on top of your hand over keyboard. Now, go
thru your day coding. If you can work like that for 30 minutes, then,
you do touch type.

** Why You Should Not Swap {Caps Lock, Control}
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Among [[http://xahlee.info/UnixResource_dir/writ/tech_geeker.html][tech
geekers]], it's widely recommended like a dogma, to swap CapsLock and
Ctrl keys. However, remapping Ctrl to CapsLock violates some basic
ergonomic principles.

In touch typing, modifiers comes in pairs, such as Shift key. The
accepted ergonomic way to press modifier combinations is using one hand
to press the modifier key and the other to press the letter key. Using 2
hands avoids single-hand straining its muscle.

You can see how it is otherwise by disabling one of the Shift key. With
just one modifier, you are heavily handicapped. As a example, try this
exercise:

TYPE THIS SENTENCE WITH ONLY THE LEFT SHIFT KEY AND WITHOUT USING CAPS
LOCK.

** How to Swap Caps Lock, Control, Alt
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- [[http://xahlee.info/linux/linux_swap_control_and_alt_xmodmap.html][Linux:
  Swap Control Alt Keys, xmodmap]]
- [[http://xahlee.info/mswin/autohotkey_swap_capslock.html][Microsoft
  Windows: Swap Caps Lock, Alt, Control Keys]]
- [[http://xahlee.info/kbd/osx_swapping_modifier_keys.html][Mac OS X:
  How to Swap Control, Caps Lock, Option, Command Keys]]

** Good Tips
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- Swap {Ctrl, Alt}. The Alt is more easy to press, with the thumb.
- Buy a keyboard with Ctrl on both sides of keyboard.
- Buy a keyboard such that the distance from left Ctrl to F is the same
  as the distance from right Ctrl to J.
- Press modifier keys using both hands, in the same way of using Shift
  key in touch typing. If the letter is on the left side, use the Ctrl
  key on the right side, and vice versa.
- On most full sized PC keyboard, it's very easy to use palm or
  semi-fist to press Ctrl key.

*** Get Keyboard with Symmetrically Positioned Modifier Keys
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[file:feed_0/article_29/images/img1_u6.jpg]]

Microsoft Sculpt Ergonomic Keyboard.

[[http://xahlee.info/kbd/Microsoft_sculpt_ergonomic_keyboard.html][Microsoft
Sculpt Ergonomic Keyboard review]]

Buy a good keyboard that has big Alt and Ctrl keys, and on both sides of
the keyboard, and symmetrically placed with respect to your thumbs when
hands in home position.

[[file:feed_0/article_29/images/img2_u1.jpg]]

Chromebook have large Ctrl and Alt keys.

See also: [[file:emacs_best_keyboard.html][Best Keyboards for Emacs]].

*** Use Palm or semi-Fist to Press Control Key
    :PROPERTIES:
    :CLASS: calibre14
    :END:

You can use your palm to press the Control key, instead of poking it
with your pinky. This can be comfortably done on most PC keyboards.

[[file:feed_0/article_29/images/img3_u1.jpg]]

Palm pressing Control key. (Photo by
[[http://about.me/danielarber][Daniel Arber]], from
[[http://superuser.com/questions/317508/how-do-i-hit-the-ctrl-key-without-straining-my-pinky][http://superuser.com/...]])

pressing Control key by palm. (start at 1:02)

Another way is to curl in your fingers into a semi-fist, then sit your
palm or pinky knuckle on the Ctrl key.

** When Should You Swap {Caps Lock, Ctrl}?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- On a laptop keyboard.
- You do not touch type.

On a laptop, usually the Ctrl and Alt are both tiny squares. It's
impossible to use palm to press the Ctrl, and it's also not necessarily
easy to use thumb to press the Alt. And often, there's only one set of
these keys on the left side. The CapsLock is the only big key and better
alternative.

If you do not touch type, your hands do not fall into standard positions
and are freely moving. The big CapsLock key is a very easy and
convenient target. Even if you do touch type, the key at the CapsLock
position is still best choice than the positions for Ctrl or Alt on a
laptop keyboard.

** A Simple Test on Efficiency
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here are 3 methods of typing Ctrl:

1. Pressing it using palm at the 2 Ctrl key positions.
2. Pressing it at the position of CapsLock key with the left pinky.
   (Swapping CapsLock with Ctrl)
3. Pressing it at the positions of 2 Alt keys with thumbs. (Swapping
   Ctrl with Alt)

Here's a very simple test anyone can do to see which method to type Ctrl
is more efficient and less tiring.

Type the following. Whenever there's a Capital letter, hold down
CapsLock key as if it is Shift.

#+BEGIN_SRC emacs-lisp
    YoU caN cAp The letTER tHAt yOu neEd to pReSs thE ModiFier liKE In thIs senTenCe.
#+END_SRC

Repeat this 3 times.

Now, take a break. When you are ready, do it again, but for each cap
letter, press the Ctrl key at the opposite corner of your keyboard, and
using palm or semi-fist.

Again, take a break. Now, for each cap letter, press the Alt key
instead.

Repeat this test daily until you are very familiar and comfortable with
all 3 methods . After a week, you should have a feel on which way is
faster and or less tiring.

** I Swap But Never Had a Problem?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_QUOTE
  A [Ctrl] to the left of [A] is natural and what I've been using since
  the mid-1960s with absolutely NO problems or RSI whatsoever beginning
  with a TTY ASR33 and continuing with a Datapoint 3300, DEC VT100,
  Datamedia DT80 and others along the way to today.
#+END_QUOTE

Because you don't actually type that much. See:
[[http://xahlee.info/kbd/how_many_keystrokes_programers_type_a_day.html][How
Many Keystrokes Programers Type a Day?]].

#+BEGIN_QUOTE
  Mapping and using the [Caps Lock] as a [Ctrl] to the immediate left of
  [A] is no different than the ["] to the immediate right of [;] re:
  pinkies.
#+END_QUOTE

True, but most keyboards do not have Ctrl key at the Enter position.
Even if you have control on both sides of pinky, the Alt keys for thumbs
is still better, because:

- ① thumb is stronger than pinky.
- ② When the other keys are on different sides of the keyboard (such as
  Ctrl+d Ctrl+k), it's difficult to press because you have to change
  hand to press control. With Alt for thumb, you can hold it with one
  thumb and press d k.

A lot people have developed Repetitive Strain Injury from emacs. They
are frequently posted to online forums. I regularly got email of scary
stories of people who got RSI. Avoid it now before you got it.

See also:
[[http://xahlee.info/kbd/programer_keyboarding_advice.html][Bad Advice
on Typing and Keyboard from Programers]]

** Is it True that Old Computer Keyboard Have Control Next to A?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

See:
[[http://xahlee.info/kbd/keyboard_ctrl_vs_capslock_position.html][Keyboard:
Control vs Capslock Position]].

2011-03-01

Here's other view.

- [How do I hit the CTRL key without straining my pinky? 2011-08-01 At
  [[http://superuser.com/questions/317508/how-do-i-hit-the-ctrl-key-without-straining-my-pinky]]
  , accessed on 2011-12-16 ]
- [Emacs newbies - don't swap Control and Caps Lock 2007-07-22 By
  splittist. At [[http://splittist.livejournal.com/3114.html]] ,
  accessed on 2011-03-01 ]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/swap_CapsLock_Ctrl.html]]

\\
\\
| [[../index_u34.html#article_29][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u61.html>>

| [[../article_31/index_u57.html][下一项]] |
[[../index_u34.html#article_30][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_29/index_u53.html][上一项]] |

--------------

* Famous Programers with Repetitive Strain Injury
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2010-06-28. Last updated: 2016-07-05.

Read the story of Richard Stallman (GNU), John Ousterhout (Tcl), Jamie W
Zawinski (Netscape, XEmacs), who injured their hands seriously because
of typing on keyboard. (Repetitive Strain Injury), in particular, due to
use of emacs.

** Richard Stallman, Free Software Foundation Founder
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[https://en.wikipedia.org/wiki/Richard_Stallman][Richard Stallman]]'s
RSI is well known during the 1990s. I remember reading about it
somewhere on his website in the 1990s, perhaps on gnu.org, but i
couldn't find it now. At one point, i remember that he is trying to
switch to a voice system.

#+BEGIN_QUOTE
  Fast forward twenty years and I was working 12-16 hours a day hacking
  on the GNU C++ compiler with more than 100,000 lines of code to my
  name, and loving every minute of it. One weekend I visited Richard
  Stallman at MIT and I was shocked to learn that he could no longer
  type. He was given strict instructions by his doctor to not touch a
  computer keyboard for 6-12 months, and that if he did, he may lose
  forever his ability to type. He was a programming pioneer, and at the
  time, his symptoms were not well known or understood. We all came to
  understand that it was RSI---repetitive stress injury, exacerbated by
  the very keystroke combinations that made the Emacs editor such a
  powerful programming environment. But the root cause was not
  Emacs---it was the punative design of the QWERTY keyboard, a legacy of
  the industrial era when complex keyboard mechanisms were not able to
  keep up with the speed of human fingers. ...

  [Which Keyboard? 2007-06-21 By Michael Tiemann. At
  [[http://news.cnet.com/8301-13507_3-9732586-18.html][cnet.com]] ,
  accessed on 2010-06-28 ]
#+END_QUOTE

Note: [[https://en.wikipedia.org/wiki/Michael_Tiemann][Michael Tiemann]]
was a founder of Cygnus (Cygwin), then later was CEO of Redhat when
Redhat bought it.

Michael Tiemann blamed QWERTY, but actually, more than 50% of typing by
programers is not letters but keyboard shortcuts.

See:

- [[file:command-frequency.html][Emacs Command Frequency Statistics]]
- [[http://xahlee.info/kbd/programer_keyboarding_advice.html][Bad Advice
  on Typing and Keyboard from Programers]]
- [[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak Keyboard
  Layout, My Experience]]

** Jamie W Zawinski
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[https://en.wikipedia.org/wiki/Jamie_Zawinski][Jamie Zawinski]] is the
main developer of XEmacs, when it was called Lucid Emacs around 1992.

Richard Stallman blames Jamie for the emacs/xemacs schisim. Jamie is
also well known for being the main developer of Netscape browser when
the web started in 1990s.

Jamie keeps a diary on computer, before there's a word “blog”, and in
his writings scattered around his diaries he has talked about his hand
injury situation, in his dot com work-to-death years.

Here are quotes from his writings online:

#+BEGIN_QUOTE
  For several years I had pretty severe wrist pain, and it terrified me.
  I had these visions of me with withered stumps at the ends of my arms,
  trying to limp along using speech-recognition software, and my career
  being over.

  [my wrists and welcome to them 1999 By Jamie Zawinski. At
  [[http://www.jwz.org/gruntle/wrists.html]] , accessed on 2011-12-31 ]
#+END_QUOTE

#+BEGIN_QUOTE
  My hands have been really been hurting lately; I hope all this typing
  hasn't finally blown out my wrists. If I can't type, my life is over.
  My right hand especially is flaking out --- the last knuckle of the
  middle two fingers ache, as if they're badly bruised. I guess it's
  time to figure out how to use our medical program. As if a doctor is
  going to tell me something other than “stop typing so much.” Ha ha ha,
  that's a good one.

  [the netscape dorm 1994 By Jamie Zawinski. At
  [[http://www.jwz.org/gruntle/nscpdorm.html]] , accessed on 2010-06-28
  ]
#+END_QUOTE

Besides visiting doctors and following other ergonomic practices such as
taking breaks, Jamie now uses a 2-piece split keyboard the Kinesis
Evolution. (the Evolution is discontinued. Now you just have Kinesis
Freestyle.). It's like a keyboard cut into 2 pieces, connected only by
wire. One on each side of chair's arm.

[[file:feed_0/article_30/images/img1.jpg]]

Jamie Zawinski's setup as of 2005.
[[[http://www.jwz.org/blog/2005/06/new-ergo-toys/]] ]

[see [[http://xahlee.info/kbd/kinesis_freestyle_keyboard.html][Kinesis
Freestyle Keyboard]]]

[see [[http://xahlee.info/kbd/ergonomic_mouse.html][Ergonomic / Vertical
Mouse]]]

Before that, he likes and endorses
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard.html][Microsoft's
Ergonomic Keyboards]], but did not like
[[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Contoured
Keyboard]].

as of 2016-09-01, he's using
[[http://xahlee.info/kbd/matias_ergo_pro_keyboard.html][Matias Ergo Pro
Keyboard]]. 〔See
[[https://www.jwz.org/blog/2015/11/keyboard-lossage-mouse-lossage-everything-is-terrible/]]
〕

** Ben Wing, XEmacs Main Developer
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Ben Wing, is the main developer of XEmacs in the 1990s, after Jamie W
Zawinski.

Following is a quote from XEmacs Home Page for Ben Wing At
[[http://xemacs.org/People/ben.wing/]].

#+BEGIN_QUOTE
  Since September 1992, I've worked on XEmacs as a contractor for
  various companies and more recently as an unpaid volunteer.

  Alas, life has not been good to me recently. This former San Francisco
  “Mission Critter” developed insidious hand and neck problems after a
  brief stint working on a Java-based VRML toolkit for the now defunct
  Dimension X, and I was forced to quit working. I was exiled first to
  “Stroller Valley” and later all the way to Tucson, Arizona, and for
  two years was almost completely disabled due to pain. More recently I
  have fought my way back with loads and loads of narcotic painkillers,
  and after a stint as an art student at the University of Arizona I'm
  currently a Ph.D. student in linguistics at the University of Texas,
  Austin.
#+END_QUOTE

as of 2013-03-13, Ben Wing has a linkedin profile at
[[http://www.linkedin.com/pub/ben-wing/19/b76/461]]

See also: [[file:emacs_vs_xemacs.html][My Experience of Emacs vs
XEmacs]] and [[file:gnu_emacs_xemacs_schism_Ben_Wing.html][GNU Emacs and
XEmacs Schism, by Ben Wing]].

** John Ousterhout
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[https://en.wikipedia.org/wiki/John_Ousterhout][John Ousterhout]], well
known as the inventor of the Tcl language, developed RSI. He switched to
using a voice system for almost everything. Here's his article on RSI.

Dealing With RSI (1995 to 2007) By John Ousterhout. At
+http://home.pacbell.net/ouster/wrist.html+ (local copy
[[http://xahlee.org/diklo/Dealing_With_RSI_by_John_Ousterhout_2007_08_21.txt][Dealing_With_RSI_by_John_Ousterhout_2007_08_21.txt]])

#+BEGIN_QUOTE
  I started having pain in my left wrist in 1995, and the problems got
  progressively worse in spite of (and partly because of) various
  attempts at treatment. In 1996 I started using a speech recognition
  system and stopped using my left hand for any typing at all.

  My experience suggests that once you start having RSI problems they
  are unlikely to go away by themselves. Everyone I've ever heard of
  with RSI problems (myself included) ignored early warning signs and
  didn't take action anywhere near soon enough, even when the symptoms
  started becoming severe. It's not clear to me that you can ever
  "recover" from RSI; all you can do is stabilize at your current level
  of disability. If there is any recovery, it takes many years.
#+END_QUOTE

2010-07-11 Addendum: I asked whether John is a emacs user.
[[https://en.wikipedia.org/wiki/Richard_Fateman][Richard Fateman]] wrote
to me and said no. Quote:

#+BEGIN_QUOTE
  FYI Ousterhout hated emacs, vehemently, at least when he was at
  Berkeley. He used VI.
#+END_QUOTE

** Others
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Bill Clementson, a long time lisp programer and emacs user (career
started in 1992 according to resume), developed RSI, and adopted the
[[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Advantage
Keyboard]] as a solution. He wrote about 7 blog articles about it from
2004 to 2006. See his blog at: +http://bc.tech.coop/blog/060623.html+.

[[http://www.emacswiki.org/emacs/AlexSchroeder][Alex Schroeder]], best
known as the one who started emacswiki.org, also developed RSI. He also
got a [[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Advantage
Keyboard]]. You can find some discussion about RSI here:
[[http://www.emacswiki.org/emacs/RepeatedStrainInjury][emacswiki.org
RepeatedStrainInjury]].

** Emacs and RSI Joke
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here's a very funny story relating RSI and emacs.

#+BEGIN_QUOTE
  The Real Reason Unix Hackers Get R.S.I.

  #+BEGIN_SRC emacs-lisp
      From: Patrick Sobalvarro <pgs@pa.dec.com>
      Subject: RSI epidemic
      Date: Sunday, August 13, 1995 1:26PM
  #+END_SRC

  Friday I was talking to my friend Johnson from the CDC, who told me
  that the CDC had been doing an epidemiological study of clustered RSI
  cases among computer scientists. He said that they've been waiting to
  act until their internal review process is completed, but it seems
  that there is indeed an infectious agent causing RSI. But it's not a
  biological agent. It's software.

  “In particular,” Johnson told me, “the significant vector among
  academics is Emacs.”

  “Emacs?” I gasped.

  “Oh yes,” he continued; “Didn't you ever notice that two of the first
  people in the computer science community around MIT who suffered from
  RSI were Richard Stallman and Bernie Greenberg ? What were those
  people implementing fifteen or twenty years ago? That's what tipped us
  off.”

  We were having lunch at the cafeteria at Moffett Field. Johnson
  watched my hands throughout the meal. “Hey buddy. You're still doing
  okay anyway, aren't you? It's good to see that. Really good.” He
  smiled, then looked at his watch and asked, “Walk me to the terminal,
  will you?”

  I accompanied him to the little facility where crew-cut young men in
  uniform and their dependents, trailer-park girls with squawling
  babies, sat around waiting for MAC flights to other military
  facilities. A black helicopter, curiously silent, was waiting on the
  tarmac outside, its rotors turning lazily in the sunlight. “Ah, that'd
  be my flight,” said Johnson. “Old Uncle Sam always sends you
  first-class, ha ha.”

  We shook hands. A little anxiously, I asked, “But what will you do
  about it? About the epidemic?”

  Johnson paused before answering. He looked outside at the black
  helicopter. The pilot had seen him now; in his helmet and visor he
  appeared strangely insectile as he regarded Johnson patiently. I
  noticed the booms extending from the sides of the helicopter, where
  standardized weapons pods could be attached. “Patrick, old buddy,”
  said Johnson playfully, “Back in high school people said you were
  smart, but I never thought you had an ounce of sense in your head.
  Listen: our charter is to protect the people of the United States of
  America by containing epidemics and eliminating disease. We have
  many... tools... at our disposal. Why don't you take a break for a
  while? Go someplace where people don't use Emacs. Where they never
  heard of Emacs. Don't take it with you. Go to Hawaii --- better yet
  --- go to Redmond. Okay?” He punched my shoulder, smiling. I winced.

  Then he strode out onto the tarmac, giving a thumbs-up to the pilot,
  who spun up the turbines. There was almost no noise. I didn't wait to
  watch them take off.
#+END_QUOTE

Apparently it's a email that's been circulating around. It can be seen
collected at +http://www.petting-zoo.net/~deadbeef/archive/304.html+,
+http://hackvan.com/pub/stig/scripture/religions-of-technology/the-real-reason-UNIX-hackers-get-RSI.htm+.

Mentioned in the story is Bernie Greenberg. He implement Emacs on
Multics in 1978. (Richard Stallman, Guy Steele, David Moon implemented
Emacs on ITS and TWENEX in 1976). For detail, see:
[[file:gnu_emacs_xemacs_schism_Ben_Wing.html][GNU Emacs and XEmacs
Schism]].

If you know other programing celebrities with RSI, please let me know.
Thanks.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_hand_pain_celebrity.html]]

\\
\\
| [[../index_u34.html#article_30][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u57.html>>

| [[../article_32/index_u42.html][下一项]] |
[[../index_u34.html#article_31][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_30/index_u61.html][上一项]] |

--------------

* My Typing/RSI Experience
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-03-26. Last updated: 2020-05-29.

i have several rounds of close to Repetitive Strain Injury (RSI)
experience. Never had any pain, but definitely tingling, soreness.

1st time is in 2005, that's due to using laptop all the time for a year.
I wrote about it here: [[file:emacs_pinky.html][How to Avoid Emacs
Pinky]]

2nd time in 2010, eventually found the problem to be a bad habit of
pressing the 1, 2 keys, by turning my left hand wrist sideways and using
index finger to press the 1. Documented here
[[file:vi_esc_syndrome.html][Programer Hand Health: vi Esc Key
Syndrome]]

3rd time in 2012. Eventually found the reason to be pressing the x key
too much on a rubber-dome key-switch keyboard. Documented here:
[[file:emacs_keybinding_redesign.html][The Roadmap to Completely Replace
Emacs Key System, Part 1]]

And there are more. Here's detail.

** Summary
   :PROPERTIES:
   :CLASS: calibre17
   :END:

here's a summary of my typing experience.

• ~1988. Learned touch typing on a electric typewriter.

• 1992. Worked as a data entry clerk and secretary. (on computer (Mac
classic), and typewriter)

• 1994. Learned Dvorak layout and switched to it. [see
[[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak Keyboard
Layout, My Experience ⌨]]].

• 1998. Started using emacs, and live in it by 1999. [see
[[file:emacs_vs_xemacs.html][My Experience of Emacs vs XEmacs]]]

• 1998 to 2005: Use xemacs in text terminal only, all default keys.
(started to use GUI emacs, in 2006, and switched to GNU emacs from
xemacs.)

Up to 2005, never had any typing/RSI problem. Am using standard PC
keyboard. Most of these years using whatever the keyboard that comes
with Mac.

• 2005. 1st brush of RSI. Caused by always using a laptop (Mac iBook)
since 2004. Solution: bought the
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard.html][Microsoft
Natural ergonomic keyboard]]. First time using a split keyboard. Never
liked split keyboard before, but now, i NEVER want to type on non-split
keyboard.

• 2007. Started to create and use
[[file:ergonomic_emacs_keybinding.html][ErgoEmacs mode]]

• 2009. Switched keyboard from MS Natural to
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
Natural Ergonomic Keyboard 4000]].

• 2010. 2nd brush with RSI, due to bad habit of pressing the keys 1, 2
keys, induced by the Microsoft 4000 keyboard. Documented at
[[file:vi_esc_syndrome.html][Programer Hand Health: vi Esc Key
Syndrome]]

• 2012. 3rd brush with RSI. Cause: pressing the x key too much on a bad
rubber dome keyboard (the MS 4000). Documented here:
[[file:emacs_keybinding_redesign.html][The Roadmap to Completely Replace
Emacs Key System, Part 1]]

• 2013. Started to use
[[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly Ergonomic
Keyboard]]. Love it.

• 2013. Started to use a emacs keybinding system that is all single key
press sequence, except for about 10 commands that make sense when held
down (For example, =forward-word=) in ErgoEmacs mode. A preliminary
report at [[file:emacs_keybinding_redesign_2.html][The Roadmap to
Completely Replace Emacs Key System, Part 2]].

• 2013. Started to create and use a modal keybinding mode similar to
vim, but key choice based on command frequency statistics. [see
[[../misc/ergoemacs_vi_mode.html][Emacs: Xah Fly Keys]]]

• 2016. Feeling discomfort. Wrist pronation problem. Due to hands on the
flat Truly Ergonomic Keyboard for about 12 hours per day. The keyboard
is flat, no tenting. (from ~2009 to ~2015, i write tons of stuff. The
average number of hours i sit in front of computer per day, is perhaps
12. Put another way, if we rank people in the world who sit in front of
computer longest hours in period of few years, as if measured by
statistics with a device on the seat, i'd say i rank within top 500.)

[see [[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly
Ergonomic Keyboard Review]]]

[see [[http://xahlee.info/kbd/keyboard_forearm_pronation.html][Is
Keyboard Tenting Important?]]]

• 2016-08. Started to use Kinesis Advantage2 Keyboard as my main
keyboard. [see [[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis
Advantage2 Keyboard Review]]]

In 2017, some more mild discomfort. In the past, it's always just left
hand. But now, right hand also felt discomfort. I can't pin down exactly
what's the “cause”. Possibly am getting old, and haven't exercised as
much before.

In 2018 to 2020-05-29 and on going. Start as mild discomfort, but by
2020 it's vague pain. Left arm, the forearm area, middle of forearm but
more near the elbow. Been very hard to trace the cause of this
discomfort. But i think it's due to too much pressing the key 3 (above
key e on qwerty) by middle finger on the kinesis disadvantage. The key 3
in xah-fly-keys is for =delete-other-windows= (it removes all split
panes), and is frequently used. according to my key log, it's used 0.37%
of all command calls (including self insert commands) Detail at
[[file:emacs_pinky_2020.html][Xah Lee Emacs Pinky 2020]]

#+BEGIN_SRC emacs-lisp
    For all major modes:

     879480   20.84%  self-insert-command
     289286    6.86%  previous-line                               c, C-p
     277822    6.58%  next-line                                   t
     253578    6.01%  mwheel-scroll                               <wheel-down>, <wheel-up>
     219708    5.21%  forward-word                                r, M-f, ESC <right>
     180404    4.28%  xah-beginning-of-line-or-block              d
     159757    3.79%  backward-word                               g, M-b, ESC <left>
     137951    3.27%  xah-end-of-line-or-block                    s
     125464    2.97%  isearch-printing-char
     120095    2.85%  xah-fly-command-mode-activate               <menu>, <home>, <end>
      75822    1.80%  xah-fly-insert-mode-activate                u, SPC DEL
      74665    1.77%  xah-paste-or-paste-previous                 k, SPC k
      64826    1.54%  xah-find-next-match                         TAB, <right>
      60314    1.43%  xah-html-open-local-link
      53738    1.27%  xah-close-current-buffer                    C-w, SPC t h
      46826    1.11%  forward-char                                n, C-f
      46260    1.10%  xah-backward-kill-word                      .
      46210    1.10%  open-line                                   o
      43693    1.04%  xah-delete-current-text-block               i
      40887    0.97%  xah-next-window-or-frame                    w, SPC t w
      38584    0.91%  backward-char                               h
      37055    0.88%  mouse-drag-region                           <down-mouse-1>
      35337    0.84%  xah-delete-backward-char-or-bracket-text    e
      35251    0.84%  mouse-set-point
      34946    0.83%  xah-shrink-whitespaces                      ,
      34001    0.81%  xah-copy-line-or-region                     j, <f3>
      31401    0.74%  xah-browse-url-of-buffer
      27486    0.65%  xah-kill-word                               p
      26271    0.62%  isearch-exit
      26028    0.62%  isearch-forward                             b, SPC g
      25785    0.61%  isearch-repeat-forward                      s-g
      23807    0.56%  xah-backward-left-bracket                   m
      21346    0.51%  undo                                        f, C-z, C-_, s-z, C-/, C-x u
      21268    0.50%  ido-exit-minibuffer
      20938    0.50%  xah-forward-right-bracket                   v
      19775    0.47%  keyboard-quit                               C-g
      18241    0.43%  delete-backward-char
      16872    0.40%  xah-select-line                             7, 2
      16445    0.39%  xah-find-previous-match                     <left>
      16392    0.39%  xah-cut-line-or-region                      q
      15891    0.38%  exit-minibuffer
      15469    0.37%  delete-other-windows                        3, ], C-x 1
      14513    0.34%  xah-insert-space-before                     l
      14484    0.34%  xah-select-block                            6
      14074    0.33%  set-mark-command                            y, C-@
      11325    0.27%  handle-switch-frame
      11259    0.27%  xah-open-file-fast                          SPC c r
      11132    0.26%  xah-select-text-in-quote                    9
       9928    0.24%  xah-html-wrap-p-tag                         SPC . t
       9764    0.23%  dired-previous-line
       9153    0.22%  xah-extend-selection                        8, 1
       8946    0.21%  xah-html-wrap-html-tag
       8762    0.21%  beginning-of-buffer                         SPC d, M-<, 
#+END_SRC

[[file:feed_0/article_31/images/img1.png]]

xah emacs keylog 2020-01-06 jxdcj

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/xah_keyboarding_RSI_experience.html]]

\\
\\
| [[../index_u34.html#article_31][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u42.html>>

| [[../article_33/index_u40.html][下一项]] |
[[../index_u34.html#article_32][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_31/index_u57.html][上一项]] |

--------------

* Xah Lee Emacs Pinky 2020
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2020-05-29. Last updated: 2020-06-17.

** Left Forearm Hurts
   :PROPERTIES:
   :CLASS: calibre17
   :END:

My left forearm hurts. Repetitive Strain Injury due to typing. Had this
vague pain since 2018 and is still ongoing (as of 2020-05-29). There is
a specific spot that hurts. The spot is near the left elbow, about 1/4th
down the length of forearm from elbow, and west position in the cross
section circle of the forearm.

Never was able to pinpoint the exact cause. But i suspect it's pressing
the key 3 too much (that's the key roughly above e on QWERTY layout. ).
In xah fly keys, that key does unsplit window, which is very frequently
used.

2020-05-29 I think now am sure, that my vague upper forearm pain in past
3 years, is due to two keys too much. One is the 3 key, pressed with my
middle finger, to unsplit emacs panes (=delete-other-windows=) , the
other is using pinky to press CapsLock too much. The capslock is used
for =xah-fly-command-mode-activate= in
[[../misc/ergoemacs_vi_mode.html][Emacs: Xah Fly Keys]] .

- Been pressing the key 3 for 10 years, since about 2008, when
  [[file:ergonomic_emacs_keybinding.html][ErgoEmacs Mode]] began.
- Been pressing the CapsLock for 7 years, since 2013, when xah fly keys
  began.

I know they are the cause, because when the pinky pushes capslock, or
the index finger presses 3, the muscle moves in the spot of pain. I can
feel the muscle move by placing my right hand fingers on the pain spot.
When key 3 is pressed, the spot is center of the pain spot. When key
CapsLock is pressed, the spot is a bit off center of the pain spot.

** Solution
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 2 solutions.

1. Change keybinding for those frequently used commands, so that i do
   not have to press 3 or capslock much.
2. Change the way i press those keys. Instead of moving finger, try not
   move finger. Imagine the fingers are immovable like cast iron, move
   whole hand instead.

Added new keys so unsplit window. Fix my RSI that's killing my left
hand.

#+BEGIN_SRC emacs-lisp
    (defun xah-xfk-add ()
        "addon for `xah-fly-command-mode-activate-hook'
    Version 2020-04-09"
        (interactive)
        (xah-fly--define-keys
         xah-fly-key-map
         '(
           ;; the first element of cons cell is dvorak key
           ("3" . nil )
           ("4" . nil )
           ("-" . delete-other-windows)
           ("\\" . split-window-below)
           ("]" . delete-other-windows)
           ("[" . split-window-below ))))
#+END_SRC

- The left square bracket key is for
  [[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Advantage2
  Keyboard]].
- The dash key is for normal keyboard, my
  [[http://xahlee.info/kbd/ultimate_hacking_keyboard.html][Ultimate
  Hacking Keyboard]].

back to [[file:xah_keyboarding_RSI_experience.html][My Typing/RSI
Experience]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_pinky_2020.html]]

\\
\\
| [[../index_u34.html#article_32][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u40.html>>

| [[../article_34/index_u32.html][下一项]] |
[[../index_u34.html#article_33][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_32/index_u42.html][上一项]] |

--------------

* Programer Hand Health: vi Esc Key Syndrome
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2010-08-16

In the past month, my left hand wrist started to feel funny. Especially
yesterday after several hours of heavy coding. Not pain yet, but
distinctively something is wrong. The closest description is tingling,
and tingling sensation is the first symptom of RSI.

(Been using emacs for like 16 hours per day for the past 6 months.
Especially in the past 3 months. No it's not a exaggeration. Hard to say
the exact hours my fingers are actually typing, but literally from the
time i wake to the time i sleep i'm in front of comp, and about half of
that time i'm inside emacs.)

I am fairly a keyboarding expert. I use a fancy ergonomic keyboard
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
Natural Ergonomic Keyboard 4000]] (since 2005). I use the
[[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak Layout]]
(since 1994). I use a [[file:ergonomic_emacs_keybinding.html][ergonomic
emacs keybinding set]] (since 2007). I have extensive
[[http://xahlee.info/mswin/autohotkey_examples.html][Operating-system-wide
custom-designed shortcuts]] to save keystrokes. I read extensively on
all things related to keyboard, in the past 20 years. [see
[[http://xahlee.info/kbd/keyboarding.html][Keyboards, Layouts, Hotkeys,
Macros, RSI]]]

So, it is a slap to my face, that i might be developing repetitive
strain injury (RSI). I am quite puzzled on what's the cause.

Is it the emacs chording? No, i don't find any evidence tracing to that
with my system. Is it lack of breaks? No, i take at least 7 min walk
every 2 hours. I thought it's because i played too much first-person
shooter in [[http://xahsl.org/sl/sl_military.html][Second Life]].
(because i use left hand for mousing. (btw, i use 2 mouses, one for each
hand, and i alternate mousing hands without thought, whichever comes
handy at the moment. Been doing this since 1995 or so.)) Certainly
playing first-person shooter didn't help, especially when you get
intense and got immersed in the game to kill your opponents, and this
can happen for hours unconsciously.

Perhaps, 10+ hours a day keyboarding is just too much? I was guessing
the problem is Second Life combat, but can't be sure. But today, i found
out why.

** Cause: Wrist Side-To-Side Motion
   :PROPERTIES:
   :CLASS: calibre17
   :END:

It's the goddamn keys like {1, 2, Tab, Escape, `}. In a sentence,
perhaps it is best understood as “vi Esc key syndrome”.

One way to know your problem is to have a camcorder pointing at your
hands for the whole day. Then, play them back with increased speed. When
you watch the video, you can clearly see what's the most repetitive
motion. (This technique is widely used in athlete training to monitor
habits and movements. (i know because i was in college swimming team in
around 1992 to 1993, and have been subjected to this by our coach Ron
Oburn, once.))

I don't have a camcorder and didn't bother to do this. Nevertheless,
little hints and thoughts made it clear.

The 1, 2, Esc, Tab keys are on the extreme left side of the keyboard.
Let's say the 1 key, which is the most frequently used digit. How you
press that depends on person. You can flatten your palm and extend your
pinky. This is the method traditionally taught in touch-typing. However,
i remember about a year ago i find this way to be too slow and
cumbersome on the
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
Natural Ergonomic Keyboard 4000]] i am using. I press the 1 key by
bending my wrist leftward, then use my middle finger to press 1. This
means i move my wrist in a horizontal left/right motion a lot.

Also, in ErgoEmacs, splitting window is done by Alt+2, and expanding the
current pane is done by Alt+1, and closing all other panes is
Alt+Shift+1 (Alt+!). Window expanding and spliting are two of the most
frequently used emacs operations. [see
[[file:command-frequency.html][Emacs's Command Frequency]]] So this
increased a lot the frequency of my left wrist's left-right movement.

Also, in ErgoEmacs, Alt+` and Alt+~ are for switching next/prev windows
in emacs. (i.e. what emacs calls “frame”; Ctrl+x 5 o). I almost always
have 2 windows in emacs.

In the past few days, before this discovery, i have attempted to
reproduce hand movement that would cause this tingling sensation, but
just couldn't pinpoint. Now i know. Now, if i just emulate the motion of
my left hand trying to type the 1 and back to normal typing position,
TINGLE! Move my hands away from keyboard, then try to move my wrist
left/right, Tingle! Don't laugh, because it's very unpleasant. (and i
shudder to think about it, because
[[file:emacs_hand_pain_celebrity.html][many programers have permanently
damaged their hands by typing]].)

** Solution
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The solution is quite simple. Here are some suggestions.

• Do not press the 1 key using index finger. Same for all the other keys
there (Escape, `, Tab, 2). Press them by moving your whole arm to avoid
wrist bending. (Pressing them by extending pinky will probably cause a
different problem.)

• Avoid heavy use of these keys. If your software need them frequently,
remap them elsewhere using keyboard macros software. Map them to
function keys, or modifier combo with easier keys in positions of 3, 4,
7, 8, 9. If it means slower operation, keep in mind that your hand
health is more important than saving of little seconds.

for key macros tools, see:

- [[http://xahlee.info/mswin/Windows_keybinding.html][Windows: Keyboard
  Layout Tools, Key Macro Tools]]
- [[http://xahlee.info/kbd/Mac_OS_X_keymapping_keybinding_tools.html][Mac:
  Key Remapping and Keybinding Tools]]

Personally, i use:

- [[http://xahlee.info/kbd/ms_keyboard/intellitype_hacks.html][Microsoft
  IntelliType Hacks]]
- [[http://xahlee.info/mswin/autohotkey.html][AutoHotkey Tutorial ⌨]]
- [[http://xahlee.info/kbd/osx_keybinding.html][Mac OS X: How to Create
  Keyboard Layout and Keybinding ⌨]]

This also means, my ErgoEmacs keybinding will be changed. Alt+1, Alt+2
won't be for splitting windows. When i designed them, those choices were
sloppy without thought. They were based on mnemonic, similar to emacs's
default Ctrl+x 1, Ctrl+x 2. But now i know how bad these choices were.
I'll create a new version with new binding for spliting window
functions. For now, you can put the following in your emacs init file:

#+BEGIN_SRC emacs-lisp
    ;; remove some default
    (define-key ergoemacs-keymap (kbd "M-1") 'nil)
    (define-key ergoemacs-keymap (kbd "M-!") 'nil)
    (define-key ergoemacs-keymap (kbd "M-2") 'nil)
    (define-key ergoemacs-keymap (kbd "M-@") 'nil)

    ;; new
    (define-key ergoemacs-keymap (kbd "M-3") 'delete-other-windows )
    (define-key ergoemacs-keymap (kbd "M-0") 'delete-window)
    (define-key ergoemacs-keymap (kbd "M-4") 'split-window-vertically)
    (define-key ergoemacs-keymap (kbd "M-$") 'split-window-horizontally)
#+END_SRC

The above takes out the ispell-word command. If you use that, remap it
somewhere. I remap it to the keypad's 4. (=(kbd "<kp-4>")=) (other
numbers are already used. I use the keypad keys as function keys. If you
don't use the operating system's Calculator, the keypad is very useful
as extended function keys. Can be system-wide or app-specific.)

Note: the original design of Dvorak layout has numbers arranged like
this:

#+BEGIN_SRC emacs-lisp
    1 2 3 4 5     6 7 8 9 0  ← normal
    7 5 3 1 9     0 2 4 6 8  ← Dvorak
#+END_SRC

The 1 would be today's 4, which is most easily typed for that row for
left hand.

I'm sooo very happy i discovered this problem.

2010-08-23 Addendum: ErgoEmacs keybinding has been updated with this
change.

** Stiff Spacebar on Microsoft Ergonomic 4000 Keyboard
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2010-09-04

My left hand is whacked. No pain yet, but something is getting seriously
wrong.

Couple weeks ago, i wrote long about my realization that the problem was
the left hand wrist motion to press the {1, 2, Tab, ...} keys by the bad
habit using my index finger. (causing excessive side-to-side wrist
motion)

I made lots of changes in my habit and keybinding. I learned a whole lot
more intricate detail about keyboards and habits, and things are going
well; no more tingling sensation, because i have stopped the habit of
moving my wrist side-to-side, not a bit, even i still type many hours a
day.

But this morning when i woke up, my left forearm, the area under it,
there's some twitching going on. Very slight, some vague sensation best
described as tingling goes along with it, and i know it is BAD. I think
because i typed too much yesterday.

I realized that i was wrong to think that side-to-side wrist motion was
the only cause of my problem. APPARENTLY, LEFT HAND'S THUMB BENDING
INWARD TO HOLD THE ALT KEY can also cause a problem if done too much.

At the moment, i'm not sure i can pinpoint any particular habit or
keybinding motion to blame. I type on Dvorak, and Dvorak uses right hand
keys 14% more than left. But i don't have any problem with my right hand
at all (PS, when writing this paragraph, i just realize that i always
use my left hand to type the space bar. That could explain it!)

Am sending this out here as a warning to anyone who does heavy typing.
Apparently, ErgoEmacs's ways of using Alt cannot solve prolonged typing.

2011-11-14 Addendum: As of today and past year, i have no problem
whatsoever. I suspect that the problem before came from the stiff
spacebar on the
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
Natural Ergonomic Keyboard 4000]] (i use left thumb to press Space, and
space is by far most used key than any letter.). It's a well known
problem of that keyboard. I have stopped using that keyboard.

See also: [[file:emacs_rsi_my_experiences.html][Emacs, RSI, My
Experiences]] •
[[http://xahlee.info/UnixResource_dir/writ/emacs_keybinding.html][Emacs
Keybinding Rant, and a Glimpse of Xah Lee's Life 2010]].

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/vi_esc_syndrome.html]]

\\
\\
| [[../index_u34.html#article_33][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u32.html>>

| [[../article_35/index_u27.html][下一项]] |
[[../index_u34.html#article_34][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_33/index_u40.html][上一项]] |

--------------

* Emacs, RSI, My Experiences
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2010-09-05

Recently, i had starting symptoms of RSI (repetitive strain injury).
(For detail see: [[file:vi_esc_syndrome.html][Programer Hand Health: vi
Esc Key Syndrome]].) This page is some practical emacs and keyboarding
advices i learned from this experience.

** Keyboarding Advices Are Qualitatively Different Depending on Typing
Duration
   :PROPERTIES:
   :CLASS: calibre17
   :END:

I learned that typing advice matters depends on just how much you types
a day.

We all sit in front of the computer all day, but if you log you
keystrokes, you may find that you only type less than one hour a day if
done continuously. Contrast this to data-entry clerks, who actually
type, continuously for several hours a day.

[see
[[http://xahlee.info/kbd/how_many_keystrokes_programers_type_a_day.html][How
Many Keystrokes Programers Type a Day?]]]

If you just type less than 1 hour a day, QWERTY or bad habits or bad
keyboard is completely healthy! You could do this for 10 years and never
have any problem. If your typing comes near data-entry clerks, a special
ergonomic keyboard such as
[[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis]] becomes
necessary.

** Tab, Enter, Backspace Key are Problems
   :PROPERTIES:
   :CLASS: calibre17
   :END:

I learned that the PC keyboard really have serious problems especially
with the Tab, Enter keys, Backspace, and the right side Shift key. Even
with
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
Natural Ergonomic Keyboard 4000]].

They are all pressed by stretched pinky. The Enter and right Shift
requires a stretched pinky because there is 1 extra key after the right
pinky's home position. (the apostrophe ' key.) (Some European language
layouts such as [[http://xahlee.info/kbd/keyboard_layouts.html][QWERTZ
and AZERTY]] have 2 extra keys in between!)

This is the first time, that i realized from actually hand experience,
about the problem of these keys. To press Enter or right Shift, the
right hand does a combination of stretching pinky or side-to-side wrist
movement. Do this for 8 hours a day every 5 seconds; hello RSI!

One might think these keys are not used that often, but from
[[file:command-frequency.html][emacs command frequency study]] ,
majority of programers probably do a lot more editing than typing. The
average for editing keystrokes is like 48%! (for each person, it varies
from 20% to 80%, depending on whether you are for example heavily
writing a lot emails, or much reading/editing code.)

(Kinesis keyboard solve this problems by having thumb cluster keys for
these)

For more detail on this, see:
[[http://xahlee.info/kbd/keyboard_problems.html][Computer Keyboard
Design Flaws]] and
[[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Advantage2
Keyboard Review]].

** Emacs Tips for 70-Hour Week Sessions
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The following are some specific emacs advices. Note that i already use:

- [[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak Keyboard
  Layout]]
- [[http://xahlee.info/kbd/ergonomic_keyboards_index.html][Ergonomic
  Keyboard Reviews]]
- [[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keybinding]], evil
  mode, or [[../misc/ergoemacs_vi_mode.html][Emacs: Xah Fly Keys]].

So, the following advice may be applicable only if you already do the
above and have to type 70-hour weeks for many weeks.

• I started to remap extensively my personal bindings that involves a
Shift. Get rid of them. Especially those needs the right Shift. (i.e.
the letter is on the left side of keyboard)

• I started to aggressively make [[file:emacs_alias.html][aliases]] to
commands i use often. The aliases are 1 to 3 letters long. Put alias
file on your [[file:bookmark.html][Emacs's Bookmark]] so you can open
them right away and define new ones the moment you find a command that
you are using a lot today or past days. (i stopped worrying about
cluttering alias space or managing to remember them. It doesn't seem to
be a practical worry.)

I use aliases because i already have about 200 personal hotkeys. Single
key spaces are mostly used up (including single keys on the number pad),
key chord combinations are harder to remember.

• Do the same for abbrev, as well as your
[[file:keyboard_shortcuts.html][custom keybinding file]]. The point here
is that you want a dynamic and instantaneous system that let you easily
change or add new shortcuts, alias, abbrevs, and you should get a habit
of adding new ones whenever you noticed a command or word that you've
been using frequently in the past few days. (you will usually notice it.
For command, due to the fact you have to press Tab a lot to command
completion (For example, elisp's “buffer-substring-no-properties”), and
for long words like “environment variable” or “internationalization”,
“Microsoft”, “Windows”, “GNU Emacs”, “software”, or
“http://ergoemacs.org/”, you'll notice.)

• I started to type Enter by Ctrl+m half of the time. (in fact ❖Window+m
is also Enter now thru AutoHotkey.) Partly to alleviate the burden on
right hand, partly to vary the muscle usage. And yes, sometimes press
Enter by moving your whole hand, as in hunt-n-peck.

Note, unless you are on a laptop, don't press Ctrl with pinky, and it's
probably not a good idea to swap Ctrl with CapsLock. [see
[[file:emacs_pinky.html][How to Avoid Emacs Pinky]]]

• Remapped CapsLock to Tab now. (or, i could also use Ctrl+i)

• Seriously started to use [[file:emacs_templates.html][yasnippet
template system]] a lot. Made it a habit to create new templates
constantly and instantly. Usually with just 1 to 3 letter abbreviations
to invoke them. Don't fret about abbrev consistency, template design,
etc. The point here is that it's for your personal use, and that it
immediately saves you lots of typing.

For example, instead of “div.class” for =<div class="…">…</div>=, you
can make it just “d.c” or even “dc”.

• I realized that [[file:bookmark.html][Bookmark]],
[[file:file_management.html][dired]], all can use mouse. I try to switch
to mouse more often. Yes the keyboard is faster but not good if
repeatedly used for 10+ hours a day without hand muscle changing
exertion pattern. Sometimes also use mouse to select text.

• I started to use less efficient keys sometimes, for example, the arrow
key and Ctrl+arrow for cursor movement, page up/down, etc. To get hand
away from the same muscle usage on touch typing position.

• Alternate hands for pressing the Space bar.

My problem is only with left hand. On Dvorak, right hand actually does
14% more typing. I realized that i always press space with left thumb.
Now i switch to right thumb. Perhaps eventually want to develop a habit
of alternate hands for space bar after each word. (in human language or
computer language, the space occures more frequently than any letter)

• Sometimes i switch keyboards during a day. My 3 fav are Microsoft's
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Natural
Ergonomic Keyboard 4000]],
[[http://xahlee.info/kbd/ms_keyboard/ms_comfort_curve_keyboard_2000.html][Comfort
Curve Keyboard 2000]],
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard.html][Wireless
Natural Multimedia]]. Right now am on comfort curve, which has laptop
style flat keys. Change keyboard is for the purpose of varying the
muscle usage pattern.

• In emacs keybinding, forget anything about consistency or
ease-to-remember. One principle and one only: map
[[file:command-frequency.html][Command Frequency]] to ease of the key.

• Do not bother with prettying up little formatting in code or deleting
a trailing space, alignment. Avoid these extraneous typing. Use
automatic formatting tool as much as possible. (For example, emacs
“delete-trailing-whitespace” and much others.)

I don't have a problem using mouse at all, probably because i don't use
mouse that much. But anyhow, i find 2 fantastic ways to save clicks:

- [[http://xahlee.info/linux/mouse_hover_auto-raise_window.html][Mouse
  Hover to Auto-Raise Window]]
- [[http://xahlee.info/mswin/windows_auto-raise_single_click.html][Single-click
  Open File in]]

** ErgoEmacs Viper Mode
   :PROPERTIES:
   :CLASS: calibre17
   :END:

I seriously considered creating a ErgoEmacs viper mode. I'm familiar
with vi's “modal” methods of editing, but have always kinda put off of
thinking about whether the vi modal method is more efficient or
ergonomic. With my RSI incident, i put heavy thought about it, and i
think yes, the modal method is actually more efficient and ergonomic.

I think i'll invest time in this in the future.

(However, note that by default the Escape for switching mode is a fast
way to get RSI. Also, the default command keys in vi are NOT optimal.
[see [[file:emergency_vi.html][Emergency vi]]] Vi's keys, like emacs,
are largely historical happenstances without any thought on efficiency
or ergonomic. [see
[[http://xahlee.info/kbd/keyboard_hardware_and_key_choices.html][Keyboard
Hardware's Influence on Keyboard Shortcut Design (How Emacs and vi keys
came to be)]]] )

2013-09-30 addendum. This is done. See:
[[../misc/ergoemacs_vi_mode.html][xah fly keys]].

** Kinesis Keyboard
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The [[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Contoured
Keyboard]] solves many major PC keyboard problems. I think i may get it.
(2014-05-08 addendum: now i use
[[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly Ergonomic
Keyboard]])

I think the above sums my recent experiences.

Again, this needs to be emphasized: the above advices are from someone
who spend on average 12 hours per day in front of computer for the past
2 years. If your keyboard needs is not this heavy, some of the above
advices are not applicable, and in fact less efficient (for example:
switching keyboards in a day, constantly add new keyboard shortcuts, use
the mouse, etc.)

Also, my heavy use of keyboard is mostly writing essays and tutorials in
HTML. So, there's a lot of heavy data-entry tasks (meaning: just keep
typing a lot of plain English text.). Because i have extensive shortcuts
and commands to insert HTML tags or special chars such as
〈「【([{"=+-"}])】」〉, my typing problem is probably mostly due to
heavy typing, not much from emacs chording.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_rsi_my_experiences.html]]

\\
\\
| [[../index_u34.html#article_34][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u27.html>>

| [[../article_36/index_u14.html][下一项]] |
[[../index_u34.html#article_35][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_34/index_u32.html][上一项]] |

--------------

* Using Voice to Code Faster than Keyboard 📺
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-03-27. Last updated: 2019-08-13.

A very cool video. Using voice to code, and code faster than average
programer with keyboard. It's a presentation at Python Conference 2013.

Using Voice Recognition to write code, by Tavis Rudd.
[[[https://github.com/tavisrudd]]] Published on 2013-03-20

The first demo, voice coding emacs lisp, starts at 09:00.

*** Synopsis
    :PROPERTIES:
    :CLASS: calibre14
    :END:

#+BEGIN_QUOTE
  Two years ago I developed a case of Emacs Pinkie (RSI) so severe my
  hands went numb and I could no longer type or work. Desperate, I tried
  voice recognition. At first programming with it was painfully slow
  but, as I couldn't type, I persevered. After several months of vocab
  tweaking and duct-tape coding in Python and Emacs Lisp, I had a system
  that enabled me to code faster and more efficiently by voice than I
  ever had by hand.

  In a fast-paced live demo, I will create a small system using Python,
  plus a few other languages for good measure, and deploy it without
  touching the keyboard. The demo gods will make a scheduled appearance.
  I hope to convince you that voice recognition is no longer a crutch
  for the disabled or limited to plain prose. It's now a highly
  effective tool that could benefit all programmers.
#+END_QUOTE

if you are impatient, here's a summary of the video:

- He uses Dragon NaturallySpeaking voice recognition software on
  Microsoft Windows. (he said he couldn't make the Linux CMU Sphinx
  work.) (though, he's using Mac, apparently running Microsoft Windows
  in a virtual box.) [[https://amzn.to/1MDpzC5][Dragon
  NaturallySpeaking]]
- Dragon uses Python. He hacked it, together with a Python Speech
  recognition extension lib DragonFly by Christo Butcher, at
  [[https://pypi.python.org/pypi/dragonfly/0.6.5]]. So now he can define
  his own voice commands. (type things, or move cursor to particular
  place in code, or keyboard shortcuts, switch apps, ..., etc.)
- He created many short idiosyncratic/unique vocal utterances to do many
  things, such as insert line return, switch emacs buffer, start
  terminal, etc. So, when he's voice coding, you hear “twip, chirp,
  slap, derp, ...”. Very funny.
- He has about 2k personal commands.
- He said everything he do with his system is inside vim or emacs. (in
  his demo, it seems it's all emacs, as interface to everything else.
  There's heavy use emacs features, including templates/completion,
  shell in emacs.).
- He demonstrated using it to code Emacs Lisp, Python, work in emacs,
  terminal. So efficient that it's faster than average programer can
  with hands on keyboard.
- Took him 3 to 6 months to come up with his system.
- His Repetitive Strain Injury (RSI) is completely healed by now, but he
  says he still use his voice system for coding, for about 40% to 60% of
  time.
- He said he'll release his code in about 4 months.

The expensive microphone he recommended is “Audix OM-7 Microphone”

[[file:feed_0/article_35/images/img1_u11.jpg]]

[[http://www.amazon.com/dp/B0002H0M7W/?tag=xahh-20][Buy at amazon]]

I've used Microsoft speech recognition system, for a few months in 2010.
It comes with Microsoft Windows 7. It's pretty good for normal speech
but impossible for coding (out of the box). It works well in normal
Windows apps, especially ones from Microsoft such as Office, but doesn't
work well in emacs.

** Year 2019 Update, Voice Text Input for Programing
   :PROPERTIES:
   :CLASS: calibre17
   :END:

See: [[http://xahlee.info/kbd/voice_text_input.html][Voice Text Input
for Programing]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/using_voice_to_code.html]]

\\
\\
| [[../index_u34.html#article_35][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u14.html>>

| [[../article_37/index_u54.html][下一项]] |
[[../index_u34.html#article_36][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_35/index_u27.html][上一项]] |

--------------

* emacs and vi: Science of Command Efficiency
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-11-04. Last updated: 2018-03-13.

** Components of Keyboarding Science
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- key layout efficiency, that's your
  [[http://xahlee.info/kbd/dvorak_and_all_keyboard_layouts.html][QWERTY
  vs Dvorak]]
- keybinding layout efficiency. Given a set of commands, what's the most
  efficent mapping to key as to optimize ergonomics? That's your
  [[file:gnu_emacs_keybinding.html][GNU Emacs's Keybinding]] vs, say,
  [[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keybinding: a
  Ergonomics Based Keyboard Shortcut System]]

but, there's 1 more: command efficiency.

** Science of Command Efficiency
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Let's say you can only have a fixed number of commands, say 30. What is
the most efficient command set? For example, you'd need:

- move cursor up/down/left/right
- delete character left/right
- move cursor by word left/right
- delete word left/right

That's the most basic 10 editing commands you need. And, 30 - 10 = 20.
You can have 20 more commands.

You'll want commands to move to begin/end of line. A command to
insert/remove comments. Command to toggle letter-case, perhaps. Do you
need a command to insert a line return BEFORE cursor too (in emacs, this
is =open-line=). Should you have a =back-to-indentation= command? Is
=kill-line= more efficient or =kill-whole-line=, if you can only have
one? [see [[file:emacs_delete_whole_line.html][Emacs: Single Key to
Delete Whole Line]]]

(why are we interested in restricting the number of commands? Because
there are only 30 or so easy-key spots on a keyboard. So we need to pick
a good selection of commands that are most versatile and efficient.
Otherwise, you could have 10 thousand commands, but each requires lots
keystrokes to invoke.)

is =transpose-chars= a worthy command for our budget?

should moving by word always have cursor end at the beginning of the
word (as in vim), or should it depends on the move direction (as in
emacs)? [see [[file:text_editor_cursor_behavior.html][Text Editor's
Cursor Movement Behavior (emacs, vi, Notepad++)]]]

also, should you have a system where repeated call of a command result
in different behavior? (For example, emacs's =recenter-top-bottom=), or,
should commands always have the exact same behavior, augmented by a
=universal-argument= system as in emacs? (or, should you have both in a
mix? but, would a single consistent system possibly be better than mixed
style?)

so, this is the science of command efficiency. Most visible as vi and
emacs command set differences.

so, in summary, again, the science of keyboarding are:

- ① letter key layout efficiency
- ② keybinding layout efficiency
- ③ command set efficiency

Problem ①, the key layout efficiency, is a solved problem. (see:
[[http://xahlee.info/kbd/most_efficient_keyboard_layout.html][What's the
Most Efficient Keyboard Layout? Dvorak?]])

Problem ②, the keybinding layout efficiency, is mostly solved. See:
[[http://xahlee.info/kbd/keybinding_index.html][Keybinding Design ⌨]]

Problem ③, on command set efficiency, there's no research on it, as far
as i know.

I've studied many aspects of command efficiency for over 10 years but
don't have a comprehensive picture.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/science_of_command_efficiency.html]]

\\
\\
| [[../index_u34.html#article_36][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u54.html>>

| [[../article_38/index_u13.html][下一项]] |
[[../index_u34.html#article_37][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_36/index_u14.html][上一项]] |

--------------

* Emacs Keybinding Efficiency: Page Up/Down and Pigeon Hole Principle
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-01-16. Last updated: 2020-03-18.

this page discuss a better use of page key and home/end keys for
programers.

in emacs, now i have set:

- {PageUp, PageDown} keys to move cursor by code block.
- {Home, End} keys to move cursor to prev/next brackets.

here's the code:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<prior>") 'xah-beginning-of-line-or-block) ; page up key
    (global-set-key (kbd "<next>") 'xah-end-of-line-or-block) ; page down key

    (global-set-key (kbd "<home>") 'xah-backward-left-bracket)
    (global-set-key (kbd "<end>") 'xah-forward-right-bracket)
#+END_SRC

get the command definitions at:

- [[file:emacs_keybinding_design_beginning-of-line-or-block.html][Emacs:
  Move Cursor to Beginning of Line/Paragraph]]
- [[file:emacs_navigating_keys_for_brackets.html][Emacs: Move Cursor to
  Bracket/Quote]]

** O Why?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

in pursuit of utter efficiency.

Mouse wheel with accelerated scroll (in macOS and Microsoft Windows) is
faster, more efficient, more precise, then using PageUp PageDown keys to
page up/down.

Note: it's important you have mouse wheel acceleration on. It makes a
major difference. As of 2013:

- *Mac*: you have wheel acceleration by default.
- *Microsoft Windows*: you have wheel acceleration only if you have a
  Microsoft mouse and use its driver. (or any gaming mouse. [see
  [[http://xahlee.info/kbd/mouse_index.html][Mouse Reviews]]] )
- *Linux*: there is no system-wide mouse wheel acceleration.
- *Emacs*: there is mouse wheel acceleration by default, doesn't matter
  which OS emacs is on.

See also:

- [[http://xahlee.info/mswin/Firefox_mouse_wheel_scroll_speed.html][Firefox:
  Set Mouse Wheel Scroll Speed]]
- [[http://xahlee.info/kbd/mouse_smooth_wheel_vs_notched.html][Mouse
  Wheel: Smooth Scroll vs Notched Scroll]]

also, mouse wheel gives you fine control. You can scroll by a few lines.
Paging can't do. For programers working on computer source code, this is
especially nice.

this makes sense, because mouse wheel is a device that you can smoothly
control the firing rate, at 1 hit per second to some 20 hits per second.
But a button, such as the PageDown key, you either sweat to press it
multiple times a second, or hold it down and maintain a constant ~25 per
second.

*** but mouse is far away?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Not if you use left hand for it, or use a
[[http://xahlee.info/kbd/keyboard_no_numpad.html][Tenkeyless Keyboard]]
or [[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly
Ergonomic Keyboard]]. On standard PC keyboard, the page up/down key is
also away from the main section. But what about emacs default key Ctrl+v
for page down and Alt+v for page up? The problem here is then you got
key chords, harder to press.

[see [[http://xahlee.info/kbd/function_key_vs_key_chord.html][Function
Key vs Key Chord, Which is Healthier, Which is Faster?]]]

here's a pigeon hole principle about keybinding:

*** You have 100 pigeon holes, but you have 200 pigeons. Which pigeon
should have a home?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

the pigeon hole here are nice single keys. The pigeons are emacs
commands.

On a keyboard, there are about 100 keys. However, most of them already
has a important purpose, such as letter keys, digit keys, Enter, Esc,
Tab, Page up/down, arrows. The keys that are free, are about 12 function
keys, and 17 keys on numpad, totaling about 30.

Of the 30 free keys, you need to jam about 100 to 200 commands. For
example, look at:

- [[file:gnu_emacs_keybinding.html][A Curious Look at Emacs's One
  Thousand Keybindings]]
- [[http://xahlee.info/mswin/windows_keyboard_shortcuts.html][Microsoft
  Windows Keyboard Shortcuts]]
- [[http://xahsl.org/sl/sl_kbd_shortcuts_cheatsheet.html][Second Life
  Keyboard Shortcuts Cheatsheet]]

Both mouse wheel and page key are for quickly moving to parts of
document. So, having one pigeon occupy 2 holes is not nice. Between the
two, mouse wheel is better, thus the page key must be saved for another
command.

so, mouse wheel is for paging. What to do with the page up/down key? A
better function for them is to move cursor by blocks of text. A block is
text separated by blank lines. This is extremely useful in computer
source code, any language.

** What's Up with the Home/End Keys?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

In text editors, the purpose of {Home, End} keys is either one of:

- move to beginning/end of line. (this is the convention on Microsoft
  Windows and Linux)
- move to beginning/end of document (convention on Mac)

For moving to begin/end of line, it's a very frequently used in text
editing or terminal, thus inconvenient to move hand away from main
section. Better to use hotkeys on the main section.

For moving to begin/end of document, it's relatively rarely used. Most
of the time, the page key or mouse wheel does it. So, again, you don't
want 1 pigeon occupy 2 holes. The {Home, End} keys are nice single keys.
It'd be a waste to use them for rare functionality.

So, i let them move cursor to prev/next occurrence of any brackets
(){}[]. Again, this is extremely nice for source code.

both of these functionality are in ErgoEmacs, and i use them heavily,
every minute, for the past 3 years, but now i assign them SINGLE keys.

[see [[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keybinding: a
Ergonomics Based Keyboard Shortcut System]]]

you need to try it for a week.

** Ban Key Chords
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[http://xahlee.info/kbd/banish_key_chords.html][Ban Key Chords]]

** 2017-06-02 Addendum
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2017-06-02, principles discussed on this page are implemented in
[[../misc/ergoemacs_vi_mode.html][Emacs: Xah Fly Keys]].

- [[file:command-frequency.html][Emacs Command Frequency]]
- [[file:emacs_pinky.html][How to Avoid Emacs Pinky]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_key_combo.html]]

\\
\\
| [[../index_u34.html#article_37][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u13.html>>

| [[../article_39/index_u44.html][下一项]] |
[[../index_u34.html#article_38][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_37/index_u54.html][上一项]] |

--------------

* The Roadmap to Completely Replace Emacs Key System, Part 1
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2012-05-17

did massive update on the
[[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keybinding]]. It's dev
version. Probably has bugs. More change coming in following days or
weeks.

made a few new discoveries about keyboarding habit and health this week.
Don't know where to begin... but i'll just start to ramble here. You can
read on or just get the files there any try it. Read the history file
there. More change will be done in next few days.

Ok, following will be rambling.

** Repetitive Strain Injury and the X S Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

(in the following, i'll use QWERTY to indicate key position, even though
i use [[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak]].)

My left hand is f�cked. emacs. Wasn't sure what's causing it. Now i
know. It's the keys that require using 4th and 5th fingers, while hand
is in standard touch-typing position. Actually, mostly the undo z, cut x
keys, and that standard save select all (s, a).

Here's a new thing i've learned. Normally, it's a good advice to press
key chords using both hands. That is, suppose you want to press Ctrl+x.
You should use right hand to hold right Ctrl and left hand to press x.
For touch typer, this means you press the x with 4th finger. *This'll
cause major problem if done often.*

Solution: set {F1, F2, F3, F4} keys for undo cut copy paste.

there's lots of tricky details. Normally, for those who use CapsLock for
Ctrl, this particular issue doesn't happen, because you shift your left
hand and make your left hand into some spider leg way to press Ctrl+x.
So, x is pressed by either 2nd or 3nd finger, both strong fingers.
(though, i think given equal amount of typing, this method may develop
other problems.)

also, there are certain things that made this issue worse: in about a
year ago, a new feature is added to ergoemacs keybinding. That is, when
there's no text selection, pressing cut or copy will simply cut/copy the
whole line. (See: [[file:emacs_copy_cut_current_line.html][Emacs: How to
Copy/Cut Current Line]].) This is really a fantastic feature by itself.
But there's a odd consequence. With this new feature, i noticed that i
no longer use =kill-line= anymore. I simply use cut, which will cut the
current line nicely. Also, when i need to cut/delete multiple lines,
normally you mark, then move cursor, then cut or delete. But i noticed i
don't do that anymore. I simply just cut multiple times, sometimes
holding the cut key. Nice! Convenient and saves keystrokes. But the
problem is, that my 4th finger now press the x key, many many times. In
other words, indirectly, i'm putting a whole lots burden on the 4th
finger.

If i was hunt'n'peck, that may not be a problem because i just use index
finger to peck x. But since i am touch-typer, and tend to follow proper
ways, so to press x, i use 4th finger while whole left hand is in
standard position. This is the cause of my problem. Normally, standard
typing won't type x much.

i find this particularly interesting, because seemingly good methods may
create side effects that's bad.

** Home Row Key ≠ Good Health Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Summary: *Home Row key isn't necessarily good health key*. If you want
to assign score for each key with respect to health, then the worst are
Z X A S keys (and same for right hand). (easy way to see this: Type
“asasas...” continuously for a hour. Then type “rfrfrf...” continuously
for a hour. Although {a, s} are both on home row, while {r, f} has only
one key in home row and require finger travel, but “asasas” is much
higher risk of RSI.)

also, in past week, spent days to think/search on what's the problem.
Sometimes i think typing too much IS the problem, period, regardless all
other health measures. That is certainly true to some degree. When you
need to type more than certain load for years, you'll get problems
regardless how good are the typing habits, keyboard, or personal health
etc.

** Sequential Key Strokes vs Key Chord
   :PROPERTIES:
   :CLASS: calibre17
   :END:

but anyhow, in past week's thinking, i came up with the thought of
eliminating all key chords. I've been on this road in recent years, but
this week i made a more systematic approach, and added 30 or so
sequential keys with the F key. By my analysis, i think sequential keys
are much superior than key chord in many ways. Health, memorization,
grouping... and i think even faster to operate on the long run on
average. Here's a draft of reasons:

Advantages of sequential keys

- easier to press
- far more key possibilities (indirectly, because single keys makes a
  key sequence simple and usable than mixed single/chord key sequence
  (For example, Ctrl+x c, Ctrl+x Ctrl+c))
- Easier to remember. (because now it's all single keys, as opposed to
  mixed single/chord)
- commands can be grouped. For example: F5 F6 ... prefix for elisp
  related. F5 F7 for editing related. F5 F8 for rectangle* commands. F5
  F9 ... for modes. F5 F10 ... for toggling commands, etc.
- help is easily available by pressing the sequence followed by F1.
  It'll show this group's commands, and each command are links to doc
  string.

so, i've been using a draft system for a few days now. Been thinking to
go thru the whole ~200 C-x keys to give them a sequential key, and make
it part of ergoemacs. But that'll take months to design.

the one thing sequential keys can be faster is that, for example,Ctrl+x
r k of =kill-rectangle=; you want to make the most frequently used
commands to have the most easy keys. In this case, that key can be F7 F8
8. So, 3 keys all nearby.

but Ctrl+x r k is easier to remember? Not necessarily. If you look at
emacs's Ctrl+x r key(See: [[file:gnu_emacs_keybinding_C-x.txt]]) ,
you'll find it's a mixed bag. Some are about bookmark, some rectangle,
some registry. While, F7 F8 prefix can all be about rectangle commands.
So, this is a example that i think sequential keys may not be worse with
respect of ease of memorization.

but also, when it comes to keys, ease-of-press is more important than
ease-of-memory. Because, once you know the key, you have to use it for
the rest of your life. Also, the memory is muscle memory, not verbal
citation of key sequence. When asking what's the key for a command, most
emacs users may have difficulty, but will easily execute it by the
fingers.

so far, the system is such that for most frequently used commands,
they'll have one single F key. For example: F2=Cut, F3=Copy, F4=Paste,
F5=Undo. Then, Secondary frequently used ones will have 2 keys, start
with a F key then a number. For example: F7 5 for =list-matching-lines=.
F7 6 for rect kill, F7 8 for rect yank, etc etc. Then, others will have
3 keys, for example, F7 F6 5.

principle: 1 to 3 keys. The first few are always F keys. The last is
digit or letter. (this makes it actually easier to remember than C-x, or
C-c prefixes... many of them are more prefixes. Which is prefix is not
predicable.)

Currently, the plan is that F6 to F9 are all prefixes. If we only use
these 4 F keys, in our system, we'll have a total of =4*40+4*4*40 = 800=
keys. Pretty much covers any need. (any emacs user, even advanced
expert, probably use less than 200 keys.) (GNU emacs by default has
about 650 usable keys. See: [[file:gnu_emacs_keybinding.html][A Curious
Look at Emacs's One Thousand Keybindings]].)

also note: chord keys are still necessary, because they can be held-down
to repeat the command, but a key sequence type of hotkeys can't. Any
command that makes sense to be called more than once within 1 second,
must be chord keys. For example: moving cursor, page up/down, undo,
redo, paste, =isearch-forward=, =tags-loop-continue=, ... where you can
hold it for repetition. (one single F key can also work, but there are
not enough F keys for that, and plus F keys needs reach) So, these
should be covered by Ctrl+key or Alt+key.

Conversely, i think a principle of this is that if a command never needs
to be called twice within a second, then it shall Not have one of
Ctrl+key or Alt+key. That is, the chord keys will be exclusively for
commands that may need to repeat by holding key. (many keys in emacs
default violate this. For example: =query-replace= 【Alt+%】.) This way,
we maximize the key space for any commands that can use holding down.
While, once-off call commands such as

- =query-replace=
- =goto-line=
- =list-matching-lines=
- =delete-matching-lines=
- =grep=
- =shell=
- =calc=
- =shell-command=
- =find-file=
- =dired=
- =list-buffers=
- =iswitchb-buffer=
- =list-bookmark=
- =copy-to-register=
- =keyboard-quit=
- =kmacro-start-macro=
- =describe-function=
- ...

will use the key sequence.

also, been thinking to abolish any key that needs pressing 3 keys
simultaneously. For example: emacs default regex replace, or lisp code
navigation keys.

btw, this note apply to really heavy typers. there are huge number of
misconceptions about typing. I have brushed with RSI in past years.
Never seriously enough to experience pain, but seriously enough to do
something about it. (tingling sensation, sore, etc. This time, it's
soreness in forearm) About 2 years ago, there's a incidence of tingling,
pretty bad. Blogged about that here:
[[file:vi_esc_syndrome.html][Programer Hand Health: vi Esc Key
Syndrome]], [[file:emacs_rsi_my_experiences.html][Emacs, RSI, My
Experiences]]. In summary, that problem is caused by frequent
side-to-side wrist motion. (like vi, reaching for esc) It was my bad
habit of reaching for the 1 and ` key. This has since been corrected,
but it's so interesting that today i developed other issue.

typing is such a complex and subtle thing... here's a blog i wrote that
covers some common misconceptions of typing. It's a draft version, in
bad shape... but anyway here it is
[[http://xahlee.info/kbd/programer_keyboarding_advice.html][Bad Advice
on Typing and Keyboard from Programers]]

this post is quickly written. I just want to get it out. Will edit and
refine later. I actually typed the whole thing, lol, my hand didn't
break (lol). Feel free to post your thoughts, even if disagree. Emacs
keys needs to be based on scientific basis as much as possible, and it
can be done...

PS check out the ergonomic keybinding update, give me your input.
Thanks.

** The Roadmap to Completely Replace Emacs Key System, Part 2
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2013-01-31 After 6 months, i gained more experiences and understanding.
See: [[file:emacs_keybinding_redesign_2.html][The Roadmap to Completely
Replace Emacs Key System, Part 2]]

- [[file:emacs_kb_shortcuts.html][Emacs Key Layout Diagram]]
- [[http://xahlee.info/kbd/programer_keyboarding_advice.html][Bad Advice
  on Typing and Keyboard from Programers]]
- [[http://xahlee.info/kbd/i18n_keyboard_layouts.html][International
  Keyboard Layouts]]
- [[http://xahlee.info/kbd/modernization_hotkey_notation.html][Short
  Survey of Keyboard Shortcut Notations]]
- [[http://xahlee.info/kbd/dvorak_and_all_keyboard_layouts.html][Alternative
  Keyboard Layouts]]
- [[file:emacs_kb_shortcuts_pain.html][Why Emacs Keys are Painful]]

for a programer, as much as 70% of your typing is calling editing
commands, not data entry.

that means, it's not QWERTY that wreck your hand. It's the emacs keys.

See: [[file:command-frequency.html][Emacs's Command Frequency]].

** Completely Replace Emacs Key System
   :PROPERTIES:
   :CLASS: calibre17
   :END:

This leads to a key system that completely replace emacs's system. This
i've been thinking for a few years now. But today, it seems i actually
arrived at a sensible map. Here's a summary:

• First, start with [[file:ergonomic_emacs_keybinding.html][ErgoEmacs
Keybinding]]. This will take care of some 80% of key health issues.

• The ▤Menu key will be emacs M-x. Single key. There will also be a
chord key for this, provided in the rare situations when people don't
have the ▤Menu key. Currently, it's Alt+a in ErgoEmacs keybinding. There
probably should be a single F key. (For example, Mac users). Possibly
F10.

• F2=Cut, F3=Copy, F4=Paste, F5=Undo.

• The Ctrl+x key group will be mapped starting with a function key.
Currently, the plan is F8.

• The Ctrl+c key group will be mapped starting with a function key.
Currently, the plan is F9.

That leaves with emacs Ctrl+h. But lucky for us, emacs already has F1 as
equivalent.

The above is the sketch of the design. It's pretty much all already been
implemented in ErgoEmacs keybinding. (except the C-c = F9 issue,
probably due to a emacs bug, but we'll not discuss that for now)

What's really new, is to design the actualy F key sequence for each and
every of [[file:gnu_emacs_keybinding.html][GNU Emacs's 1000+ Default
Keybinding]], based on the principles in this article and that of
ErgoEmacs. Also, the principles of this article is subject to change.
The work will needs lots stats and experimentation.

I'll probably be working toward this, slowly, in coming months or years.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_keybinding_redesign.html]]

\\
\\
| [[../index_u34.html#article_38][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u44.html>>

| [[../article_40/index_u26.html][下一项]] |
[[../index_u34.html#article_39][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_38/index_u13.html][上一项]] |

--------------

* The Roadmap to Completely Replace Emacs Key System, Part 2
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-01-31. Last updated: 2020-01-18.

This page discusses a systematic way to replace emacs's one thousand
keys.

about 6 months ago, i discovered that key sequence (for example: Alt
Space, F7 F7) is far better than key chords (For example, Ctrl+x, Alt+x
), and started to get rid of key chords in my emacs. See:
[[file:emacs_keybinding_redesign.html][The Roadmap to Completely Replace
Emacs Key System]]. Now, i report the current status and design of this
system.

now, i have a entire system to replace emacs 1000 default keybinding,
and efficient, and very satisfactory to me. [see
[[file:gnu_emacs_keybinding.html][A Curious Look at Emacs's One Thousand
Keybindings]]]

this system, makes emacs keys compatible with all other software on
{Windows, Mac, Linux}. For example: {open, close, cut, copy, undo, ...}
about 9 keys are the same. (this is already true of
[[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keybinding]])

yet, for all other thousand keys, it's much more efficient. It's even
beyond ErgoEmacs. I'm currently not sure it'll be part of future
ErgoEmacs, because it's rather radical. It's only for those who diddle
with keys a lot. (For example, you use
[[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak]] users,
heavy [[http://xahlee.info/mswin/autohotkey.html][AutoHotkey]] users, or
heavy diddler of
[[http://xahlee.info/linux/linux_install_new_windows_manager.html][Linux
Window Manager]] or other
[[http://xahlee.info/linux/linux_keyboard_tools.html][key tools]].)

this system relies on key sequences. So, all commands, is just pressing
no more than 3 keys, no key chord as part of it, not even Shift key (so,
there'd be no key involving {%, !}, for example.). Just 3 one-finger
keys. Key choices are based on command call frequency and key ease
position. The starting, activation key (what emacs calls “prefix key”),
is critical. It must be a most easy key. Example of such keys are:
CapsLock, Alt, ▤Menu, or even Space bar (that'd be best if possible).
The ▤Menu as activation key can be easily done in emacs across OSes, but
for other you'll need a tool outside of emacs.

Right now, the issue is the exact choice of keys for emacs's thousands
of commands. This i haven't got down yet, but, for myself, i've been on
this road for about half a year now, and have sketched out a map of
about 200 commands, especially pushed further by having the
[[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly Ergonomic
Keyboard]] hardware few weeks ago. It's supreme!

from 1998 to 2005, i use GNU Emacs in terminal only, all default keys.
But today, the default key i use in emacs is about maybe 6, and 4 of
them being the arrow keys, one Backspace. The other one is F1. Maybe
about 2 mode-specific C-c ones.

i think i'll talk to David Capello [[[https://davidcapello.com/]]] and
Matthew L Fidler [[[https://github.com/mattfidler]]] soon about making
this into part of ErgoEmacs, but will ask them what they think first,
have them use it and convinced it's real good, because it's rather
radical. (if we integrate it into ErgoEmacs, am pretty sure it'll be
optional, and off by default)

In summary:

- Every command is done by a sequence of 2 to 3 single keys. (except
  commands that need to be repeated, for example: =forward-word=. [see
  [[http://xahlee.info/kbd/repeatable_vs_non-repeatable_keys_commands.html][Keyboard
  Shortcut Design: Repeatable vs Non-Repeatable Commands and Keys]]])
- the starting key, activation key (what emacs calls “prefix key”) is
  critical. It must be a key that's most easy to press. Examples are:
  the thumb keys on
  [[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis]] or
  [[http://xahlee.info/kbd/Maltron_keyboard.html][Maltron]], or the
  giant Alt on
  [[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
  Natural]], or the left Space bar on
  [[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly
  Ergonomic Keyboard]]. On a
  [[http://xahlee.info/kbd/microsoft_keyboards.html][normal PC
  keyboard]] , the CapsLock, or ❖Window, ▤Menu. Ideally, we should have
  2 activation keys, one situated for left hand, one for right hand.
  There'll also be a fall back key, currently in my setting that's F6.
- The key choices must be based on key positions on keyboard, not the
  letter. So, the positions don't change with key layout (same in
  ErgoEmacs keybinding).
- The second key (which is the key after the activation key), should be
  a key hit by 2nd and 3rd finger, on home row or the row above it. In
  QWERTY notation, that's r e d f for left hand, and u i j k for right
  hand. For key sequence that's more than 2 keys, the second key should
  be one of these.
- The 8 or so universally standard keys, will still be there, as in
  ErgoEmacs. For example: open, close, save, copy, cut, undo. (this
  means that any person can use emacs without knowing anything about the
  new system of keys. While those who dig further, can benefit in this
  system)
- Existing [[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keys]] will
  not change. But if we want to be progressive, a few can be removed,
  because they are not for repeating commands, while the new spots can
  be mapped to useful commands that need repeating (For example,
  =forward-sexp=).

here's a sample of implementation, my current setup, to illustrate the
idea. The choice of keys is actually in flux, and i have yet to exam the
default thousand keys and think what key each of them should be. For my
own emacs use daily, i've been using this for about half a year now, and
tweaking keys daily.

#+BEGIN_SRC emacs-lisp
    ;; -*- coding: utf-8 -*-
    ;; 2013-01-31
    ;; generic

    (define-key key-translation-map (kbd "<apps>") (kbd "<menu>"))
    (define-key key-translation-map (kbd "<f6>") (kbd "<menu>")) ; F6 is fall back

    (define-prefix-command 'xah-keymap)
    (global-set-key (kbd "<menu>") xah-keymap)

    ;; Truly Ergonomic keyboard + Dvorak layout
    ;; \` 1234 5 6 7890 []
    ;; \z ',.p y f gcrl /=
    ;;    aoeu i d htns
    ;;    ;qjk x b mwv-

    ;; prefix keys (on Dvorak) should be
    ;; .p gc
    ;; eu ht

    ;; u is for unicode insert
    ;; e is mode-specific
    ;; h is help-map
    ;; t is generic dump space
    ;; x is for ctl-x-map

    ;; add find-file
    ;; keyboard-quit

    ;; stars indicate frequency of use
    ;; ★★★ every minute
    ;; ★★ every hour
    ;; ★ few times a day

    (global-set-key (kbd "<menu> <return>") 'smex)
    (global-set-key (kbd "<menu> <delete>") 'delete-current-file)
    (global-set-key (kbd "<menu> <f2>") 'ergoemacs-cut-all)
    (global-set-key (kbd "<menu> <f3>") 'ergoemacs-copy-all)

    (global-set-key (kbd "<menu> '") 'nil)
    (global-set-key (kbd "<menu> ,") 'shell-command-on-region)
    (global-set-key (kbd "<menu> -") 'xc-comment-smart) ; ★★★ , comment-dwim
    (global-set-key (kbd "<menu> .") 'shell-command)   ; ★★★

    (global-set-key (kbd "<menu> /") 'nil)
    (global-set-key (kbd "<menu> 0") 'delete-window)
    (global-set-key (kbd "<menu> 1") 'copy-to-register-1)
    (global-set-key (kbd "<menu> 2") 'paste-from-register-1)
    (global-set-key (kbd "<menu> 3") 'delete-other-windows) ; ★★★
    (global-set-key (kbd "<menu> 4") 'split-window-vertically) ; ★★★
    (global-set-key (kbd "<menu> 5") 'nil) ; ★★★
    (global-set-key (kbd "<menu> 6") 'xah-run-current-file) ;; immediate, but dangerous eval-buffer
    (global-set-key (kbd "<menu> 7") 'xah-open-file-at-cursor) ; ★★★ find-file-at-point
    (global-set-key (kbd "<menu> 8") 'dired-jump)              ; ★★★
    (global-set-key (kbd "<menu> 9") 'ispell-word) ; ★★★
    (global-set-key (kbd "<menu> ;") 'nil)
    (global-set-key (kbd "<menu> =") 'nil)
    (global-set-key (kbd "<menu> SPC") 'set-mark-command) ; ★★★
    (global-set-key (kbd "<menu> [") 'remove-square-brackets)
    (global-set-key (kbd "<menu> \\") 'escape-quotes)
    (global-set-key (kbd "<menu> ]") 'indent-region)
    (global-set-key (kbd "<menu> `") 'make-backup)
    (global-set-key (kbd "<menu> a") 'mark-whole-buffer) ; ★★
    (global-set-key (kbd "<menu> b") 'flyspell-buffer) ; ★★
    (global-set-key (kbd "<menu> c") 'nil)
    (global-set-key (kbd "<menu> d") 'ergoemacs-open-in-desktop)
    (global-set-key (kbd "<menu> e") 'nil)  ; mode specific
    (global-set-key (kbd "<menu> f") 'copy-file-path)

    (global-set-key (kbd "<menu> g 0") ")")
    (global-set-key (kbd "<menu> g 1") "!")
    (global-set-key (kbd "<menu> g 2") "@")
    (global-set-key (kbd "<menu> g 3") "#")
    (global-set-key (kbd "<menu> g 4") "$")
    (global-set-key (kbd "<menu> g 5") "%")
    (global-set-key (kbd "<menu> g 6") "^")
    (global-set-key (kbd "<menu> g 7") "&")
    (global-set-key (kbd "<menu> g 8") "*")
    (global-set-key (kbd "<menu> g 9") "(")
    (global-set-key (kbd "<menu> g a") "A")
    (global-set-key (kbd "<menu> g b") "B")
    (global-set-key (kbd "<menu> g c") "C")
    (global-set-key (kbd "<menu> g d") "D")
    (global-set-key (kbd "<menu> g e") "E")
    (global-set-key (kbd "<menu> g f") "F")
    (global-set-key (kbd "<menu> g g") "G")
    (global-set-key (kbd "<menu> g h") "H")
    (global-set-key (kbd "<menu> g i") "I")
    (global-set-key (kbd "<menu> g j") "J")
    (global-set-key (kbd "<menu> g k") "K")
    (global-set-key (kbd "<menu> g l") "L")
    (global-set-key (kbd "<menu> g m") "M")
    (global-set-key (kbd "<menu> g n") "N")
    (global-set-key (kbd "<menu> g o") "O")
    (global-set-key (kbd "<menu> g p") "P")
    (global-set-key (kbd "<menu> g q") "Q")
    (global-set-key (kbd "<menu> g r") "R")
    (global-set-key (kbd "<menu> g s") "S")
    (global-set-key (kbd "<menu> g t") "T")
    (global-set-key (kbd "<menu> g u") "U")
    (global-set-key (kbd "<menu> g v") "V")
    (global-set-key (kbd "<menu> g w") "W")
    (global-set-key (kbd "<menu> g x") "X")
    (global-set-key (kbd "<menu> g y") "Y")
    (global-set-key (kbd "<menu> g z") "Z")

    (global-set-key (kbd "<menu> h") help-map) ; ★★★
    (global-set-key (kbd "<menu> i d") 'insert-date)
    (global-set-key (kbd "<menu> i r h") 'insert-random-hex)
    (global-set-key (kbd "<menu> i r n") 'insert-random-number)
    (global-set-key (kbd "<menu> i r s") 'insert-random-string)
    (global-set-key (kbd "<menu> i r u") 'insert-random-uuid)
    (global-set-key (kbd "<menu> i t") 'insert-date-time)
    (global-set-key (kbd "<menu> j") 'nil)
    (global-set-key (kbd "<menu> k") 'nil)
    (global-set-key (kbd "<menu> l") 'recenter-top-bottom)
    (global-set-key (kbd "<menu> m c") 'calc)
    (global-set-key (kbd "<menu> m e") 'emacs-lisp-mode)
    (global-set-key (kbd "<menu> m h") 'xah-html-mode)
    (global-set-key (kbd "<menu> m l") 'linum-mode)
    (global-set-key (kbd "<menu> m s") 'shell)
    (global-set-key (kbd "<menu> m t") 'text-mode)
    (global-set-key (kbd "<menu> m v") 'visual-line-mode)
    (global-set-key (kbd "<menu> m w") 'whitespace-mode)
    (global-set-key (kbd "<menu> n") 'ergoemacs-new-empty-buffer) ; ★★★
    (global-set-key (kbd "<menu> o SPC") 'xah-open-file-fast)
    (global-set-key (kbd "<menu> o b") 'ibuffer)
    (global-set-key (kbd "<menu> o f") 'ido-find-file)
    (global-set-key (kbd "<menu> o l") 'bookmark-bmenu-list)
    (global-set-key (kbd "<menu> o r") 'recentf-open-files) ; ★★★
    (global-set-key (kbd "<menu> o s") 'ido-switch-buffer)  ; ★★★
    (global-set-key (kbd "<menu> p") 'nil)
    (global-set-key (kbd "<menu> q") 'quoted-insert) ; ★★★
    (global-set-key (kbd "<menu> r '") 'replace-straight-quotes)
    (global-set-key (kbd "<menu> r ,") 'xah-remove-punctuation-trailing-redundant-space)
    (global-set-key (kbd "<menu> r .") 'xah-convert-english-chinese-punctuation)
    (global-set-key (kbd "<menu> r d") 'delete-matching-lines) ; ★★
    (global-set-key (kbd "<menu> r e") 'query-replace) ; ★★★
    (global-set-key (kbd "<menu> r f") 'xah-find-text)
    (global-set-key (kbd "<menu> r l") 'list-matching-lines) ; ★★★
    (global-set-key (kbd "<menu> r p") 'convert-ideographic/ascii-space)
    (global-set-key (kbd "<menu> r r") 'xah-find-replace-text)
    (global-set-key (kbd "<menu> r u") 'query-replace-regexp)
    (global-set-key (kbd "<menu> s") 'save-buffer) ; ★★★
    (global-set-key (kbd "<menu> t c") 'xah-cite)
    (global-set-key (kbd "<menu> t f") 'xah-open-file-from-clipboard)
    (global-set-key (kbd "<menu> t l") 'xah-clean-whitespace)
    (global-set-key (kbd "<menu> t n") 'make-frame-command)
    (global-set-key (kbd "<menu> t o") 'ergoemacs-open-last-closed)
    (global-set-key (kbd "<menu> t r") 'repeat-complex-command)
    (global-set-key (kbd "<menu> t s") 'title-case-string-region-or-line)
    (global-set-key (kbd "<menu> t w") 'delete-trailing-whitespace)

    (global-set-key (kbd "<menu> u -") "—") ; EM DASH
    (global-set-key (kbd "<menu> u .") "…") ; HORIZONTAL ELLIPSIS
    (global-set-key (kbd "<menu> u 4") "◆") ; black diamond
    (global-set-key (kbd "<menu> u 7") "＆") ; full width ampersand
    (global-set-key (kbd "<menu> u 8") "•") ; bullet
    (global-set-key (kbd "<menu> u <S-right>") "⇒")
    (global-set-key (kbd "<menu> u <right>") "→")
    (global-set-key (kbd "<menu> u B") 'insert-pair-white-lenticular-bracket〖〗)
    (global-set-key (kbd "<menu> u M") 'insert-pair-white-corner-bracket『』)
    (global-set-key (kbd "<menu> u W") 'insert-pair-double-angle-bracket《》)
    (global-set-key (kbd "<menu> u \\") "、") ; IDEOGRAPHIC COMMA
    (global-set-key (kbd "<menu> u b") 'insert-pair-black-lenticular-bracket【】)
    (global-set-key (kbd "<menu> u c") "=") ; equal
    (global-set-key (kbd "<menu> u f") 'insert-pair-single-straight-quote)
    (global-set-key (kbd "<menu> u g") 'insert-pair-double-straight-quote)
    (global-set-key (kbd "<menu> u h") 'insert-pair-brace)              ;{}
    (global-set-key (kbd "<menu> u i") 'insert-pair-single-curly-quote‘’)
    (global-set-key (kbd "<menu> u m") 'insert-pair-corner-bracket「」)
    (global-set-key (kbd "<menu> u n") 'insert-pair-bracket)            ;[]
    (global-set-key (kbd "<menu> u p") 'insert-pair-double-angle-quote«»)
    (global-set-key (kbd "<menu> u r") "+") ; plus
    (global-set-key (kbd "<menu> u t") 'insert-pair-paren)              ;()
    (global-set-key (kbd "<menu> u u") 'insert-pair-double-curly-quote“”)
    (global-set-key (kbd "<menu> u w") 'insert-pair-angle-bracket〈〉)
    (global-set-key (kbd "<menu> u x") 'insert-pair-tortoise-shell-bracket〔〕)
    (global-set-key (kbd "<menu> u y") 'insert-pair-single-angle-quote‹›)

    (global-set-key (kbd "<menu> v") 'nil)
    (global-set-key (kbd "<menu> w") 'ergoemacs-close-current-buffer) ; ★★★
    (global-set-key (kbd "<menu> x") ctl-x-map) ; ★★★
    (global-set-key (kbd "<menu> y") 'universal-argument) ; ★★
    (global-set-key (kbd "<menu> z") 'nil)

    (define-key help-map (kbd "c") 'describe-char)
    (define-key help-map (kbd "5") 'man)
    (define-key help-map (kbd "7") 'xah-lookup-google)
    (define-key help-map (kbd "8") 'xah-lookup-wikipedia)
    (define-key help-map (kbd "9") 'xah-lookup-word-definition)
    (define-key help-map (kbd "`") 'elisp-index-search)
    (define-key help-map (kbd "m") 'ergoemacs-describe-major-mode)
    (define-key help-map (kbd "o") 'nil)  ; ergoemacs-where-is-old-binding
    (define-key help-map (kbd "h") 'nil) ; view-hello-file


    ;; example of mode-specific setting

    (defun xah-html-mode-keys ()
      "Modify keymaps used by `html-mode'."
      ;; .p gc
      ;; eu ht

      (local-set-key (kbd "<menu> e .") 'xah-browse-url-of-buffer)
      (local-set-key (kbd "<menu> e 0") 'xah-html-remove-html-tags)
      (local-set-key (kbd "<menu> e 5") 'mark-unicode)
      (local-set-key (kbd "<menu> e 7") 'htmlize-or-dehtmlize-pre-block)
      (local-set-key (kbd "<menu> e 8") 'get-pre-block-make-new-file)
      (local-set-key (kbd "<menu> e <delete>") 'sgml-delete-tag)
      (local-set-key (kbd "<menu> e <left>") 'sgml-skip-tag-backward)
      (local-set-key (kbd "<menu> e <right>") 'sgml-skip-tag-forward)
      (local-set-key (kbd "<menu> e a") 'xwe-annotate)
      (local-set-key (kbd "<menu> e b") 'make-blogger-entry)
      (local-set-key (kbd "<menu> e c") 'xah-html-make-citation)
      (local-set-key (kbd "<menu> e d") 'insert-date-tag)
      (local-set-key (kbd "<menu> e e") 'xah-html-wrap-html-tag)
      (local-set-key (kbd "<menu> e f") 'xah-copy-url-current-file)
      (local-set-key (kbd "<menu> e k") 'xah-html-htmlize-keyboard-shortcut-notation)
      (local-set-key (kbd "<menu> e l 6") 'xah-html-source-url-linkify)
      (local-set-key (kbd "<menu> e l c") 'xwe-chinese-linkify)
      (local-set-key (kbd "<menu> e l d") 'perldoc-ref-linkify)
      (local-set-key (kbd "<menu> e l e") 'emacs-ref-linkify)
      (local-set-key (kbd "<menu> e l f") 'full-size-img-linkify)
      (local-set-key (kbd "<menu> e l i") 'image-linkify)
      (local-set-key (kbd "<menu> e l j") 'image-file-to-html-figure-tag)
      (local-set-key (kbd "<menu> e l l") 'xah-html-lines-to-list)
      (local-set-key (kbd "<menu> e l p") 'php-ref-linkify)
      (local-set-key (kbd "<menu> e l t") 'xwe-word-etymology-linkify)
      (local-set-key (kbd "<menu> e l u") 'xah-html-wrap-url)
      (local-set-key (kbd "<menu> e l w") 'xah-html-wikipedia-linkify)
      (local-set-key (kbd "<menu> e l z") 'amazon-linkify)
      (local-set-key (kbd "<menu> e m a") 'xah-make-atom-entry)
      (local-set-key (kbd "<menu> e m l") 'xah-add-to-related-links)
      (local-set-key (kbd "<menu> e p") 'xah-html-wrap-p-tag)
      (local-set-key (kbd "<menu> e r ,") 'xah-html-escape-char-to-unicode)
      (local-set-key (kbd "<menu> e r .") 'xah-html-escape-char-to-entity)
      (local-set-key (kbd "<menu> e r 3") 'xah-html-update-title)
      (local-set-key (kbd "<menu> e r 4") 'xahsite-update-article-timestamp)
      (local-set-key (kbd "<menu> e r c") 'code-bracket-to-html-tag)
      (local-set-key (kbd "<menu> e r e") 'curly-quotes-to-emacs-function-tag)
      (local-set-key (kbd "<menu> e r k") 'emacs-to-windows-kbd-notation)
      (local-set-key (kbd "<menu> e r m") 'xah-html-lines-to-table)
      (local-set-key (kbd "<menu> e r t") 'title-bracket-to-html-tag)
      (local-set-key (kbd "<menu> e t c") 'insert-random-color-hsl)
      (local-set-key (kbd "<menu> e t r") 'xah-html-rename-html-inline-image)
      (local-set-key (kbd "<menu> e t u") 'xah-html-extract-url)
      (local-set-key (kbd "<menu> e u") 'xah-all-linkify)

      )
    (add-hook 'html-mode-hook 'xah-html-mode-keys)
    (add-hook 'xah-html-mode-hook 'xah-html-mode-keys)
#+END_SRC

** Update
   :PROPERTIES:
   :CLASS: calibre17
   :END:

for 2014-10 update, see [[file:emacs_keybinding_redesign_2.5.html][The
Roadmap to Completely Replace Emacs Key System, Part 2.5]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

- [[file:emacs_keybinding_redesign_2.5.html][The Roadmap to Completely
  Replace Emacs Key System, Part 2.5]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_keybinding_redesign_2.html]]

\\
\\
| [[../index_u34.html#article_39][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u26.html>>

| [[../article_41/index_u16.html][下一项]] |
[[../index_u34.html#article_40][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_39/index_u44.html][上一项]] |

--------------

* The Roadmap to Completely Replace Emacs Key System, Part 2.5
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-01-31. Last updated: 2014-10-08.

a few months ago, i started to design a keybinding set that completely
replaces the entire emacs 1k+ keybinding.

i've been using it for a few months now. I want to publish it nicely,
but just haven't got to it.

so, am just pushing it out as its current state, here:
[[https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_keybinding.el]]

again, i'm pushing out in its current chaotic state, hoping some
keyboard hackers will pick it up, in case i never do.

to use it, you need:

- is a emacs lisp hacker.
- is a keyboard fanatic.
- it is currently for dvorak. so, if you are not using dvorak, you'll
  need to remap yourself.
- the code is not nicely packaged up into a lunchbox. (but, it's not
  complicated neither. it's very simple)

here's a bit detail to help along:

there are 2 types of command: fast-repeat command and none-fast-repeat
command.

the fast-repeat commands are moving cursor, delete characters, etc,
where it makes sense to hold down a key and have it repeat. Typically,
in emacs, there are 20 to 30 fast-repeat commands.

vast majority of emacs commands are non-fast-repeat. e.g. open file,
switch buffer, dired, shell, calc, ...

fast-repeat commands you need a single key or key chord.

fast-repeat commands are also the most frequently used commands, every
second or few seconds.

[[http://ergoemacs.github.io/][ergoemacs-mode]], is a package that
solved the fast-repeat commands. (ergoemacs-mode also has a system for
non-fast-repeat commands, but isn't designed from the ground up. It's
based on converting emacs C-x to non-chord key sequences.)

[[../misc/ergoemacs_vi_mode.html][xah fly keys]] is my new package that
deal with fast-repeat commands. The key choices are mostly compatible
with ergoemacs-mode. The major difference is that this is a modal input
system, like vi.

that leaves the non-fast-repeat commands, which is basically all
commands of emacs C-x keys.

so, the news is, i've now designed a set for this. The key map choice is
based on frequency of the command and ease of key position.

If you find a GNU emacs command that by default has a key but is not
covered here, it's a bug. (actually, it's 98% complete. there are about
100 commands with keys that is rarely used. (you can see them near the
end of the file, as commented out lines. i wasn't sure what/where to do
with them yet))

this is new because it's the first time i completely designed entire
emacs keys for public use. Before, i was simply using my own keys
without regard to other people's use.

for stories leading to this, see

- [[http://xahlee.info/kbd/banish_key_chords.html][Ban Key Chords]]
- [[file:emacs_keybinding_redesign.html][The Roadmap to Completely
  Replace Emacs Key System, Part 1]]
- [[file:emacs_keybinding_redesign_2.html][The Roadmap to Completely
  Replace Emacs Key System, Part 2]]

** Xah Fly Keys: More Efficient Than Vim
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2014-10-08 addendum: the keys are merged into
[[../misc/ergoemacs_vi_mode.html][xah fly keys]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_keybinding_redesign_2.5.html]]

\\
\\
| [[../index_u34.html#article_40][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u16.html>>

| [[../article_42/index_u7.html][下一项]] |
[[../index_u34.html#article_41][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_40/index_u26.html][上一项]] |

--------------

* Emacs Keybinding Design: 【menu e】 vs 【Tab】 Keys
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-09-02. Last updated: 2013-10-15.

a new chapter in my keybinding excursion. (for keyboard freaks only)

remember there's the concept of repeatable vs non-repeatable command?
[see
[[http://xahlee.info/kbd/repeatable_vs_non-repeatable_keys_commands.html][Keybinding
Design, Fast-Repeat Commands]]]

i use about 20 repeatable commands, and i use
[[https://ergoemacs.github.io/][ergoemacs-mode]] binding for them. The
rest are non-repeatable, and there are about 160 such commands i use,
with keys defined in my
[[https://github.com/xahlee/xah_emacs_init][emacs init file]].

*** quick fact of the day
    :PROPERTIES:
    :CLASS: calibre14
    :END:

on average, a programer using emacs, you use about 20 repeatable
commands, and about 150 none-repeatable commands, for 99% commands calls
you do daily. (this is my estimate)

for non-repeatable commands, they use a key sequence, usually about 2 or
3 keys total. I use
[[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly Ergonomic
Keyboard]], and set the left space bar to ▤Menu key as my starting key
for non-repeatable commands.

A subset of non-repeatable are mode-specific keys (such as GNU Emacs's
C-c). (*Mode specific commands are almost always non-repeatable*) I give
them this starting key ▤Menu e ... (with
[[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak Layout]])
Mode-specific command's keys usually have a total of 3 or 4 keys.

Here's my new discovery: i found that am slightly annoyed when using
mode-specific keys, because 3 or 4 keys are too many! So, now my
mode-specific keys starts with Tab instead of ▤Menu e. One key
reduction.

The Tab itself is often used, bound to completion. For that, i made it
Tab Tab. Overall, i get key reduction.

Note that Tab on the Truly Ergonomic Keyboard is a big easy key pressed
by index finger. For normal keyboard, it's pinky, and you probably don't
want to do it. You really should get a better keyboard. [see
[[file:emacs_best_keyboard.html][Best Keyboards for Emacs]]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_keybinding_design_menu_e_tab_keys.html]]

\\
\\
| [[../index_u34.html#article_41][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u7.html>>

| [[../article_43/index_u21.html][下一项]] |
[[../index_u34.html#article_42][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_41/index_u16.html][上一项]] |

--------------

* Keybinding Science: Emacs C-u vs Prompt
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2015-02-05

There's something interesting on keybinding science of emacs C-u system
and prompt system. In summary, a combination of C-u with prompt is
better than C-u itself. Following is explanation.

Emacs has a system to feed (mostly) numeric args to function when the
function is called interactively. That is, you Alt+x
=universal-argument= 【Ctrl+u】 first, then optionally type some
numbers, before you call the command. (for elisp detail, see:
[[file:elisp_universal_argument.html][Elisp: Get universal-argument]])

This system, can be used as part of the key system. That is, any
keybinding of a command, can be preceded by Ctrl+u n to do variant of
the command.

emacs doesn't explore this much, only for commands that make sense of
repeating n times. Commands that does not make sense to repeat, usually
does not support this.

A systematic use, is that every command will have C-u variation in a
consistent way. For example, Ctrl+u will always do reverse (as in
{undo/redo, fill/unfill, encode/decode, ...}), and Ctrl+u n will do
variations. We will need to survey at all commands to categorize their
behavior characteristics they have in common, in order to design this
system. (For example, what percentage command make sense for repeating n
times, what percentage has a logical reverse, what are the command
variant behaviors?)

A alternative similar in comparison to the C-u system, is actually do
prompt instead. When a command that does prompt, the prompt can be made
to accept unique keys such as digits, then this can be thought of as a
key system. For example, after you call a command (say, by pressing F9),
you can type 3 then Enter. (For a example, see the command
xah-interactive-abbrev at [[file:emacs_interactive_abbrev.html][Emacs:
Interactive Abbrev]])

Prompting is usually annoying, but this can be solved by not prompting
unless Ctrl+u is pressed first.

When considered like this, then, this is the equivalent to the C-u
system. Which is better?

The problem with just the C-u system, is that often you forgot what the
different numbers do for the command. You need to =describe-function= or
=describe-key= first to look up the doc. With prompt, it says right
there. With prompt system, you don't have to lookup the doc first, as
the prompt guides you. (and you don't have to spend time to read the
prompt, when you memorized the key by muscle memory you just directly
type keys)

The disadvantage with prompt system is that you'll need one extra key
Enter at the end.

Overall, i discovered, the prompt system is better. The looking up the
doc first with C-u system is too costy.

So, for example, for the command [[file:elisp_twitterfy.html][Elisp:
Twitterfy]], i need a variant behavior to untwitterfy.

this can be done with a new command, which would need a new keybinding.
Taking another precious key spot is not so good. Or, it can be with a
C-u system. For example, Ctrl+u and Ctrl+u 1 will do untwitterfy, while
all other numbers will do twitterfy.

But i've realized, best is to do prompt. So, when called with C-u first,
it'll prompt using ido with 2 choices like this: {twitterfy,
untwitterfy}. Then user can type 1 more key (t or u), then press Enter.
The prompt can be made with numbers, such as {“1 twitterfy”, “2
untwitterfy”}, or more options.

Another command of this example is:
[[file:elisp_convert_chinese_punctuation.html][Emacs: Convert
Full-Width/Half-Width Punctuations]]

- [[file:science_of_command_efficiency.html][emacs and vi: Science of
  Command Efficiency]]
- [[../misc/on_vi_keybinding.html][on vi Keybinding vs Emacs
  Keybinding]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_key_science_C-u_vs_prompt.html]]

\\
\\
| [[../index_u34.html#article_42][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u21.html>>

| [[../article_44/index_u17.html][下一项]] |
[[../index_u34.html#article_43][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_42/index_u7.html][上一项]] |

--------------

* A Curious Look at Emacs's One Thousand Keybindings
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2011-03-10. Last updated: 2019-01-08.

There are about 1353 keybinding in emacs by default. In this page, let's
look at what they are.

This is a curiosity take. Alone the way, you'll learn quite a bit about
emacs history, and computing history.

If you are looking for a practical list of emacs keys, see
[[file:emacs_keys_basics.html][Emacs Keys Basics]]

** List All Emacs Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

(Alt+x =describe-bindings= to see the list on your machine, or, see this
file: [[file:gnu_emacs_keybinding.txt]].)

[[file:feed_0/article_24/images/img1_u9.jpg]]

LMI Lambda keyboard [image source
[[https://deskthority.net/keyboards-f2/cadr-lisp-machine-keyboard-the-space-cadet-keyboard-t19373.html]]
]

[see [[http://xahlee.info/kbd/lisp_keyboards.html][Lisp Machine
Keyboards]]]

** Help, F1, 【C-h】
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 48 keys with =<help>= notation.
([[file:gnu_emacs_keybinding_help.txt]]) Example:

#+BEGIN_SRC emacs-lisp
    <help>       help-command
    <help> C-a   about-emacs
    <help> C-c   describe-copying
    <help> C-d   view-emacs-debugging
    <help> C-e   view-external-packages
    <help> C-f   view-emacs-FAQ
    …
    <help> i     info
    <help> k     describe-key
    <help> l     view-lossage
    <help> m     describe-mode
#+END_SRC

[[file:feed_0/article_43/images/img1_u8.jpg]]

Symbolics's Lisp Machine keyboard PN 365407 Rev C. (Photo by Joey
Devilla
[+http://www.globalnerdy.com/2009/02/05/hacklabtos-lisp-machine-keyboard/+].
Used with permission.)

The Help is a key on lisp keyboard, but also on many other keyboards,
including [[http://xahlee.info/kbd/sun_microsystems_keyboard.html][Sun
Microsystem's Keyboard]], and Apple keyboard. [see
[[http://xahlee.info/kbd/keyboards_Apple.html][Apple Keyboards ⌨]]] See:
[[http://www.pfu.fujitsu.com/hhkeyboard/kb_collection/][Source
www.pfu.fujitsu.com]].

Then there are 48 keys with =<f1>= notation.
([[file:gnu_emacs_keybinding_f1.txt]]) Example:

#+BEGIN_SRC emacs-lisp
    <f1>       help-command
    <f1> C-a   about-emacs
    <f1> C-c   describe-copying
    <f1> C-d   view-emacs-debugging
    <f1> C-e   view-external-packages
    <f1> C-f   view-emacs-FAQ
    …
    <f1> i     info
    <f1> k     describe-key
    <f1> l     view-lossage
    <f1> m     describe-mode
#+END_SRC

There are also 48 keys with =C-h= notation.
([[file:gnu_emacs_keybinding_C-h.txt]])

#+BEGIN_SRC emacs-lisp
    C-h       help-command
    C-h C-a   about-emacs
    C-h C-c   describe-copying
    C-h C-d   view-emacs-debugging
    C-h C-e   view-external-packages
    C-h C-f   view-emacs-FAQ
    …
    C-h i     info
    C-h k     describe-key
    C-h l     view-lossage
    C-h m     describe-mode
#+END_SRC

All these are equivalent maps. (That is: F1 = Help = Ctrl+h) It's
interesting to note that these are not defined to use the same map.
Instead, each binding is defined explicitly in each set.

** 【C-x 8】 for non-ASCII Character Input
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 138 bindings for =C-x 8=.
([[file:gnu_emacs_keybinding_C-x_8.txt]]) Sample:

#+BEGIN_SRC emacs-lisp
    C-x 8 <   «
    C-x 8 =   ¯
    C-x 8 >   »
    C-x 8 ?   ¿
    C-x 8 C   ©
    C-x 8 L   £
    C-x 8 P   ¶
    C-x 8 R   ®
    C-x 8 S   §
    C-x 8 Y   ¥
    C-x 8 ^   Prefix Command
#+END_SRC

These are for inserting special non-ASCII characters. [see
[[file:emacs_n_unicode.html][Emacs: Unicode Tutorial]]]

** 【C-x】 Prefix
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 204 binding with the =C-x= notation.
([[file:gnu_emacs_keybinding_C-x.txt]]) Example:

#+BEGIN_SRC emacs-lisp
    C-x C-@   pop-global-mark
    C-x C-b   list-buffers
    C-x C-c   save-buffers-kill-terminal
    C-x C-d   list-directory
    C-x C-e   eval-last-sexp
    C-x C-f   find-file
    C-x TAB   indent-rigidly
    …
    C-x $   set-selective-display
    C-x '   expand-abbrev
    C-x (   kmacro-start-macro
    C-x )   kmacro-end-macro
    C-x *   calc-dispatch
    C-x +   balance-windows
    C-x -   shrink-window-if-larger-than-buffer
    C-x .   set-fill-prefix
    C-x 0   delete-window
    C-x 1   delete-other-windows
    C-x 2   split-window-vertically
    …
    C-x a   Prefix Command
    C-x b   switch-to-buffer
    C-x d   dired
    C-x e   kmacro-end-and-call-macro
    C-x f   set-fill-column
    C-x h   mark-whole-buffer
    …
    C-x <C-left>  previous-buffer
    C-x <C-right> next-buffer
    C-x <left>    previous-buffer
    C-x <right>   next-buffer
    C-x C-k C-a   kmacro-add-counter
    C-x C-k C-c   kmacro-set-counter
    C-x C-k C-d   kmacro-delete-ring-head
    C-x C-k C-e   kmacro-edit-macro-repeat
    C-x C-k C-f   kmacro-set-format
    …
#+END_SRC

The Ctrl+x ... is a generic prefix for frequently used commands that are
useful globally. This one is most familiar to emacs users. Note: another
combo familiar to most emacs users is Ctrl+c .... It is for
mode-specific commands, not shown on this page because you need to be in
a specific major mode.

** “view-mode” Minor Mode Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 38 keys for =view-mode=.
([[file:gnu_emacs_keybinding_view-mode.txt]]) They are almost all single
symbol keys. Example:

#+BEGIN_SRC emacs-lisp
    0 .. 9   digit-argument
    <     beginning-of-buffer
    =     what-line
    >     end-of-buffer
    ?     describe-mode
    @     View-back-to-mark
    C     View-kill-and-leave
    E     View-exit-and-edit
    F     View-revert-buffer-scroll-page-forward
    H     describe-mode
    Q     View-quit-all
#+END_SRC

** Ctrl+Meta Bindings (C-M)
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:feed_0/article_8/images/img1_u12.jpg]]

Symbolics's Lisp Machine keyboard PN 365407 Rev C. (Photo by Joey
Devilla
[+http://www.globalnerdy.com/2009/02/05/hacklabtos-lisp-machine-keyboard/+].
Used with permission.)

There are 36 bindings with notation =C-M-=.
([[file:gnu_emacs_keybinding_C-M-.txt]]) Example:

#+BEGIN_SRC emacs-lisp
    <C-M-down>   down-list
    <C-M-end>    end-of-defun
    <C-M-home>   beginning-of-defun
    <C-M-left>   backward-sexp
    <C-M-right>  forward-sexp
    <C-M-up>     backward-up-list
    C-M-@     mark-sexp
    C-M-a     beginning-of-defun
    C-M-b     backward-sexp
    C-M-c     exit-recursive-edit
    C-M-d     down-list
    C-M-j     indent-new-comment-line
    C-M-k     kill-sexp
#+END_SRC

These are designed to navigate/edit lisp code. [see
[[file:emacs_editing_lisp.html][Emacs: How to Edit Lisp Code]]]

Note the =M-= is the syntax for Meta key. It is a key on Lisp keyboards.
Today, by default, GNU Emacs set Alt to type Meta.

** Ctrl, Meta, Esc keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- 105 of them are Ctrl keys starting with the notation =C-= (not
  counting =C-h=, =C-x=). ([[file:gnu_emacs_keybinding_C-.txt]])
- 98 of them are Meta keys starting with the notation =M-=.
  ([[file:gnu_emacs_keybinding_M-.txt]])
- 20 of them are Escape keys with the notation =ESC=.
  ([[file:gnu_emacs_keybinding_esc.txt]])

Some of the Ctrl definitions is Ctrl with mouse button.

** Alt Key
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 137 bindings starting with the notation =A-=.
([[file:gnu_emacs_keybinding_A-.txt]]) Here's a sample:

#+BEGIN_SRC emacs-lisp
    A-<             «
    A-=             ¯
    A->             »
    A-?             ¿
    A-C             ©
    A-L             £
    A-P             ¶
    A-R             ®
    A-S             §
    A-Y             ¥
    A-^		Prefix Command
#+END_SRC

These are keybindings for the Alt key. This keybinding set is identical
to Ctrl+x 8 ([[file:gnu_emacs_keybinding_C-x_8.txt]]), except there's no
Alt Enter corresponding to Ctrl+x 8 Enter (which is bind to
=ucs-insert=, which starts the Unicode char insection mode.).

Note that GNU Emacs set Alt to type Meta by default, so these =A-=
bindings have no effect. However, you can still type Alt by Ctrl+x @ a.
([[../emacs_manual/emacs/Modifier-Keys.html][(info "(emacs) Modifier
Keys")]]) Or, on Windows, set =(setq w32-alt-is-meta nil)=.
([[../emacs_manual/emacs/Windows-Keyboard.html][(info "(emacs) Windows
Keyboard")]])

#+BEGIN_QUOTE
  Alt Mode is the SAIL (Stanford AI Lab) printing character that looks
  like a tall thin concave hollow diamond. On ASCII keyboards the Escape
  key maps to Alt Mode.

  [from Devon Sean McCullough [[http://people.csail.mit.edu/devon/]] ]
#+END_QUOTE

[see [[http://xahlee.info/kbd/sail_keyboard.html][SAIL Keyboard]]]

[[file:feed_0/article_43/images/img2.jpg]]

The Meta, Compose, AltGraph keys, on
[[http://xahlee.info/kbd/sun_microsystems_keyboard.html][Sun Microsystem
Type 6 Keyboard]]

[see
[[http://xahlee.info/kbd/keyboard_whats_alt_graph__compose__dead_key.html][Keyboard:
What's the Difference Between Alt Graph Key, Compose Key, Dead Key?]]]

** Dead Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[file:feed_0/article_43/images/img3_u3.jpg]]

Microsoft Natural Ergonomic Keyboard 4000, French version. The ^ and ¨
(to the right of P) are dead keys. (photo by [Alexander Sidorov
+https://plus.google.com/117062222142261173845/posts+].)

There are 226 bindings with the notation of =dead-= in it.
([[file:gnu_emacs_keybinding_dead.txt]]) Example:

#+BEGIN_SRC emacs-lisp
    <S-dead-acute>        Prefix Command
    <dead-acute>          Prefix Command
    <S-dead-tilde>        A Ã
    <S-dead-asciitilde>   A Ã
    <dead-tilde>          A Ã
    <S-dead-grave>        A À
    <dead-grave>          A À
    <S-dead-circumflex>   1 ¹
    <S-dead-circum>       1 ¹
    <S-dead-asciicircum>  1 ¹
    <dead-circumflex>     1 ¹
    <dead-circum>         1 ¹
    <dead-asciicircum>    1 ¹
    <S-dead-acute>        A Á
    <dead-acute>          A Á
    <S-dead-diaeresis>    A Ä
    <dead-diaeresis>      A Ä
#+END_SRC

These are binding for Dead key for entering chars with Diacritic marks.

[see
[[http://xahlee.info/kbd/keyboard_whats_alt_graph__compose__dead_key.html][Keyboard:
What's the Difference Between Alt Graph Key, Compose Key, Dead Key?]]]

[see [[http://wordyenglish.com/musing/diacritics.html][Accent Marks:
Trema, Umlaut, Macron, Circumflex]]]

Note that the =S-= is the notation for the Shift key. So,
=<S-dead-tilde> A= would be Shift+dead ~+A.

(Thanks to Frédéric Perrin, Jason Rummey, Nei
([[http://anti.teamidiot.de/]]), for help.)

** Mute Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There's also 70 keys with the notation of =mute-=, similar to the “dead”
above. ([[file:gnu_emacs_keybinding_mute.txt]]) Not sure what they are.

** Number Pad Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

There are 56 bindings for the keys on the number pad. They have notation
=kp-=. ([[file:gnu_emacs_keybinding_kp-.txt]]) Example:

#+BEGIN_SRC emacs-lisp
    <C-S-kp-1>  <C-S-end>
    <C-S-kp-2>  <C-S-down>
    <C-S-kp-3>  <C-S-next>
    …
    <M-kp-next> <M-next>
    <S-kp-down> <S-down>
    <S-kp-end>  <S-end>
    <S-kp-home> <S-home>
    <S-kp-left> <S-left>
    <S-kp-next> <S-next>
    …
    <kp-0>    0
    <kp-1>    1
    <kp-2>    2
    …
    <kp-add>      +
    <kp-decimal>  .
    <kp-delete>   C-d
    <kp-divide>   /
    <kp-down>     <down>
    <kp-end>      <end>
#+END_SRC

All these are key translations. They do not do anything special. For
example, keypad 0 is the same as the 0 key on the main typing area. So,
the code =<kp-0>= translates to =0=. When NumLock is off, the 4 key on
numpad is the ← key. So, the code =<S-kp-left>= (which means holding
down Shift then pressing the ← on the numpad) simply translates to
=<S-left>=.

** Function keys, Home/End, Page Up/Down, Tab, ... Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here's some special keys, such as {F1, Home, End, Tab, Enter, ❖Window,
▤Menu, PageUp, PageDown, ...}.
([[file:gnu_emacs_keybinding_function_keys.txt]]) Example:

#+BEGIN_SRC emacs-lisp
    <escape>	ESC

    TAB		forward-button
    <backtab>	backward-button
    <backspace>	DEL
    <return>	RET
    <tab>		TAB

    <home>		move-beginning-of-line
    <end>		move-end-of-line
    <insert>	overwrite-mode
    <delete>	C-d

    <prior>		scroll-down
    <next>		scroll-up

    <lwindow>	ignore
    <rwindow>	ignore
    <menu>		execute-extended-command

    <right>		forward-char
    <left>		backward-char
    <up>		previous-line
    <down>		next-line

    <f3>		kmacro-start-macro-or-insert-counter
    <f4>		kmacro-end-or-call-macro
    <f10>		menu-bar-open
    <f16>		clipboard-kill-ring-save
    <f18>		clipboard-yank
    <f20>		clipboard-kill-region
#+END_SRC

Note: Syntax such as {=RET=, =TAB=, =DEL=, =ESC=, ...}, are actual ASCII
characters. While {=<return>=, =<tab>=, =<delete>=, =<escape>=, ...} are
special keys.

Note the {=<F16>=, =<F18>=, =<F20>=}. Some keyboards have function keys
up to 24 of them.

** Mouse and Others
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Here's the rest of the keys: [[file:gnu_emacs_keybinding_rest.txt]].

*** Mouse
    :PROPERTIES:
    :CLASS: calibre14
    :END:

#+BEGIN_SRC emacs-lisp
    <mouse-1>       mouse-set-point
    <mouse-2>       help-follow-mouse
    <mouse-3>       mouse-save-then-kill
    <wheel-down>                    mwheel-scroll
    <wheel-up>      mwheel-scroll
    <mouse-movement>                ignore
    <S-down-mouse-1>                mouse-appearance-menu
    <S-mouse-3>     kmacro-end-call-mouse
    <S-wheel-down>  mwheel-scroll
    <S-wheel-up>    mwheel-scroll
    <double-mouse-1>                mouse-set-point
    <triple-mouse-1>                mouse-set-point
    <down-mouse-1>  mouse-drag-region
    <drag-mouse-1>  mouse-set-region
    <drag-n-drop>   w32-drag-n-drop
#+END_SRC

*** Copy, Cut, Paste, ..., Keys
    :PROPERTIES:
    :CLASS: calibre14
    :END:

#+BEGIN_SRC emacs-lisp
    <again>         repeat-complex-command
    <redo>          repeat-complex-command
    <undo>          undo
    <copy>          clipboard-kill-ring-save
    <cut>           clipboard-kill-region
    <paste>         clipboard-yank
    <execute>       execute-extended-command
    <open>          find-file
    <find>          search-forward

    <begin>         beginning-of-buffer
    <compose-last-chars>            compose-last-chars
    <language-change>               ignore

    <backtab>       backward-button
    <S-insertchar>  yank
    <delete-frame>  handle-delete-frame
    <deletechar>    delete-char
    <deleteline>    kill-line
#+END_SRC

Some of these keys can be seen on Sun Microsystem's keyboard. (alas, Sun
just died a year ago (in 2010).)

[[file:feed_0/article_43/images/img4_u1.jpg]]

The special function keys for Copy, Paste, etc. Note that most of these
keys have standard scancode in USB protocol. Some PC keyboards also have
dedicated {Copy, Cut, Paste} keys in the 1990s, but it fell out of
fashion. More photos:
[[http://xahlee.info/kbd/sun_microsystems_keyboard.html][Sun Microsystem
Type 6 Keyboard]].

*** Other
    :PROPERTIES:
    :CLASS: calibre14
    :END:

#+BEGIN_SRC emacs-lisp
    <header-line>   Prefix Command
    <iconify-frame>                 ignore-event
    <insertchar>    overwrite-mode
    <insertline>    open-line
    <left-fringe>   Prefix Command
    <make-frame-visible>            ignore-event
    <mode-line>     Prefix Command
    <right-fringe>  Prefix Command
    <select-window>                 handle-select-window
    <switch-frame>                  handle-switch-frame
    <vertical-line>                 Prefix Command
    <vertical-scroll-bar>           Prefix Command

    <vertical-line> <down-mouse-1>  mouse-drag-vertical-line
    <vertical-line> <mouse-1>       mouse-select-window

                                    mouse-split-window-vertically
    <vertical-scroll-bar> <mouse-1>
                                    scroll-bar-toolkit-scroll

    <header-line> <down-mouse-1>    mouse-drag-header-line
    <header-line> <mouse-1>         mouse-select-window

    <mode-line> <down-mouse-1>      mouse-drag-mode-line
    <mode-line> <drag-mouse-1>      mouse-select-window
    <mode-line> <mouse-1>           mouse-select-window
    <mode-line> <mouse-2>           mouse-delete-other-windows
    <mode-line> <mouse-3>           mouse-delete-window
#+END_SRC

These may not be actual keys. When emacs define actions for mouse or
menu, it defines a pseudo-key with keyboard syntax. So
=<mode-line> <mouse-1>= means clicking on the mode line.
=<vertical-scroll-bar> <mouse-1>= means clicking on the scroll bar.

** No Super and Hyper?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Curiously, there's no definition for Super =s-= and Hyper =H-= keys.
These are the other prominent keys on lisp keyboard other than Meta
=M-=. [see [[file:emacs_hyper_super_keys.html][Emacs: How to define
Super/Hyper Keys]]]

- [[file:emacs_keybinding_overview.html][Emacs Keys Summary: M-x, C-x,
  C-c]]
- [[file:emacs_kb_shortcuts.html][Emacs Key Layout Diagram]]
- [[file:keystroke_rep.html][Emacs's Key Syntax Explained]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/gnu_emacs_keybinding.html]]

\\
\\
| [[../index_u34.html#article_43][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u17.html>>

| [[../article_45/index_u25.html][下一项]] |
[[../index_u34.html#article_44][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_43/index_u21.html][上一项]] |

--------------

* Emacs's Key Syntax Explained
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2007-05-29. Last updated: 2015-12-29.

This page gives a explanation of the several confusing represenation of
non-printable characters such as =\n \r \t \f= and =^J ^M ^I ^L= and
=C-m RET <return> Enter ^m control-m 13 (?\C-m)=, and how to type
non-printable characters in emacs.

The issues involved are:

- Printable Representation of non-printable characters. (such as =^j=
  for line feed character.)
- Input method of non-printable characters. (such as pressing Ctrl+q
  Ctrl+j for inserting a line feed char.)
- Key notation for a non-printable character's input method. (such as
  =(kbd "C-q C-j")=.)
- Printable Representation in programing language strings of
  non-printable characters. (such as ="\n"=.)

** Summary
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- =C-q= is a notation for the keyboard shortcut Ctrl+q. The command
  invoked by that shortcut is =quoted-insert=. The =quoted-insert=
  command lets you insert a character and suppress the corresponding
  key's normal function. For example, in minibuffer, type Ctrl+q Tab to
  insert a literal tab. (otherwise it'll usually do completion)
- The =C-j= in =C-q C-j= is for inputing ASCII Line Feed char (used in
  unix as newline char), which does not have a corresponding key on the
  keyboard. The reason that =C-j= is for Line Feed is because it's a
  notation from the ASCII standard. That is, the non-printables are
  represented by a Control followed by a letter, regardless whether
  there is a corresponding key on the keyboard. Line feed is the 10th
  ASCII char, and j is the 10th letter, so Line Feed is =C-j=.
  Similarly, =C-i= is for Horizontal Tab, =C-m= is for Carriage Return,
  =C-[= is for Escape, =C-l= is for Form Feed, etc.
- The =^M= is a display notation for Carriage Return, similar to =C-m=.
  The caret =^= is used because in ASCII standard, =^= is display
  representation of Control sequence. Similarly, =^I= is for Horizontal
  Tab, =^J= is for Line Feed, =^[= is for Escape, etc.
- The =\e, \r, \n, \t= are representations of non-printable ASCII chars
  in a programing language inside a string. This is a C language
  convention. Emacs lisp adopted this notation.
- The =(global-set-key [(control b)] 'cmd)= and other variations is
  emacs's syntax to represent keystrokes in elisp. A syntax for key
  strokes is necessary because keys are not ASCII chars (for example,
  F1, F2, Home, PageUp keys.). For historical reasons, elisp has several
  syntaxes to represent the same keystrokes.

On 2007-05-29, Will 〔schimpan...@gmx.de〕 wrote:

#+BEGIN_QUOTE
  #+BEGIN_SRC emacs-lisp
      how can I find an overview on how to enter meta-characters
      (for example: esc, return, linefeed, tab, etc.)

      (a) in a regular buffer

      (b) in the minibuffer when using standard search/replace-functions

      (c) in the minibuffer when using search/replace-functions using regular
      expressions

      (d) in the .emacs file when defining keybindings

      As far as I can see in all those situations entering meta-characters is
      addressed in a different way which I find confusing, e.g.

      (a) <key> _or_ C-q <key>

      (b) C-q C-[, C-q C-m, C-q C-j, C-q C-i

      (c) \e, \r, \n, \t

      (d) (define-key [(meta c) (control c) (tab c)] “This is confusing!”)

      Furthermore, they are displayed in a different way, e.g.

      - actual, visible layout

      - ^E, ^M, ^L, ^I

      - Octals

      I would be happy about pages summarizing such information.
      Any references available? 
  #+END_SRC
#+END_QUOTE

The following is a detailed explanation.

** Suppressing Normal Function of a Key; Literal Data Entry
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Your first item:

#+BEGIN_QUOTE
  #+BEGIN_SRC emacs-lisp
      Ctrl+q ‹key›
  #+END_SRC
#+END_QUOTE

The Ctrl+q (holding the Ctrl key down then type q) is the keyboard
shortcut to invoke the command =quoted-insert=. After this command is
invoked, the key press on your keyboard will force emacs to insert a
character represented by that key, and suppress that key's normal
function.

For example, if you are doing string replacement, and you want to
replace tabs by returns. When emacs prompts you to type a string to
replace, you can't just press the Tab key, because the normal function
of a tab key in emacs will try to do a command completion. (and in other
Applications, it usually switches you to the next input field) So, here
you can do Ctrl+q first, then press the Tab key. Similarly, you can't
type the Return key and expect it to insert a newline character, because
normally the Return key will activate the OK button or signal “end of
input”.

This input mechanism usually doesn't exist in other text editors. In
other text editors, when you want to enter the ASCII Tab character or
Carriage Return character in some pop-up dialog, you often use a special
representation such as =/t= or =/r= instead. Or, sometimes, by holding
down the mouse, then press the key. Or, they simply provide a graphical
menu or check box to let you select the special characters. The need to
input character literally, is frequently needed in keyboard macro apps.
(See:
[[http://xahlee.info/kbd/Mac_OS_X_keymapping_keybinding_tools.html][Mac
OS X Keyboard Software]] •
[[http://xahlee.info/mswin/Windows_keybinding.html][Windows Keyboard
Software]].)

** Data Entry for Non-printable Chars
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_QUOTE
  #+BEGIN_SRC emacs-lisp
      Ctrl+q Ctrl+[, Ctrl+q Ctrl+m, Ctrl+q Ctrl+j, Ctrl+q Ctrl+i
  #+END_SRC
#+END_QUOTE

Here, the Ctrl+[, Ctrl+m, Ctrl+j etc key-press combinations, are methods
to input non-printable characters that may not have a corresponding key
on the keyboard.

For example, suppose you want to do string replacement, by replacing
Carriage Return (ASCII 13) by Line Feed (ASCII 10). Depending what is
your operating system and software, usually your keyboard only has a key
that corresponds to just one of these characters. But now with the
special method to input non-printable characters, you can insert any of
the non-printable characters.

** Display Representation of Non-printable Chars
   :PROPERTIES:
   :CLASS: calibre17
   :END:

When speaking of non-printable characters, implied in the context is
some standard character set. Implicitly, we are talking about ASCII, and
this applies to emacs. Now, in ASCII, there are about 30 non-printable
characters. Each of these is given a standard abbreviation, and several
representations for different purposes. For example, ASCII 13 is the
“Carriage return” character, with standard abbreviation code CR, and
“^M” as its control-key-input representation. (M being the 13th of the
English alphabet), and Ctrl+m is emacs's convention to input the
character, and the conventional method to indicate a control key
combination is by using the caret “^” followed by the character.

For full detail, look at the non-printable ASCII chars table.

| Decimal   | Hex   | Abbr   | Unicode\\   | Caret\\    | C Escape\\   | Description                    |
|           |       |        | Symbol      | Notation   | Code         |                                |
|-----------+-------+--------+-------------+------------+--------------+--------------------------------|
| 0         | 00    | NUL    | ␀           | ^@         | \0           | Null character                 |
| 1         | 01    | SOH    | ␁           | ^A         |              | Start of Header                |
| 2         | 02    | STX    | ␂           | ^B         |              | Start of Text                  |
| 3         | 03    | ETX    | ␃           | ^C         |              | End of Text                    |
| 4         | 04    | EOT    | ␄           | ^D         |              | End of Transmission            |
| 5         | 05    | ENQ    | ␅           | ^E         |              | Enquiry                        |
| 6         | 06    | ACK    | ␆           | ^F         |              | Acknowledgment                 |
| 7         | 07    | BEL    | ␇           | ^G         | \a           | Bell                           |
| 8         | 08    | BS     | ␈           | ^H         | \b           | Backspace                      |
| 9         | 09    | HT     | ␉           | ^I         | \t           | Horizontal Tab                 |
| 10        | 0A    | LF     | ␊           | ^J         | \n           | Line feed                      |
| 11        | 0B    | VT     | ␋           | ^K         | \v           | Vertical Tab                   |
| 12        | 0C    | FF     | ␌           | ^L         | \f           | Form feed                      |
| 13        | 0D    | CR     | ␍           | ^M         | \r           | Carriage return                |
| 14        | 0E    | SO     | ␎           | ^N         |              | Shift Out                      |
| 15        | 0F    | SI     | ␏           | ^O         |              | Shift In                       |
| 16        | 10    | DLE    | ␐           | ^P         |              | Data Link Escape               |
| 17        | 11    | DC1    | ␑           | ^Q         |              | Device Control 1 (oft. XON)    |
| 18        | 12    | DC2    | ␒           | ^R         |              | Device Control 2               |
| 19        | 13    | DC3    | ␓           | ^S         |              | Device Control 3 (oft. XOFF)   |
| 20        | 14    | DC4    | ␔           | ^T         |              | Device Control 4               |
| 21        | 15    | NAK    | ␕           | ^U         |              | Negative Acknowledgment        |
| 22        | 16    | SYN    | ␖           | ^V         |              | Synchronous Idle               |
| 23        | 17    | ETB    | ␗           | ^W         |              | End of Trans. Block            |
| 24        | 18    | CAN    | ␘           | ^X         |              | Cancel                         |
| 25        | 19    | EM     | ␙           | ^Y         |              | End of Medium                  |
| 26        | 1A    | SUB    | ␚           | ^Z         |              | Substitute                     |
| 27        | 1B    | ESC    | ␛           | ^[         | \e           | Escape                         |
| 28        | 1C    | FS     | ␜           | ^\         |              | File Separator                 |
| 29        | 1D    | GS     | ␝           | ^]         |              | Group Separator                |
| 30        | 1E    | RS     | ␞           | ^^         |              | Record Separator               |
| 31        | 1F    | US     | ␟           | ^_         |              | Unit Separator                 |
| 127       | 7F    | DEL    | ␡           | ^?         |              | Delete                         |
| Decimal   | Hex   | Abbr   | Unicode\\   | Caret\\    | C Escape\\   | Description                    |
|           |       |        | Symbol      | Notation   | Code         |                                |
#+CAPTION: ASCII Table of Unprintable Chars

(Note: Emacs has several input methods to enter any non-printable chars
in Unicode. See [[file:emacs_n_unicode.html][Emacs: Unicode Tutorial]].)

** String Representation of Non-printable Chars in Programing Languages
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_QUOTE
  #+BEGIN_SRC emacs-lisp
      \e, \r, \n, \t
  #+END_SRC
#+END_QUOTE

This is a ad-hoc set of input and display representation for a few
non-printable characters, used primarily in programing languages. This
set is started by most likely the C language, and is today a de facto
standard used in {C++, C#, Java, Perl, Python, PHP, JavaScript, emacs
lisp, ...}.

There are good reasons that these are preferred than a literal or the
more systematic caret notation. Here are some reasons:

- In programing, text processing, it turns out that only a few of the
  non-printable chars are particularly useful. For example: {line Feed,
  Carriage Return, Horizontal Tab}.
- The representation {=\r=, =\n=, =\t=} for {Carriage Return, Line Feed,
  Horizontal Tab} are much simpler and easier to remember than the
  alphabet-order based Caret notation {=^M=, =^J=, =^I=}.
- In a programing language, inside a string, it is often preferable to
  use a visible glyph to represent a non-printable chars. Because, for
  example, ="\t"= for the invisible ="	"=. This means we need a way to
  encode non-printable and control-char inside a data string. This is
  known as “escape mechanism”. For a escape mechanism, ="\t"= is
  preferable over the ="^i"= notation for the non-printable ASCII
  Horizontal Tab character. Because the caret notation is hard to
  remember which is which, and also ambiguous as a ^ followed by letter
  i.

** Syntax for Keystrokes
   :PROPERTIES:
   :CLASS: calibre17
   :END:

In the above, we discussed non-printable chars:

- Its printable notation.
- Its input method.
- The notation of its input method.
- Its notation in a computer language's strings.

However, emacs also need a system to represent keystrokes (as used in
its keyboard macro system and keybinding).

Keystroke notation is not just a sequence of characters. For example,
the F1 key isn't a character. The Alt modifier key, isn't a character
nor is it a function in one of ASCII's non-printable character. There's
also key combinations (For example, Ctrl+Alt+↑) and key sequences (For
example, Ctrl+h f). The keys on the number keypad, need a different
representation than the ones on the main keyboard section.

Emacs's key notation is rather confusing, due to historical reasons from
1980s.

Here are examples of multiple representation for the same keystroke
(tested in emacs 22):

#+BEGIN_SRC emacs-lisp
    ; equivalent code for a single keystroke
     (global-set-key "b" 'backward-char)
     (global-set-key [98] 'backward-char)
     (global-set-key [?b] 'backward-char)
     (global-set-key [(?b)] 'backward-char)
     (global-set-key (kbd "b") 'backward-char)

     ; equivalent code for a named special key: Enter
     (global-set-key "\r" 'backward-char)
     (global-set-key [?\r] 'backward-char)
     (global-set-key [13] 'backward-char)
     (global-set-key [(13)] 'backward-char)
     (global-set-key [return] 'backward-char)
     (global-set-key [?\^M] 'backward-char)
     (global-set-key [?\^m] 'backward-char)
     (global-set-key [?\C-M] 'backward-char)
     (global-set-key [?\C-m] 'backward-char)
     (global-set-key [(?\C-m)] 'backward-char)
     (global-set-key (kbd "<return>") 'backward-char)
     (global-set-key (kbd "RET") 'backward-char)

     ; equivalent code for binding 1 mod key + 1 letter key: Meta+b
     (global-set-key "\M-b" 'backward-char)
     (global-set-key [?\M-b]  'backward-char)
     (global-set-key [(meta 98)]    'backward-char)
     (global-set-key [(meta b)]    'backward-char)
     (global-set-key [(meta ?b)]    'backward-char)
     (global-set-key (kbd "M-b") 'backward-char)

     ; equivalent code for binding 1 mod key + 1 special key: Meta+Enter
     (global-set-key [M-return]    'backward-char)
     (global-set-key [\M-return]    'backward-char)
     (global-set-key [(meta return)]    'backward-char)
     (global-set-key (kbd "M-<return>") 'backward-char)

    ; equivalent code for binding Meta + cap letter key: Meta Shift b
     (global-set-key (kbd "M-B") 'backward-char)
     (global-set-key "\M-\S-b" 'backward-char)
     (global-set-key "\S-\M-b" 'backward-char)
     (global-set-key "\M-B" 'backward-char)

     (global-set-key [?\M-S-b] 'backward-char) ; invalid-read-syntax
     (global-set-key [?\M-?\S-b] 'backward-char) ; invalid-read-syntax
     (global-set-key [?\M-\S-b] 'backward-char) ; compile but no effect

     (global-set-key [?\M-B] 'backward-char)
     (global-set-key [\M-B] 'backward-char) ; compile but no effect

     (global-set-key [(meta shift b)] 'backward-char)
     (global-set-key [(shift meta b)] 'backward-char)

     (global-set-key (kbd "M-B") 'backward-char)
     (global-set-key (kbd "M-S-b") 'backward-char) ; compile but no effect

    ; Meta + shifted symbol key.
     (global-set-key (kbd "M-@") 'backward-char) ; good
     (global-set-key (kbd "M-S-2") 'backward-char) ; compile but no effect
#+END_SRC

Note: keystroke notation is not a new concept. Here are some examples of
syntax from different keyboard related software:

- [[http://xahlee.info/kbd/osx_keybinding_key_syntax.html][Mac OS X
  Keybinding Key Syntax]]
- [[http://xahlee.info/mswin/autohotkey_key_notations.html][AutoHotkey
  Key Syntax]]
- [[http://xahlee.info/kbd/ms_keyboard/intellitype_commands_xml.html][Microsoft
  IntelliType commands.xml Syntax]]
- [[http://xahlee.info/kbd/ms_keyboard/intellitype_macros.html][Microsoft
  IntelliType Macros Syntax]]
- X11's xmodmap:
  [[http://xahlee.info/linux/linux_xmodmap_tutorial.html][Linux: xmodmap
  Tutorial]]

*** Char as Integers
    :PROPERTIES:
    :CLASS: calibre14
    :END:

One of emacs's quirk is that its character data type are simply
integers. So, a character “c” is just the integer 99 in emacs lisp. Now,
elisp has a special read syntax for chars, so that the letter “c” in
lisp can also be written as =?c= instead of =99=. This way, it is easier
for programers to insert a character data in their program, and easier
to read too. A backslash can be added in front of the char, so that =?'=
can be written as =?\'=. This syntax is introduced in part so that
Emacs's editing commands don't get confused (because the apostrophe is
lisp syntax to quote symbols). Many of the control characters in ASCII
also have a backslash representation. Here's a table from the elisp
manual: [[../emacs_manual/elisp/Character-Type.html][(info "(elisp)
Character Type")]].

#+BEGIN_QUOTE
  #+BEGIN_SRC emacs-lisp
           ?\a ⇒ 7                 ; control-g, C-g
           ?\b ⇒ 8                 ; backspace, <BS>, C-h
           ?\t ⇒ 9                 ; tab, <TAB>, C-i
           ?\n ⇒ 10                ; newline, C-j
           ?\v ⇒ 11                ; vertical tab, C-k
           ?\f ⇒ 12                ; formfeed character, C-l
           ?\r ⇒ 13                ; carriage return, <RET>, C-m
           ?\e ⇒ 27                ; escape character, <ESC>, C-[
           ?\s ⇒ 32                ; space character, <SPC>
           ?\\ ⇒ 92                ; backslash character, \
           ?\d ⇒ 127               ; delete character, <DEL>
  #+END_SRC
#+END_QUOTE

So, the character tab (ASCII 9), can be represented in elisp as a
character type data as: =9=, =?\t=.

Here's more quote from the manual:

#+BEGIN_QUOTE
  Control characters may be represented using yet another read syntax.
  This consists of a question mark followed by a backslash, caret, and
  the corresponding non-control character, in either upper or lower
  case. For example, both `?\^I' and `?\^i' are valid read syntax for
  the character C-i, the character whose value is 9.
#+END_QUOTE

#+BEGIN_QUOTE
  Instead of the `^', you can use `C-'; thus, `?\C-i' is equivalent to
  `?\^I' and to `?\^i':
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
    ?\^I ⇒ 9
    ?\C-I ⇒ 9
#+END_SRC

#+BEGIN_QUOTE
  ... The read syntax for meta characters uses `\M-'. For example,
  `?\M-A' stands for M-A. You can use `\M-' together with octal
  character codes (see below), with `\C-', or with any other syntax for
  a character. Thus, you can write M-A as `?\M-A', or as `?\M-\101'.
  Likewise, you can write C-M-b as `?\M-\C-b', `?\C-\M-b', or
  `?\M-\002'.
#+END_QUOTE

So now, the tab char can be any of:

#+BEGIN_SRC emacs-lisp
    9    ?\t    ?\^i    ?\^I    ?\C-i    ?\C-I
#+END_SRC

*** Key Sequence Data Type
    :PROPERTIES:
    :CLASS: calibre14
    :END:

[[../emacs_manual/elisp/Key-Sequences.html][(info "(elisp) Key
Sequences")]]

Thanks to diszno for a correction on =?t=.

*** What's the difference between "<return>" and "RET"?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

See: [[file:emacs_key_notation_return_vs_RET.html][Emacs's Key Notation:
What's the difference between "<return>" and "RET"?]]

- [[file:emacs_key_notation_return_vs_RET.html][Emacs's Key Notation:
  What's the difference between "<return>" and "RET"?]]
- [[file:keyboard_shortcuts.html][Emacs: How to Define Keys]]
- [[file:emacs_n_unicode.html][Emacs: Unicode Tutorial]]
- [[file:modernization.html][Modernization of Emacs]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/keystroke_rep.html]]

\\
\\
| [[../index_u34.html#article_44][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u25.html>>

| [[../article_46/index_u24.html][下一项]] |
[[../index_u34.html#article_45][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_44/index_u17.html][上一项]] |

--------------

* Emacs's Key Notation: What's the difference between "<return>" and
"RET"?
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-09-06. Last updated: 2015-04-23.

*** What's the difference between emacs ="<return>"= and ="RET"= key
notation?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

="<return>"= is the Return key while emacs runs in a graphical user
interface.

="RET"= is the Return key while emacs runs in a terminal.

="RET"= is also equivalent to ="C-m"= (Ctrl+m). (For why, see:
[[file:keystroke_rep.html][Emacs's Key Syntax Explained]])

if you define:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<return>") 'backward-char)
#+END_SRC

and run emacs in terminal, your keybinding will have no effect.

you need to use:

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "RET") 'backward-char)
#+END_SRC

But the problem is, by binding =(kbd "RET")=, you are also binding
=(kbd "C-m")=, regardless you run emacs in terminal or GUI.

*** What's the difference between emacs ="<tab>"= and ="TAB"= key
notation?
    :PROPERTIES:
    :CLASS: calibre14
    :END:

Same situation for ="<return>"= vs ="RET"=.

Here, ="TAB"= is equivalent to ="C-i"=.

Also, ="ESC"= is the same as ="C-["=.

- [[file:keystroke_rep.html][Emacs's Key Syntax Explained]]
- [[file:keyboard_shortcuts.html][Emacs: How to Define Keys]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_key_notation_return_vs_RET.html]]

\\
\\
| [[../index_u34.html#article_45][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u24.html>>

| [[../article_47/index_u52.html][下一项]] |
[[../index_u34.html#article_46][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_45/index_u25.html][上一项]] |

--------------

* Eric S Raymond and keyboardio
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2016-07-01. Last updated: 2018-11-19.

[[file:feed_0/article_46/images/img1_u10.jpg]]

Eric S Raymond and keyboardio 2015-06-18. 〔phote source: [
https://twitter.com/keyboardio/status/611608329773797376 accessed:
2016-07-01] 〕

Eric S Raymond (aka esr) is a well-known early hacker, of unix
generation, about same age as Richard Stallman. ESR is author of few
unix software and books. A major figure in the open source scene about
1997 to 2005. And controversial for his gun advocacy and others.

esr is also a big fan of mechanical keyboards, in particular, the IBM
Model M with its buckling spring key switch. [see
[[http://xahlee.info/kbd/keyboard_IBM_model_m_Unicomp.html][Unicomp
keyboard]]]

esr is on Google Plus +https://plus.google.com/+EricRaymond+, and runs a
blog at [[http://esr.ibiblio.org/]]

keyboardio is a new generation of keyboard design, by Jesse Vincent,
also a old school hacker, perl expert and book author. 〔Jesse Vincent
on twitter at [[https://twitter.com/obra]] 〕

here's my keyboardio review:
[[http://xahlee.info/kbd/keyboard.io_model_01.html][Keyboardio Keyboard
Review]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/esr_keyboardio.html]]

\\
\\
| [[../index_u34.html#article_46][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u52.html>>

| [[../article_48/index_u38.html][下一项]] |
[[../index_u34.html#article_47][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_46/index_u24.html][上一项]] |

--------------

* Dogma of Swapping Control/Capslock
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2012-05-26

... Now i'll spoil our nice chat by adding more info...

The CapsLock position for Ctrl is actually not bad. Excellent design in
fact. For example, of the 3 keyboard designs i admire, one of them is
“Truly Ergonomic” (TE). See:
[[http://xahlee.info/kbd/ergonomic_keyboards.html][Ergonomic Keyboards
Gallery]]

on TE, it actually put Shift key on the CapsLock position, on both sides
of the keyboard! What a fantastic, great, thoughtful, design.

Question: Why are you against the CapsLock position then? Answer: it's
because the tech-geeking f��kheads.

There are certain class of programers, a subculture, who pride
themselves around the term hacker. These people, collectively loosely
have certain way or habit and thought pattern, and a subset of them are
loud-mouthers on some issues (such as our Thad Floryan fellow here, who,
every time would sting me about CapsLock/Ctrl switch when i write about
keyboard. Which, is perfectly fine, just don't blame me for my equally
reasonable responses.)

The hacker types (for lack of better term), often insists on certain
geek ways that are often scientifically baseless and harmful. For
example, the advice to swap Ctrl/CapsLock, the cry against GUI, the cry
against mouse, the numerous unix slogans, the adoration of emacs, the
slogan about laziness (perl), the slogan about lambda knight or
adoration of lisp as god lang, usually given as dogma. Motherf��king
f��kheads. For example, one slogan “Be conservative in what you send; be
liberal in what you accept.” which damaged the web for 2 decade.

But what's technically wrong with swapping CapsLock with Ctrl?

Here's the deal. On a newly designed keyboard such as that TE, the
position to the left of A is a top valued position. Also, notice that TE
keyboard is symmetric, fixing one of the major problem of traditional
keyboard. So, you have the exact same key shape of keys on the right
side. You'll have 2 CapsLock, or 2 Ctrl, on both sides, symmetrically
positioned.

If you are designing a new keyboard, it's great. But if you are creating
workaround over standard PC keyboard, then the advice of swapping
CapsLock/Ctrl is a entire new story. For example, you could swap
Ctrl/Alt. The Alt is used by thumb, and available on both sides. That is
immediately superior workaround on most keyboards (except laptops).
There are many issues, alternatives, i've analyzed in detail in my
article and i won't repeat here.

But the thing about the motherf��king techgeekers, such as our Thad
Floryan fellow here, is that they often blindly insists on hackerdom
dogma.

Sure, on many situations, swapping CapsLock/Ctrl is a perfect solution.
For example, on laptops. On laptops, keys are tiny, especially the Alt
key, and usually they are not available no right side. The CapsLock key
on laptop is a big key. It's really a great solution. But you see, tech
geekers are not concerned about this. Thad, never give the
qualifications about swapping CapsLock/Ctrl. Instead, they typically go
like this: “I type for decades, never had problem, you should swap
CapsLock/Ctrl, it's how keyboard should be, look at Sun Micro keyboards,
and all the keyboard of 1920s. God designed that way. And look at vi
keyboard, h j k l. emacs and vi. and IBM Model M! God says. Therefore
you should. KISS.”

- [[http://xahlee.info/Netiquette_dir/whats_hacker.html][Computing
  Culture: What's Hacker?]]
- [[http://xahlee.info/UnixResource_dir/writ/tech_geeker.html][What is a
  Tech Geeker?]]
- [[http://xahlee.info/js/html5_validation_doctype.html][HTML5 Doctype,
  Validation, X-UA-Compatible, and Why Do I Hate Hackers]]
- [[http://xahlee.info/UnixResource_dir/writ/html5_vs_intelligence.html][Are
  You Intelligent Enough to Understand HTML5?]]
- [[http://xahlee.info/kbd/keyboards_hacker_idiocy.html][The Idiocy of
  Hacker Keyboards]]
- [[http://xahlee.info/UnixResource_dir/writ/gui_and_dumbness.html][GUI
  Makes People Dumb?]]
- [[http://xahlee.info/comp/Paul_Graham_language_design.html][Paul
  Graham's Infatuation with the Concept of Hacker]]

Xah

--------------

above is originally posted to
[[http://lists.gnu.org/archive/html/help-gnu-emacs/2012-05/msg00312.html]]

#+BEGIN_SRC emacs-lisp
    From:  Xah Lee
    Subject:  Re: a key system to replace gnu emacs's 1000 default keybindings
    Date:  Sat, 26 May 2012 15:58:04 -0700 (PDT)
    User-agent:  G2/1.0
#+END_SRC

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/swap_ctrl_capslock_tech_geekers.html]]

\\
\\
| [[../index_u34.html#article_47][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u38.html>>

| [[../article_49/index_u2.html][下一项]] |
[[../index_u34.html#article_48][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_47/index_u52.html][上一项]] |

--------------

* on vi Keybinding vs Emacs Keybinding
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-03-21. Last updated: 2015-11-12.

Here's a keybinding design for vi. It is based on the principle that
most frequently used commands be placed on the most easy-to-press keys.

[ErgoVim Key Mappings 2011-01-01 By Harrison Ainsworth. At
[[http://www.hxa.name/articles/content/ergovim-key-mappings_hxa7241_2010.html]]
, accessed on 2013-06-15 ]

At one point in my hand health crisis, i was planning to do this in
emacs.

vi is a great alternative to healthy keys, but, there are 2 major
issues:

① Due to the modal ways, you have to constantly switch mode. Solution is
to make some easy key such as Alt or CapsLock send Escape key signal.
[see [[../emacs/vi_remap_escape_key.html][Vim: How to Remap Escape
Key?]]]

The modal way is actually efficient, and the reason for that is because,
half of the time the keys pressed by programers are editing commands,
not data entry. (according to emacs key statistics[see
[[../emacs/command-frequency.html][Emacs's Command Frequency]]]) This
means, for every command call (such as moving cursor or deleting text),
you press a single key instead of a key combo, it'd saves you
significant amount of finger strain.

② vi keys is by historical happenstance, just like emacs. There is
absolutely nothing about it being ergonomic. Most of its keys are simply
mnemonic, like emacs. For example, $ for moving to end of line (which
came from the regex =$= for matching end of line.) And the famous vi
arrows the {H J K L}, came from the terminal hardware.

[[file:feed_0/article_48/images/img1_u14.jpg]]

ADM-3A keyboard [image source
[[https://vintagecomputer.ca/lear-siegler-adm-3a-terminal/]]]

[see [[http://xahlee.info/kbd/ADM-3A_terminal.html][ADM-3A Terminal]]]

[see
[[http://xahlee.info/kbd/keyboard_hardware_and_key_choices.html][History
of Emacs and vi Keys]]]

The origin of the choice of H J K L on that keyboard hardware is again
by ease-of-implementation, not by design optimization.

A better set of arrows is {I J K L}, forming a inverted T shape.

[see
[[http://xahlee.info/kbd/vi_hjkl_vs_inverted_t_ijkl_arrow_keys.html][Arrow
Keys Efficiency: vim HJKL vs IJKL]]]

Solution is to design a ergonomics based modal key mode. So that, the
most frequently used commands, by statistics, are assigned to the most
easy-to-press keys (such as home row keys). Also, vim has many key
baggage. Many commands have more than one keybinding, and there's no
consistency. (vimers will claim consistency, but that's more like
after-the-fact grafted philosophy.)

But, if you don't type that much as data-entry clerks do, it doesn't
really matter. It's good enough. [see
[[http://xahlee.info/kbd/how_many_keystrokes_programers_type_a_day.html][How
Many Keystrokes Programers Type a Day?]]]

Also note, the modal way being efficient, isn't out of vi's design. vi
happened to be so-called modal, because back in 1980s, you interact with
computer by giving a command, then tell the computer to update screen,
thus the “command mode” and “insertion mode”. That's why, as late as
2008, in emacs manual, emacs still introduce itself as “real-time
DISPLAY editor” --- it updates the screen as you type. (see bottom of:
[[../emacs/gnu_emacs_xemacs_schism_Ben_Wing.html][GNU Emacs and XEmacs
Schism]])

** xah-fly-keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

2013-09-30

I actually created a ergonomics based modal key mode. Been using it for
over a year now. Splendid. See: [[file:ergoemacs_vi_mode.html][Emacs:
Xah Fly Keys]].

- [[../emacs/emacs_kb_shortcuts_pain.html][Why Emacs Keys are Painful]]
- [[../emacs/vi_esc_syndrome.html][Programer Hand Health: vi Esc Key
  Syndrome]]
- [[../emacs/emacs_hand_pain_celebrity.html][Famous Programers with
  Repetitive Strain Injury]]
- [[../emacs/using_voice_to_code.html][Using Voice to Code Faster than
  Keyboard 📺]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/on_vi_keybinding.html]]

\\
\\
| [[../index_u34.html#article_48][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u2.html>>

| [[../article_50/index_u33.html][下一项]] |
[[../index_u34.html#article_49][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_48/index_u38.html][上一项]] |

--------------

* Emacs cua-mode Keybinding Problems
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-06-16. Last updated: 2013-10-22.

few weeks ago we covered
[[../emacs/emacs_python_shift_indent.html][Emacs: Python Shift Indent]].
For example, you can press Ctrl+c < to move a block of code to the left.
However, if the keys don't work for you, that's because you have
=cua-mode= on. (thx to boostjam for finding the cause)

=cua-mode= is great, in that it makes emacs usable for a whole class of
people. However, deep is the problem of hacking over emacs keys. (emacs
uses Ctrl+c as the starting key sequence for mode-specific commands.)
When you have text selection, the Ctrl+c key will do copy. Otherwise, it
waits for you to type other keys to send to emacs.

this solves a lot problem, but not all. The python indentation keys is a
example. The command requires text selection. So, when you have
selection then press Ctrl+c <, but cua-mode will catch the Ctrl+c part
and do copy and deactivates your text selection, then the < is inserted.

the other solution provided by =cua-mode= is to press the complete key
sequence in 0.2 second. Press Ctrl+c < in 0.2 second is hard. You can
adjust the timing, but that introduce other problems.

the third work-around is holding down Shift, for example, Ctrl+Shift+c
Shift+<, but this solution won't work if emacs is running in terminal.

I've thought about solving this in the context of ErgoEmacs keybinding
over the years, but everytime after some great idea false starts, it
ultimately came to this: you just can't make one key do 2 things without
getting into the realm of hack.

Another workaround with the copy paste keys is using ErgoEmacs
keybinding but turn off the “cua-mode”. This means, the cut copy keys is
still {x, c}, but you need to press Alt instead of Ctrl.

In ErgoEmacs (the emacs distro), “cua-mode” is on by default. I really
wanted to turn it off, but turning it off means people won't be able to
use Ctrl+c for copy, and that defeats one of the principle purpose of
letting anyone use it without thinking.

of course, i can turn it off, then add in documentation or in a message,
saying things like “you can press Alt+c for copy, or you can turn on
cua-mode and but and ...”. blab blab blab. That's what the geeks wont to
do. By the time you finished explanation, the user's already gone.

Emacs keys, is the number one inducer of Repetitive Strain Injury. About
every month, you see people discussing it on tech sites such as
StackOverflow, Reddit, ..., and for decades before, was on mailing lists
and newsgroups. Emacs's keys is not just RSI risk , but it's also the
most inefficient, not much better than random key set.

If we can change the keys, all things would be solved. But no, we can't.
There's a pride and identity issue. Emacs was here first!

(thx to [Matthew Fidler
+https://plus.google.com/100239989767196954209/posts+])

*** ergoemacs-mode Solves The Problem
    :PROPERTIES:
    :CLASS: calibre14
    :END:

2013-10-22

[Matthew Fidler +https://plus.google.com/100239989767196954209/posts+]
has solved the problem, by not requiring cua-mode, but ergoemacs-mode
dive deep into emacs to remap the keys. You can config it so that:

- {Ctrl+x, Ctrl+c} is {Cut, Copy}, and call ▤Menu key sequence to do
  emacs's C-c and C-x.
- Or, you can set “ergoemacs-mode” so that C-c and C-x be what they are
  in emacs. (use Alt instead for {cut, copy}, or use {F2, F3} )

For detail, see the doc:
[[https://ergoemacs.github.io/cua-conflict.html]]

(much thx to [Matthew Fidler
+https://plus.google.com/100239989767196954209/posts+] for his
incredible great work.)

** History of Emacs and vi Keys
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[http://xahlee.info/kbd/keyboard_hardware_and_key_choices.html][History
of Emacs and vi Keys]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/emacs_keybinding_and_cua-mode_keys.html]]

\\
\\
| [[../index_u34.html#article_49][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u33.html>>

| [[../article_51/index_u12.html][下一项]] |
[[../index_u34.html#article_50][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_49/index_u2.html][上一项]] |

--------------

* Programer Workflow Efficiency
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-09-19. Last updated: 2013-10-01.

so, i've been quite concerned about efficiency. That is, programer
operating the computer, and especially in emacs.

this is almost a science/art by itself.

[[file:feed_0/article_50/images/img1_u4.png]]

xkcd workflow comics. [[http://xkcd.com/1172/]]

workflow are diverse. Thousands of ways. Let me give a illustration from
coding.

given a program, there are thousands of algorithms that arrive at the
same result. And, to code a particular algorithm using a given language,
there are again thousands ways.

workflow is similar to that. There's vi, there's emacs, there's many
different IDEs, and different OS compel you to do things in a particular
way, with different key shortcuts.

but, let's narrow it down. Let's say we are all using emacs, on Linux.
Still, there are hundreds of different workflow from many different
aspects. There's the default GNU Emacs keybinding, then some uses
cua-mode, some ergoemacs or evil/viper. These are not just key
differences, but effect how you select, how often you select, how you
move the cursor, how often you use particular command (commands with
easy keys induce you to use it more often, and these modes have their
own new commands too). Then:

- some do use mouse to select text, jump to point, or scroll page, while
  others not much.
- some always max window, some never.
- some use virtual screen (aka workspace), some never.

then, there are hundreds of ways people differ in switching buffers. I
for example, don't keep more than 20 buffers open at any time. I close
it immediately when not needed. Many, often have hundreds buffers open.
For them, efficient [[../emacs/emacs_buffer_management.html][buffer
switching]] becomes critical. For me, efficient way to
[[../emacs/emacs_hotkey_open_file_fast.html][open particular files]], or
close files, is critical.

some prefer working in 1 single emacs window, full-screen, with multiple
split panes. Others prefer multiple smaller windows. The two methods
creates significantly different workflow on how you open files or switch
windows. Full-screen people require powerful management of the
split-panes, while multiple-windows user require good methods to switch
among windows. [see
[[file:emacs_one_max_window_vs_multi_smaller_window.html][Emacs:
Full-Screen vs Multiple Window]]]

so, there's all these bewildering workflows, and basically each person
is slightly different from other.

even though we assumed emacs on Linux, there's still other critical
aspects such as what desktop one is using. For example: Ubuntu Unity,
Gnome, KDE, xfce, or other weird windows managers. [see
[[http://xahlee.info/linux/linux_install_new_windows_manager.html][Intro
to Linux Window Manager and Desktop Environment]]] Also, whether one
uses terminal much, or stick within emacs only.

the desktop environment has significant influence on your workflow.

also, all different workflow is usually unknown to others. The only way
to know the hundreds of workflow other than your own, is to actually
have worked with another person for a period of time. (For example, a
co-worker, in some agile team)

so, when discussing many of emacs aspects such as modes, keys, you see
each swear by their methodologies, keys, often with strong opinion and
self satisfaction, but most people haven't seen many other workflows.

but, given all these diverse workflows, does it mean efficiency cannot
be judged or qualified or measured?

efficiency can actually be judged. That's the point i want to make (it's
what prompted me to write this post extempore).

you just need to interact with lots people (here, meaning other emacs
users on linux), in real-life. Then, you can get a sense of different
workflow, their efficiency.

sometimes we see video clips of other emacs users. But that doesn't help
much, because a vid clip only shows a particular method or command or
mode, usually refined. It doesn't capture the whole picture.

end of quick type of thought flow. =(^_^)=

so, anyway, to recap:

- workflows are diverse.
- usually it's hard for a person to know other's workflow.
- workflow doesn't quantify or communicate well. (because each person
  can only know 20 or 30 other programers well)
- fast operation does not equate efficient workflow. You may be
  operating extremely fast with muscle memory, but a alternative
  workflow might require half of keystrokes and or less required brain
  processing. (For example, ① fast typer vs someone who uses a good
  template system. ② default GNU emacs keybinding vs evil-mode user. ③ a
  key F8 to switch to emacs vs Ctrl+Tab that requires brain processing.)
- the workflow efficiency can be scientifically measured. For example,
  start by giving a rough definition of what needs to be done (For
  example, switching windows/top, open/close, files...), and have a stat
  that measure key strokes, measure timing, etc. Also, by analysis of
  the operation. Compare the keyboard shortcut's ease-of-operation,
  compare efficiency of the operation (For example, mouse to click a
  link vs keys to move cursor to a link, typing programing constructs vs
  a template system.)
- we need to spread the awareness of this.

more thoughts:

**** vim-Golf is Localized Workflow Comparison
     :PROPERTIES:
     :CLASS: calibre46
     :END:

you know about vim-golf? There, we can see a lot different workflows,
within vi. But, it's a local workflow. That is, the context is extremely
narrow. You are given a piece of text and you want to edit it to
transform to the given result. You don't have to deal with switching
windows, opening different tabs for reference, close tab/file/window,
copy/paste between apps, etc.

**** Google Does Workflow Study, on Browsers
     :PROPERTIES:
     :CLASS: calibre46
     :END:

Google does have lots of scientific studies on workflow, i think, but
usually for web browsers, and they are focused for the type of people
who hardly know how to copy＆paste. Google does this to improve their UI
design. Their goal is different from creating a efficient workflow for
programers, but their study would be something similar to what we are
discussing here.

**** Longtime Emacs Users Tend to Create Unique Workflow
     :PROPERTIES:
     :CLASS: calibre46
     :END:

once you worked with a tool for a long time, one tends to develop one's
own unique and weird workflow, especially with emacs or Linux. That is,
you eventually have modified the tool extensively to suite your own
peculiar growth. This is interesting, because, you can think of a
workflow as going from point A to B in the Traveling Salesman problem.
Using standard or default tools, keys, would be likened to following the
trodden path. (there are still great diversity) But for emacs users who
learned lisp, he starts to customize his ways with his own elisp
command/function/packages that his workflow is foreign to others. The
personal customization may eventually become published packages, and may
eventually be adopted by the community. For examples of emacs, helm and
icicles are good examples of eventual public packages, yet they are used
by relatively few people (because they are not bundled, and they require
non-trivial learning). Similarly, in Linux, you have great number of
weird window managers.

**** Advanced Workflow Requires Non-Trivial Learning
     :PROPERTIES:
     :CLASS: calibre46
     :END:

another interesting point is that, a given tool or environment requires
learning. We often don't think much of it, but if you are a Microsoft
Windows user and just switched to Mac or Linux, your productivity would
grind to a halt. You have to learn the proper tools for editor, for ftp,
for connecting remote server, for system config, and find and learn lots
of other tools you need daily. Similarly, switching from Microsoft
Visual Studio to emacs or vi would drop productivity to the ground, in
the beginning. Same for vi to emacs etc. And, even within emacs, if you
take away my own personal settings, i'd be crawling like a Notepad user.

**** Workflow Are Shaped by Your Tools
     :PROPERTIES:
     :CLASS: calibre46
     :END:

workflow are often shaped by the tools you work with. For example, emacs
by default makes it hard to close a file (kill buffer), but makes it
easy to switch or hide buffers. So, most long time users leave hundreds
of buffers open, but have efficient ways to hide or switch them. There
are many ways to get to a point, one tends to follow the immediate easy
path (as in greedy algorithm).

in other words, often you adopt to the tools, instead of the tools
adopting you. Emacs is perhaps the best tool that adopt users. But even
so, a tool's default settings has major impact on your workflow. (this
is similar to how programing languages influence code patterns. (lisp is
in general known as the most flexible, while Java the least))

See also: [[../emacs/emacs_game.html][Game: Emacs of the Dead]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/programer_workflow_efficiency.html]]

\\
\\
| [[../index_u34.html#article_50][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u12.html>>

| [[../article_52/index_u28.html][下一项]] |
[[../index_u34.html#article_51][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_50/index_u33.html][上一项]] |

--------------

* Emacs: Full-Screen vs Multiple Window
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-01-10. Last updated: 2015-04-19.

Some emacs users like to have one single emacs window that max the
screen. While others, never go full-screen.

Full-screen users need good control of splitting windows. That is, keep
the split pane geometry configuration. Here's some tips for full-screen
users: [[../emacs/emacs_winner_mode.html][Emacs: Save Split Windows
Configuration]].

I prefer smaller window, usually 2 of them, one on each side of screen.

Multiple-windows has the advantage that it's more dynamic, free form. No
worry about preserving your split panes. Split/unsplit anytime as
needed, or maximize/restore current window, or create new window or
close it. But mostly, you can view browser window side-by-side with
emacs.

The following are useful commands:

| Purpose         | GNU Emacs    | ErgoEmacs      |
|-----------------+--------------+----------------|
| New Window      | Ctrl+x 5 2   | Ctrl+Shift+n   |
| Close Window    | Ctrl+x 5 0   | Alt+F4         |
| Cycle Windows   | Ctrl+x 5 o   | Alt+`          |

| Purpose        | GNU Emacs                 | ErgoEmacs   |
|----------------+---------------------------+-------------|
| Split          | Ctrl+x 2                  | Alt+4       |
| Un-Split       | Ctrl+x 1                  | Alt+3       |
| Cycle pane     | Ctrl+x o                  | Alt+s       |
| New buffer     | Ctrl+x b new_name Enter   | Ctrl+n      |
| Close buffer   | Ctrl+x k Enter            | Ctrl+w      |

Your operating system have keys for manipulating windows, such as
maximize, switch to prev/next window, close.

** Auto-raise Windows
   :PROPERTIES:
   :CLASS: calibre17
   :END:

For mouse, i highly recommend:

- [[http://xahlee.info/linux/mouse_hover_auto-raise_window.html][Mouse
  Hover to Auto-Raise Window]]
- [[http://xahlee.info/mswin/windows_auto-raise_single_click.html][Single-click
  Open File]]

** Emacs: Effective Windows Management
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[../emacs/emacs_effective_windows_management.html][Emacs: Effective
Windows Management]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/emacs_one_max_window_vs_multi_smaller_window.html]]

\\
\\
| [[../index_u34.html#article_51][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u28.html>>

| [[../article_53/index_u58.html][下一项]] |
[[../index_u34.html#article_52][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_51/index_u12.html][上一项]] |

--------------

* Emacs: Display Key and Command in Real Time
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-05-08. Last updated: 2018-11-19.

the package “command-log-mode.el” lets you show keys and commands you
use in emacs in real time.

this is great when you are doing a demo.

home page at [[https://github.com/lewang/command-log-mode]]

it's on MELPA.

[see [[file:emacs_package_system.html][Emacs: Install Package with
ELPA/MELPA]]]

To start it, do:

1. Alt+x =command-log-mode= (this turns the mode on, and turn on logging
   current buffer)
2. Alt+x =global-command-log-mode= (optional. Turn on logging for any
   buffer)
3. Alt+x =clm/open-command-log-buffer= (show the key/command output
   buffer)

[[file:feed_0/article_52/images/img1_u3.png]]

emacs command log output (with [[../misc/ergoemacs_vi_mode.html][Emacs:
Xah Fly Keys]], Dvorak layout.)

([[file:emacs_show_key_and_command_xah_2014-05-08.txt]])

2014-05-08 Thanks to Sacha Chua [[[http://sachachua.com/]]] and her
reader for recommendation!

thanks to Michael Weber [[[http://foldr.org/~michaelw/]]] for writing
mwe-log-commands.el

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_show_key_and_command.html]]

\\
\\
| [[../index_u34.html#article_52][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u58.html>>

| [[../article_54/index_u45.html][下一项]] |
[[../index_u34.html#article_53][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_52/index_u28.html][上一项]] |

--------------

* Emacs: Hello ergoemacs-mode Again
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2014-06-25

just tried ergoemacs-mode after a year hiatus, it just works!

short version: just go install it NOW. [[https://ergoemacs.github.io/]]

long rambling version:

since 2013 Jan, i got the
[[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly Ergonomic
Keyboard]] (TEK). It's a great keyboard, but doesn't have 2 large Alt
keys for thumbs, where my previous keyboard
[[http://xahlee.info/kbd/ms_keyboard/ms_natural_keyboard_4000.html][Microsoft
Natural Ergonomic Keyboard 4000]] does.

[[file:feed_0/article_53/images/img1_u1.png]]

[[http://xahlee.info/kbd/Truly_Ergonomic_keyboard.html][Truly Ergonomic
Keyboard]] with my custom
[[../misc/ergoemacs_vi_mode.html][ergoemacs-xah layout]].

This is about the same time Matthew L Fidler
[[[https://github.com/mattfidler]]] did heavy contribution to
ergoemacs-mode and became the leader.

Note: ergoemacs keybinding is designed for nice Alt key under thumb,
preferably 2 of them.

with the TEK, i've tried to set the 2 homerow outter keys for Alt. (that
is, on a PC keyboard, roughly the position of the CapsLock and Enter). I
did that for about 6 months, but eventually gave up. Because:

- It strains the pinky to hold keys.
- When the 2 Alt is under thumbs, you can use either Alt to do any
  Alt+key. So, you can just hold Alt with one thumb, and press a
  sequence of letters for commands, doesn't matter if letter is
  positioned on left or right side of keyboard. But when the 2 Alt are
  positioned on the home row for the pinkies, you cannot just use one of
  them to do arbitrary Alt+letter combination. When you want to run a
  sequence of commands, often you have to unhold the Alt, then switch to
  the other hand to hold Alt. If you just hold the Alt with one hand,
  your other hand will need to fly across left and right sides of the
  keybord wildly --- no longer touch-tying.

so, after 6 months, i stopped using this scheme.

Before this, i've also tried setting the big left space bar to be Alt. I
did that for about 2 months in 2013 Jan, but also gave that up because i
really want 2 Alt.

(Side keyboarding tip: one nice Alt key under thumb is better than 2 Alt
keys for pinky.)

i've also tried to put Alt on the tiny key to the left of the space bar.

but basically, with TEK, it just doesn't have 2 big comfortable physical
thumb keys for Alt, full stop. Remapping however you want, it doesn't
solve the problem.

During this time, Matt is also doing heavy work on ergoemacs-mode. When
you are the main author of some software, you have good control. Like
cowboy coding, you do what you want, by your design and philosophy. But
when co-author with someone, this is no longer true. Matt is doing heavy
work, and i'm too busy worrying about my life and couldn't follow or
discourse the many changes.

i myself have extensive key customization on top of ergoemacs-mode.

(side keyboarding tip: i have come to the conclusion, that it is
impossible to have optimal key for personal use and for public. This was
a major frustration in my keyword work, because i am constantly
frustrated to maintain 2 sets of keys, one for public ergoemacs-mode,
and on top for myself. I tried to figure out a way to eliminate this,
but no, “opitmal efficiency” cannot be both for public use and for
personal use. I've also tried to just stick with the public key set,
which is very efficient design, but personal keys makes a big difference
when you type a lot. [see
[[http://xahlee.info/kbd/how_many_keystrokes_programers_type_a_day.html][How
Many Keystrokes Programers Type a Day?]]] (why does personal key differ
from public? For example, suppose you are using TEK or
[[http://xahlee.info/kbd/ergodox_keyboard.html][Ergodox]] or
[[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis]]. Keybinding
designed for these are very different than for PC keyboard. So, when you
design keybinding, you have to mentain 2 mindset. One for the generic PC
keyboard, and one for your special keyboard. Here's another reason. For
your personal emacs use, there are perhaps few personal commands you use
most frequently. You must have easy keys for them. But, general emacs
users don't have and don't care about these commands.))

the upshot is that every time i tried Matt's ergoemacs-mode, my emacs
keys went awry, and i didn't have time to dig.

so, eventually, around 2013-12, i gave up loading ergoemacs-mode.
Instead, i just went back to a set of cowboy global keybindings. Sure,
it won't work nicely with many minor modes, but basically i know what
i'm doing, and i can get things done.

Due to frustration of not having 2 big Alt keys under thumb, and been
long time lured by the efficiency of vi modal ways, i gradually created
a ergoemacs like modal keybinding set for the TEK keyboard for use for
myself: [[../misc/ergoemacs_vi_mode.html][xah fly keys]].

ergoemacs-mode is undergoing heavy flux. Matt is doing heavy dev work.
He dived deep into emacs key system, and wrote entire new key engine, so
that the mode will work nicely with any other major or minor mode. Full
support of emacs custom system, and also created themes for people to
change keys in a systematic and supported way.

so, today, i tried ergoemacs-mode again. This time, without changing any
of my customization. Just set ergoemacs-mode to load, and all things
worked! including my hundreds of key changes on top of it and thousands
elisp lines. This blog piece is written while ergoemacs-mode is on.

I've also noticed a huge amount of GUI improvements. They are things i
tried to do in ErgoEmacs, such as improving the emacs menu, improving
the display of key notations, show a menu of list of modes, etc.
ergoemacs-mode now does them, and much better!

so, if you have a lot of your own key customization, ergoemacs-mode will
work well, without you needing to change anything in your config.

- [[file:emacs_keys_index.html][Emacs Keybinding, Keyboard, Articles
  Index]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_hello_ergoemacs-mode_again.html]]

\\
\\
| [[../index_u34.html#article_53][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u45.html>>

| [[../article_55/index_u35.html][下一项]] |
[[../index_u34.html#article_54][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_53/index_u58.html][上一项]] |

--------------

* RSI is Coming for You
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-09-04. Last updated: 2016-05-14.

I started the revolution of alternative keybinding in emacs, starting
with [[file:ergonomic_emacs_keybinding.html][ErgoEmacs Keybinding]] in
2007.

In the emacs community, many tells you to stick to the GNU Emacs
keybinding, or even telling you to set your browser or OS to use emacs's
keys.

emacs keybinding causes RSI, but it is the most inefficient keybinding
possible. It is not much better than a random map.

here's a simple practical advice. Put this in your init file.

#+BEGIN_SRC emacs-lisp
    ;; make cursor movement keys under right hand's home-row.
    (global-set-key (kbd "M-i") 'previous-line)
    (global-set-key (kbd "M-j") 'backward-char)
    (global-set-key (kbd "M-k") 'next-line)
    (global-set-key (kbd "M-l") 'forward-char)

    (global-set-key (kbd "M-u") 'backward-word)
    (global-set-key (kbd "M-o") 'forward-word)

    (global-set-key (kbd "M-SPC") 'set-mark-command)
#+END_SRC

with just this few simple clunky non-robust lines, you will save perhaps
30% of finger distance moved, and never going back.

if you want a more robust system, use [[https://ergoemacs.github.io/]].
(the alternative would be evil-mode. I've never used, but i think it's
comparable with respect to key efficiency or preventing RSI, provided
you make the mode switching key (Escape) to be something more
easy-to-press on the KEYBOARD YOU ARE USING. (such as CapsLock, Alt, or
▤Menu))

yes, you'll need to go thru the painful process of changing muscle
habit. JUST DO IT.

on the net, today there's a lot report from programers who suffer RSI.
You see them every month. (you can see a lot on reddit, hacker news, and
keyboard forums such as geekhack or Deskauthority (but all these are
huge sites, so you have actually to dig in the community to start seeing
RSI related stories.)) When you read them, you see dreadful stories.

there are also lots people insisting “i program for n decades and never
had a problem...”, defending either their flat PC keyboard, or defending
GNU Emacs, and mostly just defending nothing but their personal HABIT
sans any scientific basis whatsoever. There are huge amount of other
myths about keyboarding. I've written tens of articles about this. Myth
in society is extremely hard to kill. I can only repeat. See
[[file:emacs_keys_index.html][Emacs Keybinding, Keyboard, Articles
Index]].

if you find some article that make sense, share it, tell other people
about these issues. Perhaps someday, GNU Emacs might go for a better
default keybinding set, but for now, at least a lot people will be aware
of the various issues.

keybinding and keyboard are very vibrant today. Huge amount of alt
layouts comparable to Dvorak today, and lots of new ergonomic keyboards
with mechanical keys are out in recent years. The change in society is
slow, but progress is steady. Your number one enemy is: HABIT.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/rsi_is_coming_for_you.html]]

\\
\\
| [[../index_u34.html#article_54][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u35.html>>

| [[../article_56/index_u19.html][下一项]] |
[[../index_u34.html#article_55][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_54/index_u45.html][上一项]] |

--------------

* Game: Emacs of the Dead
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2008-09-22. Last updated: 2013-10-08.

[[file:feed_0/article_55/images/img1_u13.jpg]]

Typing of the Dead [[https://amzn.to/1K22pl6][Typing of the Dead]]

There's a game called “Typing of the Dead”, where zombies come at you,
and you have to type quickly to kill it.

how about a similar game for Emacs, but instead of typing speed game,
your task is to complete some editing task using emacs's features as
fast as possible.

in “Emacs of the Dead”, a window might be split into 2 panes, where one
is user area and the other is the example area. The example area
contains a sample text with instruction on what final result should be
like, and the user types in the bottom pane to create identical text in
the example area, using any emacs commands to carry out the task.

This game will be timed and keep score, based on correctness and speed,
and lower number of keystrokes will be exponential bonus points.

We can have levels, beginning with basic operation such as: cut, copy,
paste, paste previous (=yank-pop=), =kill-line=, =undo=, =kill-word=,
=backward-kill-word=, =isearch-forward=.

Then, user will need to use =narrow-to-region=, paste from
[[file:emacs_using_register.html][clipboard history]], using
[[file:emacs_find_replace.html][regex replace]], tell user to create a
buffer named “abc” and “xyz”, and switch back to “abc”. (test on
[[file:emacs_buffer_management.html][switch/list buffers]]).

In mid levels, we ask user to align text, or insert text to a column
([[file:emacs_string-rectangle_ascii-art.html][rectangle commands]]).
Ask them to do something such that if they knew about
[[file:emacs_macro_example.html][keyboard macros]] it'd make it 10 times
faster.

In advanced levels, have a task that basically without using
[[file:elisp_copy-paste_register_1.html][registers]] will become very
tedious. A task to create lots of directories {a, b, c, ..., z} and
files {A.txt, B.txt, C.txt, ..., Z.txt}, then removed the “odd” letter
ones (requiring knowledge of [[file:file_management.html][dired]]). And,
ask user to [[file:emacs_view_info_page.html][navigate info]] until a
given node is arrived. And, we must also have a level where user needs
to know how to [[file:emacs_unix.html][run a shell commands]] to
complete. And, we should also have test on view a man page,
[[file:elisp_doc_lookup.html][locate elisp doc]] etc.

Perhaps at the boss level will require user to write simple elisp
command to insert some string on the spot.

In the above, the game is a real time based game. That is, the clock is
ticking and your score depends on speed.

In another twist, the game can be made into a flash-card quiz or
knowledge testing based, where each question asks you to do something
and you have to carry it out in order to pass, without a time limit.

- [[../misc/programer_workflow_efficiency.html][Programer Workflow
  Efficiency]]
- [[../misc/typing_speed_and_hand_motion.html][Typing Speed and Hand
  Motion Speed Study]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/emacs/emacs_game.html]]

\\
\\
| [[../index_u34.html#article_55][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u19.html>>

| [[../article_57/index_u41.html][下一项]] |
[[../index_u34.html#article_56][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_55/index_u35.html][上一项]] |

--------------

* How to Make the CapsLock Key do Home Key
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2016-07-13. Last updated: 2020-04-27.

Emacs cannot set CapsLock directly. You need to use a keyboard tool.

** Mac
   :PROPERTIES:
   :CLASS: calibre17
   :END:

On the Mac, use Karabiner

[see
[[http://xahlee.info/kbd/Mac_OS_X_keymapping_keybinding_tools.html][Mac
Keyboard Tools]]]

** Linux
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[http://xahlee.info/linux/linux_capslock_do_home_key.html][Linux: Make
CapsLock Do Home Key]]

** Microsoft Windows
   :PROPERTIES:
   :CLASS: calibre17
   :END:

#+BEGIN_SRC emacs-lisp
    ; AutoHotkey
    ; make and capslock sent Home key
    Capslock::Home
#+END_SRC

[see [[http://xahlee.info/mswin/autohotkey.html][AutoHotkey Tutorial]]]

** Programable Keyboard
   :PROPERTIES:
   :CLASS: calibre17
   :END:

Best solution is to get a Programable Keyboard. That way, there's no
glitches. And you can plug in the keyboard in any computer or operating
system and it'll work right away with your own customization.

see
[[http://xahlee.info/kbd/programable_keyboards_with_onboard_memory.html][Programable
Keyboards with Onboard Memory]]

back to [[file:ergoemacs_vi_mode.html][Emacs: Xah Fly Keys]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/capslock_do_home_key.html]]

\\
\\
| [[../index_u34.html#article_56][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u41.html>>

| [[../article_58/index_u51.html][下一项]] |
[[../index_u34.html#article_57][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_56/index_u19.html][上一项]] |

--------------

* emacs major mode keys not compatible as key sequence
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2016-07-22.

emacs key conventions are truly the worst possible.

suppose you have a
[[http://xahlee.info/kbd/keyboard_kinesis.html][Kinesis Keyboard]] with
extra keys. So you want to make a thumb key as the prefix for all major
mode keys.

You can't!

by convention, personal key space start with Ctrl+c then followed by a
letter

by convention, major modes's keys start with Ctrl+c then Ctrl+someKey

So, you can't, because the major mode keys doesn't really have a clean
prefix.

the only way to make major mode keys compatible with simple key sequence
and still conform to convention is to have all major mode's keys start
with Ctrl+c Ctrl+c. Which you can do if you are writing new modes, but
existing modes will not change.

so you have this really sorry situation, basically impossible to fix.

The only way, is to get GNU emacs change it.

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/emacs_major_mode_key_not_sequence.html]]

\\
\\
| [[../index_u34.html#article_57][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u51.html>>

| [[../article_59/index_u39.html][下一项]] |
[[../index_u34.html#article_58][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_57/index_u41.html][上一项]] |

--------------

* Typing Speed and Hand Motion Speed Study
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2013-10-01. Last updated: 2013-10-08.

i just ran into 2 very interesting articles by Sacha. They are:

- [Thinking about how to type faster than 110wpm 2013-08-19 By Sacha
  Chua. At
  [[http://sachachua.com/blog/2013/08/thinking-about-how-to-type-faster/]]
  , accessed on 2013-09-30 ]
- [Using Emacs to figure out where I need to improve in order to type
  faster 2013-09-30 By Sacha Chua. At
  [[http://sachachua.com/blog/2013/09/using-emacs-to-figure-out-where-i-need-to-improve-in-order-to-type-faster/]]
  , accessed on 2013-09-30 ]

the first one is fun. Go there, and visit the typing speed site she
linked, and test your own speed.

[[file:feed_0/article_58/images/img1_u2.jpg]]

“Phrase Invaders”, a arcade game in
[[http://xahsl.org/sl/index.html][Second Life]] virtual world, build by
Seven Shikami.

she types 110 wpm, amazing. I only got 80 wpm. Also, she types
[[http://xahlee.info/kbd/keyboard_dvorak_layout.html][Dvorak]], yay!
(since 2003) But she also retained her QWERTY, at 88 wpm. wow! My QWERTY
is about 30 wpm.

i've seen a few typing speed sites over the years, their quality varies
significantly. The one she found is the fantastic, probably the best.

also, note that different sites give different results of
words-per-minute, because different input has significant impact on your
speed. You are much faster when typing chat-like text, but slower when
typing journalism essay, and much more slower if you were to type
[[http://wordyenglish.com/titus/act1.html][Shakespeare]]. Also, typing
test's duration effects your score. You might be 70 wpm for 1 min, but
50 wpm for 10 min.

this means, if you hear programer claim 60 wpm, you need to know what's
the test exactly. The reported wpm difference sometimes differ as much
as ±30 wpm. (i know i'm 80 to 90 wpm thru-out my life, but i've came
across a site that rated me 120 wpm.)

her second article is a little research on different statistics on
typing speed. It answers questions such as: can you type “asdf asdf asdf
asdf” faster or “dfjh dfjh dfjh dfjh”? (that's “rolling fingers” vs
alternating hands) Or, which is faster: “jjjj” or “kkkk”? (repeating
pointing finger vs repeating index finger.) It includes a little snippet
of emacs lisp, so you can test yourself.

why's that interesting? because it's a science based experiment, for
issues in keyboard layout. A actual test that you can run for yourself.
I haven't seen such study elsewhere. It's commonly said that Dvorak
favors alternating hands and Colemak favor rolling motion.

See also:

- [[http://xahlee.info/kbd/dvorak_and_all_keyboard_layouts.html][Keyboard
  Layouts Fight! Dvorak, Maltron, Colemak, NEO, Bépo, Turkish-F, ...]]
- [[http://xahlee.info/kbd/most_efficient_keyboard_layout.html][What's
  the Most Efficient Keyboard Layout? Dvorak?]]

** Typing Games and Typing Tests
   :PROPERTIES:
   :CLASS: calibre17
   :END:

[[http://xahlee.info/kbd/typing_tutorial_and_games.html][Typing Games
and Typing Tests]]

- [[../emacs/emacs_game.html][Game: Emacs of the Dead]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/typing_speed_and_hand_motion.html]]

\\
\\
| [[../index_u34.html#article_58][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |

<<index_u39.html>>

| [[../../feed_1/index.html][下一项]] |
[[../index_u34.html#article_59][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
[[../article_58/index_u51.html][上一项]] |

--------------

* Emacs: comment-line vs comment-dwim
  :PROPERTIES:
  :CLASS: calibre9
  :END:

By Xah Lee. Date: 2016-10-16. Last updated: 2016-10-25.

Emacs 25, new command =comment-line= 【Ctrl+x Ctrl+;】

Before this, you normally use =comment-dwim= 【Alt+;】

Here's the difference.

** When There's No Selection
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- =comment-line= will toggle comment/uncomment of current line. If it's
  on a blank line, it moves cursor downward.
- =comment-dwim= will add comment to the end of current line. If the
  whole line is already a comment, it moves cursor to after the comment
  char.

For example, suppose you have:

#+BEGIN_SRC emacs-lisp
    xd.dot = function (u,v) {
        return ▮(u[0]*v[0])+(u[1]*v[1])
    }
#+END_SRC

After =comment-line=, you get:

#+BEGIN_SRC emacs-lisp
    xd.dot = function (u,v) {
        // return (u[0]*v[0])+(u[1]*v[1])
    ▮}
#+END_SRC

After =comment-dwim=, you get:

#+BEGIN_SRC emacs-lisp
    xd.dot = function (u,v) {
        return (u[0]*v[0])+(u[1]*v[1]) // ▮
    }
#+END_SRC

** When There's Selection
   :PROPERTIES:
   :CLASS: calibre17
   :END:

- =comment-line= will comment/uncomment all lines of region. It will
  never split a line into two lines.
- =comment-dwim= will comment/uncomment only the selected text, spliting
  a line into two if necessary.

For example, suppose you have:

#+BEGIN_SRC emacs-lisp
    xd.dot = function (u,v) {
        return (u[0]*v[0])+(u[1]*v[1])
    }
#+END_SRC

with the first paren parts after return selected.

After =comment-line=, you get:

#+BEGIN_SRC emacs-lisp
    xd.dot = function (u,v) {
        // return (u[0]*v[0])+(u[1]*v[1])
    }
#+END_SRC

After =comment-dwim=, you get:

#+BEGIN_SRC emacs-lisp
    xd.dot = function (u,v) {
        return // (u[0]*v[0])
            +(u[1]*v[1])
    }
#+END_SRC

** Merge comment-line and comment-dwim
   :PROPERTIES:
   :CLASS: calibre17
   :END:

You can merge the two commands into one.

see [[../emacs/emacs_toggle_comment_by_line.html][Emacs: Toggle Comment
Current Line]]

This will toggle line, when no selection. But if cursor is at end of
line, it'll add line comment there. If there's selection, it'll do
=comment-dwim=.

** Which is Better?
   :PROPERTIES:
   :CLASS: calibre17
   :END:

I think, statistically, toggling of comment by line is by far more
frequently needed than adding comment at end of line.

The current situation isn't ideal. Now, we have 2 commands. plus
=comment-region=, =uncomment-region=. (they don't have keys.)

If would be better that comment-line behavior gets merged into
comment-dwim, by simply tweaking the behavior of comment-dwim:

When there's no selection, if cursor is at the end of line, add comment
to the end of line, else toggle whole line. When there's selection, do
=comment-dwim=.

I've implemented this and used for a year, but never polished it.
+https://github.com/xahlee/xah-comment.el+ 〔it is standalone package,
not dependent on newcomment.el, which is the comment-dwim package.〕

The package is supposed to also handle multi-line comment syntax.

Writing a comment command is actually very fun. It's a sort of pure
problem. You'd think it's simple, but it's rather quite tedius. There
are many different situations you have to deal with, and you have to
think about how you want it to be.

For how to, see [[../emacs/elisp_comment_command.html][Emacs Lisp: How
to Write Your Own Comment Command from Scratch]]

by the way, writing a indentation command is similarly non-trivial. It's
surprising to know, that emacs indentation command, are mostly based on
previous line. That is, just indent to whatever previous line is.

** Emacs Does Not Handle Multi-Line Comment Syntax
   :PROPERTIES:
   :CLASS: calibre17
   :END:

For all emacs's glory, emacs does not handle multi-line comment syntax
in general.

Many languages have both multi-line comment and single-line comment.
Example:

#+BEGIN_SRC emacs-lisp
    /**
     * dot product of 2 vectors
     * @param {array} - u Vector of the form [x,y]
     * @param {array} - v Vector of the form [x,y]
     * @return {number} - the dot product.
     */
    xd.dot = function (u,v) {
        return (u[0]*v[0])+(u[1]*v[1]) // single line comment
    }
#+END_SRC

** History
   :PROPERTIES:
   :CLASS: calibre17
   :END:

The new command comment-line is due to Artur Malabarba. He first wrote
the command:

[Implementing comment-line 2015-01-26 By Artur Malabarba. At
[[http://endlessparentheses.com/implementing-comment-line.html]] ,
accessed on 2016-10-16 ]

He then sent a patch to the emacs dev:

[New in Emacs 25.1: comment-line 2015-02-11 By Artur Malabarba. At
[[http://endlessparentheses.com/new-in-emacs-25-1-comment-line.html]] ,
accessed on 2016-10-16 ]

[[http://lists.gnu.org/archive/html/emacs-devel/2015-01/msg00884.html]]

I reported this as a problem 8 years ago, but got rejected.

- [[https://lists.gnu.org/archive/html/bug-gnu-emacs/2008-10/msg01129.html]]
- [[http://lists.gnu.org/archive/html/bug-gnu-emacs/2008-11/msg00050.html]]

If you have a question, put $5 at
[[https://www.patreon.com/xahlee][patreon]] and message me.\\
Or [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah
Emacs Tutorial]]\\
Or buy [[http://xahlee.info/js/js.html][JavaScript in Depth]]

--------------

This article was downloaded by *calibre* from
[[http://ergoemacs.org/misc/emacs_comment-line_vs_comment-dwim.html]]

\\
\\
| [[../index_u34.html#article_59][段落菜单]] |
[[../../index_u10.html#feed_0][主菜单]] |
