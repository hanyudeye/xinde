* Apache 
** 全局参数设置 
    如果让服务器在两个确定的地址端口组合上接受请求，可以这样设置：
    Listen 192.168.2.2:8080                         #服务器接受 192.168.2.2 地址的 8080 端口上的请求

    如果使用 IPV6 地址，必须用方括号把 IPV6 地址括起来：
    Listen [2001:db8::a00:20ff:fea7:ccea]:80        #监听 2001:db8::a00:20ff:fea7:ccea 地址的 80 端口上的请求

    仅在使用非标准端口时才需要指定 protocol 参数。比如在 8443 端口运行 HTTPS 协议：
    Listen 192.170.2.1:8443 https                   #服务器接受 192.168.2.1 地址的 8443 端口上的以 https 协议请求
    
    语法：LoadModule  模块名称     模块文件路径全名
    例如：LoadModule  php5_module  modules/libphp5.so

User 指令用于设置实际提供服务的子进程的用户。
User daemon                     #通过用户名引用用户 daemon
User #-1                        #通过用户编号引用用户，"#"号后面跟一个用户编号 1

Group 指令指定了用于对客户端请求提供服务的 Apache 子进程运行时的用户组。
Group daemon                    #通过名称引用组 deamon
Group #-1                       #通过编号引用组, "#"号后跟一个组编号(GID)

应该被设置为管理 Web 服务器管理员的邮件地址。当服务器运行出错时，这一地址将被返回给访问者，访问者可以
向此邮件地址发信和 Web 服务器管理员联系。
例如：ServerAdmin  you@example.com

DocumentRoot 指令设置 Web 文档根目录。
例如：DocumentRoot  "/usr/local/apache2/htdocs"

Timeout 300                                     #服务器在断定请求失败前等待的秒数
KeepAlive On                                    #启用 HTTP 持久链接
MaxKeepAliveRequests 100                        #一个持久链接中允许的最大请求数量
KeepAliveTimeout 5                              #持久链接中服务器在两次请求之间等待的秒数
HostnameLookups Off                             #启用对客户端 IP 的 DNS 查找

** 使用配置段（容器） 
    <Directory> </Directory>                    #封装一组指令，使之仅对文件空间中的某个目录及其子目录生效
    <Files> </Files>                            #包含作用于匹配指定文件名的指令
    <Location> </Location>                      #将封装的指令作用于匹配的 URL
    <VirtualHost> </VirtualHost>                        #包含仅作用于指定主机名或 IP 地址的指令

    <IfDefine>、<IfModule>、<IfVersion>仅在启动和重新启动中起作。如果在启动时指定的条件成立，则其中的指令
    对所有的请求都有效，否则将被忽略。


<IfDefine>容器中的指令只有在 httpd 命令行中设定了特定的参数后才有效。下例中，只有在服务器用
httpd-DClosedForNow 方式启动时，所有的请求才会被重定向到另一个站点：

<IfDefine ClosedForNow>                                   #判断服务是否用 httpd-DClosedForNow 方式启动
          Redirect  /http://otherserver.example.com/    #如果条件成功请求才会被重定向到另一个站点
</IfDefine>                                               #条件的结束标记
*** 文件系统容器 
    <Directory /var/web/dir1>                 #为目录/var/web/dir1 设置属性
         <Files private.html>            #为/var/web/dir1 目录及子目录下的 private.html 文件设置属性
                 Order allow,deny      #顺序是先允许后被拒绝
                 Deny from all         #拒绝对文件 private.html 的访问
         </Files>                        #结束一个文件的设置
    </Directory>                              #结束一个目录的设置

*** 网络空间容器 
     <Location>指令与其相应的正则表达式版本（<LocationMatch>）一起作用于网络空间的特定部分。下例中的配置
会拒绝对任何以“/private”开头的 URL 路径的访问，比如：http://yoursite.example.com/ private、
http://yoursite.example.com/private123、http://yoursite.example.com/private/dir/file.html 等所有以
“/private”开头的 URL 路径。


<Location /private>                       #为以/private 开头的 URL 路径设置属性
          Order Allow,Deny              #顺序是先允许后被拒绝
          Deny from all                 #拒绝对/private 开头的 URL 路径的访问
</Location>                               #结束一个网络位置的设置

*** 通配符和正则表达式 
     <Directory>、<Files>、<Location>指令可以使用与 C 标准库中的 fnmatch 类似的 shell 风格的通配符。“*”匹配任
何字符串，“?”匹配任何单个的字符，“[seq]”匹配 seq 序列中的任何字符，符号“/”不被任何通配符所匹配，所
以必须显式地使用。

如果需要更复杂的匹配，这些容器都有一个对应的正则版本：<DirectoryMatch>、<FilesMatch>、
<LocationMatch>，可以使用与 Perl 兼容的正则表达式，以提供更复杂的匹配。但是还必须注意下面配置段的合并
部分关于使用正则表达式会如何作用于配置指令的内容。下例使用非正则表达式的通配符来改变所有用户目录的配
置：


<Directory /home/*/public_html>           #使用非正则表达式的通配符来改变所有用户目录的配置
          Options Indexes               #允许使用目录索引
</Directory>                              #结束一个目录的设置

下例使用正则表达式一次性拒绝对多种图形文件的访问：


<FilesMatch \.(?i:gif|jpe?g|png)$>        #使用正则表达式一次性拒绝对多种图形文件的访问
          Order allow,deny              #顺序是先允许后被拒绝
          Deny from all                 #拒绝对匹配上的图片格式的访问
</FilesMatch>                             #结束一个文件正则的设置


 4 3.5.4　如何选择使用容器 
选择使用文件系统容器还是使用网络空间容器其实很简单。当指令应该作用于文件系统时，总是用<Directory>或
<Files>；而当指令作用于不存在于文件系统的对象时，就用<Location>，比如一个由数据库生成的网页。绝对不要
试图用<Location>去限制对文件系统中的对象的访问，因为许多不同的网络空间路径可能会映射到同一个文件系统
目录，从而导致你的访问限制被突破。比如：


<Location /dir/>                          #为以/dir/开头的 URL 路径设置属性
         Order allow,deny               #顺序是先允许后被拒绝
          Deny from all                 #拒绝对/dir/开头的 URL 路径的访问
</Location>                               #结束一个网络位置的设置

上述配置对 http://yoursite.example.com/dir/请求的确起作用。但是设想一下，在一个不区分大小写的文件系统
中，这个访问限制会被 http://yoursite.example.com/DIR/请求轻易突破。而<Directory>指令才会真正作用于对这
个位置的任何形式的请求。但是有一个例外，就是 UNIX 文件系统中的符号连接（软连接），符号连接可以使同一个
目录出现在文件系统中的多个位置。<Directory>指令将不重设路径名而直接追踪符号连接，因此，对于安全要求最
高的，应该用 Options 指令禁止对符号连接的追踪。

不要认为使用大小写敏感的文件系统就无所谓了，因为有很多方法可以将不同的网络空间路径映射到同一个文件系
统路径，所以，应当尽可能使用文件系统容器。但是也有一个例外，就是把访问限制放在<Location/>配置段中可以
很安全地作用于除了某些特定 URL 以外的所有 URL。

<VirtualHost>容器作用于特定的虚拟主机，为同一个机器上具有不同配置的多个主机提供支持。在后面的章节中将
详细介绍。


 6 3.6　.htaccess 文件和访问限制 
　.htaccess 文件和访问限制

.htaccess 文件（或者“分布式配置文件”）提供了针对每个目录改变配置的方法，即在一个特定的目录中放置一个
包含指令的文件，其中的指令作用于此目录及其所有子目录。任何出现在配置文件中的指令都可能出现
在.htaccess 文件中。该文件在 httpd.conf 文件的 AccessFileName 指令中指定，用于进行针对单一目录的配置。在
服务器配置文件中按以下方法配置：


AccessFileName  .htaccess



                     #在主配置文件中设置访问.htaccess 文件

一般情况下，不应该使用.htaccess 文件，除非你对主配置文件没有访问权限。有一种很常见的误解，认为用户认证
只能通过.htaccess 文件实现，其实并不是这样，把用户认证写在主配置文件中是完全可行的，而且是一种很好的方
法。

.htaccess 文件应该被用在内容提供者需要针对特定目录改变服务器的配置而又没有 root 权限的情况下。如果服务器
管理员不愿意频繁修改配置，则可以允许用户通过.htaccess 文件自己修改配置，尤其是 ISP 在同一个机器上运行了
多个用户站点，而又希望用户可以自己改变配置的情况下。

虽然如此，一般都应该尽可能地避免使用.htaccess 文件。任何希望放在.htaccess 文件中的配置，都可以放在主配置
文件的<Directory>段中，而且更高效。避免使用.htaccess 文件有两个主要原因：首先是性能。如果
AllowOverride 启用了.htaccess 文件，则 Apache 需要在每个目录中查找.htaccess 文件，因此，无论是否真正用
到，启用.htaccess 都会导致性能的下降。另外，对每一个请求，都需要读取一次.htaccess 文件。Apache 必须在所
有上级的目录中查找.htaccess 文件，以使所有有效的指令都起作用。其次是安全。这样会允许用户自己修改服务器
的配置，这可能会导致某些意想不到的修改，所以请认真考虑是否应当给予用户这样的特权。将 AllowOverride 设置
为 none 可以完全禁止使用.htaccess 文件：


AllowOverride None



                                    #完全禁止使用.htaccess 文件

3.6.1　设置路径别名

在使用.htaccess 文件之前，我们使用 Alias 指令设置一个路径别名。将/var/www/html 目录的别名设置为 dir，这样
我们可以在浏览器里通过别名 dir 去访问/var/www/html 目录下面的网页文件了，并且可以使用<Directory>容器指
令对/var/www/html 目录做访问控制。之后在把同样的访问控制改为使用.htaccess 文件方式完成。设置路径别名和
目录权限控制，可以在主配置文件 httpd.conf 中加入以下指令。具体设置如下：


Alias /dir/  "/var/www/html/"                   #使用 Alias 设置别名
<Directory "/var/www/html">               #使用<Directory>容器指令设置/var/www/html 目录访问权限控制
        Options Indexes FollowSymLinks          #当访问时可以允许出现目录列表和符号链接
        AllowOverride None                      #禁止使用.htaccess 文件
        Order allow,deny                        #顺序是先允许后被拒绝
        allow from all                          #允许所有对这个目录的访问
</Directory>                              #结束一个目录的设置
 
图 3-2　设置别名路径的访问结果

配置文件按上面的设置以后，重新启动 Apache 服务器。如果服务器所在的主机为 yoursite.example.com，则在浏
览器中通过 http:// yoursite.example.com/dir/地址访问服务器中/var/www/html/目录下面的文件。在
/var/www/html/目录下新建一个 test.html 和一个 demo.html 文件，如果直接访问该目录就可以看到目录索引列
表，如图 3-2 所示。

在上面的配置中，<Directory>容器指令中使用的指令具体说明如下：

1．Options 指令 

Options 指令控制了在特定目录中将使用哪些服务器特性。Options 可以为 None、All 或者任何 Indexes、Include
s、FollowSymlinks、ExecCGI 或者 MultiViews 的组合。MultiViews 不包含在 All 中，必须显式指定。这些选项解释
如表 3-3 所示。

表 3-3　Options 指令选项值的解释 

 选项名  描　述  
 None  在这种情况下，将不启用任何额外特性  
 All  除 MultiViews 之外的所有特性。这是默认设置  
 Indexes  如果一个映射到目录的 URL 被请求，而此目录中又没有 DirectoryIndex（例如：  
   index.html），那么服务器会返回由 mod_autoindex 生成的一个格式化后的目录列表  
 Includes  允许使用 mod_include 提供的服务器端包含  
 FollowSymLinks  服务器允许在此目录中使用符号链接  

符号链接的使用如下：


[root@localhost html]# ln –s /var/share/doc  /var/www/html/doc         #在 Linux 命令行创建软链接

通过上面的链接，我们在浏览器中访问 http://yoursite.example.com/dir/doc/，就可以将访问位置链接到
/var/share/doc 目录下面。

注意： 即使服务器会使用符号连接，但它不会改变用于匹配<Directory>段的路径名。 

如果此配置位于<Location>配置段中，则此设置会被忽略。 

2．AllowOverrides 指令 

确定允许存在于.htaccess 文件中的指令类型。当服务器发现一个.htaccess 文件（由 AccessFileName 指定）时，它
需要知道在这个文件中声明的哪些指令能覆盖在此之前指定的配置指令。AllowOverride 仅在不包含正则表达式的
<Directory>配置段中才是有效的。在<Location>，<DirectoryMatch>，<Files>配置段中都是无效的。如果此指令
被设置为 None，那么.htaccess 文件将被完全忽略。事实上，服务器根本不会读取.htaccess 文件。当此指令设置为
All 时，所有具有“.htaccess”作用域的指令都允许出现在.htaccess 文件中。

3．Order 指令 

Order 指令控制默认的访问状态与 Allow 和 Deny 指令生效的顺序。表明用户是先设置允许的访问地址还是先设置禁止
访问的地址。

4．Allow 指令 

Allow 指令控制哪些主机可以访问服务器的该区域。可以根据主机名、IP 地址、IP 地址范围或其他环境变量中捕获的
客户端请求特性进行控制。如指定“Allow from all”，则允许所有主机访问。

5．Deny 指令 

这条指令允许基于主机名、IP 地址或者环境变量限制对服务器的访问。Deny 指令的参数设置和 Allow 指令完全相
同。如指定“Deny from all”，则禁止所有主机访问。

3.6.2　在.htaccess 文件中设置目录的访问限制

启用并控制使用.htaccess 文件，可以在 Apache 的主配置文件中将 AccessFileName 指令的参数设置为.htaccess，按
如下内容修改即可启用.htaccess 文件功能。启用.htaccess 文件如下：


AccessFileName .htaccess                        #某个目录启用分布式配置文件功能
<FilesMatch "^\.ht">                              #设置文件名称，并且设置客户端无法修改.htaccess 文件
    Order allow,deny
    Deny from all
</FilesMatch>

任何出现在配置文件中的指令都可能出现在.htaccess 文件中。通常，.htaccess 文件使用的配置语法和主配置文件一
样。AllowOverride 指令按类别决定了.htaccess 文件中哪些指令才是有效的。我们将上例别名的设置路径
/var/www/html 的访问限制，重新改写成使用.htaccess 文件进行控制。首先在主配置文件 httpd.conf 中将上例
<Directory>容器指令中的内容修改写成如下内容：


Alias /dir/  "/var/www/html/"                   #使用 Alias 设置别名
<Directory "/var/www/html">                       #使用<Directory>容器指令设置/var/www/html 目录访问权限控制
        AllowOverride All                       #将上例参数 none 改写成 all 即可以使用.htaccess 文件
</Directory>

上面所示将<Directory>容器指令中的内容除了留下 AllowOverride 指令，删除了其余三个指令。并将指令
AllowOverride 的值由原来的 None 改成 All，即具有“.htaccess”作用域的指令都允许出现在.htaccess 文件中。

在别名设置目录/var/www/html 中新建一个.htaccess 文件，将删除掉的三个指令写入到这个文件中，这样在
Apache 服务器寻找目录时就可以使用.htaccess 文件来对这个目录进行访问限制了。如下所示：


[root@localhost html]# vi /var/www/html/.htaccess       //编辑此文件写入下面内容
Options Indexes FollowSymLinks
Order allow,deny
Allow from all

不用重新启动 Apache 服务器即可以使用.htaccess 文件中的目录访问限制，打开浏览器同样输入 URL 为
http://yoursite.example.com/dir/，同样可以看到目录列表，表示使用.htaccess 文件设置些目录访问限制成功。


 1 3.6.1　设置路径别名 
 2 3.6.2　在.htaccess 文件中设置目录的访问限制 

 7 3.7　设置虚拟主机 

 1 3.7.1　基于 IP 地址的虚拟主机 
 2 3.7.2　基于主机名的虚拟主机 

 8 3.8　小结 
 9 自测题 
** Apache 配置虚拟主机三种方式
*** 一、基于 IP(一个网卡配置多个 IP, 那么这几个 IP 都是指向自己的, 服务程序监控这几个 IP)
  1. 假设服务器有个 IP 地址为 192.168.1.10，使用 ifconfig 在同一个网络接口 eth0 上绑定 3 个 IP：

 [root@localhost root]# ifconfig eth0:1 192.168.1.11
 [root@localhost root]# ifconfig eth0:2 192.168.1.12
 [root@localhost root]# ifconfig eth0:3 192.168.1.13

 网卡可以绑定好多个 ip
  2. 修改 hosts 文件，添加三个域名与之一一对应：

 192.168.1.11   www.test1.com
 192.168.1.12   www.test2.com
 192.168.1.13   www.test3.com

 可有可无

  3. 建立虚拟主机存放网页的根目录，如在/www 目录下建立 test1、test2、test3 文件夹，其中分别存放 1.html、2.html、3.html

 /www/test1/1.html
 /www/test2/2.html
 /www/test3/3.html

  1. 在 httpd.conf 中将附加配置文件 httpd-vhosts.conf 包含进来，接着在 httpd-vhosts.conf 中写入如下配置：
 
 <VirtualHost 192.168.1.11:80>
 　　ServerName www.test1.com
 　　DocumentRoot /www/test1/
 　　<Directory "/www/test1">
  　　　　Options Indexes FollowSymLinks
 　　　　 AllowOverride None
 　　　　 Order allow,deny
 　　 　　Allow From All
  　 </Directory>
 </VirtualHost>

 <VirtualHost 192.168.1.12:80>
 　　ServerName www.test1.com
 　　DocumentRoot /www/test2/
 　　<Directory "/www/test2">
  　　　　Options Indexes FollowSymLinks
 　　　　 AllowOverride None
 　　　　 Order allow,deny
 　　 　　Allow From All
  　 </Directory>
 </VirtualHost>

 <VirtualHost 192.168.1.13:80>
 　　ServerName www.test1.com
 　　DocumentRoot /www/test3/
 　　<Directory "/www/test3">
  　　　　Options Indexes FollowSymLinks
 　　　　 AllowOverride None
 　　　　 Order allow,deny
 　　 　　Allow From All
  　 </Directory>
 </VirtualHost>
 复制代码
  5. 大功告成，测试下每个虚拟主机，分别访问 www.test1.com、www.test2.com、www.test3.com

 
*** 二、基于主机名(hosts 中几个主机名都指向本机, 然后服务器监控这几个主机名)
  1. 设置域名映射同一个 IP，修改 hosts：

 192.168.1.10  www.test1.com
 192.168.1.10  www.test2.com
 192.168.1.10  www.test3.com
  2. 跟上面一样，建立虚拟主机存放网页的根目录

 /www/test1/1.html
 /www/test2/2.html
 /www/test3/3.html
  3. 在 httpd.conf 中将附加配置文件 httpd-vhosts.conf 包含进来，接着在 httpd-vhosts.conf 中写入如下配置：
 

 　　为了使用基于域名的虚拟主机，必须指定服务器 IP 地址（和可能的端口）来使主机接受请求。可以用 NameVirtualHost 指令来进行配置。 如果服务器上所有的 IP 地址都会用到， 你可以用*作为 NameVirtualHost 的参数。在 NameVirtualHost 指令中指明 IP 地址并不会使服务器自动侦听那个 IP 地址。 这里设定的 IP 地址必须对应服务器上的一个网络接口。
 　　下一步就是为你建立的每个虚拟主机设定<VirtualHost>配置块，<VirtualHost>的参数与 NameVirtualHost 指令的参数是一样的。每个<VirtualHost>定义块中，至少都会有一个 ServerName 指令来指定伺服哪个主机和一个 DocumentRoot 指令来说明这个主机的内容存在于文件系统的什么地方。

 　　如果在现有的 web 服务器上增加虚拟主机，必须也为现存的主机建造一个<VirtualHost>定义块。其中 ServerName 和 DocumentRoot 所包含的内容应该与全局的保持一致，且要放在配置文件的最前面，扮演默认主机的角色。


 NameVirtualHost *:80
 <VirtualHost *:80>  
 　　ServerName *

 　　DocumentRoot /www/ 

 </VirtualHost>

 <VirtualHost *:80>

 　　ServerName www.test1.com

 　　DocumentRoot /www/test1/

 　　<Directory "/www/test1">

 　　　　Options Indexes FollowSymLinks

 　　　　AllowOverride None

 　　　　Order allow,deny

 　　　　Allow from all

 　　</Directory>

 </VirtualHost> 

 

 <VirtualHost *:80>

 　　ServerName www.test2.com

 　　DocumentRoot /www/test2/

 　　<Directory "/www/test2">

 　　　　Options Indexes FollowSymLinks

 　　　　AllowOverride None

 　　　　Order allow,deny

 　　　　Allow from all

 　　</Directory>

 </VirtualHost>
 <VirtualHost *:80>

 　　ServerName www.test3.com

 　　DocumentRoot /www/test3/

 　　<Directory "/www/test3">

 　　　　Options Indexes FollowSymLinks

 　　　　AllowOverride None

 　　　　Order allow,deny

 　　　　Allow from all

 　　</Directory>

 </VirtualHost>
 复制代码
  4. 大功告成，测试下每个虚拟主机，分别访问 www.test1.com、www.test2.com、www.test3.com

 
*** 三、基于端口

 1.  修改配置文件
 　　将原来的

 　　 　Listen 80
       改为
     　　Listen 80
    　　 Listen 8080


 2. 更改虚拟主机设置：


 <VirtualHost 192.168.1.10:80>
     DocumentRoot /var/www/test1/
     ServerName www.test1.com
 </VirtualHost>

 <VirtualHost 192.168.1.10:8080>
     DocumentRoot /var/www/test2
     ServerName www.test2.com
 </VirtualHost>
 复制代码
** ubuntu 
在 ubuntu 安装完 apache 之后，默认会往系统中增加 www-data 用户 和 www-data 用户组，同样你可以用 ps -ef | grep apache 查看 apache 进程，你会发现 apache 的
  
 主进程是用 root 用户启动的，那么子线程的用户都是 www-data 这个用户。

 这样你就可以理解为这个 apache 服务器运行的用户和用户组是 www-data,假设网站的用户为 demo,项目的目录为/var/www/html/demo

 接下来就分几个步骤来设置(用 root 用户执行下面的命令)：

 1.首先把网站的的目录和文件的所有者设置为 demo,所属组设置为 www-data，对与 Linux 命令不熟悉的，可以到网上查询。

 chown -R demo:www-data /var/www/html/demo
 2.设置网站目录权限为 750，750 是 demo 这个用户对目录拥有读写执行的权限，这样 demo 用户可以在任何目录下创建文件，用户组有有读执行权限，这样就有进入目录的权限，其它用户没有任何权限。

 chmod 750 /var/www/html/demo
 cd  /var/www/html/demo
 find -type d -exec chmod 750 {} \;
 3.设置网站文件权限为 640，640 指只有 demo 用户对网站文件有更改的权限，apache 服务器只有读取文件的权限，无法更改文件，其它用户无任何权限。

 find -not -type d -exec chmod 640 {} \;
 4.需要针对个别目录来设置权限，以 Thinkphp 为例，它的 Runtime 目录存储的有日志文件，还有与数据库做 ORM 映射的数据库表信息，这说明 apache 服务器要对这些目录

 有访问的权限，并且对于线面的日志文件有写入的权限，那么这样就需要对于这些特殊目录设置。

 cd /var/www/html/demo
 find . -name "Runtime" -type d -exec chmod -R 770 {} \;
 执行上面的命令请注意 “{}”与 “\”之间是有空格的，上面的-R 参数是递归给 Runtime 目录下面的目录和文件赋予 770 权限，当然了你会说日志文件是不需要执行权限的，

 不过这里没关系，当你把日志文件删除掉之后，生成出来的文件是没执行权限的。因为当你把日志文件删除掉之后，那么生成日志文件的的用户和所有者都是 www-data,

 所以新的日志文件权限就会变成下面这样：



 这样整个站点你就可以通过这种方式管理起来了。
* nginx
* lnmp
安装 nginx
apt-get 方法安装 nginx sudo apt-get install nginx
查看 nginx 安装后相关文件目录
安装目录是/etc/nginx
启动 nginx 服务 sudo /etc/init.d/nginx start,成功后显示 ok Starting nginx(via systemctl):nginx.service.
在使用 netstat -anp 查看端口之前，需要安装 net-tools,`sudo apt install
net-tools`安装好之后，就可以使用了。
直接查看 80 端口的命令是 sudo lsof -i:80
在浏览器中输入 127.0.0.1 可以看见 nginx 的欢迎页面
安装 php7.2 版本
sudo apt-get install php7.2 php7.2-fpm
查看 php 版本信息 php -v,显示结果 php 7.2.4-1+ubuntu18.04.1+deb.sury.org+1(cli)(built: Apr 5 2018 08:48:14)(NTS)
Nginx 与 php-fpm 集成
php-fpm 与 nginx 通信方式有两种，一种是基于 tcp 的 Internet domain socket 方式，一种是 UNIX
domain socket 方式。
UNIX domain socket 可以使同一台操作系统上的两个或多个进程进行数据通信。UNIX domain 
socket 接口和 Internet domain socket 很像，但它不是用网络底层协议来通信。
服务器压力不大的情况下，这两种方式性能差别不大，但在压力比较满的时候，用 UNIX domain socket 方式，效果很好。
相信大家知道网站根目录通常在 
/etc/nginx/sites-available/default 配置文件中，nginx 已经将 php 和 php-fpm 的整合准备好了，还需要在这个文件中改以下东西
为了编辑文件，需要安装 vim sudo apt install vim 这个命令会建议你安装 ctags vim-doc
vim-scripts 那就根据建议来好了 sudo apt install ctags vim-doc vim-scripts
在编辑文件之前，注意切换到 root，sudo -i vim /etc/nginx/sites-available/default
按下键盘上的 Insert 就可以编辑文件了

#location ~ .php$ {

   #       include snippets/fastcgi-php.conf;
   #
   #       # With php-fpm (or other unix sockets):
   #       fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
   #       # With php-cgi (or other tcp sockets):
   #       fastcgi_pass 127.0.0.1:9000;
#}

在这几行注释代码下，添加如下代码即可，选择 unix sockets 方式
location ~ .php$ {

   include snippets/fastcgi-php.conf;
   # With php-fpm (or other unix sockets):
   fastcgi_pass unix:/run/php/php7.2-fpm.sock;
}

编辑完成之后，按下键盘 Esc,并用键盘输入 :wq 就可以修改成功了
继续编辑，切换到 root，sudo -i 命令行 vim /etc/php/7.2/fpm/pool.d/www.conf
代码有 listen = /run/php/php7.2-fpm.sock
配置好后重启服务：sudo /etc/init.d/nginx restart 还有 `sudo
/etc/init.d/php7.2-fpm restart`
安装 mysql
命令行 `sudo apt-get -y install mysql-server mysql-client php7.2-mysql
在安装 mysql 的过程中，没有提示输入密码，通过查询 mysql 官网，输入命令 mysql_secure_installation
设置密码
* Tomcat
** 主要配置文件
*** server.xml
    tomcat的主配置文件，包含service,connectors,engine,realm,valve,hosts等组件
*** web.xml
    遵循Servlet规范标准的配置文件，用于配置servlet，并为所有的Web应用程序提供包括
    MIME映射等默认配置信息；
*** tomcat-user.xml
    Realm认证时用到的相关角色、用户和密码等信息；Tomcat自带的manager默认情况下会用到此文件；在Tomcat中添加/删除用户，为用户指定角色等将通过编辑此文件实现
*** catalina.policy
 java相关的安全策略配置文件，在系统资源级别上提供访问控制的能力
*** catalina.properties
 Tomcat内部package的定义及访问相关的控制，也包括对通过类装载器装载的内容的控制；Tomcat在启动时会事先读取此文件的相关设置；
*** logging.properties
    Tomcat通过自己内部实现的JAVA日志记录器来记录操作相关的日志，此文件即为日志记录器相关的配置信息，可以用来定义日志记录的组件级别以及日志文件的存在位置等
*** context.xml
 所有host的默认配置信息
*** 下面详解介绍上述主要配置文件的参数及作用
 先看下一个server.xml例子
 
 #+begin_src xml
   <pre><Server port="8005" shutdown="SHUTDOWN">
     <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
     <Listener className="org.apache.catalina.core.JasperListener" />
     <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
     <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
     <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

     <GlobalNamingResources>
       <Resource name="UserDatabase" auth="Container"
                 type="org.apache.catalina.UserDatabase"
                 description="User database that can be updated and saved"
                 factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                 pathname="conf/tomcat-users.xml" />
     </GlobalNamingResources>
     <Service name="Catalina">
       <Connector port="8080" protocol="HTTP/1.1"
                  connectionTimeout="20000"
                  redirectPort="8443" />
       <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />

       <Engine name="Catalina" defaultHost="localhost">

         <Realm className="org.apache.catalina.realm.LockOutRealm">
           <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                  resourceName="UserDatabase"/>
         </Realm>

         <Host name="localhost"  appBase="webapps"
               unpackWARs="true" autoDeploy="true">

           <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                  prefix="localhost_access_log." suffix=".txt"
                  pattern="%h %l %u %t &quot;%r&quot; %s %b" />

         </Host>
       </Engine>

     </Service>
   </Server></pre>
 #+end_src
 下面解释下主要参数的意义

 <code><Server port=”8005” shutdown=”SHUTDOWN”></code>
 
 tomcat启动一个server实例（即一个JVM），它监听在8005端口以接收shutdown命令。各
 Server的定义不能使用同一个端口，这意味着如果在同一个物理机上启动了多个Server实
 例，必须配置它们使用不同的端口。

 部分参数意义：
 <pre>className: 用于实现此Server容器的完全限定类的名称，默认为org.apache.catalina.core.StandardServer；
 port: 接收shutdown指令的端口，默认仅允许通过本机访问，默认为8005；
 shutdown：发往此Server用于实现关闭tomcat实例的命令字符串，默认为SHUTDOWN；</pre>

 <code><Service name=”Catalina”></code>
 这定义了一个名为Catalina的Service，此名字也会在产生相关的日志信息时记录在日志文
 件当中。

 部分参数意义：
 <pre>className： 用于实现service的类名，一般都是org.apache.catalina.core.StandardService
 name：此服务的名称，默认为Catalina；</pre>

 <code><Connector port="8080" protocol="HTTP/1.1"
 maxThreads="150" connectionTimeout="20000"
 redirectPort="8443"/></code>
 以及
 <code><Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /></code>

 进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类：
 Tomcat作为应用程序服务器：请求来自于前端的web服务器，这可能是Apache, IIS, Nginx等；
 Tomcat作为独立服务器：请求来自于web浏览器；

 Tomcat应该考虑工作情形并为相应情形下的请求分别定义好需要的连接器才能正确接收来
 自于客户端的请求。一个引擎可以有一个或多个连接器，以适应多种请求方式。
 
 定义连接器可以使用多种属性，有些属性也只适用于某特定的连接器类型。一般说来，常
 见于server.xml中的连接器类型通常有4种：
 HTTP连接器
 SSL连接器
 AJP 1.3连接器
 proxy连接器


 定义连接器时可以配置的属性非常多，但通常定义HTTP连接器时必须定义的属性只有
 “port”，定义AJP连接器时必须定义的属性只有"protocol"，因为默认的协议为HTTP。以
 下为常用属性的说明：
 address：指定连接器监听的地址，默认为所有地址，即0.0.0.0；
 maxThreads：支持的最大并发连接数，默认为200；
 port：监听的端口，默认为0；
 protocol：连接器使用的协议，默认为HTTP/1.1，定义AJP协议时通常为AJP/1.3；
 redirectPort：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口；
 connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；
 enableLookups：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true；

 acceptCount：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；
 下面是一个定义了多个属性的SSL连接器：
 
 #+begin_src xml 
   <pre><Connector port="8443"
   maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
   enableLookups="false" acceptCount="100" debug="0" scheme="https" secure="true"
   clientAuth="false" sslProtocol="TLS" /></pre>
 #+end_src

 <code><Engine name="Catalina" defaultHost="localhost"></code>
 Engine是Servlet处理器的一个实例，即servlet引擎，默认为定义在server.xml中的Catalina。Engine需要defaultHost属性来为其定义一个接收所有发往非明确定义虚拟主机的请求的host组件。
 部分参数意义：
 <pre>defaultHost：Tomcat支持基于FQDN的虚拟主机，这些虚拟主机可以通过在Engine容器中定义多个不同的Host组件来实现；但如果此引擎的连接器收到一个发往非非明确定义虚拟主机的请求时则需要将此请求发往一个默认的虚拟主机进行处理，因此，在Engine中定义的多个虚拟主机的主机名称中至少要有一个跟defaultHost定义的主机名称同名；
 name：Engine组件的名称，用于日志和错误信息记录时区别不同的引擎；</pre>

 位于Engine容器中用于接收请求并进行相应处理的主机或虚拟主机，如前面示例中的定义：
 
 #+begin_src xml
   <pre>  <Host name="localhost" appBase="webapps"
                unpackWARs="true" autoDeploy="true"
                xmlValidation="false" xmlNamespaceAware="false">
   </Host></pre>
 #+end_src

 常见属性说明
 <pre>常用属性说明：

 appBase：此Host的webapps目录，即存放非归档的web应用程序的目录或归档后的WAR文件
 的目录路径；可以使用基于$CATALINA_HOME的相对路径；
 
 autoDeploy：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行
 deploy；默认为true；
 
 unpackWars：在启用此webapps时是否对WAR格式的归档文件先进行展开；默认为true；
 </pre>

 虚拟主机定义示例：
 
 #+begin_src xml 
   <pre>
     <Engine name="Catalina" defaultHost="localhost">
       <Host name="localhost" appBase="webapps">
         <Context path="" docBase="ROOT"/>
         <Context path="/bbs" docBase="/web/bss"
                  reloadable="true" crossContext="true"/>
       </Host>
       <Host name="mail.tiantian.com" appBase="/web/mail">
         <Context path="" docBase="ROOT"/>
       </Host>
     </Engine>
   </pre>
 #+end_src
 主机别名定义:
 如果一个主机有两个或两个以上的主机名，额外的名称均可以以别名的形式进行定义
 <pre><Host name="www.tiantian.com" appBase="webapps" unpackWARs="true">
 <Alias>tiantian.com</Alias>
 </Host>
 </pre>


 一个Context定义用于标识tomcat实例中的一个Web应用程序
 #+begin_src xml
   <pre>
     <Context path="" docBase="/web/webapps"/>

     <Context path="/bbs"
              docBase="/web/threads/bbs"
              reloadable="true">
     </Context>

     <Context path="/chat" docBase="/web/chat"/>

     <Context path="/darian" docBase="darian"/>
   </pre>
 #+end_src
 每一个context定义也可以使用一个单独的XML文件进行，其文件的目录为$CATALINA_HOME/conf/<engine name>/<host name>
 <p>
 部分参数解释：
 <pre>1) docBase：相应的Web应用程序的存放位置；也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径；切记，docBase的路径名不能与相应的Host中appBase中定义的路径名有包含关系，比如，如果appBase为deploy，而docBase绝不能为deploy-bbs类的名字；



 path：相对于Web服务器根路径而言的URI；如果为空“”，则表示为此webapp的根路径；如果context定义在一个单独的xml文件中，此属性不需要定义；
 reloadable：是否允许重新加载此context相关的Web应用程序的类；默认为false；
 </pre>
 <p>


 一个Realm表示一个安全上下文，它是一个授权访问某个给定Context的用户列表和某用户所允许切换的角色相关定义的列表。因此，Realm就像是一个用户和组相关的数据库。定义Realm时惟一必须要提供的属性是classname，它是Realm的多个不同实现，用于表示此Realm认证的用户及角色等认证信息的存放位置。

 JAASRealm：基于Java Authintication and Authorization Service实现用户认证；
 JDBCRealm：通过JDBC访问某关系型数据库表实现用户认证；
 JNDIRealm：基于JNDI使用目录服务实现认证信息的获取；
 MemoryRealm：查找tomcat-user.xml文件实现用户信息的获取；
 UserDatabaseRealm：基于UserDatabase文件(通常是tomcat-user.xml)实现用户认证，它实现是一个完全可更新和持久有效的MemoryRealm，因此能够跟标准的MemoryRealm兼容；它通过JNDI实现；
 下面是一个常见的使用UserDatabase的配置：
 <pre><Realm className=”org.apache.catalina.realm.UserDatabaseRealm”
 resourceName=”UserDatabase”/></pre>
 下面是一个使用JDBC方式获取用户认证信息的配置：
 <pre><Realm className="org.apache.catalina.realm.JDBCRealm" debug="99"
 driverName="org.gjt.mm.mysql.Driver"
 connectionURL="jdbc:mysql://localhost/authority"
 connectionName="test" connectionPassword="test"
 userTable="users" userNameCol="user_name"
 userCredCol="user_pass"
 userRoleTable="user_roles" roleNameCol="role_name" /></pre>

 Valve类似于过滤器，它可以工作于Engine和Host/Context之间、Host和Context之间以及Context和Web应用程序的某资源之间。一个容器内可以建立多个Valve，而且Valve定义的次序也决定了它们生效的次序。

 下面介绍常见的两种Valve。一个是RemoteHostValve，一个是RemoteAddrValve。
 <code>RemoteHostValve</code>:基于主机名称的访问控制,,控制本身可以通过allow或deny来进行定义
 <code>RemoteAddrValve</code>:基于IP地址的访问控,,控制本身可以通过allow或deny来进行定义
 <pre>  <Context path="/probe" docBase="probe">
 <Valve className="org.apache.catalina.valves.RemoteAddrValve"
 allow="127.0.0.1"/>
 </Context></pre>
 其中相关参数解释：
 <pre>其中相关属性定义有:

 className：相关的java实现的类名，相应于分别应该为org.apache.catalina.valves.RemoteHostValve或org.apache.catalina.valves.RemoteAddrValve；
 allow：以逗号分开的允许访问的IP地址列表，支持正则表达式，因此，点号“.”用于IP地址时需要转义；仅定义allow项时，非明确allow的地址均被deny；
 deny: 以逗号分开的禁止访问的IP地址列表，支持正则表达式；使用方式同allow；</pre>

 <h6>到这里，server.xml主要组件介绍的差不多了。其实远不止这么多属性，但是正常够我们用即可。如果还想再深入研究tomcat，当然去官方文档深入学习了。
 下面再附上一张更详配置文件结合相应web场景，相信大家对server.xml会有更好的理解。
 规划： 
 网站网页目录：/web/www      域名：www.test1.com 
 论坛网页目录：/web/bbs     URL：bbs.test1.com/bbs 
 网站管理程序：$CATALINA_HOME/wabapps   URL：manager.test.com    允许访问地址：172.23.136.* 
 
 conf/server.xml 
 <Server port="8005" shutdown="SHUTDOWN"> 
   <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" /> 
   <Listener className="org.apache.catalina.core.JasperListener" /> 
   <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" /> 
   <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" /> 
   <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" /> 
   <GlobalNamingResources> 
   <!-- 全局命名资源，来定义一些外部访问资源，其作用是为所有引擎应用程序所引用的外部资源的定义 --!> 
     <Resource name="UserDatabase" auth="Container" 
               type="org.apache.catalina.UserDatabase" 
               description="User database that can be updated and saved" 
               factory="org.apache.catalina.users.MemoryUserDatabaseFactory" 
               pathname="conf/tomcat-users.xml" /> 
   </GlobalNamingResources> 
   <!-- 定义的一个名叫“UserDatabase”的认证资源，将conf/tomcat-users.xml加载至内存中，在需要认证的时候到内存中进行认证 --> 
   <Service name="Catalina"> 
   <!-- # 定义Service组件，同来关联Connector和Engine，一个Engine可以对应多个Connector，每个Service中只能一个Engine --!> 
     <Connector port="80" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /> 
     <!-- 修改HTTP/1.1的Connector监听端口为80.客户端通过浏览器访问的请求，只能通过HTTP传递给tomcat。  --> 
     <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /> 
     <Engine name="Catalina" defaultHost="test.com"> 
     <!-- 修改当前Engine，默认主机是，www.test.com  --> 
     <Realm className="org.apache.catalina.realm.LockOutRealm"> 
         <Realm className="org.apache.catalina.realm.UserDatabaseRealm" 
                resourceName="UserDatabase"/> 
     </Realm> 
     # Realm组件，定义对当前容器内的应用程序访问的认证，通过外部资源UserDatabase进行认证 
       <Host name="test.com"  appBase="/web" unpackWARs="true" autoDeploy="true"> 
       <!--  定义一个主机，域名为：test.com，应用程序的目录是/web，设置自动部署，自动解压    --> 
         <Alias>www.test.com</Alias> 
         <!--    定义一个别名www.test.com，类似apache的ServerAlias --> 
         <Context path="" docBase="www/" reloadable="true" /> 
         <!--    定义该应用程序，访问路径""，即访问www.test.com即可访问，网页目录为：相对于appBase下的www/，即/web/www，并且当该应用程序下web.xml或者类等有相关变化时，自动重载当前配置，即不用重启tomcat使部署的新应用程序生效  --> 
         <Context path="/bbs" docBase="/web/bbs" reloadable="true" /> 
         <!--  定义另外一个独立的应用程序，访问路径为：www.test.com/bbs，该应用程序网页目录为/web/bbs   --> 
         <Valve className="org.apache.catalina.valves.AccessLogValve" directory="/web/www/logs" 
                prefix="www_access." suffix=".log" 
                pattern="%h %l %u %t &quot;%r&quot; %s %b" /> 
         <!--   定义一个Valve组件，用来记录tomcat的访问日志，日志存放目录为：/web/www/logs如果定义为相对路径则是相当于$CATALINA_HOME，并非相对于appBase，这个要注意。定义日志文件前缀为www_access.并以.log结尾，pattern定义日志内容格式，具体字段表示可以查看tomcat官方文档   --> 
       </Host> 
       <Host name="manager.test.com" appBase="webapps" unpackWARs="true" autoDeploy="true"> 
       <!--   定义一个主机名为man.test.com，应用程序目录是$CATALINA_HOME/webapps,自动解压，自动部署   --> 
         <Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="172.23.136.*" /> 
         <!--   定义远程地址访问策略，仅允许172.23.136.*网段访问该主机，其他的将被拒绝访问  --> 
         <Valve className="org.apache.catalina.valves.AccessLogValve" directory="/web/bbs/logs" 
                prefix="bbs_access." suffix=".log" 
                pattern="%h %l %u %t &quot;%r&quot; %s %b" /> 
         <!--   定义该主机的访问日志      --> 
       </Host> 
     </Engine> 
   </Service> 
 </Server> 
 
 conf/tomcat-users.xml 
 <?xml version='1.0' encoding='utf-8'?> 
 <tomcat-users> 
   <role rolename="manager-gui" /> 
   <!--  定义一种角色名为：manager-gui    --> 
   <user username="cz" password="manager$!!110" roles="manager-gui" /> 
   <!--  定义一个用户的用户名以及密码，并赋予manager-gui的角色    --> 
 </tomcat-users>
** 配置虚拟主机 
*** 方式一：这种配置方式需要重启服务器不推荐
    1.hosts 文件 127.0.0.1 www.yinzhengjie.org.cn

  2. 编辑Server.xml配置文件，添加虚拟主机信息
 #+begin_src xml
       <Host name="www.yinzhengjie.org.cn"  appBase="/home/yinzhengjie/data/www/webapps" unpackWARs="true" autoDeploy="true">
         <context path="" docBase="ROOT" reloadable="true" />
         <context path="/test" docBase="test" reloadable="true" />

         <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                prefix="yinzhengjie.org.cn_access_log" suffix=".log"
                pattern="%h %l %u %t &quot;%r&quot; %s %b" />

       </Host>
 #+end_src

   3.重启tomcat服务
   catalina.sh stop
   catalina.sh start
   
4.访问 www.jsplearn.com:8080
*** 方式二、这种配置方式不需要重启服务器,推荐使用
在tomcat安装目录/conf/[EnginName]/[HostName]/在这个目录下写一个xml文件,其中xml文件的名字就是虚拟路径,在这个xml中可以配置<Context>标签,其中配置真实路径.

注意：

1）其中[EnginName]指的是在tomcat安装目录/conf/Server.xml这个配置文件中<Engin>标签元素对应的名字。

2）[HostName]指tomcat安装目录/conf/Server.xml这个配置文件中<Host>标签元素的名字。

3）如果所配置的虚拟路径中有/，由于文件名中不允许包含/需要用#替代.

 

使用方式二完成方法一中相同的配置时，应进行如下操作：

1）在tomcat安装目录/conf/CataLina/localhost/目录下创建一个名为HelloWord.xml的文件，（若文件名中有斜杠时使用#好代替：test#HelloWord.xml）

2）在HelloWord.xml文件中写入如下代码：

<?xml version="1.0" encoding="UTF-8"?>
<Context docBase="D:\apache-tomcat-7.0.63\wtpwebapps\HelloWord" path="/HelloWord" reloadable="true" />
其中<Context>标签属性说明参照上面内容。

缺省web应用设置：

只要将文件名设置为ROOT.xml则这个xml描述的web应用就成为了缺省web应用，

*** 方式三、最简单、最常用的方式
直接将web应用放置到，虚拟主机管理的目录下，此时虚拟主机就会自动加载该目录下的web
应用

 /conf/Server.xml的<Host>标签中的属性appBase所指向的目录即为当前虚拟主机虚拟主机
自动管理的目录，在属性autoDeploy为true的情况下，放置在这个目录下的web应用当前虚
拟主机可以自动加载。

缺省web应用设置：

只要将web应用文件夹名设置为ROOT则这个web应用就成为了缺省web应用，默认已经有一个
web应用，即默认访问的Tomcat的主页。

*** 默认应用目录 ROOT 
** jsp 配置,非必须 
   新建一个WEB-INF文件夹
   新建一个web.xml
   #+begin_src xml
     <?xml version="1.0" encoding="ISO-8859-1"?>

     <!DOCTYPE web-app
     PUBLIC
     "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
     "http://java.sun.com/dtd/web-app_2_3.dtd">

     <web-app>

     <display-name>My Web Application</display-name>

     <description>
       A application for test
     </description>

     <servlet>
       <servlet-name>HelloWorld</servlet-name>
       <servlet-class>test.HelloWorld</servlet-class>
     </servlet>

     <servlet-mapping>
       <servlet-name>HelloWorld</servlet-name>
       <url-pattern>/HelloWorld</url-pattern>
     </servlet-mapping>
     </web-app>
#+end_src

