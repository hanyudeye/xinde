技能:PHP,css3,微信公众号,Javascript,html5,Linux,Nginx,Laravel,微信小程序,PHP,Javascript,html5,MySQL

* 编程学习路线
** 前端工程师
 - 基础：HTML 教程， CSS 教程
 - 进阶：Javascript，jQuery
 - 高级：AJAX 教程，JSON 教程，XML 教程
 - 框架扩展学习：Bootstrap 教程，jQuery UI 教程，jQuery EasyUI 教程，jQuery Mobile 教程
 - 调试工具：Firebug 教程
 - 开发工具：HBuilder，Dreamweaver，Notepad++，Photoshop
** PHP 工程师
 - 基础：HTML 教程，PHP 教程
 - 进阶：SQL 教程，MySQL 教程
 - 高级：正则表达式教程，Mongodb 教程， AJAX 教程，JSON 教程，XML 教程，
 - 开发工具：Notepad++，phpMyAdmin，EasyEclipse for PHP
** Python 工程师
 - 基础：Python 教程
 - 进阶：SQL 教程，MySQL 教程
 - 高级：正则表达式教程，Mongodb 教程， AJAX 教程，JSON 教程，XML 教程，
 - 开发工具：PyDev for Eclipse
** .NET 工程师
 - 基础：C# 教程，ASP.NET 教程
 - 进阶：SQL 教程
 - 高级：正则表达式教程，Mongodb 教程， AJAX 教程，JSON 教程，XML 教程，
 - 开发工具：visual studio 2010
** JAVA 工程师
   - 基础：Java 教程，JSP 教程
   - 进阶：SQL 教程，MySQL 教程
   - 高级：正则表达式教程，Mongodb 教程， AJAX 教程，JSON 教程，XML 教程，
   - 开发工具：Eclipse
* how to learn program /如何学习编程/
**  1.  Learn by doing. Always play with the code while learning
1. 在实践中学习。在学习的过程中总是与代码玩耍
Learn Programming faster

With every new subject, the sooner you start playing with the code, the faster
you will learn the given concepts. Even if you blaze through an entire chapter
of reading and a topic like for loops seems straightforward – so a monkey could
do it – you’ll still be scratching your head when tasked to implement the code
for the first time. You’ll think, “wait, what was that one piece of syntax
again?” As the saying goes, you need to “use it or lose it”, because despite
the evolution of technology, this ole’ proverb holds true when learning to
code.

对于每一个新的主题，您越早开始使用代码，您就能越快地学习给定的概念。即使你花了整
整一章的时间阅读，并且像 for loop 这样的主题看起来很简单——所以猴子也可以做到——当
你第一次实现代码的时候，你仍然会挠头。你可能会想，“等等，刚才那句句法是什么来
着? ”正如俗话所说，你需要“使用它，否则就会失去它” ，因为尽管技术在不断进化，
这句古老的谚语在学习编码时仍然适用。

Hint: Build a project as you go through the material. A personal project is often the best starting point.

提示: 在阅读材料的过程中构建一个项目。个人项目通常是最好的起点。
** 2. Grasp the fundamentals for long-term benefits
2. 掌握长期利益的基本原则
Learn programming faster 1

As elementary as they may appear at first, programming fundamentals always need
to come first: the better you understand them, the easier it is to learn more
advanced concepts. From our experience at Coding Dojo, students who rush through
the beginning of our courses – where we focus most on web development
fundamentals – are often the first to get stuck as we transition into more
advanced material, such as back-end programming. So before you ditch the first
class of computer science 101, or skip chapter one of an online tutorial, keep
in mind that you are overlooking the most important step in your learning.

虽然这些基础知识一开始看起来很简单，但编程基础总是需要放在第一位: 你对它们理解得
越好，学习更高级的概念就越容易。从我们在 codingdojo 的经验来看，那些匆忙完成我们
课程开始的学生——我们最关注的是网络开发的基础——往往是最先在我们过渡到更高级的材料
(如后端编程)时卡住的学生。所以，在你放弃计算机科学 101 课程的第一堂课，或者跳过
在线教程的第一章之前，请记住，你忽略了学习过程中最重要的一步。

 Hint: Read this great article about the 5 Basic Concepts of Any Programming Language

提示: 阅读这篇关于任何编程语言的 5 个基本概念的文章

1. Code by hand. It sharpens proficiency and you’ll need it to get a job
2. 手工编码。它可以提高熟练程度，你需要它来找工作
Learn programming faster
Computer monitors become thinner, hard drives lighter, and programming languages more powerful, but coding-by-hand still remains one of the most effective methods to learn how to program. Be it on a whiteboard or notebook, coding-by-hand requires further caution, precision, and intent behind every line of code. Because unlike on a computer, you can’t run hand-written code midway through the sheet to check if the work is correct. Although more time consuming, this restriction will mold you into a more fundamentally sound developer, both in the classroom and the job market. For college exams and technical interviews – a critical component of the job interview process – you will have to code-by-hand, because not only is this good for learning, but it’s universally known to be the ultimate test for a programmer’s proficiency. So start early and get used to this old-school practice.

计算机显示器变得更薄，硬盘驱动器变得更轻，编程语言变得更强大，但手工编程仍然是学习如何编程的最有效方法之一。无论是在白板上还是在笔记本上，手工编码都需要更进一步的谨慎、精确和每行代码背后的意图。因为不像在计算机上，你不能在工作表中间运行手写的代码来检查工作是否正确。虽然这个限制会花费更多的时间，但是它会把你塑造成一个更加稳健的开发人员，无论是在课堂上还是在就业市场上。对于大学考试和技术面试——求职面试过程中的一个重要组成部分——你必须手工编码，因为这不仅有利于学习，而且是众所周知的对程序员熟练程度的最终测试。所以要早点开始，并且习惯这种老式的练习。

 

4. Ask for help. You’ll need it
4. 寻求帮助，你会需要帮助
Learn programming faster

As awesome as it would be to become the next Steve Jobs on your own, the reality is that people learn faster with mentors and peer feedback. What may seem like an immovable bug or topic could be quickly alleviated by a fresh pair of eyes or a new interpretation of the subject. Whether it’s online or in-person, ignore the trolls and don’t be afraid to ask for help, because every programmer has been in your shoes before. Besides, most developers love to code, and if there’s one thing that passionate individuals enjoy, it’s to share their knowledge with others.

独立成为下一个史蒂夫 · 乔布斯固然很棒，但现实是，有了导师和同行的反馈，人们学得更快。看似不可动摇的错误或话题，可以通过一双全新的眼睛或对主题的新解释迅速得到缓解。不管是在线的还是面对面的，不要理会那些怪人，不要害怕寻求帮助，因为每个程序员都曾经历过这样的情况。此外，大多数开发人员喜欢编码，如果有一件事情是充满激情的个人喜欢的，那就是与他人分享他们的知识。

Word of Warning: At Coding Dojo we suggest using the 20 minute rule. Take at least 20 minutes to figure something out on your own before asking for help. There’s a good chance that the answer is already in front of you, and besides, struggling makes you a better programmer overall.

警告: 在编码 Dojo 中，我们建议使用 20 分钟规则。在寻求帮助之前，至少花 20 分钟自己想清楚一些事情。很有可能答案已经摆在你面前了，而且，努力奋斗会让你总体上成为一个更好的程序员。

Hint: Stackoverlfow and learn programming are gold mines for online programming assistance.

提示: stackoverlafow 和学习编程是在线编程辅助的金矿。

 

5. Seek out more online resources. There’s a wealth of content
5. 寻找更多的网络资源，这里有丰富的内容
Learn programming faster

If a particular concept doesn’t make sense, be it on in a textbook, or during class lecture, maintain your confidence and look for alternate online resources to learn the same content. Everyone learns differently, and just because one source doesn’t make sense, doesn’t mean there’s something wrong with you. It means that you’re not clicking with the delivery of the material. The online resources to learn computer programming are endless, and there’s always tutorial, or blog explanation that will make the material-at-hand crystal clear.

如果一个特定的概念没有意义，可以是在课本上，也可以是在课堂上，保持你的自信，寻找其他的在线资源来学习相同的内容。每个人的学习方式都不同，仅仅因为一个来源没有意义，并不意味着你有什么问题。这意味着你没有点击与材料的交付。学习计算机编程的在线资源是无穷无尽的，而且总是有教程或者博客的解释可以使手头的材料变得清晰。

Hint: Don’t underestimate the power of search.

提示: 不要低估搜索的力量。

 

6. Don’t just read the sample code. Tinker with it!
6. 不要只是阅读示例代码，而是对其进行修改
Learn programming faster

Reading sample code is not enough to understand how it works. To develop a true understanding, you need to actually run the code and tinker with it. With the additions of comments and instructions, sample code is packaged to be by the reader; but in reality, it’s pretty difficult to replicate from scratch. Reading is not the same as understanding, and actually trying to write the code yourself, or at least running it, will facilitate the learning process much more.

阅读示例代码并不足以理解其工作原理。为了形成真正的理解，您需要实际运行代码并对其进行修补。通过添加注释和说明，示例代码可以由读者自己打包; 但实际上，很难从头开始复制。阅读和理解不一样，实际上自己编写代码，或者至少运行代码，将更加有利于学习过程。

 

7. Take breaks when debugging
7. 调试的时候休息一下
Learn programming faster

When debugging, it’s easy to go down the rabbit hole for hours, and there’s no guarantee that you will fix the problem. To avoid this, it’s best to step away from the for a few hours, and return with a fresh perspective. Not only is this a guaranteed way to help solve the problem, but you’ll also save yourself hours of headache. So if help isn’t available – to touch on our previous tip about seeking advice – consider taking a break to clear your mind and return later. In the meantime, the bug won’t be going anywhere, and you’ll at least restore some needed sanity to improve productivity.

在调试时，很容易陷入数小时的兔子洞，而且不能保证能解决问题。为了避免这种情况，最好的办法就是暂时离开这个世界几个小时，然后带着一个全新的视角回来。这不仅是一个有保证的方法来帮助解决问题，但你也将节省自己的头痛小时。因此，如果没有帮助——可以谈谈我们之前关于寻求建议的建议——可以考虑休息一下，理清思绪，以后再回来。与此同时，这个 bug 不会消失，你至少可以恢复一些必要的理智来提高生产力。

 

Conclusion: Keep Calm and Keep On Coding
结论: 保持冷静，继续编码
Despite these 7 tips, the most important ingredient to learn programming faster is to remain confident. To do so, you should expect to fail repeatedly and be patient with your progress; because becoming an expert at anything requires hard work and time. And if a single doubt ever clouds your mind, remember that every programmer this path before – none of them more destined to become a developer than you. Whichever path you are currently on, be it college or coding boot camp, the only barrier to success is your work ethic and confidence to persevere.

尽管有这 7 个小贴士，但要想更快地学会编程，最重要的一点就是保持自信。为了做到这一点，你应该期望一次又一次的失败，并对你的进步保持耐心; 因为成为任何事情的专家都需要努力工作和时间。如果有一个疑问笼罩着你的头脑，请记住以前每个程序员都走过这条路——没有人比你更注定成为一名开发人员。无论你现在走在哪条道路上，无论是大学还是编程训练营，成功的唯一障碍就是你的职业道德和坚持不懈的信心。

Feel like being a developer is something you need to do and wondering “Are coding bootcamps worth it?” Look no further than Coding Dojo. We are the only bootcamp to train you in the 3 stacks used by the world’s best companies in 14 weeks. Just Apply Now (it only takes 2 minutes) — an Admissions Counselor will follow-up to see if Coding Dojo is right for you.

感觉成为一名开发人员是你需要做的事情，并且想知道“编写训练营值得吗? ”看看编程 Dojo 吧。我们是唯一的训练营，在 14 周的时间里，在世界上最好的公司使用的 3 个书库中训练你。现在就申请(只需要 2 分钟)ーー招生顾问会跟进，看看编程道场是否适合你。
* 编程的 5 个概念
   First off, I’d like to say that I’m writing these preliminary posts in a way that I’ll assume you have very little knowledge in programming.  I want this content to provide anyone “walking in off the street” the knowledge to be able to write their first program with the Java programming language with as little pain as possible.

首先，我想说的是，我写这些初步文章的方式，我会假设你对编程知之甚少。我希望这个内容能够提供给任何人“走在街上”的知识，能够用 Java 编程语言编写他们的第一个程序，尽可能少的痛苦。

So, let’s get started with our first topic: The 5 basic concepts of any programming language.  You might say, “Why are we talking about any programming language?  I thought this was about Java”.  Well, I’ve found that it’s important to remember that a lot of programming languages are very similar, and knowing what’s common between all programming languages will help you transition into any other programming language if you need to!  For example, with the Java programming knowledge I had obtained, it took me less than a month to learn how to program in a language called Objective C (which is used for iPhone apps).  That’s powerful stuff!

那么，让我们从第一个主题开始: 任何编程语言的 5 个基本概念。你可能会说，“为什么我们要讨论任何编程语言？我以为这是关于 Java 的。”。好吧，我发现记住很多编程语言是非常相似的是非常重要的，并且知道所有编程语言之间的共同点将帮助你过渡到任何其他编程语言，如果你需要的话！例如，我已经掌握了 Java 编程知识，用了不到一个月的时间就学会了如何使用一种名为 Objective c (用于 iPhone 应用程序)的语言编程。这是很有力量的东西！

Before we start learning: if you’re someone who also enjoys learning by watching videos, then I have the perfect deal for you. You can get access to over 50 hours of video tutorials (plus exercise files, assignments, quizzes and a private Facebook community of like minded programmers) for free for 30 days. You can click here to learn more about the Java courses.

在我们开始学习之前: 如果你也喜欢通过观看视频来学习，那么我有一个非常适合你的方案。你可以在 30 天内免费获得超过 50 小时的视频教程(外加锻炼文件、作业、测验和一个志同道合的程序员的私人 Facebook 社区)。你可按此了解更多有关 Java 课程的资料。

So here are the 5 basic concepts of any programming language:

以下是任何编程语言的 5 个基本概念:

Variables 变量
Control Structures 控制结构
Data Structures 数据结构
Syntax 语法
Tools 工具
I recognize that these words probably look foreign to you, but don’t worry, I’ll do my very best at taking the mystery out of them.  Now, there’s a lot to say about each of these 5 concepts, so for today’s post I’ll only be talked about item #1, variables!

我知道这些词对你来说可能看起来很陌生，但是不要担心，我会尽我最大的努力揭开它们的神秘面纱。现在，关于这 5 个概念中的每一个都有很多要说的，所以今天的帖子我只谈论第一项---- 变量！

What is a variable?
什么是变量？
Variables are the backbone of any program, and thus the backbone of any programming language. I like to start off by defining what we’re about to learn, so, Wiki defines a variable as follows:

变量是任何程序的主干，因此也是任何编程语言的主干。我喜欢从定义我们将要学习的东西开始，所以，Wiki 定义了一个变量如下:

In  在 computer programming 计算机程序设计, a  专页、预防退伍军人病委员会 variable 变量 is a  是一个 storage location 存储位置 and an associated  以及一个相关的 symbolic name 符号名 which contains some known or unknown quantity or information, a  包含一些已知或未知数量或信息的 value 价值.
Okay, well, that’s kind of cryptic.  To me, a variable is simply a way to store some sort of information for later use, and we can retrieve this information by referring to a “word” that will describe this information.

好吧有点神神秘秘的。对我来说，变量只是一种存储某种信息供以后使用的方法，我们可以通过引用一个描述这些信息的“ word”来检索这些信息。

For example, let’s say you come to my website www.howtoprogramwithjava.com and the first thing I want to do, is ask you what your name is (so that I can greet you in a nice way the next time you visit my website).  I would put a little text box on the screen that asks you what your name is… that text box would represent a variable!  Let’s say I called that text box ‘yourName’, that would be the symbolic name (or “word”) for your variable (as described from our wiki definition above).

举个例子，假设你 www.howtoprogramwithjava.com 一天来到我的网站，我想做的第一件事就是问你的名字是什么(这样我就可以在你下次访问我的网站时以一种友好的方式问候你)。我会在屏幕上放一个小文本框，问你的名字是什么... ... 那个文本框将代表一个变量！假设我将这个文本框称为“ yourName” ，这将是您的变量的符号名(或“ word”)(如上面的 wiki 定义所述)。

So now, when you type your name into the text box, that information would be stored in a variable called ‘yourName’.  I would then be able to come back and say “What value does the variable ‘yourName’ contain?”, and the program would tell me whatever it was your typed into that text box.

所以现在，当你在文本框中输入你的名字时，这些信息会被存储在一个叫做‘ yourName’的变量中。然后我就可以返回并说“‘ yourName’变量包含什么值? ”程序会告诉我你在文本框里输入了什么。

This concept is extremely powerful in programming and is used constantly.  It is what makes Facebook and Twitter work, it’s what makes paying your bills via your online bank work, it’s what allows you to place a bid on eBay.  Variables make the programming world go ’round.

这个概念在编程中非常强大，并且经常被使用。正是它让 Facebook 和 Twitter 运转起来，正是它让你通过网上银行支付账单，正是它让你在 eBay 上竞标。变量使编程世界运转。

Now, if we want to get more specific, when it comes to the Java programming language, variables have different types.  Brace yourself here, as I’m going to try to confuse you by explaining an important concept in three sentences. If I were to be storing your name in a variable, that type would be a String.  Or, let’s say I also wanted to store your age, that type would be stored as an Integer.  Or let’s say I wanted to store how much money you make in a year, that type would be stored as a Double.

现在，如果我们想知道更具体的话，当涉及到 Java 编程语言时，变量有不同的类型。打起精神来，因为我要用三句话来解释一个重要的概念，以此来迷惑你。如果我将您的名字存储在一个变量中，那么该类型将是 String。或者，假设我还想存储您的年龄，那个类型将被存储为 Integer。或者假设我想存储你一年赚多少钱，这个类型会被存储为 Double。

What the heck are String, Integer and Double?

什么是字符串、整数和双精度浮点数？

Excellent question!  In Java, the programming language wants to know what kind of information you are going to be storing in a variable.  This is because Java is a strongly typed language.  I could teach you about what the difference is between a strongly typed language and a weakly typed language, but that will likely bore you right now, so let’s just focus on what a type is in Java and why it’s important.

问得好！在 Java 中，编程语言希望知道您将在变量中存储什么类型的信息。这是因为 Java 是一种强类型语言。我可以告诉你强类型语言和弱类型语言之间的区别，但是这可能会让你现在感到无聊，所以让我们专注于 Java 中的类型是什么以及为什么它很重要。

Typing in Java, allows the programming language to know with absolute certainty that the information being stored in a variable will be ‘a certain way’.  So like I said, if you’re storing your age, you would use the Integer type… well that’s because in Java, an Integer means you have a number that won’t have any decimal places in it.  It will be a whole number, like 5, or 20, or 60, or -60, or 4000, or -16000.  All of those numbers would be considered an Integer in Java.

在 Java 中输入，使得编程语言可以绝对肯定地知道存储在变量中的信息将以某种方式存储。所以就像我说的，如果你存储你的年龄，你会使用 Integer 类型... ... 这是因为在 Java 中，Integer 意味着你有一个不会有小数位的数字。它是一个整数，比如 5，或 20，或 60，或 -60，或 4000，或 -16000。所有这些数字在 Java 中都被看作是一个整数。

So what would happen if you tried to store something that wasn’t an Integer, into an Integer variable, say for instance the value “$35.38”?  Well, quite simply, you would get an error in the program and you would have to fix it!  “$35.38” has a dollar sign ($) in it, as well as a decimal place with two digits of accuracy.  In Java, when you specify that a variable is of type Integer, you are simply not allowed to store anything except a whole number.

那么，如果您尝试将非 Integer 的内容存储到 Integer 变量中，比如值“ $35.38” ，会发生什么呢？嗯，很简单，你会得到一个错误的程序，你将不得不修复它！“ $35.38”里面有一个美元符号($) ，还有一个精确度为两位的小数位。在 Java 中，当您指定变量的类型为 Integer 时，您只能存储整数以外的任何内容。

Specifying what kind of data that you are dealing with allows the programming language to use that data in interesting ways. Again, what I say “specifying what kind of data”, I’m just referring to the type of data.

指定要处理的数据类型允许编程语言以有趣的方式使用该数据。同样，我所说的“指定哪种类型的数据” ，我只是指数据的类型。

Let’s dive into the power of assigning a type to your data.

让我们深入研究为数据分配类型的能力。

What can you do with data types?
您可以对数据类型做什么？
Let’s start with a simple example.

让我们从一个简单的例子开始。

Your desire is to add two numbers together, let’s say the number 22 and the number 3. Java will behave differently depending on the type of the variable that’s storing this data.

你的愿望是把两个数字相加，比如数字 22 和数字 3。Java 将根据存储这些数据的变量的类型有不同的行为。

Let me show you what I mean:

让我来告诉你我的意思:

If you have defined your variables to be of type Integer, then adding 22 and 3 together will result in the Integer 25. Makes perfect sense right? Of course, this is simple Math.

如果您将变量定义为 Integer 类型，那么将 22 和 3 相加将得到 Integer 25。很有道理，对吧？当然，这是简单的数学。

But what happens if your variables are not Integers, but are Strings?

但是如果你的变量不是整数，而是字符串呢？

A String in Java is a different kind of data type and it behaves differently BECAUSE it is a different type of data.

Java 中的 String 是一种不同的数据类型，它的行为也不同，因为它是一种不同的数据类型。

When we refer to a String in Java (and in many other programming languages) we are treating the data like it’s just a plain old sentence in the English language. A String just represents words (or more specifically letters) all placed in a certain order. That’s all the English language (or any language) is, a series of characters/letters placed in a certain order to give meaning to what you’re writing down.

当我们引用 Java 中的 String (以及许多其他编程语言中的 String)时，我们对待数据就好像它只是英语语言中的一个普通的老句子。String 只表示按照特定顺序排列的单词(或者更具体地说是字母)。这就是所有的英语(或任何语言) ，一系列的字符/字母按照一定的顺序排列，给你写下来的东西赋予意义。

So now I ask you, what does it mean to add two sentences together? What does it mean to add two Strings together?

所以现在我问你们，把两个句子加在一起意味着什么？将两个字符串相加意味着什么？

I’ll show you.

我带你去。

If you were to have two variables, each defined as Strings and they stored the data “22” and “3” (respectively), what would happen if we added them together?

如果有两个变量，每个都定义为 string，它们分别存储数据“22”和“3” ，如果我们将它们加在一起会发生什么？

We would get the String: “223”

我们会得到字符串: “223”

This might be confusing at first, but it makes more sense when we use less “misleading” data.

起初这可能会让人困惑，但当我们使用较少的“误导性”数据时，这就更有意义了。

Let’s assume that in our two String variables, we aren’t storing numbers, we’re storing words. So in variable 1 we store the String “Hello”, and in variable 2 we store the String “World”.

让我们假设在两个 String 变量中，我们不存储数字，而是存储单词。所以在变量 1 中存储字符串“ Hello” ，在变量 2 中存储字符串“ World”。

Now what happens in your mind if I tell you to add those two words together?

现在，如果我让你把这两个词放在一起，你会怎么想？

Hopefully your natural instinct is to say that the resulting String would be “Hello World”!

希望您的本能是说，结果字符串将是“ Hello World” ！

That’s all that’s happening with the Strings “22” and “3”… Java behaves differently because of the type of the variables.

这就是字符串“22”和“3”所发生的一切... ... Java 的行为因变量的类型而有所不同。

To Java, the String “22” is the same type of data as the String “twenty-two”, they’re both characters arranged in a specific way.

对于 Java，String“22”与 String“ twenty-two”是相同类型的数据，它们都是以特定方式排列的字符。

Now I don’t want to go into too much detail about types, as this is better suited to programming basic concept #3 – Data Structures.  So that’s all I will touch on for now, but no worries, it will all make sense in time!

现在我不想过多地讨论类型的细节，因为这更适合于编写基本概念 # 3——数据结构。所以这就是我现在要说的，但是不用担心，到时候一切都会变得有意义的！

Want Free Access to my Best Java Courses?
想要免费访问我最好的 Java 课程？
Alright, so if you’re read this far down the article, then you’re clearly interested in learning how to code. You can currently get access to my 2 best courses on Java for free for 30 days (then it’s just $10/month afterwards, or $97/year).

好吧，如果你读了这篇文章，那么你显然对学习如何编程感兴趣。目前你可以免费使用我的 Java 2 个最好的课程 30 天(之后每月只需 10 美元，或者每年 97 美元)。

When you sign up you’ll receive login information to start learning about Java. If you decide you don’t like the courses, you can cancel at any time. If you decide you love the courses then you don’t have to do anything and you can stay subscribed for as long as you like for just $10/month or $97/year.

当你注册时，你会收到登录信息，开始学习 Java。如果你决定不喜欢这些课程，你可以随时取消。如果你决定你喜欢这些课程，那么你就不必做任何事情，只要你愿意，只要每月 10 美元或每年 97 美元，你就可以继续订阅。

It’s like Netflix for coders!

这就像是给程序员看的 Netflix！

Go ahead an click the button below to get started!

点击下面的按钮开始吧！

Get Access to my 2 Best Java Courses FREE for 30 Days!

免费访问我的 2 个最好的 Java 课程 30 天！

So, to sum up, we talked about what a variable is and how you can store information in a variable and then retrieve that information at some later point in time.  The variable can have a name, and this name you give to the variable is usually named after the kind of content you’ll be storing in the variable, so if I’m storing your name in the variable, you’d name the variable ‘yourName’.  You wouldn’t HAVE to give it that name, you could name the variable “holyCrapImProgramming”, but that wouldn’t make a whole lot of sense considering you are trying to store a person’s name.  Makes sense right?  Finally, variables have types, and these types are used to help us organize what can and cannot be stored in the variable.  Hint: having a type will help to open up what kind of things we can do with the information inside the variable.  Example:  if you have two Integers (let’s say 50 and 32), you would be able to subtract one variable from the other (i.e 50 – 32 = 18), pretty straight forward right?  But, if you had two variables that stored names (i.e. “Trevor” and “Geoff”) it wouldn’t make sense to subtract one from the other (i.e.  “Trevor” – “Geoff”), because that just doesn’t mean anything!  So, types are also a powerful thing, and they help us to make sense of what we CAN do with our variables and what we CANNOT do!

因此，总而言之，我们讨论了什么是变量，以及如何在变量中存储信息，然后在以后的某个时间点检索这些信息。变量可以有一个名字，你给变量的这个名字通常是根据你要存储在变量中的内容来命名的，所以如果我把你的名字存储在变量中，你会把变量命名为‘ yourName’。你不必给它取名字，你可以把变量命名为“ holyCrapImProgramming” ，但是考虑到你试图存储一个人的名字，这就没有什么意义了。有道理，对吧？最后，变量具有类型，这些类型用于帮助我们组织可以存储在变量中和不可以存储在变量中的内容。提示: 拥有一个类型将有助于打开什么样的事情，我们可以做的信息内的变量。例如: 如果你有两个整数(假设 50 和 32) ，你可以从另一个变量中减去一个(即 50-32 = 18) ，非常直接，对吗？但是，如果你有两个存储名字的变量(例如“ Trevor”和“ Geoff”) ，那么从另一个中减去一个就没有意义了(例如“ Trevor”-“ Geoff”) ，因为那根本没有任何意义！所以，类型也是一个强大的东西，他们帮助我们理解我们可以用我们的变量做什么和我们不能做什么！

So I hope this information has been helpful to you, and I hope you realize what the benefits of learning a programming language are! The allure to learning a programming language is quite high in today’s corporate world, as most companies are hiring programmers with the skills to create web applications. The programming profession is one that provides excellent pay and job stability, and in the end, isn’t that what we’re all looking for?

因此，我希望这些信息对您有所帮助，并希望您认识到学习一门编程语言的好处！在当今的企业界，学习编程语言的诱惑力相当大，因为大多数公司都在雇佣有技能的程序员来创建网络应用程序。编程行业是一个提供优秀薪酬和工作稳定性的行业，最后，这不正是我们所有人都在寻找的吗？

To dive even deeper into the subject, you can watch this video I’ve created on the 
* 概念
  Hi everyone,

大家好,

This is post #2 in a series of 5 posts about the 5 basic concepts of any programming language.  Here’s a breakdown again of those concepts:

本文是关于任何编程语言的 5 个基本概念的系列文章中的第 2 篇。以下是这些概念的分类:

Variables 变量
Control Structures 控制结构
Data Structures 数据结构
Syntax 语法
Tools 工具
 
We’ve already discussed what a variable is, so now let’s talk about control structures.  What on earth is a control structure!?  Wiki describes it as follows:

我们已经讨论过什么是变量，现在我们来讨论一下控制结构。到底什么是控制结构! ？维基是这样描述的:

A control structure is a block of programming that analyzes variables and chooses a direction in which to go based on given parameters. The term flow control details the direction the program takes (which way program control “flows”). Hence it is the basic decision-making process in computing; flow control determines how a computer will respond when given certain conditions and parameters.

控制结构是一个程序块，它分析变量并根据给定的参数选择前进的方向。术语流控制详细说明了程序采用的方向(程序控制“流”的方向)。因此，流量控制是计算机的基本决策过程，流量控制决定了计算机在给定条件和参数时的反应。

H’okay, so, that definition is obviously a bunch of technical terms that no beginner to programming would understand.  So let me try to describe it in more human terms.  When a program is running, the code is being read by the computer line by line (from top to bottom, and for the most part left to right), just like you would read a book.  This is known as the “code flow“, now as the code is being read from top to bottom, it may hit a point where it needs to make a decision, this decision could make the code jump to a completely different part of the program, or it could make it re-run a certain piece again, or just plain skip a bunch of code.  You could think of this process like if you were to read a choose your own adventure book, you get to page 4 of the book, and it says “if you want to do X, turn to page 14, if you want to do Y, turn to page 5″.  That decision that must be made by the reader is the same decision that the computer program must make, only the computer program has a strict set of rules to decide which direction to go (whereas if you were reading a book, it would be a subjective choice based on whomever is reading the book).  So, this decision that must be made, that will in turn effect the flow of code, is known as a control structure!

好的，这个定义显然是一堆技术术语，没有编程初学者能理解。所以让我试着用更人性化的术语来描述它。当一个程序运行时，代码被计算机一行一行地读取(从上到下，大部分从左到右) ，就像你读一本书一样。这就是所谓的“代码流” ，现在，当代码从上到下被读取时，它可能到了需要做出决定的时候，这个决定可能使代码跳转到程序的一个完全不同的部分，或者它可能使代码重新运行一个特定的部分，或者直接跳过一堆代码。你可以把这个过程想象成，如果你读一本自己选择的冒险书，你会看到书的第 4 页，上面写着“如果你想做 x，翻到第 14 页，如果你想做 y，翻到第 5 页”。读者必须做出的决定和计算机程序必须做出的决定是一样的，只不过计算机程序有一套严格的规则来决定向哪个方向发展(而如果你在读一本书，这将是一个基于读者的主观选择)。所以，这个必须做出的决定，这个决定反过来又会影响代码流，被称为控制结构！

Okay, that doesn’t seem to be such a hard concept… a control structure is just a decision that the computer makes.  So then that begs the question, what is it using to base that decision on?  Well, it’s simply basing its decision on the variables that you give it!  Let me show you a simple example, here’s a piece of Java code:

好吧，这似乎并不是一个很难的概念... ... 控制结构只是计算机做出的一个决定。那么这就引出了一个问题，它是基于什么做出这个决定的呢？好吧，它只是根据你给它的变量来做决定！让我给你们看一个简单的例子，这里有一段 Java 代码:

if (yourAge < 20 && yourAge > 12)
{
  // you are a teenager
}
else
{
  // you are NOT a teenager
}
So, you can see above that we have a variable, and its name is yourAge, and we are comparing yourAge to 20 and 12, if you’re less than 20 AND you’re more than 12, then you must be a teenager (because you are between 13 and 19 years of age).  What will happen inside of this control structure, is that if the value assigned to the yourAge variable is between 13 and 19, then the code will do whatever is inside of the first segment (between those first two curly braces { } ), and it will skip whatever is inside of the second code segment (the second set of curly braces { } ).  And if you are NOT a teenager, then it will skip the first segment of code and it will execute whatever is inside of the second segment of code.

所以，你可以看到上面我们有一个变量，它的名字是 yourAge，我们将 yourAge 与 20 和 12 进行比较，如果你小于 20 岁，大于 12 岁，那么你一定是一个青少年(因为你在 13 到 19 岁之间)。在这个控制结构中，如果分配给 yourAge 变量的值在 13 到 19 之间，那么代码将执行第一个段中的任何操作(在前两个花括号{}之间) ，并跳过第二个代码段中的任何操作(第二个花括号{})。如果你不是十几岁的孩子，那么它会跳过代码的第一段，执行代码的第二段中的任何内容。

Let’s not worry too much about what the code looks like for the moment, as I’ll touch on how to write the code out properly in section #4 syntax.  The only concept you need to try and wrap your head around right now, is that there is a way in programming to ‘choose’ which lines of code to execute, and which lines of code to skip, and that will all depend on the state of the variables inside of your control structure.  When I say state of a variable, I just mean what value that variable has at any given moment, so if yourAge = 15, then the state of that variable is currently 15 (and thus, you’re a teenager).

让我们暂时不要过分担心代码是什么样子的，因为我将在第 4 节的语法中介绍如何正确地编写代码。你现在唯一需要尝试和理解的概念是，在编程中有一种方法可以‘选择’执行哪些代码行，以及跳过哪些代码行，这些都取决于控制结构中变量的状态。当我说一个变量的状态时，我指的是该变量在任意给定时刻的值，所以如果 yourAge = 15，那么该变量的状态当前是 15(因此，你是一个青少年)。

You’ve now seen one control structure and I’ve tried to explain it as best I could.  This control structure is known as an if...else structure.  This is a very common control structure in programming, let me hit you with some other examples.  Here’s a while loop control structure:

你现在已经看到了一个控制结构，我已经尽我所能地解释它。这种控制结构被称为 if... else 结构。这是编程中非常常见的控制结构，让我举一些其他的例子来说明。下面是 while 循环控制结构:

while (yourAge < 18)
{
  // you are not an adult
  // so keep on growing up!
}
This while loop control structure is also very handy, its purpose is to execute code between those curly braces { } over and over and over until the condition becomes false.  Okay, so what’s the condition?  Well, the condition is between the round brackets ( ), and in this example it checks yourAge to see if you are less than 18.  So if you are less than 18, it will continuously execute the code inside the curly braces { }.  Now, if you were 18 or older before the while loop control structure is reached by the code flow, then it won’t execute ANY of the code inside of the curly braces { }.  It will just skip that code and continue on executing code below the while loop control structure.

这个 while 循环控制结构也非常方便，它的目的是在花括号{}之间一遍又一遍地执行代码，直到条件变为 false。好吧，条件是什么？这个条件位于圆括号()之间，在这个例子中，它检查 yourAge，看看您是否小于 18。所以如果你小于 18，它会连续执行大括号{}中的代码。现在，如果在代码流到达 while 循环控制结构之前您已经 18 岁或更大，那么它将不会执行大括号{}中的任何代码。它将跳过这段代码，继续执行 while 循环控制结构下面的代码。

Want Free Access to my Best Java Courses?
