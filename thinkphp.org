* Thinkphp 
** 安装运行
*** 安装
     composer	create-project	topthink/think	tp5		--prefer-dist
     应用项目: https://github.com/top-think/think
     核心框架: https://github.com/top-think/framework
*** 运行
    router.php用于php自带webserver支持,可用于快速测试
    public/router.php
    启动命令:php	-S	localhost:8888	router.php
** 环境变量 
   //获取环境变量，如果不存在则使用默认值 root
   Env::get('database.username', 'root');
** 引用库
   实例化内置类库时, 或第三方没命名空间的类库时，加上\   $class = new \stdClass();
   外部库 定义路径 define('EXTEND_PATH','../vendor/');  那么引用时  $Test= new \my\Test(); 文件位于 ../vendor/my/Test.php
   #+BEGIN_SRC php
     namespace my;
     class Test{}
   #+END_SRC
*** 自动加载 use namespacename;
*** 手动加载 Loader::import('org.util.arr');
#+BEGIN_SRC php
 扩展 Loader::import('qrcode',	EXTEND_PATH);
//	引入	extend/wechat-sdk/wechat.class.php
Loader::import('wechat-sdk.wechat',	EXTEND_PATH,	'.class.php');
//	助手函数
import('wechat-sdk.wechat',	EXTEND_PATH,	'.class.php');

#+END_SRC
*** 跨模块调用, 写模块名
use app\mobile\controller\Deviceapi;
** 路由 \think\Route
   1.不路由 index.php/module/controller
   2.强制路由 必须按照路由规则来
   #+BEGIN_SRC php
'url_route_on'										=>		true,
'url_route_must'								=>		true,
     首页路由
          Route::get('/',function(){
               return	'Hello,world!';
          });
   #+END_SRC
   3.混合模式
   动态注册
#+BEGIN_SRC php
    use	think\Route;
    //	注册路由到index模块的News控制器的read操作
    Route::rule('new/:id','index/News/read');

   则 http://serverName/new/5
  会转到 http://serverName/index/news/read/id/5


#+END_SRC
** Session(临时会话）
   {$Think.session.user_id}	//	输出$_SESSION['user_id']变量
   Session::set('name','thinkphp');
   Session::get('name');
   //	判断(当前作用域)是否赋值
   Session::has('name');
   //	判断think作用域下面是否赋值
   Session::has('name','think');
   清空
   //	清除session(当前作用域)
   Session::clear();
   //	清除think作用域
   Session::clear('think');

   {if	condition="($name	==	1)	OR	($name	>	100)	"}	value1
   {elseif	condition="$name	eq	2"/}value2
   {else	/}	value3
   {/if}

获取请求信息 $request = Request::instance();
$request->domain() 获取当前域名
$request->baseFile() 当前URL地址
url(),baseUrl(),root,pathinfo(),path(),ext()
module(),controller(),action() 获取模块/控制器/操作
isAjax(),param() only(['name'])仅包含name except(['name']排除name
检测变量 has('id','get') has('id','post')  
或具体的 get() / post()
server()/session()/cookie()/head()
还可以对input进行过滤 filter('filter_method') 这是全局的
单独的 Request::instance()->param('username','','method1,method2')
变量修饰 input('get.id/d')
|s|强制转换为字符串|
|d|整型|
|b|布尔|
|a|数组|
|f|浮点|
参数绑定方式:1.按参数名2. 按参数顺序
定义缓存 Route::get('new/:id','News/read',['cache'=>3600]); //设置3600秒的缓存
** 日志 \think\Log 完成
*** 初始化
#+BEGIN_SRC php
Log::init([
				'type'		=>		'File',
				'path'		=>		APP_PATH.'logs/'
]);
#+END_SRC
*** 手动记录
Log::record('测试日志信息,这是警告级别','notice');
#+BEGIN_SRC 
log	常规日志,用于记录日志
error	错误,一般会导致程序的终止
notice	警告,程序可以运行但是还不够完美的错误
#+END_SRC
*** 清空
Log::clear();
** 请求 Request
#+BEGIN_SRC php
  use \think\Request;
  $request = Request::instance();
  或
      $request= request();
$request->domain(); url/baseFile, root, pathinfo, path, ext, type(资源类型), type, ip, isAjax()(是否是Ajax请求), param, route 
#+END_SRC

检测是否设置
#+BEGIN_SRC php
  Request::instance()->has('id','get');
  Request::instance()->has('name','post');
  或者使用助手函数
  input('?get.id');
  input('?post.name');
#+END_SRC

获取参数
#+BEGIN_SRC php
    //	获取当前请求的name变量
    Request::instance()->param('name');
    //	获取当前请求的所有变量(经过过滤)
    Request::instance()->param();
    //	获取当前请求的所有变量(原始数据)
    Request::instance()->param(false);
    //	获取当前请求的所有变量(包含上传文件)
    Request::instance()->param(true);
    也可以 把 get/post 分开

  input('request.id');
  input('server.PHP_SELF');
  input('session.user_id');
  input('cookie.user_id');

头部信息 $agent	=	Request::instance()->header('user-agent');

#+END_SRC
** 数据库操作    
*** 原生操作
    #+BEGIN_SRC php
                  Db::query('select*fromthink_userwhereid=?', [8]);
                  Db::execute('insertintothink_user(id, name)values(?, ?)', [8, 'thinkphp']);
      也支持命名占位符绑定, 例如:
          Db::query('select*fromthink_userwhereid=:id', ['id'=>8]);
            Db::execute('insertintothink_user(id, name)values(:id, :name)', ['id'=>8, 'name'=>'t
      hinkphp']);

    #+END_SRC

*** 查询　find /select/ 查值　value('字段名') 列　column('name', 'id')   
    #+BEGIN_SRC php
      Db::table('think_user')->chunk(100, function($users){
          foreach($usersas$user){
              //
          }
      });
      //或者交给回调方法myUserIterator处理
      Db::table('think_user')->chunk(100, 'myUserIterator');

      JSON类型数据查询(mysql V5.0.1 )
          //查询JSON类型字段(info字段为json类型)
          Db::table('think_user')->where('info$.email', 'thinkphp@qq.com')->find();

      $map['id']		=	['>',1];
      $map['mail']		=	['like','%thinkphp@qq.com%'];

      Db::table('think_user')->alias('a')->join('__DEPT__	b	','b.user_id=	a.id')->select();
      字段中使用函数Db::table('think_user')->field('id'=>'ID',SUM(score)')->select();
        字段排除　 Db::table('think_user')->field('id', true)->select(); 排除id
              Db::table('think_article')->limit('10,25')->select();

              page方法还可以和limit方法配合使用,例如:
                  Db::table('think_article')->limit(25)->page(3)->select();
              它会自己计算

                  返回单条不重复的distinct(true)
                  这里可以用本地缓存方法 Db::table('think_user')->where('id=5')->cache(true)->find();
              $result	=	Db::table('think_user')->cache('key',60)->find();
              外部可以获取了
                  $data	=	\think\Cache::get('key');

              count 统计数量,参数是要统计的字段名(可选)
                  max 获取最大值,参数是要统计的字段名(必须)
                  min 获取最小值,参数是要统计的字段名(必须)
                  avg 获取平均值,参数是要统计的字段名(必须)
                  sum 获取总分,参数是要统计的字段名(必须)
                  对时间的比较     
                  whereTime('birthday',	'>=',	'1970-10-1')
                  关键字 today,yesterday,week,last week, month,last month,year,last year
                  2 hours,
                  区间查询

                  构建子查询,就是返回sql语句而不执行
                  1.select(false)
                  2.fetchSql(true)
                  3.buildSql();

      #+END_SRC
*** 添加　insert/getLastInsID()/insertGetId($data)/insertAll
*** 更新　update /setField('name', 'val')更新字段/setInc/setDec('字段’)或setDec('字段', 5) 减5
*** 删除　delete
*** 获取表信息
#+BEGIN_SRC php
//	获取`think_user`表所有信息
Db::getTableInfo('think_user');
//	获取`think_user`表所有字段
Db::getTableInfo('think_user',	'fields');
//	获取`think_user`表所有字段的类型
Db::getTableInfo('think_user',	'type');
//	获取`think_user`表的主键
Db::getTableInfo('think_user',	'pk');
#+END_SRC
*** cache ->cache(true, 60)
    可以指定缓存标志 cache('key', 60)
获取 \think\Cache::get('key')
*** fetchSql 返回SQL
$result = Db::table('t')->fetchSql(true)->find(1);
*** partition 水平分表
*** 聚合统计
count() 数量 max(arg)字段最大值 min(arg) avg(arg)字段平均 sum(arg) 求和
*** 时间比较
where('createTime', '> time', '2017-1-1');
where('createTime', 'between time', ['2017-1-1', '2018-1-1']);
或 whereTime
'month'
