数组
double balance[] = {1000.0, 2.0, 3.4, 7.0, 50.0};
* xy
 #+begin_src c
 
// 单行注释以//开始。（仅适用于C99或更新的版本。）

/*
多行注释是这个样子的。（C89也适用。）
,*/

// 常数： #define 关键词
#define DAYS_IN_YEAR 365

// 以枚举的方式定义常数
enum days {SUN = 1, MON, TUE, WED, THU, FRI, SAT};
// MON自动被定义为2，TUE被定义为3，以此类推。

// 用#include来导入头文件
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

// <尖括号>间的文件名是C标准库的头文件。
// 标准库以外的头文件，使用双引号代替尖括号。
#include "my_header.h"

// 函数的签名可以事先在.h文件中定义，
// 也可以直接在.c文件的头部定义。
void function_1(char c);
void function_2(void);

// 如果函数出现在main()之后，那么必须在main()之前
// 先声明一个函数原型
int add_two_ints(int x1, int x2); // 函数原型

// 你的程序的入口是一个返回值为整型的main函数
int main() {

// 用printf打印到标准输出，可以设定格式，
// %d 代表整数, \n 代表换行
printf("%d\n", 0); // => 打印 0
// 所有的语句都要以分号结束

///////////////////////////////////////
// 类型
///////////////////////////////////////

// 在使用变量之前我们必须先声明它们。
// 变量在声明时需要指明其类型，而类型能够告诉系统这个变量所占用的空间

// int型（整型）变量一般占用4个字节
int x_int = 0;

// short型（短整型）变量一般占用2个字节
short x_short = 0;

// char型（字符型）变量会占用1个字节
char x_char = 0;
char y_char = 'y'; // 字符变量的字面值需要用单引号包住

// long型（长整型）一般需要4个字节到8个字节; 而long long型则至少需要8个字节（64位）

long x_long = 0;
long long x_long_long = 0; 

// float一般是用32位表示的浮点数字
float x_float = 0.0;

// double一般是用64位表示的浮点数字
double x_double = 0.0;

// 整数类型也可以有无符号的类型表示。这样这些变量就无法表示负数
// 但是无符号整数所能表示的范围就可以比原来的整数大一些

unsigned short ux_short;
unsigned int ux_int;
unsigned long long ux_long_long;

// 单引号内的字符是机器的字符集中的整数。
'0' // => 在ASCII字符集中是48
'A' // => 在ASCII字符集中是65

// char类型一定会占用1个字节，但是其他的类型却会因具体机器的不同而各异
// sizeof(T) 可以返回T类型在运行的机器上占用多少个字节 
// 这样你的代码就可以在各处正确运行了
// sizeof(obj)返回表达式（变量、字面量等）的尺寸
printf("%zu\n", sizeof(int)); // => 4 (大多数的机器字长为4)

// 如果`sizeof`的参数是一个表达式，那么这个参数不会被演算（VLA例外，见下）
// 它产生的值是编译期的常数
int a = 1;
// size_t是一个无符号整型，表示对象的尺寸，至少2个字节
size_t size = sizeof(a++); // a++ 不会被演算
printf("sizeof(a++) = %zu where a = %d\n", size, a);
// 打印 "sizeof(a++) = 4 where a = 1" （在32位架构上）

// 数组必须要被初始化为具体的长度
char my_char_array[20]; // 这个数组占据 1 * 20 = 20 个字节
int my_int_array[20]; // 这个数组占据 4 * 20 = 80 个字节
                      // (这里我们假设字长为4)


// 可以用下面的方法把数组初始化为0:
char my_array[20] = {0};

// 索引数组和其他语言类似 -- 好吧，其实是其他的语言像C
my_array[0]; // => 0

// 数组是可变的，其实就是内存的映射！
my_array[1] = 2;
printf("%d\n", my_array[1]); // => 2

// 在C99 （C11中是可选特性），变长数组（VLA）也可以声明长度。
// 其长度不用是编译期常量。
printf("Enter the array size: "); // 询问用户数组长度
char buf[0x100];
fgets(buf, sizeof buf, stdin);

// stroul 将字符串解析为无符号整数
size_t size = strtoul(buf, NULL, 10);
int var_length_array[size]; // 声明VLA
printf("sizeof array = %zu\n", sizeof var_length_array);

// 上述程序可能的输出为：
// > Enter the array size: 10
// > sizeof array = 40

// 字符串就是以 NUL (0x00) 这个字符结尾的字符数组,
// NUL可以用'\0'来表示.
// (在字符串字面量中我们不必输入这个字符，编译器会自动添加的)
char a_string[20] = "This is a string";
printf("%s\n", a_string); // %s 可以对字符串进行格式化
/*
也许你会注意到 a_string 实际上只有16个字节长.
第17个字节是一个空字符(NUL) 
而第18, 19 和 20 个字符的值是未定义。
,*/

printf("%d\n", a_string[16]); // => 0
//  byte #17值为0（18，19，20同样为0）

// 单引号间的字符是字符字面量
// 它的类型是`int`，而 *不是* `char`
// （由于历史原因）
int cha = 'a'; // 合法
char chb = 'a'; // 同样合法 (隐式类型转换

// 多维数组
int multi_array[2][5] = {
        {1, 2, 3, 4, 5},
        {6, 7, 8, 9, 0}
    }
// 获取元素
int array_int = multi_array[0][2]; // => 3

///////////////////////////////////////
// 操作符
///////////////////////////////////////

// 多个变量声明的简写
int i1 = 1, i2 = 2;
float f1 = 1.0, f2 = 2.0;

int a, b, c;
a = b = c = 0;

// 算数运算直截了当
i1 + i2; // => 3
i2 - i1; // => 1
i2 * i1; // => 2
i1 / i2; // => 0 (0.5，但会被化整为 0)

f1 / f2; // => 0.5, 也许会有很小的误差
// 浮点数和浮点数运算都是近似值

// 取余运算
11 % 3; // => 2

// 你多半会觉得比较操作符很熟悉, 不过C中没有布尔类型
// 而是用整形替代
// (C99中有_Bool或bool。)
// 0为假, 其他均为真. (比较操作符的返回值总是返回0或1)
3 == 2; // => 0 (false)
3 != 2; // => 1 (true)
3 > 2; // => 1
3 < 2; // => 0
2 <= 2; // => 1
2 >= 2; // => 1

// C不是Python —— 连续比较不合法
int a = 1;
// 错误
int between_0_and_2 = 0 < a < 2;
// 正确
int between_0_and_2 = 0 < a && a < 2;

// 逻辑运算符适用于整数
!3; // => 0 (非)
!0; // => 1
1 && 1; // => 1 (且)
0 && 1; // => 0
0 || 1; // => 1 (或)
0 || 0; // => 0

// 条件表达式 （ ? : ）
int a = 5;
int b = 10;
int z;
z = (a > b) ? a : b; //  10 “若a > b返回a，否则返回b。”

// 增、减
char *s = "iLoveC"
int j = 0;
s[j++]; // "i" 返回s的第j项，然后增加j的值。
j = 0;
s[++j]; // => "L"  增加j的值，然后返回s的第j项。
// j-- 和 --j 同理

// 位运算
~0x0F; // => 0xF0 (取反)
0x0F & 0xF0; // => 0x00 (和)
0x0F | 0xF0; // => 0xFF (或)
0x04 ^ 0x0F; // => 0x0B (异或)
0x01 << 1; // => 0x02 (左移1位)
0x02 >> 1; // => 0x01 (右移1位)

// 对有符号整数进行移位操作要小心 —— 以下未定义：
// 有符号整数位移至符号位 int a = 1 << 32
// 左移位一个负数 int a = -1 << 2
// 移位超过或等于该类型数值的长度
// int a = 1 << 32; // 假定int32位


///////////////////////////////////////
// 控制结构
///////////////////////////////////////

if (0) {
  printf("I am never run\n");
} else if (0) {
  printf("I am also never run\n");
} else {
  printf("I print\n");
}

// While循环
int ii = 0;
while (ii < 10) { // 任何非0的值均为真
    printf("%d, ", ii++); // ii++ 在取值过后自增
} // =>  打印 "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "

printf("\n");

int kk = 0;
do {
    printf("%d, ", kk);
} while (++kk < 10); // ++kk 先自增，再被取值
// => 打印 "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "

printf("\n");

// For 循环
int jj;
for (jj=0; jj < 10; jj++) {
    printf("%d, ", jj);
} // => 打印 "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "

printf("\n");

// *****注意*****:
// 循环和函数必须有主体部分，如果不需要主体部分：
int i;
    for (i = 0; i <= 5; i++) {
    ; // 使用分号表达主体（null语句）
}

// 多重分支：switch()
switch (some_integral_expression) {
case 0: // 标签必须是整数常量表达式
    do_stuff();
    break; // 如果不使用break，控制结构会继续执行下面的标签
case 1:
    do_something_else();
    break;
default:
    // 假设 `some_integral_expression` 不匹配任何标签
    fputs("error!\n", stderr);
    exit(-1);
    break;
    }

///////////////////////////////////////
// 类型转换
///////////////////////////////////////

// 在C中每个变量都有类型，你可以将变量的类型进行转换
// (有一定限制)

int x_hex = 0x01; // 可以用16进制字面量赋值

// 在类型转换时，数字本身的值会被保留下来
printf("%d\n", x_hex); // => 打印 1
printf("%d\n", (short) x_hex); // => 打印 1
printf("%d\n", (char) x_hex); // => 打印 1

// 类型转换时可能会造成溢出，而且不会抛出警告
printf("%d\n", (char) 257); // => 1 (char的最大值为255，假定char为8位长)

// 使用<limits.h>提供的CHAR_MAX、SCHAR_MAX和UCHAR_MAX宏可以确定`char`、`signed_char`和`unisigned char`的最大值。


// 整数型和浮点型可以互相转换
printf("%f\n", (float)100); // %f 格式化单精度浮点
printf("%lf\n", (double)100); // %lf 格式化双精度浮点
printf("%d\n", (char)100.0);

///////////////////////////////////////
// 指针
///////////////////////////////////////

// 指针变量是用来储存内存地址的变量
// 指针变量的声明也会告诉它所指向的数据的类型
// 你可以使用得到你的变量的地址，并把它们搞乱，;-)

int x = 0;
printf("%p\n", &x); // 用 & 来获取变量的地址
// (%p 格式化一个类型为 void *的指针)
// => 打印某个内存地址

// 指针类型在声明中以*开头
int* px, not_a_pointer; // px是一个指向int型的指针
px = &x; // 把x的地址保存到px中
printf("%p\n", (void *)px); // => 输出内存中的某个地址
printf("%zu, %zu\n", sizeof(px), sizeof(not_a_pointer));
// => 在64位系统上打印“8， 4”。

// 要得到某个指针指向的内容的值，可以在指针前加一个*来取得（取消引用）
// 注意： 是的，这可能让人困惑，'*'在用来声明一个指针的同时取消引用它。
printf("%d\n", *px); // => 输出 0, 即x的值

// 你也可以改变指针所指向的值
// 此时你需要取消引用上添加括号，因为++比*的优先级更高
(*px)++; // 把px所指向的值增加1
printf("%d\n", *px); // => 输出 1
printf("%d\n", x); // => 输出 1

// 数组是分配一系列连续空间的常用方式
int x_array[20];
int xx;
for (xx=0; xx<20; xx++) {
    x_array[xx] = 20 - xx;
} // 初始化 x_array 为 20, 19, 18,... 2, 1

// 声明一个整型的指针，并初始化为指向x_array
int* x_ptr = x_array;
// x_ptr现在指向了数组的第一个元素(即整数20). 
// 这是因为数组通常衰减为指向它们的第一个元素的指针。
// 例如，当一个数组被传递给一个函数或者绑定到一个指针时，
//它衰减为(隐式转化为）一个指针。
// 例外： 当数组是`&`操作符的参数：
int arr[10];
int (*ptr_to_arr)[10] = &arr; // &arr的类型不是`int *`！
                              // 它的类型是指向数组的指针（数组由10个int组成）
// 或者当数组是字符串字面量（初始化字符数组）
char arr[] = "foobarbazquirk";
// 或者当它是`sizeof`或`alignof`操作符的参数时：
int arr[10];
int *ptr = arr; // 等价于 int *ptr = &arr[0];
printf("%zu, %zu\n", sizeof arr, sizeof ptr); // 应该会输出"40, 4"或"40, 8"

// 指针的增减多少是依据它本身的类型而定的
// （这被称为指针算术）
printf("%d\n", *(x_ptr + 1)); // => 打印 19
printf("%d\n", x_array[1]); // => 打印 19

// 你也可以通过标准库函数malloc来实现动态分配
// 这个函数接受一个代表容量的参数，参数类型为`size_t`
// 系统一般会从堆区分配指定容量字节大小的空间
// （在一些系统，例如嵌入式系统中这点不一定成立
// C标准对此未置一词。）
int *my_ptr = malloc(sizeof(*my_ptr) * 20);
for (xx=0; xx<20; xx++) {
    ,*(my_ptr + xx) = 20 - xx; // my_ptr[xx] = 20-xx
} // 初始化内存为 20, 19, 18, 17... 2, 1 (类型为int）

// 对未分配的内存进行取消引用会产生未定义的结果
printf("%d\n", *(my_ptr + 21)); // => 谁知道会输出什么

// malloc分配的区域需要手动释放
// 否则没人能够再次使用这块内存，直到程序结束为止
free(my_ptr);

// 字符串通常是字符数组，但是经常用字符指针表示
// (它是指向数组的第一个元素的指针)
// 一个优良的实践是使用`const char *`来引用一个字符串字面量，
// 因为字符串字面量不应当被修改（即"foo"[0] = 'a'犯了大忌）
const char* my_str = "This is my very own string";
printf("%c\n", *my_str); // => 'T'

// 如果字符串是数组，（多半是用字符串字面量初始化的）
// 情况就不一样了，字符串位于可写的内存中
char foo[] = "foo";
foo[0] = 'a'; // 这是合法的，foo现在包含"aoo"

function_1();
} // main函数结束

///////////////////////////////////////
// 函数
///////////////////////////////////////

// 函数声明语法:
// <返回值类型> <函数名称>(<参数>)

int add_two_ints(int x1, int x2){
    return x1 + x2; // 用return来返回一个值
}

/*
函数是按值传递的。当调用一个函数的时候，传递给函数的参数
是原有值的拷贝（数组除外）。你在函数内对参数所进行的操作
不会改变该参数原有的值。

但是你可以通过指针来传递引用，这样函数就可以更改值

例子：字符串本身翻转
,*/

// 类型为void的函数没有返回值
void str_reverse(char *str_in){
    char tmp;
    int ii = 0;
    size_t len = strlen(str_in); // `strlen()`` 是C标准库函数
    for(ii = 0; ii < len / 2; ii++){
        tmp = str_in[ii];
        str_in[ii] = str_in[len - ii - 1]; // 从倒数第ii个开始
        str_in[len - ii - 1] = tmp;
    }
}

/*
char c[] = "This is a test.";
str_reverse(c);
printf("%s\n", c); // => ".tset a si sihT"
,*/

// 如果引用函数之外的变量，必须使用extern关键字
int i = 0;
void testFunc() {
    extern int i; // 使用外部变量 i
}

// 使用static确保external变量为源文件私有
static int i = 0; // 其他使用 testFunc()的文件无法访问变量i
void testFunc() {
    extern int i;
}
//**你同样可以声明函数为static**


///////////////////////////////////////
// 用户自定义类型和结构
///////////////////////////////////////

// Typedefs可以创建类型别名
typedef int my_type;
my_type my_type_var = 0;

// struct是数据的集合，成员依序分配，按照
// 编写的顺序
struct rectangle {
    int width;
    int height;
};

// 一般而言，以下断言不成立：
// sizeof(struct rectangle) == sizeof(int) + sizeof(int)
//这是因为structure成员之间可能存在潜在的间隙（为了对齐）[1]

void function_1(){

    struct rectangle my_rec;

    // 通过 . 来访问结构中的数据
    my_rec.width = 10;
    my_rec.height = 20;

    // 你也可以声明指向结构体的指针
    struct rectangle *my_rec_ptr = &my_rec;

    // 通过取消引用来改变结构体的成员...
    (*my_rec_ptr).width = 30;

    // ... 或者用 -> 操作符作为简写提高可读性
    my_rec_ptr->height = 10; // Same as (*my_rec_ptr).height = 10;
}

// 你也可以用typedef来给一个结构体起一个别名
typedef struct rectangle rect;

int area(rect r){
    return r.width * r.height;
}

// 如果struct较大，你可以通过指针传递，避免
// 复制整个struct。
int area(const rect *r)
{
    return r->width * r->height;
}

///////////////////////////////////////
// 函数指针
///////////////////////////////////////
/*
在运行时，函数本身也被存放到某块内存区域当中
函数指针就像其他指针一样（不过是存储一个内存地址） 但却可以被用来直接调用函数,
并且可以四处传递回调函数
但是，定义的语法初看令人有些迷惑

例子：通过指针调用str_reverse
,*/
void str_reverse_through_pointer(char *str_in) {
    // 定义一个函数指针 f. 
    void (*f)(char *); // 签名一定要与目标函数相同
    f = &str_reverse; // 将函数的地址在运行时赋给指针
    (*f)(str_in); // 通过指针调用函数
    // f(str_in); // 等价于这种调用方式
}

/*
只要函数签名是正确的，任何时候都能将任何函数赋给某个函数指针
为了可读性和简洁性，函数指针经常和typedef搭配使用：
,*/

typedef void (*my_fnp_type)(char *);

// 实际声明函数指针会这么用:
// ...
// my_fnp_type f; 

// 特殊字符
'\a' // bell
'\n' // 换行
'\t' // tab
'\v' // vertical tab
'\f' // formfeed
'\r' // 回车
'\b' // 退格
'\0' // null，通常置于字符串的最后。
     //   hello\n\0. 按照惯例，\0用于标记字符串的末尾。
'\\' // 反斜杠
'\?' // 问号
'\'' // 单引号
'\"' // 双引号
'\xhh' // 十六进制数字. 例子: '\xb' = vertical tab
'\ooo' // 八进制数字. 例子: '\013' = vertical tab

// 打印格式：
"%d"    // 整数
"%3d"   // 3位以上整数 （右对齐文本）
"%s"    // 字符串
"%f"    // float
"%ld"   // long
"%3.2f" // 左3位以上、右2位以上十进制浮
"%7.4s" // (字符串同样适用)
"%c"    // 字母
"%p"    // 指针
"%x"    // 十六进制
"%o"    // 八进制
"%%"    // 打印 %

///////////////////////////////////////
// 演算优先级
///////////////////////////////////////
//---------------------------------------------------//
//        操作符                     | 组合          //
//---------------------------------------------------//
// () [] -> .                        | 从左到右      //
// ! ~ ++ -- + = *(type)sizeof       | 从右到左      //
// * / %                             | 从左到右      //
// + -                               | 从左到右      //
// << >>                             | 从左到右      //
// < <= > >=                         | 从左到右      //
// == !=                             | 从左到右      //
// &                                 | 从左到右      //
// ^                                 | 从左到右      //
// |                                 | 从左到右      //
// &&                                | 从左到右      //
// ||                                | 从左到右      //
// ?:                                | 从右到左      //
// = += -= *= /= %= &= ^= |= <<= >>= | 从右到左      //
// ,                                 | 从左到右      //
//---------------------------------------------------//
 #+end_src
 
* c标准库
** <stdio.h> 输入和输出
*** 在其中定义了以下一些常用的类型及常量：
    FILE	文件指针
    EOF	End Of File，表示文件的结尾
    stderr	标准错误流
    stdin	标准输入流
    stdout	标准输出流
    其中stderr、stdin、stdout为宏定义，是指向FILE类型的指针。
*** 标准输入输出流
    其实从stdin与stdout的定义中也可以看到，标准输入输出流也就是文件，只是一般情况下已经默认定义为键盘和屏幕。这与Linux中一切皆文件的思想一脉相承。

    常用的函数有以下这些：
    int printf(const char * format, ...)	格式化输出数据至stdout
    int scanf(const char * format, ...)	由stdin读取格式化输入数据
    int putchar(int c)	向stdout输出一个字符
    int getchar(void)	由stdin读入一个字符
    int puts(const char * s)	向stdout输出一串字符串
    char * gets(char * s)	由stdin读入一串字符串
    另外，vprintf()函数主要用于需要自己实现一些类似printf()的函数时使用，关于这个函数的用处可参考StackOverflow上的讨论，用于文件流的vfprintf()与用于字符串的vsprintf()的用处也是相似的。
*** 文件流
    对文件的操作是<stdio.h>中的核心，其他函数均可视为对特定文件的操作，大部分函数均以f****()命名。

    最重要的函数是以下这几个：
    FILE * fopen(const char * filename, const char * mode)	打开文件，失败返回NULL
    int fclose(FILE * stream)	关闭文件，成功返回0，失败返回EOF
    size_t fread(void * ptr, size_t size, size_t nmemb, FILE * stream)	读取文件内容
    size_t fwrite(cosnt void * ptr, size_t size, size_t nmemb, FILE * stream)	写入文件内容
    只使用这4个函数就可以完成基本的文件读写操作了，其它函数可以视为是为了更方便的进行文件读写而引入的。在Linux中，文件不仅仅是指磁盘上的一个file，也有可能是一个设备等，不过都可以以统一的方式进行读写。常用的打开模式有r(读)、w(写)、a(附加)、b(二进制)等。
*** 对文件的操作也有以下这些函数：

    int fprintf(FILE * stream, const char * format, ...)	格式化输出数据至文件
    int fscanf(FILE * stream, cosnt char * format, ...)	由文件读取格式化输入数据
    int putc(int c, FILE * stream)	向文件输出一个字符
    int getc(FILE * stream)	由文件读入一个字符
    int fputc(int c, FILE * stream)	向文件输出一个字符
    int fgetc(FILE * stream)	由文件读入一个字符
    int fputs(const char * s, FILE * stream)	向文件输出一串字符串（或比特流）
    char * fgets(char * s, int n, FILE * stream)	由文件读入一串字符串（或比特流）
    其中putc()与fputc()、getc()与fgetc()的区别在于前者可能是使用宏定义实现的，而后者一定是函数，具体分析可以参考这篇文章。
*** 用于对文件进行修改（如删除文件等）的函数有以下这些：

    int remove(const char * filename)	删除文件，成功返回0
    int rename(const char * old, const char * new)	更改文件名称或位置，成功返回0
    FILE * tmpfile(void)	以wb+形式创建一个临时二进制文件
    其中tmpfile()创建的临时文件在调用fclose()关闭时会被自动删除。
*** 对文件流的定位通常使用以下这些函数：
    int fseek(FILE * stream, long int offset, int fromwhere)	移动文件流的读写位置，错误返回非0
    long int ftell(FILE * stream)	取得文件流的读取位置
    void rewind(FILE * stream)	重设读取目录的位置为开头位置
    int feof(FILE * stream)	检测文件结束符
    whence可设置为SEEK_SET、SEEK_END或SEEK_CUR。
*** 使用这两个函数处理读写文件流操作中的错误：
    int ferror(FILE * stream)	检查流是否有错误
    void clearerr(FILE * stream)	复位错误标志
    与缓冲(Buffer)机制有关的函数常用的有以下这两个：

    void setbuf(FILE * stream, char * buf)	把缓冲区与流相联
    int fflush(FILE * stream)	更新缓冲区，成功返回0，错误返回EOF
*** 其他流操作
    对stderr的操作通过以下函数完成：

    void perror(const char * s)	打印出错误原因信息字符串
    此函数将上一个函数发生错误的原因输出到stderr，此错误原因依照全局变量errno的值来决定要输出的字符串，errno在<errno.h>中声明。
*** 对字符串也提供了格式化输入输出函数：

    int sprintf(char * s, const char * format, ...)	格式化字符串复制
    int sscanf(const char * s, const char * format, ...)	格式化字符串输入

** <stdlib.h>	最常用的一些系统函数
*** 在其中定义了以下一些常用的类型及常量：

   size_t	sizeof运算符产生的数据类型，一般是一个无符号整数
   wchar_t	一个宽字符的大小
   NULL	空
   RANDMAX	rand()的最大返回值
*** 内存管理函数
*** 最常用的是以下两个函数：
    void * malloc(size_t size)	从堆上动态分配内存空间
    void free(void * ptr)	释放之前分配的内存空间
*** 数学函数
    int abs(int j)	int类型数据绝对值
    long labs(long j)	long类型数据绝对值
    int rand(void)	产生一个随机数
    void srand(unsigned int seed)	初始化随机数种子
*** 字符串转换函数
    int atoi(const char * nptr)	将字符串转换为整数（int）
    long atol(const char * nptr)	将字符串转换为长整数（long）
    double atof(const char * nptr)	将字符串转换为浮点型数（double）
*** 环境函数
    int system(const char * string)	执行Shell（或命令行）命令
    char * getenv(const char * name)	获取环境变量中的内容
    int exit(int stauts)	结束进程
*** 搜索和排序函数
   void qsort(void * base, size_t nmemb, size_t size, int (* compar)(const void *, const void *))	快速排序算法
   void * bsearch(const void * key, const void * base, size_t nmemb, size_t size, int (* compar)(const void *, const void *))	在数组进行二分法查找某一元素，要求数组预先已排好序

** <string.h>	字符串处理
   <string.h>中除了字符串处理函数，还有一些内存管理函数：

   Name	Comment
   void * memset(void * dest, int c, size_t n)	将一段内存空间填上某值
   void * memcpy(void * dest, const void * src, size_t n)	复制一段内存内容
   int memcmp(const void * s1, const void * s2, size_t n)	比较两段内存内容
   void * memchr(const void * s, int c, size_t n)	在某一段内存范围中查找特定字节
   常用的字符串操作函数有：

   Name	Comment
   char * strcat(char * deat, const char * src)	连接两个字符串
   char * strcpy(char * dest, const char * src)	复制字符串
   int strcmp(const char * s1, const char * s2)	比较两个字符串
   size_t strlen(const char * s)	获取一个字符串的长度
   char * strtok(char * s1, const char * s2)	分割字符串
   以下这些函数用于进行字符串查找：

   Name	Comment
   char * strchr(const char * s, int c)	正向查找一个字符
   char * strrchr(const char * s, int c)	反向查找一个字符
   char * strstr(const char * s1, const char * s2)	查找一个字符串
   char * strpbrk(const char * s1, const char * s2)	查找一个字符集合

** <math.h>	数学函数
   math.h
   标准数学库，常用函数如下：

   三角函数
   Name	Comment
   double sin(double x)	正弦
   double cos(double x)	余弦
   double tan(double x)	正切
   double asin(double x)	反正弦
   double acos(double x)	反余弦
   double atan(double x)	反正切
   double atan2(double y, double x)	计算y/x的反正切
   双曲三角函数
   Name	Comment
   double sinh(double x)	双曲正弦
   double cosh(double x)	双曲余弦
   double tanh(double x)	双曲正切
   指数与对数
   Name	Comment
   double exp(double x)	e的n次幂
   double pow(double x, double y)	x的y次幂
   double sqrt(double x)	开根号
   double log(double x)	e为底的对数
   double log10(double x)	10为底的对数
   取整
   Name	Comment
   double ceil(double x)	向上取整
   double floor(double x)	向下取整
   其它
   Name	Comment
   double fabs(double x)	计算绝对值

** <ctype.h>	字符类测试
   ctype.h
   包含字符测试及大小写转换函数。

   字符测试
   Name	Comment
   isalpha(c)	是否为字母
   isupper(c)	是否为大写字母
   islower(c)	是否为小写字母
   isdigit(c)	是否为数字
   isxdigit(c)	是否为16进制数字（数字 & AF & af）
   isalnum(c)	是否为字母及数字
   ispunct(c)	是否为标点符号
   isspace(c)	是否为空白字符（空格、\r(CR)、\n(LF)、\t(TAB)、\v(VT)、\f(FF)）
   iscntrl(c)	是否为控制字符（ASCII 0 ~ 37(0x1F) & 177(0x7F)）
   isgraph(c)	是否为可显示字符（字母 & 数字 & 标点）
   isprint(c)	是否为可打印字符（字母 & 数字 & 标点 & 空白）
   大小写转换
   Name	Comment
   tolower(c)	转换为小写
   toupper(c)	转换为大写

** <time.h>	时间和日期
   日期及时间操作。定义了time_t、clock_t及tm这几种类型，常用函数有：

   获取时间及相关计算
   Name	Comment
   time_t time(time_t * timer)	获取UNIX时间戳，一般传入NULL
   clock_t clock(void)	获取CPU时钟计数
   double difftime(time_t time1, time_t time0)	计算时间差，time1 - time0
   struct tm * gmtime(const time_t * timer)	GMT时间
   struct tm * localtime(const time_t * timer)	地方时时间
   time_t mktime(struct tm * timeptr)	地方时时间
   转换为可阅读的字符串
   Name	Comment
   char * ctime(const time_t * timer)	返回标准时间字符串，地方时时间，等价于asctime(localtime())
   char * asctime(const struct tm * timeptr)	返回标准时间字符串
   size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *)	返回自定义格式时间字符串

** <stdarg.h> 可变参数列表
   stdarg.h
   用于支持可变参数，定义了va_list这个结构体，通过以下三个宏进行操作：

   Name	Comment
   void va_start(va_list ap, parmN)	初始化va_list
   type va_arg(va_list ap, type)	从va_list中获取一个type类型的参数
   void va_end(va_list ap)	释放va_list

** <signal.h>	信号
   signal.h
   定义了信号(Signal)处理的相关宏及函数，这与Linux中的信号机制密切相关，包含下面两个函数：

   Name	Comment
   signal()	设置处理特定Signal的Handler
   raise(int sig)	产生一个Signal
   signal()函数原型如下：
   void (* signal(int sig, void (* handler)(int)))(int);

** <assert.h>	断言
   此头文件的唯一目的是提供assert(int x)这个宏，如果断言非真，程序会在标准错误流输出错误信息，并调用abort()函数使程序异常终止。
** <setjmp.h>	非局部跳转
   setjmp.h
   非局部跳转，用于从一个深层次嵌套中直接返回至最外层，通过这两个宏完成：

   Name	Comment
   int setjmp(jmp_buf env)	设置跳转点
   void longjmp(jmp_buf env, int val)	进行跳转

** <errno.h>	定义错误代码
   errno.h
   声明了一个外部整形变量errno用于表示错误，可用perror(const char * s)输出错误原因，其中s是错误提示前缀。

   标准使用方法是：在一个库函数调用之前把它设为0，然后在下一个库函数调用前测试它，任何非零值均表示错误。示例代码：

   #include <errno.h>
   #include <math.h>

   //......
   errno = 0;
   y = sqrt(x);
   if (errno != 0)
   perror("Error");


** <stddef.h>	一些常数、类型和变量
   stddef.h
   定义了一些标准定义，如size_t、wchar_t、NULL等，这些定义也会出现在其他的头文件里。还定义了以下这个宏：

   Name	Comment
   offsetof(type, member)	返回结构体中某一成员相对于结构体起始地址的偏移量

** <locale.h>	本土化
   locale.h
   国家、文化和语言规则集称为区域设置，主要影响字符串格式，通过以下函数进行设置：

   Name	Comment
   setlocale()	设置或恢复本地化信息

** <float.h>	浮点数运算
   用宏定义的方式定义了浮点数的最大值、最小值等信息。

** <limits.h>
   定义了基本数据类型（int、char、short等）的最大值及最小值。常用宏定义有：

   CHAR_BIT	一个字节的比特数
   SCHAR_MIN	带符号字符最小值
   SCHAR_MAX	带符号字符最大值
   UCHAR_MAX	无符号字符最大值
   CHAR_MIN	char的最小值
   CHAR_MAX	char的最大值
   SHRT_MIN	带符号短整型最小值
   SHRT_MAX	带符号短整型最大值
   USHRT_MAX	无符号短整型最大值
   INT_MIN	带符号整形最小值
   INT_MAX	带符号整形最大值
   UINT_MAX	无符号整形最大值
   LONG_MIN	带符号长整形最小值
   LONG_MAX	带符号长整形最大值
   ULONG_MAX	无符号长整形最大值
* c
1.学习C语法

语法的学习对于一个具有编程底子的来说，就很轻松了；即使你以前没有学习过其他编程语言，我相信有2个星期，你也能轻松搞定。

需要注意的是，不要太纠缠于语言的细节，比如：运算符优先级与结合性的问题等。

2.学习C标准库

ANSI C库把函数分为不同的组，每个组都具有与之相关的头文件。C语言标准库相对于其他语言，比如C++，Java来说是非常短小精悍的，但首先应着重对以下库进行学习：

ctype.h：字符处理

math.h：数学库

stdio.h：标准I/O库

stdlib.h：通用工具库

string.h：字符串处理

time.h：时间和日期

如果想了解完成的ANSI C库，你可以购买相关的书籍，这些书籍一般会详细介绍每个函数的用户和一些注意点；当然你也可以登陆http://www.dinkumware.com/manual ... amp;page=index.html获取ANSI C库详细信息。



3.攻克C的难点

C语言声明：

  C语言的声明确实让我觉得恐怖，比较晦涩难懂，而且声明的形式和使用的形式还类似。比如如下的声明恐怕就连很多熟悉C多年的程序员也不是一眼就能看出来的：

  char * const * (*next)();

  那么有没有一种好的记忆方法或规则来搞清楚呢，好像没有，如果有的话也不是这样折磨人了。不过可以看看《C专家编程》第三章的内容，或许你会有所收获。

  也只能多学多练了，所谓熟能生巧嘛，希望这个问题不要在你的心灵上留下阴影。



数组与指针：

  数组与指针的关系，在标准中并没有作很详细的规定，而且好多C入门的书籍在这个问题上并没有给出很详细的说明，所以会给人造成很多误解。

  对于这个问题，你可以参考《C缺陷与陷阱》4.5节和《C专家编程》第4,9,10章,相信你这里面的内容搞透彻，以后就不会再被这个问题搞迷惑。



指针与内存：

  如果你以后编写规模较大的程序，你可能发现这个问题可能会是你最大的烦恼，而且可能会是你消耗最多调试时间的事项。



 C版本的问题：

  你得特别小心该问题，最好不要在你的程序中混合使用不同版本C的特性，否则会给你带来很迷惑的问题。如果一定要用，你最好清楚自己在做什么。

还有一些其他C中的难点和容易错误的地方，可以学习前人的一些经验。以下是一个c FAQ的链接地址，相信在这篇文档中有你需要的大部分问题的解决方法。

http://c-faq-chn.sourceforge.net/

4. UNIX环境编程

学习了以上内容之后，我相信，你就可以进行unix环境编程了。不过你可能需要对操作系统理论有一点点的了解，这样学起来会比较轻松一些。

Unix环境编程，你应该着重IO和进程两大块内容。《Unix环境高级编程》中对Unix环境编程有着非常详细且深入的论述，而且书中有大量实用性例子程序，不过可能得花上几个月得时间，好好啃一啃了。

在扎实掌握以上内容，不代表你得C语言学习支路已经完成，相反，才刚刚开始。以后你需要用学到得知识去解决大量不同实际问题，在不断得实践过程中，你会近一步加深对C的理解。有了以上基础之后，你会发现，在实践过程中需要的其他知识，你会非常快速的掌握。

Windows程序员的学习路线  

1.当然要熟悉下C语言了 入门可以选用潭浩强的 《C程序设计》（当然最好能读C Programming Language）特别要对其中的指针，结构体等东西一定要搞清楚了（要学好的很好至少要花费一个月时间） 为什么要从C开始呢：<1> C好学 <2> 大多数的操作系统核心部分是用C开发的 <3> C的效率高且语言成熟

2.在1的基础之上一定要认真学习一下数据结构 对C++程序员来说良好的数据结构可以让一个程序员很轻松的完成程序设计 糟糕的数据结构可以把一个程序员累死 推荐书籍：严蔚敏的《数据结构（C语言版）》或北京大学的一本中C++版的数据结构 书中说到的每个主体在我们的程序设计中都会用到 认真学好会对你的以后的C++程序设计有太多的好处 （3个月时间）

3.学好了2之后可以学习下《C++ PROGRAM DESIGN》这本书初步介绍了C++和如何使用C++写出Windows下的程序（要学好至少要花费3个月时间）

4.在3的基础之上可以读一本叫《Windows 95 程序设计》（它的最新版本是Programming Windows）这是一相Windows程序设计的领域的不朽之作（3个月时间） 通过2和3的学习你已经成为了一个可以设计Windows程序的程序员了 要想更好的设计Windows程序设计 一定要借助框架结构不可 为什么：框架结构可以加快我们程序设计的速度 虽然使用框架使得我们的程序的效率低了那么一点 但随着当今计算机的运算能力的提升 你不会感觉到这一点点的性能损失的反而会因为你使用的框架结构而使你的程序设计加快了速度 使用框架结构才算一个真正的VC++程序员

5.在4的基础之上可以看一些简单的MFC程序设计的书比如《Visual C++入门教程》之类的图书 这可以使你能写出一些带有通用控件的MFC程序 （1个月时间）

6.在5的基础之上你已经可以很快开发一个软件了 但不了解MFC框架运行机制是很不好的 了解MFC的运行机制可以使你以后的MFC程序设计工作做的更好 推荐书籍侯杰的《深入浅出MFC》 但这本书真的不适合初学者当你有了一定的开发经验以后这本书对你来说确实很好 若你很熟悉Windows下的SDK程序设计并打算或已经开始使用MFC进行软件开发 那这本书对你来说再好不过了 （2个月时间）

7.在6的基础之上你可以看下这本书《VC++技术内幕》由潘爱民译的 推荐看原著（3个月）

8.在以上基础之上为了更好的使用VC++这个工具 推荐看一下《VC++6.0宝典》（3个月） 从开发工具的角度讲这本书写的很好

9.为了更好的工作可以参考一下VC++程序设计百例

10.之后你可以看一下《Windows核心编程》 这本书很好的讲解了Windows的编程 对你写系统程序很有好处的 推荐看原版

11.只了解其形不算真正的了解 之后还要认真的读一下Windows的内核源码 相信WRK 很容易找到的 可以配合《深入解析Windows操作系统》《Windows内核原理与实现》和《Windows内核情景分析》

12.其它一些东东《COM原理》（潘爱民） OpenGL D3D VC的数据库编程 图形图像 音视频处理和网络都要有所了解和会使用

13.要做到一个好的程序员一定要对驱动程序有所了解所以写一个文件驱动之类的东东是很有必要的

14.经过以上各步的学习你完全成为一个优秀的Windows程序员了(前提是每一步要学好)

15.漏了一些重要的东东 编译原理 汇编及 组成原理 和设计模式等也是很重要的东东 只有学好了这些才能明白语言为什么要这样组织才能高效。

作者：现在_未来
链接：https://www.jianshu.com/p/3167c11018a9
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
