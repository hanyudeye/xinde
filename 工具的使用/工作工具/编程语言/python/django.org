* Django
** 安装启动
    virtualenv PROJECTENV -p python3
    source PROJECTENV/bin/activate
    pip install django
      
   创建一个 Django 项目：
   django-admin startproject myproject
    
   一个初始 Django 的项目由五个文件组成：

 manage.py：
 init__.py：这个空文件告诉 Python 这个文件夹是一个 Python 包。
 settings.py：这个文件包含了所有的项目配置。我们会一直使用到这个文件。
 urls.py：这个文件负责映射我们项目中的路由和路径。例如，如果您想在 URL `/about/` 中显示某些内容，则必须先将其映射到此处。
 wsgi.py：该文件是用于部署简单的网关接口。

 启动服务
 python manage.py runserver
 http://127.0.0.1:8000
** 博客实例
*** Django 的应用
    app：是一个可以执行某些操作的 Web 应用程序。一个应用程序通常由一组 models(数
    据库表)，views(视图)，templates(模板)，tests(测试) 组成。
    
    project：是配置和应用程序的集合。一个项目可以由多个应用程序或一个应用程序组成。


创建一个简单的论坛项目

 django-admin startapp boards
 
目录
    migrations /：在这个文件夹中，Django 会存储一些文件以跟踪您在 models.py 文件
    中创建的更改，目的是为了保持数据库和 models.py 同步。
    
    admin.py：这是 Django 应用程序一个名为 Django Admin 的内置配置文件。
    apps.py：这是应用程序本身的配置文件。
    models.py：这里是我们定义 Web 应用程序实体的地方。models  由 Django 自动转换为数据库表。
    tests.py：该文件用于为应用程序编写单元测试。
    views.py：这是我们处理 Web 应用程序请求(request)/响应(resopnse)周期的文件。


 为此，请打开 settings.py 并尝试查找`INSTALLED_APPS`变量：

settings.py

 ```
 INSTALLED_APPS = [
     'django.contrib.admin',
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
 ]
 ```

 正如你所看到的，Django 已经安装了 6 个内置的应用程序。它们提供大多数 Web 应用程
 序所需的常用功能，如身份验证，会话，静态文件管理（图像，JavaScript，CSS 等）等。

 我们将会在本系列教程中探索这些应用程序。但现在，先不管它们，只需将我们的应用程
 序 boards 添加到 `INSTALLED_APPS` 列表即可：

 ```
 INSTALLED_APPS = [
     'django.contrib.admin',
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',

     'boards',
 ]
 ```
***  Hello, World!
     现在我们先来写一个我们的第一个 视图（view)

 打开 boards 应用程序中的 views.py 文件，并添加下面的代码：

views.py

 ```python
 from django.http import HttpResponse

 def home(request):
     return HttpResponse('Hello, World!')
 ```

视图（view）是接收 `HttpRequest` 对象并返回 `HttpResponse`对象的 Python 函数。接
收 request 作为参数并返回 response 作为结果。这个过程是需要我们记住的。


 因此，就像我们上面的代码，我们定义了一个简单的视图，命名为 `home` ，然后我们简
 单的返回了一个字符串 Hello，World！

 那么我们直接运行就可以了吗？

 并不是的，我们还没有告诉 Django 什么时候调用这个 视图（view）呢？这就需要我们在 urls.py 文件中完成：

urls.py

 ```Python
 from django.conf.urls import url
 from django.contrib import admin

 from boards import views

 urlpatterns = [
     url(r'^/code>, views.home, name='home'),
     url(r'^admin/', admin.site.urls),
 ]
 ```

  现在要变更成 url('code/', views.home, name='home'),

 如果您将上面的代码段与您的 urls.py 文件进行比较，您会注意到我添加了以下的代码：
 `url(r'^$', views.home, name='home')` 并使用我们的应用程序 boards 中导入了
 views 模块。`from boards import views`

 可能这里大家还是会有很多疑问，不过先这样做，在后面我们会详细探讨这些概念。

 但是现在，Django 使用正则表达式来匹配请求的 URL。对于我们的 home 视图，
 我使用的是`^$`正则表达式，它将匹配空白路径，这是主页（此 URL：
 http://127.0.0.1:8000**）。如果我想匹配 URL
 http://127.0.0.1:8000/homepage/**，那么我们 url 的正则表达式就应该这样写：
 `url(r'^homepage/$', views.home, name='home')`。

 运行项目，让我们看看会发生什么：

 ```
 python manage.py runserver
 ```
 在 Web 浏览器中，打开 http://127.0.0.1:8000：


 ![你好，世界！]


 这样我们就看到了我们刚刚创建的第一个界面了。

** 论坛项目
如果要实现上面我们说到的论坛，那么我们至少需要以下的几个模型：Board，Topic，Post 和 User

 Board: 版块
 Topic: 主题
 Post: 帖子（用户评论与回复）
 User: 用户


这里值得注意的是，我们在 Django 应用中，不需要创建 User 用户模型，因为在 Django
的 contrib 中已经内置了 User 模型，我们可以直接拿来使用，就没必要重新创建了。




完成我们项目 boards 下的 models.py 文件中的所有操作。


boards/models.py
#+begin_src python
from django.db import models
from django.contrib.auth.models import User

class Board(models.Model):
    name = models.CharField(max_length=30, unique=True)
    description = models.CharField(max_length=100)

class Topic(models.Model):
    subject = models.CharField(max_length=255)
    last_updated = models.DateTimeField(auto_now_add=True)
    board = models.ForeignKey(Board, related_name='topics')
    starter = models.ForeignKey(User, related_name='topics')

class Post(models.Model):
    message = models.TextField(max_length=4000)
    topic = models.ForeignKey(Topic, related_name='posts')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(null=True)
    created_by = models.ForeignKey(User, related_name='posts')
    updated_by = models.ForeignKey(User, null=True, related_name='+')
#+end_src

开始告诉 Django 如何创建数据库，这样方便我们更好的使用。
```
python manage.py makemigrations
```

这时，你会看到这样的输出信息：
```
Migrations for 'boards':
  boards/migrations/0001_initial.py
    - Create model Board
    - Create model Post
    - Create model Topic
    - Add field topic to post
    - Add field updated_by to post
```

此时，Django 在 boards / migrations 目录内创建了一个名为 0001_initial.py 的文件。它
代表了我们应用程序模型的当前状态。在下一步中，Django 将使用该文件来创建表和列。


迁移文件被翻译成 SQL 语句。如果您熟悉 SQL，则可以运行以下命令来检查将在数据库中执行的 SQL 指令：

```
python manage.py sqlmigrate boards 0001
```


如果你不熟悉 SQL，也不用担心。在本系列教程中，我们不会直接使用 SQL。所有的工作都
将使用 Django ORM 来完成，它是一个与数据库进行通信的抽象层。

好了，下一步我们将把我们的迁移文件应用到我们的数据库中：

python manage.py migrate</code>

输出应该是这样的：

```
Operations to perform:
  Apply all migrations: admin, auth, boards, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying boards.0001_initial... OK
  Applying sessions.0001_initial... OK
```

因为这是我们第一次迁移数据库，所以该 `migrate` 命令还应用了 Django contrib 应用
中现有的迁移文件，这些文件列于 `settings.py` 中的 `INSTALLED_APPS` 。


而 `Applying boards.0001_initial... OK` 就是指我们在上一步中生成的迁移文件。
好了，此时！我们的数据库已经可以使用了。


Models API

使用 Python 开发的一个重要优点是交互式 shell。我几乎一直都在使用它。这是一个可以
快速尝试和测试实验的方法。

你可以使用 manage.py 加载我们的项目来启动 Python shell ：

启动命令：

```
python manage.py shell
```

可以看到这样的输出：

```
Python 3.6.2 (default, Jul 17 2017, 16:44:45)
[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>>
```

在我们使用 `python manage.py shell` 之外，我们也可以将项目添加到`sys.path`并加载
Django。这意味着我们可以在项目中导入我们的模型(models) 和任何其他资源。

我们从导入 Board 类开始：

```
from boards.models import Board
```

如果我们需要创建 Board 对象，我们可以执行以下操作：

```
board = Board(name='Django', description='This is a board about Django.')
```

此时我们只是创建了这个对象，并没有保存到数据库的，因此我们可以调用 `save` 方法，
将这个对象保存在数据库中。


```
board.save()
```

该 `save` 方法 ，在创建对象和更新对象中都可以使用，这里 Django 会创建一个新的对
象，因为 Board 实例是没有 id 这个字段的，因此保存后，Django 会自动设置一
个 ID：


```
board.id
1
```


其他的字段你也可以当作属性来访问就好了，比如：

```
board.name
'Django'
```

```
board.description
'This is a board about Django.'
```


要更新一个值，我们可以这样做：


```
board.description = 'Django discussion board.'
board.save()
```


每个 Django 模型 (Models) 都带有一个特殊的属性; 我们称之为 Model Manager（模型
管理器）我们可以通过 Python 属性 `objects` 来访问它。它主要用于在数据库中执
行查询。例如，我们可以使用它来直接创建一个新的**Board** 对象：

```
board = Board.objects.create(name='Python', description='General discussion about Python.')
```

```
board.id
2
```

```
board.name
'Python'
```

所以，结合之前的操作，我们现在有两个 boards 对象。我们可以使用`objects` 列出数据
库中所有现有的 boards：


```
Board.objects.all()
<QuerySet [<Board: Board object>, <Board: Board object>]>
```


结果是一个 QuerySet。稍后我们会进一步了解它。基本上，它是来自数据库的对象列表。
通过输出结果，可以看到我们有两个对象，但我们只能读取 Board 对象。这是因为我
们没有在 Board 模型中定义 `__str__` 方法。

该 `__str__` 方法是一个对象的字符串表示。我们可以使用 Board 的名称来表示它。


首先，退出交互式控制台：


```
exit()
```


现在编辑 boards 应用程序中的 models.py 文件：

```
class Board(models.Model):
    name = models.CharField(max_length=30, unique=True)
    description = models.CharField(max_length=100)

    def __str__(self):
        return self.name
```


让我们再次尝试查询。再次打开交互式控制台：


```
from boards.models import Board

Board.objects.all()
<QuerySet [<Board: Django>, <Board: Python>]>
```


仔细对比上面的，看下区别？

可以看到上面那个是 object，而这里是我们定义的字符串。


我们可以将这个 QuerySet 看作一个列表。假设我们想遍历它并打印每个 Board（版块） 的
描述：


```
boards_list = Board.objects.all()
for board in boards_list:
    print(board.description)
```


结果是：


```
Django discussion board.
General discussion about Python.
```


当然，我们也可以使用 Model Manager（模型管理器）来查询数据库，如果查询其中
的一个，我们可以使用 `get` 的方法：


```
django_board = Board.objects.get(id=1)

django_board.name
'Django'
```

当然我们要小心这种情况，因为很容易发生内存溢出的。比如我们试图去查询一个不存在的
对象，就好比我们数据库只有两个 Board 对象，如果你查询 `id=3`，那么它会引发一个异
常：


```
board = Board.objects.get(id=3)

boards.models.DoesNotExist: Board matching query does not exist.
```

当然，在 `get` 方法中，参数可以是该模型下的字段，最好是使用唯一的标识字段。否则
会返回多个对象，会导致异常的。


```
Board.objects.get(name='Django')
<Board: Django>
```


请注意，查询是区分大小写的，小写 “django” 是不匹配的：


```
Board.objects.get(name='django')
boards.models.DoesNotExist: Board matching query does not exist.
```


模型操作摘要

下面的表格是我们在本章节中学到的方法和操作。代码示例使用 Board 模型作为参考
示例。大写的 Board 代表类，小写的 board 是指 Board 的实例对象。


| 描述                         | 代码示例                                              |
| 创建一个对象并没有保存       | `board = Board()`                                     |
| 保存一个对象（创建或更新）   | `board.save()`                                        |
| 在数据库中创建并保存一个对象 | `Board.objects.create(name='...', description='...')` |
| 列出所有对象                 | `Board.objects.all()`                                 |
| 获取由字段标识的单个对象     | `Board.objects.get(id=1)`                             |


在下一节中，我们将开始编写视图并在 HTML 页面中显示我们的版块页面。

#### Views, Templates 和静态文件

回顾一下，我们之前做的。我们已经可以在应用程序的主页上显示 ”Hello，World！“ 的界面了。


> MyProject/urls.py

```
from django.conf.urls import url
from django.contrib import admin

from boards import views

urlpatterns = [
    url(r'^/code>, views.home, name='home'),
    url(r'^admin/', admin.site.urls),
]
```

> boards/views.py

```
from django.http import HttpResponse

def home(request):
    return HttpResponse('Hello, World!')
```

好了，现在我们需要修改这个主页，如果你不记得我们的主页要做成什么样子，可以看看之
前我们已经设计好的原型界面图。我们在主页上，要做的是在表格中显示一些版块的名单和
其他的一些信息。


首先我们要做的是：导入 Board 模型，然后获取所有的存在的版块（boards）信息


> boards/views.py

```
from django.http import HttpResponse
from .models import Board

def home(request):
    boards = Board.objects.all()
    boards_names = list()

    for board in boards:
        boards_names.append(board.name)

    response_html = '<br>'.join(boards_names)

    return HttpResponse(response_html)
```

然后我们运行，就会看到这个简单的 HTML 页面：


但是，一般情况下，我们是不会通过这种方式去渲染 HTML，在 views.py 中，我们只
需要获取 boards 的集合，至于 HTML 渲染那部分的代码，我们应该在 Django 的
templates 目录下完成。


Django 模板引擎设置

竟然我们要将 views.py 里渲染 HTML 的代码分离，那么我们首先要在 baords 的同目录下，创建一个名为 templates 的文件夹。


```
myproject/
 |-- myproject/
 |    |-- boards/
 |    |-- myproject/
 |    |-- templates/   <-- here!
 |    +-- manage.py
 +-- venv/
```

在我们创建的 **templates** 文件夹中，我们创建一个名为 **home.html** 的 HTML 文件

> templates/home.html

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Boards</title>
  </head>
  <body>
    <h1>Boards</h1>

    {% for board in boards %}
      {{ board.name }} <br>
    {% endfor %}

  </body>
</html>
```

**home.html** 的文件内容如上面的一样，是一些原始的 HTML 标签代码和 Django 语言上
的代码：`{% for ... in ... %}` ，`{{ variable }}`。上面的代码中展示了如何使用
for 循环遍历 list 对象。

到此，我们的 HTML 页面已经完成了，可是我们还没有告诉 Django 在哪里能找到我们应用中的 `templates` 文件夹里的 HTML。


首先，我们在 Django 中绑定一下我们的 `templates` ,打开我们 ** myproject** 项目中
的 **settings.py** 文件，搜索 `TEMPLATES` 变量然后在 `DIRS`设置 ：
`os.path.join(BASE_DIR, 'templates')`

具体如下：

```python
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
```

这样设计就好比相当于在你的项目中的完整路径下，在加上 "/templates"

那是不是跟我们预想的一样呢？我们可以通过 python shell 进行调试：

```
python manage.py shell
```

```
from django.conf import settings

settings.BASE_DIR
'/Users/vitorfs/Development/myproject'

import os

os.path.join(settings.BASE_DIR, 'templates')
'/Users/vitorfs/Development/myproject/templates'
```


可以看到，目录就是指向我们在上面创建的 **templates** 文件夹

此时，我们只是绑定了 **templates** 文件夹的路径，Django 并没有绑定我们
**home.html** ，我们可以在 **views.py** 中绑定：

```
from django.shortcuts import render
from .models import Board

def home(request):
    boards = Board.objects.all()
    return render(request, 'home.html', {'boards': boards})
```



运行后，HTML 的页面是这样的：

我们可以改进 HTML 模板来代替使用表格：

> **templates/home.html**

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Boards</title>
  </head>
  <body>
    <h1>Boards</h1>

    <table border="1">
      <thead>
        <tr>
          <th>Board</th>
          <th>Posts</th>
          <th>Topics</th>
          <th>Last Post</th>
        </tr>
      </thead>
      <tbody>
        {% for board in boards %}
          <tr>
            <td>
              {{ board.name }}<br>
              <small style="color: #888">{{ board.description }}</small>
            </td>
            <td>0</td>
            <td>0</td>
            <td></td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>
```

##### 测试主页

现在让我们来写第一个测试，首先在应用程序 **boards** 中找到 **tests.py** 

> **boards/tests.py** 

```
from django.core.urlresolvers import reverse
from django.test import TestCase

class HomeTests(TestCase):
    def test_home_view_status_code(self):
        url = reverse('home')
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)
```

这是一个非常简单的测试用例，但非常的有用。我们在测试的是响应状态码，如果是 200 意味着成功。


我们可以在控制台中检查响应码：

如果出现未捕获的异常，语法错误或其他任何情况，Django 会返回状态代码**500**，这意
味着**服务器错误**。现在，想象我们的应用程序有 100 个界面（view）。如果我们为所
有视图（view）编写了这个简单的测试，只需一个命令，我们就可以测试所有视图是否返回
成功代码，这样用户就不会在任何地方看到任何错误消息。如果没有自动化测试，我们需要
逐一检查每个页面。

要执行 Django 的测试套件：

```
python manage.py test
```

```
Creating test database for alias 'default'...
System check identified no issues (0 silenced).
.
----------------------------------------------------------------------
Ran 1 test in 0.041s

OK
Destroying test database for alias 'default'...
```

现在我们可以测试 Django 是否为请求的 URL 返回了正确的视图函数。这也是一个有用的
测试，因为随着开发的进展，您会发现 **urls.py** 模块可能变得非常庞大而复杂。URL
配置全部是关于解析正则表达式的。有些情况下我们有一个非常宽容的 URL，所以 Django
最终可能返回错误的视图函数。

以下是我们如何做到的：

> **boards/tests.py**

```
from django.core.urlresolvers import reverse
from django.urls import resolve
from django.test import TestCase
from .views import home

class HomeTests(TestCase):
    def test_home_view_status_code(self):
        url = reverse('home')
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)

    def test_home_url_resolves_home_view(self):
        view = resolve('/')
        self.assertEquals(view.func, home)
```



在第二个测试中，我们正在使用 `resolve` 功能。Django 使用它来将请求的 URL 与
**urls.py** 模块中列出的 URL 列表进行匹配。该测试将确保使用 `/`根 URL，是否返回
主视图（home view）。

再次测试：

```
python manage.py test
```

```
Creating test database for alias 'default'...
System check identified no issues (0 silenced).
..
----------------------------------------------------------------------
Ran 2 tests in 0.027s

OK
Destroying test database for alias 'default'...
```


要查看有关测试执行的更多详细信息，请将 **verbosity** 设置为更高级别：

```
python manage.py test --verbosity=2
```

```

详细程度决定了将要打印到控制台的通知和调试信息量; 0 是无输出，1 是正常输出，2 是详细输出。

##### 静态文件设置

静态文件是指 CSS，JavaScript，字体，图像或者是我们用来组成用户界面的任何其他资源。

事实上，Django 不提供这些文件。但在开发过程中，我们又会用到，因此 Django 提供了
一些功能来帮助我们管理静态文件。这些功能可在配置文件（settings.py）中
`INSTALLED_APPS` 里的 **django.contrib.staticfiles** 。

有了这么多的前端组件库，我们没有理由继续渲染基本的 HTML。我们可以轻松地将
Bootstrap 4 添加到我们的项目中。Bootstrap 是一个用 HTML，CSS 和 JavaScript 开发
的开源工具包。

在项目根目录中，除**boards**，**templates** 和 **myproject** 文件夹外，我们还需
要创建一个名为 **static** 的文件夹，并在 **static** 文件夹内创建另一个名为
**css** 文件夹：

```
myproject/
 |-- myproject/
 |    |-- boards/
 |    |-- myproject/
 |    |-- templates/
 |    |-- static/       <-- here
 |    |    +-- css/     <-- and here
 |    +-- manage.py
 +-- venv/
```

到 [getbootstrap.com](https://getbootstrap.com/docs/4.0/getting-started/download/#compiled-css-and-js) 下载最新版本：

下载 **Compiled CSS and JS** 的版本。

解压从 Bootstrap 网站下载的 **bootstrap-4.0.0-beta-dist.zip** 文件，将文件 **css
/ bootstrap.min.css** 复制到我们项目的 css 文件夹中：

```
myproject/
 |-- myproject/
 |    |-- boards/
 |    |-- myproject/
 |    |-- templates/
 |    |-- static/
 |    |    +-- css/
 |    |         +-- bootstrap.min.css    <-- here
 |    +-- manage.py
 +-- venv/
```

还是一样的问题，我们需要将 Django 中的 **settings.py** 里配置一下静态文件的目录。在 `STATIC_URL` 添加以下内容： 

```
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
```


这里可以回忆一下，`TEMPLATES` 配置目录的路径，操作是差不多的。


现在我们必须在模板中加载静态文件（Bootstrap CSS 文件）：

> **templates/home.html**

```
{% load static %}<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Boards</title>
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
  </head>
  <body>
    <!-- body suppressed for brevity ... -->
  </body>
</html>
```



首先，我们在 html 的开头加载静态文件：`{% load static %}`


`{% static %}` 是用于告诉资源文件存在的路径，在这是，
`{% static 'css/bootstrap.min.css' %}` 就会返回
**/static/css/bootstrap.min.css** ，相当于
**http://127.0.0.1:8000/static/css/bootstrap.min.css**


这个 `{% static %}` 标签将会和 **settings.py** 的 `STATIC_URL` 组成最终的 URL。
怎么理解这句话呢？

例如，我们在静态文件托管在 **https://static.example.com/** ，然后我们设置了这个
属性：`STATIC_URL=https://static.example.com/`，然后
`{% static 'css/bootstrap.min.css' %}` 返回的是 ：
**https://static.example.com/css/bootstrap.min.css**。


如果还不能理解，放心，你现在只需要了解和记住相关的过程就行了，后面正式开发上线的
时候，会继续开展这部分的内容。


刷新页面 **127.0.0.1:8000** 我们可以看到它是这个样子的：

现在我们可以编辑模板，以利用 Bootstrap CSS：

现在我们可以利用 Bootstrap CSS 来编辑我们的模板页面了：

```
{% load static %}<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Boards</title>
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
  </head>
  <body>
    <div class="container">
      <ol class="breadcrumb my-4">
        <li class="breadcrumb-item active">Boards</li>
      </ol>
      <table class="table">
        <thead class="thead-inverse">
          <tr>
            <th>Board</th>
            <th>Posts</th>
            <th>Topics</th>
            <th>Last Post</th>
          </tr>
        </thead>
        <tbody>
          {% for board in boards %}
            <tr>
              <td>
                {{ board.name }}
                <small class="text-muted d-block">{{ board.description }}</small>
              </td>
              <td class="align-middle">0</td>
              <td class="align-middle">0</td>
              <td></td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  </body>
</html>
```



修改后变成这样子：


到目前为止，我们使用交互式控制台（`python manage.py shell`）添加新的版块（board）。
但是这样很不方便，因此我们需要一个更好的方式来做这个。在下一节中，我们将为网站管
理员实施一个管理界面来管理它。


#### Django Admin 简介

当我们开始一个新项目时，Django 在 `INSTALLED_APPS` 中已经配置了 **Django Admin** 。


Django Admin 的一个很好的用例就是，在博客中，它可以被作者用来编写和发布文章。另
一个例子是电子商务网站，工作人员可以创建，编辑，删除产品。

目前，我们将配置 Django Admin 来维护我们的应用程序的版块模块。

我们首先创建一个管理员帐户：

```
python manage.py createsuperuser
```

按照说明操作：

```
Username (leave blank to use 'vitorfs'): admin
Email address: admin@example.com
Password:
Password (again):
Superuser created successfully.
```

现在在浏览器中打开 URL：**http://127.0.0.1:8000/admin/**

输入 **用户名** 和 **密码** ：


在这里，它已经配置了一些功能，我们也可以添加**用户**和**组**来管理权限。


那么我们如何在这个管理后台中管理版块（Board）里面的内容呢？

其实很简单，在 **board** 目录下，**admin.py** 中添加以下代码：


> **boards/admin.py**

```
from django.contrib import admin
from .models import Board

admin.site.register(Board)
```


保存以下，然后刷新网页：


点击 **Boards** 链接就能查看现有版块列表：


我们可以通过点击 **Add Board** 按钮添加一个新的版块：

点击 **SAVE** 按钮：

我们可以检查一切是否正常，打开 **http://127.0.0.1:8000** URL：


#### 结论

在本教程中，我们探讨了许多新概念。我们为我们的项目定义了一些要求，创建了第一个模
型，迁移了数据库，开始玩 Models API。我们创建了第一个视图并编写了一些单元测试。
我们还配置了 Django 模板引擎，静态文件，并将 Bootstrap 4 库添加到项目中。最后，
我们简要介绍了 Django Admin 界面。


源代码

https://github.com/sibtc/django-beginners-guide/tree/v0.2-lw
* Django 常用命令如下:
python manage.py 可以看到详细的列表，在忘记子名称的时候特别有用。
django-admin.py 一般只用来创建项目，而 manage.py 用来管理创建好了的项目

| 任务                                 | 命令                                        |
| 创建新项目                           | django-admin.py startproject project_name   |
| 创建新应用                           | python manage.py startapp app_name          |
| 检测模型变化，生成新的数据库迁移文件 | python manage.py makemigrations [app_label] |
| 同步数据库与模型                     | python manage.py migrate                    |
| 启动服务器                           | python manage.py runserver                  |
| 创建超级用户                         | python manage.py createsuperuser            |
| 修改用户密码                         | python manage.py changepassword username    |
| 打开交互终端                         | python manage.py shell                      |
| 数据库交互                           | python manage.py dbshell                    |
| 查看当前版本                         | python manage.py version                    |

| 用途                                                             | 命令                               |
| 清空数据库内容，只留下空表                                       | python manage.py flush             |
| 开始测试                                                         | python manage.py test              |
| 搜集静态文件                                                     | python manage.py collectstatic     |
| 创建缓存表                                                       | python manage.py createcachetable  |
| 检测项目有没有问题                                               | python manage.py check             |
| 根据已有数据库反向生成 django 模型。你可以选择数据表名字         | python manage.py inspectdb [table] |
| 搜集所有的 messages，可以生成指定文件格式如 xml 文件| python manage.py makemessages      |
| 发送测试邮件                                                     | python manage.py sendemail [email] |
| 显示所有数据库迁移文件                                           | python manage.py showmigrations    |

1. 新建一个 django project

django-admin.py startproject project-name 
一个 project 为一个项目，project-name 项目名称，改成你自己的，要符合 Python 的变量命名规则（以下划线或字母开头）

2. 新建 app

python manage.py startapp app-name
或 django-admin.py startapp app-name 
一般一个项目有多个 app, 当然通用的 app 也可以在多个项目中使用。

3. 同步数据库

python manage.py syncdb
 
注意：Django 1.7.1 及以上的版本需要用以下命令
python manage.py makemigrations
python manage.py migrate 
这种方法可以创建表，当你在 models.py 中新增了类时，运行它就可以自动在数据库中创建表了，不用手动创建。

备注：对已有的 models 进行修改，Django 1.7 之前的版本的 Django 都是无法自动更改表结构的，不过有第三方工具 south,详见 Django 数据库迁移 一节。

4. 使用开发服务器

开发服务器，即开发时使用，一般修改代码后会自动重启，方便调试和开发，但是由于性能问题，建议只用来测试，不要用在生产环境。

python manage.py runserver
 
# 当提示端口被占用的时候，可以用其它端口：
python manage.py runserver 8001
python manage.py runserver 9999
（当然也可以 kill 掉占用端口的进程）
 
# 监听所有可用 ip（电脑可能有一个或多个内网 ip，一个或多个外网 ip，即有多个 ip 地址）
python manage.py runserver 0.0.0.0:8000
# 如果是外网或者局域网电脑上可以用其它电脑查看开发服务器
# 访问对应的 ip 加端口，比如 http://172.16.20.2:8000 
5. 清空数据库

python manage.py flush 
此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。

6. 创建超级管理员

python manage.py createsuperuser
 
# 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填
 
# 修改 用户密码可以用：
python manage.py changepassword username 
7. 导出数据 导入数据

python manage.py dumpdata appname > appname.json
python manage.py loaddata appname.json 
关于数据操作 详见：数据导入数据迁移，现在了解有这个用法就可以了。

8. Django 项目环境终端

python manage.py shell 
如果你安装了 bpython 或 ipython 会自动用它们的界面，推荐安装 bpython。

这个命令和 直接运行 python 或 bpython 进入 shell 的区别是：你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据，还有一些小测试非常方便。

9. 数据库命令行

python manage.py dbshell 
Django 会自动进入在 settings.py 中设置的数据库，如果是 MySQL 或 postgreSQL,会要求输入数据库用户密码。

在这个终端可以执行数据库的 SQL 语句。如果您对 SQL 比较熟悉，可能喜欢这种方式。
