* [[https://juejin.cn/post/6844903954002755592][nodejs（十一）json-server使用教程]] :website:

** Article

*** 一. json-server介绍


 #+BEGIN_QUOTE
   **json-server：**一个在前端本地运行，可以存储数据的server

   **作用：**模拟接口，操作模拟数据
 #+END_QUOTE

*** 二. json-server的使用


**** 2.1 安装


 #+BEGIN_EXAMPLE
      npm install json-server -D
      复制代码
 #+END_EXAMPLE

 - 安装完成之后，可以通过 =json-server -h= 命令检查是否安装成功

 #+BEGIN_EXAMPLE
      json-server [options] 

     Options:
       --config, -c       指定 config 文件                  [默认: "json-server.json"]
       --port, -p         设置端口号                                   [default: 3000]
       --host, -H         设置主机                                   [默认: "0.0.0.0"]
       --watch, -w        监控文件                                           [boolean]
       --routes, -r       指定路由文件
       --static, -s       设置静态文件
       --read-only, --ro  只允许 GET 请求                                    [boolean]
       --no-cors, --nc    禁止跨域资源共享                                   [boolean]
       --no-gzip, --ng    禁止GZIP                                          [boolean]
       --snapshots, -S    设置快照目录                                     [默认: "."]
       --delay, -d        设置反馈延时 (ms)
       --id, -i           设置数据的id属性 (e.g. _id)                     [默认: "id"]
       --quiet, -q        不输出日志信息                                     [boolean]
       --help, -h         显示帮助信息                                       [boolean]
       --version, -v      显示版本号                                         [boolean]
      复制代码
 #+END_EXAMPLE

**** 2.2 使用


 1. 安装 =json-server=

 2. 创建 db.json文件

    #+BEGIN_EXAMPLE
         {
           "posts": [
            {
               "id":  1,
               "title":  "json-server",
               "author":  "typicode"
            }
          ],
           "comments": [
            {
               "id":  1,
               "body":  "some comment",
               "postId":  1
            }
          ],
           "profile": {
             "name":  "typicode"
          }
        }
         复制代码
    #+END_EXAMPLE

 3. 运行

    #+BEGIN_EXAMPLE
         json-server db.json
         复制代码
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
         Loading db.json
        Done

        Resources
        http://localhost:3000/posts
        http://localhost:3000/comments
        http://localhost:3000/profile

        Home
        http://localhost:3000
         复制代码
    #+END_EXAMPLE

 4. 在浏览器输入上述 url，即可访问响应的数据

*** 三. 支持的方法


 #+BEGIN_QUOTE
   可以使用任何 HTTP方法
 #+END_QUOTE

 - *查询*

   - GET /list 获取列表
   - GET /list/1 获取id=1的数据

 - *新增*

   - POST /list 创建一个项目

 - *修改*

   - PUT /list/1 更新一个id为1的数据
   - PATCH /list/1 部分更新id为1的数据

 - *删除*

   - DELETE /list/1 删除id为1的数据

 *注意：*

 - 当你发送POST，PUT，PATCH 或者 DELETE请求时，变化会自动安全的保存到你的db.json文件中。

 - 你的请求体body应该是封闭对象。比如 ={"name": "Foobar"}=

 - id不是必须的，在PUT或者PATCH方法中，任何的id值将会被忽略。

 - 在POST请求中，id是可以被添加的，如果该值没有没占用，会使用该值，否则自动生成。

 - POST，PUT或者PATCH请求应该包含一个 =Content-Type:application/json=的header，来确保在请求body中使用json。

*** 四. CRUD-Demo


 #+BEGIN_QUOTE
   以下的dmeo，我们都使用postman工具来完成

   执行之前，先使用 =json-server db.json=运行服务器
 #+END_QUOTE

**** 4.1 查询


 - GET请求： =http://localhost:3000/comments=

**** 4.2 新增


 - POST请求： =http://localhost:3000/comments=
 - 参数： ={"body":"hello restapi","postId":1}=

**** 4.3 修改


 - PUT请求： =http://localhost:3000/comments/1=
 - 参数： ={"body":"hello world","postId":888}=

**** 4.4 删除


 - DELETE请求： =http://localhost:3000/comments/2=

**** 4.5 使用ajax发送增删改查请求


 #+BEGIN_QUOTE
   我们还可以通过jQuery的ajax来发送操作数据的请求
 #+END_QUOTE

 #+BEGIN_EXAMPLE
        //新增
     $.ajax({
          type:  'POST',
          url:  'http://localhost:3000/comments',
          data:{
              body: 'hello world',
              postId: 888
         },
          success:   function ( data) {
              console.log(data)
         }
     })

      //查询
     $.ajax({
          type:  'GET',
          url:  'http://localhost:3000/comments',
          success:   function ( data) {
              console.log(data)
         }
     })

      //修改
     $.ajax({
          type:  'PUT',
          url:  'http://localhost:3000/comments/1',
          data:{
              body: 'hello world',
              postId: 888
         },
          success:   function ( data) {
              console.log(data)
         }
     })

      //删除
     $.ajax({
          type:  'DELETE',
          url:  'http://localhost:3000/comments/1',
          success:   function ( data) {
              console.log(data)
         }
     })
      复制代码
 #+END_EXAMPLE

*** 五. 过滤


 #+BEGIN_QUOTE
   我们可以通过在URL后面加上参数，来达到过滤数据的目的
 #+END_QUOTE

 *例如：*

 - =http://localhost:3000/comments/1=：查询id为1的数据，返回一个对象
 - =http://localhost:3000/comments?name=zhangsan=：返回一个数组，name值都为zhangsan

*** 六. 注意


 #+BEGIN_QUOTE
   如果需要使用 json-server 模拟多层路由嵌套，无法通过 db.json中数据的多层嵌套，达到模拟多层路由嵌套的目的。

   也就是说，路由只能匹配到 db.json这个json最外层的key值。而里层的key值，都不会被路由匹配
 #+END_QUOTE

* [[https://www.cnblogs.com/fly_dragon/p/9150732.html][json-server 详解 - FlyDragon - 博客园]]                             :website:

[2020-11-28 六 15:31]

** Article

JSON-Server 是一个 Node 模块，运行 Express 服务器，你可以指定一个 json 文件作为 api 的数据源。

*** 安装json-server


 #+BEGIN_EXAMPLE
      npm install -g json-server
 #+END_EXAMPLE

*** 启动 json-server


 =json-server=可以直接把一个 =json=文件托管成一个具备全 =RESTful=风格的 =API=,并支持跨域、 =jsonp=、路由订制、数据快照保存等功能的 web 服务器。

 db.json文件的内容：

 #+BEGIN_EXAMPLE
      {
       "course": [
         {
           "id": 1000,
           "course_name": "马连白米且",
           "autor": "袁明",
           "college": "金并即总变史",
           "category_Id": 2
         },
         {
           "id": 1001,
           "course_name": "公拉农题队始果动",
           "autor": "高丽",
           "college": "先了队叫及便",
           "category_Id": 2
         }
       }
     }
 #+END_EXAMPLE

 例如以下命令，把 =db.json=文件托管成一个 web 服务。

 #+BEGIN_EXAMPLE
      $ json-server --watch --port 53000 db.json
 #+END_EXAMPLE

 输出类似以下内容，说明启动成功。

 #+BEGIN_EXAMPLE
      \{^_^}/ hi!

     Loading db.json
     Done

     Resources
     http://localhost:53000/course

     Home
     http://localhost:53000

     Type s + enter at any time to create a snapshot of the database
     Watching...
 #+END_EXAMPLE

 此时，你可以打开你的浏览器，然后输入： [[http://localhost:53000/course]]

*** json-server 的相关启动参数


 - 语法： =json-server [options] =

 - 选项列表：

 | 参数                 | 简写   | 默认值                                                | 说明                               |
 |----------------------+--------+-------------------------------------------------------+------------------------------------|
 | --config             | -c     | 指定配置文件                                          | [默认值: "json-server.json"]       |
 | --port               | -p     | 设置端口 [默认值: 3000]                               | Number                             |
 | --host               | -H     | 设置域 [默认值: "0.0.0.0"]                            | String                             |
 | --watch              | -w     | Watch file(s)                                         | 是否监听                           |
 | --routes             | -r     | 指定自定义路由                                        |                                    |
 | --middlewares        | -m     | 指定中间件 files                                      | [数组]                             |
 | --static             | -s     | Set static files directory                            | 静态目录,类比：express的静态目录   |
 | --readonly           | --ro   | Allow only GET requests [布尔]                        |                                    |
 | --nocors             | --nc   | Disable Cross-Origin Resource Sharing [布尔]          |                                    |
 | --no                 | gzip   | , --ng Disable GZIP Content-Encoding [布尔]           |                                    |
 | --snapshots          | -S     | Set snapshots directory [默认值: "."]                 |                                    |
 | --delay              | -d     | Add delay to responses (ms)                           |                                    |
 | --id                 | -i     | Set database id property (e.g. _id) [默认值: "id"]    |                                    |
 | --foreignKeySuffix   | --     | fks Set foreign key suffix (e.g. _id as in post_id)   | [默认值: "Id"]                     |
 | --help               | -h     | 显示帮助信息                                          | [布尔]                             |
 | --version            | -v     | 显示版本号                                            | [布尔]                             |

 - source可以是json文件或者js文件。实例：

 #+BEGIN_EXAMPLE
      $ json-server --watch -c ./jsonserver.json
     $ json-server --watch app.js
     $ json-server db.json
     json-server --watch -port 8888 db.json
 #+END_EXAMPLE

*** 动态生成模拟数据


 例如启动json-server的命令： =json-server --watch app.js= 是把一个js文件返回的数据托管成web服务。

 app.js配合 [[http://mockjs.com/][mockjs]]库可以很方便的进行生成模拟数据。

 #+BEGIN_EXAMPLE
       // 用mockjs模拟生成数据
      var Mock  =  require ( 'mockjs' ) ;

     module . exports  =  ( )  =>  {
        // 使用 Mock
        var data  = Mock . mock ( {
          'course|227' :  [
            {
              // 属性 id 是一个自增数，起始值为 1，每次增 1
              'id|+1' :  1000 ,
             course_name :  '@ctitle(5,10)' ,
             autor :  '@cname' ,
             college :  '@ctitle(6)' ,
              'category_Id|1-6' :  1
            }
          ] ,
          'course_category|6' :  [
            {
              "id|+1" :  1 ,
              "pid" :  - 1 ,
             cName :  '@ctitle(4)'
            }
          ]
        } ) ;
        // 返回的data会作为json-server的数据
        return data ;
      } ;
 #+END_EXAMPLE

*** 路由


**** 默认的路由


 =json-server=为提供了 =GET=, =POST=, =PUT=, =PATCH= , =DELETE=等请求的API,分别对应数据中的所有类型的实体。

 #+BEGIN_EXAMPLE
      # 获取所有的课程信息
     GET    /course

     # 获取id=1001的课程信息
     GET    /course/1001

     # 添加课程信息，请求body中必须包含course的属性数据，json-server自动保存。
     POST   /course

     # 修改课程，请求body中必须包含course的属性数据
     PUT    /course/1
     PATCH  /course/1

     # 删除课程信息
     DELETE /course/1

     # 获取具体课程信息id=1001
     GET    /course/1001
 #+END_EXAMPLE

**** 自定义路由


 当然你可以自定义路由：

 #+BEGIN_EXAMPLE
      $ json-server --watch --routes route.json db.json
 #+END_EXAMPLE

 =route.json=文件

 #+BEGIN_EXAMPLE
      {
       "/api/*": "/$1",    //   /api/course   <==>  /course
       "/:resource/:id/show": "/:resource/:id",
       "/posts/:category": "/posts?category=:category",
       "/articles\\?id=:id": "/posts/:id"
     }
 #+END_EXAMPLE

*** 自定义配置文件


 通过命令行配置路由、数据文件、监控等会让命令变的很长，而且容易敲错，可以把命令写到npm的scripts中，但是依然配置不方便。

 json-server允许我们把所有的配置放到一个配置文件中，这个配置文件默认 =json-server.json=;

 例如:

 #+BEGIN_EXAMPLE
      {
       "port": 53000,
       "watch": true,
       "static": "./public",
       "read-only": false,
       "no-cors": false,
       "no-gzip": false,
       "routes": "route.json"
     }
 #+END_EXAMPLE

 使用配置文件启动json-server:

 #+BEGIN_EXAMPLE
      # 默认使用：json-server.json配置文件
     $ json-server --watch app.js  

     # 指定配置文件
     $ json-server --watch -c jserver.json db.json
 #+END_EXAMPLE

*** 过滤查询


 查询数据，可以额外提供

 #+BEGIN_EXAMPLE
      GET /posts?title=json-server&author=typicode
     GET /posts?id=1&id=2

     # 可以用 . 访问更深层的属性。
     GET /comments?author.name=typicode
 #+END_EXAMPLE

 还可以使用一些判断条件作为过滤查询的辅助。

 #+BEGIN_EXAMPLE
      GET /posts?views_gte=10&views_lte=20
 #+END_EXAMPLE

 可以用的拼接条件为：

 - =_gte= : 大于等于
 - =_lte= : 小于等于
 - =_ne= : 不等于
 - =_like= : 包含

 #+BEGIN_EXAMPLE
      GET /posts?id_ne=1
     GET /posts?id_lte=100
     GET /posts?title_like=server
 #+END_EXAMPLE

*** 分页查询


 默认后台处理分页参数为： =_page= 第几页， =_limit=一页多少条。

 #+BEGIN_EXAMPLE
      GET /posts?_page=7
     GET /posts?_page=7&_limit=20
 #+END_EXAMPLE

 #+BEGIN_QUOTE
   默认一页10条。
 #+END_QUOTE

 后台会返回总条数，总条数的数据在响应头: =X-Total-Count=中。

*** 排序


 - 参数： =_sort=设定排序的字段
 - 参数： =_order=设定排序的方式（默认升序）

 #+BEGIN_EXAMPLE
      GET /posts?_sort=views&_order=asc
     GET /posts/1/comments?_sort=votes&_order=asc
 #+END_EXAMPLE

 支持多个字段排序：

 #+BEGIN_EXAMPLE
      GET /posts?_sort=user,views&_order=desc,asc
 #+END_EXAMPLE

*** 任意切片数据


 #+BEGIN_EXAMPLE
      GET /posts?_start=20&_end=30
     GET /posts/1/comments?_start=20&_end=30
     GET /posts/1/comments?_start=20&_limit=10
 #+END_EXAMPLE

*** 全文检索


 可以通过 =q=参数进行全文检索，例如： =GET /posts?q=internet=

*** 实体关联


**** 关联子实体


 包含children的对象, 添加 =_embed=

 #+BEGIN_EXAMPLE
      GET /posts?_embed=comments
     GET /posts/1?_embed=comments
 #+END_EXAMPLE

**** 关联父实体


 包含 parent 的对象, 添加 =_expand=

 #+BEGIN_EXAMPLE
      GET /comments?_expand=post
     GET /comments/1?_expand=post
 #+END_EXAMPLE

*** 其他高级用法


 =json-server=本身就是依赖express开发而来，可以进行深度定制。细节就不展开，具体详情请参考 [[https://github.com/typicode/json-server][官网]]。

 - 自定义路由

 #+BEGIN_EXAMPLE
       const jsonServer  =  require ( 'json-server' )
      const server  = jsonServer . create ( )
      const router  = jsonServer . router ( 'db.json' )
      const middlewares  = jsonServer . defaults ( )

     server . use (middlewares )

     server . get ( '/echo' ,  (req , res )  =>  {
       res . jsonp (req .query )
      } )

     server . use (jsonServer .bodyParser )
     server . use ( (req , res , next )  =>  {
        if  (req .method  ===  'POST' )  {
         req .body .createdAt  = Date . now ( )
        }
        next ( )
      } )

     server . use (router )
     server . listen ( 3000 ,  ( )  =>  {
       console . log ( 'JSON Server is running' )
      } )
 #+END_EXAMPLE

 - 自定义输出内容

 #+BEGIN_EXAMPLE
      router . render  =  (req , res )  =>  {
       res . jsonp ( {
         body : res .locals .data
        } )
      }
 #+END_EXAMPLE

 - 自定义用户校验

 #+BEGIN_EXAMPLE
       const jsonServer  =  require ( 'json-server' )
      const server  = jsonServer . create ( )
      const router  = jsonServer . router ( 'db.json' )
      const middlewares  = jsonServer . defaults ( )

     server . use (middlewares )
     server . use ( (req , res , next )  =>  {
       if  ( isAuthorized (req ) )  {  // add your authorization logic here
         next ( )  // continue to JSON Server router
       }  else  {
        res . sendStatus ( 401 )
       }
      } )
     server . use (router )
     server . listen ( 3000 ,  ( )  =>  {
       console . log ( 'JSON Server is running' )
      } )
 #+END_EXAMPLE
