#+TITLE: bootstrap 简介
#+DESCRIPTION: bootstrap 简介
#+TAGS[]: bootstrap
#+CATEGORIES[]: 技术

用来构建响应式网站

# more
* bootstrap 
** 模板  
   #+begin_src html
   <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" >
   <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
   #+end_src
               
** 布局
   bootstrap 使用 *容器*，*栅格* ，*媒体对象* ，和 *响应式工具*  来给整个网页进行布局。  

*** 容器
    容器能够根据屏幕大小来选择合适的显示宽度，它是最基本的，栅格依赖容器得到的宽度。
    
    下面是显示示例

    | Extra small <576px | Small ≥576px | Medium ≥768px | Large ≥992px | Extra large ≥1200px |        |
    |--------------------+---------------+----------------+---------------+----------------------+--------|
    | .container         |          100% |          540px | 720px         | 960px                | 1140px |
    | .container-sm      |          100% |          540px | 720px         | 960px                | 1140px |
    | .container-md      |          100% |           100% | 720px         | 960px                | 1140px |
    | .container-lg      |          100% |           100% | 100%          | 960px                | 1140px |
    | .container-xl      |          100% |           100% | 100%          | 100%                 | 1140px |
    | .container-fluid   |          100% |           100% | 100%          | 100%                 | 100%   |
    |--------------------+---------------+----------------+---------------+----------------------+--------|
    
    简单说明： 看第一行 ，就是如果你设置了 container 类，如果你在一台 >1200px 的显示器看网页，那网页只固定 1140px 宽，在 992px 的显示器看，就要重新排版了，只能显示 960px 的内容，多的往下排列
**** 设定固定宽度容器
     #+begin_src html
       <div class="container">
         <!-- Content here -->
       </div>
     #+end_src
   
**** 设定全宽容器 (根据屏幕大小随意拉伸)
     #+begin_src html
       <div class="container-fluid">
         ...
       </div>
     #+end_src

*** Z-index (分层)

*** 栅格
    栅格系统使用一系列容器，行和列来布局和对齐内容。 它是用 *flexbox* 构建的，并且完全响应。 

    栅格的用法: 栅格以 row 布局，每一行可以有几个 col (列)，每个列可以设置列宽，不设置的会自动调整
    #+begin_src html
      <div class="container">
        <div class="row">
          <div class="col-sm">
            One of three columns
          </div>
          <div class="col-sm">
            One of three columns
          </div>
          <div class="col-sm">
            One of three columns
          </div>
        </div>
      </div>
    #+end_src
  
**** 列的自动布局
***** 设置列宽 (给 col 添加数字属性) 
      #+begin_src html 
        <div class="col-6">
          #+end_src

***** 设置可变宽度
      使用 col-{breakpoint}-auto 类根据内容的自然宽度调整列的大小
***** 设置断行
         <div class="w-100"></div>
**** 响应式的列
    对于不同显示设备，需要不同的布局，可以使用响应类 *.col-**  
**** 对齐
*****  垂直对齐
****** 行外 
 #+begin_src html
   <div class="container">
     <div class="row align-items-start">
       <div class="col">
         One of three columns
       </div>
       <div class="col">
         One of three columns
       </div>
       <div class="col">
         One of three columns
       </div>
     </div>
     <div class="row align-items-center">
       <div class="col">
         One of three columns
       </div>
       <div class="col">
         One of three columns
       </div>
       <div class="col">
         One of three columns
       </div>
     </div>
     <div class="row align-items-end">
       <div class="col">
         One of three columns
       </div>
       <div class="col">
         One of three columns
       </div>
       <div class="col">
         One of three columns
       </div>
     </div>
   </div>

 #+end_src
****** 行内
       #+begin_src html
         <div class="container">
           <div class="row">
             <div class="col align-self-start">
               One of three columns
             </div>
             <div class="col align-self-center">
               One of three columns
             </div>
             <div class="col align-self-end">
               One of three columns
             </div>
           </div>
         </div>
       #+end_src
***** 水平对齐
      #+begin_src html
<div class="container">
  <div class="row justify-content-start">
    <div class="col-4">
      One of two columns
    </div>
    <div class="col-4">
      One of two columns
    </div>
  </div>
  <div class="row justify-content-center">
    <div class="col-4">
      One of two columns
    </div>
    <div class="col-4">
      One of two columns
    </div>
  </div>
  <div class="row justify-content-end">
    <div class="col-4">
      One of two columns
    </div>
    <div class="col-4">
      One of two columns
    </div>
  </div>
  <div class="row justify-content-around">
    <div class="col-4">
      One of two columns
    </div>
    <div class="col-4">
      One of two columns
    </div>
  </div>
  <div class="row justify-content-between">
    <div class="col-4">
      One of two columns
    </div>
    <div class="col-4">
      One of two columns
    </div>
  </div>
</div>
      #+end_src
***** 无间隙
      #+begin_src html
        <div class="row no-gutters">
          <div class="col-12 col-sm-6 col-md-8">.col-12 .col-sm-6 .col-md-8</div>
          <div class="col-6 col-md-4">.col-6 .col-md-4</div>
        </div>
      #+end_src
**** 列的重排
***** 排序类 order 
      #+begin_src html
        <div class="container">
          <div class="row">
            <div class="col">
              First, but unordered
            </div>
            <div class="col order-12">
              Second, but last
            </div>
            <div class="col order-1">
              Third, but first
            </div>
          </div>
        </div>
      #+end_src
***** 偏移类 offset
      #+begin_src html
        <div class="row">
          <div class="col-md-4">.col-md-4</div>
          <div class="col-md-4 offset-md-4">.col-md-4 .offset-md-4</div>
        </div>
        <div class="row">
          <div class="col-md-3 offset-md-3">.col-md-3 .offset-md-3</div>
          <div class="col-md-3 offset-md-3">.col-md-3 .offset-md-3</div>
        </div>
        <div class="row">
          <div class="col-md-6 offset-md-3">.col-md-6 .offset-md-3</div>
        </div>
      #+end_src
***** 远离 margin
      #+begin_src html
        <div class="row">
          <div class="col-md-4">.col-md-4</div>
          <div class="col-md-4 ml-auto">.col-md-4 .ml-auto</div>
        </div>
        <div class="row">
          <div class="col-md-3 ml-md-auto">.col-md-3 .ml-md-auto</div>
          <div class="col-md-3 ml-md-auto">.col-md-3 .ml-md-auto</div>
        </div>
        <div class="row">
          <div class="col-auto mr-auto">.col-auto .mr-auto</div>
          <div class="col-auto">.col-auto</div>
        </div>
      #+end_src
**** 嵌套 每个列可以嵌套新的行
     #+begin_src html
<div class="row">
  <div class="col-sm-9">
    Level 1: .col-sm-9
    <div class="row">
      <div class="col-8 col-sm-6">
        Level 2: .col-8 .col-sm-6
      </div>
      <div class="col-4 col-sm-6">
        Level 2: .col-4 .col-sm-6
      </div>
    </div>
  </div>
</div>
     #+end_src
** 内容     
*** 排版
**** 标题 
     h1 - h6
**** 超大标题
     #+begin_src html
       <h1 class="display-1">Display 1</h1>
       <h1 class="display-2">Display 2</h1>
       <h1 class="display-3">Display 3</h1>
       <h1 class="display-4">Display 4</h1>
     #+end_src
**** 引言
     #+begin_src html
       <p class="lead">
     #+end_src
**** 文本
***** 引用
      将任何 HTML 包含在<blockquote class="blockquote">里作为引用
   
***** 署名
      #+begin_src html
        <blockquote class="blockquote">
          <p class="mb-0">我们中国的最伟大最永久，而且最普遍的“艺术”是男人扮女人。</p>
          <footer class="blockquote-footer">来自 <cite title="Source Title">鲁迅</cite></footer>
        </blockquote>
      #+end_src
***** 对齐 .text-center .text-right   
**** 列表
*****  无特效列表
      #+begin_src html
      <ul class="list-unstyled">
      #+end_src
***** 行内列表
      #+begin_src html
        <ul class="list-inline">
          <li class="list-inline-item">Lorem ipsum</li>
          <li class="list-inline-item">Phasellus iaculis</li>
          <li class="list-inline-item">Nulla volutpat</li>
        </ul>
      #+end_src
***** 文本截断 . text-truncate
      
*** 图片
**** 使用响应式图片 (自动缩放)  
      #+begin_src html
        <img src="..." class="img-fluid" alt="Responsive image">
      #+end_src
      
**** 缩略图 (设置 1px 的边框)
     #+begin_src html
       <img src="..." alt="..." class="img-thumbnail">
     #+end_src

**** 对齐
     #+begin_src html
       <img src="..." class="rounded float-left" alt="...">
       <img src="..." class="rounded float-right" alt="...">
     #+end_src
*** 表格
**** 自动对齐 .table 
     #+begin_src html
       <table class="table">
     #+end_src
**** 翻转颜色 .table-dark
**** 表头选项  
     .thead-light 或 .thead-dark 使 <thead> 显示为浅灰色或深灰色
**** 带有条纹的行 
     使用 .table-striped 来给 <tbody> 的所有行添加条纹效果
**** 表格边框  .table-bordered
**** 去除表格边框 .table-borderless
**** 鼠标停留高亮 .table-hover 
**** 更小的表格  .table-sm
**** 表格着色 (行或列)
     #+begin_src html
       <!-- On rows -->
       <tr class="table-active">...</tr>

       <tr class="table-primary">...</tr>
       <tr class="table-secondary">...</tr>
       <tr class="table-success">...</tr>
       <tr class="table-danger">...</tr>
       <tr class="table-warning">...</tr>
       <tr class="table-info">...</tr>
       <tr class="table-light">...</tr>
       <tr class="table-dark">...</tr>

       <!-- On cells (`td` or `th`) -->
       <tr>
         <td class="table-active">...</td>
  
         <td class="table-primary">...</td>
         <td class="table-secondary">...</td>
         <td class="table-success">...</td>
         <td class="table-danger">...</td>
         <td class="table-warning">...</td>
         <td class="table-info">...</td>
         <td class="table-light">...</td>
         <td class="table-dark">...</td>
       </tr>
     #+end_src
**** 背景色类
     #+begin_src html
<!-- On rows -->
<tr class="bg-primary">...</tr>
<tr class="bg-success">...</tr>
<tr class="bg-warning">...</tr>
<tr class="bg-danger">...</tr>
<tr class="bg-info">...</tr>

<!-- On cells (`td` or `th`) -->
<tr>
  <td class="bg-primary">...</td>
  <td class="bg-success">...</td>
  <td class="bg-warning">...</td>
  <td class="bg-danger">...</td>
  <td class="bg-info">...</td>
</tr>
     #+end_src
**** 响应式表格 (滚动条)
***** 水平滚动条 
      #+begin_src html
        <div class="table-responsive-sm">
          <table class="table">
            ...
          </table>
        </div>
      #+end_src
*** 图文区 - Figures
    展示图片及其说明
    
    #+begin_src html
      <figure class="figure">
        <img src=".../400x300" class="figure-img img-fluid rounded" alt="A generic square placeholder image with rounded corners in a figure.">
        <figcaption class="figure-caption text-right">A caption for the above image.</figcaption>
      </figure>
    #+end_src
    
** 组件
*** 下拉菜单
**** 案例
     将下拉菜单触发器和下拉菜单都包裹在.dropdown 里，或者另一个声明了 position:
     relative;的元素。然后添加组成菜单的 HTML 代码。
     #+BEGIN_SRC html
       <div class="dropdown">
         <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
           Dropdown
           <span class="caret"></span>
         </button>
         <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
           <li><a href="#">Action</a></li>
           <li><a href="#">Another action</a></li>
           <li><a href="#">Something else here</a></li>
           <li role="separator" class="divider"></li>
           <li><a href="#">Separated link</a></li>
         </ul>
       </div>
     #+END_SRC 
    
     通过为下拉菜单的父元素设置 .dropup 类，可以让菜单向上弹出（默认是向下弹出的）。
    
     #+BEGIN_SRC html
       <div class="dropup">
         <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
           Dropup
           <span class="caret"></span>
         </button>
         <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
           <li><a href="#">Action</a></li>
           <li><a href="#">Another action</a></li>
           <li><a href="#">Something else here</a></li>
           <li role="separator" class="divider"></li>
           <li><a href="#">Separated link</a></li>
         </ul>
       </div>
     #+END_SRC
**** 对齐 [ .dropdown-menu-right]
     默认情况下，下拉菜单自动沿着父元素的上沿和左侧被定位为 100% 宽度。 为
     .dropdown-menu 添加 .dropdown-menu-right 类可以让菜单右对齐。
**** 标题 
     在任何下拉菜单中均可通过添加标题来标明一组动作。
     #+BEGIN_SRC html
       <ul class="dropdown-menu" aria-labelledby="dropdownMenu3">
         ...
         <li class="dropdown-header">Dropdown header</li>
         ...
       </ul>
     #+END_SRC
**** 禁用的菜单项 为下拉菜单中的 <li> 元素添加 .disabled 类，从而禁用相应的菜单项。
**** 分割线
     为下拉菜单添加一条分割线，用于将多个链接分组。
     
     #+begin_src html
       <ul class="dropdown-menu" aria-labelledby="dropdownMenuDivider">
         ...
         <li role="separator" class="divider"></li>
         ...
       </ul>
     #+end_src
**** 禁用的菜单项
     为下拉菜单中的 <li> 元素添加 .disabled 类，从而禁用相应的菜单项。

     #+begin_src html
       <ul class="dropdown-menu" aria-labelledby="dropdownMenu4">
         <li><a href="#">Regular link</a></li>
         <li class="disabled"><a href="#">Disabled link</a></li>
         <li><a href="#">Another link</a></li>
       </ul>
     #+end_src
*** 按钮组
    通过按钮组容器把一组按钮放在同一行里。通过与按钮插件联合使用，可以设置为单选框或
    多选框的样式和行为。

    : 按钮组中的工具提示和弹出框需要特别的设置
    : 当为 .btn-group 中的元素应用工具提示或弹出框时，必须指定 container: 'body' 选项，这样可以避免不必要的副作用（例如工具提示或弹出框触发时，会让页面元素变宽和/或失去圆角）。

    : 确保设置正确的 role 属性并提供一个 label 标签
    : 为了向使用辅助技术 - 如屏幕阅读器 - 的用户正确传达一正确的按钮分组，需要提供一个合适的 role 属性。对于按钮组合，应该是 role="group"，对于 toolbar（工具栏）应该是 role="toolbar"。

    : 一个例外是按钮组合只包含一个单一的控制元素或一个下拉菜单（比如实际情况，<button> 元素组成的两端对齐排列的按钮组 ）或下拉菜单。

    : 此外，按钮组和工具栏应给定一个明确的 label 标签，尽管设置了正确的 role 属性，但是大多数辅助技术将不会正确的识读他们。在这里提供的实例中，我们使用 aria-label，但是，aria-labelledby 也可以使用。
**** 基本实例
     Wrap a series of buttons with .btn in .btn-group.

     #+begin_src html
       <div class="btn-group" role="group" aria-label="...">
         <button type="button" class="btn btn-default">Left</button>
         <button type="button" class="btn btn-default">Middle</button>
         <button type="button" class="btn btn-default">Right</button>
       </div>
     #+end_src
**** 按钮工具栏
     把一组 <div class="btn-group"> 组合进一个 <div class="btn-toolbar"> 中就可以做成更复杂的组件。

     <div class="btn-toolbar" role="toolbar" aria-label="...">
     <div class="btn-group" role="group" aria-label="...">...</div>
     <div class="btn-group" role="group" aria-label="...">...</div>
     <div class="btn-group" role="group" aria-label="...">...</div>
     </div>
**** 尺寸
     只要给 .btn-group 加上 .btn-group-* 类，就省去为按钮组中的每个按钮都赋予尺寸类了，
     如果包含了多个按钮组时也适用。

     #+begin_src html
       <div class="btn-group btn-group-lg" role="group" aria-label="...">...</div>
       <div class="btn-group" role="group" aria-label="...">...</div>
       <div class="btn-group btn-group-sm" role="group" aria-label="...">...</div>
       <div class="btn-group btn-group-xs" role="group" aria-label="...">...</div>
     #+end_src
**** 嵌套
     想要把下拉菜单混合到一系列按钮中，只须把 .btn-group 放入另一个 .btn-group 中。

     #+begin_src html
       <div class="btn-group" role="group" aria-label="...">
         <button type="button" class="btn btn-default">1</button>
         <button type="button" class="btn btn-default">2</button>

         <div class="btn-group" role="group">
           <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
             Dropdown
             <span class="caret"></span>
           </button>
           <ul class="dropdown-menu">
             <li><a href="#">Dropdown link</a></li>
             <li><a href="#">Dropdown link</a></li>
           </ul>
         </div>
       </div>
     #+end_src
**** 垂直排列
     让一组按钮垂直堆叠排列显示而不是水平排列。分列式按钮下拉菜单不支持这种方式。

     #+begin_src html
       <div class="btn-group-vertical" role="group" aria-label="...">
         ...
       </div>
     #+end_src
**** 两端对齐排列的按钮组
     让一组按钮拉长为相同的尺寸，填满父元素的宽度。对于按钮组中的按钮式下拉菜单也同样适用。

     : 关于边框的处理
     : 由于对两端对齐的按钮组使用了特定的 HTML 和 CSS（即 display: table-cell），两个按钮之间的边框叠加在了一起。在普通的按钮组中，margin-left: -1px 用于将边框重叠，而没有删除任何一个按钮的边框。然而，margin 属性不支持 display: table-cell。因此，根据你对 Bootstrap 的定制，你可以删除或重新为按钮的边框设置颜色。

     : IE8 和边框
     : Internet Explorer 8 不支持在两端对齐的按钮组中绘制边框，无论是 <a> 或 <button> 元素。为了照顾 IE8，把每个按钮放入另一个 .btn-group 中即可。
***** 关于 <a> 元素
      只须将一系列 .btn 元素包裹到 .btn-group.btn-group-justified 中即可。


      #+begin_src html
        <div class="btn-group btn-group-justified" role="group" aria-label="...">
          ...
        </div>
      #+end_src
      : Links acting as buttons
      : If the <a> elements are used to act as buttons – triggering in-page functionality, rather than navigating to another document or section within the current page – they should also be given an appropriate role="button".
***** 关于 <button> 元素
      为了将 <button> 元素用于两端对齐的按钮组中，必须将每个按钮包裹进一个按钮组
      中 you must wrap each button in a button group。大部分的浏览器不能将我们的
      CSS 应用到对齐的 <button> 元素上，但是，由于我们支持按钮式下拉菜单，我们可
      以解决这个问题。

      #+begin_src html
        <div class="btn-group btn-group-justified" role="group" aria-label="...">
          <div class="btn-group" role="group">
            <button type="button" class="btn btn-default">Left</button>
          </div>
          <div class="btn-group" role="group">
            <button type="button" class="btn btn-default">Middle</button>
          </div>
          <div class="btn-group" role="group">
            <button type="button" class="btn btn-default">Right</button>
          </div>
        </div>
      #+end_src
*** 按钮式下拉菜单
**** 单按钮下拉菜单
     #+begin_src html
       <!-- Single button -->
       <div class="btn-group">
         <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
           Action <span class="caret"></span>
         </button>
         <ul class="dropdown-menu">
           <li><a href="#">Action</a></li>
           <li><a href="#">Another action</a></li>
           <li><a href="#">Something else here</a></li>
           <li role="separator" class="divider"></li>
           <li><a href="#">Separated link</a></li>
         </ul>
       </div>
     #+end_src
**** 分裂式按钮下拉菜单
     #+begin_src html
     <!-- Split button -->
     <div class="btn-group">
     <button type="button" class="btn btn-danger">Action</button>
     <button type="button" class="btn btn-danger dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
     <span class="caret"></span>
     <span class="sr-only">Toggle Dropdown</span>
     </button>
     <ul class="dropdown-menu">
     <li><a href="#">Action</a></li>
     <li><a href="#">Another action</a></li>
     <li><a href="#">Something else here</a></li>
     <li role="separator" class="divider"></li>
     <li><a href="#">Separated link</a></li>
     </ul>
     </div>
**** 向上弹出式菜单
     给父元素添加 .dropup 类就能使触发的下拉菜单朝上方打开。

     #+begin_src html
       <div class="btn-group dropup">
         <button type="button" class="btn btn-default">Dropup</button>
         <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
           <span class="caret"></span>
           <span class="sr-only">Toggle Dropdown</span>
         </button>
         <ul class="dropdown-menu">
           <!-- Dropdown menu links -->
         </ul>
       </div>
     #+end_src
*** 导航
**** 标签页
     注意 .nav-tabs 类依赖 .nav 基类。

    #+begin_src html
    <ul class="nav nav-tabs">
      <li role="presentation" class="active"><a href="#">Home</a></li>
      <li role="presentation"><a href="#">Profile</a></li>
      <li role="presentation"><a href="#">Messages</a></li>
    </ul>
    #+end_src
**** 胶囊式标签页
    HTML 标记相同，但使用 .nav-pills 类：

    #+begin_src html
    <ul class="nav nav-pills">
      <li role="presentation" class="active"><a href="#">Home</a></li>
      <li role="presentation"><a href="#">Profile</a></li>
      <li role="presentation"><a href="#">Messages</a></li>
    </ul>
    #+end_src
    胶囊是标签页也是可以垂直方向堆叠排列的。只需添加 .nav-stacked 类。

    #+begin_src html
    <ul class="nav nav-pills nav-stacked">
      ...
    </ul>
    #+end_src
**** 两端对齐的标签页
    在大于 768px 的屏幕上，通过 .nav-justified 类可以很容易的让标签页或胶囊式标
    签呈现出同等宽度。在小屏幕上，导航链接呈现堆叠样式。

    #+begin_src html
    <ul class="nav nav-tabs nav-justified">
      ...
    </ul>
    <ul class="nav nav-pills nav-justified">
      ...
    </ul>
    #+end_src
**** 禁用的链接
    对任何导航组件（标签页、胶囊式标签页），都可以添加 .disabled 类，从而实现链接为灰色且没有鼠标悬停效果。

    : 链接功能不受到影响
    : 这个类只改变 <a> 的外观，不改变功能。可以自己写 JavaScript 禁用这里的链接。

    #+begin_src html
    <ul class="nav nav-pills">
      ...
      <li role="presentation" class="disabled"><a href="#">Disabled link</a></li>
      ...
    </ul>
    #+end_src
**** 添加下拉菜单
    用一点点额外 HTML 代码并加入下拉菜单插件的 JavaScript 插件即可。
***** 带下拉菜单的标签页
     #+begin_src html
     <ul class="nav nav-tabs">
       ...
       <li role="presentation" class="dropdown">
         <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
           Dropdown <span class="caret"></span>
         </a>
         <ul class="dropdown-menu">
           ...
         </ul>
       </li>
       ...
     </ul>
     #+end_src
***** 带下拉菜单的胶囊式标签页
     #+begin_src html
     <ul class="nav nav-pills">
       ...
       <li role="presentation" class="dropdown">
         <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
           Dropdown <span class="caret"></span>
         </a>
         <ul class="dropdown-menu">
           ...
         </ul>
       </li>
       ...
     </ul>
     #+end_src
*** 导航条
**** 默认样式的导航条
     导航条是在您的应用或网站中作为导航页头的响应式基础组件。它们在移动设备上可
      以折叠（并且可开可关），且在视口（viewport）宽度增加时逐渐变为水平展开模式。

      两端对齐的导航条导航链接已经被弃用了。

      : 导航条内所包含元素溢出
      : 由于 Bootstrap 并不知道你在导航条内放置的元素需要占据多宽的空间，你可能会遇到导航条中的内容折行的情况（也就是导航条占据两行）。解决办法如下：

      a. 减少导航条内所有元素所占据的宽度。
      b. 在某些尺寸的屏幕上（利用 响应式工具类）隐藏导航条内的一些元素。
      c. 修改导航条在水平排列和折叠排列互相转化时，触发这个转化的最小屏幕宽度值。可以通过修改 @grid-float-breakpoint 变量实现，或者自己重写相关的媒体查询代码，覆盖 Bootstrap 的默认值。
      : 依赖 JavaScript 插件
      : 如果 JavaScript 被禁用，并且视口（viewport）足够窄，致使导航条折叠起来，导航条将不能被打开，.navbar-collapse 内所包含的内容也将不可见。

      : 响应式导航条依赖 collapse 插件，定制 Bootstrap 的话时候必将其包含。

      : 修改视口的阈值，从而影响导航条的排列模式
      : 当浏览器视口（viewport）的宽度小于 @grid-float-breakpoint 值时，导航条内部的元素变为折叠排列，也就是变现为移动设备展现模式；当浏览器视口（viewport）的宽度大于 @grid-float-breakpoint 值时，导航条内部的元素变为水平排列，也就是变现为非移动设备展现模式。通过调整源码中的这个值，就可以控制导航条何时堆叠排列，何时水平排列。默认值是 768px（小屏幕 -- 或者说是平板 --的最小值，或者说是平板）。

      : 导航条的可访问性
      : 务必使用 <nav> 元素，或者，如果使用的是通用的 <div> 元素的话，务必为导航条设置 role="navigation" 属性，这样能够让使用辅助设备的用户明确知道这是一个导航区域。

     #+begin_src html
     <nav class="navbar navbar-default">
        <div class="container-fluid">
          <!-- Brand and toggle get grouped for better mobile display -->
          <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
              <span class="sr-only">Toggle navigation</span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
              <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">Brand</a>
          </div>

          <!-- Collect the nav links, forms, and other content for toggling -->
          <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
              <li class="active"><a href="#">Link <span class="sr-only">(current)</span></a></li>
              <li><a href="#">Link</a></li>
              <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
                <ul class="dropdown-menu">
                  <li><a href="#">Action</a></li>
                  <li><a href="#">Another action</a></li>
                  <li><a href="#">Something else here</a></li>
                  <li role="separator" class="divider"></li>
                  <li><a href="#">Separated link</a></li>
                  <li role="separator" class="divider"></li>
                  <li><a href="#">One more separated link</a></li>
                </ul>
              </li>
            </ul>
            <form class="navbar-form navbar-left">
              <div class="form-group">
                <input type="text" class="form-control" placeholder="Search">
              </div>
              <button type="submit" class="btn btn-default">Submit</button>
            </form>
            <ul class="nav navbar-nav navbar-right">
              <li><a href="#">Link</a></li>
              <li class="dropdown">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
                <ul class="dropdown-menu">
                  <li><a href="#">Action</a></li>
                  <li><a href="#">Another action</a></li>
                  <li><a href="#">Something else here</a></li>
                  <li role="separator" class="divider"></li>
                  <li><a href="#">Separated link</a></li>
                </ul>
              </li>
            </ul>
          </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->
      </nav>
     #+end_src
**** 品牌图标
      将导航条内放置品牌标志的地方替换为 <img> 元素即可展示自己的品牌图标。由于
      .navbar-brand 已经被设置了内补（padding）和高度（height），你需要根据自己
      的情况添加一些 CSS 代码从而覆盖默认设置。

      #+begin_src html
      <nav class="navbar navbar-default">
        <div class="container-fluid">
          <div class="navbar-header">
            <a class="navbar-brand" href="#">
              <img alt="Brand" src="...">
            </a>
          </div>
        </div>
      </nav>
      #+end_src
**** 表单
      将表单放置于 .navbar-form 之内可以呈现很好的垂直对齐，并在较窄的视口
      （viewport）中呈现折叠状态。 使用对齐选项可以规定其在导航条上出现的位置。

      注意，.navbar-form 和 .form-inline 的大部分代码都一样，内部实现使用了 mixin。 某些表单组件，例如输入框组，可能需要设置一个固定宽度，从而在导航条内有合适的展现。

      #+begin_src html
      <form class="navbar-form navbar-left" role="search">
        <div class="form-group">
          <input type="text" class="form-control" placeholder="Search">
        </div>
        <button type="submit" class="btn btn-default">Submit</button>
      </form>
      #+end_src
      : 移动设备上的注意事项
      : 在移动设备上，对于在 fixed 定位的元素内使用表单控件的情况有一些注意事项。请参考我们提供的浏览器支持情况相关的文档 。

      : 为输入框添加 label 标签
      : 如果你没有为输入框添加 label 标签，屏幕阅读器将会遇到问题。对于导航条内的表单，可以通过添加 .sr-only 类隐藏 label 标签。
**** 按钮
      对于不包含在 <form> 中的 <button> 元素，加上 .navbar-btn 后，可以让它在导航条里垂直居中。有一些对于为辅助设备提供可识别标签的方法，例如，aria-label、aria-labelledby 或者 title 属性。如果这些方法都没有，屏幕阅读器将使用 placeholder 属性（如果这个属性存在的话），但是请注意，使用 placeholder 代替其他识别标签的方式是不推荐的。
       #+begin_src html
       <button type="button" class="btn btn-default navbar-btn">Sign in</button>
       #+end_src
      : 基于情境的用法
      : 就像标准的 按钮类 一样，.navbar-btn 可以被用在 <a> 和 <input> 元素上。然而，在 .navbar-nav 内，.navbar-btn 和标准的按钮类都不应该被用在 <a> 元素上。
**** 文本
      把文本包裹在 .navbar-text 中时，为了有正确的行距和颜色，通常使用 <p> 标签。

      #+begin_src html
      <p class="navbar-text">Signed in as Mark Otto</p>
      #+end_src
**** 非导航的链接
      或许你希望在标准的导航组件之外添加标准链接，那么，使用 .navbar-link 类可以让链接有正确的默认颜色和反色设置。

      #+begin_src html
      <p class="navbar-text navbar-right">Signed in as <a href="#" class="navbar-link">Mark Otto</a></p>
      #+end_src
**** 组件排列
      通过添加 .navbar-left 和 .navbar-right 工具类让导航链接、表单、按钮或文本
      对齐。两个类都会通过 CSS 设置特定方向的浮动样式。例如，要对齐导航链接，就
      要把它们放在个分开的、应用了工具类的 <ul> 标签里。

      这些类是 .pull-left 和 .pull-right 的 mixin 版本，但是他们被限定在了媒体查
      询（media query）中，这样可以更容易的在各种尺寸的屏幕上处理导航条组件。

      : 向右侧对齐多个组件
      : 导航条目前不支持多个 .navbar-right 类。为了让内容之间有合适的空隙，我们为最后一个 .navbar-right 元素使用负边距（margin）。如果有多个元素使用这个类，它们的边距（margin）将不能按照你的预期正常展现。

      : 我们将在 v4 版本中重写这个组件时重新审视这个功能。
**** 固定在顶部
      添加 .navbar-fixed-top 类可以让导航条固定在顶部，还可包含一个 .container
      或 .container-fluid 容器，从而让导航条居中，并在两侧添加内补（padding）。

      #+begin_src html
      <nav class="navbar navbar-default navbar-fixed-top">
        <div class="container">
          ...
        </div>
      </nav>
      #+end_src
      : 需要为 body 元素设置内补（padding）
      : 这个固定的导航条会遮住页面上的其它内容，除非你给 <body> 元素底部设置了 padding。用你自己的值，或用下面给出的代码都可以。提示：导航条的默认高度是 50px。

      : body { padding-top: 70px; }
      : Make sure to include this after the core Bootstrap CSS.
**** 固定在底部
      添加 .navbar-fixed-bottom 类可以让导航条固定在底部，并且还可以包含一个
      .container 或 .container-fluid 容器，从而让导航条居中，并在两侧添加内补
      （padding）。

      #+begin_src html
      <nav class="navbar navbar-default navbar-fixed-bottom">
        <div class="container">
          ...
        </div>
      </nav>
      #+end_src
      : 需要为 body 元素设置内补（padding）
      : 这个固定的导航条会遮住页面上的其它内容，除非你给 <body> 元素底部设置了 padding。用你自己的值，或用下面给出的代码都可以。提示：导航条的默认高度是 50px。

      : body { padding-bottom: 70px; }
      : Make sure to include this after the core Bootstrap CSS.
**** 静止在顶部
      通过添加 .navbar-static-top 类即可创建一个与页面等宽度的导航条，它会随着页
      面向下滚动而消失。还可以包含一个 .container 或 .container-fluid 容器，用于
      将导航条居中对齐并在两侧添加内补（padding）。

      与 .navbar-fixed-* 类不同的是，你不用给 body 添加任何内补（padding）。

      #+begin_src html
      <nav class="navbar navbar-default navbar-static-top">
        <div class="container">
          ...
        </div>
      </nav>
      #+end_src
**** 反色的导航条
      通过添加 .navbar-inverse 类可以改变导航条的外观。

      #+begin_src html
      <nav class="navbar navbar-inverse">
        ...
      </nav>
      #+end_src
**** 路径导航
      在一个带有层次的导航结构中标明当前页面的位置。

      各路径间的分隔符已经自动通过 CSS 的 :before 和 content 属性添加了。

      #+begin_src html
      <ol class="breadcrumb">
        <li><a href="#">Home</a></li>
        <li><a href="#">Library</a></li>
        <li class="active">Data</li>
      </ol>
      #+end_src
*** 分页
**** 默认分页
       受 Rdio 的启发，我们提供了这个简单的分页组件，用在应用或搜索结果中超级棒。组件中的每个部分都很大，优点是容易点击、易缩放、点击区域大。

       #+begin_src html
       <nav aria-label="Page navigation">
         <ul class="pagination">
           <li>
             <a href="#" aria-label="Previous">
               <span aria-hidden="true">&laquo;</span>
             </a>
           </li>
           <li><a href="#">1</a></li>
           <li><a href="#">2</a></li>
           <li><a href="#">3</a></li>
           <li><a href="#">4</a></li>
           <li><a href="#">5</a></li>
           <li>
             <a href="#" aria-label="Next">
               <span aria-hidden="true">&raquo;</span>
             </a>
           </li>
         </ul>
       </nav>
       #+end_src
       Labelling the pagination component
       The pagination component should be wrapped in a <nav> element to identify it as a navigation section to screen readers and other assistive technologies. In addition, as a page is likely to have more than one such navigation section already (such as the primary navigation in the header, or a sidebar navigation), it is advisable to provide a descriptive aria-label for the <nav> which reflects its purpose. For example, if the pagination component is used to navigate between a set of search results, an appropriate label could be aria-label="Search results pages".
**** 禁用和激活状态
       链接在不同情况下可以定制。你可以给不能点击的链接添加 .disabled 类、给当前
       页添加 .active 类。
       #+begin_src html
       <nav aria-label="...">
         <ul class="pagination">
           <li class="disabled"><a href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a></li>
           <li class="active"><a href="#">1 <span class="sr-only">(current)</span></a></li>
           ...
         </ul>
       </nav>
       #+end_src
       我们建议将 active 或 disabled 状态的链接（即 <a> 标签）替换为 <span> 标签，
       或者在向前/向后的箭头处省略<a> 标签，这样就可以让其保持需要的样式而不能被
       点击。

       #+begin_src html
       <nav aria-label="...">
         <ul class="pagination">
           <li class="disabled">
             <span>
               <span aria-hidden="true">&laquo;</span>
             </span>
           </li>
           <li class="active">
             <span>1 <span class="sr-only">(current)</span></span>
           </li>
           ...
         </ul>
       </nav>
       #+end_src
**** 尺寸
       想要更小或更大的分页？.pagination-lg 或 .pagination-sm 类提供了额外可供选择的尺寸。

       #+begin_src html
       <nav aria-label="..."><ul class="pagination pagination-lg">...</ul></nav>
       <nav aria-label="..."><ul class="pagination">...</ul></nav>
       <nav aria-label="..."><ul class="pagination pagination-sm">...</ul></nav>
       #+end_src
*** 翻页
**** 默认实例
        在默认的翻页中，链接居中对齐。

        #+begin_src html
        <nav aria-label="...">
          <ul class="pager">
            <li><a href="#">Previous</a></li>
            <li><a href="#">Next</a></li>
          </ul>
        </nav>
        #+end_src
**** 对齐链接
        你还可以把链接向两端对齐：

        #+begin_src html
        <nav aria-label="...">
          <ul class="pager">
            <li class="previous"><a href="#"><span aria-hidden="true">&larr;</span> Older</a></li>
            <li class="next"><a href="#">Newer <span aria-hidden="true">&rarr;</span></a></li>
          </ul>
        </nav>
        #+end_src
**** 可选的禁用状态
        .disabled 类也可用于翻页中的链接。

        #+begin_src html
        <nav aria-label="...">
          <ul class="pager">
            <li class="previous disabled"><a href="#"><span aria-hidden="true">&larr;</span> Older</a></li>
            <li class="next"><a href="#">Newer <span aria-hidden="true">&rarr;</span></a></li>
          </ul>
        </nav>
        #+end_src
*** 标签
**** 实例
         #+begin_src html
         <h3>Example heading <span class="label label-default">New</span></h3>
         #+end_src
**** 可用的变体
         用下面的任何一个类即可改变标签的外观。

         #+begin_src html
         <span class="label label-default">Default</span>
         <span class="label label-primary">Primary</span>
         <span class="label label-success">Success</span>
         <span class="label label-info">Info</span>
         <span class="label label-warning">Warning</span>
         <span class="label label-danger">Danger</span>
         #+end_src
         : 如果标签数量很多怎么办？
         : 如果你有大量的设置为 inline 属性的标签全部放在一个较窄的容器元素内，在页面上展示这些标签就会出现问题，每个标签就会有自己的一个 inline-block 元素（就像图标一样）。解决的办法是为每个标签都设置为 display: inline-block; 属性。关于这个问题以及实例，请参考 #13219。
*** 徽章
    给链接、导航等元素嵌套 <span class="badge"> 元素，可以很醒目的展示新的或未读
    的信息条目。
          #+begin_src html
          <a href="#">Inbox <span class="badge">42</span></a>

         <button class="btn btn-primary" type="button">
           Messages <span class="badge">4</span>
         </button>
          #+end_src
**** Self collapsing
     如果没有新的或未读的信息条目，也就是说不包含任何内容，徽章组件能够自动隐藏
          （通过 CSS 的 :empty 选择符实现) 。

          : 跨浏览器兼容性
          : 徽章组件在 Internet Explorer 8 浏览器中不会自动消失，因为 IE8 不支持 :empty 选择符。
**** 适配导航元素的激活状态
          Bootstrap 提供了内置的样式，让胶囊式导航内处于激活状态的元素所包含的徽
          章展示相匹配的样式。

          #+begin_src html
          <ul class="nav nav-pills" role="tablist">
            <li role="presentation" class="active"><a href="#">Home <span class="badge">42</span></a></li>
            <li role="presentation"><a href="#">Profile</a></li>
            <li role="presentation"><a href="#">Messages <span class="badge">3</span></a></li>
          </ul>
          #+end_src
*** 巨幕
    这是一个轻量、灵活的组件，它能延伸至整个浏览器视口来展示网站上的关键内容。

          #+begin_src html
          <div class="jumbotron">
            <h1>Hello, world!</h1>
            <p>...</p>
            <p><a class="btn btn-primary btn-lg" href="#" role="button">Learn more</a></p>
          </div>
          #+end_src
          如果需要让巨幕组件的宽度与浏览器宽度一致并且没有圆角，请把此组件放在所
          有 .container 元素的外面，并在组件内部添加一个 .container 元素。

          #+begin_src html
          <div class="jumbotron">
            <div class="container">
              ...
            </div>
          </div>
          #+end_src
*** 页头
    页头组件能够为 h1 标签增加适当的空间，并且与页面的其他部分形成一定的分隔。它
    支持 h1 标签内内嵌 small 元素的默认效果，还支持大部分其他组件（需要增加一些
    额外的样式）。

          #+begin_src html
          <div class="page-header">
            <h1>Example page header <small>Subtext for header</small></h1>
          </div>
          #+end_src
*** 列表组
             #+begin_src html
              <ul class="list-group">
                 <li class="list-group-item">Cras justo odio</li>
                 <li class="list-group-item">Dapibus ac facilisis in</li>
                 <li class="list-group-item">Morbi leo risus</li>
                 <li class="list-group-item">Porta ac consectetur ac</li>
                 <li class="list-group-item">Vestibulum at eros</li>
               </ul>
              #+end_src
**** 徽章
              #+begin_src html
              <ul class="list-group">
                 <li class="list-group-item">
                   <span class="badge">14</span>
                   Cras justo odio
                 </li>
               </ul>
              #+end_src
**** 链接
     #+begin_src html
       <div class="list-group">
         <a href="#" class="list-group-item active">
           Cras justo odio
         </a>
         <a href="#" class="list-group-item">Dapibus ac facilisis in</a>
         <a href="#" class="list-group-item">Morbi leo risus</a>
         <a href="#" class="list-group-item">Porta ac consectetur ac</a>
         <a href="#" class="list-group-item">Vestibulum at eros</a>
       </div>
     #+end_src
**** 按钮
     列表组中的元素也可以直接就是按钮（也同时意味着父元素必须是 <div> 而不能用
     <ul> 了），并且无需为每个按钮单独包裹一个父元素。注意不要使用标准的 .btn 类！

              #+begin_src html
              <div class="list-group">
                 <button type="button" class="list-group-item">Cras justo odio</button>
                 <button type="button" class="list-group-item">Dapibus ac facilisis in</button>
                 <button type="button" class="list-group-item">Morbi leo risus</button>
                 <button type="button" class="list-group-item">Porta ac consectetur ac</button>
                 <button type="button" class="list-group-item">Vestibulum at eros</button>
               </div>
              #+end_src
**** 被禁用的条目
     为 .list-group-item 添加 .disabled 类可以让单个条目显示为灰色，表现出被禁用的效果。

              #+begin_src html
              <div class="list-group">
                 <a href="#" class="list-group-item disabled">
                   Cras justo odio
                 </a>
                 <a href="#" class="list-group-item">Dapibus ac facilisis in</a>
                 <a href="#" class="list-group-item">Morbi leo risus</a>
                 <a href="#" class="list-group-item">Porta ac consectetur ac</a>
                 <a href="#" class="list-group-item">Vestibulum at eros</a>
               </div>
              #+end_src
**** 情境类
     为列表中的条目添加情境类，默认样式或链接列表都可以。还可以为列表中的条目设
               置 .active 状态。

              #+begin_src html
              <ul class="list-group">
                 <li class="list-group-item list-group-item-success">Dapibus ac facilisis in</li>
                 <li class="list-group-item list-group-item-info">Cras sit amet nibh libero</li>
                 <li class="list-group-item list-group-item-warning">Porta ac consectetur ac</li>
                 <li class="list-group-item list-group-item-danger">Vestibulum at eros</li>
               </ul>
               <div class="list-group">
                 <a href="#" class="list-group-item list-group-item-success">Dapibus ac facilisis in</a>
                 <a href="#" class="list-group-item list-group-item-info">Cras sit amet nibh libero</a>
                 <a href="#" class="list-group-item list-group-item-warning">Porta ac consectetur ac</a>
                 <a href="#" class="list-group-item list-group-item-danger">Vestibulum at eros</a>
               </div>
              #+end_src
**** 定制内容
     列表组中的每个元素都可以是任何 HTML 内容，甚至是像下面的带链接的列表组。

                  #+begin_src html
                  <div class="list-group">
                 <a href="#" class="list-group-item active">
                   <h4 class="list-group-item-heading">List group item heading</h4>
                   <p class="list-group-item-text">...</p>
                 </a>
               </div>
                  #+end_src
*** 面版
    #+begin_src html
      <div class="panel panel-default">
        <div class="panel-body">
          Basic panel example
        </div>
      </div>
    #+end_src
**** 带标题的面版
     #+begin_src html
       <div class="panel panel-default">
         <div class="panel-heading">Panel heading without title</div>
         <div class="panel-body">
           Panel content
         </div>
       </div>

       <div class="panel panel-default">
         <div class="panel-heading">
           <h3 class="panel-title">Panel title</h3>
         </div>
         <div class="panel-body">
           Panel content
         </div>
       </div>
     #+end_src
**** 带脚注的面版
     #+begin_src html
       <div class="panel panel-default">
         <div class="panel-body">
           Panel content
         </div>
         <div class="panel-footer">Panel footer</div>
       </div>
     #+end_src
**** 情境效果
     #+begin_src html
       <div class="panel panel-primary">...</div>
       <div class="panel panel-success">...</div>
       <div class="panel panel-info">...</div>
       <div class="panel panel-warning">...</div>
       <div class="panel panel-danger">...</div>
     #+end_src
**** 带表格的面版
     #+begin_src html
       <div class="panel panel-default">
         <!-- Default panel contents -->
         <div class="panel-heading">Panel heading</div>
         <div class="panel-body">
           <p>...</p>
         </div>

         <!-- Table -->
         <table class="table">
           ...
         </table>
       </div>
     #+end_src
**** 带列表组的面版
     #+begin_src html
       <div class="panel panel-default">
         <!-- Default panel contents -->
         <div class="panel-heading">Panel heading</div>
         <div class="panel-body">
           <p>...</p>
         </div>

         <!-- List group -->
         <ul class="list-group">
           <li class="list-group-item">Cras justo odio</li>
           <li class="list-group-item">Dapibus ac facilisis in</li>
           <li class="list-group-item">Morbi leo risus</li>
           <li class="list-group-item">Porta ac consectetur ac</li>
           <li class="list-group-item">Vestibulum at eros</li>
         </ul>
       </div>
     #+end_src
*** 具有响应式特性的嵌入内容
    #+begin_src html
      <!-- 16:9 aspect ratio -->
      <div class="embed-responsive embed-responsive-16by9">
        <iframe class="embed-responsive-item" src="..."></iframe>
      </div>

      <!-- 4:3 aspect ratio -->
      <div class="embed-responsive embed-responsive-4by3">
        <iframe class="embed-responsive-item" src="..."></iframe>
      </div>
    #+end_src
*** 轻量弹框
    #+begin_src html
      <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <img src="..." class="rounded mr-2" alt="...">
          <strong class="mr-auto">Bootstrap</strong>
          <small>11 mins ago</small>
          <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="toast-body">
          Hello, world! This is a toast message.
        </div>
      </div>  
    #+end_src

*** 按钮
    - <button class="btn btn-default" type="submit">Button</button>
    - 样式
      - <button type="button" class="btn btn-default">（默认样式）Default</button>
      - <button type="button" class="btn btn-primary">（首选项）Primary</button>
      - <button type="button" class="btn btn-success">（成功）Success</button>
      - <button type="button" class="btn btn-info">（一般信息）Info</button>
      - <button type="button" class="btn btn-warning">（警告）Warning</button>
      - <button type="button" class="btn btn-danger">（危险）Danger</button>
      - <button type="button" class="btn btn-link">（链接）Link</button>
    - 尺寸 .btn-lg、.btn-sm 或 .btn-xs 就可以获得不同尺寸的按钮。
    - 激活状态 .active 类
*** 辅助类
**** 情境文本颜色
     #+begin_src html
       <p class="text-muted">...</p>
       <p class="text-primary">...</p>
       <p class="text-success">...</p>
       <p class="text-info">...</p>
       <p class="text-warning">...</p>
       <p class="text-danger">...</p>
     #+end_src
**** 情境背景色
     #+begin_src html
       <p class="bg-primary">...</p>
       <p class="bg-success">...</p>
       <p class="bg-info">...</p>
       <p class="bg-warning">...</p>
       <p class="bg-danger">...</p>
     #+end_src
                   
**** 关闭按钮
     #+begin_src html
       <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
     #+end_src
**** 三角符号
     通过使用三角符号可以指示某个元素具有下拉菜单的功能。注意，向上弹出式菜单中的三角符号是反方向的。

     #+begin_src html
       <span class="caret"></span>
     #+end_src
**** 快速浮动
     通过添加一个类，可以将任意元素向左或向右浮动。!important 被用来明确 CSS 样式的优先级。这些类还可以作为 mixin（参见 less 文档） 使用。

     #+begin_src html
       <div class="pull-left">...</div>
       <div class="pull-right">...</div>
     #+end_src
     #+begin_src css
       // Classes
       .pull-left {
           float: left !important;
       }
       .pull-right {
           float: right !important;
       }

       // Usage as mixins
       .element {
           .pull-left();
       }
       .another-element {
           .pull-right();
       }
     #+end_src
**** 让内容块居中
     为任意元素设置 display: block 属性并通过 margin 属性让其中的内容居中。下面列出的类还可以作为 mixin 使用。

     #+begin_src html
       <div class="center-block">...</div>
     #+end_src
             
     #+begin_src css
       // Class
       .center-block {
           display: block;
           margin-left: auto;
           margin-right: auto;
       }

       // Usage as a mixin
       .element {
           .center-block();
       }
     #+end_src
**** 清除浮动
     通过为父元素添加 .clearfix 类可以很容易地清除浮动（float）。这里所使用的是 Nicolas Gallagher 创造的 micro clearfix 方式。此类还可以作为 mixin 使用。

     #+begin_src html
       <!-- Usage as a class -->
       <div class="clearfix">...</div>
     #+end_src
     #+begin_src css
       // Mixin itself
       .clearfix() {
           &:before,
           &:after {
               content: " ";
               display: table;
           }
           &:after {
               clear: both;
           }
       }

       // Usage as a mixin
       .element {
           .clearfix();
       }
     #+end_src
**** 显示或隐藏内容
     #+begin_src html
       <div class="show">...</div>
       <div class="hidden">...</div>
     #+end_src
     #+begin_src css
       // Classes
       .show {
           display: block !important;
       }
       .hidden {
           display: none !important;
       }
       .invisible {
           visibility: hidden;
       }

       // Usage as mixins
       .element {
           .show();
       }
       .another-element {
           .hidden();
       }
     #+end_src
**** 屏幕阅读器和键盘导航
     .sr-only 类可以对屏幕阅读器以外的设备隐藏内容。.sr-only 和
     .sr-only-focusable 联合使用的话可以在元素有焦点的时候再次显示出来（例如，使
     用键盘导航的用户）。对于遵循 可访问性的最佳实践 很有必要。这个类也可以作为
     mixin 使用。

     #+begin_src html
       <a class="sr-only sr-only-focusable" href="#content">Skip to main content</a>
       // Usage as a mixin
     #+end_src
     #+begin_src html
       .skip-navigation {
       .sr-only();
       .sr-only-focusable();
       }
     #+end_src
**** 图片替换
     使用 .text-hide 类或对应的 mixin 可以用来将元素的文本内容替换为一张背景图。

     #+begin_src html
       <h1 class="text-hide">Custom heading</h1>
       // Usage as a mixin
       .heading {
       .text-hide();
       }
     #+end_src
              
     
