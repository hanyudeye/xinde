

        网上的生活越来越丰富多彩。从最初的(X)HTi\在L 网页，到一度热炒的DHTML 概念，再到 

  近几年流行起来的 CSS ，网站和网页的设计工作变得越来越简便，网上的内容越来越富于变化和 

  色彩。但是，很多网页设计者和网民朋友都不太喜欢 JavaScript，这主要有以下几方面原因。第 

  一，很多网页设计者认为JavaSαipt 的可用性很差一一早期的浏览器彼此很少兼容，如果想让自 

   己编写出来的JavaScript 脚本在多种浏览器环境里运行，就必须编写许多用来探测浏览器的具体 

   品牌和具体版本的测试及分支代码(术语称之为"浏览器嗅探"代码)。这样的脚本往往到处是 

  if...else 语句，既不容易阅读，又不容易复查和纠错，更难以做到让同一个脚本适用于所有的 

  浏览器。第二，对广大的网民来说， J avaScript 网页的可访问性很差一一浏览器会时不时地弹出 

  一个报错窗口甚至导致系统死机，让人乘兴而来、败兴而去。第三， JavaSαipt 被很多网站用来 

  实现弹出广告窗口的功能，人们厌烦这样的广告，也就"恨"屋及乌地厌烦起JavaScript 来了。 

  第四， " J avaScript" 这个名字里的 "Java" 往往让人们误以为其源于Java 语言，                                     而实际接触之后 

  才发现它们根本没有任何联系。与Java 语言相比， JavaScript 语言要简单得多。很多程序员宁肯 

  钻研Java，也不愿意去了解JavaScript 的功能和用法。 

       不管什么原因， J avaScript 曾经不受欢迎的确是一个事实。 

       现在，情况发生了极大的变化。因为几项新技术的出现， JavaScript 的春天似乎来了。首先， 

  W3C   (万维网联盟)推出的标准化DOM (Document Object Model，文裆对象模型)已经」统江 

  湖，目前市场上常见的浏览器可以说没有不支持的。这对网页设计者来说意味着可以用简单的"对. 

  象检测"代码采取代那些繁复的浏览器嗅探代码，而按照 DOM 编写出来的 JavaScript 页面不像 

  过去那样容易出问题，这对网民来说意味着浏览体验变得流畅了。其次，最近兴起的 Ajax 技术 

  以 DOM 和 JavaScript 语言(以及 CSS 和刀ITML) 为基本要素，基于 Ajax 技术的网站离不开 

  JavaScript 和DOM脚本。 

       其实，人们对JavaScript 的恶劣印象在很大程度上来源于早期的程序员对这种语言的滥用。 

  如果程序员在编写JavaScript 脚本的时候能够把问题考虑得面面俱到，就可以避免许多问题，但 

- 可惜的是如此优秀的程序员太少了。事实上，即使是在JavaScript 已经开始流行起来的今天，如 

  果程序员在编写 JavaScript 脚本的时候不遵守相关的标准和编程准则，也仍会导致各种各样的 

  问题。 

       在2002 年前后， CSS 也是一种不太受人们欢迎的Web 显示语言，除了用它来改变一下字体， 

  几乎没有人用它来干其他的事情。但没过多久，人们对利用 CSS 设计网页布局的兴趣就一发而 

----------------------- Page 10-----------------------

  2     上一版译者序 

不可收拾，整个潮流也从那时扭转了过来。现在，掌
握 CSS 已经成为许多公司在招聘网站开发 

人员时的一项要求。 

     目前， DOM 编程技术的现状与 CSS 技术在2002 年时的境况颇有几分相似。  受Google Maps  

和Flickr 等著名公司利用DOM编程技术推出的Gmail、 Google Sugg创等新型服务的影响和带动， 

DOM 编程人才的需求正日益增加。有越来越多的人开始迷上了脚本编程技术，并开始学习如何 

利用 DOM技术去改善而不是妨碍网站的可用性和可访问性。 

    本书的作者JeremyKei也是Web 标准计划DOM Scripting 任务组的负责人之一，他在这本书 

里通过大量示例证明了这样一个事实:只要运用得当，并且注意避开那些"经典的" JavaSαipt  

陷阱， DOM 编程技术就可以成为Web 开发工具箱里又一件功能强大甚至是不可或缺的好东西。 

   - 本书并不是一本参考大全类型的图书，作者只重点介绍了几种最有用的DOM方法和属性。 

本书的精华在于作者在书中提到的关于 JavaScript 和 DOM 脚本编程工作的基本原则、良好习惯 · 

和正确思路。如果读者能通过书中的几个案例真正领悟这些原则、习惯和思路，就一定能让自己 

的编程技术再上一个台阶。 

    这是一本非常实用的好书，是一本值得一读再读的好书。作为本书的译者，我们相信它会让 

每位读者、自建网站的设计者和来到自建网站的访问者都受益匪浅。 

    参加本书翻译的人员还有韩兰、李京山、胡晋平、 高文雅。 

                    ,  

----------------------- Page 11-----------------------

                                                                                                                           .  

   •  

     第2 版已经出版了。 

     首先，我要澄清一点:虽然我的名字印在了封面上，但我并没有参与这个版本的修订工作。 

这个新版本完全出自 Je岱ey Sambells 之手。出版社因为出新版的事找过我，但我的时间确实安 

排不开了。因此，看到自己的名字恭列其间，心中不禁顿生愧意。 

     我很高兴地向读者朋友们报告，新版本中所有的修订都非常符合我的期望一一英文原书的封 

面除外。但不管怎么说，第二版的内容真的是太好了!在上一版的基础上，新版经过了扩展，涵 

盖了如下三个新领域: 

      (J  HTML5                                                                                           ,  

      口 Ajax 
                                                                                                                  •  

      口 JavaScript 库(尤其是jQuery) 

     相比之下，新版的内容又扩充了不少，但整本书仍然一直在强调最佳实践(特别是渐进增强) ,  

这正是让我喜出望外的地方。 

     新版本中的代码示例全部换成用 HTML5 标记来写了。有关 Ajax 的示例代码也精简得当， 

尽管简略，但上下文仍然能够传达出我在BulletproofAjax①中提出的观点:永远不要假设Ajax (或 

JavaScript，等等)一定可用。 

     最让我高兴的一点，就是新版本增加了主要介绍 jQuery 的章节。这一章把本书前面的典型~ 

代码示例，使用 jQuery 重写了一遍。这样一来，正好解释了人们对为什么使用库的种种疑问。 

它让你先理解了底层代码的工作原理，然后再告诉你使用库为什么能节省时间和精力。 

     总而言之，这本书新增的内容都十分精彩，对读者绝对有用。为了尽量多展示一些 jQuery 

的方法，也限于篇幅，这一版以介绍库的附录代替了上一版介绍DOM方法的附录。这多少让我 

感到有一些遗憾，不过，我会争取在自己的博客上公布第 1 版的附录。 

     最后，我还是要给第2 版再竖竖大姆指，另外再给读者一点建议-如果你买过本书第 1 版， 

恐怕我一些专门讲Hη在L5、                   Ajax 或jQuery 的书看会比较好。但如果你就是想知道怎么才能正确 

地使用 JavaScript，那这个经过扩展的新版本就是你的最佳选择。 

计师的。具体地说，本书是为那些喜欢使用CSS和H刊位并愿意遵守编程规范的Web设计师们编 

写的。 

      本书由代码和概念两大部分构成。不要被那些代码吓倒，我知道它们乍看起来很唬人，可 

只要抓住了代码背后的概念，就会发现你是在用一种新语言去阅读和编写代码。 

      学习一种新的程序设计语言看起来可能很难，但事实却并非如此。 DOM 脚本看起来似乎比 

CSS 更复杂，可只要领悟了它的语蓓，你就会发现自己又掌握了一样功能强大的 Web 开发工 

具。归根结底，代码都是思想和概念的体现。                                                                                                    •  

      我在这里要告诉大家一个秘密:其实没人能把一种程序设计语言的所有语法和关键字都记 

住。如果有拿不准的地方，查阅参考书就全解决了。但本书不是一本参考大金。本书只介绍最 

基本的JavaScript 语法。 

                                                                                                                               •  
      本书的真正目的是让大家理解DOM脚本编程技术背后的思路和原则，或许你对其中一部分 

早就熟悉了。平稳退化、渐进增强、以用户为中心的设计对任何前端 Web 开发工作都非常重 

要。这些思路贯穿在本书的所有代码示例中。 

     "你将会看到用来创建图片库页面的脚本、用来创建动画效果的脚本和用来丰富页面元素呈 

现效果的脚本。如果你愿意，完全可以把这些例子剪贴到自己的代码中，但更重要的是理解这 

                                                                                                                              叫 

些代码背后的"如何"和"为什么"。 
                                                                                                                             •  

      如果你已经在使用CSS 和HT阻来把设计思路转化为活生生的网页，就应该知道Web 标准 

有多么重要。还记得你是在何时发现自己只需修改一个 CSS 文件就可以改变整个网站的视觉效 

果吗?DOM 技术有着同样强大的威力。不过，能力越大，责任也就越大。因此，我不仅想让你 

看到用 DOM 脚本实现的超酷效果，更想让你看到怎样才能利用 DOM 脚本编程技术以一种既方 

便自己更体贴用户的方式去充实和完善网页b 

      如果需要本书所讨论的相关代码① ，到 www企iendsofed.com 网站搜索本书的主页就可以查 

到。还可以在这个网站找到企iends ofED 出版社的所有其他好书，内容涉及Web 标准、 Flash、 

Dream Weaver 以及许多细分的计算机领域。 

      你对JavaScript的探索不应该在合上本书时就停止下来。我开设了h句://domscripting.coml网 

站，在那里继续与大家共同探讨现代的、标准化的JavaScript。我希望你能到该网站看看。与此 

同时，我更希望本书能够对大家有所帮助。祝你们好运! 
                                           ,  
                                                                                                       ‘'  

                                                                                                        •  
     ①本书代码示例也可从图灵网站www.turingbook.com 本书网页免费注册下载。 一一编者注 
          ,  

           没有我的朋友和同事Andy Budd① (h句:www.andybudd.com) 与 Richard Rutter  (h句:www. 

     Clagnut.com) 的帮助，本书的面世就无从谈起。Andy 在我们的家乡 Brighton 开设了一个名为 

     Skillswap  (ht甲: www.skillswap.org)  的免费培训网站。在 2004 年 7 月， Richard 和我在那里做了 

     一次关于JavaScript 和DOM 的联合演讲。                         演讲结束后，我们来到附近的一家小酒馆，在那里， 

     Andy 建议我把演讲的内容扩展成一本书，也就是本书的第 1 版。 

          如果没有两方面的帮助，我大概永远也学不会编写JavaScript 代码。 一方面是几乎每个Web 

     浏览器里都有 "view source"  (查看源代码)选项。谢谢你， "view source" 。另一方面是那些多年 

     来一直在编写让人叹为观止的代码并解说重要思路的 JavaScript 大师们。 Sco忧Andrew、                                                        Aaron 

     Boodman、     Steve Champeon、       Peter-Paul Koch、     Stuart Langridge和SimonWillison 只是我现在能想 

     到的几位。感谢你们所有人的分享精神。 

           感谢 Molly Holzschlag 与我分享她的经验和忠告，感谢她对本书初稿给予反馈意见。感谢 

     DerekFea也erstone 与我多次偷快地讨论JavaScript 问题，我喜欢他思考和分析问题的方讼。 

          我还要特别感谢Aaron Gustafson，他在我写作本书期间向我提供了许多宝贵的反馈和灵感。 

          在写作第 1 版期间，我有幸参加了两次非常棒的盛会:在得克萨斯州 Austin 举办的 "South 

     by  Southwest" 和在伦敦举办的@media。我要感谢这两次盛会的组织者 Hugh Forrest 和 Patrick 

     Griffi邸，是他们让我有机会结识那么多最友善的人一一我从没想过我能有机会与他们成为朋友 

     和同事。 

          最后，我要感谢我的妻子 Jessica Spengler，不仅因为她永远不变的支持，还因为她在本书 

     初稿的校对工作中做出的专业帮助。谢谢你，我的人生伴侣。 

                                                                      』 

                                                                                                   一一-Jeremy Keith  

                                                                                             •  

•  

         ①AndyBudd 是超级畅销书《精通CSL 高级 Web 标准解决方案(第 2 版)))的作者，该书已由人民邮电出版社 

            出版。 一一编者注 

----------------------- Page 15-----------------------

                                                                                                                                                                                                                                  ,  
                                                                                                                                                                                                                                  、 

                                                                                         目                                   录 

                                                                                                                                                                                                     、 

                                                                                                                                                                         •  

第 1 章 JavaScript 简史….. ..  . .. .. . .•. . . . .. .... ..  .. .. .. ... ..  . .. .. . ...  1                                   2.8        小结…..  
                                                                                                                     第3 章 DOM. ........…………. .. ..                                   .. .. .. .. .. ….. . . .. .. .... ..…...... ....... ... . 32  •  
           1.1   JavaScript 的起源…… 
          1.2       DOM …·………………………………………………2                                                                                  3.1       文档:DOM 中的 "D" ….... .... .... ..…................... .. ...  32  
          1.3       浏览器战争……                                                                                                    3.2       对象:DOM 中的 "0" .. .............….... • .. .... ..  ...…..  32  
                      1.3.1         DHTML ..….. ..  . . .. .... ..……….. .. .. .... .... ..  . .... ....  ..… ..3               3.3       模型:DOM 中的 "M;"  ...................... .....…............  33  
                      1.3.2         浏览器之间的冲突……........ .... ..  .... .... .. .... ..… 3                                        3.4节点…........ .... ..  .. .. .. .. ..  .. ..   . ...... ....  ....….. . ..  . ..... .. .... ... . .. .... ... .. ..  ..... ... .... ....  35  
          1.4       制定标准.... .. . . . .... . ................................ . . . …4                                                     3.4.1         元素节点....... .. .. ..  ..  ..…...... ........ .... ..  .......... ..  .. ....  ... .. .. ....  35  
                      1.4.1         浏览器以外的考虑.... ..  ... ... ... ...... . ... ..  ........ ..  .....4                                      3.4.2         文本节点…·…....  . .... ..  ..  . . .. ..  .. .... ..  ..  .. .... ..  ..  ... .….. 35  
                      1.4.2         浏览器战争的结局....                             . .... ..  . .. .. ... ... ... .. ... .... .. ... 5           3.4.3         属，性节点……... .. ..  ..  ... .. ... .... .. .... ..  .. .... .... ... .. ...... ..…  36  
                      1.4.3         崭新的起点….... .. .... .. ..  ..… .... .. .... ..  .. .... ..  . .. ..  ...  ...… 5                        3.4.4         CSS .... ......................…......... .... .. ...............  36  
          1.5       小结…..... .................….. .. ..  .., ...... .. .. ••• .. .... ..  .. .. .. ..  ..….. .. .....6                     3.4.5         获取元素…..  .. .. ..  ..  .. • . ... . .... .... .. .. ..  ..  ...….... ..... .. ... ....   38  
                                                                                                                                          3 .4.6         盘点知识点... .. ..  .. .. ..  ..  . . .. . .. . . . . . .. ..  . .. ... .. ..,.. ..  .. .. .   42  
第2 章 JavaScript 语法…... .. ..  . .., .. , ..  .. .. .. ... • .….. ... .... ..  . .. .. ..  8  
                                                                                                                               3.5       获取和设置属性.... .... .. .. ..  .. ... .. .. ..  ..….. • .... ... • .., .. .. . ..… .. 43  
         2.1        准备工作.. . . .. ... .... .... .. .. .. ...... .. ..                                                                      3.5.1         getAttribute.. ........................…… 43  
         2.2        语也…... .... ..  . . . .……..... . ...... ... ...… …. ..  .. ..  ... .. ..  . . .. . .. .…..10                           3.5.2         setAttribute........…... ..  • .. . • . • • • •• . ... . ..… 44  
                     2.2.1          语句……..•. ... .. .…. ... .... •. ... .. .... ..  ....  .…........... 10                     3.6        小结…... .. ..  ..  ...…..... .. .. .... .. ... .. ... .... ..…...... .... .. .. .... .. ... .. ... . .... .... . . ...  45  

                                                                                                                                                                                                                                             户· 

                     2.2.2          注释………..... ... ..  ..  ..….... .. .. .. ... .... .. .. .. . ... ... .. .... . .. ...  1 0  
                     2.2.3          变量.... . .... ..…………….... . .... ..  . ..  .. ….......... 11                     第4 章案例研究: JavaScript 图片库....... 46  
               .     2.2 .4         数据类型……... . ..  ..…..... .. .. .. ..  .…... ...... 14                                     4.1        标记.... ... .. . . . ..  ... .. ..... .. ..  ...... .... ...…... ... • ...…. ••• ••• • ••••••  46  

                     2.2.5          数纽... ..  .. ......... . . ...…........……...... .. ........ 16                             4.2        JavaScript .........….................................…48  
                     2.2.6          对象.. ....  ... . ...  .. . ........ .. . .. .. ... .... ..  . ....…..... ..... 18                     4 .2. 1        非 DOM 解决方案............ ...... . ......  49  
         2.3        操作…. .. . ... . . ...  …. . . ..  . ... …….. ... ... . ..…. ..  .. .... . ... .. ..   . ... ....  19  -               4.2.2          最终的函数代码清单….... ..  . ... ..  .….. 50  
         2.4        条件语句.... . . .. . .….. .. .... .. ..  .…... .. ..... .. .. ....  . . ... ... ... . ....  . ..… 21          4.3       应用这个JavaScript 函数….. . ..  ..' .. . . . ... . .. ..  .…50  
                                                                             •  
                     2.4.1          比较操作符... .. .,. • .. ..  .. •• .. ….. ............... ..  22                               4.4对这个函数进行扩展…."" . ... . ... ..  . ..   .. ..  . . . . . . . . .. 52  
                     2.4.2          逻辑操作符............. . . . . ... .…. .. .. . . . .23                                                    4.4.1          chi 1 dNodes 属性...... . . . ..  ..….. . .• . • . . .….. 53  
         2.5        循环语句…... . ... ..  ..….. . . . . . ..….. . .. . .……. .. ... . . .…..24                                                4.4.2          nodeType 属性. .. . . .... ... . ..  . ..  . . . ..  . ..  . . . . .. . .. S4  
                     2.5.1         while 循环............... ..….. .. ... .. . . .. . . .. .24                                              4.4.3          在标记里增加一段描述…... . .. .… 54  
                     2.5.2          for 循环…... ................. . . . ... . . ..……25                                                     4 .4.4         用 JavaScript 改变这段描述......  55  
         2.6         函数... …. . .. . . . . .. ..  .. .. . . . . .. . .. .•. . .. ... .. . ... . ... . .. . . ..  ....26                   4 .4.5         nodeValue 属性..γ. ... . .. . .. . . . . .. ..  . . . ..  56  
         2.7        对象·…..………飞…….. .. . .. .. .………….. .... ..•... 29                                                                      4 .4.6         firstChild 弄17               1 astChi 1 d 属性…..  56  
                                    内建对象.... . .. . ... . .. . .…...............…..30  
                     2.7 .1                                                                                                               4 .4.7         利用 nodeValue 属性刷新这段 
                     2.7.2          宿主对象... . ..".... ..". . ..... . ...... .. . .......31                                                               描述…….. . ..  ..…. ..  . ...…. . . .. .. . . .. . . . . . . .... . .们 

----------------------- Page 16-----------------------

                                         .  

          2  
                     目 
                                 录 

             4.5     小结..............................…... . . . ..…...............60                 7.2     DOM方法................................... . . . ..……101 

                                                                                                              7.2.1      cr、eateElement 方法…….. .. . . .… .. 101  
     第5 章最佳实践...........................................….61 

                                                                                                              7.2.2      appendChi 1 d 方法……................. 102  
             5.1     过去的错误….... . .. ….. .... ..... .. . . . ... . . .…........61  
                                                                                                              7.2.3      createTextNode 方法…...............103 
                      5. 1. 1    不要怪罪 JavaScript................. …61  
                                                                                                              7.2.4      一个史复杂的组合.. . . .. . . . ... .. . .… .105  
                      5.1.2     Flash 的遭遇……….. .. . .. . . . . . . . .. . . . ... . . 62  
._                                                                                                   7.3     重回图片库"…... . . .. . ... .. ..……. . . . . .. ... .. .. ..… 107  
                      5. 1.3    质疑一切 …. ... .... .. .... . . . . .. . . . .…..._ ....... 63  
                                                                                                              7.3.1      在已有元素前插入一个新 
             5.2     平稳退化…. . . ... . . ..... . ... . .. . . . .. . .. . . . .. . . . . .... . . ... . . . 63  
                                                                                                                        元素.. .. . . .. . . .. .. . .…. . . . . . .. . . . . ..….. ......108  
                      521        1avasedpt:"  伪协议…........ . ........64 
                                                                                                              7 .3.2     在现有方法后插入一个新 
                      5.2.2      内嵌的事件处理函数..................65 
                                                                                                                        元素….. . .. . . .. ... . .. . . . .. . .. . . ..…. .. .. , ..… 109  
                      5.2.3      谁关心这个….. . . .... . . .. ... . .. ... . ~ . . . . .. . . 65  
                                                                                                              7.3.3     图片库二次改进版， ..，..， .，….. .......111 
             5.3     向 CSS 学习... . . .. .. .. . . .. .. ….. . .•. . . . . .. ... . .. ... .•. . 66  
                                                                                                     7 .4    Ajax ….. . . .. ... .. ,. •  
                      5 .3.1    结构与样式的分离 .....................66 
                                                                                                              7.4.1      XMLHttpRequest 对象.. .. .. . .……… .115  
                      5 .3.2     渐进增强... ，.........….........… .........67 
                                                                                                              7.4.2      渐进增强与 Ajax'…. ...... ......... .. .119  
             5.4分离JavaScript ….. . . . . .. .. . . .,.... .. .. . .….... ......68  
                                                                                                              7.4.3     H划低………... . .... . ... .….........,........ 120  
             5.5     向后兼容. .  .. .. ... .. . .. .….......…. .. .. ..…. .. . . . .… ..70  
                                                                                                     7.5     小结….  . . .. ...……………………………………….121  
                      5.5.1     对象检测…... , . ,.. .. . . . ..….................70  
                      5.5.2      浏览器嗅探技术.... .. . ... .. . . .. ... . . .. . . 71             第8 章充实文档的内容…. .. .. . . .. . .. . ., • •• . •• •• . . ••• • 122  

             5.6     性能考虑.. .. . .... .. .. . .. .. . .. .. . .... . .. .. . . ， ..." . .... . ...72 8.1     不应该做什么…. .  . .. . .…. ... . ..… . .. . . ..….;.....122  

                      5.6.1     尽量少访问 DOM和尽量                                                         8.2     把"不可见"变成"可见"…..... . .…… 123  
                                减少标记….. ...... . . . .,. • • • •• •• •• • • • • •• • • • •• • • 72   8.3     内容…·…... .. .. . . .. .. . . ., .•. • •. ••• . •. • . . . . . . . . • " . •• •• . •. 123  

                      5.6.2     合并和放置脚本…….... ". . .. . . . .… ..73                                           8.3 .1     选用 HTML、              XHTI\也还是 
                     5.6.3      压缩脚本，..，.'..", ....... .."  ... .".,..…..73                                             Hτ卫在L5….，.... ，...........，..，..，.....，."， . 124 
            5.7      小结. .. . .. .. ,. .. .. .……... . ...•. . . ...…. . . .. ..…. . . . .. .…74               8.3.2      CSS ................,. .. ....,....,."....,..,...126  
                                                                                                              8.3 .3    JavaScript ......................…..........127  
     第6 章案例研究:图片库改进版... . .....: . . ..， .75 
                                                                                                     8.4     显示"缩略语列表"…., . ,. . . . . .. . . . . .. .. . ..… 127  
             6. 1    快速回顾……..， . . ... . . ... . . .. ..，..... .…….. . .. .. .… .75  
                                                                                                              8.4.1      编写出splayAbbreviations 
             6.2     它支持平稳退化吗…. .. .. ...…._. .. . . .. .. .… .......76  
                                                                                                                        函数….. . ... . . . . .. ... .. .. .. .. .. . . . . .. .. . . . ..... 128  
             6.3     它的JavaScript 与盯阳d 标记是 
                                                                                                              8.4.2     创建标记HU--……. .. . ...... . ........， .....130 
                     分离的吗……..,... ..…. .. , . .. . .. …....................77  
                                                                                                              8.4.3     一个浏览器"地雷"….. .,. ..….......135  
                     6 .3.1     添加事件处理函数 ... . .............. . . . 77 
                                                                                                     8.5     显示"文献来源链接表"H·H·-…….......138 
                     6.3.2      共享 onload 事件..，.. ....._ ...... . .... . ...82 
                                                                                                     8.6     显示"快捷键清单" . .... . ."  "                 ， ...................143 
            6.4'     不要做太多的假设….... . ... . . .. . ... .…. . . . . . .… .84  
                                                                                                     8.7     检索和添加信息…. . .. ...…. ., . ...…, . . .. . .…… 146  
             6.5    优化.. . ..... . . .. . . .…..…. . ... ..….. . ... . . .. .. . . . . . . . . . .… 86  
                                                                                                     8.8     小结….... ,. .……... ,. . . . . . . . ... .……................. .147  
             6.6    键盘访问….. . ....……........................….......88  
            6.7     把JavaScript 与CSS 结合起来. ...... ... .. ...90                               第9 章 CSS-DOM............ …....... ..._                      ..... . . . .. . . ... .148 
                                                                                                     2.1     三位一体的网页……，. .. . . . . .…. . . .. . .…........148  
            6.8      DOM Core 和HTML-DOM…................. 93  
                                                                                                             9. 1. 1    结构层.... . . .. . . . .. ..…. . . . . . .. .… .........148  
            6.9      小结. . . . .. " . . .. ..  . .... . ... .…..... • . ... • .•. .. ..  . . ..  . . .….......94  
                                                                                                             9.1.2      表示层….. . .. . . . .…......................... .148  
     第 7 章动态创建标记............ ......，...... . .........， ..96                                                 9. 1.3     行为层，... ... . .. . . . ..................， .......149 

             7.1     一些传统方法…....  ..... . .. .. ... ,. .. . . . . .... . . .. ... .. .. 96                   9. 1.4      分离…….......，. .......................... .， 150 
                     7. 1. 1    document.wr寸te. ...... . _................. ，~.. 96                  9.2     style 属性….......….. .. . .. .•.. .. .. .. .. .•• . .••• • . •• . .15 0  
                                                                                                                                               -.,  
                                                                                                             9.2.1      获取样式.... .. . . . .... .. . ... .. . .….... .•... ..151  
                     7.1.2      inner阳ML 属性. ....，.....，..............… 98 

----------------------- Page 17-----------------------

                                                                                                                                                                                              ,  

                                                                                                                                                                  目                            3  
                                                                                                                                                                                录 

                                                                                                                                                                                                        < 

                   9.2.2        设置样式…... . .. .…….................... 156                                        11 .3      几个示例….  . .. . . .…….......................…… 204  
         9 .3     何时该用DOM 脚本设置样式……....... 158                                                                                11.3.1        Canvas . ..... .......... ........ ..……… 205  
                   9.3.1        根据元素在节点树里的位置                                                                                 11.3 .2       音频和视频…......，.. .... . ....... .. . .                209  
                                来设置样式.. . ..... . .. . .. ... ... . .. . . ..…..158                                          11.3 .3       表单. . ... . . . .……. ........................ 215  

                   9.3.2        根据呆种条件反复设置某种                                                                     11.4       HTML5 还有其他特性吗.. .. .. .… ..... .•.• 219  
                               样式…..... .. .. . . ,.  . . .. ,.  . . . . .. . ,.  . ... . .. . . . .… ..16 1     11.5       小结……H·H·-nu- -· ·H·H ·-·· H· V-H· H· - …....... 219  

                   9 .3.3       响应事件.. .. . . . . ... . . . .. . .... .… . . . . . ..…165  
                                                                                                        第 1 2 章综合示例…. . . ,... . .... . . . .. ,.. . ... ... ,.  ... ..  .. .. . . .… 220  
         9.4      c 1 assNar附属性……. . . .. .…….... .,. . .…........…167  
                                                                                                                 12.1       项目简介…. . .. .. . oo           . • •• •• • • • •• •• • •.••.. • . •. •. . .. . .… 220  
         9.5      小结…... ,.  .. ... . . . .. .. . .. . . . . .. .. .. .. .... . . . .. . .. .. .... .….171  
                                                                                                                             12 . 1.1      原始资料... . . . .. .……..oo . . •• •• •••• •••  220  
第 10 章 用 JavaScript 实现动画效果. . .. ... 1 72                                                                                    12. 1.2       站点结构….. .... . . . . .. . ... . .. ... . .… . 220  

         10. 1      动画基础知识…... . ... .…. . . ... .. ... . . . ..•. . . . .… 172  
                                                                                                                             12. 1.3       页面结构 . . . . . .. .. . .. . ... .….. . . . . ..… 221  
                     10. 1. 1       位置. . . ,.. .. . .. . . .. . ..  . . ... .. ... .. . .… ... .... 172         12.2       设计... .. . . ..…. ... . . . .….......…. . .... . .…. . . . . ..… 222  

                     10. 1.2        时间... ... .. .. . . . . ... .. . . .. . . . .. . . .. .. . .…. 175  
                                                                                                                 12.3       CSS. ........................................ …... .. ..... 223  
                     10.1.3         时间递增量…ULu-- …..... .. . .. . .. .                    175                                12.3 .1        颜色.. .. . .. . .. . .. . ... .. . .. . ... ... . .. .…… 225  
                     10. 1.4        抽象……. . . . .. .…. . ,.  . .. . ..…. .. ..,. . ,.  .… 178                                12.3.2        布局... . ... . .. . .. . ...…...... ...... ••. •••• 226  
         10.2       实用的动画….... . . .. . . . . . .. .….. ................. .184                                               12 .3.3       版式….... . .. ... . .. . .. ... . .. .、 ，.. . . . ..…..228  

                     10.2.1        提出问题….  . . . . .. . .…….. ............ 184  
                                                                                                                12.4标记…….. : ..  .. ,.. ... . . . ... . . . . . .. . .. . . . ... .. . .•. .…… ….229  
                     10.2.2         解决问题·· H·H·-- AH·H· - UNMU- - …186                                           12.5       JavaScript ............................................ 23 0  
                     10.2.3         CSS ... ...................................... 187  
                                                                                                                             12.5.1        页面突出显示…: ..H·H·-H·H·-… 231 
                     10.2 .4       JavaSαipt…. . . . .. .…..~....... . .... . . .189                                        12.5.2         JavaScript 幻灯片 . . . ... ..…....... 235  
                     10 .2.5        变量作用域问题…................ 192                                                             12.5 .3       内部导航….. …….. .. . ... .…........ 239  
                     10 .2.6        改进动画效果.......... ................. 193                                                   12.5 .4       JavaScript 图片库…...                    . . . . .……..242  

                     10.2.7         添加安全检查…... . . . .….... ....... 196                                                      12.5 .5       增强表格.. .. . . . . ,.  . . .. . .…. . . . .. .……245  

                     10.2.8        生成HTML 标记…... . . ... …......198                                                         12.5.6         增强农单…............. .. ....... .. . .. .                 249  
         10.3       小结……... . .. ...  .... ..  . . oo . ... • • • •. . • • . •. •• . .……·……..200  
                                                                                                                            12.5.7         压缩代码…. .. . .. .…... . .. .. ..  ........… 263                          F  - 
                      HTML5 ................…... ..... ........... ............20 1                             12.6        小结…. .  . . .. .….......….. . . . . .…. . .... . . .….......… 264  
第 刊 章 

         11. 1      HTML5 简介.... .. .... .. . .. . . .,. .. . .. ... . .. ..  . . ... . . ..….201       附录 JavaScript 库….. . ... . ... .. . . .. . .. . . .…. . . .. .. . .…..265                         .  

         11.2       来自朋友的忠告…….... . . ..  ... . . . ,.. . .…….......203  

                                                                        /  

----------------------- Page 18-----------------------

                                                                                                                                                                      •  

                  •  

                                                            、s 

                                                                                                                                                                                                                                                                                                                                                                          •  

                                                                                                                                                                                                                                                                        ·电 

                                                                                                                                                                                                                                                     •  

                                                                                                                                                                                                                                                                                                             _..  

                                                                                                                                                                                                                                                                                          •  

                                                                                                                        .  

                                                                                                                                                                                                                                                                                                                          /  

.                                                                                                                                                                                                                                                                                                                                                                                                                                   .  

----------------------- Page 19-----------------------

                                                                                                                                          ‘ '  

                                                                                      •  

                                                                                                •  

                                  ,  

                                                          、 

                                                  .  

      本书第 1 版面世的时候，做一名 Web 设计师是件很让人很兴奋的事。 5 个年头过去了，这个 

职业依然保持着强大的吸引力。特别是 JavaScript，经历了从被人误解到万众瞩目的巨大转变。 

Web 开发呢，也已从混乱无序的状态，发展成一门需要严格训练才能从事的正规职业。无论设计 

师还是开发人员，在创建网站的过程中都积极地采用标准技术， Web 标准已经深入人心。 

      当网页设计人员谈论起与Web 标准有关的话题时， HTML  (超文本标记语言)和 CSS (层叠 

样式表)通常占据着核心地位。不过， W3C  (万维网联盟)已批准另一项技术，所有与标准相兼 

容的 Web 浏览器都支持它，这就是 DOM (文档对象模型)。我们可以利用 DOM 给文档增加交 

互能力，就像利用 CSS 给文档添加各种样式一样。 

      在开始学习 DOM之前，我们先检视一下使网页具备交互能力的程序设计语言。这种语言就 

是JavaScript，它已经诞生相当长的时间了。 

 1.1      JavaScript 的起源 

      JavaScript 是Netscape 公司与 Sun 公司合作开发的。在 JavaScript 出现之前， Web 浏览器不 

过是 
      一种能够显示超文本文档的简单的软件。而在JavaScript 出现之后，网页的内容不再局限于 

枯燥的文本，它们的可交互性得到了显著的改善。 JavaScript 的第一个版本，即 JavaScript 1.0 版 

本，出现在 1995 年推出的Netscape N avigator 2 浏览器中。 

      在JavaScript 1.0 发布时，             N etscape N avigator 主宰着浏览器市场，微软的 IE 浏览器则扮演着 

追赶者的角色。微软在推出 IE3 的时候发布了自己的VBScript 语言，同时以JScript 为名发布了 

JavaScript 的一个版本，以此很快跟上了Netscape 的步伐。面对微软公司的竞争， Netscape 和 Sun 

公司联合 ECMA (欧洲计算机制造商协会)对 JavaScript 语言进行了标准化。于是出现了 

ECMAScript 语言，这是同一种语言的另一个名字。虽说 ECMAScript 这个名字没有流行开来， 

----------------------- Page 20-----------------------

  2   第 1 章 JavaScript 简史 

                                ,  

但人们现在谈论的JavaScript 实际上就是ECMAScript。 

    到了 1996 年， J avaScript、 ECMAScript、 JScript-一随便你们怎么称呼它一一已经站稳了脚 

跟。 Netscape 和微软公司在各自的第3 版浏览器中都不同程度地支持JavaScript 1. 1 语言。 

 注意 JavaScript 与 Sun 公司开发的 Java 程序语言没有任何联系。 JavaScript 最开始的名字是 

     LiveScript，后来选择"JavaScript"  作为其正式名称的原因，大概是想让它听起来有系出 

     名门的感觉。但令人遗憾的是，这一选择·容易让人们把这两种语言混为一谈，而这种混 

      淆又因为各种脱b 浏览器确实具备这样或那样的 Java 客户端支持功能而进一步加剧。  事 

    ， 实上， Java 在理论上几乎可以部署在任何环境，但 JavaScript 却倾向于只应用在 Web 浏 

     览器。 

   JavaScript 是一种脚本语言，通常只能通过Web 浏览器去完成一些操作而不能像普通意义上 

的程序那样独立运行。因为需要由 Web 浏览器进行解释和执行，所以 JavaScript 脚本不像 Java 

和C++等编译型程序设计语言那样用途广泛。不过，这种相对的简单性也正是JavaScr酬的长处: 

比较容易学习和掌握，所以那些本身不是程序员，但希望通过简单的剪贴操作把脚本嵌入现有网 

页的普通用户很快就接受了 JavaScript。 

   JavaScript 还向程序员提供了一些操控Web 浏览器的手段。例如，         JavaScript 语言可以用来调 

整Web 浏览器窗口的高度、宽度和位置等属性。这种设定浏览器属性的办法可以看做是BOM(浏 

览器对象模型)0    JavaScript 的早期版本还提供了一种初级的 DOM。 

 1.2  DOM  

   什么是DOM? 简单地说， DOM是一套对文档的内容进行抽象和概念化的方法。 

   在现实世界里，人们对所谓的"世界对象模型"都不会陌生。例如，当用"汽车"、"房子" 

和"树"等名词来称呼日常生活环境里的事物时，我们可以百分之百地肯定对方知道我们说的是 

什么，这是因为人们对这些名词所代表的东西有着同样的认识。于是，当对别人说"汽车停在了 

车库里"时，可以断定他们不会理解为"小鸟关在了壁橱里"。 

   我们的"世界对象模型"不仅可以用来描述客观存在的事物，还可以用来描述抽象概念。例 

如，假设有个人向我问路，而我给出的答案是"左边第三栋房子"。这个答案有没有意义将取决 

于那个人能否理解"第三"和"左边" 的含义。  如果他不会数数或者分不清左右，则不管他是否 

理解这几个概念，我的回答对他都不会有任何帮助。在现实世界里，正是因为大家对抽象的世界 

对象模型有着基本的共识，人们才能用非常简单的话表达出复杂的含义并得到对方的理解。 

具体到这里的例子，你可以相当有把握地断定，其他人对"第三"和"左边"的理解和我完 

全一样。 

   这个道理对网页也同样适用。 JavaScript 的早期版本向程序员提供了查询和操控Web 文档某 

些实际内容(主要是图像和表单)的手段。因为JavaScript 预先定义了 "imges" 和 "forms" 等 

术语，我们才能像下面这样在 JavaScript 脚本里引用"文档中的第三个图像"或"文档中名为 

----------------------- Page 21-----------------------

                                                                                                                                                           ,  

                      ,  

                                                                                                                                           1.3       浏览器战争                            3  

                                                                                                                                                                      ，、 

  ‘ details'  的表单": 

           document.images[2]'  
          qocument.forms['details']  

          现在的人们通常把这种试验性质的初级DOM称为"第0 级DOM" (DOM Level 0) 。在还 

 未形成统一标准的初期阶段，"第0 级 DOM" 的常见用途是翻转图片和验证表单数据。 Netscape 

 和微软公司各自推出第四代浏览器产品以后， DOM 开始遇到麻烦，陷入困境。 

  1.3           浏览器战争 . 

                                                                                     、 

          Netscape Navigator 4 发布于 1997 年6 月， IE 4 发布于同年 10 月。这两种浏览器都对它们的 

 早期版本进行了许多改进，大幅扩展了 DOM，                                                                       使能够通过 JavaScript 完成的功能大大增加。而 

 网页设计人员也开始接触到一个新名词: DHTML。 

 1.3.1             DHTML  

         DHTML是 "Dynarnic HTML "  (动态 HTML) 的简称。 DHTML 并不是一项新技术，                                                                                                               而是描 

述H币4L、 CSS 和JavaScript 技术组合的术语。 DH四1L背后的含义是: 

                                                                                                                                                                                       •  
          口利用 HTML 把网页标记为各种元素: 

          口利用 CSS 设置元素样式和它们的显示位置， 

          口利用 JavaScript 实时地操控页面和改变样式。 

         利用 DHTML，复杂的动画效果→下子变得非常容易实现。例如，用 HTML标记一个页面元 

素: 

          <div  id="myelement">This  is  my                        element</div>  

         然后用 CSS 为这个页面元素定义如下位置样式: 
                -              r 
                 咱 
          "               牛 
        y n y v a      o 
                    e-1+L:  
             m        m+L··  
                         no 
                 i 
                              < 
          骨    u 」 n  u n H  n  L」 
                               t 

                       - 
                                   10   --+L                      •  
        y n  」 T 白 v r n 4 s  - · 1         」 。 
                                 2M r3    HU  
                             ··nu     nv       . 
                                               .  
                                               ,  
             - 
                         r     VAVA 
                         3nu     ·                         •  
              - 
                            '    P. 
             品 
              v n 
                             nu'  
              L 
                       4 
                                 ,  
         ， 、 

          J 

         接下来，只需利用 JavaScript 改变 myelement 元素的 left 和 top 样式，就可以让它在页面上 

随意移动。不过，这只是理论而已。 

         不幸的是，                 NN  4 和IE4 浏览器使用的是两种不兼容的DOM。换句话说，                                                                                             是然浏览器制造 

商的目标一样，但他们在解决DOM 问题时采用的办法却完全不同。 

才 .3.2           浏览器之间的冲突 

         Netscape 公司的DOM 使用了专有元素，这些元素称为层 (layer) 。层有唯一的ID，                                                                                                               JavaSαipt  

代码需要像下面这样引用它们: 

         document.layers['myelement']  

         而在微软公司的DOM 中这个元素必须像下面这样引用: 

                                                                                                                                                                         •  

                                                                                                                                             •  

----------------------- Page 22-----------------------

                   4       第 1 章 JavaScript 简史 

                                                                                                                               ，、 

                      document.all['myelement']  

                      这两种DOM 的差异并不止这一点。                           假设你想找出 myelement 元素的 left 位置并把它赋值给 

                变量xpos ，那么在Netscape N avigator 4 浏览器里必须这样做: 

                      var  xpos  =  docume nt.layers[ 'myelement ' ].leftj  

                                                                                                                        •  
                      而在IE4 浏览器中，需要使用如下所示的语句才能完成同样的工作: 

                      var  xpos  =  document.all[ ' myelement'].leftposj  

                      这就导致了一种很可笑的局面:程序员在编写DOM脚本代码时必须知道它们将运行在哪种 

                浏览器环境里，所以在实际工作中，许多脚本都不得不编写两次， 一次为Netscape N avigator ，另 

                一次为 E。同时，为了确保能够正确地向不同的浏览器提供与之相应的脚本，程序员还必须编 

                写一些代码去探查在客户端运行的浏览器到底是哪一种。 

                      DHTML 打开了一个充满机会的新世界，但想要进入其中的人们却发现这是个充满苦难的世 

                界。因此，没多久， DHTML就从一个大热门变成了一个人们不愿提起的名词，而对这种技术的 

                评价也很快地变成了"宣传嗦头"和"难以实现"。 

                 1.4     制定标准 

             •  

                      就在浏览器制造商以 DOM 为武器展开营销大战的同时， W3C 不事声张地结合大家的优点 

                推出了一个标准化的 DOM。令人欣慰的是， Netscape、微软和其他一些浏览器制造商们还能抛 

                开彼此的敌意而与W3C携手制定新的标准，并于1998 年 10 月完成了"第 1 级DOM" (DOM Level  

                      回到刚才的例子，我们已经用<di v>，标签定义了一个 B 为 myel ement 的页面元素，现在需要 

                找出它的 left 位置并把这个值保存到变量 xpos 中。                                 下面是使用新的标准化 DOM 时需要用到的 

                语怯: 

                      var  xpo s  =  dbcument.getElementByld('myelement' ) .style.left  

                      乍看起来，这与刚才那两种非标准化的专有DOM相比并没有明显的改进。但事实上，标准 

                化的DOM有着非常远大的抱负。 

                      浏览器制造商们感兴趣的只不过是通过 JavaScript 操控网页的具体办法，但 W3C 推出的标 

                准化DOM却可以让任何一种程序设计语言对使用任何一种标记语言编写出来的任何一份文裆进 

                行操控。 
•  

                1.4.1      浏览器以外的考虑 

                     DOM是一种API (应用编程接口)。简单地说， API 就是一组已经得到有关各方共同认可的 

                基本约定。在现实世界中，相当于API 的例子包括(但不限于)摩尔斯码、                                                         国际时区、化学元素 

                周期表。以上这些都是不同学科领域中的标准，它们使得人们能够更方便地交流与合作。  如果没 

                                                                                 r  

                                            '  

----------------------- Page 23-----------------------

            、 

                                             /  

                                                                   1.4  制定标准         5  

有一个统一的标准，事情往往会横变成为一场灾难。别忘了，因混淆英制度量衡与公制度量衡至 

少导致过一次火星探测任务的失败。 

    在软件编程领域中，虽然存在着多种不同的语言，但很多任务却是相同或相似的。这也正是 

人们需要API 的原因。一旦掌握了某个标准，就可以把它应用在许多不同的环境中。昌然语法会 

因为使用的程序设计语言而有所变化，但这些约定却总是保持不变的。 

     因此，虽然本书的重点是教会你如何通过JavaScript 使用 DOM，当你需要使用诸如PHP 或 

Python 之类的程序设计语言去解析XML 文档的时候，你获得的 DOM 新知识将会有很大的 

帮助。 

    W3C 对DOM 的定义是:"一个与系统平台和编程语言无关的接口，程序和脚本可以通过这 

个接口动态地访问和修改文档的内容、结构和样式。" W3C 推出的标准化 DOM，在独立性和适 

用范围等诸多方面，都远远超出了各自为战的浏览器制造商们推出的各种专有DOM。 

 1.4.2  浏览器战争的结局 

    我们知道，浏览器市场份额大战中微软公司战胜了 Netscape ，具有讽刺意味的是，专有的 

DOM和HTML标记对这个最终结果几乎没有产生影响。 E浏览器注定能击败其他对手，不过是 

因为所有运行Windows 操作系统的个人电脑都预装了它。 

    受浏览器战争影响最重的人群是那些网站设计人员。跨浏览器开发曾经是他们的噩梦。除了 

刚才提到的那些在JavaScr刷实现方面的差异之外， Netscape Navigator 和 IE 这两种浏览器在对 

CSS 的支持方面也有许多非常不同的地方。而编写那些可以同时支持这两种浏览器的样式表和 

脚本的工作也成了一种黑色艺术。 

    浏览器制造商的自私姿态遭到人们的激烈反对，一个名为 Web 标准计划(简称 WaSP， 

http://webstandards.org/)  的小组应运而生。 WaSP 小组采取的第一个行动就是，鼓励浏览器制造 

商们采用 W3C 制定和推荐的各项标准，也就是在浏览器制造商们的帮助下得以起草和完善的那 

些标准。 

    或许是因为来自 WaSP 小组的压力，又或许是因为企业的内部决策，下一代浏览器产品对 

Web 标准的支持得到了极大的改善。 

 1.4.3  崭新的起点 

    早期浏览器大战至今，浏览器市场已经发生了巨大的变化，而且到了今天，这一切也几乎每 

天都有变化。有的浏览器，比如Netscape Navigator，差不多已经从人们的视野中消失了，而新一 

代浏览器则陆续登台亮相。苹果公司在 2003 年首次发布了它的 Safari 浏览器(基于 WebKit) ,  

它从一开始就坚定不移地遵循DOM标准。今天，包括Firefox、                          Chrome、  Opera 和IE，以及一些 

基于 WebKit    的其他浏览器都对 DOM 有着良好的支持。很多最潮的智能手机浏览器都在使用 

WebKit  渲染引擎，推动着手持浏览器开发不断向前，让手机上网的体验甚至好过了使用某些桌 

面浏览器。 

                                                                                                •  

                                                        •  

----------------------- Page 24-----------------------

  6    第 1 章 JavaScript 简史 

                                                  叫一 

                                                               .  
 注意 WebKit(http://webkit.org) 是Safari 和Chrome 采用的一个开源Web 浏览器引擎。以 WebKit 

      和Gecko (Firefox 的核心， https://developer.mozilla.org/en/Gecko) 为代表的开源引擎，在 

      促进微软的 Trident (m 的核心)等专有浏览器引擎逐步向 Web 标准靠拢方面起到特别积 

      极的作用。 

    今天，几乎所有的浏览器都内置了对DOM 的支持。 20 世纪90 年代后期的浏览器大战的硝 

烟已经散尽。现在的浏览器厂商无一不在争先恐后地实现最新规范。我们已经目睹了由异步数据 

传输技术 (Ajax) 所引发的学习 DOM 脚本编程的热潮，而 HTML5 DOM 的众多新特性，怎能 

不让人对Web 的未来浮想联翩?HT阻5 极大地改进了标记的语义，让我们通过<audio>和<video> 

得以控制各种媒体， <canvas>元素具备了完善的绘图能力，浏览器本地存储超越了 cookie 限制， 

更有内置的拖放支持，等等。 

    Web 设计师的日子已经今非昔比。            尽管还没有一款浏览器完美无瑕地实现W3CDOM，但 

所有现代浏览器对DOM特性的覆盖率都基本达到了 95%，而且每款浏览器都几乎会在第一时 

间实现最新的特性。这意味着什么?意味着大量的任务都不必依靠分支代码了。以前，为了探 

查浏览器，我们不得不编写大量分支判断脚本，现在，终于可以实现"编写一次，随处运行" 

的梦想了。只要遵循DOM标准，就可以放心大胆地去傲，因为你的脚本无论在哪里都不会遇 

到问题。 

                                    、 

 1.5   小结 

    在前面对JavaScript 发展简史的介绍中，笔者特别提到，不同的浏览器采用了不同的办法来 

完成同样的任务。这一无法回避的事实不仅主宰着如何编写 JavaScript 脚本代码，还影响着 

JavaScript 教科书的编写方式。 

    JavaScript 教科书往往会提供大量的示例代码以演示这种脚本语言的使用方怯，而完成同一 

项任务的示例脚本往往需要为不同的浏览器编写两次或更多次。就像你在绝大多数网站上查到的 

代码一样，在绝大多数JavaScript 教科书的示例脚本中往往充斥着大量的浏览器探查代码和分支 

调用结构。类似地，在JavaScript 技术文档中，函数和方在去的清单也往往是一式多份-一至少需 

要标明哪种浏览器支持哪些函数和方法。 

    如今这种情况已经有所改变。多亏了标准化的 DOM，不同的浏览器在完成同样的任务时采 

用的做法已经非常一致了。因此，在本书中，当演示如何使用 JavaScript 和DOM 完成某项任务 

时，将不再需要撇开主题去探讨如何对付不同的浏览器。如果无特殊的必要，本书将尽量避免涉 

及任何一种特定的浏览器。 

    此外，我们在本书后面的内容中将不再使用 "DHTML" 这个术语，因为这个术语与其说是 

一个技术性词语，不如说是一个市场营销嗦头。首先，它听起来很像是 HT阻或刀口孔伍语言 

的另一种扩展，因而很容易造成误解或混淆g                 其次，这个术语容易勾起一些痛苦的回忆一一如果 

你向 20 世纪90 年代后期的程序员们提起 "DHTML" ，你将很难让他们相信它现在已经变成了一 

   •  

----------------------- Page 25-----------------------

                                                                                                                                                       1.5       小结                 7  

种简单、易用的标准化技术。 

         DHTh伍曾被认为是HTML础TML、  CSS 和JavaScript 相结合的产物，就像今天的HTML5 

那样，但把这些东西真正凝聚在一起的是DOM。如果真的需要来描述这一过程的话， "DOM 脚 

本程序设计"更精确，它表示使用 W3C DOM 来处理文档和样式表。 DHTML 只适用于Web 文 

挡， "DOM 脚本程序设计"则涵盖了使用任何一种支持DOMAPI 的程序设计语言去处理任何一 

种标记文档的情况。具体到 Web 文档， J avaScript 的无所不在使它成为了 DOM 脚本程序设计的 

最佳选择。 

         在正式介绍DOM 脚本程序设计技巧之前，我们将在下一章先简要地复习一下JavaScript 的 

                                                                                                                                                                                                     •  
语怯。 

                                                                                                                                                                                    •  

                                                     ·、 

                                                               •  

                                                                                               、 

           •  

                                                          •  

----------------------- Page 26-----------------------

                                         t  

              •  

                                                                           、 

                                                           JavaScript 语法 

                                    明 

           操 口  变 口  语 本  酌符 和 句  ! 均  容作 量 数 组 - 嚣            •  

                  口   口 

                            · 

                                                                                         、 

                      本章将简要复习一下JavaScript 语法，并介绍其中最重要的一些概念。 

               2.1         准备工作 

                      编写JavaScript 脚本不需要任何特殊的软件， 一个普通的文本编辑器和一个Web 浏览器就足 ' 

               够了。 
                      用 JavaScript 编写的代码必须通过HTML反HT1征文裆才能执行。有两种方式可以做到这点。 

               第一种方式是将JavaScript 代码放到文档<head>标签中的<script>标签之间: 

                       <!OOCTYPE   html  >  
                       <html  lang="en">  
                       <head>  
                          <meta  charset="utf-8"/>  
                          <title>Example</titl e>  
                          <script>  
                             JavaScript  goes  here...  
                          </script>  
                       </head>  
.                      <body>  
                          Mark-up  goes  here. . .  
                        </body>  
                        </ htm l>  

                       一种更好的方式是把JavaScript 代码存为一个扩展名为Js 的独立文件。典型的作法是在文档 

                的<head培ß分放一个<script>标签，并把它的 src 属性指向该文件: 

                        <!OOCTYPE   htm l>  

----------------------- Page 27-----------------------

                                                                                                                                   .  

                                                                                        2.1    准备工作              9  

        <title>Example</t~tle>  
        <script  src=吨ile. js、</script> 
      </head>  
      <body>  
        Mark-up  goes  here...  
      </body>  
      </html>  

     但最好的做法是把<script>.标签放到 HTML文档的最后，                                      </body>标签之前: 

      <!DOCTYPE   htm l>  
      <html  l ang="en">  
      <head>  
        <meta  charset="utf-8"/>  
        <title>Example</title>  
      </head>                                                                                、 
      <body>  
        Mark-up  goes  here...  
        <script  src="file.js"></scripb  
      </body>  
      </htm l>  

      这样能使浏览器更快地加载页面(第5 章将详细讨论这个问题)。 

                                                                                                    因为脚本默认 
         前面例子中的<script>标签没有包含传统的 type="text/java script"属性。 
 注意 
                                                                                                                 •  

         是Java Script，所以没必要指定这个属性。 

      如果打算实践一下本章中的例子，用一个文本编辑器创建两个文件。先创建一个简单的 

盯ML或XHTML文件，保存为诸如test.html 之类的名称。这个文件中一定要包含一个<script> 

标签，这个标签的src 属性设置成你创建的第二个文件的名字，比如examp 1 e. js。 

     你的test.html 文件应该包含如下内容: 

      <lOOCTYPE   html  >  
      <html  lang:::"en飞 
                                        •  
       <head>  
        <meta  charset= "utf-8"   />  
        <title>Just  a  test</titl e>  
      </head>  
      <body>  
        <script  src="example.js"></script>  
      </body>  
      </htm l>  

      可以把本章中的任何一个示例复制到你的 example.js 文件中。昌说那些示例没有什么特别令 

人激动的地方，但它们可以把有关的语怯演示得明明白白。 

      在本书后面的章节里，我们将演示如何使用 JavaScript 改变文档的行为和内容。但在本章里， 

我们只使用一个简单的对话框来显示消息。 

  ·   如果改变了 example .         js 文件的内容，只需在Web 浏览器中重新载入test.html 文档即可看到 

效果。 Web 浏览器会立刻解释并执行你的JavaScript 代码。 

      程序设计语言分为解释型和编译型两大类。 Java 或C十+等语言需要一个编译器 (comp诅er) 。 

编译器是一种程序，能够把用 Java 等高级语言编写出来的源代码翻译为直接在计算机上执行的 

              - 

----------------------- Page 28-----------------------

   10    第 2 章 JavaScript 语法 

文件。 

    解释型程序设计语言不需要编译器一一它们仅需要解释器。对于 JavaScript 语言，在互联网 

环境下， Web 浏览器负责完成有关的解释和执行工作。浏览器中的 JavaScript 解释器将直接读入 

源代码并执行。浏览器中如果没有解释器， JavaScript 代码就无法执行。 

    用编译型语言编写的代码有错误，这些错误在代码编译阶段就能被发现。而解释型语言代 

码中的错误只能等到解释器执行到有关代码时才能被发现。 

    与解释型语言相比，编译型语言往往速度更快，可移植性更好，但它们的学习曲线也往往相 

当陡峭。 

    JavaScript 的优点之一就是相当容易入门，但千万不要因此小看JavaScript，其实它能完成许 

多相当复杂的编程任务。不过，本章主要介绍它最基本的语法和用法。 

2.2    语法 

    英语是一种解释型语言。在阅读和处理我们用英语写出来的文字肘，你就相当于一个英语解 

释器。只要遵守英语的语怯规则，我们想表达的意思就可以被正确地解读。这些语言结构方面的 

各项规则，我们就称之为"语蓓"。 

    如同书面的人类语言，每种程序设计语言也都有自己的语法。JavaScript 的语法与Java 和C忡 

语言的语法非常相似。 

2.2:1   语旬 
                          .  

    用 JavaScript 编写的脚本，与其他语言编写出来的脚本一样，都由一系列指令构成，这些指 

令叫做语句 (statement) 。     只有按照正确的语法编写出来的语句才能得到正确的解释。 

    JavaScript 语句与英语中的句子很相似。它们是构成任何一个脚本的基本单位。 

    英语语法要求每个句子必须以一个大写字母开头、以一个句号结尾。 JavaScript 在这方面的 

要求不那么严格，程序员只需简单地把各条语句放在不同的行上就可以分隔它们，如下所示: 

    first stαtement  
     second  statement  

    如果你想把多条语句放在同一行上，就必须像下面这样用分号来分隔开它们: 

                                                                               .‘  

    first  statement;  second  statement;  

    我们建议在每条语句的末尾都加上一个分号，这是一种良好的编程习惯: 

    first stαtement;  
     second  statement;  

    这样做让代码更容易阅读。让每条语句独占一行的做法能更容易跟踪 JavaScript 脚本的执行 

顺序。 

2.2.2   注释 

    不是所有的语句都需要 JavaScript 解释器去解释并执行。有时你需要在脚本中写一些仅供自 

----------------------- Page 29-----------------------

                                                                                                     •  

                                                                        2.2   i吾法      11  

 己参考或提醒自己的信息，你希望 JavaScript 解释器能直接忽略掉这些信息。这类语句就是注释 

 ωmment) 。 

     注释能有效帮助你了解代码流程。在代码中它们扮演生活中便条的角色，可以帮助你弄清楚 

'益的脚本到底干了些什么。 

     有多种方式可以在 JavaScript脚本中插入注释。例如，如果用两个斜线作为一行的开始，这 

一行就会被当成一条注释: 
                                                                      .  
     //自我提醒:有注释是好事 

     如果使用这种注释方式，就必须在每个注释行的开头加上两个斜线。像下面这样的写法脚本 

就会出问题: 

     //  自我提醒: 
        有住释是好事 

                   、， 

     必须把它们写成类似下面这样才行: 

     //  自我提醒:                                                                                      {  
     //有注释是好事 

     如果打算注释很多行， 你可以在注释内容的开头力。上一个斜线和一个星号 (1*) ，在注释内 

容的末尾加上一个星号和一个斜线(*/)。  下面是一个多行注释的例子:                                                     ,  

     /幸自我提醒: 

        有注释是好事*/ 

    这种注释方式在需要插入大段注释时很有用，它可以提高整个脚本的可读性。 

    还可以使用 HTh伍风格的注释，但这种做法仅适用于单行注释。其实 JavaScript 解释器对 

气←一"的处理与对"刀"的处理是一样的: 

     < !-这是JavaScript 中的注释 

    如果是在HTML文档中，还需要以"->"来结束注释，如下所示: 

     ζ!-- 这是HTML中的注释--> 

    但JavaScript不要求这样做，它会把"一一>"视为注释内容的一部分。 

    请注意， HTML允许上面这样的注释跨越多个行，但 JavaScript 要求这种注释的每行都必须 

在开头加上"<!一"来作为标志。 

     因为Java~cript 解释器在处理这种风格的注释时与大家所熟悉的HTh在L做法不同，为避免发 

生翼淆，最好不要在 JavaScript 脚本中使用这种风格的注释。建议大家用"刀"来注释单行，用 

矗障'注释多行。 

22.3  变 

    在日常生活里，有些东西是固定不变的，有些东西则会发生变化。例如，人的姓名和生日是 

固定不变的，但心情和年龄却会随着时间变化而变化。人们把那些会发生变化的东西称为变量 

 v也able)  。 
                                                .  
                                                                              ,  

----------------------- Page 30-----------------------

                                                       、 

                          12          第 2 幸 JavaScript 语法 

   .  
, •                          我的心情会随着我的感受变化而变化。假设我有一个变量rnood (意思是"心情") ，我可以把 
'  

                      此时此刻的心情存放到这个变量中。不管这个变量的值是 "happy" 还是 "sad" ，它的名字始终 

                      是mood。我可以随时改变这个值。 

                             类似地，假设我现在的年龄是 33 岁。一年之后，我的年龄就是 34 岁。我可以使用变量 age 

                      来存放我的年龄并在生日那天改变这个值。当我现在去查看age 变量时，它的值是33; 但一年之 

                      后，它的值将变成34。 

                             把值存入变量的操作称为赋佳(assignment) 。我把变量 mood 赋值为 "happy" ，把变量 age 

                      赋值为33。 

                                                                                                                          、 
                             在JavaScript 中你可以这样给这些变量赋值: 

                             一个变量被赋值以后，我们就说该变量包含这个值。变量 mood 现在包含值 "happy" ，变量 

                      age 现在包含值33。我们可以用如下所示的语句把这两个变量的值显示在一个弹出式警告窗口中: 

                              alert(mood)j  
                              alert(age)j  

                             图 2-1 是一个显示mood 变量值的例子。 

                                                                                                                                                                  •  

      •  

                                                                                                      2-1  
                                                                                               图 

                             图 2-2 是一个显示 age 变量值的例子。 

                                                                    ,  

                                                                                                                                      、 

                                                                                                                                     "  

                                                                                               图 2-2  

                             我们会在本书后面的章节中利用变量做一些很有用的事情，别着急。 

                             请注意， JavaScript 允许程序员直接对变量赋值而无需事先声明。这在许多程序设计语言中 

                     是不允许的。有很多语言要求在使用任何变量之前必须先对它做出"介绍"，也称为卢明(declare) 。 

----------------------- Page 31-----------------------

                                                                                                                                                 •  

                                                                          .- .  
                                                                           - 

                                        '                                                              2 .2    语法           13  

        在 JavaScript 脚本中，如果程序员在对某个变量赋值之前未声明，赋值操作将自动声明该变 

  量。虽然 JavaScript 没有强制要求程序员必须提前声明变量，但提前声明变量是一种良好的编程 

  习惯。下面的语句对变量mood 和 age 做出了声明: 
                                                   .  
        var  mood;                                 . 一 

        var  age;  

        不必单独声明每个变量，你也可以用一条语句二次声明多个变量: 

        var  mood ,  agej   .  

        你甚至可以一石两鸟:把声明变量和对该变量赋值一次完成: 

        var  mood   =   "happy";  
        var  age  ;;;;  33;  

        甚至还可以像下面这样: 

        var  mood   =   "happy" , age  =   33;  

        像上面这样声明和赋值是最有效率的做法，这一条语句的效果相当于下面这些语句的总和: 

        var  mood ,  age;  
        mood  =   "happy";  
        age  =   33;  

        在JavaScript 语言里，变量和其他语法元素的名字都是区分字母大小写的。名字是mood 的变 

  量与名字是 Mood、              MOOD 或rríJOd 的变量没有任何关系，它们不是同一个变量。下面的语句是在对 

  高个不同的变量进行赋值: 

        var  mood   ;;;;  "happy"j  
        MOOD ;;;;  " sad "j  

        JavaScript 语法不允许变量名中包含空格或标点符号 (美元符号 "$"例外)。下面这条语句 

  著导致语法错误: 

        var  my  mood  =   "hapPy"j  

        JavaScript 变量名允许包含字母、数字、 美元符号和下划线(但第一个字符不允许是数字)。 

  为了让比较长的变量名更容易阅读，可以在变量名中的适当位置插入下划线，就像下面这样: 

        var  my_mood   =  "happy"j  

        另一种方式是使用驼峰格式(camel case) ，删除中间的空白(下划线)，后面的每个新单词改 

  用大写字母开头: 
                                                                               ‘  

        var  myMood   =   " haPPy"j  

        通常驼峰格式是函数名、方法名和对象属性名命名的首选格式。 

•  
        在上面这条语句中，单词 "happy" 是JavaScript语言中的一个字面量 ( literal) ，也就是可以 

 直接在JavaScript 代码中写出来的数据。文本 "happy"除了表示它自己以外不表示任何别的东西， 

 正如大力水手 Popeye 的名言:"它就是它!"与此形成对照的是，单词 "var" 是一个关键字， 

 cy roood 是一个变量名字。 

                                                                                                                                 .  

----------------------- Page 32-----------------------

                                                                            •  

                     14        第 2 章 JavaScript 语法                                                                           •  

                  2.2.4      数据类型 

                                  ‘  

                        变量mood 的值是一个字符串，变量age 的值则是一个数。虽然它们是两种不同类型的数据， 

                  但在 JavaScript 中对这两个变量进行声明和赋值的语法却完全一样。有些其他的语言要求在声明 

                  变量的同时还必须同时声明变量的数据类型，这种做法称为类型卢明 (typing) 。 

                        必须明确类型声明的语言称为强类型 (strongly 可ped) 语言。 JavaScript 不需要进行类型声 

                  明，因此它是一种弱类型(weakly typed) 语言。这意味着程序员可以在任何阶段改变变量的数 

                  据类型。 

                        以下语句在强类型语言中是非泌的，但在JavaScript 里却完全没有问题: 

                                                                                                               f  
                        var  age  =  "thirty three"j  
                        age  =  33;  

                        JavaScript 并不在意变量 age 的值是一个字符串还是一个数。 

                        接下来，我们一起来复习一下JavaScript 中最重要的几种数据类型。 

                        1 .字符串 

                        字符串由零个或多个字符构成。字符包括(但不限于)字母、数字、标点符号和空格。字符 

                  串必须包在引号里，单引号或双引号都可以。下面这两条语句含义完全相同: 

                        var  mood  =   'happY'j  
                        var  mood   =   "happy"j  

                        你可以随意选用引号，但最好是根据字符串所包含的字符来选择。如果字符串包含双引号， 

                  就把整个字符串放在单引号里;如果字符串包含单引号，就把整个字符串放在双引号里: 

                      .  var  mood   =  "don ' t   ask "j  
                                                                                                                                          •  

、   . 

                        如果想在上面这条语句中使用单引号，就必须保证字母飞"和 "t" 之间的单引号能被当成 

                  这个字符串的一部分。这种情况下这个单引号需要被看做→个普通字符，而不是这个字符串的结 

                  束标志。这种情况我们需要对这个字符进行转义 (escaping) 。在JavaScript 里用反斜线对字符进 

                  行转义: 

                        var  mood   =   'don\'t  ask';  

                       类似地，如果想用双引号来包住一个本身就包含双引号的字符串，就必须用反斜线对字符串 

                  中的双引号进行转义: 

                        var  height  = "about  5'10\"   tall";  

                       实际上这些反斜线并不是字符串的一部分。你可以自己去验证一下:把下面这段代码添加到 

                 你的 example.js 文件中，然后重新加载test. html 文件: 

                        var  height  = "about   5'10\"  tall "j  
                        alert(height)j  

                        图 2-3 是用反斜线对有关字符转义的一个屏幕输出示例。 

                                                                                                                    •  

----------------------- Page 33-----------------------

                                                                                                                                                                                                              '‘  

                              •                                                                                                                    2.2       j吾法                 15  

                                                                                                                                   ,  

                                                                              ab副H i"l~缉 øll 

                                                                                                                       、 

                                                                                                                                    . .  

                                                      ~   - ..~  

                                                                                                     、 

                                                                 .     二 

                                                             ." ;_.  .，~ ..  
                                                          、.' . <旷 

                                                           J 、.~      ~  

                                                                              <  

                                                                            "、 一  牛         ,  

                                                                                      图 2-3 

         我个人比较喜欢用双引号来包住字符串。作为一个好的编程习惯，不管选择用双引号还是单 

          ，请在整个脚本中保持一致。如果在同一个脚本中一会儿使用双引号，一会儿又使用单引号， 

              快就会变得难以阅读和理解。 

         2.  数值 

         如果想给一个变量赋一个数值，不用限定它必须是一个整数。 JavaScript 允许使用带小数点 

              ，并且允许任意位小数，这样的数称为浮点数 (floating-point -llU1)1ber) :  

          var  age  =  33.25;  

         也可以使用负数。在有关数值的前面加上一个减号(-)表示它是一个负数:                                                                                                                                        '  

          var  temperature  =  -20;  

         JavaScript 也支持负数浮点数: 

          var  temperature  =  -20.33333333  

         以上是数值数据类型的例子。 

         3.  布尔值 

                                                                                                                                                                                                   、 

         另一种重要的数据类型是布尔 (boolean) 类型。 

         布尔数据只有两个可选值一___;true 或 false。假设需要这样一个变量:如果我正在睡觉，这 

     变量将存储一个值3                              如果我没有睡觉，这个变量将存储另一个值。可以用字符串数据类型把变                                                                                                                                •  

量童在值为"sleeping" 或 "not sleeping" ，但使用布尔数据类型显然是一个更好的选择: 

          var  sleeping  =  t rue;  

         从某种意义上讲，为计算机设计程序就是与布尔值打交道。作为最基本的事实，所有的电子 

电路只能识别和使用布尔数据:电路中有电流或是没有电流。不管是使用术语true 和false、 yes 和 

，。或者 1 和 0 ，重要的是只能取两种可取值中的一种。 

         布尔值不是字符串，千万不要把布尔值用引号括起来。布尔值 false 与字符串值γalse"是 

两码事! 

         下面这条语句将把变量married 设置为布尔值true: 

         var  married  =  true;  

         下面这条语句把变量married 设置为字符串飞rue" : 

                                                       ‘·  

----------------------- Page 34-----------------------

           16     第 2 章 JavaScript 语法 

             var  married  =  "true"j  

        2.2.5    数组 

            字符串、数值和布尔值都是标量 (scalar) 。如果某个变量是标量，它在任意时刻就只能有一 

        个值。如果想用一个变量来存储一组值，就需要使用数纽 (array) 。 

            数组是指用一个变量表示一个值的集合，集合中的每个值都是这个数组的一个元素 

        (element)  。例如，我们可以用名为beatles 的变量来保存Beatles 乐队全体四位成员的姓名。 

            在JavaScriptd 中，数组可以用关键字Array 声明。声明数组的同时还可以指定数组初始元素 
、       个数，也就是这个数组的长度 (length)                  :  

             var  beatles  =  ArraY(4)j  

            有时，我们无法预知某个数组有多少个元素。没有关系， JavaScript 根本不要求在声明数组 

        时必须给出元素个数，我们完全可以在声明数组时不给出元素个数: 

             var  beatles  = Array()j  

            向数组中添加元素的操作称为填充 (populating) 。在填充数组时，不仅需要给出新元素的值， 

        还需要给出新元素在数组中的存放位置，这个位置就是这个元素的下标 (index) 。数组里一个元 

        素一个下标。下标必须用方括号括起来: 

            。rray[index] = element;  

            现在来填充刚才声明的beatles 数组，我们按照Beatles 乐队成员的传统顺序(即John、 Paul、 

        George 和Ringo) 进行填充。第一个: 

            beatles[o]  = "John"j  

            用。而不是 1 作为第一个下标多少会让人感到有些不习惯，这是JavaScript 世界里的一条规 

        则，所以我们只能这么做。人们很容易忘记这一点，很多程序员新手在刚接触数组时经常在这个 

        问题上犯错误。 

            下面是声明和填充 beatles 数组的全过程: 

            var  beatles  =  ArraY(4)j  
            beatles[O]  = "John";  
            beatles[l]  =   "paul"j  
            beatles[2]  =飞eorge"j 
            beatles[3]  =  "Ringo";  

            我们现在可以在脚本中通过下标值 "2"  (beatl es[2])  来获取元素 "George" 了。请注意， 

        beat'les 数组的长度是4，但它最后一个元素的下标却是3 。因为数组下标是从0 开始计数的，你 

        或许需要一些时间才能习惯这一事实。 

            像上面这样填充数组未免有些麻烦。有一种相对简单的方式:在声明数组的同时对它进行填 

        充。这种方式要求用逗号把各个元素隔开: 
   ,  

            var  beatles  =  Array(   "John" ,  "paul" ,  "George" ,  "Ringo"  )j  

----------------------- Page 35-----------------------

                                                                                                                                                                                                     ‘  

                                                                                                                                             2.2       语、 法              17 

         上面这条语句会为每个元素自动分配一个下标:第一个下标是 0 ，第二个是 1 ，依次类推。 

 因此， beatles[2]仍将对应于取值为 "George" 的元素。 

         我们甚至用不着明确地表明我们是在创建数组。事实上，只需用一对方括号把各个元素的初 

 始筐括起来就可以了: 

          var  beatles  =  [  "John勺 "paul" ，                    "George" ,  "Ringo"  ]j  

         数组元素不必非得是字符串。可以把一些布尔值存入一个数组，还可以把一组数值存入一个 

 数组: 

          var  years  =  [   1940,  1941,  1942,  1943  ]j  

         甚至可以把这3 种数据类型混在一起存入一个数组:                                                                                                                                                               . .  

          var  lennon  =   [        "John" ,  1940, false  ]j  
                                                                                        ,  

         数组元素还可以是变量: 

          var  name   = "John" j  
          beatles[o ]  = namej  

         这将把 beatles 数组的第一个元素赋值为 "John" 。 

         数组元素的值还可以是另一个数组的元素。下面两条语句将把 beatles 数组的第二个元素赋 

 筐为 "Paul": 

         var  names   =   [       "Ringo" ,  "John" ，飞eorge" ，                  "Paul"  ]j  
         beatles[l]  =  names[3]j  

         事实上，数组还可以包含其他的数组!数组中的任何一个元素都可以把一个数组作为它的值: 

                              t f  吗 "                                咱 
                                                            rT  
                、 
                                         LHnH                   14  
                                      --9n           A- 
                                                                    d · · · · 
                                                  44   nu  
                                                   ny  
     a M  a 2  - - ·  a γ  」 · q 白 ·  γ 』 白  』  自  H  n 0  H n 、 
          vvio                                                   F2  
                      nH&Lr             OO                         e  
                                           n-P  
                                                                         .,  
            D  t  i 
                             ==  
                                                             a 
                                              .,         .,  
                    「  、 白   O t H  n  d  l  tt r 
                           td  
                   u  n  i 
                               =  
              品 电 b  p  d tt l 1 」 咱 

                i               i 
               L 
           』                      』 
                         』 

         现在， beatl es 数组的第一个元素的值是另外一个数组。要想获得那个数组里的某个元素的 

 恒，需要使用更多的方括号。beatles[O][OJ的值是"John" ， beatles[O][口的值是 1940， beatles[O][2] 

的值是false。 

         这是一种功能相当强大的存储和获取信息的方式，但如果不得不记住每个下标数字的话(尤 

其是需要从零开始数的时候)，编程工作将是一种非常痛苦和麻烦的体验。 幸好还有几种办法可 

以填充数组。首先看看一种更可读的填充数组的方式，然后介绍存放数据的首选方式:将数据保 

存为对象。 

         关联数组 

        beatles 数组是传统数组的典型例子:每个元素的下标是一个数字，每增加一个元素，这个 

数字就依次增加 1 。第一个元素的下标是0 ，第二个元素的下标是 1 ，依次类推。 

         如果在填充数组时只给出了元素的值，这个数组就将是一个传统数组，它的各个元素的下标 
                                                                                                                                                                                          ,  

将被自动创建和刷新。 

         可以通过在填充数组时为每个新元素明确地给出下标来改变这种默认的行为。在为新元素给 

出下标肘，不必局限于使用整数数字。你可以用字符串: 

----------------------- Page 36-----------------------

         、 

                                                                                 ,  

                                                                              ,  

              18          第 2 章 JavaScript 语法 

                                                                        --、 
                                            t f 』 飞 
                         -ionunu  
           4 1 4 1 A  V M 2 」 白 H t n τ =  =  A 缸 Y 吨 
                            nHFEE--rSELF-EL  
                               nunHUV44  
                             nH"""  
                      rnnn  
                                          u  n H h p · 
                                            vy"44=  
                                」 白 =     d A  、 O 、  J 
                              g  " ]  ] 
                                     ""nH           "p2  
                      H n H n   、 m 
                       nHnHnH                      n.-pe  
           •     』 自 」        a a 电 川     y  n J 

                             ­ ，  v 、 ·  u 」  .  · a  · γ ' 正 斗 
                                                   , 
                  、 
                                                   14  
                   L a   H  的                    『 
                                   、 
                                                       .,  
                  i 
                                                d 
                                   4 
                                         』 

                                                                                                                                                        ,  

                 这样的数组叫做关联数组。由于可以使用字符串来代替数字值，因而代码更具有可读性。但 

          是，这种用泣并不是一个好习惯，不推荐大家使用。本质上，在创建关联数组时，你创建的是 

          Array 对象的属性。在JavaScript 中，所有的变量实际上者陡某种类型的对象。比如，一个布尔值 

          就是一个Boolean 类型的对象，一个数组就是一个Array 类型的对象。在上面这个例子中，你实 

          际上是给 lennon 数组添加了 name、                                   year 和 1 ivi ng 三个属性。理想、情况下，你不应该修改Array 

          对象的属性，而应该使用通用的对象 (Object) 。 

                                                                                                                                                            .  
          2.2.6         对象 
                                                                           .  

                 与数组类似，对象也是使用一个名字表示一组值。对象的每个值都是对象的一个属性。例如， 

          前一节的 lennon 数组也可以创建成下面这个对象: 

                  var  lennon  = Object();  
                  lennon.name  =  "John";  
                  lennon.year  =   1940;  
                  lennon.living  =  false;  

                 与使用Array 类似，创建对象使用 Object 关键字。它不使用方括号和下标来获取元素，而是 

          像任何JavaScript对象一样，使用点号来获取属性。要了解与0战ject 有关的更多内容，请参考本 

          章2.7 节。 

                 创建对象还有一种更简洁的语怯，即花括号语法: 

                  { propertyName:value)   proper走yName:value ，                  J 

                 比如， lennon 对象也可以写成下面这样: 
                 var  lennon  = { na me: I       John" ,  year:1940, living:false  };  

                 属性名与JavaScript 变量的命名规则有相同之处，属性值可以是任何JavaScript 值，包括其他 

          对象。 

                 用对象来代替传统数组的做法意味着可以通过元素的名字而不是下标数字来引用它们。这大 

         大提高了脚本的可读性。 

                 下面，我们将创建一个新的beatles 数组，并用刚才创建的 lennon 对象来填充它的第一个元素。 

                 var  beat l.es  =  ArrayO;  
                 beatles[O]  =  lennonj  

                 现在，不需要使用那么多数就可以获得想要的元素。我们不能使用 beatles[O][O] 而是使用 

         beatles[O] ，       name 得到值 "John" 二 

                 在此基础上，还可以做进一步的改进:把 beatles 数组也声明为对象而不是传统数组。这样 
.  
         一来，我们就可以用"世ummer" 或 "bassìst"  等更有意义且更容易记忆的字符串值一一而不是 

         一些枯燥乏味的整数一一作为下标去访问这个数组里的元素了: 

                 var  beatles  =  {};  
                 beatles.vocalist  = lennon;  

----------------------- Page 37-----------------------

                                                                                     2.3    操作          19  

 现在， beatles.vocalist.name 的值是 "John" ，                 beatles. voca 1 ist .year 的值是 1940 ，       beatles.  
 1 i st. 1 i vi ng 的值是false。 

     操作 

 此前给出的示例都非常简单，只是创建了一些不同类型的变量而已。要用 JavaScript做?些 

    工作，还需要能够进行计算和处理数据。也就是需要完成一些操作(operation)  。 

     作符 

 1回法是一种操作，减怯、除注和乘在去也是。这些算术操作 (arithmetic operation)  中的每一 

    须借助于相应的操作符 (operator)  才能完成。操作符是 JavaScript 为完成各种操作而定 

    一符号。你其实已经见过一种操作符了，它就是刚才在进行赋值时使用的等号(=)。加 

            号(+) ，减法操作符是减号(-)，除法操作符是斜杠 (1) ，                                    乘在去操作符是星号(*)。 

 下面是一个简单的加怯操作: 

 主 + 4 

 还可以把多种操作组合在一起: 
                                                                                                          •  

                                                                          ，、 
 主+ 4 牢 5 

 为避免产生歧义，可以用括号把不同的操作分隔开来: 

 主寺 (4 * 5)  
 {主 + 4) 幸 5 
                                                                                                                 •  

变量可以包含操作: 

 阳total =   (1  + 4)  * 5;  

不仅如此，还可以对变量进行操作: 

 曾ar temp_fahrenheit  =  95;  
 四r temp_celsius  =   (temp_fahrenheit  -  32)  /   1.8;  

JavaScript 还提供τ一些非常有用的操作符作为各种常用操作的缩写。例如，如果想给一个 

            1 ，可以使用如下所示的语句: 

F盟主= year  +  1;  

也可以使用忡操作符来达到同样的目的: 

~忡; 

类似地，--操作符将对一个数值变量的值进行减 1 操作。 

如号 (+)是一个比较特殊的操作符，它既可以用于数值，也可以用于字符串。把两个字符 

王为一是一种很直观易懂的操作: 

 war  message  =   "1  am   feeling  11  +  "happy ";  

最这样把多个字符串首尾相连在一起的操作叫做拼接(concatenation) 。这种拼接也可以通过 

         •  
         •  

                 、 

                                                                                                              .  

----------------------- Page 38-----------------------

                                                                                                                                                            .  

                        20         第 2 章 JavaScript 语法 

                           甚至可以把数值和字符串拼接在一起。因为 JavaScript 是一种弱类型语言，所以这种操作是 

                    允许的。此时，数值将被自动转换为字符串: 

                           请记住，如果把字符串和数值拼接在一起，其结果将是一个更长的字符串s                                                                             但如果用同样的 

                    操作符来"拼接"两个数值，其结果将是那两个数值的算术和。                                                                  请对比下面两条的ert 语句的执 

                    行结果: 

                            alert  (飞。" +  20);  
                            alert  (10  +  20);  

                           第一条 alert 语句将返回字符串" 1020" ，第二条 alert 语句将返回数值 30。 

                           图 2-4 是对字符串"10"和数值20 进行拼接的结果。 

,  

                                                                                           2-4  
                                                                                     图 

                           图 2-5 是对数值 10 和数值20 进行加法运算的结果。 

                                                                d得京黯            董事 寸、;二:1;.· 
                                                                盛功;辑融 ‘               ·         '  

                                                                                                电旷- 

                                                                湿阻鸣EEF嗯熠飞 'J'J        eJt f   i、 

                                                                                                                                                 .  
                                                           .J蜀Jι、万f  仨伫量「.r、 叫飞二川川Lι‘ζ扩仁川.丁二ι;二J、:k:?卜专斗7 
                                                                                            ,  
                                                                                •  .、~    '~  

                                                              二♂J，:;-J?  气二~.，乙:C F主7.· J  Y177  p e-- 

                                                            ".叶'儿;、沪 ::'::f7       户 "':17tz 

                                                                                           2-5  
                                                                                     图 

                           另一个非常有用的快捷操作符是杠，它可以一次完成"加法和赋值" (或 u拼接和赋值") 

                    作: 

                           var  year  ~ 2010;  
                           var  message  = "The  year  is  ";                              、 
                           message  +=  year;  

                           执行完上面这些语句后，变量message 的值将是"The year is 2005"。可以用如下所示的 al 

                    对话框来验证这一结果: 

                           alert(message);  

----------------------- Page 39-----------------------

                                                                                                                                                                             •  

                                                                                                                                                                             2 .4        条千牛t吾句                         21  

                              这次对字符串和数值进行拼接操作的结果如图2-6 所示。 

                                                                                 |          4 ‘           飞 τbed-vewide伪、 

                                                                                                                                                                                                             d且 

                                                                                                                           、 、 
                                                                                                                                          、.   "  . ,-- , •  '~、 t • ~，j 叫‘" 

                                                                                                                              i 
                                                                                                          ,  

                                                                                                                              ,  "   ..  
                                                                                                                                                  '.   ,                                                                 ,  
                                                                                                                      •  P.  •  "…  
                                                                                                                                                            ‘、 

                                                                                                                                                     ι、 

                                                                                       自 J 

                                                                                                                     .- . • "..  '‘" '-.  ..  

                                                                                                                              令， ，、 

                                                                                                                               - 、 
                                                                                                                                          ，、、...  
                                                                                                             、.,.      ...  
                                                                                 岭      ， 

                                                                                                                                                                                     •  
                                                                                                                    图 2-6 

                                    条件语旬 

                              此前介绍的语句都是相对比较简单的声明或运算，而脚本的真正威力体现在它们还可以根据 

                                   出的各种条件做出决策。 JavaScript 使用条件语句 (conditional statement)  来做判断。 

                             在解释脚本时，浏览器将依次执行这个脚本中的各条语句，我们可以在这个脚本中用条件语 

                                       一个条件，只有满足了这一条件才能让更多的语句得到执行。最常见的条件语句是汗 

                              ，   下面是 if 语句的基本语徐: 
                                                                                                                                                                                                                           •  
                              写 (condition)  {  
                                  statements;  

                             条件必须放在 i f 后面的圆括号中。条件的求值结果永远是一个布尔值，即只能是 true 或 

                                   花括号中的语句一一不管它们有多少条，只有在给定条件的求值结果是 true 的情况下才 

                                  。因此，在下面这个例子中， a 1 ert 消息永远也不会出现: 

                             if ( 1  > 2)   {  
                                 alert(" The  world  has  gone  mad!");  
                             }  

                             国为 1 不可能大于2 ，所以上面这个条件的值永远是 false。 

                             在这条 if 语句中，我们有意把所有的东西都放在花括号里的。这并不是JavaScript 的一项语 

                                  ，    我们这么做只是为了让代码更容易阅读。 

                            事实上， if 语句中的花括号本身并不是必不可少的。如果 if 语句中的花括号部分只包含着 

                                       的话，那就可以不使用花括号，而且这条 if 语句的全部内容可以写在同一行上: 

                             主Æ ( 1  > 2)  alert("The  world  has  gone  mad!");  

•  
•  
                            不过，因为花括号可以提高脚本的可读性，所以在 i f 语句中总是使用花括号是个好习惯。 

                           于语句可以有一个el 妃子句。包含在的se 子句中的语句会在给定条件为假时执行: 

                             if ( 1  > 2)   {  
                                 alert( "The  world  has  gone  mad !");                                                                                                                ,  

                             } else  {  
                                 alert("All  is  well  with  the  world");  

                            因为给定条件 "1>2" 的值为假 (fal se) ，所以我们将看到如图 2-7 所示的结果。 

----------------------- Page 40-----------------------

                                                                                                                                                                                               •  

                     22                             JavaScript 语法 
                                   第 2 章 

                                                                                            J\ll部制e睡 唰辙E陆W刷雀、                          I  

                                                                                                  J"  ..    .‘·  
                                                                                              _  
                                                                                                      之‘ 
                                                                                            •  !.-地‘ L JaT'v  J        、 
                                                                         ,                 ‘、白....' '." l- ...'，、，、                    T   t.  
                                                                                                   " ,  • - , • _.  
                                                                             ,                                             ,  
                                                                                                   一. 
                                                                                                   ....、、‘副                      、. I  
                                                                            P 、.,  

                                                                                                                                        、   二叫 

                                                                                                  自.-  ，一' 
                                                                                        _一. 
                                                                                                      _、 
                                                                           、g        、.          .二、，'~' ,  

                                                                                               ‘  Jι，  
                                                                            ,  
                                                                                               "魄- 
                                                                                          ~  j".  -..'  
                                                                                    二 、、也'‘、、_， 

                                                                                   .·佬，‘"，  r.I，~:         '.  
、                                                                                       户、. 

                                                                                                   图 2-7  

                2.4.1  
                                 比较操作符 

                         JavaScript 还提供了许多几乎只能用在条件语句里的操作符，其中包括诸如大于(>)、小于 

                 (<)、大于或等于(>=)、小于或等于 (<=)之类的比较操作符。 

                         如果想比较两个值是否相等，可以使用"等于"比较操作符。                                                                                         这个操作符由两个等号构成 

                 (      )。别忘了，单个等号(=)是用于完成赋值操作的。如果在条件语句的某个条件里使用了单 

                个等号，那么只要相应的赋值操作取得成功，那个条件的求值结果就将是true。 

                         下面是一个错误地进行"等于"比较的例子: 

                         if  (my_mood   =  your_mood)                {  

                         上面这条语句的错误之处在子，它是把变量your_mood 赋值给变量ffiY_rnood，而不是在比较它 

                们是否相等。因为这个赋值操作总会成功气 所以这个条件语句的结果将永远是true。 

                         下面才是进行"等于"比较的正确做法: 

                         var  your_mood   =  "sad";  
                         if  (my_mood   ==   your_mood)   {  
                           alert("We  both  feel  the  same.");  

                        这次，条件语句的结果是false。 

                        JavaScript 还提供了一个用来进行"不等于"比较的操作符，它由一个感叹号和一个等号构 

                成(!=) 。 

                         if (my_mood          !=  your_mood)   {  
                            alert("We're  feeling  different  moods.");  

                        相等操作符=并不表示严格相等，这一点很容易让人犯糊涂。  例如，                                                                                                比较 fal se 与一个空字 

                符串会得到什么结果? 

                         var  a  = false;  
                                                                                                                                                                                     ‘  
                         var  b=' ' ;  
                         if (a  ==   b)   {  

                      ①此处原文有误，赋值运算并非总是返回真值: if(a  = fal se)  {ale内(' hello.                                                              world'); } 中的 al旷t 语句就不会执行。 

                                                                                                                                                                            一一审校者注 

----------------------- Page 41-----------------------

                                                                                                                                                '‘  

                                                                                                2.4     条件语句               23  

          alert(" a  equals  b");  

       这个条件语句的求值结果是true，为什么?因为相等操作符=认为空字符串与 fal se 的含义 

 桓目。要进行严格比较，就要使用另一种等号(二=)。这个全等操作符会执行严格的比较，不 

仅比较值，而且会比较变量的类型: 

       var  a  =  false ;  

       if (a  ===   b)  {  

       这一次，条件表达式的求值结果就是 false 了。因为即使可以认为 false 与空字符串具有相 

 目前含义，但Boolean 和 String 可不是一种类型。 

       当然，对于不等操作符!=也是如此。如果想比较严格不相等，就要使用! 二。 

2.4 .2      逻辑操作符 

       JavaScript 允许把条件语句里的操作组合在一起。例如，如果想检查某个变量，不妨假设这 

   变量的名字是 num，它的值是不是在 5- 10 之间，我将需要进行两次比较操作。首先，比较这 

   变量是否大于或等于 5 ;                    然后，比较这个变量是否小于或等于 10。这两次比较操作称为逻辑比 

握 (operand)  。下面是把这两个逻辑比较组合在一起的具体做法: 

       if  (  num   >=  5  &&  num   <=  10  )   {  

      这里使用了"逻辑与"操作符，它由两个"&"字符构成(&&)，是一个逻辑操作符。 

      逻辑操作符的操作对象是布尔值。每个逻辑操作数返回一个布尔值 true 或者是 false                                                                          "逻 
                                                                                                                         o 

       '操作只有在它的两个操作数都是true 时才会是true。 

       "逻辑或"操作符由两个垂直线字符构成(1 1 ) 。只要它的操作数中有一个是true，                                                                  "逻辑或" 

                 true。如果它的两个操作数都是true，                               "逻辑或"操作也将是true。只有当它的两个 

         都是fal se 时，"逻辑或"操作才会是false。 

       if  (  num  > 10  11  num   < 5   )   {  
         alert("The  number  is  not  in  the  right  range.");  

                                                                                                                                        、 

      JavaScript 还提供了一个"逻辑非"操作符，它由一个感叹号(! )单独构成。"逻辑非"操 

作符只能作用于单个逻辑操作数，其结果是把那个逻辑操作数所返回的布尔值取反。如果那个逻 

                   回的布尔值是true，                 "逻辑非"操作符将把它取反为 false: 

       if  (   !(1  > 2)  )  {  

      请注意，为避免产生歧义，上面这条语句把逻辑操作数放在了括号里，因为我想让"逻辑非" 

鬓作符作用于括号里的所有内容。 

                                             电 

----------------------- Page 42-----------------------

                       24        第 2 章 JavaScript 语法 

                          可以用"逻辑非"操作符把整个条件语句的结果颠倒过来。在下面的例子里，我特意使用了 

                   一对括号来确保"逻辑非"操作符将作用于两个逻辑操作数的组合结果: 

                          if  (  !(num  >  10  II  num   < 5)   )  {  

                    2.5       循环语旬 

                         if 语句或许是最重要、最有用的条件语句了，它的唯一不足是无法完成重复性的操作。在 if 

                   语句里，包含在花括号里的代码块只能执行一次。如果需要多次执行同一个代码块，就必须使用 

                   循环语句。 

                          循环语句可以让我们反复多次地执行同一段代码。循环语句分为几种不同的类型，但它们的 

                   工作原理几乎一样:只要给定条件仍能得到满足，包含在循环语句里的代码就将重复地执行下去; 

                   一旦给定条件的求值结果不再是true ，循环也就到此为止。 

                   2.5.1       while 循环 

                         while 循环与 if 语句非常相似，它们的语法几乎完全一样: 

                          while  (condition)  {  

                         while 循环与 i f 语句唯一的区别是:只要给定条件的求值结果是true，包含在花括号里的代 

                   码就将反复地执行下去。下面是一个while 循环的例子: 

                               f o t 
                                         付 
                           、 ·  b γ L F t r u H 
                          VW       nHFL+  
                                 orn ;< 
                                       --n 
                                         4 
                         H n i 、  a . ‘ 、 &LUM   ，  ， .  、  、 ， 

                                             44·'  
                                               44  
                                                 B J 
                                      uc-p  
                            1 i 
                        F M 2 4 
                                       Hnv  
                             』  白 」 品 飞     、     、 
                                           t 
                                          ' ' 1 
•  
                              在 L 4 L + 飞 H n 

                             」 O  U H 

                         我们来仔细分析一下上面这段代码。首先，创建数值变量count 并赋值为 1;  然后，以count 

                   < 11一一意思是"只要变量count 的值小于 11 ，就重复执行这个循环"一为条件创建一个while 

                   循环。在 while 循环的内部，用"忡"操作符对变量 count 的值执行加 1 操作，而这一操作将重 

                   复执行 10 次。如果用 Web 浏览器来观察这段代码的执行情况，将会看到一个 al ert 对话框闪现 

                   了 10 次。这条循环语句执行完毕后，变量count 的值将是 11 。 

                    注意 这里的关键是在while 循环的内部必须发生一些会影响循环控制条件的事情。在上例中， 

                             我们在while 循环的内部对变量 count 的佳进行了加 1 操作，而这将导致循环控制条件在 

                             经过 10 次循环后的求值结果变成 fal 罚。                                如果我们不增加变量count 的值，这个while 循 

                             环将永远执行下去。 

             •           do.. .while循环 

                         类似于 if 语句的情况， ，们 

----------------------- Page 43-----------------------

                                                                                                                                                                                                                                    ‘  

                                                                                                                                                       2.5         循环语句                           25  

                    的求值发生在每次循环开始之前，所以如果循环控制条件的首次求值结果是 false，那 

                         次也不会被执行。 

          在某些场合，我们希望那些包含在循环语句内部的代码至少执行一次。这时， do 循环是我们 

                         。下面是 do 循环的语法: 

           do{  
               statements;  
           1 while   (condition);  

          这与刚才介绍的while 循环非常相似，但有个显而易见的区别:对循环控制条件的求值发生 

                         结束之后。因此，即使循环控制条件的首次求值结果是 false，包含在花括号里的语 

                         被执行一次。 

          我们可以把前一小节里的时1i 1 e 循环改写为如下所示的do. . . whi 1 e 循环: 

                         L & 
                                   44nHnH  
        H - '  n u A L  γ  + v F U n  H ， . 
                Zacw  
                          n+  
                               -- 
           』  白  ，  」 

          U A  E d 
                、 、        ，        φ ， 飞 
                             C    HUHU  
                                nunu  
       H n - u n - ' a 
                           f 
                                          ;< 
                   H U  a  ，  L 品 · 在    L飞 -3+ L  J 

        ， 厦 ‘ 、    - 、                          、 
                                             44 4··  
                                               1 1 
                             C                     ..  
                  ·  ·  - 1 - 』 飞 z                ,  

          这段代码的执行结果与while 循环完全一样: a 1 ert 消息将闪现 10 次g                                                                                                           在循环结束后，变量 

            的值将是 11 。 

          再来看看下面这个变体: 

                   r     t 
                                   44 
   r  M 2 H L -  + · n  T L  r +  r U o  H  H n 
             2Mnu  
            vd}  . 
                               =nvnu                                                                                          •  
           』  自  』 
                                     .  
                                     , 
                 ， 
   H L  v  n  4  τ  L  4            ， ，  +L+L ‘ 、 

                              c·'c  
                                   nHnH  
                                 HUHM  
                                          .,< 
               」  ·  U  H 飞 / + '  牛 飞                                           •  

                    唱                      ，  ， .  ‘  、 
                                             4··  
                       O 
              H  M 嗣  '  吨 
                                                 . 
                    i 
                       」 
                                                 .  
                                                 ,  

          在上面这个do 循环里，循环控制条件的求值结果永远不为true:                                                                                                          变量count 的初始值是 1 ,  

          它在这里永远不会小于 1 。可是，因为do 循环的循环控制条件出现在花括号部分之后，所以 

                          do 循环内部的代码还是执行了一次。也就是说，仍将看到一条alert 消息。这些语句 
          在这个 

     告完毕后，变量count 的值将是2，尽管循环控制条件的求值结果是 fal 罚。 

2.5.2              for 循环 

          用 for 循环来重复执行一些代码也很方便，它类似于whil 号 循环。事实上， for 循环只是刚才 

          的 while 循环的一种变体。如果仔细观察上一小节里的 while 循环的例子，就会发现它们都 
介绍 

可以改写为如下所示的样子: 

          initialize;  
          while  (condition)   {  
              statementsj  
              incrementj  

          而for 循环不过是进一步改写为如下所示的紧凑形式而已: 

          for  (initial  conditionj  test conditionj  alter  condition)  {  
              statementsj  

----------------------- Page 44-----------------------

    26     第 2 幸 JavaScript 语法 

      用 for 循环来重复执行一些代码的好处是循环控制结构更加清晰。与循环有关的所有内容都 

  包含在for 语句的圆括号部分。 

      可以把t上一小节里的例子改写为如下所示的 for 循环: 

       for  (var  count  =  1;  count  <  11;  count++  )  {  
        alert  (count);  

      与循环有关的所有内容都包含在for 语句的圆括号里。现在，当我们把一些代码放在花括号 

  中阔的时候，我们清楚地知道那些代码将被执行 10 次。 

      for 循环最常见的用途之一是对某个数组里的全体元素进行遍历处理。这往往需要用到数组 

  的 array . 1 ength 属性，这个属性可以告诉我们在给定数组里的元素的个数。一定要记住数组下标 

  从 0 而不是 1 开始。下面的例子中，数组有 4 个元素。 count 变量对于数组中每个元素都是从 0 

  开始按 1 递增。数到4 时，测试条件失败，循环终止， 3 是从数组中检索到的最后一个下标。 

       var  beatles  =  Array("John飞"Paul" , "George" , 11  Ringo ") ;  
       for  (var  count  = 0  ;  count  < beatles.length;  count++  )  {  
        alert(beatles[count])j  

      运行这段代码，将看到4 条的ert 消息，它们分别对应着Beatles 乐队的四位成员。 

  2.6     函数                                                              、 

      如果需要多次使用同一段代码，可以把它们封装成一个函数。函数 (function) 就是一组允 

  许在你的代码里随时调用的语句。事实上，每个函数实际上是一个短小的脚本。 

      作为一种良好的编程习惯，应该先对函数做出定义再调用它们。 

      下面是一个简单的示例函数: 

      function  shout()  {  
        var  beatles  =  Array("John" , "Paul" , "George" , "Ringo")j  
        for  (var  count  =  0   ;  count  < beatles.length;  count++  )  {  
          alert(beatles[count]);  

•  
      这个函数里的循环语句将依次弹出对话框来显示 Beat1es 乐队成员的名字。现在，如果想在 

  自己的脚本里执行这一动作，可以随时使用如下的语句来调用这个函数: 

      shoutO;  

      每当需要反复做一件事时，都可以利用函数来避免重复键入大量的相同内容。不过，函数的 

  真正威力体现在，你可以把不同的数据传递给它们，而它们将使用这些数据去完成预定的操作。 

  我们把传递给函数的数据称为参数 (argument) 。 

      定义一个函数的诸法: 

      function  name(σrguments)  {  
        statements;  

----------------------- Page 45-----------------------

                                                                                                                                                                                                                                                     •  

                                                                                                                                                                                        、 

                                                                                                                                                                               2.6          函数                    27  

           JavaScript 提供了许多内建函数，在前面多次出现过的alert 就是一例。这个函数需要我们捷 

                            ，它将弹出一个对话框来显示这个参数的值。 

           在定义函数时，你可以为它声明任意多个参数，只要用逗号把它们分隔开来就行。在函数的 

            '你可以像使用普通变量那样使用它的任何一个参数。 

           下面是一个需要传递两个参数的函数。如果把两个数值传递给这个函数，这个函数将对它们 

                                 •  
                                 •  

            切ction multipl y(numl ,num2)                                   {  
                var  total  =  numl  * nUm2j  
                alert(total) ;  
            }  

           在定义了这个函数的脚本里，我们可以从任意位置去调用这个函数，如下所示: 

           酣是tiply(10， 2)j 

           把数值 1 0 和2 传递给multi p ly() 函数的结果如图2-8 所示。 

                                                                                                                                ，比. •  

                                                                                               lÒ '                                               ,.  
                                                                                                                                ‘  ;'þ 、  •  
                                                                                                         .,  
                                                                                                                                  ' 二   . 
                                                                                                                                    勺'、               .  
                                                                                                                                    ,,    .  
                                                                                                                                      也 
                                                                                                                                        ‘  
                                                                                                     '                 '    =·  •  
                                                                                                                               .  

                                                                                                       ,  
                                                                                           、                                                                                                                        • •  

                                                                        ,                                    、 
                                                                                         •  

                                                                                                     - 

                                                                       、， 

                                                                                                       图 2-8 

           这将产生这样一种视觉效果:屏幕上会立刻弹出一个显示乘法运算结果 (20)  的 al ert 对话 

          如果这个函数能把结果返回给调用这个函数的语句往往会更有用。这很容易做到:函数不仅 

              ( 以参数的形式)接收数据，还能够返回数据。 

           我们完全可以创建一个函数并让它返回一个数值、 一个字符串、一个数组或一个布尔值。这 

重要用到 return 语句: 

           function  mu l tiply(numl ,num2)                               {  

               return  totalj  

          下面这个函数只有一个参数(一个华氏温度值)，它将返回一个数值(同一温度的摄氏温度 

         •  
         •  

           function  convertToCelsius(temp)   {  

               var  result  =  temp  -                    32;  
               result  =  result  /   1.8j  
               return  result;  

           函数的真正价值体现在，我们还可以把它们当做一种数据类型来使用，这意味着可以把一个 

函数的调用结果赋给一个变量: 

                                                                                                                                                                                                   •  

----------------------- Page 46-----------------------

                                                                                                                      •  

                         28           第 2 章 JavaScript 语法 
                                                                                                                                            ,  

                             var  temp_fahrenheit  =  95;  
                             var  temp_ce l sius  =  convertToCelsius(temp_fahrenheit);  
                             alert(temp_celsius) j  

                            把华氏温度值95 转换为摄氏温度值的结果如图 2-9 所示。 

                                                                                                                                       、 

                                                                                                                                  ,  .‘。 
                                                                                                                           、" .  
                                                                                                             •  
                                                                                                                  . .  
                                                                                           事，嚣 
                                                                                                           ‘- .   .  
                                                                                                                                    •  

                                                                                                                            、 

                                                                                                                              •  

                                                                                                                                  、. •  •• •  

                                                                                  同 

                                                                                                              •  

                                                                                                  图 2-9 

                            在这个例子里，变量temp celsius 的值将是35 ，这个数值由 convertToCel sius 函数返回。 

                            你一定想了解应该如何命名变量和函数。在命名变量时，我用下划线来分隔各个单词g                                                                                                                在命 

                    名函数时，我从第二个单词开始把每个单词的第一个字母写成大写形式(也就是所谓的驼峰命名 

                    法)。 我这么做是为了能够一眼看出哪些名字是变量，哪些名字是函数。与变量的情况一样， 

                    JavaScript 语言也不允许函数的名字里包含空格。驼峰命名法可以在不违反这一规定的前提下， 

                    把变量和函数的名字以一种既简单又明确的方式区分开来。 

        、 

                     变量的作用域 

                            前面讲过，作为一种好的编程习惯，在第一次对某个变量赋值时应该用 var 对其做出声明。 

                     当在函数内部使用变量时， 就更应该这么做。 

                            变量既可以是全局的，也可以是局部的。在谈论全局变量和局部变量之间的区别时，我们其 

                    实是在讨论变量的作用域 (scope) 。 

                             全局变量 (global variable)                        可以在脚本中的任何位置被引用。一旦你在某个脚本里声明了一 

,                   个全局变量，就可以从这个脚本中的任何位置一一包括函数内部一一引用它。全局变量的作用域 

                    是整个脚本。 

                            局部变量 (local variable)  只存在于声明它的那个函数的内部， 在那个函数的外部是无言去引 

                    用它的。局部变量的作用域仅限于某个特定的函数。 

                            因此，我们在函数里既可以使用全局变量，也可以使用局部变量。这很有用，但它也会导致 

                    一些问题。 如果在一个函数的内部不小心使用了某个全局变量的名字，即使本意是想使用一个局 

                    部变量， JavaScript 也会认为是在引用那个全局变量。 

                            还好，可以用 var 关键字明确地为函数变量设定作用域。 

                            如果在某个函数中使用了 var，那个变量就将被视为一个局部变量，它只存在于这个函数的 

                    上下文中;反之，如果没有使用 var，                                               那个变量就将被视为一个全局变量，如果脚本里已经存在 

                    一个与之同名的全局变量，这个函数就会改变那个全局变量的值。 

                            我们来看下面这个例子: 

----------------------- Page 47-----------------------

                                                                                                                                                                                                               •  

                                                                                                                                                   2. 7      对象                 29  

          function  square(num)   {  

              total  =  num   * num;  
              return  total;  
           }  
          var  total  ==        50;  
          var  number  ==         square(20);  
           alert(total);  

          这些代码将不可避免地导致全局变量total 的值发生变化，如图 2-10 所示。 

                                                                                                         、 

                                                                               4事由Q 
                                                                                                                          . ..  
                                                                                    ,  

                                                                         '户 
                                                                                                、" 

                                                                                                                            ,  

                                                                                     图 2-10 

         全局变量 total 的值变成了 400。我的本意是让 square( )函数只把它计算出来的平方值返回 

               number，但因为未把这个函数内部的total 变量明确地声明为局部变量，这个函数把名字 

属善是total 的那个全局变量的值也改变了。 

         把这个函数写成如下所示的样子才是正确的: 

          function  square(num)  {  

                                                                                                                                         咽， 

         现在，全局变量total 变得安全了，再怎么调用 squareO 函数也不会影响到它。 

         请记住，函数在行为方面应该像一个自给自足的脚本，在定义一个函数肘，我们一定要把它 

内部的变量全都明确地声明为局部变量。如果你总是在函数里使用 var 关键字来定义变量，就能 

量免任何形式的二义性隐患。 

2_7            对象 

         对象(object)  是一种非常重要的数据类型，但此前我们还没有认真对待它。对象是自包含 

的数据集合，包含在对象里的数据可以通过两种形式访问一-属性 (prope均r)  和方法 (method) :  

         口属性是隶属于某个特定对象的变量: 

         口方法是只有某个特定对象才能调用的函数。 

         对象就是由一些属性和方法组合在一起而构成的一个数据实体。 

         在JavaScript 里，属性和方法都使用"点"语法来访问: 

       υ  u n  ι u  U n  L  叮  . 在 
                                 +Left  
              D         v n  ρ 
                 rLfL       nYLn  uy1J  
                       pm  
                         re rd  
           .  d  t ι  ι  L」  』 
                     ••  
                         忐 
            ， 吁 O 」      ι  v n 
            d 

----------------------- Page 48-----------------------

- 

                 30      第 2 幸 JavaScript 语法 

                    你已经见过如何用mood 和 age 等变量来存放诸如"心情"和"年龄"之类的值。如果它们是 

               某个对象的属性一一这里不妨假设那个对象的名字是Person ，我们就必须使用如下所示的记号来 

               使用它们: 

                    nrnr     du  
                         nHHH ony  
                       pbpb  
                        oo   oe  
                     ee    mo  
                      rr • 
                          •  

                    假如 Person 对象还关联着一些诸如 wal kO和 s l eepO之类的函数，这些函数就是这个对象的 

               方法，而我们必须使用如下所示的记号来访问它们: 

                    Person. walk ()  
                    Person. sleep()  

                   把这些属性和方法全部集合在一起，我们就得到了一个 Person 对象。 

                    为了使用 Person 对象来描述一个特定的人，需要创建一个 Person 对象的实例 (instance) 。实 

               例是对象的具体个体。例如，你和我都是人，都可以用 Person 对象来描述g                                    但你和我是两个不同 

              - 的个体，很可能有着不同的属性(例如，你和我的年龄可能不一样)。因此，你和我对应着两个 

               不同的 Person 对象一一它们虽然都是 Person 对象，但它们是两个不同的实例。 

                   为给定对象创建一个新实例需要使用 new 关键字，如下所示: 

                    var jeremy   = new  Person;  

                   上面这条语句将创建出 Person 对象的一个新实例jeremy。我们就可以像下面这样利用 Pers∞ 

               对象的属性来检索关于jeremy 的信息了: 

                    -TJ-YJ  
                     o 
                         VJVJ  
                           om  
                            go  
                       ee    eo  
                        mm  
                      rr  
                     」        Ju  

                     ρ 
                     』 

                   对象、属性、方法和实例等概念比较抽象，为了让大家对这些概念有一个直观的认识，                                                我在 

               这里用虚构的 Person 对象作为例子。 JavaScript 里并没有 Person 对象。我们可以利用 JavaScript 

               来创建自己的对象一一术语为用户定义对象 (user-defined object) 。这是一个相当高级的主题， 我 

               们眼下还无需对它做进一步讨论。 

                   在电视上的烹饪节目里，只要镜头一转，厨师就可以端出一盘美味的菜肴并向大家介绍说= 

               "这是我刚做好的"0  J avaScript 与这种节目里的主持人颇有几分相似:它提供了一系列预先定义 

               好的对象，这些可以拿来就用的对象称为内建对象 (native object) 。 

               2.7.1    内建对象 

                   你其实已经见过一些内建对象了，数组就是其中一种。当我们使用 new关键字去初始化-个 

               数组时，其实是在创建一个Array 对象的新实例: 

                    var  beatles  =  new  Array()j  

                   当需要了解某个数组有多少个元素时，利用 Array 对象的 l ength 属性来获得这一信息: 

                   beatles.lengthj  

                   Array 对象只是诸多 JavaSαipt 内建对象中的一种。其他例子包括问ath 对象和 Date 对象， 

----------------------- Page 49-----------------------

                                                                                                                                                                                                 ‘  

                                                                                                                                          2.8       IJ 、结            31 

                 供了许多非常有用的方法供人们处理数值和日期值。例如， Math 对象的 round 方法可以 

                 数值舍入为一个与之最接近的整数: 
                                foin  
                          吁 3 r 
                                  q·-- 
    i τ    ·  ·  τ  &  H  n  H  na a U H U H m 
          vva  
              rre                   ·pr  
                 m  ' 川 = ·  n  M= ' 
                             --a  
                                           ， ， ， ， . 、 、 
                                          JU  
                              占 
                    m 
                                     0   nH   nH  
                                       HU      HU  
                                                 m  
                                                    .•  
                              L            ‘ . 
                    川 
                                           、 
                                                    ,  
               、  ，  ，  ，  H n ，  ， ， 飞 
               r      HU  
                       川 

        Date 对象可以用来存储和检索与特定日期和时间有关的信息。在创建Date 对象的新实例时， 

                   解释器将自动地使用当前日期和时间对它进行初始化: 

         var  current_date  =  new  DateOj  

        E陆te 对象提供了 getDay( )、                             getHours() 、          getMonth()等一系列方法，以供人们用来检索与特定 

                 的各种信息。例如， getDay()方法可以告诉我们给定日期是星期几: 

         var  today  =  current_date.getDaY()j  

         在编写JavaScript 脚本时，内建对象可以帮助我们快速、简单地完成许多任务。 

     ,72        宿主对象 

        除了内建对象，还可以在 JavaScript 脚本里使用一些已经预先定义好的其他对象。这些对象 

              JavaScript语言本身而是由它的运行环境提供的。具体到Web 应用，这个环境就是浏览器。 

             器提供的预定义对象被称为宿主对象 (host object) 。 

         宿主对象包括Form、                          Image 和 Element 等。我们可以通过这些对象获得关于网页上表单、图像 

事各种表单元素等信息。 

        本书没有收录这几个宿主对象的例子。另一种宿主对象也能用来获得网页上的任何一个元素 

曲信息，它就是document 对象。在本书的后续内容里，我们将向大家介绍document 对象的许多属 

健和方怯。 

2.8           小结                                          •  

        在本章中，我们介绍了 JavaScript 语言的基础知识。在本书的后续章节中，我们会用到这里 

贪绍的许多术语:语句、变量、数组和函数等。这些概念有的现在还不太容易理解，但我相信你 

在看过它们在脚本里的实际用途后，就能彻底搞清楚了。在后面的学习里，如果需要重温这些术 

畜的含义，随时可以返回到本章来。 

        本章只对"对象"做了一个概念性的介绍。如果你对它的理解还不够全面深入，别着急。我 

'南在下一章进一步探讨document 对象。我们将先向大家介绍一些与这个对象相关联的属性和方 

益，它们都是由 W3C 的标准DOM提供的。 

        在下一章中，我们将介绍基于DOM的基本编程思路，并演示如何使用它的一些功能非常强 

大的方法。 

                         ,  

                                                                                                                                                                                            •  

                                                                                              •  

----------------------- Page 50-----------------------

 •  

        fl  
                    DOM  

   终于要与DOM面对面了。本章将介绍DOM，带领大家透过DOM去看世界。 

3.1  文档: DOM 中的 "D" 

   如果没有document (文档)， DOM也就无从谈起。当创建了一个网页并把它加载到Web 浏览 

器中肘， DOM就在幕后悄然而生。它把你编写的网页文档转换为一个文档对象。 

   在人类语言中，"对象"这个词的含义往往不那么明确，它几乎可以用来称呼任何一种东西。 

但在程序设计语言中，"对象"这个词的含义非常明确。 

3.2  对象:DOM 中的 "0"            •  

   在上一章的末尾，我们向大家展示了几个JavaScript 对象的例子。你应该还记得，"对象"是 

一种自足的数据集合。与某个特定对象相关联的变量被称为这个对象的属性;只能通过某个特定 

对象去调用的函数被称为这个对象的方法。 

   JavaScript语言里的对象可以分为三种类型。 

   口用户定义对象 (user-defined object) :由程序员自行创建的对象。本书不讨论这种对象。 
   口内建对象 (native object) :内建在JavaScript 语言里的对象，如Array、 Math 和 Date 等。 

   口宿主对象 (host 0战ject) :由浏览器提供的对象。 

   即使是在JavaScript 的最初版本里，对编写脚本来说非常重要的一些宿主对象就已经可用了， 

它们当中最基础的对象是川ndow 对象。 

   window 对象对应着浏览器窗口本身，这个对象的属性和方法通常统称为BOM (浏览器对象模 

型) ，但我觉得称为 Window Object Model   (窗口对象模型)更为贴切。 BOM提供了川ndow.open 

和川ndow.blur、等方法，这些方法某种程度上要为到处被滥用的各种弹出窗口和下拉菜单负责。 

----------------------- Page 51-----------------------

                                                                                                          、 

                                                       3.3   模型:    DOM 中的 "M"             33  

辈怪JavaScript 会有一个不好的名声! 

     值得庆幸的是，我们不需要与BOM打太多的交道，而是把注意力集中在浏览器窗口内的网 

页内容上。 document 对象的主要功能就是处理网页内容。在本书的后续内容里，我们几乎只讨论 

缸ument 对象的属性和方法。 

     现在，我们己经对DOM 中的字母 "D" (document，文档)和字母 "0" ( 0均ect，对象)做 

了解释，那么字母 "M" 又代表着什么呢? 

3.3     模型:DOM 中的 "M" 

     DOM 中的 "M" 代表着 "Model" (模型) ，但说它代表着 "Map" (地图) 也未尝不可。模 

型也好， 地图也罢，它们的含义都是某种事物的表现形式。就像一个模型火车代表着一列真正的 

失车、一张城市街道图代表着一个实际存在的城市那样， DOM 代表着加载到浏览器窗口的当前 

嗣页。浏览器提供了网页的地图(或者说模型)，而我们可以通过JavaScript 去读取这张地图。 

     既然是地图，就必须有诸如方向、等高线和比例尺之类的图例。要想看'懂和使用地图，就必 

须知道这些图例的含义和用途，这个道理同样适用于 DOM。要想从 DOM 获得信息，必须先把 

各种表示和描述文档的"图例" 弄明白。 

     DOM把一份文档表示为一棵树(这里所说的"树"是数学意义上的概念)，这是我们理僻和 

运用这一模型的关键。更具体地说， DOM把文档表示为一棵家谱树-。 

     家谱树本身又是一种模型。家i普树的典型用法是表示一个人类家族的谱系，并使用 p缸ent 

 父)、 child  (子)、 sibling  (兄弟)等记号来表明家族成员之间的关系。家i普树可以把一些相当 

复杂的关系简明地表示出来:一位特定的家族成员既是某些成员的父辈，又是另一位成员的子辈， 

同时还是另一位成员的兄弟。 

    家i普树模型非常适合用来表示一份用(X)HTh在L 语言编写出来的文档。 

     请看图 3- 1 中这份非常基本的网页，它的内容是一份购物清单。 

                      0  00                跪"阴吨U$t                     ξ~  

                      ~.命重言辞 余{0" ..                            '; 建) (  .  

                      What 'tobuy  

                      Don't 1brge幸部bny tbi !' S阳ff. 

                         -A胁。f胁ans 
                         ., Cb悦晦 
                         ·必mk 

                     1-甜(OIÞ( 0 '''011_ 稽'稽'钳制饵"笛"创~。刻比例"仰~mulU C)I'""""'W>>黯精精民所鹦制附侨-铲"侧筒，略将嗨份佛仰酣钊角-，悟"鸭"何-锦常惕。忡帽"制-…"僧"…….. 睡衔'仰-盼确剑-响-饵-例 
                     。Øl1也                                              ' ，4 

                                                                        ,  

                                            图子1 

----------------------- Page 52-----------------------

   34       第 3 章 DOM 

                                                                                              •  

      < ! DOCTYPE  html>  
      <html  l ang= "en">  
        <head>  
          <meta  charset="utf-8"  1>  
          <title>Shopping  list< /title>  
        </head>  
        <body>  
          <hl>What  to  buy</hl>  
          <p  title="a  gentle  reminder">Don't  forget  to  buy  this  stuff.</p>  
          <ul  id="purchases">  
             <li>A  tin  of  beans</li>  
             <li  class="sale ">Cheese</li>  
             <li  class="sale  important">Milk</li>  
          </ul>  
        </body>  
      </html>  

      这份文档可以用图 3-2 中的模型来表示。 

                                              html  

                                                    图 3-2 

     现在我们来分析一下这个网页的结构，了解它的构成，看看它为什么那么适合用前面提到的 

模型表示。 DOCTYPE 之后，一个打开了的<html>标签标识整个文档的开始，这个网页里的所有: 

其他元素都包含在这个元素里， 这表示它至少是一个父亲( parent) 。又因为所有其他的元素都 

包含在其内部，所以这个<html>标签既没有父亲，也没有兄弟。如果这是一棵真正的树，这个<html> 

标签就是树根。 

      根元素是 html 。不管从哪个角度看， html 都代表整个文挡。 

     接下来深入一层，我们发现有<head>和<body>两个分支。它们位于同一层次且互不包含，所 

以它们是兄弟关系。它们有着共同的父元素<htm怜，但又各有各的子元素，所以它们本身又是其 

他一些元素的父元素。 

     <head>元素有两个子元素: <meta>和<title> (这两个元素是兄弟关系)0                                        <body>元素有三个子 

元素:     〈hb、    <p>和<ul> (这三个元素是兄弟关系)。继续深入下去，我们发现<ul>也是一个父元 

----------------------- Page 53-----------------------

                                                                  3.4  节点      35  

 素，它有三个子元素，它们都是<1 i>元素，有一些 c1ass 属性。 

     利用这种简单的家谱关系记号，我们可以把各元素之间的关系简明清晰地表达出来。例如， 

 咛11>和<ul>之间是什么关系?答案是它们是兄弟关系。那么<body>和<ul>之间又是什么关系? 

 也dy>是<u1>的父元素， <u1>是<body>的一个子元素。 

     如果你能把一个文档的各种元素想象成一棵家谱树，我们就可以用同样的术语描述 DOM。 

 不过，与使用"家谱树"这个术语相比，把文裆称为"节点树"更准确。 

 3.4   节点 

     节点 (node) 这个词是个网络术语，它表示网络中的一个连接点。一个网络就是由一些节点 

 告成的集合。 

    在现实世界里，一切事物都由原子构成。原子是现实世界的节点。但原子本身还可以进一步 

 分解为更细小的亚原子微粒。这些亚原子微粒同样也被当成是节点。 

    DOM 也是同样的情况。文裆是由节点构成的集合，只不过此时的节点是文档树上的树枝和 

树叶而已。 

    在DOM里有许多不同类型的节点。就像原子包含着亚原子微粒那样，也有很多类型的DQM 

节点包含着其他类型的节点。接下来我们先看看其中的三种:元素节点、文本节点和属性节 

 占 
                                ,  

3.4.1   元素节点 

    DOM的原子是元素节点(element node) 。                                                             ,  

    在描述刚才那份"购物清单"文档时，我们使用了诸如<body>、                        <p>和<ul>之类的元素。如果 

盘E Web 上的文档比做一座大厦，元素就是建造这座大厦的砖块，这些元素在文档中的布局形成 

了文档的结构。 

    标签的名字就是元素的名字。文本段落元素的名字是 "p" ，无序清单元素的名字是 "u1" ,  

到表项元素的名字是 "li" 。 

    元素可以包含其他的元素。在我们的"购物清单"文档里，所有的列表项元素都包含在一个 

无序清单元素的内部。事实上，没有被包含在其他元素里的唯一元素是<htm1>元素，它是我们的 

苦点树的根元素。 

3_4~ 2  文本节点 

    元素节点只是节点类型的一种。如果一份文档完全由一些空白元素构成，它将有一个结构， 

缸这份文档本身将不会包含什么内容。在内容为玉的互联网上，绝大多数内容都是由文本提供的。 

    在"购物清单"例子里， <p>元素包含着文本 "Don't forget to buy 吐1is s阳在."。它是一个文本 

苦点 (text node)  。 

    在XHTML文档里，文本节点总是被包含在元素节点的内部。但并非所有的元素节点都包含 

                                                                         '巳 

----------------------- Page 54-----------------------

    36    第 3 幸 DOM 

   有文本节点。在"购物清单"文档里， <u1>元素没有直接包含任何文本节点，它包含着其他的元 

   素节点(一些<li>元素) ，后者包含着文本节点。 

   3.4.3  属性节点 

      属性结点用来对元素做出更具体的描述。例如，几乎所有的元素都有一个tit1e 属性，而我 

   们可以利用这个属性对包含在元素里的东西做出准确的描述: 

      在DOM 中， tit1e="a gent1e reminder"是一个属性节 
                                                           元素节点 

   点 (attribute node)  ，如图 3-3 所示。因为属性总是被放在 

  起始标签里，所以属性节点总是被包含在元素节点中。并 

  非所有的元素都包含着属性，但所有的属性都被元素包含。 

      在前面的"购物清单"示例文档里，可以清楚地看到那 

  个无序清单元素 (<ul>) 有个 id 属性。有些清单元素 (<li>) 

  有 class 属性。如果曾经用过 CSS，你对 id 和 class 之类 

  的属性应该不会感到陌生。不过，为了照顾那些对 CSS 还 

  不太熟悉的读者，我们下面将简要地重温几个最基本的 CSS 
                                                    属性节点 
                                                                   文本节点 
  概念。 

                                                            图 3-3 

   3.4.4  CSS  

      DOM并不是与网页结构打交道的唯一技术。我们还可以通过 CSS (层叠样式表)告诉浏览 

  器应该如何显示一份文档的内容。 

      类似JavaScript 脚本，对样式的声明既可以嵌在文档的<head非R分 (<styl e>:标签之间) ，也可 

  以放在另外一个样式表文件里(参见第4 章)0 CSS 声明元素样式的语法与JavaScript 函数的定义 

  语怯很相似: 

      selector  {  
       property:   value;  

      在样式声明里，我们可以定义浏览器在显示元素时使用的颜色、字体和字号，如下所示: 

       color:  yellowj  

       font-size:  1.2emj  

      继承 (inheritance)  是 CSS 技术中的一项强大功能。类似于 DOM，         CSS 也把文档的内容视 

  为一棵节点树。节点树上的各个元素将继承其父元素的样式属性。 

      例如，如果我们为 body 元素定义了一些颜色或字体，包含在 body 元素里的所有元素都将自 

  动获得那些样式: 

~  

----------------------- Page 55-----------------------

                                                                                                                                •  

                                                                                           3 .4   节点          37  

      body   {  
        color:  white;  
        background -color: . black;  

      这些颜色将不仅作用于那些直接包含在<body>标签里的内容，还将作用于嵌套在:                                                        body 元素内 

部的所有元素。 

      图 3-4 是把刚才定义的样式应用在"购物清单"示例文档上后得到的网页显示效果。 

                                                          … … 以 

                                                     图 3-4 
                                                                                                               ,  

     在某些场合，当把样式应用于一份文档时，我们其实只想让那些样式作用于某个特定的元素。 

例如，我们只想让某一段文本变成某种特殊的颜色和字体，                                             但不想让其他段落受到影响。为了获 

善如此精细的控制，需要在文档里插入一些能够把这段文本与其他段落区别开来的特殊标志。 

     为了把某一个或某几个元素与其他元素区别开来，需要使用 class 属性或 id 属性。 

      1. cl ass属性 

     你可以在所有的元素上任意应用 class 属'性: 

      <p   class="special">This  paragraph  has  the  special  class</p>  
     <h2   class=" special">So  does  this  headline</h2>  

     在样式表里，可以像下面这样为 class 属性值相同的所有元素定义同一种样式: 

     还可以像下面这样利用-class 属性为一种特定类型的元素定义一种特定的样式: 

       text -transform:  upp ercase;  
                                                                                                                       •  

     2.  id属性 

     地属性的用途是给网页里的某个元素加上一个独一无二的标识符，如下所示: 

     <ul  id="purchases">  

     在样式表里，可以像下面这样为有特定 id 属性值的元素定义一种独享的样式: 

     #purchases  {  
       border:   1pX  solid  white;  

----------------------- Page 56-----------------------

                    38         第 3 幸 DOM 

                           background-color:  #333;  
                          color:  #ccc;  
                           padding:   lem;  

                       尽管 id 本身只能使用一次，样式表还是可以利用 id 属性为包含在该特定元素里的其他元素定 

                 义样式。 

                        #purchases  li {  
                          font-weight :  bold;  

                       图 3-5 是把刚才利用 id 属性定义的样式应用在"购物清单"示例文档上而得到的网页显示效果。 

                                                                                       1浮.f;   吹 i v. 

                                                                                              一… 
                                                                             企I'if   I1  l'  I  I  11   IIm  ll' _':"~l<!~m …￥jq 变 

.  

                                                                                                     : '  ..., •  

                                                                                圈 3-5 

                       id 属性就像是一个挂钩，它一头连着文档里的某个元素，另一头连着 CSS 样式表里的某个 

                 样式。 DOM也可以使用这种挂钩。 

                 3.4.5       获取元素 
                                                                                   •  

                       有3 种DOM方法可获取元素节点，分别是通过元素D、通过标签名字和通过类名字来获取。 

                        1. getElementByld  

                       DOM提供了一个名为 getElementByld 的方法，这个方站将返回一个与那个有着给定 id 属性 

                 值的元素节点对应的对象。请注意，J avaScript语言区分字母大小写，所以在写出"getElementBy Id"  

                 时千万不要把大小写弄错了。如果把它错写成 "GetElementById" 或 "getElementbyid" ，你都得 

                 不到正确的结果。 

                       它是document 对象特有的函数。在脚本代码里，函数名的后面必须跟有一对圆括号，这对圆 

                 括号包含着函数的参数。getElementByld 方法只有一个参数:你想获得的那个元素的 id 属性的值， 

                 这个 id 值必须放在单引号或双引号里。 

                        document.getElementByld(id)  

                       下面是一个例子: 
          .  
                        document.get ElementByld("purchases")  

                                           •  

----------------------- Page 57-----------------------

                                                                                                                                                                              ‘  

                                                                                                                            3 .4     节点              39  

        这个调用将返回一个对象，这个对象对应着document 对象里的一个独一无二的元素，那个元 

 素的HTMLid 属性值是 purchases。你可以用 typeof 操作符来验证这一点。 typeof 操作符可以告 

 诉我们它的操作数是一个字符串、数值、函数、布尔值还是对象。 

        下面是把一些JavaScript 语句插入到前面给出的"购物清单"文档之后得到的一份代码清单， 

 新增的代码(黑体字部分)出现在</bod沪结束标签之前。顺便说一句，我本人并不赞成把JavaScript 

 代码直接嵌入文档，但这确实是一种简便快捷的测试手段: 

        <lDOCTYPE   htm l>  
        <html  lang="en">  
           <head>  
              <meta  charset="utf -8"           1>  
              <title>Shopping  list</title>  
           </head>  
           <body>  
              <hl>What  to  buy</hl>  
              <p  title="a  gent1e  reminder">Don't  forget  to  buy  this  stuff .</p>  
              <ul  id="purchases">  
                 <li>A  tin  of  beans</li>                                                                                                            ‘  
                 <li   class="sale">Cheese</li>  
                 <li  class="sale  important">Milk</li>  
              </u l>  
              <script>  
                 alert(typeof  document.getEler阳ltById (" purchases"));                                                                                ,  
              </script>  
           </body>  
        </htm l>  

        把上面这些代码保存为一个 XHTML 文件。当在 Web 浏览器里加载这个 XHTML 文件，会 

弹出一个如图 3-6 所示的 alert 对话框，它向你们报告 document.getElementByld ("purchases" ) 的 

类型一一它是一个对象。 

                                                                                                           Q  

                                                                      曲~t1 
                                                                                     ·、 

                                                                                   '一骂， 
                                                                         ,  
                                                                                 ~- 
                                                                              -‘. . ..  

                                                                         图 3-6 

        事实上，文档中的每一个元素都是一个对象。利用 DOM提供的方站能得到任何一个对象。 

一般来说，用不着为文档里的每一个元素都定义一个独一无二的 id 值，那也太小题大做了。DOM 

量供了另一个方法来获取那些没有 id 属性的对象。 

        2.  getElementsByTagName  

       getElementsByTagName 方怯返回一个对象数组，每个对象分别对应着文档里有着给定标签的一 

                                                              •  

----------------------- Page 58-----------------------

              40     第 3 章 DOM 

  "         个元素。类似于getElementByld，这个方法也是只有一个参数的函数，它的参数是标签的名字: 

                element.getElementsByTagName(tag)  

                它与 getElementByld 方法有许多相似之处，但它返回的是一个数组，你在编写脚本时千万注 

            意不要把这两个方怯弄混了。 

                下面是一个例子: 

                document.get ElementsByTagName("li")  

                这个调用将返回一个对象数组，每个对象分别对应着document 对象中的一个列表项元素。与 

            任何其他的数组一样，我们可以利用 length 属性查出这个数组里的元素个数。 

                首先，在上一小节给出的刀ITML 示例文档里把<script>标签中的 alert 语句替换为下面这 

            条语句: 

                alert(document.getElementsByTagName("li").length);  

                你会看到这份示例文档里的列表项元素的个数: 3。这个数组里的每个元素都是一个对象。 

            可以通过利用一个循环语句和typeof 操作符去遍历这个数组来验证这一点。例如，你可以试试下 

            面这个for 循环: 

                for  (var  i=Oj   i   < document.get ElementsByTagName("li").lengthj  i++)   {  
                  alert(typeof  document.getElementsByTagName("li")[i])j  

                请注意，即使在整个文档里这个标签只有一个元素， getElementsByTagName 也返回一个数组。 

  •  
            此时，那个数组的长度是 1 。 

                你或许已经开始觉得用键盘反复敲入 document.getElementsByTagName{lli")是件很麻烦的事 

            情，而这些长长的字符串会让代码变得越来越难以阅读。有个简单的办怯可以减少不必要的打字 

            量并改善代码的可读性:只要把document .getElementsByTagName("1i")赋值给一个变量即可。 

                请把<script>标签中的 alert 语句替换为下面这些语句: 

                var  items  =  document.getElementsByTagName( "li")j  •  
                for  (var  i=Oj   i   < items.length;  i++)   {  
                  alert(typeof  items[i])j  

                现在，你将看到三个ale内对话框，显示的消息都是 "object" 。 

                getElementsByTagName 允许把一个通配符作为它的参数，而这意味着文档里的每个元素都将在 

•           这个函数所返回的数组里占有一席之地。通配符(星号字符"*")必须放在引号里，这是为了让 

            通配符与乘怯操作符有所区别。如果你想知道某份文档里总共有多少个元素节点，像下面这样使 

            用通配符即可: 

                alert(document.getElementsByTagName("*") . length)j  

                还可以把getElementByld 和getElementsByTagName 结合起来运用。例如，刚才给出的几个例子 

            都是通过document 对象调用 getElementsByTagName 的，如果只想知道 id 属性值是purchase 的元素 

            包含着多少个列表项，必须通过一个更具体的对象去调用这个方法，如下所示: 

----------------------- Page 59-----------------------

                                                                                                             •  

                                                                              3.4  节点        41  

      var  shopping  =  document.getElementByld("purchases ") ;  
      var  items  =  shopping.getElementsByTagName(" 牢")j 

     在这两条语句执行完毕后， items 数组将只包含 id 属性值是purchase 的无序清单里的元素。 

 具体到这个例子， items 数组的长度刚好与这份文档里的列表项元素的总数相等: 

      alert  (items.length)j  

     如果还需要更多的证据，下面这些语句将证明 i tems 数组里的每个值确实是一个对象: 

      for  (var  i=Oj   i  < items.lengthj  i++)   {  
        alert(typeof  items[i])j  
      }  

     3.  getElementsByC lassName  

     HT阻5DOM (问://www.whatwg.orglspecs/web叩ps/current响。而)中新增了一个令人期待 

 已久的方怯: getElementsByClassName。这个方怯让我们能够通过class 属性中的类名来访问元素。 

 不过， 由于这个方怯还比较新，某些DOM实现里可能还没有，因此在使用的时候要当心。下面 

 去们先来看一看这个方法能帮我们做什么，然后再讨论怎么可靠地使用该方烛。 

     与 getElementsByTagName 方法类似， getElementsByClassName 也只接受一个参数，就是类名: 

     getElementsByClassName(class)  

     这个方法的返回值也与 getElementsByTagName 类似，都是一个具有相同类名的元素的数组。 

下面这行代码返回的就是一个数组，其中包含类名为" sale"的所有元素: 

     document.getElementsByClassName("sale")  

     使用这个方法还可以查找那些带有多个类名的元素。要指定多个类名，只要在字符串参数中 

 用空格分隔类名即可。例如，在<script>.标签中添加下面这行 alert 代码: 

     alert(document.getElementsByClassName("important  sale").length)j  

     你会看到警告框中显示 1 ，表示只有一个元素匹配，因为只有一个元素同时带有" i mportant"  

和.sale"类名。住意，即使在元素的 class 属性中，类名的顺序是" sale import"而非参数中指定的 

古丰()rt sa 1 e" ，也照样会匹配该元素。不仅类名的实际顺序不重要，就算元素还带有更多类名也 

量有关系。 

     与使用getElementsByTagName--样，也可以组合使用getElementsByClassName和getElementByld。 

如果你想知道在 id 为"purchases"的元素中有多少类名包含"sale"列表项，可以先找到那个特定的 

哥象，然后再调用 getEl ementsByCl assName: 

     var  shopping  =  document.getElementByld("purchases")j  
     var  sales  =  shopping.getElementsByClassName("sale");  

     这样， sa 1 es 数组中包含的就只是位于"purchases"列表中的带有"sale"类的元素。运行下面这 

街代码，就会看到 sales 数组中包含两项: 

     alert  (sales.length)j  

     这个 getElementsByClassName 方炫非常有用，但只有较新的浏览器才支持它。为了弥补这一 

不足， DOM脚本程序员需要使用已有的DOM方法来实现自己的getElementsByClassName，有点像 

----------------------- Page 60-----------------------

   42  
           第 3 章 DOM 
                                                            •  

是成人礼似的。而多数情况下，他们的实现过程都与下面这个 getEl ementsByClassName 大致相似， 

 这个函数能适用于新老浏览器: 

      f un ction  getElementsByClassName(node , classname)  {  
        if  (node . getElementsByClassName)   {  
          //使用现有方法 
          return  node.getElementsByClassName(clas sname);  
        } else  {  
          var  resu lts  =  new  Array();  
          var  elems  =  node.getElementsByTagName("牢") ; 
          for  (var  i=O;   i<elems.lengthj  i++)   {  
            if (elems[il.className.indexOf(classnar陀) !=  -1)  {  
              results[results.length]  = elems[i]j  

          }  
          return  resultsj  

     这个 getElementsByClassName 函数接受两个参数。第一个node 表示 DOM树中的搜索起点， 

第二个classname就是要搜索的类名了。如果传入节点上已经存在了适当的getElementsByClassName 

 函数，那么这个新函数就直接返回相应的节点列表。如果 getElementsByClassName 函数不存在， 

这个新函数就会循环遍历所有标签，查找带有相应类名的元素。(这个例子不适用于多个类名。) 

如果使用这个函数来模拟前面取得购物列表的操作，就可以这样写: 

     var  shopping  = document.getElementByld("purchases")j  
     var  sal es  = getElementsByClassName(shopping ,  "sale")j  

     当然，搜索匹配的DOM元素的方法有很多，但真正高效的却不多，有兴趣的读者可以参考 

Robert Nyman的文章The Ultimate getElementsByClassName (http://robertnyman.coml2008/05/27 /the- 
ultimate-getelementsbyclassname-anno-2008 )。 

     第5 章将继续讨论类似的支持性问题，以及如何解决这些问题。第7 章将更详细地探讨DOM 

操作方法。 

3.4.6     盘点知识点 

     你一定已经厌倦了看那么多遍显示着单词 "object" 的 al ert 对话框。你一定已经明白:文档 

中的每个元素节点都是一个对象。不仅如此，这些对象中的每一个还天生具有一系列非常有用的 

方法，这要归功于 DOM。利用这些预先定义好的方法，我们不仅可以检索出文档里任何一个对 

象的信息，甚至还可以改变元素的属性。 

     下面是对本章此前学习内容的一个简要总结。 

     口 一份文档就是一棵节点树。 

     口节点分为不同的类型:元素节点、属性节点和文本节点等。 

     口 getElementByld 将返回一个对象，该对象对应着文档里的一个特定的元素节点。 

     口 getElementsByTagName 和 getElementByclassName 将返回一个对象数组，它们分别对应着文 

        档里的一组特定的元素节点。 

                                                                                             •  

----------------------- Page 61-----------------------

                                                                                                                    ‘  

         .  

                                                                     3.5   获取和设置属性                 43  

      口每个节点都是一个对象。 

      接下来介绍节点对象的属性和方法。 

 3.5     获取和设置属性 

      至此，我们已经介绍了3 种获取特定元素的方法:分别是getElementByld， getElementsByTagName 

 和getElementByClassName。得到需要的元素以后，我们就可以设法获取它的各个属性。getAttríbute 

 方益就是用来做这件事的。相应地， setAttríbute 方法则可以更改属性节点的值。 

 3.5.1    getAttribute  

     getAttríbute 是一个函数。它只有一个参数一一你打算查询的属性的名字: 

      object.getAttribute(αttribute)  

      与此前我们介绍过的那些方法不同， getAttr寸bute 方法不属于 document 对象，所以不能通过 

 缸::uænt 对象调用。它只能通过元素节点对象调用。例如，可以与getElementsByTagName 方法合用， 

 获取每个<p>元素的títle 属性，如下所示: 

      var  paras  = document.getElementsByTagName(lp")j                                             •  
      for  (var  i=Oj   i  < paras .lengthj  i++  )  {  
        alert(paras[i].getAttribute(ltitle"))j               •  

     把上面这段代码放到前面给出的"购物清单"文件的末尾，然后在 Web 浏览器里重新加载 

这个页面，屏幕上将弹出一个显示着文本消息 "a gentle reminder" 的 alert 对话框。 

     在"购物清单"文件里只有一个<p>元素，并且它有title 属性。假如这份文档有更多个<p> 

元素，并且它们没有títle 属性，则 getAttríbute ( "títl e" ) 方法会返回 null 值。在JavaScript里， 

肥11 的含义是"没有值"。把下面代码添加到"购物清单"文件中的现有<p>标签之后: 

     <p>This  is just  a  test</p>  

     重新加载这个页面。这一次，你将看到两个al ert 对话框，而第二个对话框将是一片空白或 

者是只显示着单词 "nu11" ，这取决于你使用是哪种Web 浏览器。 

     我们可以修改脚本，让它只在títle 属性有值时才弹出消息。我们将增加一条 if 语句来检查 

g;tAttribu恒的返回值是不是 null 。趁着这个机会，我们顺便增加几个变量以提高脚本的可读性。 

     var  paras  = document.get ElementsByTagName("p");  
     for  (var  i=Oj   i<  paras.lengthj  i++)   {  
       var  title_text  = paras[i].getAttribute(气itle"); 
       if  (title_text  1= null)   {  
         alert(title_text);  

     现在重新加载这个页面，你会看到一个显示着 "agentleremndef 消息的 alert 对话框，如 

图 3-7 所示。 

----------------------- Page 62-----------------------

                                    44                 第 3 章 DOM 

                                                                                                                            、 

                                                                                                                            …  

                                                                                                                                     : ,;a ~ri如~mm.4_er 

                                                                                                                                      、合‘ 

                                                                                                                                            ·、(，  "、~ ~，  
                                                                                                                                               ..  

                                                                                                                                          ，、， 

4  

                                                                                                                                           图 3-7 

                                          我们甚至可以把这段代码缩得更短一些。当检查某项数据是否是 null 值时，我们其实是在 

                              检查它是否存在。这种检查可以简化为直接把被检查的数据用作 if 语句的条件。 i f  (somethi ng)  
                              与 if (something  != null)完全等价，但前者显然更为简明。此时，如果 something 存在，则 if语 

                              句的条件将为真:如果something 不存在，则 if语句的条件将为假。 

                                         具体到这个例子，只要我们把 1f(tt16-text!=nu11)替换为 if (title_text) ，我们就可以 

                              得到更简明的代码。此外，为了进一步增加代码的可读性，我们还可以趁此机会把alert 语句与 

                              if 语句写在同一行上，这可以让它们更接近于我们日常生活中的英语句子: 

                                          var  paras  =  document.getElementsByTagName("p");  
                                          for  (var  i=Oj   i<  paras.lengthj  i++)   {  
                                              var  title_text  =  paras[i].getAttribute("tit1e");  
                                               if  (title_text)  alert(title_text);  
                                          }  

                              3.5.2                 setAttribute  

                                         此前介绍的所有方法都是用来获取信息。 setAttribute( )有点不同:它允许我们对属性节点的 

                              值做出修改。与getAttribute 一样， setAttri bute 也只能用于元素节点: 

                                          object. setAttribute(attribute , value)  

                                         在下面的例子里，第一条语句得到址是 purchase 的元素，第二条语句把这个元素的 title 

                              属性值设置为 a  list of goods:  

                                         var  shopping  =  document.get ElementByld("purchases");  
                                          shopping.setAttribute("title" ,"a  list 'of  goods")j  

                                         我们可以利用 getAttribute 来证明这个元素的 title 属性值确实发生了变化: 

                                                   H H ·                   」                             、                   飞 ' '                         、 
                                                               --nysnr                                                             "rT·  
                                                                                                 z r  牛 E r         牛                      H n t 
                                                                                            &L-1"-l                           JU-- 
                                                                                                                        nD"-1"  
                                   ι & 4 y v 1 n u a L + d t                                                              i T                            ' '  1 
                                               zeoe  
                                                        nUCJnHP2  
                                                                 nHnveny  
                                                             ny0·o  
                                                n  n i v  n  - - b o     b u n  L C f  +  r m  H b n 』  白     m a  H  n J V U 
                                                                                                 nKMUU----HU  
                                                                                                            e+Lpt  
                                                                                                                                           f    「 
                                                                                   UAURHMAH                                          ny                       . 
                                                                                                                                        uun5   s-p  
                                                                                                                                                     e-- 
                                                                                                                                                   p3"  
                                                                                             "   "   "  i 
                                                                                                                                          ro  
                                                            b w  n  r  b  σ  u        e  i  τ  e  L 
                                                                        - 
                                                                                                                    L 
                                                                                                                                       3   p  d 
                                                                        - 
                                                                                       」 
                                                                                    L  +  D  -  -            品 川 」                         』 
                                                                                                                                                              •  
                                                                                                                                                              ,  
                                      A γ  、 ·  「 v ‘ ，  n ，  忐  咱· ·  . γ  、  ‘  ， ， 牛 L &     L +  .  "  - · 1  - 电   ， 、 、 
                                                                        nkztnku  
                                                                                                                 i  E  」 白 
                                                                      nHAunnH  
                                                                                                                         J B 
                                     2  r d 』                     中   t  +  D  L  L牛 · τ · 」 牛  牛 」  血 s 牛 r  L e 飞  +  M  2  ρ L  4 1 J E  J 丰 ,., O 』 

                                       4  1 、 H         n  巳 L ­ · L ·   L 」 。 品 L + L   r 飞 U  队 L +  L     、    咱      、 、 L            u  n  u  n 

                                         a                                             L              飞          ­ · E J E J B 
                                                                                                               .•  
                                                                                                                     』 

                                                                                                                                                                                、 

                                        加载页面后将弹出两个 alert 对话框:第一个 alert 对话框出现在setAttr才bute 被调用之前， 

                              它将是一片空白或显示单词 "null";  第二个出现在设置 title 属性值之后，它将显示 "a list  of  

----------------------- Page 63-----------------------

                                                                                                                  ,  

                                                                                 3.6   小结        45  

pods" 消息。 

     在上例中，我们设置了一个节点的title 属性，这个属性原先并不存在。这表明 setAttribute 

实际完成了两项操作:先创建这个属性，然后设置它的值。如果 setAttr寸 bute 用在一个本身就有 

这个属性的元素节点上，这个属性的值就会被覆盖掉。 

     在"购物清单"示例文档里， <p>元素已经有了一个 title 属性，这个属性的值是 a gentle  

阳i nder。可以用 setAttribute 来改变它的值: 

     var  paras  =  document .getElementsByTagName("p");  
     for  (var  i=Oj   i<  paras.lengthj  i++)   {  
       var  title_text  = paras[i].getAttribute( 气itle")j 
        if (title_text )  {  
         pàras[iT.setÃttribute("气title                                                   ‘  
         alert(paras[i].getAttribute("吨title"丁)); 

     上面这段代码将先从文档里获取全部带有title 属性的<p>元素，然后把它们的们tle 属性值 

丢在修改为 brand new  title text。对"购物清单"文件来说，属性值a gentle  reminder 会被覆盖。 

     这里有一个非常值得关注的细节:通过 setAttribute 对文档做出修改后，在通过浏览器的 

úew source  (查看源代码)选项去查看文档的源代码时看到的仍将是改变前的属性值，也就是说， 

~tAttri bute 做出的修改不会反映在文档本身的源代码里。这种"表里不一"的现象源自 DOM 

的工作模式:先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。                                                         这正是 

DOM的真正威力:对页面内容进行刷新却不需要在浏览器里刷新页面。 

3.6     小结 

     本章介绍了 DOM提供的五个方法: 

     口 getElementByld 

     口 getElementsByTagName 

     口 getElementByClassName 

     口 getAttribute 

     口 setAttribute 

     这五个方法是将要编写的许多 DOM脚本的基石。 

     DOM还提供了许多其他的属性和方法， 如 nodeNarne、                          nodeValue、  childNodes、  nextSibling 和 

oarentNode 等，这里仅举这么几个例子。在后面需要的时候我会详细介绍它们。我现在就提到它 

们主要是为了吊吊大家的胃口。 

     本章内容偏重于理论。在看过那么多的 alert 对话框之后，相信大家都迫不及待地想通过一 

些其他东西进一步了解和测试DOM，而我也正想通过一个案例来进一步展示DOM的强大威力。 

在下一章中，我将带领大家利用本章介绍的DOM方法去创建一个基于JavaScript 的图片库。 

                                                                                                 •  

                                                                                                     •  

----------------------- Page 64-----------------------

                                                                                                              、 

                                                                                       •  

                               ,  

                       现在，是时候让 DOM去做些事了。在这一章中，我将带领大家用 JavaScript 和 DOM去建 

                  立一个图片库。 

                       把图片发布到网上的办怯很多。你可以简单地把所有的图片都放到一个网页里。不过，如果 

                  打算发布的图片比较多，这个页面很快就会很快变得过于庞大。要知道，虽然网页标记代码没有 

                  多大，但加上那些图片后用户要下载的数据量就相当可观了。我们必须面对这样一个现实:没有 

                  人愿意等待很长很长的时间去下载一个网页。 

                       因此，为每张图片分别创建一个网页的解决方案值得考虑。这样你的图片库将不再是一个体 

                  积庞大、难以下载的网页，而变成了许多个尺寸合理、便于下载和浏览的页面。不过，这一解决 

                                                                  一个网页需要花费很多很多的时间z                     其次，每个 
                  方案并非尽善尽美。首先，为每张图片分别制作 

                  网页上应该提供某种导航链接来给出当前图片在整个图片库里的位置，方便人们从当前图片转到 

                  其他的图片。 

                       如果想两全其美，利用 JavaScript 来创建图片库将是最佳的选择:把整个图片库的浏览链接集 

                  中安排在图片库主页里，只在用户点击了这个主页里的某个图片链接时才把相应的图片传送给他。 

                  4.1     标记               •  

                       为了完成JavaScript 图片库，我特意用数码相机拍摄了几张照片，并把它们修整成最适合于 

                  用浏览器来查看的尺寸，即400 像素宽x300 像素高。在你自己做练习时，大可不必拘泥于这个尺 

                  寸，你可以使用任何图片。                       I 

                       第一项工作是为这些图片创建一个链接清单。因为我没打算让这些图片按照特定顺序排列， 

                  所以将使用一个无序清单元素 (<ul>) 来列出那些链接。如果你自己的图片已事先排好序，那就 

E圃』 

----------------------- Page 65-----------------------

                                                                                                  4 .1   标记           47  

最好使用一个有序清单元素 (<01>)  来标记这些图片链接。 

      下面是我的标记清单: 

       < ! DOCTYPE  htm l>  
       <html  lang="en">  
       <head>  
         <meta  charset="utf-S"   1>  
         <title>Image  Gallery</title>  
       </head>  
       <body>  
         <hl>Snapshots</ hl>                                                                                                    ,  
         <u l>                                                                                                               、-•  
           <li>  
              <a   href="images/fireworks.jpg"  title="A  fireworks  display">  Fireworks~/a>  
           </li>  
           <li>  
              <a  href="images/coffee.jpg"  title="A  cup  of  black  coffee">  Coffee</a>  
           </li>  
           <li>  
              <a  href="images/rose .jpg"  title="A  red ,  red  rose">Rose</a>  
           </li>  
           <li>  
              <a   href="images/bigben.jpg"  title="The  famous  clock">  Big  Ben</a>  
           </l i>  
         </u l>  
       </body>                                                                                                          •  
      </htmb  

      我将把这些标记保存到 ga 11 ery . htm 1  文件，并把图片集中保存在目录jmages 里。我的 1mages 
目录和 ga11 ery . htm 1  文件位于同一个目录下。在ga 11 ery . htm 1  文件里，无序清单元素中的每个链 

        。指向不同的图片。在浏览器窗口里点击某个链接就可以转到相应的图片，但从图片重新返 

                                                                                                                                          •  
回到链接清单目前还必须借助于浏览器的Back (后退)按钮。图 4-1 是这个基本的链接清单在浏 

重器窗口里的显示效果。 
                                                                                    •  
                                                                                     @ 一  销 
                               舍楼帮兰:二 -JJJ- 飞ffhnage 制的 
                                                                                     F 
                                                                                   … 
                                                                                     - 
                                                                                     笔 
                                                                                  @  
                               合± 喽r:        藏 建革 命f9一 

                               Snapshots  

                                   ·监室应站 
                                   · ￡摇去黯 
                                   ·翠盘黯 
                                   •  BigB整整 

                                                                                                                                 .  

                                                        . 图 4-1  

----------------------- Page 66-----------------------

                  48       第 4 章案例研究: JavaScript 图片库 

                     这是一个相当令人满意的网页，但它的默认行为还不太理想。下面是我希望改进的几个地方。 

                     口当点击某个链接时，我希望能留在这个网页而不是转到另一个窗口。 

                     口当点击某个链接时，我希望能在这个网页上同时看到那张图片以及原有的图片清单。 

                     下面是我为了实现上述目标而需要完成的几项改进。 

                     口通过增加一个"占位符"图片的办榕在这个主页上为图片预留一个浏览区域。 

                     口在点击某个链接时，拦截这个网页的默认行为。 

                     口在点击某个链接肘，                  把"占位符"图片替换为与那个链接相对应的图片。 

                     先来解决"占位符"  图片的问题。我选用了一个类似于名片的图片，                                                你可以根据个人喜好来 

               决定选用的图片，即使选用一个空白图片也没问题。 

                     把下面这些代码插入到图片清单的末尾: 

                     <img  id="placeholder"  src="images/placeholder.gif"  alt="my  image  gallery "  1>  

4  

                     我对这个图片的 id 属性进行了设置，这将使我可以通过一个外部的样式表对图片的显示位置 

               和显示效果加以控制。例如，可以让这个图片出现在链接清单的旁边而不是它的下方，还可以在 

                自己的JavaScript 代码里使用这个叫值。下面是这个页面在增加了 " 占位符"图片后的显示效果。 

 •                                       愈发金~…斗斗…………一段黯5;授或L二-二二二一ι，                         、      qJ  

                                         键是叫命 运营 喜事 缭碎?士十?十? "酌'                     但 ±:十丁;较 落  @ 

                                         Snapshots                                                                •  

                                            - 1如黯撼革 
                                            - ç创猿~ 
                    '  
                                           · 这磁盘 
                                           · 黯棋盘盘 

                                           !扎::二子二:7T飞;引二;;; ;厅?;f专于.:1F;:「1二:;  :陆:陆陆均悔Yyγγγ，二J)):二v1;;L4:二: 

                                           ;  1气;  : 3号日臼础:z军博z若昨f菇挠帮§譬g锣?二二.:1丁:1: 
                                                                              ;j  
                                           ii川i11 JGG!母dd〈GGdd3菜#垃: I阳.).险始J、静静销静愈崩e11叩 : ;1  

                                        ……"一一一"………叫一一………………………….~'"…一… 
                                         御，蜒 

                                                                    图 4-2 

                     现在，标记文件已经准备好了，                        接下来的工作是编写JavaScript 代码。 

               4.2      JavaScript  

                     为了把"占位符"图片替换为想要查看的图片，需要改变它的 src 属性。 setAttribute 是完 

               成这项工作的最佳选择，而我将利用这个方法写一个函数。这个函数只有一个参数，                                                               即一个图片 

               链接。它通过改变"占位符"图片的src 属性的办法将其替换为参数图片。 

----------------------- Page 67-----------------------

                                                                                4.2   JavaScript       49  

     首先，需要给函数起一个好名字，它应能描述这个函数的用途，还要简明扼要。                                                       我决定把这 

           名为 showPic。还需要给这个函数的参数起一个名字，我决定把它命名为whichpic: 

      function  showPic(whichpic)  

     1州ichpic 代表着一个元素节点，具体地说，那是一个指向某个图片的<a>元素。我需要分解出 

           件路径，这可以通过在whichpic 元素上调用 getAttribute 得到，只要把"href"作为参数 

         getAttribute 就行了: 

      whichpic.getAttribute("href")  

                                                                                                            、、 

鑫将把这个路径存入变量 source: 

      var  source  =  whichpic.getAttribute("href")j  

     接下来，还需要获取"占位符"图片，这对getElementByld 来说不过是小菜一碟: 

      document. get Elemen tBy I 9( "placeholder")  

     我不想重复敲入 "document. getEl ementBy 1 d ( "p 1 acer才101 der")" 这么长的字符串，所以将把这 

个元素赋给变量placerholder : 

     现在，已经声明并赋值了两个变量: source 和 placerholder。它们可以让脚本简明易读。 

     我将使用 setAttribute 对placerholder 元素的 src 属性进行刷新。还记得吗，这个方怯有两 

个参数:      一个是属性名，另一个是属性的值。具体到这个例子，因为我想对 src 属性进行设置， 

所以第一个参数是"src";  至于第二个参数，也就是 src 属性的值，我已经把它保存在 source 变 

量里了: 

      placeholder.setAttribute(飞rc" ， source)j 

     这显然要比下面这么冗长的代码更容易阅读和理解: 

      docωument . getElementById("placeholder") . setAttribute("src"  
     恒..  show叩pic .ge创tA肚，tt位ri讪bu川J片te叫("h忧ref")川)j 

4.2.1     非 DOM 解决方案 

     其实，不使用 setAttrìbute 方法也可以改变图片的 src 属性。 

     setAttribute 方法是"第 1 级DOM" (DOM Levell )的组成部分，它可以设置任意元素节点 

的任意属性。 在"第 1 级 DOM" 出现之前，你可以通过另外一种办法设置大部分元素的属性， 

这个办法到现在仍然有效。 

     例如，如果想改变某个 input 元素的 value 属性， 可以这样: 

     element. value  =  "the new  value"  

     这与下面这条语句的效果是等价的: 

     element.setAttribute(" val ue  

                                                                                                  k  

                                                                                .  
                                                                                、、‘ 

----------------------- Page 68-----------------------

   50       第 4 章案例研究: JavaScript 图片库 

      类似的办法也可以用来改变图片的src 属性。例如，在我的图片库脚本里，完全可以用下面 

 这条语句来代替setAttribute: 

      placeholder.src  ;;:  sourcej  

      我个人更喜欢使用 se创tA此tt甘r、讪. 

 前的哪些方主法去去设置。虽然用那些老办法可以毫无问题地对文档里的图片、表单和其他一些元素 

 的属性进行设置，但setAttribute 的优势在于它可以修改文档中的任何一个元素的任何一个属性。 

      "第 1 级DOM" 的另一个优势是可移植性更好。那些老方法只适用于Web 文档， DOM则适 

 用于任何一种标记语言。虽然这种差异对我们这个例子没有影响，但我希望大家能够牢牢记住这 

 一点:DOM 是一种适用于多种环境和多种程序设计语言的通用型 API。如果想把从本书学到的 

 DOM技巧运用在 Web 浏览器以外的应用环境里，严格遵守"第 1 级 DOM" 能够让你避免与兼 

 容性有关的任何问题。 

 4.2.2    最终的函数代码清单 

      下面是showPic 函数完整的代码清单: 

      function  showPic(whichpic)  {  
        var  source  =  whichpic.get Attribute("href")j  

                                                                                           d  

        var  placeholder  ;;:  docωur町『阳                                 、 

        placeholder.setAttribute( 飞rc" ， source)j 

     接下来的任务是把这个JavaScript 函数与标记文档结合起来。 

4.3      应用这个JavaScript 函数 

     函数写完了，接下来就要在图片库文档里使用它。把这个函数保存在扩展名为扣的文本文件 

 中。在此，可以给它起个名字叫 showPic .js 。 

          若一个站点用到多个JavaScript 文件，为了减少对站点的请求次数(提高性能)，应 

     该把这些 Js 文件合并到一个文件中。本书为了便于说明问题，不少例子都使用了多个 

     文件。等到了第 5 章，我们会专门讨论这个问题以及其他提升站点性能的最佳实践。 

     就像我刚才决定把所有的图片集中存放在 1mages 子目录里那样，把所有的JavaScript 脚本文 

件集中存放在一个子目录里也是个好主意。我创建了一个名为 scripts 的子目录并把 showPic.js 

文件保存到其中。 

     现在，需要在图片库文档里插入一个链接来引用这个JavaScript 脚本文件。我将把下面这行 

插入到HT~征文挡的</body>标签之前: 

     <script  type;;:"text/javascript"   src;;:l scripts/showPic.j s "></script>  

     这样在图片库文档里就可以使用 showPic 函数了。如果到此打住，那么 showPic 函数永远也 

不会被调用。我们需要给图片列表的链接添加行为，也就是事件处理函数(event handler) ，才能 

达成目标。 

----------------------- Page 69-----------------------

                                                                                                            ‘  

                                                       4.3   应用这个JavaScript 函数              51  

   件处理函数 

     事件处理函数的作用是，在特定事件发生时调用特定的 JavaScript 代码。例如，如果想在鼠 

标指针悬停在某个元素上时触发一个动作，就需要使用 onmouseover 事件处理函数;如果想在鼠 

标指针离开某个元素时触发一个动作，就需要使用 onmouseout 事件处理函数。在我的图片库里， 

我想在用户点击某个链接时触发一个动作，所以需要使用 oncl i ck 事件处理函数。 

     需要注意的是 showPic() 函数需要一个参数:一个带有 href 属性的元素节点参数。当我把 

m::lick 事件处理函数嵌入到一个链接中时，需要把这个链接本身用作 showPic 函数的参数。                                              飞 

     有个非常简单有效的办怯可以做到这一点:使用 thi s 关键字。 这个关键字在这儿的含义是 

‘这个对象"。具体到当前的例子， this 表示"这个<a>元素节点": 

     showPic(this)  

     综上所述，我将使用 onclick 事件处理函数来给链接添加行为。添加事件处理函数的语怯如 

下所示: 

     event  =   "Java5cript  statementμ)"  

     请注意， J avaScript 代码包含在一对引号之间。我们可以把任意数量的JavaScript语句放在这                                              .  

对引号之间，只要把各条语句用分号隔开即可。 

     下面这样onclick 事件就可以调用 showPic 方泣了: 

     onc1ick  =飞howPic(this)j" 

     不过，如果仅仅把事件处理函数放到图片列表的一个链接中，我们会遇到一个问题:点击这个 

链接时，不仅showPic 函数被调用，               链接被点击的默认行为也会被调用。这意味着用户还是会被带 

到图片查看窗口，而这是我不希望发生的。我需要阻止这个默认行为被调用。 

     让我们近距离了解一下事件处理函数的工作机制。在给某个元素添加了事件处理函数后，一 

旦事件发生，相应的 JavaScript 代码就会得到执行。被调用的 JavaScript 代码可以返回一个值， 

这个值将被传递给那个事件处理函数。例如，我们可以给某个链接添加一个 onclick 事件处理函 

蠢，并让这个处理函数所触发的 JavaScript 代码返回布尔值 true 或 false。这样一来，当这个链 

釜被点击时，如果那段 JavaScript 代码返回的值是true，                      oncl ick 事件处理函数就认为"这个链接 

   点击了飞反之，如果返回的值是 fal 钮，                   oncl ick 事件处理函数就认为"这个链接没有被点击"。 

     可以通过下面这个简单测试去验证这一结论: 

     <a   href=..http://www.example.com..  onclick="return  fals町、Click me</a>  

     当点击这个链接时，因为 oncli ck 事件处理函数所触发的 JavaScript 代码返回给它的值是 

在ìse，所以这个链接的默认行为没有被触发。 

     同样道理，如果像下面这样，在 onclick 事件处理函数所触发的 JavaScript 代码里增加一条 

陀turn false 语句，就可以防止用户被带到目标链接窗口: 

     onclick  =  

     下面是最终完成的 onclick 事件处理函数在图片库HTML文档里的样子: 

                                                                                                       •  
                                                                                                     •  

----------------------- Page 70-----------------------

                                                                                                                                        ,  

           52           第 4 章案例研究: JavaScript 图片库 

                <li>  
                      <a   href="images/fireworks.jpg"  onclick="showPic(this);  
               恒. return  false;"  title="A  fireworks  display">Fireworks</a>  
               </li>  

               接下来，我要在图片列表的每个链接上添加这个事件处理函数。这当然有些麻烦，但眼下只 

       能这么做，我们将在第6 章介绍一个避免这种麻烦的办法。下面的标记文档是我一个个手动添加 

       onclick 事件处理函数之后的样子: 

                      <a  href="images/fireworks.j pg "  onclick="showPic(this);  
               恼. return  false;"  title="A  fireworks  display ">Fireworks</a>  
                   </li>  

                      <a   href="images/coffee.jpg"  onclick="showPic(this);  
               恼. return  false;"  title="A  cup  of  black  co忏ee">Coffee</a> 
                   </li>  
                   <li>  
                      <a   href="images/rose.jpg"  onclick="showPic(this);  return  false;"  
                .. title= "A red J         reEl   rose")Rose</a>  
                   </li>  
                   <li>  
  ,                   ~a  href="images/bigben.jpg"   onclick=  
              •  恒幡.  ti让tle="叮'丁Th怆e famous  clocαk")邓Bi均g Ben</a>  
                   <Ili>  

               现在，把这个页面加载到Web浏览器里，你将看到一个能够正常工作的"JavaScript 图片库": 

       如图 4-3 所示，不管点击图片列表里的哪个链接，都能在这个页面里看到相应的图片。 

                                                  整交瓦斗叫一…干→斗斗二;二zJ如邵阳，，/，气                             ' J  一…L斗一二础 
                            ‘  
                                                   舍' 命。 爱穿键 盘;有:rr:rγ…::?"…… -em。: 对命运 @ 
                                                   Q       忡 
                                                                  d's  
                                                      内 
                                                                    Go  
                                           ·  ·  · -  -  口 M  M 

                                                      机   时 

               •  

         、 

                                                 叮叮嘟.W ……，叫 "一………._... . ...       …mψ ..__. …一…........ …寸w，'v俨啊， .... ....…  …,.....1'.:"  
                                                  切拙.二、 v.. .~    . _. '.  'f :..  'f:{ 叹  。"♂.;. ~  ~川.:" : _!  -'.f ,;  、 ,- ;,.  ,  ..  ‘  L&  

                                                                                                                              .  
                                                                                   图 4-3 

     4.4          对这个函数进行扩展 

             在一个网页上切换显示不同的图片并不是什么新鲜事。早在 W3C 推出它们标准化的 DOM 

     和JavaScript 语言之前，有着这类效果的网页和脚本就已经出现了，如今更是得到了广泛的流行。 

             在这种情形下，如果想让自己与众不同，就必须另辟蹊径。有没有想过在同一个网页上切换 

,  

----------------------- Page 71-----------------------

                                                                                                      •  

                                                         4 .4  对这个函数进行扩展                53  

 显示不同的文本?利用 JavaScript 语言和DOM，确实可以做到这一点。 

     图片库文档里的每个图片链接都有一个title 属性。可以把这个属性取出来并让它和相应的 

 图片一同显示在网页上。 title 属性的值可以用 getAttribute 轻而易举地得到: 

     var  t ext  =  whichpic.getAttribute("title")j  

     光提取title 属性的值还不够，我们还需要把它插入到 HTML文档中。为完成这一工作，我 

 言要用到几个新的DOM属性。 

 4.4.1   childNodes 属性 

     在一棵节点树上，        childNodes 属性可以用来获取任何一个元素的所有子元素，它是→个包含这 

阜手喜全部子元素的数组: 

     element.childNodes  

     假设需要把某个文档的 body 元素的全体子元素检索出来。首先，我们使用 getElementsBy­ 

 三gName 得到 body 元素。因为每份文档只有一个 body 元素，所以它将是getElementsByTagName 

  -body" )方法所返回的数组中的第一个(也是唯一一个)元素: 

     var  body_el ement  =  document .get ElementsByTagName("body")[O]j  

     现在，变量 body_element 已经指向了那个文档的body 元素。接下来，可以用如下所示的语法 

 获取body 元素的全体子元素: 

     body_eleme nt.childNodes  

     这显然要比像下面这样写简明得多: 

     document.getEl~mentsByTagName("body")[o] . childNodes  

     现在，已经知道如何获取body 元素的全体子元素了，接下来看看这些信息的用途。 

     首先，可以精确地查出 body 元素一共有多少个子元素二因为 childNodes 属性返回的是一个 . 

室主组，所以用数组的 length 属性就可以知道它所包含的元素的个数: 

     body_el ement.childNodes .lengthj  

     现在把下面这个小函数添加到 showPic .js 文件里: 

     function  countBodyChildren()  {  
       var  body_element  = dωocαωu川m阳n 
     }alert (bOdy-e1eImTnlern1t.ChildNOdes.1ern1gth);  

    这个简单的小函数将弹出一个alert 对话框，显示body 元素的子元素的总个数。 

    我想让这个函数在页面加载时执行，而这需要使用 onload 事件处理函数。把下面这条语句添 

加到代码段的末尾: 

    window.onload  =  countBodyChildrenj  

    这条语句的作用是在页面加载时调用 countBodyChildren 函数。 

    在Web 浏览器里刷新ga 11 ery. html 文件。你会看到一个alert 对话框，其显示的内容是body 

----------------------- Page 72-----------------------

        54     第 4 章案例研究: JavaScript 图片库 
                                                                                                .  

      元素的子元素的总个数。这个数字很可能会让你大吃一惊。 

      4 .4.2  nodeT邱e 属性 

          根据ga 11 ery . html 文件的结构， body 元素应该只有3 个子元素:一个 hl 元素、 一个 ul 元素 

      和一个1mag 元素。可是， countBodyChildren() 函数给出来的数字却远大于此，这是因为文档树的 

      节点类型并非只有元素节点一种。 

          由 childNodes 属性返回的数组包含所有类型的节点，而不仅仅是元素节点。事实上，文档里 

     几乎每一样东西都是一个节点，甚至连空格和换行符都会被解释为节点，而它们也全都包含在 

     ch门dNodes 属性所返回的数组当中。 

          因此， countBodyChildr凹的返回结果才会这么大。 

          还好，每一个节点都有 nodeType 属性。这个属性可以让我们知道自己正在与哪一种节点打交 

     道，差劲的一点是nodeType 的值并不是英文。 
                                                                                       •  

         用下面的语法获取节点的 nodeType 属性: 

          node.nodeType  

         nodeType 的值是一个数字而不是像 "element" 或 "a世ibute" 那样的英文字符串。 

         为了验证这一点，把countBodyChildren 中的 alert 语句替换为下面这条语句，这样一来，我 

     们就可以知道bOdy_element 元素的 nodeType 属性了: 

         alert(body_element.nodeType);  

         在 Web 浏览器里刷新 gal1ery.htm1 文件，将看到一个显示数字 "1" 的 a1ert 对话框。换句 

     话说，元素节点的 nodeType 属性值是 10 

         nodeType 属性总共有 1 2种可取值，但其中仅有3 种具有实用价值。 

         口元素节点的 nodeType 属性值是 1 。 
                                                •  
.  
         口属性节点的 nodeType 属性值是2。 

         口 文本节点的nodeType 属性值是3 。 

         这就意味着，可以让函数只对特定类型的节点进行处理。例如，完全可以编写出一个只处理 

    元素节点的函数。 

    4.4 .3   在标记里增加一段描述 

        为增强我的图片库函数，我决定维护一个文本节点。我想在显示图片时， 把这个文本节点 

    的值替换成目标图片链接的tit1e 的值。 

        首先，需要为目标文本安排显示位置。我在ga 11 ery . htm 1  文件里增加一个新的文本段。我把 

    它安排在<img>标签之后，为它设置一个独一无二的 id 值，这样就能在 JavaScript 函数里方便地 

    引用它: 

         <p   id="description")汇hoose an  image.</p)  

        上面这条语句将把<p>元素的 id 属性设置为 description (描述) ，这个 id 可以让这个元素的 

----------------------- Page 73-----------------------

                                                                                  4 .4   对这个函数进行扩展                            55  

                                                                                                                                         、 

           目了然。如图 4-4 所示，包含在此元素里的文本现在是 "Choose an  image." ，你能看到添 

    了新段落。 

                                                                                                                                   、 

                                    13 辈革命~ ':'   号       守   1钓'.~e W!'C<)'一〕叫，一…………斗32L 

                                    命~.  命 运蒙运番号盖了?咀嚼  ，国                   4  ."?叫亏丽芝移 

                                    Snapshots  

                                       · 加剧靠盏 
                                       ， 忽然如 

                                       · 怨磁革 

                                       · 毅事.~牵挂 

                                                 飞 一      … 
                                                                 ~t 
                               h  k 
                                                       - 
                                                  「 
                                                         1:  
                                                  g     y 

                                               J   m 
                                                               eNY  
                                                       怜 
                                      』 
                                                   咽 

                                                                               •  

                                                    - 

                                    C放附详细翻)(Ige. 

                                                                                 帽嗖..." _......帽-…-_ 一--_.. 

                                                                                  10  - "  .'   ./::  

                                                                   4-4  
                                                              图 

       我想达到的效果是:在某个图片链接被点击时，不仅要把"占位符"图片替换为那个链接的 

tref 属性所指向的图片，还要把这段文本同时替换为那个图片链接的title 属性值。为了实现这 

一效果，对 showPic 函数要做一些改进。 

4.4 .4      用 JavaScript 改变这段描述 

                                                                                                         我需要对 showPic 函 
                                      为了能动态地用图片的 title 替换掉图片说明， 
       在图片链接被点击时， 

量做一些修改。 

       下面是 showPic 函数现在的样子: 

       function  showPic(whichpic)   {  
         var  source  =  whichpic .getAttribute("href")j  
         var  placeholder  =  document.get ElementByld("placeholder")  
         placeholder.setAttribute("src" ,source)j  

      首先，我需要在showPic() 函数里增加一条语句来获取whichpic 对象的titl e 属性值。我将把 

这个值存入text 变量。这件事可以轻而易举地利用 getAttribute 完成: 

       var  text  =  whichpic .getAttribute("title")j  

      接下来，为了能方便地引用 id 为 description 的文本段落，我创建一个新的变量来存放它: 

       var  description  =  document.get ElementByld("description")j  

      下面是增加变量之后的样子: 

                         .  

----------------------- Page 74-----------------------

                                         、 

    56       第 4 章案例研究: JavaScript 图片库 

                                                                             •  

       function  showPic(whichpic)  {  
         var  source  =  whichpic .getAttribute("href")j  
         var  placeholder  =  document.get ElementByld( "placeholder")j  
         placeholder.setAttribute("src" ,source)j  
         var  text  =  whichpic .getAttribute( "ti tle");  
         var  description  =  document.getElementByld("description")j  

      下一个任务是实现文本的切换。 

 4.4.5      nodeValue 属性 

      如果想改变一个文本节点的值，那就使用 DOM提供的 nodeValue 属性，它用来得到(和设 

 置)一个节点的值: 

       node.nodeValue  

      但这里有个大家必须注意的细节:在用 nodeValue 属性获取description 对象的值肘，得到的 

并不是包含在这个段落里的文本。可以用下面这条 alert 语句来验证这一点: 

       alert  (description .nodeValue)j  

•  

      这个调用将返回一个 null 值。<p>元素本身的 nodeValue 属性是一个空值，而你真正需要的是 

 <p>元素所包含的文本的值。 

      包含在<p>元素里的文本是另一种节点，它是<p>元素的第一个子节点。因此，你想要得到的 

其实是它的第一个子节点的nodeValue 属性值。 

                                                                                            •  
      下面这条 alert 语句可以显示你想要的内容: 

       alert(description.childNodes[o] .nodeVa l ue)j  

      这个调用的返回值才是我们正在寻找的 "Choose an image. " 。这个值来自 childNodes 数组的 

第一个(下标是0)  元素。 

4.4.6       firstChild 和 1 astChild 属性 

      数组元素childNodes[OJ有个更直观易读的同义词。无论何时何地，只要需要访问 childNodes 

数组的第一个元素，都可以把它写成firstChild: 

                                                                                                 •  

       node . firstChild  

      这种写泣与下面的写怯完全等价: 

      node . childNodes[o]                                                                        •  

      这不仅更加简短，还更加具有可读性。 

      DOM还提供了一个与之对应的 lastChild 属性: 

      node .lastChild  

      这代表着 childNodes 数组的最后一个元素。如果不想通过 lastChild 属性去访问这个节点， 

将不得不使用如下所示的语法: 

      node.childNodes[node.childNodes.length-l]  

----------------------- Page 75-----------------------

                                                                                                       •  

                                                         4 .4  对这个函数进行扩展                57  

     与简明易'懂的 lastChild 相比，这么复杂的语法记号恐怕没人会喜欢。 

   .4.7   利用 nodeValue 属性刷新这段描述 

     现在，我们回到 showPic 函数。我将刷新 id 等于description 的<p>元素所包含的文本节点的 

m主Value 属性。 

     具体到这个 id 等于 description 的<p>元素，因为它只有一个子节点，所以选用 

也cri ption .fi rstChild 属性和选用 description.lastChild 属性的效果是完全一样的。既然如此， 

爱决定选用 firstChild 属性。 

     可以把alert 语句改写为如下所示的样子: 

     alert(description.firstChild.nodeValue);  

     显示的效果完全一样(都将显示 "Choose an image." 消息) ，但这里的代码显然更容易阅读 

和理解。 

    nodeValue 属性的用途并非仅限于此。它不仅可用来检索节点的值，还可以用来设置节点的值， 

后一种用途正是我目前最需要的。 

     还记得刚才在 showPic 函数里的 text 变量吗?当图片库页面上的某个图片链接被点击时， 

三hawvPic 函数会把这个链接的title 属性值传递给text 变量。而我现在将用 text 变量去刷新id 值 

等于description 的那个<p>元素的第一个子节点的 nodeValue 属性值，如下所示: 

     description.firstChild.nodeValue  =  text;  

     下面是为了改进showPic() 函数而添加的三条新语句: 

     var  text  =  whichpic.getAttribute(ltitle");  
     var  de scription  = document.getElement Byld("description");  
     description.firstChild.nodeValue  =  text;  

     如果用日常用语来说，这三条语句的含义依次是: 

     口当图片库页面上的某个图片链接被点击时，这个链接的 title 属性值将被提取并保存到 

       text 变量中; 

     口 得到 id 是"description"的<p>元素，并把它保存到变量description 里F 

     口把description 对象的第一个子节点的 nodeValue 属性值设置为变量text 的值。 

     下面是最终的代码清单: 

     function  showPic(whichpic)   {  
       var  source  = whichpi c. getAttribute(" href");  
       var  placeholder  =  document.get ElementByld("placeholder");  
       placeholder.setAttribute("src" ,source);  
       var  text  =  whichpic.getAttribute(ltitle");  
       var  description  =  document.get ElementByld("description");  
       description.firstChild.nodeValue  =  text ;  

    把改进后的 showPic() 函数存入showPic.js 文件，然后在浏览器里刷新ga 11 ery. html 文档，你 

就可以看到这个扩展功能了。现在，点击这个网页上的某个图片链接时，你将看到两种效果:"占 

位符"图片被替换为这个链接所指向的一张新图片，同时描述性文字也被替换为这个链接的title 

----------------------- Page 76-----------------------

                                          .  

                 .  
                  .          58            第 4 章案例研究: J avaScript 图片库 

                         属性值，如图 4-5 所示。 

                                                                    革:隔三JL:二乌;二:在..:242二34;二:挝拉搭载的江二AULA 叫Hi二;二飞JMJ牛马黯 

                                                                     管如 今' 罐 罐 缓变:::二二兰工工士;:;三啊 ? 
                                                                     Snapshots  

                                                                        •  
                                                                         •  
                                                                         •  
                                                                         •  

•  

                                                                                                                                                       ,  

                                                                     J电蜘d， reû. ro串串 

                                                                   f部z……叫忖俨…俨叫阿忖伫叮叮叫了叮叮叮寸?俨 "但。                                     、      1,f  叫叩γ?咱三| 

                                                                                                          图 4-5 

                                 你可以在 h句://企iendsofed.coml网站上找到图片库脚本文件和标记文档。我在示例中用到的 

                         所有图片也可以在那里找到，但我建议大家找一些自己的图片来测试这个脚本，那样会更有意思。 

                                 如果想让这个图片库更美观，可以再给它增加一个像下面这样的样式表: 

                                     font-family:  "Helvetica气"Arial"p serif;  
                                     color:  #333;  

                                     margin:   lem   10%j  
                                  }  
                                  hl  {                                                                    •  

                                     color:  #333;  
                                     background -color :  transparent;  
                                  }  
                                  a  {  
                                     color:  #c60;  
                                     background-color:  transparent;  
                                     font-weight:  boldj  
                                     text-decoration:  none;  
                                  }  
                                  ul  {                               噜 
                                     padding:   0;  
                                  }                                                                                      •  
                                  li {  
                                     float:  left;  
                                     padding:   lem;  
                                     list-style:  none;  
                                 弘 、 

                                . d t 

                                         r 
                                 ‘ . 、 、 ， ， 
                                      nEUJUFL  
                                    m  

                                                 D I 、 
                                            y4z           ik  
                                       . 
                                       、 ' F  u n 吨 
                                                vy-hu   rL  
                                                       0·'  
                                                    E 
                                                  ··o       ..  
                                         、 · · d 
                                       .•  
                                      o d           品 
                                                            ,  
                                      ­ · 叮 E 」 d 『 丰 L H n ' 

                 ,  

----------------------- Page 77-----------------------

                                                                                                                                                       ‘  

                                                                                 4 .4    对这个函数进行扩展                              59  

  请把这些 css 代码存入 layout.css 文件，并把这个文件存放到 styles 子目录里。然后，在 

ìery. html 文档的<head>部分用一个<link>标签来引用这个文件，如下所示: 

  <IDOCTYPE     htm l>  
  <html  lang::"en">  
  <head>  
     <meta  charset ::"utf-8"  1>  
     <title>Image  Gallery</title>  
     <link  rel::"stylesheet"  href="styles/layout.css"  media="screen"   1>  
  </head>  
  <body>  
     <hl>Snapshots</hl>  
     <u l>                                                                                 、 
        <li>  
          <a   href="images/fireworks.j pg "  titl电=" A fireworks  display"  
  .. onclick="showPic(this);  return  falsej">Fireworks</a>  
        </li>  
        <li>  
          <a  href::"images/coffee.jpg"  title=" A cup  of  black  coffee"  
  恒. onclick=飞howPic(this)j return  falsej">Coffee</a>  
        </l i>  
        <li>  
          <a   href="images/rose .jpg"  title="A  red , red  rose"  
  恒. onclick="showPic(this)j  return  fal sej">Rose</a>  
        </li>  
        <li>  
          <a   href="images/bigben.jpg"  title="The 手amous clock"  
  匾. onclick="showPic(this)j  return  falsej">Big  Ben</a>  
        </li>  
     </u l>  
     <img   id="placeholder"  src="images/placeholder.gif"  alt="my  image  gallery"  1>  
     <p   id="description">Choose  an  image . </p>  
     úcript  src="scripts/showPic.js"></script>  
  </body>  
  </html>                                                                                                                                            .  

  图 4-6 是图片库的显示效果。 

                                                                                                                                                   .  

                                                            图 4-6 

      .  

----------------------- Page 78-----------------------

        60            第 4 章案例研究: JavaScript 图片库 

    4.5           小结 

            本章介绍了一个简单的JavaScript 应用案例，还介绍了 DOM提供的几个新属性，它们是: 

             口 childNodes 

             口 nodeType 

             口 nodeValue 

                                                              ,  

             口 firstChild 

             口 lastChild 

            本章的学习重点有两个:一是如何利用 DOM所提供的方法去编写图片库脚本， 二是如何利 

    用事件处理函数把JavaSαipt 代码与网页集成在一起。 

            从表面上看，我们的图片库已经大获成功，但它实际上还有许多地方值得改进，而那将是随 

    后两章里的讨论重点。 

            下一章将介绍一些 JavaScript 脚本编程方面的最佳实践，你会从中领悟这样一个道理:达成 

     目标的过程与目标本身同样重要。 

                                                                                                                                                                        .  
            第6 章我们将把这些最佳编程实践应用到图片库脚本上。 

                                                                                                                                                                                       ‘  

                                                                    、 

                                                                                                                          、 

                                                    •  

、 

                                                                                         •  

----------------------- Page 79-----------------------

                                                                                                                                     、 

                                                                                                                                     、 

                    .I  
                  陈静川 

                               ‘  

                                                                                     '  

                                     ,  

口  口   口  口            毛:确保网页在没有Java~eript 的 

                                           J ?结构剌静寂二 
                                                浏览器不会I 

                       虑:确定因吧亏的半年毒优?                          Ff 

           JavaScript 语言和DOM构成了一个功能非常强大的组合，但问题的关键是你能否恰到好处地 

      运用它们所提供的功能。本章将介绍一些最佳实践，帮助你保证编写出来的脚本不会与你的愿望 

      雪道而驰。 

      5. 1     过去的错误 

           在讨论最佳实践之前，先来了解一下出问题的原因。 

      5.1 .1    不要怪罪JavaScript 

           易学易用的技术就像一把双刃剑。因为容易学习和掌握，它们往往会在很短的时间内就为人 

     的广泛接受，但也往往意味着缺乏高水平的质量控制措施。 

           HTML语言就是一个很好的例子。万维网之所以会出现爆炸性的增长， HTML语言易学易用 

     曲特点是无可否认的一个原因。人们只需花费很短的时间就能掌握 HTML 语言的基本知识，并 

     迅速地创建出各种各样的网页。事实上，随着"所见即所得"网页设计工具的出现和流行， 有些 

      人可能连一行HTML标记都没有见过就成了网页设计大军中的一员。 

           因此产生的一个不良后果是，绝大多数网页都编写得很糟糕，甚至不做标记合法性检查。因 

     此，软件厂商不得不让它们的浏览器以尽可能宽松的方式去处理网页。 每种浏览器都有相当一部 

     分代码专门用来处理那些含糊不清的 HT阻标记，以及猜测网页的创作者们到底想如何呈现网 

     页。 

           理论上讲，在如今的 Web 上有数十亿计的 H四1L文档g                                      但事实上，这些文档中只有一少部 

     分有着良好的结构。这种历史遗留问题使得XBTML和 csS 等新技术在Web 上的推广和应用遇 

                                                                                                            •  

----------------------- Page 80-----------------------

         -~  

                                                                        •  

           62    第 5 章最佳实践 

          到了很大的阻力。易学易用的HTML语言既是万维网的福音，又是它的噩梦。 

             与 HT~伍语言相比， J avaScript 语言的生存环境的要求要苛刻得多。如果 JavaScript 代码不 
          符合语法规定， J avaScript 解释器(对Web 应用而言就是浏览器)将拒绝执行它们并报错g                    而浏 

          览器在遇到不符合语法规定的 HTML 代码时，则会千方百计地将其呈现出来。尽管如此，在如 

         今的Web 上还是充斥着质量低劣的JavaScript 代码。 
•  

             许多网页设计者并不舍得花费时间去学习 JavaScript 语言，而只是把→些现成的 JavaScript 

          代码直接剪贴到 HTML文裆里以使网页更加丰富多彩。事实上， JavaScript 语言诞生后不久，                      市 

         场上就出现了许多能让人们把JavaScript 代码片段嵌入或关联到H币在L 文档的"所见即所得"的 

          网页设计工具。 

             其实，即使没有那些"所见即所得"的网页设计工具，把JavaScript 代码嵌入或关联到HT~征 

         文档也不是难事。有许多网站和书刊专门提供各种现成的 JavaScript 函数并号称便于使用。一时 

          间，"剪切和粘贴"成了编写JavaScr毕t 脚本的代名词。 

             不幸的是，这些现成的 JavaScript 函数里有很多对问题考虑得并不周全。从表面上看，它们 

         都能完成自己的任务并给网页带来新颖动人的交互效果，但在实际应用中，它们当中只有很少一 

         部分能够在JavaScript 被禁用时对网页的行为做出妥善的安排。很多时候，一旦浏览器不支持或 

         禁用了 JavaScript 解释功能，那些质量低劣的脚本就会导致用户无法浏览相应的网页甚至整个网 

         站。因为这类问题频繁发生，没过多久， " J avaScript" 就在许多人的脑海里成为了"网页无泣访 

          问"的同义词。 

             事实上， J avaScript 与"网页无法访问"无任何必然的联系，网页能否访问完全取决于如何应 

         用JavaScript。 一首老歌中这样写道:不在手你做什么，只在于你怎么做。 

          5.1.2  Flash 的遭遇 

             客观地讲，没有不好的技术，只有没有用好的技术。 JavaScript 的坎坷遭遇让我不禁想起了 

         另二种被人们滥用的技术: Adobe 公司研发的Flash。 

             现在，有不少人一提起Flash 就会想到烦人的前导页面、超长的下载时间和随时都有可能出 

         问题的浏览体验。这些恶劣印象其实与 Flash 毫不相干，它们都是由那些质量低劣的实现脚本造 

         成的。 

             把Flash 与超长的下载时间联系在一起很不公平，因为制作短小精悍的矢量图形和视频片段 

         本是 Flash 技术的强项之一。利用 Flash 技术制作一些视频片段来介绍自己的网站是一个很好的 

         创意，但当这种做法成为一种潮流时，这类视频片段的数量越来越多、体积也越来越大，网页的 

         下载时间也不可避免地变得越来越长。此时， Flash 要想洗刷掉自己身上的恶名谈何容易。 

             类似地， JavaScript 本是一种能让网页变得易于访问的技术，然而它却也有着降低网站可用 

         性和可访问性的坏名声。 

            正如物理学中的运动与惯性定律所描述的那样，如果人们在开始使用一种新技术时没有经 

         过深思熟虑，而这种新技术又很快地成为了一种潮流，则纠正在早期阶段养成的坏习惯将会非 

         常困难。 

----------------------- Page 81-----------------------

                                          5.2  平稳退化   63  

   我敢说，之所以会有那么多的网站迫不及待地在网页上嵌入一些毫无必要的Flash 视频片段， 

是因为"大家都有，所以我也要有"的心理而不是因为实际应用的需要。既然别人的网页上有 

Hash动画，那么我的网页上也要有Flash 动画，有无必要的问题已无人问津了。 

   JavaScript 也遭遇到了类似的命运:人们只关心自己的网页里有没有JavaScript 代码，根本不 

去考虑那些现成的(尤其是那些由"所见即所得"网页设计工具生成的) J avaScript 函数本身有 

量有漏洞，以及它们会不会给网页带来负面影响。 JavaScript 代码被人们剪贴来、剪贴去，结果 

弄得网上到处都是似是而非的 JavaScript 网页j   却没人想到应该首先检查一下那些现成的 

JnaScript 函数是否还需要改进。 

  1.3  质疑一切                  •  

   不管你想通过 JavaScript 改变哪个网页的行为，都必须三思而后行。首先要确认:为这个网 

 增加这种额外的行为是否确有必要? 

   网站对 JavaScript 的滥用已经持续了相当长的时间，因为滥用 JavaScript 而给自己带来种种 

    网站也绝不是少数。例如，你可以用 JavaScript 脚本让浏览器窗口在屏幕上四处移动，甚 

   浏览器窗口产生振动效果。 

   在所有的JavaSαipt特效当中，最臭名昭著的莫过于那些在人们打开网页时弹出的广告窗口。对 

    .和DOM脚本编写者来说不幸的是，有不少用户为此干脆彻底禁用了JavaScript。浏览器厂 

    各自的产品里提供了种种内建的户告过滤机制来解决这一问题，但广告还是无孔不入。 

   弹出的广告窗口和内容覆盖是一个典型的滥用 JavaScript 的例子。从技术上讲，弹出窗口本 

    项很实用的功能，它解决了网页设计工作中的一个难题:如何向用户发送信息。但在实践 

中，频繁弹出的广告窗口却让用户不胜其烦。那些弹出窗口必须由用户关闭，而这往往会形成一 

   锯战一一用户刚关闭了一个广告窗口，屏幕上又弹出一个。 

   那么，这一功能要如何使用户受益呢? 

   令人感到欣慰的是，这一问题正越来越受到人们的关注，那些不遵循"用户至上"原则的网 

   长远看，都在自取灭亡。 

   如果要使用 JavaScript，就要确认:这么做会对用户的浏览体验产生怎样的影响?还有个更 

    问题:如果用户的浏览器不支持JavaScript 该怎么办? 

     平稳退化 

   记住，网站的访问者完全有可能使用的是不支持JavaScript 的浏览器，还有一种可能是虽然 

   器支持 JavaScript，但用户已经禁用它了(比如，因为讨厌看到弹出广告)。如果没有考虑 

    情况，人们在访问你们的网站时就有可能遇到各种各样的麻烦，并因此不再来访问你们 

   站。 

   如果正确地使用了 JavaScript 脚本，就可以让访问者在他们的浏览器不支持 JavaScript 的情 

 下仍能顺利地浏览你的网站。这就是所谓的平稳退化 (graceful degradation) ，就是说，虽然某 

   能无法使用，但最基本的操作仍能顺利完成。 

----------------------- Page 82-----------------------

  64    第 5 章最佳实践 

    我们来看一个在新窗口里打开一个链接的例子。别担心:我们将要讨论的并不是在网页加载 

时弹出新窗口。而是在用户点击某个链接时弹出一个新窗口。这其实是一项相当实用的功能。例 

如，在许多电子商务网站的结算页面上都有一些指向服务条款或是邮寄费用表的链接，与其让用 

户在点击这些链接时被带离当前页面，不如让用户仍停留在当前页面，并用一个弹出窗口来显示 

相关信息。 

                                .  
 注意 应该只在绝对必要的情况下才使用弹出窗口，因为这将牵涉到网页的可访问性问题，例- 

      如，用户使用的屏幕读取软件无法向用户说明弹出了窗口。因此，如果网页上的呆个链 

      接将弹出新窗口，最好在这个链接本身的文字中予以说明。 

    JavaScript使用川ndow 对象的 open( )方法来创建新的浏览器窗口。这个方法有三个参数: 

    window.open(url ,name ,features)  
                                                                   .  
    这三个参数都是可选的。 

    口第一个参数是想在新窗口里打开的网页的URL地址。如果省略这个参数， 屏幕上将弹出 

      一个空白的浏览器窗口。 

    口第二个参数是新窗口的名字。可以在代码里通过这个名字与新窗口进行通信。 

    口最后一个参数是一个以逗号分隔的字符串，其内容是新窗口的各种属性。这些属性包括 

      新窗口的尺寸(宽度和高度)以及新窗口被启用或禁用的各种浏览功能(工具条、菜单 

      条、初始显示位置，等等)。对于这个参数应该掌握以下原则:新窗口的浏览功能要少而 

      精。 

   open( )方法是使用BOM的一个好案例，它的功能对文档的内容也无任何影响(那是DOM的 

地盘)。这个方法只与浏览环境(具体到这个例子，就是川ndow 对象)有关。 

    下面这个函数是window.open()方法的一种典型应用: 

    function  popUp(winURL)  {  
     window.open(winURL , "popup" , "width=320,height=480")j  

    这个函数将打开一个 320 像素宽、 480 像素高的新窗口 "popup"。因为我在这个函数里已为 

新窗口命名，所以当把新的 URL 地址传递给此函数时，这个函数将把新窗口里的现有文档替换 

为新URL地址处的文档，而不是再去创建一个新窗口。 

    我将把这个函数存入一个外部文件。因此， 当需要在某个网页里使用此函数时，只要在这个 

网页的<head>部分用一个<scrìpt>标签导人那个外部文件即可。函数本身不会对网页的可访问性 

产生任何影响，会影响到网页的只是:我将如何使用此函数。 

   调用 popUp 函数的一个办法是使用伪协议 (pseudo-protocol) 。 

5.2.1  "javascript:"伪协议 

    "真"协议用来在因特网上的计算机之间传输数据包，如HTIP协议(h句://)、 FTP 协议(句://) 

----------------------- Page 83-----------------------

                                                                                                                       •  

                                                                             •  

                                                                               5.2   平稳退化            65  

                                                                •  
                                                                                             ..  

   ，伪协议则是一种非标准化的协议。                        "javascript:" 伪协议让我们通过一个链接来调用 JavaScript 

     下面是通过 "javascdpt:" 伪协议调用 popUp() 函数的具体做法: 

      <a   href=..javascript:popUp(.http://www.example.com/.);..>Example</a>  

     这条语句在支持 "javascdpt:" 伪协议的浏览器中运行正常，较老的浏览器则会去尝试打开那 

          失败，支持这种伪协议但禁用了 JavaScript 功能的浏. 览器会什么也不傲。 

     总之，在HTML文档里通过 "javascript:"  伪协议调用 JavaScript 代码的做法非常不好。 

     .2   内嵌的事件处理函数 

     我们已经在第4 章的图片库脚本见识过事件处理函数的用途和用法了:把 onclick 事件处理 

     作为属性嵌入<a>标签，该处理函数将在onclick 事件发生时调用图片切换函数。 

     这个技巧同样可以用来调用 popUp 函数。但当在某个链接里用 onclick 事件处理函数去打开 

      口时，这个链接的 hr甘属性似乎没有什么用处一一与这个链接有关的重要信息已经都包括 

        onclick 属性里了。这也正是我们经常会看到如下所示的链接的原因: 

      <a   href="#"   onclick=盯 popUp(.http://www.example.com/.); 
      .. return  falsej">Example<a>  

     因为在上面这条HTh在L 指令里使用了 return 削se 语句，这个链接不会真的被打开。"#"符 

        个仅供文档内部使用的链接记号(单就这条指令而言， "#"是未指向任何目标的内部链 

    串在某些浏览器里， "#"链接指向当前文档的开头。把 href 属性的值设置为"#"只是为了 

          空链接。实际工作全部由 onclick 属性负责完成。 

     很遗憾，这个技巧与用 "javascript:"  伪协议调用 JavaScript 代码的做法同样糟糕，因为它们 

     能平稳退化。如果用户已经禁用了浏览器的JavaScript 功能，这样的链接将毫无用处。 

     .3   谁关心这个                 •    •  

     或许你对我反复强调"平稳退化"有些不解: 让那些不支持或禁用了 JavaScript 功能的浏览 

     能顺利地访问你的网站真的那么重要吗? 

     请想象一下，有个访问者来到了你的网站，他总是在浏览Web 时同时禁用图像和JavaScript 
                                                                                                         o 

          为如今这样的用户已非常少见，而事实也正是如此。但这个访问者非常重要。 

     你想象的那个用户是一个搜索机器人 
                                                ( searchbot) 。搜索机器人是一种自动化的程序，它们 

     Web 的目的是为了把各种网页添加到搜索引擎的数据库里。各大搜索引擎都有类似的程序。 

目前，只有极少数搜索机器人能够理解 JavaSαipt 代码。所以，如果你的 JavaSαipt 网页不能平 

     化，它们在搜索引擎上的排名就可能大受损害。 

     具体到 popUp( )函数，为其中的 JavaScript 代码预留出退路很简单:在链接里把 href 属性设 

     真实存在的URL地址，让它成为一个有效的链接，如下所示: 

     <a   href=..http://www.example.com/ ..  
     恒..  onclick=..popUp(.http://www.example.com.j  return  fals ej ">Example</a>  

              •  

----------------------- Page 84-----------------------

   66    第 5 章最佳实践 

                                  •  
           ,  

     因为URL地址出现了两次，上面这些代码显得有点冗长，但我们可以利用 JavaScript 语言把 

 它改写得简明一些。 this 可以用来代表任何一种当前元素，所以可以用 th怡和getAttribute()方 

法提取出 href 属性的值，如下所示: 

     <a   href:::..http://www.example.com/ ..  
     悔 onclick="popUp(this.getAttribute('hr肘'); return  false;">Example</a>  

     老实说，上面这条语句没有精简多少。当前链接的 href 属性还有一个更简明的引用办法 

气一使用由 DOM提供的this.href 属性: 

     <a   href=..http://www.example.com/ ..  
     峙。nclick="popUp(this. href; return  false;">Example</a>  

     不管采用哪种方法，重要的是href 属性现在已经有了合榕的值。与 href =丁avascri pt: . . .  

或href =   "#"相比，这几种变体的效果要好得多。 

     所以，在把 href 属性设置为真实存在的 URL地址后，即使 JavaScript 已被禁用(或遇到了 、 

搜索机)，这个链接也是可用的。虽然这个链接在功能上打了点儿折扣(因为它没有打开γ个新 

窗口) ，但它并没有彻底失效。这是一个经典的"平稳退化"的例子。 

     在本书此前介绍的所有技巧当中，这个技巧是最有用的，但它还有改进的余地。这个技巧 

最明显的不足是:每当需要打开新窗口时，就不得不把一些JavaScript 代码嵌入标记文档中。如 

果能把包括事件处理函数在内的所有 JavaScript 代码全都放在外部文件里，这个技巧将更加完 

善。 

 5.3   向 css 学习 

    此前，我曾以 JavaScript 和 Flash 为例，对技术会因为在诞生初期被人们滥用而造成恶劣后 

果的问题进行了讨论。我们可以从过去的失误里学到很多东西。 

    不过，还有一些技术是从一开始就被人们小心谨慎地使用着的。我们可以从它们那里学到更 

多的东西。 

5.3.1   结构与样式的分离 

    CSS  (层叠样式表)是一项了不起的技术。 CSS 可以让人们对网站设计工作中的各个方面做 

出严格细致的控制。表面上看， CSS 技术并无新内容， CSS 能做到的用<table>和<font>等标签也 

可以做到。 CSS 技术的最大优点是，它能够帮助你将 Web 文档的内容结构(标记)和版面设计 

(样式)分离开来。 

    我们经常会遇到一些几乎每个元素都带有 style 属性的 Web 文档，而这是 CSS 技术最缺乏 

效率的用法之一。真正能从CSS 技术获益的方法，是把样式全部转移到外部文件中去。 

    与JavaScript 和Flash 相比~ CSS 的"出生"日期要晚得多。或许是已经从滥用 JavaScript 和 

Flash 的后果中吸取了教训的缘故，网页设计人员一开始使用 CSS 时就采用了一种深思熟虑、渐 

进增强的态度。 

    把文档的结构和样式分为两部分的 CSS 技术给每个人都带来了方便。如果你的工作是编写 

----------------------- Page 85-----------------------

                ,  

                                                                5.3  向 css 学习  -  67  

     内容，现在只要集中精力把文档的内容正确地标记出来就行了，用不着再与充斥着<table> 

             的模板打交道，也就用不着再担心会把文档的版面设计弄得一团糟。如果你的工 

  设计网页的版面，现在只要集中精力把诸如颜色、字体和位置等在一些外部文件里设置妥当 

   了，而无需再接触文档，最多只需要添加些类或是 id 属性。 

  作为 css 技术的突出优点，文档结构与文档样式的分离可以确保网页都能平稳退化。具备 

   支持的浏览器固然可以把网页呈现得美仑美矢，不支持或禁用了 CSS 功能的浏览器同样可 

     页的内容按照正确的结构显示出来。 

  按这种原则使用 JavaScript 时，我们可以从CSS 身上借鉴到很多东西。 

  2    渐进增强 

  在网页设计人员当中流传着这样一句格言:"内容就是一切"。如果没有内容，创建网站还有 

用? 

  话虽如此，也不能简单地把原始内容发布到网上，而不加任何描述。内容需要用 HTML 或 

      之类的标记语言来描述。在创建网站的时候，给内容加上正确的HTML标记是第一个步 

  或许也是最重要的步骤。我们可以修正那句格言为"标记良好的内容就是一切"。 

  只有正确地使用标记语言才能对内容做出准确的描述。各种标记负责提供诸如"这是列表 

 、  "这是文本段落"之类的信息。如果不使用<1 i>、                      <p>之类的标签，我们就很难把它们区分 

  在给内容加上各种标记后，J就可以使用各种 CSS 指令控制内容的显示效果。 CSS 指令构成 

一个表示层。这个表示层就像是一张透明的彩色薄膜，可以包裹到文档的结构上，使文档的内 

 F一出各种色彩。但即使去掉这个表示层，文档的内容也依然可以访问(只是缺乏色彩而已)。 

  所谓"渐进增强"就是用一些额外的信息层去包裹原始数据。按照"渐进增强"原则创建出 

    页几乎(如果不是"全部".              的话)都符合"平稳退化"原则。 

  类似于CSS，      JavaScript 和DOM提供的所有功能也应该构成一个额外的指令层。 CSS 代码负 

       于"表示"的信息， JavaScript 代码负责提供关于"行为"的信息。行为层的应用方式 

  飞层一样。 

  要想、获得最佳的"表示"效果，就应该把 CSS 代码从 HTh伍文档里分离出来放在一些外部 

  里。像下面这样把CSS 代码混杂在HT:t\征L文档里也不是不可以，但这种做法弊大于利: 

  <p   style="font-weight:  bold;  color:  red;">  
  Be   careful!  
  </p>  

                   、 

  更值得推荐的办法是，先把样式信息存入一个外部文件，再在文档的 head 部分用<1 ink>标签: 
                                                                                                  •  

    这个文件: 

  .warning   {  
    font-weight:  bold;  
    color:  red;  

----------------------- Page 86-----------------------

   68     第 5 章最佳实践                                                  .  

    class 属性是样式与文档内容之间的联结纽带: 

     <p  class="warning">  
     Be  careful!  
     </p>  

     这显然更容易阅读和理解，而且样式信息也更容易修改了。例如，假设你在 100 个文档里使 

用了 warn1ng 类来排版各种警告信息，而现在想统一改变那些警告信息的显示效果，比如把它们 

的颜色都从红色改为蓝色。那么，如果你已经把它们的表示层和结构分开了，就可以很容易地修 

改样式了。 

     .warning  {  
       font-weight:  boldj  
       color:  bluej  

     如果把这个样式混杂在那 100 个文档里，则不得不进行大量的"搜索并替换"操作。 

     显然，把CSS 代码从HTML 文档里分离出来可以让CSS 工作得最好。这个适用于CSS 表示 

层的结论同样适用于JavaScript 行为层。 

5.4     分离JavaScript 

     你此前见到的 JavaScript 代码都已经与 HTM工文档'分街良开了。负责实际完成各项任务的 

JavaScript 函数都已存入外部文件，问题出现在内嵌的事件处理函数中。 

     类似于使用 style 属性，在 HTML文档里使用诸如 onclick 之类的属性也是一种既没有效率 

又容易引发问题的做讼。如果我们用一个"挂钩飞 ，就像CSS 机制中的cl ass 或 id 属性那样，把 

JavaScript 代码调用行为与 HTML文档的结构和内容分离开，网页就会健壮得多。那么，可否用 

下面这条语句来表明"当这个链接被点击时，它将调用 popUp() 函数"的意思呢? 

     <a  href="http://www .example.com/..  class="popup">Example</a>  

    我很高兴告诉大家:完全可以这样做。 JavaScript语言不要求事件必须在HTML文档里处理， 

我们可以在外部JavaScript文件里把一个事件添加到 HTML文档中的某个元素上: 

     element.event  =  action...  

    关键是怎样才能把应该获得这个事件的元素确定下来。这个问题可以利用 class 或 id 属性 

来解决。 

    如果想把一个事件添加到某个带有特定id属性的元素上，用getElementByld就可以解决问题: 

     getElementByld(id).event  =  action  

    如果事情涉及多个元素，我们可以用 getElementsByTagName 和 getAttribute 把事件添加到有 

着特定属性的一组元素上。 

    具体步骤如下所示。 

    (1)把文档里的所有链接全放入一个数组里。 

    (2) 遍历数组。 

    (3) 如果某个链接的class 属性等于popup，就表示这个链接在被点击时应该调用popUp() 函数。 

                                    ‘  

----------------------- Page 87-----------------------

                                                                   5.4   分离 JavaScript         69  

  A把这个链接的 href 属性值传递给popUp() 函数; 

  E取消这个链接的默认行为，不让这个链接把访问者带离当前窗口。 

  下面是实现上述步骤的JavaScript 代码: 

  四r links  =  document.get ElementsByTagName(" a") ;  
  如r (var  i=Oj   i<links.lengthj  i++)   {  
    if (links[i].getAttribute("class")  ==  "pOpUp")   {  
      links[i] .onclick  =  function()   {  
        popUp(this.getAttribute("href"));  
        return  false;  

  以上代码将把调用 popUp( )函数的 onclick 事件添加到有关的链接上。只要把它们存入一个外 

           文件，就等于是把这些操作从盯阻文档里分离出来了。而这就是功离JavaScript"  

  义。 

  还有个问题需要解决:如果把这段代码存入外部JavaScript 文件，它们将无讼正常运行。因 

    代码的第一行是: 

                                                                                           •  

  var  links  =  document.get ElementsByTagName("a")j  

  这条语句将在 JavaScript 文件被加载时立刻执行。如果 JavaScript 文件是从盯ML 文档的 

        用<script>标签调用的，它将在H冗tIL文档之前加载到浏览器里。同样，如果<script> 

    于文档底部</body>之前，就不能保证哪个文件最先结束加载(浏览器可能一次加载多个)。 

       加载时文档可能不完整，所以模型也不完整。没有完整的 DOM，                                         getElementsByTagName  

    就不能正常工作。 

  必须让这些代码在 HTML 文档全部加载到浏览器之后马上开始执行。还好， HTML 文档全 

            将触发一个事件，这个事件有它自己的事件处理函数。 

  文档将被加载到一个浏览器窗口里， document 对象又是 window 对象的一个属性。当 window 

       onload 事件时， document 对象已经存在。 

  我将把我的 JavaScript 代码打包在 prepareLinks 函数里，并把这个函数添加到川ndow 对象的 

oad 事件上去。这样一来，               DOM就可以正常工作了: 

  window.onload  =  prepareLinks;  
  function  prepareLinks ()  {  
    var  links  =  document. get ElementsByTagName(" a") j  
    for  (var  i=Oj   i<links.length;  i++)   {  
      if (links[i].getAttribuie(l  l  ")  ==   "pOpUp")   {  
                                 c  ass 
        links[i].onclick  =  function()   {  
          popUp(this.getAttribute("href"));  
          return  falsej  

  别忘记把popUp 函数也保存到那个外部JavaScript 文件里去: 

----------------------- Page 88-----------------------

                  .  

                   70  
                          第 5 章最佳实践 

                      function  popUp(winURL)  {  
                      }window-open(winURLP"POPUP"'"width=32Opheight=48。"); 

                     这是一个非常简单的例子，但它演示了怎样才能成功地把行为与结构分离开来。在第6 章， 

                 我还会介绍几种可以在文裆加载时把事件添加到元素上去的巧妙办哉。 

                . 5.5  
                         向后兼容 

                     正如前面反复强调的那样，你的网站的访问者很可能未启用 JavaScript 功能。此外，不同的 

                 浏览器对JavaScript 的支持程度也不一样。绝大多数浏览器都能或多或少地支持JavaScript，而绝 

                ‘ 大多数现代的浏览器对 DOM 的支持都非常不错。但比较古老的浏览器却很可能无法理解 DOM 

                 提供的方法和属性。因此，即使某位用户在访问你的网站时使用的是支持 JavaScript 的浏览器， 

                 某些脚本也不一定能正常工作。 
                                                                     •  

                 5.5. 1  
                         对象检测 
坦  ，  ‘ 用  也  向 撒 乱  ， 斗 斗 H 针对这一问题的最简单的解决方案是，检测浏览器对JavaScript 的支持程度。这有点儿像游 

                 乐园里的警告牌:"你必须达到这一身高才能参与这项游乐活动"。换句话说，需要在DOM脚本 

                 里表达出下面这个含义2"你必须理解这么多的JavaScript 语言才能执行这些语句"。 

                     这个解决方案很容易实现:只要把某个方法打包在一个 if 语句里，就可以根据这条 if 语句 

                 的条件表达式的求值结果是 true (这个方法存在)还是 fal se  (这个方法不存在)来决定应该采 

                 取怎样的行动。这种检测称为对象检测 (object detection) 。第2 章介绍过，几乎所有的东西(包 

                 括各种方法在内)都可以被当做对象来对待，而这意味着我们可以容易地把不支持某个特定DOM 

                 方讼的浏览器检测出来: 

                      if (method)   {  
                      statements  

                     例如，如果有一个使用了 getElementByld()方榕的函数，就可以在调用 getElementByld()方法 

                 之前先检查用户所使用的浏览器是否支持这个方法。在使用对象检测时，一定要删掉方法名后面 

                 的圆括号，如果不删掉，测试的将是方法的结果，无论方法是否存在。 

                     function  myFunctio叫) {  
                       if  (document.getElementByld)  {  
                         statements  using  getElementByld  

                 因此，如果某个浏览器不支持get日创entByldO方法，它就永远也不会执行使用此方法的语句。 

                     这个解决方案的唯一不足是，如此编写出来的函数会增加一对花括号。如果需要在函数里检 

                 测多个DOM方法和/或属性是否存在，这个函数中最重要的语句就会被深埋在一层又一层的花括 

                 号里。而这样的代码往往很难阅读和理解。 

                                                                                 、 

                     把测试条件改为"如果你不理解这个方法，请离开"则更简单。 

                     为了把测试条件从"如果你理解……"改为"如果你不理解……"，需要使用 u逻辑非"操 

----------------------- Page 89-----------------------

                                                                                                                                      、 

                                                                                         5.5    向后兼容             71  

      ，  这个操作符在JavaScript 语言里表示为一个惊叹号: 

      主.f ( ! method)  

      费试条件中的"……请离开"可以用一条 return 语句来实现。因为这相当于中途退出函数， 

         它返回布尔值false 比较贴切。用来测试getEl ementBy 1 d 是否存在的语句如下所示: 

      去 ( !getElementByld)  {  
        主eturn false;  

      因为花括号部分只有 return false 一条语句，我们可以把它简写成一行: 

      if (!getElementByld)  return  false;  

      如果需要测试多个方在去或属性是否存在，可以用"逻辑或η 操作符将其合并，这个操作符在 

             语言里表示为两个竖线符号。如下所示: 

      if (!getElementByld   II  !getElementsByTagName)  return  false;  

      如果这是游乐园里的一块警告牌的话，它的意思是"如果你不理解 getElementByld 和 

       ementsByTagName，你就不能参与这项游乐活动"。 

      现在，我将按照这一思路，在用来把 onclick 事件添加到链接上去的网页加载脚本里插入­ 

    if语句。那个脚本里使用了 getElementsByTagName，所以需要插入一条 i f语句去检查浏览器是 

      解这个方法: 

      window.onload  =  function()   {  
         if  (!document.getElements~yTagName) return  falsej  
        var  lnks  =  document~getElementsByTagName( 飞11 )   j  
        for  (var  i=oj   i<lnks.lengthj  i++)   {  
           if  (lnks[i].getAttribute( 气lass") ==      "popup")   {  
             lnks[i].onclick  =  function()   {                                            •  
               popUp(this.getAttribute("href"));  
               return  falsej  

                                                               ,  

                                          •  

                   咱也 

      虽然只是一条简单的 i f 语句，但它可以确保那些"古老的"浏览器不会因为我的脚本代码 

面出问题。这么傲是为了让脚本有良好的向后兼容性。因为我在给网页添加各有关行为时始终遵 

循了"渐进增强"的原则，所以可以确切地知道我添加的那些都能平稳退化，我的网页在那些"古 

老的"浏览器里也能正常浏览。那些只支持一部分 JavaScript 功能但不支持 DOM的浏览器仍可 

以访问我的网页的内容。 

5.5.2      浏览器嗅探技术 

      在JavaScript 脚本代码里，在使用某个特定的方格或属性之前，先测试它是否真实存在是确 

保向后兼容性最安全和最可信的办法，但它并不是唯一的办法。在浏览器市场群雄逐鹿的那个年 

代，一种称为浏览器嗅探 (brovvsërsnJfftrng)  的技术曾经非常流行。 

      u浏览器嗅探"指通过提取浏览器供应商提供的信息来解决向后兼容问题。从理论上讲，可 

                                                                                                                    .  

----------------------- Page 90-----------------------

                                           .‘、 

   72    第 5 章最佳实践 

 以通过 JavaScript 代码检索关于浏览器品牌和版本的信息，这些信息可以用来改善 JavaScript 

 本代码的向后兼容性，但这是一种风险非常大的技术。 

     首先，浏览器有时会"撒谎"。因为历史原因，有些浏览器会把自己报告为另外一种浏览器， 

还有一些浏览器允许用户任意修改这些信息。 

     其次，为了适用于多种不同的浏览器，浏览器嗅探脚本会变得越来越复杂。如果想让浏览 

 嗅探脚本能够跨平台工作，就必须测试所有可能出现的供应商和版本号组合。这是4··个无穷 

任务，测试的组合情况越多，代码就越复杂和冗长。 

     最后，许多浏览器唉探脚本在进行这类测试时要求浏览器的版本号必须得到精确的匹配。 

此，每当市场上出现新版本时，就不得不修改这些脚本。 

     令人感到欣慰的是，充满着风险的浏览器嗅探技术正在被更简单也更健壮的对象检测技术 

取代。 

 5.6   性能考虑 

    很多人都会忽视脚本对 Web 应用整体性能的影响。为保证应用流畅地运行，在为文档 

和应用脚本时，需要注意一些问题。 

5.6.1   尽量少访问 DOM 和尽量减少标记 

    访问 DOM的方式对脚本性能会产生非常大的影响。以下面代码为例: 

     if  (document.getElementsByTagName("a").length  > 0)   {  
      var  links  =  document.ge~ElementsByTagName("a");  
      for  (var  i=O;   i<links.léngth;  i++)   {  
        //对每个链接做点处理 

    搞清楚这段代码要干什么，自然就会明白问题在哪里了。首先，它取得了所有<a>元素，然 

后检查它们的个数是不是大于0: 

     if (document.getElementsByTagName("a").length  > 0)   {  

    然后，如果大于0 ，它会再次取得所有<a>元素，循环遍历这些元素并应用某些操作: 

    var  links  =  document.get ElementsByTagName("a")j  
    for  (var  i =O;  i<links.length;  i++)   {  

    虽然这段代码可以运行，但它不能保持最优的性能。不管什么时候，只要是查询DOM 中的 

某些元素，浏览器都会搜索整个DOM树，从中查找可能匹配的元素。这段代码居然使用了两次 

getElementsByTagName 方法去执行相同的操作，浪费了一次搜索。更好的办法是把第一次搜索的结 

果保存在一个变量中，然后在循环里重用该结果，比如: 

    var  links  =  document.getElementsByTagName("a ") ;  
    if  (links.length  > 0)   {  
      于or (var  i=O;   i<links.length;  i++)   {  、 

        //对每个链接做点处理 

    }  

----------------------- Page 91-----------------------

                                                            .  

                                                           5.6  性能考虑       73  

    这样一来，代码功能没有变，但搜索DOM的次数由两次降低到了一次。 

    前面例子中的问题还比较容易发现。要是你有多个函数重复做同一件事，恐怕就不太好发现 

  ，比如，要是有一个函数检查每个链接中的 popup 类，而另外一个函数检查每个链接中的 hover 

  ，那么同样也会造成搜索浪费。在多个函数都会取得一组类似元素的情况下，可以考虑重构代 

  ，把搜索结果保存在一个全局变量里，或者把一组元素直接以参数形式传递给函数。 

    另一个需要注意的地方，就是要尽量减少文档中的标记数量。 过多不必要的元素只会增加 

OOM树的规模，进而增加遍历DOM树以查找特定元素的时间。 

5.6.2  合并和放置脚本 

    本书中的多数示例都使用外部脚本文件，在文档中通过<script>元素把它们包含进来，如下 

所示: 

    <script  rc="script/function.js"></script>                                 ,  

    包含脚本的最佳方式就是使用外部文件，因为外部文件与标记能清晰地分离开，而且浏览器 

也能对站点中的多个页面重用缓存过的相同脚本。不过，类似下面这种情况，最好也不要出现: 

    推荐的做怯是把 functionA.js、     functionB.js、 functionC.js 和 functionD.js 合并到一个脚本 

文件中。这样，就可以减少加载页面时发送的请求数量。而减少请求数量通常都是在性能优化时 

首先要考虑的。 

    脚本在标记中的位置对页面的初次加载时间也有很大影响。传统上，我们都把脚本放在文档 

酌<head>区域，这种放置方法有一个问题。位于<head>块中的脚本会导致浏览器无法并行加载其 

他文件(如图像或其他脚本)。一般来说，根据 HTTP 规范，浏览器每次从同一个域名中最多只 

能同时下载两个文件。 而在下载脚本期间，浏览器不会下载其他任何文件， 即使是来自不同域名 

的文件也不会下载，所有其他资源都要等脚本加载完毕后才能下载。 

    按照本章前面讨论的渐进增强和分离 JavaScript 观点，把<script>标签放到别的地方并不是 

问题。把所有<script>.标签都放到文档的末尾， </body>.标记之前，就可以让页面变得更快。即使 

这样，在加载脚本时， window 对象的 load 事件依然可以执行对文档进行的各种操作。 

5.6.3  压缩脚本 

    在写完了脚本，做了优化，而且也将它放到文档中的适当位置之后，还有一件事可以加快加 

载速度:压缩脚本文件。 

    所谓压缩脚本，指的是把脚本文件中不必要的字节，如空格和注释，统统删除，从而达到"压 

缩"文件的目的。好在，有很多工具都可以替你来做这件事。有的精简程序甚至会重写你的部分 

代码，使用更短的变量名，从而减少整体文件大小。 

    比如，假设你有如下代码: 

                           ,  
                                                                                 ,  

----------------------- Page 92-----------------------

                                                                                                                                         .  

                74        第 5 章最佳实践 

                                                                                、 

•  

                    function  showPic(whichp ic)  {  
                      //取得图片的href属性 
                      var  source  = whichpic.getAttribute("href");  
                      //取得占位符 
                      var  placeholder  =  document.getElementByld("placeholder");  
                      //更新占位符 
                      placeholder.setAttribute("src" ,source)j  
                      //使用图像的 title 属性更新文本描述 
                      var  text  = whichpic.getAttribute("title");  
                      var  description  =  document.getElementByld("description");  
                                                                                                                                     •  

                   压缩之后的代码就会变成下面这样: 

                    function  showPic(a){var  b=a.getAttribute("href");document.get  
                   ..ElementByld("placeholder"). setAttribute("src勺的;a.getAttribute 
                    .. ("title")jdocument.getElementByld("description")};  

                   精简后的代码虽然不容易看懂，却能大幅减少文件大小。多数情况下，你应该有两个版本， 

             一个是工作副本，可以修改代码并添加注释;另一个是精简副本，用于放在站点上。通常，为了 

             与非精简版本区分开，最好在精简副本的文件名中加上min字样: 

                    <script  src="scripts/scriptName.min.js"></script>                                                                    '  

                   下面是推荐给读者的几个有代表性的代码压缩工具: 

                   口 Douglas Crockford 的 JSMin (h句://www.crockford.comljavascriptJjsmin.h伽让) ,  

                   口雅虎的YUI Compressor  (http://d~veloper.yahoo.comlyui/compressor);  

                   口谷歌的Closure Compiler  (h句://closure-compiler.appspot.comlhome )。 

                   这些工具都有选项，可以在必要时用来最大程度地压缩文件。 

             5.7       小结 
                                                                                                                                            ,  

                   本章介绍了一些与DOM脚本编程工作有关的概念和实践，它们是: 

                   口平稳退化 
                                                                                    •  

                   口分离JavaScript 

                   口向后兼容 

                   口性能考虑 

                   在学习和使用 Flash 和 CSS 等其他一些技术时获得的经验可以帮助我们用好 JavaScript。只 

             有勤于思考、善于借鉴，才能编写出高品质的脚本。 

                                      •  

----------------------- Page 93-----------------------

                                                                   •  

  本章内容 

  口把事件处理函数移出 

  口向后兼容 

  口确保可访问 

  在第4章里，我们创建了一个JavaScript 图片库。在第5 章里，我介绍了一些JavaScript 编程 

    践，在这一章里，我将运用它们改进图片库。 

  "勤于思考"是每位有创新精神的网页设计人员都应该具备的特质。无论是编写 CSS 脚本还 

JavaScript 脚，本，也无论是直接编写代码还是使用可视化设计工具，一名优秀的网页设计人员 

    在每个细节上问自己这样一个问题:"是否还有更好的解决办怯?" 

 正如在上一章里看到的那样，与DOM脚本编程工作有关的问题不外乎平稳退化、向后兼容 

  离JavaScript这几大类。这些问题的解决方式和解决程度影响着网页的可用性和可访问性。 

     快速回顾 

 在第4 章里，我编写了一个用来替换"占位符"图片的 src 属性的脚本，只用一个网页就建 

  了图片库。这是最终完成的函数代码清单: 

  f unction  showPi c(whichpic) .  {  
    var  source  =  whichpic.getAttribute ("href")j  
    var  placeholder  =  document.get ElementByld("placeholder")j  
    placeholder . setAttribute("src" ,source)j  
    var  text  =  whichpic.getAttribute("title")j  
    var  description  =  document.getElementByld("description")j  
    description.firstChild.nodeValue  =  textj  

 下面是用来调用此函数的HTML 片段: 

  <u l>  
  <1i>  
     <a   href:"images/fireworks.jpg"  onclick="showPic(this)jreturn  falsej  "  title="A  
  .. fireworks  display ">Fireworks</a>  
    </li>  

----------------------- Page 94-----------------------

           76       第 6 幸 案例研究:             图片库改进版 

                <1i>  
                  <a   href="images/coffee.jpg"  onclick="showPic(this)j  return  false;  气it1e="A cup  of  
              -  black  coff ee">Coffee</a>  
                <!li>  
                <1 i>  
                  <a  href=飞mages/rose.jpg"  onclick=飞howPic(this)j return  falsej 吨itle="A red , red  
              -  rose">Rose</a>  
                </li>  
                <li>  
                  <a   href="images/bigben.jpg"   onc1ick="showPic(this)j  return  falsej  "title= "The  
              -  famous  clock">Big  Ben</a>  
                </li>  
              </ub  
              <p  id="description">Choose  an  image . </p>  
              <img  id="p1aceholder"  src~" images/p1aceholder.gif"  alt="  my   image  ga1lery"  1>  

              现在，为改进这个解决方案，我们要提出几个问题。 

         6.2     它支持平稳退化吗 

              第一个问题是:"如果JavaScript 功能被禁用，会怎样? "  

             仔细检查过代码后，我得出的结论是我的脚本已经为此预留了退路:即使 JavaScript 功能已 

        被禁用，用户也可以浏览图片库里的所有图片，网页里的所有链接也都可以正常工作: 

              <1i>  
                <a   href::;"images/fireworks.jpg"  onclick::;"showPic(this)jreturn  falsej"  title::;"A  
              恤. fireworks  display ">Fireworks</a>  
              </1i>  

             在没有JavaScript "干扰"的情况下，浏览器将沿着 href 属性给出的链接前进， 用户将看到 

        一张新图片而不是"该页无法显示"之类的出错信息。虽说用户体验比用 JavaScript 的效果要略 

        差一些，但网页的基本功能并未受到损害一一页面上的所有内容都可以访问。 

             如果我当初选用的是 "javascript:"伪协议，链接将如下所示: 

              <1i>  
             .  <a_ href="javascript:showPic('  images/coffee.jpg ') ;  return  falsej"title="A  cup  of  
              -  black  coffee">Coffee</a>  
              </li>  

             如果我把这些链接都写成上面这样，它们在不支持或禁用了 JavaScript 功能的浏览器里将毫 

        无用处。 

             类似地，把这些链接写成"#"记号也会导致类似的问题，但令人遗憾的是，这个技巧在那些 

        利用剪贴操作"编写"的JavaScript 代码里相当常见。类似于使用 "javasedpt:" 伪协议时的情况， 

        如果当初使用的是"#"记号，那些没有启用 JavaScript 功能的用户也将无法正常浏览我的图片库: 

             <1i>  
                <a   hre于="#"   onclick=" showPic ('  ~mages/rose. j pg' ) j  return  falsej "ti tle=" A red ,  red  
             .- r ose">Rose</a>  
 '          - '(11i>  

             把 href 属性设置为一个真实存在的值不过是举手之劳，但图片库却因此能够平稳退化。虽 

        说没有启用JavaScript 功能的用户需要在浏览器里点击"后退"按钮才能重新看到我的图片清单， 
,  
        但这总比根本看不到要好得多吧。 

             图片库通过了第一个测试。 

----------------------- Page 95-----------------------

                                                                   '                                                                                                                                                                                 ‘  

                                                                                                                                                                                          •  

                                                                                                               6.3        它的 JavaScript 与 HT孔1L标记是分离的吗                                                                 77  

                                                      它的 JavaScript 与 HTML 标记是分离的吗 

                                                下一个问题与在标记文裆里调用 JavaScript 代码的方式有关:文档的结构与文档的行为分开 

                                                ?换句话说，网页的行为层 (JavaScript) 是作用于其结构层 (HT岛且)之上的，还是两种代 

                                                         一起? 

                                                具体到图片库这个例子，答案当然是"它们也杂在一起了"。 

                                                当初我是把onclick 事件处理函数直接插入到标记文档里的，如下所示: 

                                                 di>  
                                                                                                                                                                                                               •  
                                                    <a   href="images/bigben .j pg "  onclick=" showPic(this);  return  falsej"title="The  famous  
                                                 .. clock">Big  Ben</a>  
                                                 </li>  
                                                                                                                     ‘  

                                                理想情况下，应该在外部文件里完成添加 onclick 事件处理函数的工作，那样才能让标记文 

                                                       "杂质"，就像下面这样: 

                                                d   i>  
                                                    <a   href="images/bigben.j pg "  title:;::"The  famous  clock ,, >Big  Ben</a>  
                                                </li>  

                                                把JavaScript 代码移出 HTML文档不是难事，但为了让浏览器知道页面里都有哪些链接有着 

                                                    的行为，我必须找到一种"挂钩"把JavaScript 代码与HTl\征文档中的有关标记关联起来。 

                                           多种办法可以让我达到这一目的。 

                                                可以像下面这样给图片清单里的每个链接分别添加一个如下所示的 class 属性: 

                                                <li>  
                                                    <a   hr ef="images/bigben .jpg "  class= "gallerypic"  title", "The  famous  clock">Big  Ben</a>  
                                                <Ili>  

                                               但这种技术不够理想，这与给它们分别添加事件处理函数同样麻烦。 

                                                图片清单里的各个链接有一个共同点:它们都包含在同一个列表清单元素里。给整个清单设 

                                       置一个独一无二的ID 的办法要简单得多: 

                                 0   0  0  0  ·  A  v E  、 h  -  o  b σ  4  、 1 
                                                             "tnHz 
                                                      l - 
                                                                --rrrr  
、      J       、      ‘       ， "  、 "  J " ·  v  " n  u n u  』 n  A ·  白 v  、 k n  3 .  P  ， A b T ， 、 
                                                                   arTFTFTFT  
                                                                          ammmm  
                                                                          - i 
                                                   u--               nku--=---- 
                                                                  meeee  
                                                                                   UVJ,,,,,,,ffr  
              /    、     /    、 、 ，  ，  ，/ 」  白品  E  、、  ，  / ，  ，  /』  、 咽 白  」  血、 = 』 白 」 

      U M  、  ， 、  J  、  J  、 ‘ ，  、  J 、  J 、  ，  4                                  ·  n u "  r J  i  1     4 "- C τ . u  e "  U c H  k nn - - - l ， i ， 、  ,nUPLnwn/ 、 、 " F i    ,/  
                                                                                     FTC-                                                          4                -1r 
                                                                                                                      -ta-""  
                                                                                                                            AHUP  
                                                                                                               忐   牛 
                                                                                                                                 rTra  
                                                       〈 气                 『                                                      r  a          e      a       、  J   u  n    v  2  F  、  / ， ，  、 
                                                                                                                                       wiDZs we2u  
                                                                                                                                                                >            r 
                                                                                                                                                      54 
                                                          H   n  d    『 唱 、  .   L  O  r M  n           L σ  r  、  d  C a  M   2    4   γ     仨 
                                                                                            we·                                                         nVFTenD  
                                                                                                         n                                                   MY"2"  
                                                                                                   snUE"ny                                                              eea  
                                                                                          erTeku  
                                                                                                --nv                                     nv1 
                                                                                                                                               e      i 
                                                                                                                                                                       rrT,f  
                                                                                                                                                                 「 
                                                                                                                                                    4 
                                                                                               A     -    -  L  L 
                                                                                                                         - 
                                            . d 吨 / 、 冉  、  . d · d  吨 4  d                              a    A       」              』        d                       『     仇 
                                                                                                                         -etn  
                                                                                                         v- 
                                                                                                    · 
                                                                                                  晶    。 
                                                  1 - i τ 

                                                                                        俨                      、                   正          i 
                                                                                                                                                                              , 
                                                                                               t  T  -  ·  1 - L T + n u a 
                                                                                                                                                                 rLe 
                                                                                                                                                                                、 
                                                       〈               、     b  俨 σ     v  h      σ                    u    n    "    h     v H      n        O 
                                                             n 
                                                                                                 叮 
                                                                                                                                                                    T 
                                                                                                                                                    nvnv"  
                                                                                                                               nvrT  
                                                                 5      n     S      T                =     i 
                                                                                                                                         2                                   f  
                                                                                                          L 
                                                                                2                             o     U     A     '                                             a J 
                                                                                                                                                     ' 
                                                                        4                        E 
                                                             HtnH 
                                                                                                                 」 
                                                                                                                                         ‘ 
                                                  - - i B ，  ，  、  品T  · 、   吨  -   D   E  R   J 

                                            、  ，  ，  ， 品  .  a  -〈  b  p - · 、 · d 气 、 ，              牛  a  、牛 』 凸  "     』     』 白  F  ， nv ， 、     S 〈   ， 
                                                                                                         1  
                                                       咱         。  吨    d                    " 1  L ·  L = 4   州 e    G                          n     / 

                                            - · τ · d  1 吨  -  z  t/ ·  、 〈 i 牛 、 ·nH  ­ ·  · 、 t 、      + t + 、                m  m U H          t    4 4          < 

                                                                                                                                                  vh   >                 > 
                                                                                                               i 
                                                                                     D  
                                                                                                         L 
                                                                                      品          E                                             」          恳 
                                                                                                                 』 
                                                                                               - 
                                                                                                d 
                                                牛 ， 、  ，  ，, ， L  〉 τ 

                                                  J  

                                               你将看到，虽然只有这一个"挂钩"，但对JavaScript 来说已经足够了。                                                                                                                         ",  

                                       6 .3.1           添加事件处理函数 

                                                                         •  

                                               现在，需要编写一个简短的函数把有关操作关联到onclick事件上。我将其命名为prepar听alleryo 

                                                                                                                                                                               •  

----------------------- Page 96-----------------------

   78      第 6 章 案例研究:图片库改进版 

                                                     .  
     下面是我想让这个函数完成的工作。 

     口检查当前浏览器是否理解getElementsByTagName。 

     口检查当前浏览器是否理解getElementByld。 

     口检查当前网页是否存在一个id 为 imagegallery 的元素。 

     口遍历imagegallery 元素中的所有链接。 

     口设置onclick 事件，让它在有关链接被点击时完成以下操作: 

        ·把这个链接作为参数传递给showPic 函数: 

        ·取消链接被点击时的默认行为，不让浏览器打开这个链接。 

     我将从定义prepareGallery 函数开始。这个函数不需要参数，所以在这个函数名字后面的圆 

括号里用不着写出任何东西: 

     function  prepareGallery()   {  

     1. 检查点 

     我想做的第一件事是检查当前浏览器是否理解名为getElementsByTagName 的DOM方法。我将 

在这个函数里使用这个方法，需要保证不理解这个方法的老浏览器不会执行这个函数: 

     if (!document.getElementsByTagName)  return  false;  

     这条 if 语句相当于这样一句话:                   "如果 getElementsByTagNQme 未定义，请现在就离开。"理解 

这个DOM方法的浏览器将继续执行。 

     现在，对名为 getElementByld 的DOM方法进行同样的检查，因为我的函数也会用到这个方法: 

                                                        、 

     if  (!document.getElementByld)  return  false;  

     可以把这两项检查组j合在一起:"只要你不理解这两个方格中的其中一个， i青立刻离开": 

     if (!document.getElementsByTagName   II  !document.getElementByld)return  falsej  

或者 

     var  supported  =  document.getElementsByTagName  &&   document.getElementByldj  
     if (   !supported  )  returnj  

     不过，上面这样的代码开始变得比较冗长并难以阅读。事实上，                                         从可读性的角度看，把多项 

测试写在同一行上的做法不一定是最好的主意。有不少程序员喜欢像下面这样把 return 语句单独 

写在一行上: 

     if (!document.getElementsByTagName)  
       return  falsej  
     if (!document.getElementByld)  
       return  falsej  

     如果你也喜欢这样的写法，建议最好是用花括号把 return 语句括起来，如下所示: 

     if (!document.getElementsBy丁agName)  {  
       return  falsej  
     }  
     if (!document.getElementByld)   {  
       return  falsej  

                                                             .  

----------------------- Page 97-----------------------

                                                                                                                             •  

                                                                                              •  
                                                                                                              ,  

                                            6.3    它的 JavaScript 与 lJTML标记是分离的吗                            79  

                                                                                     •  

      这或许是最清晰、最具有可读性的代码书写方式。 

      把这些测试写在同一行上还是写成好几行是你的自由，你完全可以根据自己的喜好来选 

      完成这两项具有普遍适用性的测试后，我还安排了一个更具针对性的测试。我正在编写的这 

      数将处理 id 等于 imagegallery 的那个元素所包含的链接，假如这个元素并不存在，我的这 

      数也就无需继续执行了。 

      与前面两项测试一样，我将使用"逻辑非"操作符来进行这一测试: 
                                                                                                           ,  

      if (!document.getElementByld(飞magegallery")) return  false;  

      出于个人偏好，你也许更喜欢下面这样的写法: 

      if (!document.get ElementByld(limagegallery "))  {  

      这项测试是一个预防性措施。现在我知道调用这个JavaScript 函数的文档里有一个叫属性值 

等于imagegallery 的列表清单元素，但我不敢确定这在将来会不会发生变化。有了这个预防性措 

莲， 即使以后我决定从网页上删掉图片库，也用不着担心这个网页的JavaScript 代码会突然出错。 

瓮HTh在L 文档的内容与JavaScript 代码所实现的行为分离开来的重要性由此可见一斑。                                                      作为一条 

原则，如果想用 JavaScript 给某个网页添加一些行为，就不应该让 JavaScript 代码对这个网页的 

结构有任何依赖。 

                                     AA :L 叫结构化                   stfucted  
                                                                                            。其中 

                                             个出口。  ， 

                                           原则:                       lleryO             头部分使用 

                                              数的 

                    p  我很 

                                                                   出口集中出                   的开头 
                    ，如果一                 多个出口， 

----------------------- Page 98-----------------------

                                                                            •  

      80      第 6 章 案例研究:图片库改进版 

                                                                                                             、 

         出于可读性的考虑，我把那些 return fa 1 se 语句全部集中到 prepareGallery 的开头部分: 

         function  prepareGallery()   {  
           if (!document.getElementsByTagName)  return  false;  
           if  (!document.getElementBy Id)  return  false;  
          if ( !document .getElementById("imagegallery"))  return  false ;  

         必要的测试和检查工作就绪之后，我现在开始写事件处理函数的核心功能。 

        2. 变量名里有什么 

        首先，我想把事情弄得稍微简单些:重复多次地敲入像 document.getElementByld( 飞mage 

   ga 11 ery")这么长的一串实在很麻烦，所以我决定创建一个名为 gall ery 的变量来简化它:                                                       .  

         var  gallery  =  document.getElementById( 飞magegallery") ;  

        完全可以给变量起一个另外的名字。我之所以选用 "gallery" 来命名，是因为它的含义就是 

   图片库。选择一些有意义的单词来命名可以让代码更容易阅读和理解。 

                                                                           一 

    注意在为变量命名时一定要谨慎从事。有些单饲在JavaScript 语言旦有特殊的含义和用途，这 

           些统称为"保留字"的单询不能用做变量名。另外，现有 JavaScript 函数或方法的名字也 

           不能用来命名变量。不要使用诸如 alert、                          var 或 if 之类的单坷作为变莹的名字。 

        按照计划，需要遍历 imagegallery 元素中的所有链接，我会用到 getElementsByTagName。利用 

   刚刚创建的 gallery 变量，可以把对getElementsByTagName 的调用简单地写成下面这个样子: 

         gallery.getElementsByTagName("a")  

        它等价于下面这个长长的记号: 

         document . getElementById("imagegallery") .getElementsByTagName(飞") 

        现在，我想把事情弄得更简单些。我决定把上面这个记号所代表的数组(更准确地说，是一 

   个节点列表)赋值给一个短变量， 并将该变量命名为 1 i nks:  

         var  links  =  gallery.getElementsByTagName("a");  

•  
        下面是prepareGal1ery 函数目前的样子: 

         function  prepareGalleryO   {  
           if (!document.getElementsByTagName)  return  false;  
           if (!document.getElementById)  return  falsej  
           if (!document.getElementById("imagegallery"))  return  falsej  
           var  gallery  = document.get ElementByld("imagegallery");  
           var  links  = gallery.get ElementsByTagName("a");  

        准备工作己就绪。我已经安排好了必要的检查工作，还创建了几个变量。 

        3. 遍历 

        我想遍历处理 links 数组里的各个元素，可以用一个 for 循环来完成这项工作。 

        首先，把计数器的初始值设置为零。每处理 links 数组里的一个元素，这个计数器就增加一 

   个 1 。下面是对计数器进行初始化的语句: 

----------------------- Page 99-----------------------

                                                                                                                    •  
                           、 

                                         6.3   它的 JavaScript 与 HT孔1L标记是分离的吗                        81  

      var  í   = 0;  

     把充当循环计数器的变量命名为 "i" 是一种传统做法。字母 "i" 在这里的含义是 "increment，， 

       ) ，许多程序设计语言里都习惯使用 "i"  作为递增的变量的名字。 

      下面是这个循环的控制条件: 

      i  < links.length;  

      上面这个表达式的含义是:只要变量 1 的值小于 links 数组的 length 属性值，这个 for 循环 

     直循环下去。 length 的值总是等于 1 inks 数组里的元素总个数。因此，如果 1 inks 数组包含4 

   一~，那么只要 1 小于4 ，我的 for 循环就将一直循环下去。 

     最后，使用下面这个记号来给循环计数器加上一个 1 :  

      1++;  

     这个记号是下面这条语句的简写形式: 

      i  = i+1;  

     上面这几条语句的效果是:这个 fo广循环每执行一次，变量 1 的值就会加 1 ;一旦变量 1 的 

        1、于 1 i nks . 1 ength ，循环就结束。因此，如果 links 数组包含 4 个元素，这个循环将在 1 

      4 时结束执行。这个循环将总共执行4 次一一别忘了，变量 1 是从零开始计数的。 

     下面是 for 循环的开头部分: 

     for  (  var  i=O;   i  < links.length;  i++)   {  

     4. 改变行为                                                                                                       •  

     具体到这个例子，我想要完成的操作是改变 1 inks 数组中的各个元素的行为。事实上，与其 

宦l inks 是一个数组，不如说它是一个节点列表 (node list)                            来得更准确。它是一个由 DOM节点 

韵成的集合，这个集合里的每个节点都有自己的属性和方法。 

     我最感兴趣的是它的 onclick 方法，像下面这样为它添加一个行为: 

     links[i] .onclick  = functi on()  {  

     这条语句定义了一个匿名函数。这是一种在代码执行时创建函数的办法。具体到上面这条语' 

句， 它把 1 i nks[;]元素的 onclick 事件处理函数指定为这个匿名函数。这个匿名函数里的所有语 

句将在1 inks[i]元素所对应的链接被点击时执行。 

     1 inks[i]元素的值会随着变量 1 的递增而变化。如果假设 l inks 集合里包含4个元素，那么第 

一个元素将是 links[O] ，最后一个元素是 links[3]。 

     我传递给 showPic 函数的参数是关键字 th怡，它代表此时此刻与 onclick 方法相关联的那个 

元素。也就是说， this 在这里代表 1 inks[汀，而 links[i]又对应着 1 inks 节点列表里的某个特定 

fA节点: 

                                                                                                            •  

     showPic(this);  

     我还需要再多做一件事，即禁用有关链接的默认行为。如果 showPic() 函数执行成功，就不 

让浏览器执行某个链接被点击时的默认操作。和以前一样，我想取消这种默认行为，不让浏览器 

----------------------- Page 100-----------------------

                                                      ‘             .  

     82            第 6 幸 案例研究:图片库改进版 

 前进到那个链接所指向的目的地: 

         return  false;  

         返回布尔值 false 相当于向浏览器传递了这样一条消息:"按照这个链接没被点击的情况采 

取行动。" 

         最后，还需要用一个右花括号来结束这个匿名函数。下面是我最终完成的匿名函数: 

         咱 、 . K L 『  、       咱                        g f ， ‘  、 ， 
                                           rT  
                                    LK·'  
                                                  、 . 
                    --nrz   ·---cdai             4L  
             n  I -  d  · 1 - o i L r r                     B  J 
                 so+L                         nH     0 nH  
             nHCJV&        nH&La                FL  
         i                 · 4 E 
                                             HU  
                                       - 
           u  w  t 
            .•                          - 
                                、 」 
                        -FL                        .•  
                                                        飞 J 
                                                             、 

              』 
            A H        T F 飞 俨  · n  ·i 、  P  b 『 · f t 

              』 
                                > 

         5. 完成JavaScript函数 

         现在，需要用一个右花括号来结束for 循环: 

         for  (  var  i=O;   i   < links.length;  i++)   {  
             links[i].onclick  =  function()  {  
                showPic(this);  
                return  false;  

         最后，再用一个右花括号结束prepareGal l ery 函数。下面是这个函数完整代码清单: 

         function  prepareGallery()   {  
             if (! docu阳lt.getEle阳ltsByTagName) return  falsej  
             if (!document.getElementByld)  return  falsej  
             if (!document.get ElementByld("imagegallery"))  return  false;  
             var  gallery  =  document.getElementByld("imagegallery")j                                                          •  
             var  links  = gallery.get ElementsByTagName("a")j .  
             for  (  var  i=Oj   i   < links.lengthj  i++)   {  
                links[i].onclick . =  function()   {  
                    showPic(this);                                                                                                                                        飞 
                   return  falsej  

         调用此函数，就会把 onc1 ick 事件绑定到 id 等于"imagegallery" 的元素内的各个链接元素 

上。 

 注意如果想了解JavaScript 的其他信息，可以参考Aaron Gustafon 与我合芳的 AdvancED DOM  

             Scrip咀ng: Dynamic Web Desi伊Techniques  (J气press ，                                               2007) 。 

6.3.2            共享onload 事件 

         我必须执行prepareGa11ery 函数才能对onc1ick 事件进行绑定。 

         如果马上执行这个函数，它将无法完成其工作。如果在HTML文档完成加载之前执行脚本， 

此时DOM是不完整的。具体到 prepareGa11ery 函数，它的第3 行代码将测试"imagega 11 ery"元素 

是否存在，如果DOM不完整，这项测试的准确性就无从谈起，事态的发展就会偏离我的计划。 

----------------------- Page 101-----------------------

     、 

    、 

                                                                            、 

                                             6.3   它的 JavaScript 与 HT?\征标记是分离的吗                              83  

      应该让这个函数在网页加载完毕之后立刻执行。网页加载完毕时会触发一个onload 事件， 

这个事件与川ndow 对象相关联。为了让事态的发展不偏离计划，必须把prepareGallery 函数绑 

定到这个事件上: 

      window.onload  = prepareGallerYj  

      它解决了我的问题，但像现在这样还不够完美。 

      假设我有两个函数: firstFunction 和secondFunction 。如果想让它们俩都在页面加载时得 

到执行，我该怎么办?如果把它们逐一绑定到 onload 事件上，它们当中将只有最后那个才会被 

实际执行: 
      window.onload  =  firstFunctìonj              ,  

      window.onload  =  secondFunctionj  

     secondFunction 将取代 fi r吐Function。你可能会想:每个事件处理函数只能绑定一条指令。 

      有一种办法可以让我避过这一难题:可以先创建一个匿名函数来容纳这两个函数，然后把那 

   匿名函数绑定到 onload 事件上，如下所示: 

      window .on l oad  =  function()   {  
        firstFunction()j  
        secondFunction()j  

      它确实能很好地工作一一在需要绑定的函数不是很多的场合，这应该是最简单的解决方案 

了。 

      这里还有一个弹性最佳的解决方案一一不管你打算在页面加载完毕时执行多少个函数，它都 

可以应付自如。这个方案需要额外编写一些代码，但好处是一旦有了那些代码，把函数绑定到 

        .onload 事件就非常易行了。 

     这个函数的名字是 addLoadEvent，它是由 Simon Willison  (详见 http://simon.血cu世o.com) 编 

写的。它只有一个参数:打算在页面加载完毕时执行的函数的名字。 

      下面是addLoadEvent 函数将要完成的操作。 

      口把现有的川nωIW.onload 事件处理函数的值存入变量01 donload。 

      口如果在这个处理函数上还没有绑定任何函数，就像平时那样把新函数添加给它。 

      口如果在这个处理函数上已经绑定了一些函数，就把新函数追加到现有指令的末尾。 

     下面是 addLoadEvent 函数的代码清单: 

      function  addloadEvent(func)   {  
        var  oldonload  =  window.onloadj  
        if (typeof  window .onload   !=  'function')  {  
          window.onload  =  funcj  
        }  else  {                                                                                 、 

          window .onload  =  function()   {  
                      () ;  
            oldonload  
            func() ;  

     这将把那些在页面加载完毕时执行的函数创建为一个队列。如果想把刚才那两个函数添加到 

                                                             •  

----------------------- Page 102-----------------------

                84     第 6 章 案例研究:图片库改造版 

              这个队列里去，只需写出以下代码就行了: 

                  addLoadEvent(firstFunction);  
                  addLoadEvent(secondFunction);  

                  我发现这个函数非常实用，尤其是在代码变得越来越复杂的时候。无论打算在页面加载完毕 

              时执行多少个函数，只要多写一条语句就可以安排好一切。 

                  这个解决方案对prepareGa1 1 ery 函数来说好像有点儿大材小用，因为只有这一个函数需要在 

              页面加载完毕时执行。可是，为以后的扩展做一些准备工作总不是件坏事。我决定把addLoadEvent 

              函数收录到我的脚本里，这使我只需写出下面这行代码就可以了: 

                  addLoadEvent(prepareGallery);  

                  到这一步， prepareGa 11 ery 函数已经足够安全了，至少在我的能力范围内。接下来，我将怀 

              疑的目光转向第4 章编写的 showPic 函数。 

              6.4  
                     不要做太多的假设 
'.  
                  我在showPic 函数里发现的第一个问题是，我没有让它进行任何测试和检查。 

                  showPic 函数将由 prepareGa1 1 ery 函数调用，而我已经在后者的开头对 getE1ementByld 和 

              getE1ementsByTagName 等DOM方法是否存在进行过检查，所以我确切地知道用户的浏览器不会因 

              为不理解这两个方法而出问题。 

                  不过，我还是做出了太多的假设。别的先不说，我在代码里用到了 id 属性值等于pa1ceho1der 

             和description 的元素，但我并未对这些元素是否存在做任何检查: 

                  function  showPic(whichpic)   {  
                                                                        ,  
                    var  source  =  whichpic.getAttribute("href");  
                    var  placeholder  =  documenf.getElementByld("placeholder");  
                   .  placeholder.setAttribute("src" ,source);  
                    var  text  = whichpic.getAttribute("title");  
                    var  description  =   document.getElementByld("description");  
                    description.firstChild.nodeValue  =  text;  

                  需要增加一些语句来检查这些元素是否存在。 

                  showPic 函数负责完成两件事:          一是找出 id 属性值是pa1ceho1der、的图片并修改其 src 属性; 

             二是找出 id 属性是description 的元素并修改其第一个子元素 (fi rstChi ld)  的nodeVa1ue 属性。 

             第一件事是这个函数必须完成的任务，第二件事只是一项锦上添花的补充。因此，我决定把检查 

              工作分成两个步骤以获得这样一种效果:只要pa1ceho1der 图片存在，即使descr叩tion 元素不存 

             在，切换显示新图片的操作也将照常进行。 

                  正如你在prepareGal1ery 函数里看到的那样，检查某个特定的元素是否存在是一件很简单的 

             事情: 

                  if ( !document.get ElementByld("placeholder"))  return  false;  

                  紧随其后的是用来修改 pa1ceho1der 图片的 src 属性的代码，它们的效果是切换显示一张新 

              图片: 

----------------------- Page 103-----------------------

                                                                        6.4   不要做太多的假设                     85  

      var  source  = whichpic.getAttribute("href");  
      var  placeholder  =  document.getElementByld("placeholder");  
      placeholder.setAttribute("src ",source) ;  

      以上代码负责完成函数的主要任务。接下来，采用一种稍有不同的方法检查 description 元 

素是否存在: 

      if (document.get ElementByld("descrïption"))   {  

      只有通过了这项检查，负责修改图片说明文字的代码才会得到执行，如下所示: 

        var  text  = whichpic.getAttribute("title");  
        var  description  =  document.getElementByld("description");  
        description.firstChild.nodeValue  =  text;  

      将描述部分放在 if 语句里后， description 元素将是可选的。如果它存在，它将被更新，否 

      忽略。 

      return  true;  

                                                                                                               •  
      下面是showPic 函数在我给它增加了检查之后的代码清单: 

      function  showPic(whichpic)  {  
        if (!document.get ElementByld("placeholder"))  return  f alse;  
        var  source  =  whichpic.getAttribute("href");  
        var  placeholder  =  document.get ElementByld("placeholder");  
        placeholder.setAttribute("src飞source); 
        if  (document.get ElementByld("description"))   {  
          var  text  =  whichpic.getAttribute("title");  
          var  description  =  document.get ElementByld("description");  
          description.firstChild.nodeValue  =  text;  
        }  
        return  true;  

     改进后的showPic() 函数不再假设有关标记文档里肯定存在着palceholder 图片和description 

元素。即使文档里没有 palceholder 图片，也不会发生任何JavaScript 错误。 

     可是，还有一个问题:如果把palceholder 图片从标记文档里删掉并在浏览器里刷新这页面， 

就会出现这种情况，无论点击imagegellery 清单里的哪一个链接，都没有任何响应。 

     这意味着我们的脚本不能平稳退化。此时，应该让浏览器打开那个被点击的链接，而不是让 

什么事情都不发生。 

     问题在于prepareGallery 函数做出了这样一个假设: showPic 函数肯定会正常返回。基于这­ 

E设， prepa reGa 11 ery 函数取消了 onc1ick 事件的默认行为: 

      links[i].onclick  =  function()   {  
        showPic(this);  

     是否要返回二个fa1se 值以取消 onc1ick 事件的默认行为，其实应该由 showPic 函数决定。 

     showPic 应返回两个可能的值。 

     口如果图片切换成功，返回 true。 

                                              ,  

----------------------- Page 104-----------------------

                                                                                                                                     .  

                                                 86  
                                                                第 6 幸 案例研究:图片库改进版 
                                                                                                                                                                                                            •  

                                                     口如果图片切换不成功，返回 false。 

                                                     为修正这个问题，应该在返回前验证 showPic 的返回值，以便决定是否阻止默认行为。如果 

                                            showPic 返回 true，那么更新 placeholder。在 onclick 事件处理函数中，我们可以利用"!"对showPic 

                                            的返回值进行取反。 

                                                     links[i].onclick  =   function()   {  
                                                         return   !showPic(this)                                                          •  

                                                                                                                                                                                   乞 

                                                     现在，如果showPic 返回 true，我们就返回 false，浏览器不会打开那个链接。 

                                                     如果 showPic 返回 false，那么我们认为图片没有更新，于是返回 true 以允许默认行为发生。 

                                                     下面是prepareGallery 函数现在的代码清单: 
户               经              }               句                                   伊 . d 闹  闹  以  阳 ， 门 
                                                                                          1&rErErEU-- 
                                                          M   卫 ·                   户 
                                                                                  - 
                                    d  b   v  m  · 0 K 4 i  C 1 ω L 4  ; ω r 1  e U ω a e A  n r · b m n σ  · n b σ · 阳 b  e o U 町 
                                      切  '  明  1 明  : 证  υ 纤  纤 υ υ  M   M  M 的  前m k u  目 h  m t  m h  饪 m  卢 川 句  { 问  m 阳  " 盯 的 l a t ; f 也 
                                                                                                          v  d  M  V  m m  1  n T  z r e m 的    町 
                                                                                                                                   u14e-11II  
                                                                                                                   品 川 
                                                                                                           ω 
                                                                        川 
                                                                        m                    )  h  m  J m  町 m ， L  - 4  u  2m L  v m 怡  盯 咒 叫 果 U d v  r nH"山 们 ， 」 白 

                                                                                                                                                       UZ4#J  
                                                                                                                                     m m  J 川 川 
                                                                                                                             ， 品 
                                              }  }  I 1 r  K m 、  - 才  L  r i b W 咱  s 开 h 订 J 。 臼  K 川  · 尸  1m M  最 张 - M " = f  划 1 m  片 队  ; - '  一 v  川 b m  u 肌 h  m 现 γ k 知 在 M m 叫 M M 什 随 h 解 h 句 、  a t 叫 飞 d m  川 J 3 - k 3 - 

                                                           斗  ' 接 打  于 把  叫 协m 川 
                                                                                                                                                                                                                    .  

                                                   所    过  击  的 番  那 周  折  链        终              一   后  新     个      。     归        可    决                                             新     卢 如  时 怀  刊  际 存 在 硅    浏 结    肺        将 
                                                                                                                                                           A%-nv  
                                                                                                               图     己                           了               刀    刮  图 由  片 的  时          图                                了    § 
                                                                                                                                                            日 
                                                         点    一                                                                                   都  。           ·   α P  e c 
                                           按    用                                                                                                v u                                       1 4 - 
                                                                                                                                                         ,  
                                                                                   、 
                                                                                                                                                            a       阳         r 
                                                                                                                                                         . 
                                                                                                                                                  你 
                                                                                                                                                      L 
                                                                                  l 
                                                                                                                                                         .  
                                                                                                                                                         ,  

                                           6.5             优化 

                                                    这几个函数已经相当完善了。虽然它们的长度有所增加，但它们对标记的依赖和假设已经比 

                                         ‘ 原先少多了。 

                                                    尽管如此，在showPic 函数里仍存在一些需要处理的假设。 

                                                     比如说，假设每个链接都有一个title 属性: 

                                                     var  text  =  whichpic.getAttribute("title");  

                                                    为了检查title 属性是否真的存在，可以测试它是不是等于null: 

                                                     if (whichpic. g.etAttribute ("title" )   ! =  null)  

                                                    如果 title 属性存在，这个 if 表达式将被求值为 true。如果 title 属性不存在， whichpic.  
                                           getAttri bute( "ti t 1 e")将等于 null ，而这个 if 表达式将被求值为 false。 

                                                    这个 if 表达式还可以简写为: 

                                                     if  (whichpic.getAttribue("title"))  
                                                                                                                                                .  
                                                                                                                                             .  
                                                    只要title 属性存在，这个if 表达式就将返回一个true 值。 

                                                    作为一种简单的视觉反馈，在title 属性不存在时把变量text 的值设置为空字符串: 

----------------------- Page 105-----------------------

                                •  

                                                                                                              、 

                                                                                                                                                                   6.5        优化                   87  

             正  ， ，                                        i r         、 、 ， ， ， ， ， 、  ， ‘ 、 ， 
                           L                         'nu 
           』  。  L 川  4  』 1 - ­  · τ .          且 哼 -     中  "        牛  " 
                                     -                                 -- 
            -11J                                                    · 
                                      f n u A           忐       牛 
                                             +L                      -t·1  
                                               +Lnv  
                                         +L·1·3  
                    』 白 』 「      F     0           m u H  e              O       ·  4 
                                     ouw"  
                             ny&L+L                                1·-Y4  
                            nvAVA  
                    MHZsr  
                                                                        e  l 
                                                  I-- 
             t  句 、 ‘ =   =    」       」                 L       L       』 
                                   - 
                                               L F - 
                                                             、 
                                                                                   、 
                               "  n   L                                                 咆  ， ，  .  、 
                                             L                         t 
                                                          也 M A 牛                L & 品 '  咱  . 
                                                                                       +L  
                                                       』 白             U H 
               vev                           n                         D                   e  
                                                                                                  .,  
                                                                                        i 
                                                           L   L L         L 
                 d 
                                           』         口 巨 
                                                     - 
            吨  - · '  吨 d o t  牛 d L r 」 

          下面是完成同样操作的另一种办主是: 

           var  text  = whichpic .getAttribute( "title")  ? whichpic. getAttribute( "ti tle")  : . "" j  

          紧跟在getAttribute 后面的问号是一个三元操作符(temary operator) 。这个问号的后面是变 
量text 的两种可取值。如果getAttri buteC "ti t 1 e")的返回值不是null ，                                                                                                  text 变量将被赋值为第一 

个值z -          如果getAttribute("title")的返回值是null ，                                                               text 变量将被赋值为第二个值: 

           variable  = condition  ? if true  :  if falsej  

          如果 title 属性存在，变量 text 将被赋值为 whichpic.getAttribute("title") 。如果 title 属 

性不存在，变量text 将被赋值为一个空字符串 ('…)。 

          三元操作符是 if/else 语句的一种变体形式。它比较简短，但逻辑关系表达得不那么明显。 

               也这么认为，那就使用 if/else 语句好了。 
如果你 

          现在?如果试图把 imagegallery 清单里的某个链接的 title 属性删掉并重新加载这个页面， 

 当你再去点击那个链接的时候， descr、 iption 元素将被填入一个空字符串。 

          如果想做到十全十美的话，可以对任何一种情况进行检查。 

          比如说，检查 palceholder 元素是否存在，但需要假设那是一张图片。为?验证这种情况， 

可以用 nodeName 属性来增加一项测试: 

                                                                                                                                    •  

           if (placeholder.nodeName  !=  "IMG")  return  falsej  

          请注意， nodeName 属性总是返回一个大写字母的值，即使元素在HTML文档里是小写字母。 

          我还可以引人更多的检查。比如说，假设descri 川on 元素的第一个子元素 (fi rstChi 1 d) 是 

一个文本节点。我应该对此进行检查。 

          可以利用 nodeType 属性来进行这项检查。还记得吗，文本节点的 nodeType 属性值等于3: 

          if  (description.firstChild.nodeType  ==   3)  {  
              description.firstChild.nodeValue  =  textj  

          下面是引入了以上几项检查之后 showPic 函数的代码清单: 

          function  showPic(whichpic)   {  
              if  (ldocument.get ElementByld(lplaceholder"))  return 手alsej 
              var  source  =  whichpic.getAttribute("href")j  
              var  placeholder  =  document.getElementByld("placeholder")j  
              if (placeholder.nodeName   !=  "IMG")  return  falsej  
              placeholder.setAttribute( 飞rc"p source);  
              if  (document.getElementByld("description"))  {  
                  var  text  =  whichpic. getAttribute("title")  ?                                         whichpic. getAttribute( "ti tle")   . "".  
                                                                                                                                                                          .      ,  
                  var  description  =  document.get ElementByld("description")j  
                  if (description.firstChild.nodeType  ==   3)  {  
                      description.firstChild.nodeValue  =  textj  
                 ， 、 

             +  J 
             ， 、 

          ·  ·  Y  J        牛 

               』 自    ·  ·  γ    』 自 
                         nH      HU  
                     HM        r    -3  
                  L         L 

----------------------- Page 106-----------------------

   88      第 6 章 案例研究:图片库改进版 

     因为又增加了几项检查， showPic() 函数里的代码变得更多了。在实际工作中，你要自己决定 

是否真的需要这些检查。它们针对的是 HTML 文档有可能不在你控制范围内的情况。理想情况 

下，你的脚本不应该对HTML文档的内容和结构做太多的假设。 

     这方面的决定需要根据具体情况来做出。 

6.6     键盘访问 

     在有关onclick 事件处理的脚本里，有一项优化工作是不能不考虑的。 

     下面是prepareGallery() 函数中的核心代码: 

     links[i].onclick  =   function()   {  
       if  (showPic(this))   {  
         return  falsej  
       }  else  {  
         return  truej  

     首先，为了简洁，将它改为使用二元运算符。 

     links[i].onclick  =  functio叫) {  
       return  showPic(this)  ?  false  :  truej  

     这段代码本身没有任何毛病。当这个链接被点击时， showPic() 函数就开始执行。不过，这作 

了一个假定:用户只会使用鼠标来点击这个链接。 

     但是，千万不要忘记并非所有的用户都使用鼠标。比如说，有视力残疾的用户往往无法看清 

屏幕上四处移动的鼠标指针，他们往往更喜欢使用键盘。 

     作为一个众所周知的事实，不使用鼠标也可以浏览Web。键盘上的Tab 键可以让我们从这个 

链接移动到另一个链接，而按下回车键将启用当前链接。 

     有个名叫 onkeypress 的事件处理函数是专门用来处理键盘事件的。按下键盘上任何一个按键 

都会触发 onkeypress 事件。 

     如果想让onkeypress 事件与 onclick 事件触发同样的行为，可以简单地把有关指令复制一份: 

     links[i].onclick  = function()  {  
       return  showPic(this)  ?  false  :  truej  

     links[i].onkeypress  =  function()   {  
       return  showPic(this)  ?  false  :  truej  

     还有一种更简单的办法可以确保onkeypress 模仿onclick 事件的行为: 

     links[i].onkeypress  = links[i].onclickj  

     上面这条一语句把onclick 事件的所有功能赋给onkeypress 事件: 

     links[i].onclick  =  function()   {  
                                                                                                      •  
       return  showPic(this)  ?  false  :  truej  
     }   .  
     links[i].onkeypress  =  links[i].onclickj  

----------------------- Page 107-----------------------

                                                                                                  ,  

                                                                      6.6  键盘访问          89  

     这就是JavaScript 与HTML分离带来的方便。 

     如果你已经把所有的函数和事件处理函数都放在了外部文件里，就可以只在必要时修改 

JavaScript 代码，而根本不用动HTML文件。你可以随时打开你的脚本文件，优化它们，你做出 

的修改将自动作用于每个引用了它的网页。 

     如果你仍在使用内嵌于HTML文档的事件处理函数，在修改JavaScript 功能之后，你可能需 

要打开 HTML 文档去进行大量的修改。比如说，在图片库这个例子里，我当初曾使用过一些如 

下所示的内嵌事件处理函数: 

     <1i>  
       <a   href="images/fireworks.jpg"  onclick=" ShowPic(this)jreturn  false;ltitle="A  
     ..fireworks  display">Fireworks</a>  
     </l i>  

     在对 showPic() 函数返回 true 或 false 的情况做出调整之后，我不得不对 HTML 文档里的 

优lick 事件处理函数做出相应的修改，如下所示: 

     <1i>  
       <a   href="images/fireworks.j pg "  onclick="return  showPic(this)  ?  false  :  true;"  
     恒. title="A  fireworks  display"> Fireworks</a>  
     </l i>  

     如果图片库有大量图片的话，这种修改工作真是又累又烦。 

     设想一下，  如果想添加 onkeypress 事件处理函数，就不得不找出所有的链接，给它们每个 

培加一个内嵌事件处理函数: 

     <1i>  
       <a  href="images/fireworks.jpg"   onclick="return  showPic(this)  ?  false  :  true;"  
     胁。nkeypress="return showPic(this)  ?  false  :  true;"  
     .. title="A  fireworks  display">Fireworks</a>  
     </l i>  

     这是一件苦差事(非常麻烦又非常容易出错)。而现在我只修改了很少几条语句就把一切安 

蠢妥当。 

                                 •  
4、心onkeypress 

    我最后的决定是不添加 onkeypress 事件处理函数。原因是这个事件处理函数很容易出问题。 

踊户每按下一个按键都会触发它。在某些浏览器里，甚至包括 Tab 键!这意味着如果绑定在 

      ress 事件上的处理函数上返回的是 fal se ，那些只使用键盘访问的用户将永远无法离开当前 

暨接。我的图片库网页就存在这样的问题一一只要图片切换成功， showPic 函数就将返回 false。 

    那这些只使用键盘的人可怎么办? 

    幸运的是， oncl i ck 事件处理函数比我们想象得更聪明。虽然它的名字"onclick" 给人一种 

     与鼠标点击动作相关联的印象，但事实却并非如此:在几乎所有的浏览器里，用 Tab 键移动 

             后按下回车键的动作也会触发onclick 事件。从这一点来看，把它命名为onactivate 

     更恰如其分。 

     围绕着 onclick 和 onkeypress 有许多让人困惑的东西，它们的名字是造成这些困惑的主要原 

  e  有些可用性指南建议我们在处理 onclick 事件时也一定要处理 onkeypress 事件。事实上，这 

----------------------- Page 108-----------------------

                                                                                                                                                    •  

                              90                第 6 章 案例研究:图片库改进版 

                        种搭配导致的问题远比它们解决的更多。 

                                   最好不要使用 onkeypress 事件处理函数。 oncl ick 事件处理函数已经能满足需要。虽然它叫 

                         "onclick" ，但它对键盘访问的支持相当完美。 

                                   下面是最终完成的prepareGallery()和 showPic( )函数的代码清单: 

                                    function  prepareGallery()   {  
                                         if (! docωu川J川川ment.getE曰le阳 
                                         if (1 docωu川J川川I町ment.getE日lementByld) return  false;  
                                        if (ldocument.getElementByld("imagegallery"))  r eturn  fal se ;  
                                        var  gallery  =  document .get ElementByld("imagegallery")j  
                                        var  links  = gallery .getElementsByTagName("a");  
    •  
                                        for  (  var  i=Oj   i  <  links.length;  i++)   {  

                                           4 1    u K L Z L  4 f  4    咱  e  .  h b M    2  t -       4 f  、 r 
                                                                                        FT· 
                                                              14nomehheet 
                                                                                                牛 
                                                --4  
                                                             ·  L          &  i         T      - 
                                                  nH 
            H  M     S  n  e  e         e  - n m  M - m  d  - m t  n  6 C i n O vg f H M n n H  D C L n l  L & ‘ - 、  n C F U S  L J UA E U K V H T r n n  r  o  H  ns r l 
                                                                                    =4LK 
                                                                                                ι 
                                                                                            川         、 飞 

                                                                                 ，         、 
                                                                                               ， 、 
                                                                                      innym 
                                                   a  牛  H  M  〈  r    n        t  4   ' u  n y "  v L 2  e u  u n  A r  e牛 
                                                  XOs!s                                                       ezAU--russu&LAUVV  
                                                                                        --le·HMaun-os 
                 Z  Z "    2 L  U &  J H  lJv b 、 n  』 L       m L d + "  H  ·  p A  Y  V飞 e  t " r J  J 1 . n  " 4 n t  L - - U  H ， .                                      •  

                                     IJrT  

                                                                                           、 
                                i   τ   c  c  U  r A H  e n s  』 H n r n  n i - 
                                         nH·1VV4Any-- 
                       T  r  a   a  T  r  c           L  &   O  n  L  E   r  -  C        J B 
                                       HU                      w 
                                        e  e    c   u  H 
                                                                                    He 
                                                . 
                                                                       飞 
                                                •  
                                               ，                                                                          咱          、 、 
                                                                                                                                                            rT 
                                               e  t  +  r  r  n  L  牛  5 n  O 中 i τ        品            m   e   c  e     ·    H e ， 、  " L n  r t  v A U n ρ 牛 A H T γ  M n 2  d  c、 
                                                               eoor                                                               Z"Jun                                 • 
                                               ，                                                                   n  r  i 
                                                                                                                                                                      e;e 
                                                                                                                                              rasao  
                                                S  U  A    U  H J  n  L - - e L         O L                              a   v  n ·  J J E  B  e L  、 川         i 
                                                                                     mCCUNt 
                                      '      飞                          . 』                                                      』  白  』  「  』 
                                                                                                                                                                       •  
                                                                                                      、 、                                                              ， 
                                                                                                                 飞 ， ，        正 
                                                                                   --oe--m-1 
                                                                                             牛           -     忐 
                                              - - u n      A 1 - -      ‘ 、     n    U  J H  " n  L A T  ρ L  &  & T  1 L 
                                                                              」  白  』V 白  』 白 』 =  u  R  i  1  n  r  i  T  S  f    J 
                                                                                                                                     ' 

                                                                                 』                                      牛            "   咱                』     " 、 
                                                                                                       4  4   v   e 
                                                  nvn 
                                                                                                  5 n         」 白                           n   u   k   n   J    E 
                                                                                                                                                             e--t  
                                   r  s T  r  it f 、  f 。 s 哩  飞 r v C '  x u  H veJurrAU n n 、 i L  m o 、 u G 』 咱 A 牛 · p  m  uE e F A  非 L -  r e & b 唱  G 0 O  L  +， A  DerLA  T L 牛  D n Y  " L d t 飞 M ，  - c & - l B -  G F r - e 』 r  " r p 」 " 』 M u r H L n u " e J 飞 n  e 1  L · L -  牛 L J  & 1  O、 & 、 口 B P · - a  ­  -飞 a v "f  T r z r 、 -  n -E  · 唱 E E  n · '  i  A· P G 

                                                                nrrp  
                                               飞   4  r  n4 + 』 4  4  =1  ·  ·· P  · L H 」 ·  L L i 牛 李 、 - - u  e k L e  & 」 t ' 品 + L  4 ? " J E 』 、 ， 、 、 K       L +  aun·' + 、  . KU 牛 ， ，  晶 晶  ，  『 · &L 咱 ， ， ， 、 、 
                                                                                                                                                                              +L  
                                   -    ·  r v c v  ea a e e ·  u T  F n  H u  n n  H 4  n -  C O  4  1 γ T 4 -  e                            M   、  F                                                    ρ 
                                                                                                                                  evye                                          r          e                                 .,  
                                                                                                                   ' 
                                                                                                                                                                                       U  
                                                                                                                                                                                                        A 
                                                      L  H  n  l · 1 - H       4  -· n  n i  m u  m J  L L』 ·  H · &  · L  · 飞  L  d U A  飞 ' ' 『  "  .， 』 凸  凹 H  γ 4 L 0 · ， 』 飞 、 A  L    ‘ 、 L        』 
                                                                                     AG- 
                                                      2 
                                                                                                                                                                     "  
                                                                     牛                                         「                                              . 
                                                                                                                            牛 
                                                                                          -  - e  H  e n o  e  y v e                            S  L  r 
                                                             ec-- 
                                           J C  T U J u n            晶 L     r - ， 伞 - ·· L F  品 M H 、 o - O E n n 」  E 白 v n m = H L 、 、             · ·   ­ · 、 川 

                                                                                    15  
                                               』 自 、            在 O ­ ·  L          n &L i L ·  」  i                          A 牛 V  3 & J E 
                                                                                        rL  
                                                                 L              r          τ A u              M  2 u  e   =    L     L ， . 

                                   品  ， ，  、  、lJZ  

                                                       牛 
                                         」 。             & γ 
                                                HU   nH      HU   -p  
                                                  r            e  
                                             L 
                                                        L 

                                    、 
                                 J  F K                                                                                                                                                                                ~  

                         注意可以在Friends ofED 网站 (http://www.企iendsofed.com)  上找到本书的页面来下载这两个 

                                          函数的最终完整版本。 

                        一 

                        6.7               把JavaScript 与 CSS 结合起来 
                                                                                                                                                  _- 

                                   把JavaScript 代码从HTML文档里分离出去还带来另一个好处。在把内嵌型事件处理函数移 

                        出标记文挡'时，我在文档里为 JavaScript 代码留下了一个"挂钩": 

                                    <ul  id="imagegallery">  

                                   这个挂钩完全可以用在CSS 样式表里。 

                                   比如说，如果不想把图片清单显示成一个带项目符号的列衰，则完全可以利用这个imagegallery 

                        写出一条如下所示的 CSS 语句: 

                            、    #  .电  m 、 牛 』 自  龟 4 - 吨 e  · · γ E e r 
                                                  ob- 
                                             n65               VJ 
                                     ，  、  川A .  、 a a  r y a  v & i  、 白 n 、 nH  
                                                               ·      nv  e  
                                                                             . 
                                                         i 
                                               L      ι            H 
                                        4 a -               』 
                                                               ·             . 
                                                                             ,  
•  
                                   I 

----------------------- Page 109-----------------------

                                                                                                                                                                                            ,  

                                                                                       6.7       把JavaScript 与 CSS 结合起来                                         91  

                                                                                                                                                                         •  

        我可以把这条 css 语句存入一个外部文件，比如 layout.css 文件，然后再从 gal lery.html 

文件的<head唁R分引用它: 

         <link  rel="  tylesheet"  href=l styles/layout.cSS"  type="text/css"  media="screen"   1>  
                           s 

        利用 CSS，甚至可以让这份清单里的列表项从按纵向显示变成按但向显示: 

        #imagegallery  li  {  

        上面这两条css 语句将使我的网页变成如图 6-1 所示的样子。 

                                     。η                                     .始增臼Zl!r'j                                         e  
                                         '   非 罐 看葬 台陪                       }          一一…… -J                     ej 命攻 。 

                                     Snapsbots  

                                           吕幽幽毡舱这跑也&革监 

                                                                                                                                                               •  

                                               … -、o:.';O_'~ ...何‘~.. "_ .""'~  
                                        恼，叫"哗品户a啊耐得呻融町........:...:.油田_.- 

                                                                                                                                                                    ,  

                                     Cboosc an ìmage.  

                                                          •  

                                    。。αe                                                                                          4  

                                                                              图 6-1 
                                                                                                          •  

        即使把图片链接换成一些缩微图而不是文字， css 也依然有效: 

                                                                                                                                                                               ‘.  
        <u l   id="imagegallery" >                                                                                    、 
           <li>  
               <a   href="images/fireworks .jpg"  title="A  fireworks  display">  
                  dmg  src="images/thumbnail.:_fireworks.j pg "  alt=IFireworks"  />  
               </a>  
           </li>  
           <li>  
               <a   href=" images/coffee .jpg "  title="A  cup  of  black  coffee"  >  
                  <img    src="images/thumbnail_coffee.jpg "  alt="Coffee"  1>  
              </a>  
           </l i>  
           <li>  
              <a  href="images/ros e. jpg"  title=" A r ed ,  red  rose ">  
                  <img    src="images/thumbnail_rose.jpg"  alt=" Ro se "  1>  

----------------------- Page 110-----------------------

                    92              第 6 幸 案例研究:图片库改进版 

             •  

                             ， 、 咱  、  ‘ · ，  ' ，  ' ' d 句 ， ， 、 

                     、   飞  ，   /   、 
                             J 
                           i τ 飞 I 
                                    .•  
                               · A 

               、     ，     、  J r 『  吨 /- ' 、 

                                   .  H n t γ ￡ "                、 . D L        ·  "         、     · H  n  t                叮 』  。 " 
                                                                 be                                 "        rT"                   LKnp  
                                                                             、  .      牛   忐 
                                                   4·AFL                                  -           TI·  
                                                               , 
                                     m ι v         "  。 哇              」 白   H n ' μ n      』 』  白       o       v n  M H   b σ v n   、 
                                                         ob         nku   nHHU                                   mm3"            rL  
                                                           em                                                              rLno  
                                                                                          1                            ra-- 
                                                           J c               M 2 b σ                                     - - a E 
                                            eg  mm=                                                            2u  
                                                                                        5 n 4 
                                                               fmwb  
                                                                                   -  L i · · L 」 白  = 
                                               --CJ  
                                   d         t 
                       电  、  ，  、                             3 r - i    u  n r J  E                     」                        H n / 
                                                                            -m  

                                                                                     电                            咱 
                                                                                          10  
                                                                      H L 
                                                         - 
                                                                     , 
                                                                      也                                             品 
                                                                                                                                            ,,,  
                                       、                    吨                      『                   E 叮  μ  n b  。       、               / 、 
                                                         -&                                         nH  
                                                                                     i 
                                                                                                                  i 
                                                                    f  
                                                                      L                        U                    L 
                                                            d 
                                       4                                           4                   E 
                                         川      品                                                                           A 
                                                                                                       J 
                            ,/ /  、  .f 、 、 ， ，  ，  ，品 E A  ， ，  a 、 J 、 

                        、 ， U H i 

                         图 6-2 是这个网页的新形象，图片链接都显示为缩略图而不是文本。 

                                                                o e'a~i/斗二一ι→-二.LJm3史性Jf乌江斗ι;马二L二二￡斗旦旦 
                                                                φ， 学.          (ii'  委葬 台湾 
                                                                                                                                              一~ 'j @ 迄 @ 
                                                                                                                               一， 

                                                                                                                …  
                                                                                                              -一 
                                                                Snapshots  

                               •  

•                        ι                  v          z  m 3                  1 ' · … ν m 丁  U…  川  …! 啊 E A r J 巧  s J J  r Jd 吨 。 ' 矶 柔 g 附 γ  v  ae H - 内 ， J t J 可  …n 叶 … ~ - 忖 M  L u v  e J - j  3 •  

                                                                。ωse- ω切.. 川          剧 t r 川 哼 呻  啤 正 t e 技 v p 均  ' 市 川  川  川 川  什  川  叫/  … V f d …                                                      •  

                                                                。时晴     - ,          巾' 
                                                                               一一一一…一一一一一一一一..… 
                                                                                                                ~  

                                                                                                           图 6-2 

                                                                                                                               •  
                        下面是 layout.css 文件的完整清单: 

                         body   {  
                             font-family:   "Helvetica" , "Arial" ,serif;  
                             color:  #333;  
                             background-color:  #ccc;  
                             margin:   1em  10%;  
                         }  
                         h1   {  
                             color :  #333;  
                             background- color :  transparentj  
                         }  
                         a  {  
                             color:  #c60;  
                             background-color:  transparent;  
                             font-weight:  bold;  
                             text-decoration:  nonej                                                                  •  
                         }  
                         ul  {                                                                                                                                、 

                             padding:   0;  
                         }  
                         li  {  

----------------------- Page 111-----------------------

                                                                                                                                                            .  

                                                                              6.8    DOMCore 和HTML-DOM                               93  

           float:  left;  
           padding :  lem;  
           list-style:  none;  
        }  
        #imagegallery  {  
           list-style:  nonej                                                                      ,  
        }                                                                                                           、. 

        #imagegallery  li {  
           display:  inline;  
        }  
        #imagegallery  li a  img   {  
          border :  0;  
        }  

       这份样式表将把我的图片库页面装点得既美观又大方，如图 6-3 所示。 

                .  

                                          ~  ,  .，.... 气，J               EEi  

                                         if汪汪之二:My?N 
                •                         if!导干lmaaè. ~ 

                                         ?:100i巳 

                                                       •               6-3  
                                                                 图 

   .8       DOM Core 和 HTML-DOM 

       至此，我在编写 JavaScript 代码时只用到了以下几个DOM方怯: 

       口 getElementByld 

       口 getElementsByTagName 

       口 getAttribute 

       口 setAttribute 

       这些方格都是 DOM Core 的组成部分。它们并不专属于 JavaScript，支持 DOM 的任何一种 

程序设计语言都可以使用它们。它们的用途也并非仅限于处理网页，它们可以用来处理用任何一 

眷标记语言(比如却也)编写出来的文档。 

       在使用 JavaScript 语言和DOM为 HTML 文件编写脚本时，还有许多属性可供选用。例如， 

爱已经使用了一个属性 onclick，用于图片库中的事件管理。这些属性属于 HTML-DOM，它们 

                                                                       •  

                                                                                                       、 

----------------------- Page 112-----------------------

  94    第 6 幸 案例研究:图片库改造版 

在DOMCore 出现之前很久就已经为人们所熟悉了。 

    比如说， HTML-DOM提供了一个 forms 对象。这个对象可以把下面这样的语句: 

    document.getElementsByTagName( "form")  

简化为: 

    document.forms  

    类似地， HTML-DOM还提供了许多描述各种HTML元素的属性。比如说， HTML-DOM为 

图片提供的 src 属性可以把下面这样的语句: 

    element.getAttribute(l src ")  

简化为: 

    element. src  

    这些方法和属性可以相互替换。同样的操作既可以只使用 DOM Core 来实现，也可以使用 

HTML-DOM来实现。正如大家看到的那样， HTML-DOM代码通常会更短，必须提醒一下，它 

们只能用来处理Web 文档。如果你打算用 DOM处理其他类型的文档，请千万注意这一点。 

    如果使用 H刊也一DOM 的话，就可以把showPic 写得简短一些。 

    下面这条语句使用了 DOMCore 来得到whi chpic 元素的 href 属性并赋给变量 source: 

    var  source  =  whichpic.getAttribute(lhref")j  

    下面是使用 HTML-DOM达到同样目的的语句: 

    var  sour ce  =  whichpic.hrefj  

    下面是使用 DOMCore 的另一个例子，这次把placeholder 元素的 src 属性设置为变量 source 

的值: 

    placeholder.setAttribute(" src ",source)j  『 

下面是使用 HTML一DOM达到同样目的的语句: 

    placeholder.src  =  sourcej  

    即使你决定只使用 DOM Cote 方法，也应该了解 HTML-DOM。在阅读别人编写的脚本 

时难免会遇到各种HTML-DOM记号，你至少应该知道都是干什么用的。 

    在本书的绝大多数章节里，我只使用 DOMCore来编写代码。虽然代码会因此而变得有点儿 

冗长，但我认为DOMCore方怯更容易使用。当然，你不必和我一样，完全可以根据个人喜好和 

具体情况来做出选择。我会尽可能地告诉你，在哪些地方可以用盯ML-DOM来简化代码。 

6.9   小结 

    在本章里，我对图片库进行了多项优化，我的 H刊也标记变得更加整齐。我还为我的图片 

库网页提供了一个基本的 CSS。          当然，最重要的是改进了 JavaScript 代码。下面是我在本章完成 

的几项主要工作。 

----------------------- Page 113-----------------------


----------------------- Page 114-----------------------

                                      ,  

               .I  

             障7点 

                                   动态创建标记 

                                                     、 createTe文tNode、     appeadCt111d 和1 

           ，弘                               6  

      此前见过的绝大多数 DOM方格只能用来查找元素。 getElementByld 和 getElementsByTagName 

都可以方便快捷地找到文档中的某个或某些特定的元素节点，这些元素随后可以用诸如 

setAttri bute  (改变某个属性的值)和 nodeValue (改变某个元素节点所包含的文本)之类的方法 

和属性来处理。我的图片库就是这样实现的。 showPic 函数先找出 id 属性值是 placeholder 和 

description 的两个元素，然后刷新它们的内容。 placeholder 元素的src 属性是用 setAttribute 修 

改的， descri pt i on 元素所包含的文本是用 nodeValue 属性修改的。在这两种情况里，都是对已经存 

在的元素做出修改。 

      这是绝大多数JavaScript 函数的工作原理。网页的结构由标记负责创建， JavaScript 函数只用 

来改变某些细节而不改变其底层结构。 JavaScript 也可以用来改变网页的结构和内容。本章中， 

你将学习一些DOM方?去，通过创建新元素和修改现有元素来改变网页结构。 

7.1       一些传统方法 

      在学习利用 DOM方法在Web 浏览器中往文档添加标记时，先回顾两个过去使用的技术，即 

document.write 矛口 innerHTML。 

7. 1 .1    document . wr; te  

      document 对象的writeO方法可以方便快捷地把字符串插入到文档里。 

      请把以下标记代码保存为一个文件，文件名就用 test.html 好了。 

                                                                                       •  

                                                                                                                    ,  

----------------------- Page 115-----------------------

                                                                                                                                            •  

                                                                                              7.1    一些传统方法                      97  

                                                                                                             ,  

       </body>'  

       如果把test. html 文件加载到Web 浏览器里，你将看到内容为 "This is Ïns创侃"的文本段落， 

如图 7-1 所示。 

                                    F建努潜移去?;zvpeX:f;;A Tm 二                ,47J  J    fAAM:二j倒气: 

                                     ; 锵了楼'  疆军 毒草 tE iO ; ;                   ?   "@ 惑 @ 

                                     T恼sisiz1黯f能d.  

                         •  

                                                                                                ,-.  
                                                                         』 

                                     部腑'1一                                ‘·  

                                                               图 7-1 

       document.write 的最大缺点是它违背了"行为应该与表现分离"的原则。即使把document.write 

语句挪到外部函数里，也还是需要在标记的<body>部分使用<script>.标签才能调用那个函数。 

       下面这个函数以一个字符串为参数，它将把一个<p>标签、字符串和一个</P>'标签拼接在一起。 

替接后的字符串被保存到变量 str，然后用 document.write()方法写出来: 

       function  insertParagraph(text)  {  
         var  str =  "<p>"j  
          str +=   textj  
          str +=   "</p>"j  
         document.write(str)j                                                                                          、、 

      可以把这个函数保存在外部文件 example.js 里。为了调用这个函数，必须在标记里插入 

<script>.标签: 

       <!OOCTYPE    htm l>  
       <html  lang=" en">  
       <head>  
         <meta  charset="utf-8"   1>  
         <title>Test</title>  
         </script>  
       </head>  
       <body>                                                                                                                              、 
         <script  src="example.js">  
         <sc; ript>  
            insertParagraph("This  is  inserted.");  
         </script>  
       </body>  
       </htm l>  

      像上面这样把JavaScript和HTML代码也杂在一起是一种很不好的做法。这样的标记既不容 

易阅读和编辑，也无法享受到把行为与结构分离开来的好处。 

----------------------- Page 116-----------------------

               98         第 7 章动态创建标记 

                  这样的文档还很容易导致验证错误。比如说，在第一个例子里， <script>:标签后面的 "<p>" 

           很容易被误认为是<p>标签，而在<script>标签的后面打开<p>标签是非怯的。事实上，那个"<庐" 

           和 "</p>" 只不过是一个将被插入文档的字符串的组成部分而已。 

 •  

                  还有，MIME类型application/xhtml+沟nl 与document.write 不兼容，浏览器在呈现这种泪IT孔伍 

           文档时根本不会执行document.write 方法。 

                  从某种意义上讲，使用 document .write 方法有点儿像使用<font>:标签去设定字体和颜色。虽 
       •  

           然这两种技术在HTI\在L 文档里的都工作得不错，但它们都不够优雅。 

                  把结构、行为和样式分开永远都是一个好主意。只要有可能，就应该用外部 CSS 文件代替 
.  
           <font>标签去设定和管理网页的样式信息，最好用外部 JavaScript 文件去控制网页的行为。应该 

           避免在<bo句>部分乱用<script>标签，避免使用:                                         document.write 方讼。 

           7.1.2        ;nner阳'ML 属性 

                  现如今的浏览器几乎都支持属性innerHTML，这个属性并不是W3C∞M都佳的组成部分，但现 

           已经包含到HTh1L5 规范中。它始见于微软公司的IE4 浏览器，并从那时起逐渐被其他的浏览器接受。 

                  innerHTML 属性可以用来读、写某给定元素里的 HTML 内容。要了解它如何工作，请把下面 

           这段代码插入test.html 文档的<body培R分: 

                  <div  id="testdiv")  
                  <p>This  is  <em>my</em>   content.</p>  
                  </div>  

                 用 DOM 的眼睛看testdiv 内的标记，是如图 7-2 所示的结构。 

                                                               元素节点 

                                    属性节点 

                                                                                                                    、 

                                                                                  元素节点 

                                                              •  

                                                                             图 7-2 

                  '  

----------------------- Page 117-----------------------

                                                                                                          7.1     一些传统方法                         99  

        div 元素的 id 是 testdiv。它包含一个元素节点 (p 元素)。这个 p 元素又有一些子节点。其 

 中有两个文本节点，值分别是This 怡和content                                                                                    (em 元素)， em 元素本身包 
                                                                                 还有一个元素节点 
                                                                             o 

 含一个文本节点，这个文本节点的值是my。 

        DOM 提供了关于这个标记的非常详细的一幅图画。使用 DOM 提供的方法和属性可以对任 

 何一个节点进行单独的访问。这个标记从 1nner、HTML 属性的角度来看则简单得多，如图 7-3 所示， 

                                                                                                                                                       >  
就1rnm1wmrnlerr、Hl刑下刊4化L 属性看来， 1叫d 为 t怡es忱td们1V 的标记里面只有一个值为<叩p>汗Th州1S川1S<句er仲n>m即n盯ny叫er阶n> content . <矿/p> 

 的Hη伍字符串。 

                                                                       元素节点 

                                     .  

                                                                         HTML  

                                                                   图 7-3 

                                                                                               •  
       用下面这个新函数更新example.js 文件。 

        window.o吐oad =  function()  {  
           var  testdiv .=  document.getEleme时Byld("testdiv")j 
           alert(testdiv.innerHTML)j  

       然后在Web 浏览器里刷新test .                                html 页面，由v 元素(它的 id 属性值等于testdiv) 的 innerHTML 

 属性值将显示在一个 alert 对话框里，如图 7-4 所示。 

                                          ",.  ~ (、. ".  .'     句   一'怕 
                                                                   _'   .湿 
                                        、 "守'‘ 

                          等法伊德楼， 

                          Tlú.'i îs.my  

                                                 、 

                                               /.  •   ..向、. • ~.  
                                           、.伽阳 ，、  ,  .0   、 -‘  

                                                                       图 7-4 

       很明显， innerHTML 属性无细节可言。要想获得细节，就必须使用 DOM方法和属性。标准化 

的DOM像手术刀一样精细， innerHTML 属性就像一把大锤那样粗放。 

       大锤有大锤的用武之地。在你需要把一大段HTML 内容插入网页时， innerHTML 属性更适用。 

它既支持读取，又支持写人，你不仅可以用它来读出元素的 HTML 内容?还可以用它把 H币在L 

----------------------- Page 118-----------------------

   100            动态创建标记 
          第 7 章 

内容写入元素。 

    编辑test.html 文件，让 id 属性值等于testdiv 的元素变成空白: 

    <div  id= "testdiv">  
    </div>  

    把下面这段 JavaScript 代码放入 example .js 文件，就可以把一段 HTML 内容插入这个<div> 

标签: 

    window.onload  = function()   {  
      var  testdiv  =  document.get ElementByld("testdiv");  
      testdiv.innerHT问L  = 气p>I inserted  <em>this</em>  content.</p> ";  

    在Web 浏览器里刷新test. html 文件，你就可以看到如图 7-5 所示的结果。 

                            …>'       -. Te-s州  飞;斗嘴略掉钊川、J             e  
                            企ie 川同           卢4  ;             !] O  (.,   。 

           E 姐则也d政ts ∞皿W. 

                                           7-5  
                                       图 

    利用这个技术无法区分"插入一段HTML 内容"和"替换一段 HTML 内容"0  testdi v 元素 

里有没有HT如1L内容无关紧要:             一且你使用了 innerHTML 属性，它的全部内容都将被替换。 

    在test.html 文件里，把id 属性值等于testdiv 的元素的内容修改回它原来的样子: 

    <div  id="testdiv">  
    <p>This  is  <em>my</em>   content.</p>  

    examp 1 e. js 文件保持不变。如果你在Web 浏览器里刷新test.html 文件，结果将和刚才一样。 

包含在testdiv 元素里HTh伍内容被 i nnerHTML 属性完全改变了，原来的 HTML 内容未留下任何 

痕迹。 

    在需要把一大段 HTML 内容插入一份文档时， innerHTML 属性可以让你又快又简单地完成这 

一任务。不过， innerHTML 属性不会返回任何对刚插入的内容的引用。如果想对刚插入的内容进 

行处理，则需要使用 DOM提供的那些精确的方法和属性。 

    innerHTML 属性要比 document.write()方格更值得推荐。使用 1nner、HTML 属性，你就可以把 

JavaScript 代码从标记中分离出来。用不着再在标记的<body非R分插入<script>标签。 

    类似于 document.wr、 ite 方怯， 1nner、HTML 属性也是 HTML 专有属性，不能用于任何其他标记 

语言文档。浏览器在呈现正宗的XHTML文档(即 MlME类型是application/xhtml+xml 的XHTML 

文档)时会直接忽略掉innerHTML 属性。 

    在任何时候，标准的DOM都可以用来替代 1nner町忧。虽说这往往需要多编写一些代码才能 

获得同样的效果，但DOM同时也提供了更高的精确性和更强大的功能。 

----------------------- Page 119-----------------------

                                                 . 7.2  DOM方法    101  

7.2   DOM 方法 

   getElementByld 和getElementsByTagName 等方法可以把关于文档结构和内容的信息检索出来， 

它们非常有用。 

    DOM是文档的表示。 DOM所包含的信息与文档里的信息一一对应。你只要学会问正确的问 

题(使用正确的方怯)，就可以获取DOM节点树上任何一个节点的细节。 

   DOM 是一条双向车道。不仅可以获取文档的内容，还可以更新文档的内容。如果你改变了 

DOM节点树，文档在浏览器里的呈现效果就会发生变化。你已经见识过 setAttri bute 方法的神 

奇之处了。用这个方怯可以改变DOM节点树上的某个属性节点，相关文档在浏览器里的呈现就 

会发生相应的变化。不过，        setAttri bute 方法并未改变文档的物理内容，如果用文本编辑器而不 

是浏览器去打开这个文档，我们将看不到任何变化。只有在用浏览器打开那份文档时才能看到文 

茜呈现效果的变化。这是因为浏览器实际显示的是那棵 DOM 节点树。在浏览器看来， DOM 节 

点树才是文档。 

   一旦明白了这个道理，以动态方式实时创建标记就不那么难以理解了。你并不是在创建标记， 

面是在改变DOM节点树。做到这一点的关键是一定要从DOM 的角度去思考问题。 

   在DOM看来，一个文档就是一棵节点树。如果你想在节点树上添加内容，就必须插入新的 

节点。如果你想添加一些标记到文档，就必须插入元素节点。 

7.2.1  createEl ement 方法 

   编辑test.html 文件，让 id 等于testdiv 的那个<div>标签的内容变成空白: 

    <div  id="testdiv")  
    </div)  

   我想把一段文本插入 testdiv 元素。用 DOM的语言来说，就是想添加一个 p 元素节点，并 

把这个节点作为 div 元素节点的一个子节点。 (div 元素节点已经有了一个子节点，那是一个 id 

属性节点，值是testdiv) 。 

   这项任务需要分两个步骤完成: 

   (1)创建一个新的元素: 

   。)把这个新元素插入节点树。 

   第一个步骤要用 DOM方法createElement 来完成。下面是使用这个方讼的语言去: 

    document.createElement(nodeName)  

   下面这条语句将创建一个p 元素: 

   document.createElement( "p");  

   这个方法本身并不能影响页面表现，还需要把这个新创建出来的元素插入到文档中去。为此， 

你需要有个东西来引用这个新创建出来的节点。不论何时何地，只要你使用了 createElement 方 

恙，就应该把新创建出来的元素赋给一个变量就总是个好主意: 

   var  para  =  document.create Element("p");  

----------------------- Page 120-----------------------

                              102             第 7 章动态创建标记 

                                  变量 para 现在包含着一个指向刚创建出来的那个 p 元素的引用。现在，虽然这个新创建出 

                         来的 p 元素已经存在了，但它还不是任何一棵DOM节点树的组成部分，它只是游荡在JavaScript 

                         世界里的一个孤儿。它这种情况称为文档碎片(document 仕agment) ，还无法显示在浏览器的窗口 

                         画面里。不过，它已经像任何其他的节点那样有了自己的DOM属性。 

                                 这个无家可归的p 元素现在已经有一个 nodeType 和一个nodeName 值，如图 7-6 所示。这一事 

                         实可以用下面这段代码来验证(把以下代码放入 example.js 文件并在浏览器里刷新 test.html 文 

                         档)。 

             .    .               window.onload  =  function()   {  
                                      var  para  =  document.create Element("p");  
                                      var  info  =  "nodeName :  ";  
                                      info+=  para.nodeNamej  
                                      info+=  "  nodeType:            "j  
                                      info+=  para.nodeTypej  
                                      alert(info)j                                                                                     •  
                                  }  

                                                                                                                          吨， 、， 

                                                                                       ‘                                  、   、， 

                                                                                            血;.. . . ，u，d~I\I.~mè!.. #秘ewpei 重 飞二 
                                                                                                                          •  

                                                                                                                                 ..' ..  
                                                                                                                                    ,  

                                                                                                                                      、，。 

                                                                                                                ...  •  •  ~  叫川 ， 时 

                                                                                                 •.  -且 一 、    、 .   二  号‘ > 
                                                                                            … ~ .... '.' .哩 '立性叫鸭、可 " 、队-拙 '" 、 叫咄 
                                                                                                     一" '"吨     州二、‘民。-、 
                                                                                                          d  

                                                                                                                   、.、。吁 

                                                                                                           图 7-6 

 H 
                                 新节点确实已经存在，它有一个取值为 P 的 nodeName 属性。它还有一个取值为 1 的 nodeType 
也 山 

冲 7 

 1 
 •  
•  

                         属性，而这意味着它是一个元素节点。不过，这个节点现在还未被连接到 test.html 文档的节点 

                         树上。 

                         7.2.2           appendChild 方法 

                                 把新创建的节点插入某个文档的节点树的最简单的办法是，让它成为这个文档某个现有节点 

                         的一个子节点。 

                                 具体到这个例子，是要把一段新文本插入到 test . htrTil 文档中 id 是 testdiv 的元素节点。换 

                         句话说，我想让新创建的 p 元素成为testdiv 元素的一个子节点。你可以用 appendChild 方法来完 

                         成这一任务。下面是appendChild 方法的语法: 

                                  parent.appendChild(child)  

                                 具体到 test.html 文档这个例子，上面这个语陆中的 child 就是刚才用 createElement 方法创 

                         建出来的， parent 就是 id 是testdiv 的元素节点。我需要用一个DOM方法得到 "tes时iv" 节点， 

                         最简单的办法是使用 getElementByld 方法。 

                                 像往常一样，你把这个元素赋给一个变量，这可以让你的代码简明易读: 

                                  var  testdiv  =  document.getElementByld("testdiv");  

----------------------- Page 121-----------------------

                                                                  7.2  DOM方法           103  

     变量testdiv 现在包含着一个指向那个 id 等于testdiv 的元素的引用。 

     在上一小节我创建了一个para 变量，它包含一个指向刚创建的那个p 元素的引用: 

     var  para  =  document.create Element("p")j  

     有了这些，就可以像下面这样用 appendChild 方怯把变量 para 插入变量testdiv 了: 

     testdiv.appendChild(para);  

     新创建的 p 元素现在成为了 testdiv 元素的一个子节点。它不再是JavaScript 世界里的一个孤 

     它已经被插入到 test.html 文档的节点树里了。 

     在使用 appendChild 方法时，不必非得使用一些变量来引用父节点和子节点。事实上，完全 

     把上面这条语句写成下面这样: 

     document.getElementByld("testdiv").appendChild(  document.createEleme时("p"))j 

     可以看到，上面这样的代码很难阅读和理解。像下面这样多写几行，从长远来看是值得的: 
     var  para  =   document.create Element("p");                                ,  

     var  testdiv  =  document.getElementByld("testdiv");                                .  
     testdiv.appendChild(para);  

  2.3    create丁'extNode 方法 

     你现在已经创建出了一个元素节点并把它插入了文档的节点树，这个节点是一个空白的p 元 

   。  你想把一些文本放入这个 p 元素，但 createElement 方怯帮不上忙，它只能创建元素节点。 

       创建一个文本节点，你可以用 createTextNode 方法来实现它。 

                  一 

 注意千万不要被这些方法的名字弄糊涂。如果这些方法叫做 createElentmentNode 和 

       createTextNode，或者叫做 createElentment 和 createText ，都会非常清楚。遗憾的是，它 

       们的名字叫做cr、eateElement 和createTextNode。 

    createTextNode 的语怯与createElement 很相似: 

     document.createTextNode(text)  

     下面这条语句将创建出一个内容为 "Hello world" 的文本节点: 

     document.createTextNode("Hello  world")j                                          飞. 

                                                                           句 

                                                                           .  
    和刚才一样，把这个新创建的节点也赋给一个变量: 

     var  txt  =  document.createTextNode("Hello  world")j  

    变量 txt 现在包含指向新创建的那个文本节点的引用。这个节点现在也是 JavaScript 世界里 

的一个孤儿，因为它还未被插入任何一个文档的节点树。 

    可以用 appendChild 方法把这个文本节点插入为某个现有元素的子节点。我将把这个文本节 

主J雷入到我在上一小节创建的 p 元素。因为在上一小节里我已经把那个p 元素存入了变量 para ， 

现在又把新创建的文本节点存入了变量txt ，所以现在可以用下面这条语句来达到我的目的: 

----------------------- Page 122-----------------------

                                                                                                   ,  

                                                                                                                      •  

                     104        第 7 幸动态创建标记 

                        para.appendChild(txt)j  

                                                                                                                                                ,  
                        内容为 "Hello world" 的文本节点就成为那个p 元素的一个子节点了。 

                       现在，试着把下面这段代码写入example.js 文件: 

                        window.onload  = function()   {  
                          var  para  =   document.createElement("p");  
,                         var  testdiv  =  document.get ElementById("testdiv" )j  
                          testdiv.appendChild(para)j  
                          var  txt  =  document.createTextNode( 咋fello world") j  
                          para.appendChild(txt)j  

                       然后在浏览器里重新加载test. html 文件，你会从浏览器窗口里看到文本 "Hello wor1d" ，如 

                 图 7-7 所示。 

                                           m 
                                            一 
                                         … 命 
                                                               甲 运事 导 
                                                                                    L键…~…Ij 愈号令:2 窍 

                                         Hel1o world  

                                              •  

                                                                                                                               ,  
                        •  

                                                                             图 7-7 

                       这个例子是按照以下顺序来创建和插入节点的: 

                       (1) 创建一个p 元素节点。 

                       (2) 把这个p 元素节点追加到 test.html 文档中的一个元素节点上。 

                       (3) 创建一个文本节点。 

                       (4) 把这个文本节点追加到刚才创建的那个p 元素节点上。 

                       appendChild 方法还可以用来连接那些尚未成为文档树一部分的节点。也就是说，以下步骤顺 

                 序同样可以达到目的。 

                       (1) 创建一个p 元素节点。 

                       (2) 创建一个文本节点。 

                       (3) 把这个文本节点追加到第 1 步创建的 p 元素节点上。 

                       (4) 把这个p 元素节点追加到test . html 文档中的一个元素节点上。 

                       下面是按照新步骤编写出来的函数: 

                                                                                             .  

                                                       •  

----------------------- Page 123-----------------------

                                                                           7.2   DOM方法             105  

    window.onload  =  function()  {  
      var  para  = document.create Element(lp");  
      var  txt  =  document .createTextNode("Hello  world");  
      para.appendChild(txt);  
      var  testdiv  =   document.getElementById( 吨estdiv"); 
     testdiv.appendChild(para)j  

   最终的结果是一样的。把上面这些代码写入、                                  exampl e.js 文件，并在浏览器里重新加载 

   .html 文件。你会看到文本 "Hello world" ，就像刚才一样。 

.2.4    一个更复杂的组合 

   刚才介绍 innerHTML 属性时，我使用了如下所示的HTML 内容: 

   <p>This   is  <em>my</em>  content.</p>  

   与创建一个包含着一些文本的 p 元素相比，这个步骤要复杂不少L  为了把这些标记插入 

   .html 文档，先把它转换为一棵节点树。 

                                              - 元素节点 

             、 

                                               文本节点 

                                                                           -、 
                                                                           、w 

                                      •  

                                               图 7-8 

  如图 7-8 所示，这些HTML 内容对应着一个p 元素节点，它本身又包含着以下子节点。 

   口 一个文本节点，其内容是"This is"  

   口 一个元素节点 "em" ，这个元素节点本身还包含着一个文本节点，其内容是 "my" 

   口 一个文本节点，其内容是 "content-" 

  把需要创建哪些节点的问题弄清楚后，我们能制定出一个妥善的行动计划。 

  (1) 创建一个p 元素节点并把它赋给变量para。 

  (2) 创建一个文本节点并把它赋给变量txtl。 

  (3) 把txtl 追加到 para 上。 

  (4) 创建一个em 元素节点并把它赋给变量emphas怡。 

  (5) 创建一个文本节点并把它赋值给变量txt2。 

----------------------- Page 124-----------------------

    106        第 7 幸动态创建标记 

                                                                                       •  

      (6) 把txt2 追加到 emphasis 上。 

      (7) 把emphasis 追加到 para 上。 

      (8) 创建一个文本节点并把它赋值给变量txt30 

      (9) 把txt3 追加到 para 上。 

      (10) 把para 追加到test.html 文档中的testdiv 元素上。 

      下面是根据上述步骤编写出来的JavaScript 代码: 

      window.onload  ;  function()   {  
         var  para  ;  document.createElement("p ");  
         var  txtl  =  document.createTextNode("This  is  ")j  
         para. appendChild(txtl);  
         var  emphasi s  = document.create Element("em");  
         var  txt2  = document. createTextNode("my") ;  
         emphasis.appendChild(txt2);  
         para.appendChild(emphasis);  
         var  txt3  ;;;  document.createTextNode("  content . ") ;  
         para.appendChild(txt3);  
         var  testdiv  ;  document.get ElementByld("testdiv");                                           ,  
         testdiv .appendChild (para);  

                                                                    ~  

      把上面这些代码写入example.js 文件，然后在浏览器里重新加载test.html 文档。 

      如果你愿意，可以采用一种不同的方案。可以先把所有的节点都创建出来，然后再把它们连 

接在一起。下面是按照这一思路制定出来的行动计划。 

      (1) 创建一个p 元素节点并把它赋值给变量 para。 

      (2) 创建一个文本节点并把它赋值给变量txtl。 

                                                                                                         、 
      (3) 创建一个em 元素节点并把它赋值给变量emphasis。 

      (4) 创建一个文本节点并把它赋值给变量 txt2。 

      (5) 创建一个文本节点并把它赋值给变量 txt3。 

      (6) 把txtl 追加到 para 上。 

      (7) 把txt2 追加到 emphasis 上。 

      (8) 把emphasis 追加到 para 上。 

      (9) 把txt3 追加到 para 上。 

      (10) 把para 追加到 test.html 文档中的 testdiv 元素上。 

      下面是根据上述步骤编写出来的JavaScript 代码: 

      window.onload  = fu肌f 
        var  para  = document.createElement(γ，  ) ;  
        var  txtl  ;  document . createTextNode("Thi s  is  ");  
        var  emphasis  =  document.createElement("em");  
  •  
        var  txt2  = document .createTextNode("my");  
        var  txt3  =  document. createTextNode("  content. ");  
         para .appen dChild(txtl);  
         emphasis .appendChild(txt2);  
        para.appendChild(emphasis)j  
        para.appendChild(txt3);  
        var  testdiv  =   document .get ElementByld ("testdiv");  
        testdiv.appendChild(para);  
      }  

                          吨， 

----------------------- Page 125-----------------------

                                                                           7.3   重回图片库              107  

    ' 如果把上面这些代码写入 examp 1 e. js 文件，然后在浏览器里重新加载 test.html 文档，将看 

到与前面一模一样的结果。 

     可以看到，把新节点插入某个文档的节点树的办法并非只有一种。即使决定永远也不使用 

 åocument . wri te 方榕或 1rlrler、HTML 属性，在使用DOM方法去创建和插入右;节点时你也可以灵活地 

 做出多种选择。 

 7.3     重回图片库 

     现在，我将向你展示一个动态创建 HTML 内容的实用案例。在上一章里，我们对图片库脚 

本做了许多改进。我们做到了让JavaScript 代码与HTl\在L分离，并针对各种情况做到了平稳退化， 

我们还做了一些访问性有关的改进。 

     不过，还有一些内容让我感到不太满意。看一下ga 11 ery . htm 1 文件中的标记: 
      <lOOCTYPE   htm l>  
      <html  lang="en">  
      <head>  
        <meta  charset="utf-8"  1>  
        <title>Image  Gall ery</title>  
        <link  rel =" stylesheet"  href="styles/layout.css"  media="screen"   1>  

      <body>  
        <hl>Snapshots</hl>  
      .  <ul  id="imagegallery">  

            <a  href="imageslfireworks.jpg"  title="A  fireworks  display">  
              <img  src="images/thumbnail_fireworks.jpg"  alt="Fireworks"   1>  

          </li>  
          <li>  
            <a  href="images/coffee .jpg"  title="A  cup  of  black  coffee"  >  
              <img   src="i扫im阳l旧ages/thumbnail_cof忏fee . jpg" alt="Coffee"   1>  

            <a  href="images/rose.jpg"  titlê= "A red ,  red  rose">  
              <img  src="images/thumbnail_rose.jpg"  alt="Rose"  1>  

           <a   href="images/bigben.jpg"  title="The  famous  clock">  
              <img  src="images/thumbnail_bïgben.jpg"  alt="Big  Ben"  1>  

       <img  id="placeholder"  src="images/placeholder.gif"  alt="my   image  gallery"  />  
       <p  id="description">Choose  an  image.</p>  
       <script  src="scripts/showPic.js"></script>  
     </body>  
     </htmb  

     这个XHTML文件中有一个图片和一段文字仅仅是为 showPi c 脚本服务的。若能把结构和行 

为彻底分开那最好不过了。既然这些元素的存在只是为了让 DOM 方法处理它们，那么用 DOM 

方泣来创建它们才是最合适的选择。 

     第一步非常简单:把这些元素从ga11 ery. html 文档里删掉。接下来，我们编写一些JavaScript 

----------------------- Page 126-----------------------

   108     第 7 章动态创建标记 

代码把它们动态地创建出来。 

     我们先编写一个函数 preparePlaceholder 并把它放进 showPic.js 文件，然后在文档加载时调 

用这个函数。下面是这个函数要完成的任务。 

     (1) 创建一个 1mg 元素节点。 

     (2) 设置这个节点的 id 属性。 

     (3) 设置这个节点的 src 属性。 

   .  (4) 设置这个节点的 alt 属性。 

     (5) 创建一个p 元素节点。 

     (6) 设置这个节点的 id 属性。 

     (7) 创建一个文本节点。 

     (8) 把这个文本节点追加到 p 元素上。 

     (9) 把p 元素和 1 附元素插入到 gallery.html 文挡。 

     创建这些元素和设置各有关属性的工作比较明确。我们在这里组合使用了 createElement()、 

createTextNode()和setAttribute()方法: 

     var  placeholder  =  document.create Element(limg")j  
     placeholder.setAttribute(lidl ,lplaceholder")j  
     placeholder.setAttribute("src" , "images/placeholder.gif")  
     placeholder.setAttribute("alt" ,"my   image  gallerY")j  
     var  description  = document.createElement("p")j  
     descriptiçm. setAttribute (" id飞"description")j 
     var  desctext  = document . createTextNode("Choose  an  ima~e");  

    接下来，我们用 appendChild()方法把新创建的文本节点插入p 元素: 

     description.appendChild(desctext);  

    最后一步是把新创建的元素插入文档。很凑巧，因为图片清单 (<ul>  ...  </ul>)  刚好是文 

裆中的最后一个元素，所以如果把placeholder 和descr忖tion 元素追加到 body 元素节点上，它们 

就会出现在图片清单的后面。我们可以通过标签名 "body" 引用 body 标签(作为第一个也是唯 

一一个body 元素的引用)。 

     document .getElementsByTagName(飞ody")[o] .appendChild(placeholder) j 
     document .getElementsByTagName("body")[o] .appendChild(description) j  

     当然， 也可以使用H币，也-DOM提供的属性body : 

    这两组语句都会把placeholder 和description 元素插入到位于文档末尾的</body>标签之前。 

     以上代码工作得很好，但这一切都依赖于一个细节:图片清单刚好是<body非F分的最后一个 

元素。如果在这个图片清单的后面还有一些其他的内容该怎么办?我们的真实想法是，让新创建 

的元素紧跟在图片清单的后面，而不管这个清单出现在文档中的什么地方。 

7.3.1    在已有元素前插入一个新元素 

    DOM 提供了名为 i nsertBefore( )方法，这个方法将把一个新元素插入到一个现有元素的前 

                                                         ,  

----------------------- Page 127-----------------------

                                                                                      7.3    重回图片库                 109  

 画。在调用此方法肘，你必须告诉它三件事。 

       (1) 新元素:你想插入的元素 (newE7 ement )。 

       (2) 目标元素:你想把这个新元素插入到哪个元素 (targetE7ement) 之前。 

       (3) 父元素:目标元素的父元素 (parentE7ement) 。 

       下面是这个方法的调用语法: 

       parentElement. insertBefore(newElement, targetElement)  

      我们不必搞清楚父元素到底是哪个，因为 targetElement 元素的 parentNode 属性值就是它。 

在DOM里，元素节点的父元素必须是另一个元素节点(属性节点和文本节点的子元素不允许是 

         点)。 

      比如说，下面这条语句可以把p1aceho1der 和 description 元素插入到图片清单的前面(还记 

       ，图片清单的 id 是imagega 11 ery) :  

      var  gallery  =  document .getElementById("imagegallery");  
      gallery.parentNode.insertBefore(placeholder ,gallery);  

      此时，变量ga11ery 的 parentNode 属性值是body 元素，所以 p1aceholder 元素将被插入为 body 

 一斗的新子元素，它被插入到它的兄弟元素gal1ery 的前面。 

      还可以把description 元素也插入到 gallery 元素之前，成为它的一个兄弟元素: 

      gallery.parentNode . insertBefore(description ,gallery);  

      在 gallery 清单的前面插入placeholder 图片和description 文本段的效果如图 7-9 所示。 

                                                                                                                 •  

                                                                                                          , .!  

                                                        图 7-9 

      这种效果其实也不错，但我们刚才说的是把新创建的元素插入到图片清单的后面，而不是前面。 

7.3.2      在现有方法后插入一个新元素 

      你可能会想:既然有一个 insertBefo陀方泣，是不是也有一个相应的 i nsertAfter、()方法。很 

----------------------- Page 128-----------------------

      110       第 7 章动态创建标记 
,  

   可惜， DOM没有提供这个方法。 

         1. 编写i nsertA fter、函数 

         虽然DOM本身没有提供 i nsertAfter、方蓓，但它确实提供了把一个节点插入到另一个节点之 

   后所需的所有工具。我们完全可以利用已有的DOM方法和属性编写一个 i nsertAfter、函数: 

         function  insertAfter(newElement ,targetElement)   {  
           var  parent  =  targetElement.parentNodej  
           if  (parent.lastChild  ==  targetElement)   {  
             parent.appendChild(newElement)j  
           }  else  {  
             parent.insertBefore(newElement ,targetElement.nextSibling)j  

         这个函数用到了以下DOM方法和属性: 

         口 parentNode 属性 
                                                                        •  

         口 lastChild 属性 

                                                                                    ,  

         口 appendChi ld 方法 

         口 i nsertBefor它方法 

         口 nextSi bling 属性 

         下面，请看看这个函数是如何一步一步地完成工作的。 

         (1) 首先，这个函数有两个参数:一个是将被插入的新元素，另一个是目标元素。这两个参 

   数通过变量newElerr恒的和targetEl ement 被传递到这个函数: 

         function  insertAfter(newElement ,targetElement)  

         (2) 把目标元素的 parentNode 属性值保存到变量parent 里: 

         (3) 接下来，检查目标元素是不是 parent 的最后一个子元素，即比较 parent 元素的 

   lastChild 属性值与目标元素是否存在"等于"关系: 

         if  (parent.lastChild  ==  targetElement)  

        (4) 如果是，就用 appendChild 方法把新元素追加到 parent 元素上，这样新元素就恰好被插 

   入到目标元素之后:                                                                  ,  

         parent.appendChild(newElement)  

        (5) 如果不是，就把新元素插入到目标元素和目标元素的下一个兄弟元素之间。目标元素的 

   下一个兄弟元素即目标元素的 nextSibling 属性。用 i nsertBefore 方法把新元素插入到目标元素 

   的下一个兄弟元素之前: 

         parent.insertBefore(newElement.targetElement.nextSibling)  

        表面上看， 这是一个相当复杂的函数，但只要把它分成几个小部分来理解，就很容易搞清 

   楚。即使你现在还不能完全明白也不要紧。等你对 i nsertAfter、函数所用到的 DOM方法和属性更 

   加熟悉时，你自然就能完全理解它。 

        类似于第6 章出现的 addLoadEvent 函数， i nsertAfter、函数也非常实用，应该把它们都收录到 

         •  

----------------------- Page 129-----------------------

                                                                                             7.3    重回图片库                   111  

                     ‘  
你的脚本里。 

       2. 使用i nsertA fter‘函数 

       我们将i nsertAfter、函数用在我的 preparψ1aceho1der 函数中。首先，得到图片清单: 

       var  gallery  =  document.get ElementByld("imagegallery")j  

      接下来，把 p1aceholder (这个变量对应着新创建出来的 1mg 元素)插入到 gallery 的后面: 

       insertAfter(placeholder ,gallerY)j  

      p1aceho1der 图片现在成了 ga11 ery . htm 1  文档的节点树的组成部分，而我们希望把description 

文本段插入到它的后面。我们已经把这个节点保存在变量description 里了。再次使用 i nsertAfter、() 

方兹，但这次是把description 插入到 placeho1der 的后面: 

       insertAfter(description , placeholder);  

       增加了上面这几条语句之后， prepareP1aceho1der 函数变成了如下的样子: 

       function  preparePlaceholder()   {  
         var  placeholder  =  document.create Element("img")j  
         placeholder.setAttribute("id" ,"placeholder")j  
         placeholder.setAttribute("src" , "images/placehol der.gif")j  
         placeholder.setAttribute("alt" ,"my          image  gallery");  
         var  description  =   document . creatèElement("p");  
         description. setAttribute("id ", "description");  
         var  desctext  =  docαωUIT阳I 
        . description.appendChild(desctext);  
         var  gallery  =  document.get ElementByld("imagegallery")j  
         in sertAfter(placeholder ,gallery)j  
         insertAfter(description ,placeholder);  

      事情还未结束，这个函数还有最后一个问题没有解决:我在新增加的那几条语句里使用了一 

些新的DOM方怯，但没有测试浏览器是否支持它们。为了确保这个函数有足够的退路，还需要 
                                 •  

再增加几条语句: 

       function  preparePlaceholder( )  {  
         if  (!document . createElement)  return  falsej  
         if  (!document . createTextNode)  return  false;  
         if  (!document.getElementByld )  return  false;  
         if  (! document.getElementByld("imagegallery"))  r eturn  false;  
         var  placeholder  =   document.create Element("img")j  
         placeholder.setAttribute("id" , "placeholder");  
         'placeholder.setAttribute("src" , "images/placeholder.gi f");  
         placeholder.setAttribute("飞alt"γ，J'"、， 
         var  desc口ription =  docωument.createE日lement("p")j 
         description.setAttribute("id" ,"description")j  
         var  desctext  =  document.createTextNode("Choose  an  image")j  
         description . appendChild(desctext)j  
         var  gallery  =  document.get ElementByld("imagegallery");  
         insertAfter(placeholder ,gallerY)j  
         insertAfter(description ， place~older)j  
       }  

7.3.3       图片库二次改进版 

      现在showPic.js 文件包含5 个不同的函数，它们是: 

                                     •  

----------------------- Page 130-----------------------

                             112         第 7 章动态创建标记 

                                                                                                                                              •  

                                口 addLoadEvent 函数 

                                口 i nsertAfter 函数 
                                                                                                                                              p、 

                                                                                                                                              句" 

                                CI   prèparePl aceho 1 der 函数 

                                口 prepareGallery 函数 

                                口 showPic 函数 

                                addLoadEvent 和 i nsertAfter 属于通用型函数，它们在许多场合都能派上用场。 

                                 preparePlaceholder 函数负责创建一个 img 元素和一个p 元素。这个函数将把这些新创建的 

                         元素插入到节点树里图片库清单的后面。 prepareGallery 函数负责处理事件。这个函数将遍历处 

                         理图片库清单里的每个链接。当用户点击这些链接中的某一个时，就会调用 showPic 函数。 

                                showPic 函数负责把"占位符"图片切换为目标图片。 

                                为了启用这些功能，用 addLoadEvent 函数调用 prepar、ePlaceholder 和prepareGallery 函数。 

                                addLoadEvent(preparePlaceholder);  
                                addLoadEvent(prepareGallery);  

                                下面是最终完成的showPic.js 文件: 

                                f unction  addLoadEvent(func)   {  
                                   var  oldonload  =  window.onload;  
                                   if  (typeof  window.onload         !=   'function')  {                                                  ,  

                                      window.onload  =  func;  
                                   }  else  {  
                                      window.onload  =  function()   {  
                                         oldonload  
                                                     () ;  
                                         func() ;  
掷 刷 础 啊 闹 咐 
                                      }  
                                   }  
                                }  

                                function  insertAfter(newElement ,targetElement)   {  
                                   var  parent  =  targetElement .parentNode;  
                                   if  (parent.lastChild  ==   targetElement)   {  
                                      parent.appendChild(newElement);  
                                   }  else  {  
                                      pa!ent.insertBefore(newElement ,targetElement.nextSibling);  
                                   }  
                                }                                                                                            ,  

                                function  preparePlaceholder()   {  
                                   if  (!document.createElement)  return  false;  
                                   if  (!document.createTextNode)  return  false;  
                                   if  (!document.getElementByld)  return  falsej  
                                   if (!document.getElementByld("imagegallery"))  return  false;  
                                                                                                                                "  
                                   var  placeholdei  =  document . createElement{"img");  
                                   placeholder-setAttribute("id:"placgholder");- 
                     •             placeholder.setAttribute("src" ,"imag'es/placeholder.gif");  
                                   placeholder. setAttribute( "alt" , "my   image  gallery");  
                                   var  description  =  document.createElement(γ，  ) ;  
                                   description.setAttribute("id" , "description")j  
                                   var  desctext  =  document '.createTextNode("Choose  an  image")j  
                                                                                                                         •  
                                   description.appendChild(desctext);  
                                   var  gal1ery  =  document.getElementByld("imagegallery");                                 ,  
                                   insertAfter(placeholder ,gallery);  

                                                                                                                              •  

----------------------- Page 131-----------------------

                                                                                                                                                                                                            7.3           重回图片库                                        113  

                                            insertAfter(description ,placeholder)j  

                                       function  prepareGallery()   {                                                                                                                                  叫 
                                                                                                                                                                                                        ‘'气 

                                            if  (!document.getEl ementsByTagName)  return  falsej  
                                            if  (!document.getElementByld )  return  falsej  
                                            i f   (!document  .getElementByld("imagegallery"))  return  false;  
                                            var  gallery  =  docume nt.get Element Byl d("imagegallery")j  
                                            var  links  = gallery.getElementsByTagName( "a ");  
                                            for  (  var  i=Oj   i   <  links.lengthj   i++)   {  
                                                 links[i].onclick  =  function()   {  
                                                      return  showPi c(this)j  
                                       、 
                                      E S 

                                       J 
                                                          · E E E ' 、                                 、                 吨           、 
                                                  -4  LK                                                       LK  
                                                                                                                    rlL                     ik  
                                                                ·                                      牛 吨 .          ·              、 . 
                                                    .VE-                     bk  
                                                           p  ·  ­ ·  · 唱 E · E 肉    γ  a  P                    P    」 咱  ， ， ，  f 
                                                                        nu          nv        p3                                          rL  
                                                       nH                        VJ                          nH              0 nH  
                                                                               e                                                               . 
                                                                                                      i                            i 
                                                                                                   -- 
                                                           、             H                 、                     、                    4 
                                                                                                                     4 
                                                                                      ‘ 」                                         』 
                                                                                                                                               .  
                                                           d                               d                     d 
                                                                     •                                                     •  
                                                                                                                                              ,  
                                                             』 
                                            、 
                                            E 
                                          ，  ， 

                                      ‘  、 
                                      J  F 

                                                                             f   H K - O  · H n i J J  t  V 、 t I 
                                         F                       L 
  V  M v l  a  -  M  M  U  2  4  γ  ·  ·  γ  L  +   .                   · 4             」 。  品  、 . 
                                                                        nrn=14 
                                        .  H  n c C r 、 e   n b s  σ a H u M n L C  C +  C m  m u c y o  n n c 
                                           HU          0           omeiwe--Aet--i  
                                        T                       HuceJUHu 
                                                   4    H                     飞 
                                                                          · 
                                   产   、  ‘  ，    ，                                                                                            ，  ，  ， 、 、 』 、 
                                                                                                                 fkreefk 
                                               俨 0  0  2                 忐    H n  t  牛  E r 、      忐      u n 、 · s . L  H " F  A H  n -  "  J H  H v  - e  4 u 1  A  ‘ 、 " 品 、 + 
                                                       1 
                                                                           v k n                    t p n & 4 T                              b   &  H γ  n w  - u  · n  Q s ·  τ ·  H γ  n  " '  U ·  H 3 e  - 
                                                                                                                                     oin+Le                                   TAV--2M  
                                                                                                                                               r 
                                                                                                                                erter--Jrt  
                                                                                                                                                           zar  
                                                                                                                                                                  uinHU  
                          · z u n v .  a u u v  n  a v  、 n T a  -u - · M U M n 」  e  L L Z  ι Cw T  - M A V L t  n  e i · 』 e e L υ h r n 品 。 」  哇 白 』 r 」 Q L 」 
                                                       · 
                                                                                                                                                     J 
                                                                              i                                                             F 
                                                                                                                                               uJune  
                                                                     &   r   n A 飞   f   J 唱 V  "   t  牛  A n L &                     r 
                                                      snye--wrsr                                                                                   • 
                                                                                                                             n   A   T    T 
                                                                                                                          E 
                                                                                                 H  n L 
                                                                                                                                               ，  ， 
                                                                                     M  H U · H  -              牛 4 i τ  U 
                                                                                                                                                   •  
                                                        、         S  G  A          ·  u n ·                          「 O  ，  ，  .- 、  、  ，  ，  ，  .  、  、  "  "  'U R ， ，  ， 电 r ,e 飞 
                                                                                                                                                                         HU  
                                             "     w  b  σ  γ  - u  n  e  e                                                 m                        n 
                                                                   nem 
                              e  H   L  U   J   n  i   i                                                        P   E                                  i 
                                                                                                                   L 
                                   T  F  T  r-  e 飞 i 咆 ，  e  L  F， 」 "  n  l i 、 』 。 e  品  v  E  L c +  - L F  - L牛 牛 、 冉 m  、 U .」 飞  『   G ， L  Tu E A  H - Z J M e 民 e  "  d  内 c  』 U  M H 川 L +  · 飞 J 3 - 1 、 』 v 白 品  」 』 S J 
                                                                        ·n                 •  
                                                                         品                       a  o n            " 」  " 2 P F  咱      " .   ， "  』 、                   ' 石   咱   』 自 
                                                                                                                                     p-                                                 . 
                                          ·  咱 4                     ·  L  r   n L  & E  i U 」  H 白  -  L  O υ h  i  1 U  、 " 」 4       1  u                   L               i 
                                                                   mnv&L&L  
                                                                                   、 
                                                                                                                                                                                        .  
                                                                                                                                                                                        ,  
                                              、  飞 ， ，  、 
                                                                                                               e 

                                                                                                           " 
                                                                                                                                    -t&L  
                                                                  · 1 - 
                                                                tnvAVA                                           -lr  
                                                          、                 c n u  A 在   ι γ                  牛   牛 
                                                                        c==  
                                   、  申  ' 屯          L  4  4        响          H n t L    .        忐 』   & 忐 L .  L      在 J 』  I 自 l - 中 、 

                                           E  ， S 品  ，  、  。  、 t                         、 a - -     L    L  L   、 ­ ·   E 』            L  i     ， ， 

                                                          忐 
                                                   、        e 
                                                          L 
                                                   d 

                                            }  
                                           var  description  =  document.getElementByld("description")j  
                                            if  (description.firstChild.nodeType  ==   3)   {  
                                                description.firstCh ild.nodeValue  = text;  
                                            }  
                                           return  false;  

                                       addLoadEvent(preparePlaceholder)j  
                                       addLoad Event(prepar eGallery)j  

                                      JavaScript 代码增加了，但标记相应的减少了。gallery .html 文件现在只包含一个由 JavaScript 

                          m本和CSS 样式表共用的"挂钩"。这个"挂钩"就是图片清单的 id 属性。 

                                       <IDOCTYPE               htm l>  
                                       <htm l>                                             ,  

                                       <head>  
                                           <meta  http-equiv="content-type"  content="text/htmlj  charset=utf-8"  1>  
                                           <title>Image   Gallery</title>  
                                           <1ink  rel="stylesheet"  href="styles/layout.css"  media="screen"  />                                                                                                                    、 
                                       </head>  
                                       <body>  
                                           <hl>Snapshots</hl>  
                                           <ul  id="imagegallery">  
                                                <1i>  
                                                     <a   href="images/fireworks.jpg"   title=" A fireworks  display">  
                                           <img         src="images/thumbnail_fireworks.jpg"  alt="Fireworks"  1>  
                                                     </a>  
                                                </li>  
                                                <1i>  
                                                     <a  href="images/éoffee.jpg"  title="A  cup  of  black  coffee"  >  
                                                          <img        sr c="images/thumbnail_coffee.jpg"  alt="Coffee"  />  
                                                     </a>  
                                                </li>  
                                .  
                                                <1i>  

----------------------- Page 132-----------------------

                                 114                第 7 章动态创建标记 

<  
                                                       H L   6 主 4 " 在 、 .                                         " 
                                                                                                    "n 
                                                                                                 ·   v  n  L  、 a "   u  n  s   n  U   A - "    " 
                                                                                              4JHunHUny  
                                                                                                          -11414"  
                                                                                  , 
                                                                                                       牛        - I H A 
                                                                                                            t 
                                                  J  『    γ            m 、                    u n 
                                                             eobeobz  
                                                                              ememnv  
                                                                  .  2     P  · d c U u  n n  t  e  u z n    a  m  o  t o  e F φ J  r e c b  e p  e  ， ，  、 
                                                                                    zehue enu&L·1 
                                                                            oo-loo---1  
                                                                                        EJ'''nvo 
                                                                                                             ， 
                                                                                                                           rnVTnvnu"  
                                                                                  fob                                                        rnks=  
                                                                                                               r z 
                                                                  =Ed- 
                                           、  ，  、  a  m · ·          " 川 a              ι ·         · L  γ - . 
                                                                                                                                 FOb  
                                                  气  、 ， 1 -         F         『         牛   m '                      叮 · M     H 、    "                 , 
                                                                                                      ankva·-J  
                                                                                                  」  『 自    』    白               a 
                                                                                                                                                           > 
                                  r      =      m  O m  - L       & -  U 』  ι  、 L  .自  门      "     i                a         4  - 
                                                                                                                                                         fL 
                                         ­  E      ι  唱 u 川 · 2  」 3    r    d    4     4     H 川 . n    "  ··  J d 、 E  u     n     - 
                                                                                                            - 
                                        -   -  、 n .  ，  ，， - i ， d 、  r 、 

                                                <<< 
                                                f · E 
                                             J      J 
                                                     .•  
                                                 . - 
                            咱    /   ，    止    、 J " 吨 -  、 / · 、  m · z  ￡  "· γ 、 , 、          『          t-、  哩      . H h     俨              、   」  F  "e 

                                                                                                    nynH- 
                                                                                                                 且 ，           " T           l - A         ， ， 、 
                                                                                 fobs                                     t                              KnD  
                                              r  a       l                                                           -  - 
                                                D  、  P e  L -  F  γ -  " '  a r u   n  s   d   t 
                                                                 -                                            .•  
                                                                                                                                               b 」 σ  u 
                                                                                      .•  
                                                                                            m -                   - 
                                                                         H     M    H    L  J  L u  F n  U · H  S                      、 
                                                                                        ,,,                                              牛    D n                  ,                                                          ,  
                                                                     、    沪   =    俨 
                                                                 fiv-- 
                                                                                                a   r   u   K   n    ρ     「            E L                H n     /  、 
                                                                                                                                                                   I  
                                       牛  /  、 。  吨  、    川                                    川       - ·     +  』    J                忐 
                                                                                                                            ·ny                                                                                                       •  
                                               吨  .  ，  ，  ，、 、 J E 〉 

                                 /  、  ，  ，  、u n - y  -  v E品  、 J J 、  ' J r . ，  ，  ，  、ν UCJumi n 冉  A  L d t ,  inH  - ·  1  - d c > , γ ， ， 、 

                                                                                   J                            f  
                                          、                   」                                  」           、             - 
                                                                       』 
                                                                                     d                               A      h 
                                                                                                                     帽 
                                    H  n  t  u n ' 
                                         ,,,,,,  
                                飞 ， 飞 ，     牛 L i 咱 

                                     现在，图片库的结构、样式和行为已经彻底分离了。 

                                     把 gallery. html 文件加载到 Web 浏览器里。如图 7-10 所示，你将看到 placeholder 图片和 

                           description 文本段，它们已被插入到 imagegallery 清单后面。 

                                     我们用 JavaScript动态地创建了标记并把它们添加到了文档里。JavaScript 还对图片清单里的 

                           所有链接进行了预处理。你可以点击任何一个缩略图去体验一下这个图片库吉如图 7-11 所示。 

                                                                                                                                         华川， 错 每每 金莲革 
                              争-    z  aE Q 台湾 

                                                ;{ My                            t)  
                                                     l~a9~ . ','                    Î  
                                                   GaUetγ 才 

                                         一…叫呵呵一…"一一……。"二…二i 

                                                                                                                           '‘  

                                                                     图 7-10 
                                                                                                                                                                                 图 7-11 

                                     到目前为止，我们创建的这些新内容对这个页面来说并不算是新的。比如，页面加载后，标 

                          记中就己经存在title 属性了。而通过createElement 添加的新段落也是基于嵌入在脚本中的标记 

                          添加的。实际上，我们创建的所有一切都包含在了初始的页面当中。只不过我们通过脚本对它们 

                          进行了一番重排而已。怎么才能真正得到原来并不存在于初始页面中的内容呢?下面我们就给出 

                          一种解决方案。 

                                                                                                             J  

                                                                                                                                                                                                                                           、 

                           7.4             Ajax  

                                    2005 年， Adaptive Path 公司的Jesse James Garrett 发明了 Ajax 这个词，用于概括异步加载页 

                          面内容的技术。以前， Web 应用都要涉及大量的页面刷新:用户点击了某个链接，请求发送回服 

                          务器，然后服务器根据用户的操作再返回新页面。即便用户看到的只是页面中的一小部分有变化， 

                                                                                                                                                                                                                                   •  

----------------------- Page 133-----------------------

                                                                                                     7.4    Ajax         115  

                                                                                                                                 ,  

 也要刷新和重新加载整个页面，包括公司标志、导航、头部区域、脚部区域等。 

       使用人jax 就可以做到只更新页面中的一小部分。其他内容一一标志、导航、头部、脚部， 

 都不用重新加载。用户仍然像往常一样点击链接，但这一次，已经加载的页面中只有一小部分区 

 域会更新，而不必再次加载整个页面了。 

       Ajax 的主要优势就是对页面的请求以异步方式发送到服务器。而服务器不会用整个页面来响 

 应请求，它会在后台处理请求，与此同时用户还能继续浏览页面并与页面交互。你的脚本则可以 

按需加载和创建页面内容，而不会打断用户的浏览体验。利用 Ajax ，                                                            Web 应用可以呈现出功能 

丰富、交互敏捷、类似桌面应用般的体验，就像你使用谷歌地图时的感觉一样。 

       和任何新技术一样， Ajax 有它自己的适用范围。它依赖 JavaScript，所以可能会有浏览器不 

支持它，而搜索引擎的蜘蛛程序也不会抓取到有关内容。 

 7.4. 1.    XMLHttpRequest 对象 

      Ajax 技术的核心就是 XMLHttpRequest 对象。这个对象充当着浏览器中的脚本(客户端)与服 

务器之间的中间人的角色。以往的请求都由浏览器发出，而 JavaScript 通过这个对象可以自己发 

送请求，同时也自己处理响应。 

      虽然有关 XMLHttpRequest 对象的标准还比较新(参见HTML5) ，但这个对象的历史可谓久远， 

固而得到了几乎所有现代浏览器的支持。但问题是，不同浏览器实现XMLHttpRequest 对象的方式 

不太一样。为了保证跨浏览器，你不得不为同样的事情写不同的代码分支。 
                                                                                                                   •  

      下面我们举一个例子，把以下代码保存为 ajax.html: 

      < ! DOCTYPE' htm l>                                                                                                     ‘L  
      <html  lang="en">  
      <head>  
      <meta  charset="utf-8"  1>  
         <title>Ajax~/title>  
      </head>  
      <body>                                    .  

         <div  id="new"></div>  

         <script  src="scripts/addLoádEve时.js"></script> 
         <script  src="scdpts/getHTTPObject.js"></script>  
         <script  src="scripts/getNewContent.js"></scri pt>  
      </body>  
      </htm l>  

                                                                                                                                                 、 

      这个HTML文件包含的 addLoadEvent.js 文件位于scripts 文件夹中，该文件夹里还有另外两 

      脚本: getHTTPObject.js 和getNewContent.js。 

      为了模拟服务器的响应，在ajax.html 文件的旁边创建一个example.txt 文件，包含如下内容: 

                                                                                                                  ?、 

      This  was   loaded  asynchronously!  

      这个文件将充当服务器端脚本的输出。-                                  多数情况下，服务器端脚本在接到请求后，还会做一 

      理再输出结果。但这里我们只是为了演示说明，就不搞那么复杂了。接下来我们就编写 

             ect .js 和gètNewContent.js 这两个脚本。 

     微软最早在IE5 中以ActiveX 对象的形式实现了一个名叫 XMLH廿P 的对象。在IE 中创建新的 

                     ,  

----------------------- Page 134-----------------------

             116          第 7 章动态创建标记 

         对象要使用下列代码: 

                 var  request  = new  ActiveXObject("Msxm12 .X州LHTTP.3.0"); 

                其他浏览器则基于XMLHttpRequest 来创建新对象: 

                 var  request  = new  XMLHttpRequest();  

                更麻烦的是，不同 E 版本中使用的 XMLHTIP 对象也不完全相同。为了兼容所有浏览器， 

         但tHTTPObject.js 文件中的getHTTPObject 函数要这样来写: 

                 function  getHTTPObject()   {  
                    if (typeof  XMLHttpRequest  ==           "undefined")  
                      XMLHttpRequest  =  function  ()  {  
                         try  { return  new  ActiveXObject("Msxm12 . X问LHTTP.6.0")j  }  
                            catch  (e)   {}  
                         try  { return  new  ActiveXObject("Msxm12 .XMLHTTP.3.0" );  .}  
                            catch  (e)   {}  
                         try  { r eturn  new  ActiveXObject("Msxm12.XMLHTTP")j                  }  
                            catch  (e)   {}  
                         return  falsej  

                   return  new  XMLHttpRequest();  

                getHTTPObject 通过对象检测技术检测了 XMLHttpRequest。如果失败，则继续检测其他方法， 

、 

         最终返回 false 或一个新的 XMLHttpRequest (或州LH廿P)  对象。 

                这样，在你的脚本中要使用 XMLHttpRequest 对象时，可以将这个新对象直接赋值给一个变量: 

                var  request  =  getHTTPObject()j  

                XMLHttpRequest 对象有许多的方法。其中最有用的是 open 方法，它用来指定服务器上将要访 

         问的文件，指定请求类型:GET、                                  POST 或 SEND。这个方法的第三个参数用于指定请求是否以异步 

         方式发送和处理。 

                在getNeIJ白 

           •  
           .     function  getNewContent()   {  
                   var  request  =  getHTTPObject();  
                    if (request)  {  
                      request.opeQ(  "GET")         "example.txt")  t~~e_)j  
           •          request.onreadystatechange  =  function()  {  
           .             if  (request.readyState  ==   4)         {  
                         var  para  =  document.create Element("p")j  
                         var  txt  =  document.createTextNode(request.responseText)j  
                         para.appendChild(txt);  
                         document.getElementByld('new').appendChild(para)j  
                         }  

                      request.send(null);  
                    }  else  {  
                      alert('Sorry)  your  browser  doesn\'t  support  XMLHttpRequest');  

                                                                                                               ,  

                 addLoadEvent(getNewContent);  

 ,  
                当页面加载完成后，以上代码会发起一个 GET 请求，请求与 ajax.html 文件位于同一目录的 

                                                                                                                                 、 

                                ,  

----------------------- Page 135-----------------------

                                ,                                             7 .4  Ajax      117  

examp 1 e . txt 文件。 

     request.open(  "GE丁" ， "example.txt门 true )j  

     代码中的 onreadystatechange 是一个事件处理函数，它会在服务器给 XMLHttpRequest 对象送 

 回响应的时候被触发执行。在这个处理函数中，可以根据服务器的具体响应做相应的处理。 

     在此，我们给它指定了一个处理函数: 

     request.onreadystatechange  =  function()  {  
       //处理响应 

     当然，也可以引用一个函数。下面的代码就会在 onreadystatechange 被触发时执行名为 

∞60methi 町的函数: 

 注意在为 onreadystatechange 指定函数引用时，不要在函数名后面加括号。因为加括号表示立 

        即调用函数，而我们在此只想把函数自身的引用(而不是函数结果)赋值给 

        onreactystate-change 属性。 

                                 ,  

     request.onreadystatechange  =  doSomething;  

     在指定了请求的目标，也明确了如何处理响应之后，就可以用 send 方法来发送请求了: 

     request.send(null);  

     如果浏览器不支持 XMLHttpRequest 对象， getHnpObject 函数会返回 false，因此你还要处理 

好这种情况。 

     服务器在向 X问LHttpRequest 对象发回响应时，该对象有许多属性可用，浏览器会在不同阶段 

                                                                              、 

更新 readyState 属性的值，它有5 个可能的值:                                                 ‘  

     口 0 表示未初始化 

     口 1 表示正在加载                    •  

     口 2 表示加载完毕 

     口 3 表示正在交互 

     口 4 表示完成 

     只要 readyState 属性的值变成了 4，就可以访问服务器发送回来的数据了。 

     访问服务器发送回来的数据要通过两个属性完成。 一个是 responseText 属性，这个属性用于 

保存文本字符串形式的数据。另一个属性是 responseXML 属性，用于保存 Content-Type 头部中指 

定为"text/xml"的数据，其实是一个DocumentFragment 对象。你可使用各种DOM方法来处理这个 

对象。而这也正是 XMLHttpRequest 这个名称里有XML的原因。 

     在这个例子中， onreadystatechange 事件处理函数在等到 readyState 值变成 4 之后，就会从 

responseText 属性里取得文本数据，然后把数据放到一个段落中，再将新段落添加到 DOM里: 

     request.onreadystatechange  =  function()  {  
       if (request.readyState  ==  4)   {  
         var  para  =   document.create Element("p")j  
         var  txt  =  document.createTextNode(reQuest.responseText);  

----------------------- Page 136-----------------------

     118         第 7 幸动态创建标记 

             para.appendChild(txt);  
             document.getElementByld('new ' ).appendChild(para);  

       此时， examp 1 e . txt 文件中的文本内容就会出现在 id 为 new 的 div 元素中，如图 7-12 所示。 

                                                                                                                               •  

                                  T黯~'Wl}sl份以时í    ，法理y即l阴阳剧ly! 

                                                                                                            、 

      、 

                                                                图 7-12 

                                                                                                       二 

                                                                                         .~~~-~ι~~~_. 气--二 

 注意在使用 Ajax 时，千万妥注意同源策略。                                             使用 XMLHttpRequest 对象发送的请求只能访问与 

           其所在的 HTML处于同一个域中的数据，不能向其他域发送请求。                                                                  此外，有些浏览器还 

           会限制 Ajax 请求使用的协议。                           比如在Chrome 中，如果你使用自le://协议从自己的硬盘里 

           加载 example.txt 文件，就会看到 "Cross origin requests are only supported for HTτp" (跨 

           域，请求只支持 HTTP 协议)                        的错误消息。 

       异步请求有一个容易被忽略的问题是异步'性，就是脚本在发送 XMLHttpRequest 请求之后，仍 

然会继续执行，不会等待晌应返回。为了证明这一点，可以在 request.onreadystate~hange 处理函 

数中和getNéwContent 函数的最后各添加一个警告框: 

       function  getNewContent()   {  
          var  request  =  getHTTPObject();  
          if (request)  {  
            request.open(  "GET" ,  "example.txt飞 true );  
            request.onreadystatechange  =  function()   {  
               if  (request.readyState  _=   4)   {  
               alert("Response  阳ceived");                                                                                 •  
               var  para  =  document.createElement("p");  
               var  txt  =  document.createTextNode(request.responseText);  
               para .appendChild(txt);  
               document.get ElementByld('new').appendChild(para);  

----------------------- Page 137-----------------------

                                                                                            ,- 

                                                                                                                 7.4     Ajax           119  

                                                                                             •  

            ‘  request.send(null)j                                                                                                             ,  
            } else  {  
               alert('Sorry ,  your  browser  doesn\'t  support  X州LHttpRequest')j 

         addLoadEvent(getNewContent)j  

         现在加载一下页面试试，很可能显示‘'Function Done" 的警告框会先于 "Request Received"  
                                                                                                                                                        '  
         口框出现。这就证明了脚本不会等待 send 的响应，而是会继续执行。之所以说"很可能"， 

            有时候服务器的响应也会非常快。如果你是从本地硬盘上加载文件，请求和响应几乎会同 

            。而如果是从手机浏览器中加载页面，那么在收到响应之前恐怕就要等很长时间。 

        为此，如果其他脚本依赖于服务器的响应，那么就得把相应的代码都转移到指定给 

         dJ创atechange 属性的那个函数中。上面例子中添加DOM元素的代码就是一个例子。 

        XMLHttpRequest 对象实际上是非常简单的，也没有什么值得大书特书的地方。不过，只要发 

        点想象力，你就可以通过它达成令人炫目的效果。 

                                                                  B  农                     t 
                                                                       此   处          用 
                                                                  ,,, 
                                                                    与   好     时   弯       它 
                                                                  4  
                                                                   户 Y 
                                                                           川 因 。 
           总的来说， 
                                                                      叫 
                                                                    ' 

       器 

                                                                                                                              ,  
       书签。 
                                                                                                                                   T   :'\'思?‘ 

                                                             响到用户、的预期。 
          只史新部分页面区                                                                                                            操作都应 

                                                         We15事 设计人员必须在向服务 
                                                                                                                      服务器返回响 
          到一个清晰明确的 

   屋时，给用户明确的提，二。 

                                                                                                                       功能，在平稳 
          要构建成功的-Ajax                              键在于将Ajax 功能看做一般的J: 

   退化的基础上求得渐 

7.4.2        渐进增强与Ajax 

       由于 Ajax 应用能够让用户感觉到晌应迅速而透明，很多人都认为它更像传统的桌面应用， 

面不是网站。虽然这种说法在某种意义上是正确的，但却很容易误导人，很容易让人觉得可以毫 

无顾忌地使用Ajax，而不必像在创建网站那样考虑可用性和可访问性。 

       很多站点使用了 Ajax 技术并明确要求必须启用 JavaScript 才能正常访问网站的内容。有一种 

       为此辩护，今天站点提供的功能是如此丰富，根本不可能做到平稳退化。 

       我不赞同这种观点。实际上，我认为能够通过Ajax 实现的应用一定也可以通过其他非人j 缸 

技术来实现。归根结底，要看你怎么用 Ajax。 

                                                                                               J  

----------------------- Page 138-----------------------

            120    第 7 幸动态创建标记 

             如果你从一开始设计就以 Ajax 为起点，那么以后确实很难把它从成品站点中剥离出来，再 

         额外提供一个不使用 Ajax 的版本。但是，如果一开始你的应用就是基于老式的页面刷新机制构 

         建的，那么就可以在既有框架基础上，用 Ajax 拦住发送到服务器的请求，并将请求转交给 

•  

         XMLHttpRequest 对象处理。这种情况下， Ajax 功能就扮演了一个位于常规站点之上的层。 

             这种说法听起来有点耳熟，是吗?这跟我们第5 章讨论的渐进增强理念没有什么区别。从一 

         开始就依赖Ajax 构建核心应用，无异于从一开始就使用javascript:伪协议去处理点击链接的操作 

          (同样也在第 5 章讨论过)。对于后者，更好的方式当然是只使用常规的链接，然后通过JavaScript 

         去拦截默认动作。同样的道理，构建 Ajax 网站的最好方法，也是先构建一个常规的网站，然后 

         H材ax 它。 

         7.4.3   Hijax  

             如果说 Ajax 的成功要归功于它的这个简短好记的名字，让人提到它的时候不用再说 

         "刘1LH即Request 和DOM脚本编程、 CSS，以及(X)HTML" ，而只要说"均ax" 就可以了。那么， 

         你只要说 "Hijax" 飞别人也就明白它指的是"渐进增强地使用Ajax" 。 

             Ajax 应用主要依赖后台服务器，实际上是服务器端的脚本语言完成了绝大部分工作。 

         XMLHttpRequest 对象作为浏览器与服务弩之间的"中间人"，它只是负责传递请求和响应。如果 

         把这个中阅人请开，浏览器与服务器之间的请求和响应应该继续完成(而不是中断)，只不过花 

         的时间可能会长一点点。 

             想一想登录表单，构建它最简单的办法就是按照老传统，让表单把整个页面都提交到服务器， 

         然后服务器再发回来一个包含反馈的新页面。所有处理操作都在服务器上完成，而用户在表单中 

         输入的数据则由服务器负责取得并与保存在数据库里的数据进行比较，看是不是真的存在这么个 

         用户。 

             然后，为了给这个登录表单添加 Aj缸功能，就需要拦截提交表单的请求 (Hijax 嘛) ，让 

         XMLHttpRequest 请求来代为发送。提交表单触发的是 submit 事件，因此只要通过 onsubmit 事件处 

         理函数捕获该事件，就可以取消它的默认操作(提交整个页面)，然后代之以一个新的操作:通 

         过XMLHttpRequest 对象向服务器发送数据。 

             拦截了登录表单的提交请求之后，登录过程就可以让用户感觉更方便。响应时间加快了，不 

         必刷新整个页面了。可是，万一用户的浏览器没有启动 JavaScript 呢?没关系，登录表单照样能 

         让用户正常登录。只不过所花时间要长一点，用户体验没有那么流畅罢了。毕竟，处理登录验证 

         的操作都在服务器上啊，有什么理由让没有JavaScript 的用户不能登录呢! 

             请大家记住这个事实， Ajax 应用主要依赖于服务器端处理，而非客户端处理。既然如此，它 

         就没有理由不能做到平稳退化。不可否认，有些应用如果没有了 Aj缸而只依靠页面刷新，用户的 

         每一次操作可能都要等很长时间。但慢一点的退化的体验，是不是仍然要比完全没有体验更好呢? 

             第 12 章在构建一个完整的网站示例时，将详细介绍如何利用 Hijax 技术。 

            ( Jeremy Keith 借用了 同ack (劫持) 一词的发音和含义，意思就是拦截用户操作触发的请求。一一译者注 

                    •  

                                 •  

----------------------- Page 139-----------------------

                                                                                                                                                                     •  
                                                                                                                                         .  

                                                                                                                                     7.5       小结                 121  

~5  小结 

     在本章里，我们介绍了几种不同的向浏览器里的文档动态添加标记的办法。我们还简要地回 

     两种"传统的"技术: 
                                                                                                                          •  
     口 docurnent.wr、 ite 方法 

     口 innerHTML 属性 

     之后你看到了一些有一定深度的利用 DOM方怯来动态创建标记的例子。 

     口 createElement 方法 

     口 createTextNode 方法 

     口 appendChild 方法 

     口 insertBefore 方怯 

     使用这些方法的关键是将Web文档视为节点树。请记住，你用createElement 或createTextNode 

 u 刚刚创建出来的节点只是JavaScript 世界里的孤儿。利用 appendChild 或 i nsertBefore 方法， 

     把这些 DocumentFragment 对象插入某个文档的节点树，让它们呈现在浏览器窗口里。 

     在这一章里，你还看到了如何对图片库做进一步改进。你还看到了一个非常实用的 

    rtAfter、函数的构建过程。在需要把一些标记添加到文档肘，这个函数往往能帮上大忙。 

     本章还简要讨论了Ajax 和异步请求，这些内容将在第 12 章更详细地介绍。 

     在下一章里，你将会看到更多向文裆添加标记的例子，学会动态创建一些很有用的信息块来 

     你的文档。 

                                                                                                                                 •  

                                                               ,                                                                                     .  '       . .  

                                                                                                                                                           •  

                                                                                                                                             •  

                                                                                          ‘                                                                                             .  

                                                                                                                                                                            ‘  

                                                                                                                                          ,  
                                                                                                                                          4  
                                                                                                                                        .  

----------------------- Page 140-----------------------

~  

                白? 

                                                         黯晦332i 嗡 

                                                      指叫:;;联 

            上一章你已经学会利用 DOM方法和属性来动态创建标记。在这一章里你将继续在实践中应 

         用这些技术。你会通过DOM创建一些标记片段并随后把它们添加到网页。从企iends ofED 网站 

          (h句:/1剑endsofed.coml) 本书的下载页面你可以找到这些函数的完整版本。 

         8.1  不应该做什么 

            理论上，你可以用 JavaScript 把一些重要的内容添加到网页上。事实上这是一个坏主意，因 

         为这样一来 JavaScript 就没有任何空间去平稳退化。那些缺乏必要的 JavaScript 支持的访问者就 

         会永远也看不到你的重要内容。至少到现在为止，各大搜索引擎网站的搜索机器人(searchbot)  

         还几乎不支持JavaScript。 

            如果你觉察到自己正在使用DOM技术把一些重要的内容添加到网页上，则应该立刻停下来 

         去检讨你的计划和思路。你很可能会发现自己正在滥用DOM! 

            第5 章我们讨论过，下面这两项原则要牢记在心。 

            口渐进增强 (progressive enhancement) 。渐进增强原则基于这样一种思想:你应该总是从最 

              核心的部分，也就是从内容开始。应该根据内容使用标记实现良好的结构z            然后再逐步 

              加强这些内容。这些增强工作既可以是通过 CSS 改进呈现效果，也可以是通过 DOM 添 

              加各种行为。如果你正在使用 DOM添加核心内容，那么你添加的时机未免太迟了，内容 

              应该在刚开始编写文档时就成为文档的组成部分。 

            口平稳退化。渐进增强的实现必然支持平稳退化。如果你按照渐进增强的原则去充实内容， 

              你为内容添加的样式和行为就自然支持平稳退化，那些缺乏必要的 CSS 和 DOM 支持的 

              访问者仍可以访问到你的核心内容。如果你用 JavaScript 去添加这些重要内容，它就没法 

----------------------- Page 141-----------------------

                                                                                                        .  

                                                                               8.3   内容        123  

         支持平稳退化，不支持JavaScript，就看不到内容。这好像是一种限制，其实不是，利用 

         DOM去生成内容有着广泛的用途。 

         把"不可见"变成"可见" 

      现如今的 Web 设计人员能够从许多方面对网页的显示效果加以控制。在对包含在 HTML标 

      的内容设置样式时， CSS 提供了非常强大的功能。这种技术早已超越了对网页内容的字体和 

      进行简单调整的初级阶段。利用 CSS ，我们可以把原本纵向排列的元素显示成一行。第6 章 

      Script 图片库页面上由缩略图构成的图片清单就是一个很好的例子。包含在<li>标签盟的列 

     在通常情况下各占一行，                但在我把每个列表项的display 属性设置为 inline 之后，那些列表 

      浏览器窗口里从纵向排列变成了横向排列。 

     反过来也是可以的。对于通常是横向排列的元素，只需巳它的displ ay 属性设置为 b1ock ，就 

     让这个元素独占一行。如果把某个元素的 di spl ay 属性设置为 none，甚至可以让它根本不出 

     浏览器窗口里，这个元素仍是DOM节点树的组成部分，只是浏览器不显示它们而已。 

     除了标签之间的内容以外，标签内的属性中也包含语义信息。.                                     在对内容进行标记时，正确地 

            性也是工作的重要组成部分。 

     绝大多数属性的内容(即属性值)在 Web 浏览器里都是不显示的，只有极少数属性例外， 

     同的浏览器在呈现这些例外的属性时却常常千姿百态。比如说，有些浏览器会把tit1e 属性 

~内容显示为弹出式的提示框，另一些浏览器则会把它们显示在状态栏里。有些浏览器会把 alt 

属性的内容显示为弹出式的提示框，这导致了对alt 属性的广泛滥用。这个属性原本的用途是: 

在图片不可用(无法显示)时用一段描述文字来解释这个位置的图片。 
                                                                                                     ,  

     在显示属性这个问题上，你只能听任浏览器摆布。其实只需要一点点DOM编程，我们就能 

够把这种控制权重新掌握在自己的手里。 

     本章我们着眼于使用 DOM技术为网页添加一些实用的小部件。 

     口得到隐藏在属性里的信息。 

     口创建标记封装这些信息。 

     口把这些标记插入到文档。                                                                          ^ 

     这与简单地利用 DOM去新建一些内容有所区别。  在本章的例子里，这些内容已经存在于标 

记之中，你要利用 JavaSctipt和DOM复制这些内容并以另外一种结构呈现它们。 

8.3     内容                                                                    •  

     和往常一样，任何网页都以内容为出发点。现在拿下面这段文字作为你的出发点: 
                                                                                                      •  

     What   is  the  Document  Object  Model?  
     The  W3C  defines  the  DOM  as:  
     A platform- and  language-neutral  interface  that  will  allow  programs  
     and  scripts  to  dynamically  access  and  update  the  
     content ,  structure  and  style  of  documents.  
     It  is  an  API  t ha t   can  be  used  to  navigate  HT问L  and  XML  documents •  

              •  

                                           、 

----------------------- Page 142-----------------------

           .  

   124      第 8 章 充实文档的内容 

     给这段文字加上适当的标记: 

      <hl>ωhat is  the  Document  Object  Model?</hl>  
      <p>  
     The  <abbr  title="World 训ide Web  .consortium">训3C</abbr> defines  
     -  the  <abbr  title="Document  Object  Model">DOM</abbn   as :  
      </p>  
     <blockquote  cite=''http://www.w3.org/DOM/''>  
       <p>  
     A platform - and  language-neutral  interface  that  will  allow  programs  
     - and  scripts  to  dynamically  access  and  update  the  
     圃.content ， structure  and   style  of  documents.  

       〈γp> 

     </blockquote>  
     <0>  
      It is  an  <abbr  title="Application  Programming  Interface">API</abbn  
     恤.that can  be  used  to  navigate  <abbr  tit1e="HyperText  Markup  Language")  
     恤.HTML</abbn and  <abbr  title;: "eXtensible  Markup   Language">XML  
     幅.</abbr> documents.  
     </p>  

     这段文本包含大量的缩略语，上面已经都用<abbr~标签把它们都标识出来了。 

 注意 <abbr>标签与<acronym>这两个标签之间的区别一直纠缠不清。                               <abbr>标签的含义是"缩略 

        语" (源自英文单饲 abbreviation) ，它是对单饲或短语的简写形式的统称。 <acronym>标签 

        的含义是被当成一个单均未读的 "首字母缩写均" (源 自英文单句 acronym) 。如果你把 

        DOM念成一个单饲 dom，它就是一个首字母缩写询;如果你把它念成三个字母D-O-M， 

        它就是一个缩略语。所有的首字母缩略饲都是缩咯语， 但不是所有的缩略语都是首字母 

        缩略坷。为避免混乱持续下去，在HTML5 中<acronym>标签已被<abbr>标签代替。 

     现在已经把那段文本改写成一个标记片段，你需要把它扩展为一个完整的网页。具体地说， 

要先把这段内容放入<协句〉标签，再把这个b创y 元素以及相应的head 元素放入<htm1>标签。 

8.3.1    选用 HTML、         XHTML 还是 HTML5 

     对于标记而言，选用H刊伍还是刀ITML 是你的自由。重要的是不管选用的哪种文档类型， 

你使用的标记必须与你选用的 DOCTYPE 声明保持一致。 

     就个人而言，我更喜欢使用 XHTML规则，使用一个 DOCTYPE-让浏览器采用更严格的呈现方 

案。它对允许使用的标记有着更严格的要求，而这可以督促我写出更严谨清晰的文档。比如说， 

在写标签末日属性时， HTML 既允许使用大写字母 (比如<P>) ，也允许使用小写字母(比如<p>) ,  

XHTML却要求所有的标签名和属性名都必须使用小写字母。 

     HT:t\伍在某些情况下会允许省略结束标签，比如说，你可以省略</p>和</1 i~标签。表面上看 

它提供了一种弹性，但事实上一旦文档在浏览器里的呈现效果与你的预期不符，追查问题根源的 

将变得十分困难。在范IT孔伍的世界里，所有的标签都必须闭合一一对诸如〈1 日盼和<br>之类的孤 

立元素也不例外:在书写时它们必须有一个反斜线字符表示标签结束:即〈1 附/>和<br/对!样。注 

----------------------- Page 143-----------------------

                                                                                8.3    内容        125  

章，为了与早期的浏览器保持兼容，应该在反斜杠字符的前面保留一个空格。使用严格的 DOCTYPE 

室主验证工具跟踪错误会有很大的帮助。 

     若要使用 XHTML DOTYPE，应将下列内容写在文档开头:                                           (  

       PUBLIC   "-II W3 C//DTD   XHTML  1.0  Strictl/EN"  
       "http : //www .w3 . org/TR/xhtml1/DTD/xhtmll-strict.dtd'')  

    另一个方案你可能会更喜欢，那就是使用盯'ML5 的文档类型声明，它非常简单: 

     <IDOCTYPE   html>  

    总共才 15 个字符。简短好记，并且容易输入。而且这个文档声明同样也支持HT1伍和XHTML标记。 

       了解HTML5，请看第 11 章。 

注意某些浏览器妥根据DOCTYPE 未决定使用标准模式，还是使用兼容模式来呈现页面。                                                     兼容模 

        式意味着浏览器要模仿某些平期浏览器的"怪异行为"，并容许那些不规范的页面在新浏 

        览器也能正常工作。一般来说，我们都应该坚持使用标准模式，避免触发兼容模式。谢 

        天谢地， H曰，也5DOC丁YPE 默认对应的就是标准模式。 

    下面是按照 HTl\在L5 规范完成的最终标记文件 explanation.html: 

     <IDOCTYPE   html>  
     <html  lang="en")  
       <head>  
         <meta  charset="utf-8"  1>  
         <title>Explaining  the  Document  Object  Model</title>  
       </head>  
       <body >  
         <h1>What  is the  Document  Object  Model ?</hl>  
         <p>  
    The   <abbr  title="World  Wide  Web   (onsortium">W3 C</abbr>  de干ines the  <abbr  title="Document  

----------------------- Page 144-----------------------

-一 

                                                                                                    ,  

                                                                                                                                                                .  

                            126                                                                                                                                  、 
                                         第 8 章 充实丈档的内容 

                               Object  Model">DOM</~bbr> as:                   、 

                                     </p>  
                                     <blockquote  cite=''http://www.w3.org/DOM/">  
                                        <p>  
                               A platform-       and  language-neutral  interface  that  will  allow  programs  
                               恤.and scripts  to  dynamitally  access  and  update  the  
                              ..content,  structure  and  style  of  documents.  
                                       </p>  
                                    </blockqu9te>  
                                    <p>  
                              It  is  an  <'abbr  title="Applicatïon  Programming  Interface">API</abbr>  
                              蝠，.that can  be  used  to  navigate  <abbr  title="HyperText  Markup   Language">  
                              ..HTML</abbr>  anQ   <abbr  title=飞Xtensible Markup   language">XML  
                              恒.</abbr> documents.  
                                    </p>  
                                 </body>  
                              </html>  

                             如果你在 Web 浏览器里加载这个页面，就可以看到浏览器是如何显示那些标记内容的，如 

                      图 8.， 1 所示。有些浏览器会把文档中的缩略语(<abbr>标签)显示为带有下划线或下划点的文本， 

                      另一些浏览器则会把缩赂语显示为斜体字。 

                                                                                                           .'                     叫窜。 也 
                                                                                              "时叫.. 一节p      …  

                                                        What is the Document 0战jectModel? 

                                                        TheW始成fines 舱。OMas: 
                                                                           一 
                                                             ' Apla响rm. and I略目QgIM刚刚沁阳如白eïbatwñla蜘!V pm叙棚sand唰掷to 
                                                              dyÍlll时αI11Iy ac剧s imdl~pdi晦舱即脚nt， 墨刷刷re单时即'bÙlfd翩翩院总4 

                                                        Iti.~án 纫翻l~.n bc tI$ed m ~a啕撒姐也and 渝坠伽瞅瞅， 

                                                                                                                                        ,- 

                                                                                                                 飞 
                                                                                                                  ,  

                                                            、 

 、. 

                                                                                            图 8-1 

                      8.3.2         CSS  
                                                     .  

                             且然我还未给 explanation.html 文档配上任何样式表，但样式显然已经在起作用τ。这是因 

                     为每种浏览器都有一些自己的默认样式。 

                             我们可以用自己的样式表来取代浏览器的默认样式。请看下面这个例子: 

                             body   {  
                                font-family:   "Helvetita飞"Arial" ， sans-serif; 

                                                                                                                                                                .  
                             }                                                                                                                                  、 
                             abbr  {                                                                                                                                        '  
                                text-decoration:  noné;                ,                         ‘  

----------------------- Page 145-----------------------

                                                                                                   8.4      显示"缩略语列表"                                     127  

            font-style:  ñormalj  

         把这个样式表保存为 typography.css 文件，并将其放到子目录styles 里-去。 . 
                                                                                                                                                                            •  

         在explanation.html 文档的<head唱:分增加一条语句: 

         <link  rel=" stylesheet"  medi a="screen"  hr ef=" styles/typography.css"   1>                                                                    、 

                        •  

         现在你把explanation.html 文档加载到一个Web 浏览器里，可以看到一些差别。这份文档的 

             了，     其中的缩略语己看不出有特别之处，如图 8-2 所示。 
                                                                                                             ,  

                                    φ..   r命' 

                                    What Is the Document ObJecl Model?  

                                    丁bewacd时柿85tt憾。OM~ 

                                          A例创精仔细掘181事幽静响毓衔冒~II曾"捕时Itat唰捕阳proølll'lll割、ð scripC>>  tody恼mleally 
                                          能创嗣and甸甸tethe倒捆霄， 翩翩IØJ and Ityle d  翩翩翩.. 

                                    It Is.. API that饵nbe\路ecJ tonav均ala睛'Ml臼\dXt.tl. doeumer哑)•  

                                              •  

                                                                                                                      也 

                                                                            图 8-2 

 8.3.3         JavaScαr巾t 

        缩略语(<abbr>标签)的:                            title 属性在浏览器里是隐藏的。有些浏览器会在你把鼠标指针悬 

 停在缩略语上时，将它的title 属性显示为一个弹出式的提示消息。就像浏览器所使用的默认样 

式一样，浏览器对缩回各语的默认呈现行为也是各有各的做法。 

        就像我们可以用自己的css 样式表去取代浏览器所使用的默认样式那样，你也可以用 DOM 

去改变浏览器的默认行为。 

 8.4         显示"缩略语列表" 

        要能把这些<abbr>:标签中的 title 属性集中起来显示在一个页面该多好!用一个定义列表元 

素来显示这些<abbr>:标签包含的文本和title 属性最合适不过了。下面是我希望得到的定义列表: 

        <d l>  
            <dt>W3C</dt>  
           <dd>ωorld Wide  Web   Consortium</dd>  
           <dbDO问</dt> 
           <dd>Document   Object  Model </dd>  
           <dt>API</dt>  
           <dd>Application  Programming  Interface</dd>  

                                                                                                                                                                      ,  

                                                                                                                                                                                         . . .  

----------------------- Page 146-----------------------

                                                                                       二二÷ 一                 -→ 

                  .=.，，;~  

                  128       第 8 章 充实文档的内容 

                       <dbHT问L</dt> 
                       <dd>HyperText  Markup   Language</dd>  
                       <dbXML</dt>  
                       <dd>eXtensible  Markup  Language</dd>  
                     </d l>  

                     你可以使用 DOM来创建这个定义列表，具体步骤如下。 

                     (1)遍历这份文裆中的所有 abbr 元素。 

                     。)保存每个 abbr 元素的title 属性。 

                     (3) 保存每个 abbr 元素包含的文本。 

四 

                     (4) 创建一个"定义列表"元素(即 dl 元素)。 

                     (5) 遍历刚才保存的title 属性和abbr 元素的文本。 

                     (6) 创建一个"定义标题"元素(即 dt 元素)。 
                                                                                      ,  
                     (7) 把abbr 元素的文本插入到这个dt 元素。 
                                                                                •  

                     (8) 创建一个"定义描述"元素(即 dd 元素)。 

                     (9) 把口tle 属性插入到这个dd 元素。 

                     (10) 把dt 元素追加到第4 步创建的 dl 元素上。 

                     (11) 把dd 元素追加到第4 步创建的 dl 元素上。 

                     (12) 把dl 元素追加到 explanation.html 文档的 body 元素上。 

                     我们编写一个函数来做上面这些事。 

                8.4.1    编写出splayAbbre川的1ons 函数 

                     我们把这个函数命名为 displayAbbreviations() 。创建一个名为 displayAbbr、eviåtions.js 的文 

               件并将其存放到子目录scripts。 

                     第一步是定义这个函数。因为它不需要任何参数，所以函数名后面的圆括号将是空的: 

                     function  displayAbbreviations()   {  

                     开始遍历这份文档里的所有 abb广元素之前，我们必须先把它们找出来。这可以用 

               getElementsByTagName 方法轻松完成:只需把abbr 作为参数传递给这个方法，它就会返回一个包含 

               这个文档里的所有abbr 元素的节点集合。(前面提到过，节点集合就是一个由节点构成的数组)。 

               我把这个数组保存到变量 abbreviations 里: 

                     var  abbreviations  = document.get ElementsByTagName(" abbr");  

                    现在，我们可以开始遍历 abbreviations 数组了，但在遍历之前先进行一些测试。我们知道 

               在这份文裆里有一些缩略语，但并非所有的文档都这样。如果想让这个函数还能适用于其他文档， 

               就应该先去检查一下当前文档是不是包含有缩略语，再决定要不要走下一步。 

                     查询一下 abbreviations 数组的 length 属性，我们就能知道这个文档里有多少个缩略语。如 

               果abbreviations.length 小于 1 ，就说明这个文档里役有缩赂语。如果真是这样，这个函数就应该 

               立刻停止执行并返回一个布尔值 false: 

                     if  (abbreviations.length  <  1)  return  false;  

                                   ,  

                                                                       .  

----------------------- Page 147-----------------------

                                                                      8.4   显示"缩咯语列表"                       129  

       如果文档里没有 abbr 元素，这个函数将就此结束。 

       下一步是获取并保存每个abbr 元素提供的信息。我们需要得到每个<abbr>:标签包含的文本及 

  其title 属性的值。当你需要把像这样的一系列数据保存起来时，数组是理想的存储媒介。定义 

  一个名为 defs 的新数组: 

                                                                                                             、 

       var  defs  =  new  ArrayO j  

       现在开始遍历abbreviations 数组: 

       for  (var  i=Oj   i<abbreviations.lengthj  i++)   {  

       为了得到当前缩略语的解释文字，用 getAttribute()方法得到 title 属性的值，并把值保存 

                                                                                     ,  
 到变量definition 里: 

       var  definition  =  abbreviations[i].getAttribute("title")j  

      要得到<abbr>:标签包含的缩略语文本需要 nodeValue 属性。实际上是需要拿到 abbr 元素里的 

 文本节点的值。在explanation.html 文档中的每个 abbr 元素里，文本节点都是这个元素内部的第 

 一个(也是仅有的一个)节点。换句话说，这个文本节点是 abbr 元素节点的第一个子节点: 

       abbreviations[i].firstChild  

      不过，这个文本也有可能会嵌套在其他的元素里。请看下面这个HTML片段:                                                                                •  
                                                                                                                              •  

       <abbr  t i tle="Document  Object 州odel"><em>DOM</em></abbr> 

      此时， abbr 元素节点的第一个子节点将是em 元素节点，文本节点是em 元素的子节点。因此， 

 与其使用 firstChild 属性，不如使用 lastChild 属性更稳妥: 

      abbreviations[i].lastChild  

      下面这条语句得到这个文本节点的 nodeValue 属性并把它赋值给变量 key: 

      var  key  =  abbreviations[i].lastChild.nodeValuej                                                                噩噩瞿噩噩噩F 

                                                                                                                               E噩 

                                                                                                                               - 
                                                                                                                     』 
                                                                                                                             ..  
      现在有两个变量了: definition 和 key。这两个变量的值就是我想保存到defs 数组里的内容。 

我们通过把其中之一用作数组元素的下标(键)，另一个用作数组元素的值的方式来同时保存这 

两个值: 

      defs[key]  =  definitionj  

     defs 数组中的第一个元素的下标是旧C，值是World Wide  Web  Consortium;   defs 数组中的第二 
个元素的下标是 DOM，值是Document Object  Model ，依次类推。 

     下面是这个 for 循环的完整代码: 

      for  (var  i=Oj   i<abbreviations.lengthj  i++)   {  
        var  definition  =  abbreviations[i].getAttribute("title");  
        var  key  =  abbreviations[i].lastChild.nodeValuej  
        defs[ key]  =  definitionj  
                                                                                   .  

     为提高这个循环的可读性，建议你把 abbreviations[订的值                                         你在本次循环里正在被遍历 

的那个 abbreviations 数组元素一一赋给一个名为current-abbr 的变量: 

           •  

----------------------- Page 148-----------------------

                                                                                                                          •  

                     130       第 8 章 充实文档的内容 

                       for  (var  i=.o;   i<abbreviations.length;  i++)   {  
                          var  current-abbr=abbreviations[i];  
                          var  definition  = current_abbr .getAttribute("title");~     _  
                          var  key  = current_abbr.lastChild.nodeValue;  
                          defs[key]  = definition;  

                       如果你觉得currentabbr 变量可以帮助你更好地理解这段代码，那就把它留在那里好了。额 

                 外增加一条这样的语句只是一个非常小的开销。 

                       从理论上讲，你完全可以把整个循环体写成一条语句，J  但那会让代码非常难以阅读: 
r  

                       for  (var  i=,o;   i<abbreviations.length;  i++)   {  
                         defs  
                              I abbreviations [i] .1astChild. nodeValue]  = abbreviations [i] .-getAttribute( "ti tle") ;  

                       在编写 JavaScript 代码时，许多操作都有多种实现办法。就拿上面这个 for 循环来说，你已 

                 经看到了三种不同的写怯。选出一种最适合你的写法用在你的脚本里。如果在编写某些代码时你 

                 就觉得它们不容易理解，等日后再去阅读它们的时候就会更加困难。 

                      现在，我已经把那些缩略语及其解释保存到了 defs 数组里。接下来我们要创建标记以便把 

                 这些内容显示在页面上。 

                 8.4.2      创建标记 

                      定义列表是表现缩赂语及其解释的理想结构。定义列表 (<dl>) 由一系列"定义标题" (<dt>)  

                 和相应的"定义描述" (<dd>)  构成: 

                       (dl>  
                         <dt>Title  l</dt>  
                         <dd>Description  l</dd>  
                         <dt>Title  2</dt>  
                         <dd>Description  2</dd>  
                      </d l>  

                      用 c:reateElement 方怯创建这个定义列衰，并把这个新创建的元素赋值给变量dlist: 

                      var  dlist  = document .createElement("dl");  

                      由上面这条语句创建出来的 dl 元素只是JavaScript 世界里的一个孤儿。稍后我们将通过它的 

                引用，也就是dlist 变量，把它添加到explanation.html 文挡'中。 

                      现在需要再编写一个循环，对刚刚创建的defs 数组进行遍历。这次我们还是使用 for 循环， 

                不过这次与前面编写的那个 for 循环有点儿不一样。你可以利用一个 for/in 循环把某个数组的下 

                标(键)临时赋值给一个变量: 

                      for  (variable  in  array)  

                      在进入第一次循环时，变量variable 将被赋值为数组array 的第一个元素的下标值;在进入 

                第二次循环时，变量 variable 将被赋值为数组array 的第二个元素的下标值;依次类推，直到遍 

                历完数组array 里的所有元素为止。这就是我们遍历关联数组defs 的方式: 

                                              •  

                                                                                                                         ..  

----------------------- Page 149-----------------------

                                                                 8.4   显示"缩咯语歹IJ 哀))                 131  

      for  (key  in  defs)   {  

      上面这行代码的含义是"对于 defs 关联数组里的每个键，把它的值赋给变量 key" 。在接下 

                   ，变量 key 可以像其他变量那样使用。具体到这个例子，因为变量 key 的值是当 

              数组元素的键，所以可以利用它得到相应的数组元素的值: 

      var  definition  =  defs[key] j  

      在这个forlin 循环的第一次循环里，变量key 的值是W3C，变量 definition 的值是World Wide  
     Consortium;  在第二次循环里，变量 key 的f直是 DOM，变量 definition 的值是 Document Object  

     每次循环都需要创建一个dt 元素和一个dd 元素。我们还需要创建相应的文本节点并把它们 

        加到新创建的 dt 和dd 元素。 

     先创建dt 元素: 

      var  dtitle. ;::  document.create Element("dt")j  

     然后用变量key 的值去创建一个文本节点: 

      var  dtitle_text  =  document.createTextNode(key);                                                                 •  

     我们已经创建了两个节点。新创建的元素节点被赋值给变量dtitle。把新创建的文本节点赋 

           dttle-text。使用 appendChild()方法把dttt1e-text 文本节点添加到dtitle 元素节点: 

      dtitle.appendChild(dtitle_text)j  

     重复这个过程创建dd 元素: 

      var  ddesc  =   document . createElement("dd");  

     这次用变量definition 的值创建一个文本节点: 

      var  ddesc_text  =  document.createTextNode(definition)j  

     再一次把文本节点添加到元素节点: 

     ddesc.appendChild(ddesc_text)j  

     现在，我们有了两个元素节点:dtit怡和ddesc。这两个元素节点分别包含文本节点dtthJext 

和ddesc-text。 

     在结束循环之前，接着把新创建的 dt 和 dd 元素追加到稍早创建的 dl 元素上。                                                    这个 dl 

元素已经被赋给了变量dlist: 

     dlist . appendChild( dtitle)j  
     dlist.appendChild(ddesc);  

     下面是这个 for/in 循环的完整代码: 
                                                                         .  

     for  (key  in  defs)  {  
       var  definition  =   defs[keY]j  
       var  dtitle  = document.create Element("dt");  
       var  dtitle_text  =  document.createTextNode(keY)j  
       dtitle.appendChild(dtitle_text)j  

                                  •  
                                                                                     .  

----------------------- Page 150-----------------------

            •  

                    132       第 8 幸 充实文档的内容 

                         var  ddesc  = document.create Element( "dd") ;  
                         var  ddesc-text=dOCURIe时.createTextNode(definition); 
                         ddesc.appendChild(ddesc_text);  
                         dlist.appendChild(dtitle);  
                         dlist .appendChild(ddesc);  

                      到了这个阶段，我们的定义列表就完成了。它作为一个 DocumentFragment 对象已经存在于 

                JavaScript 上下文里。接下来的工作是把它插入到文档中去。 

                      1 .插入这个定义列表 

                      与其把这个定义列表突兀地插入文档，不如给它加上一个描述性标题，这样应该会有更好的 

                效果。 

                      先创建一个h2 元素节点: 

                      var  header  =  document.createElemen町、2"); 

                                                                                     •  
                      再创建一个内容为Abbreviations 的文本节点: 

                      var  header~text ;:::  document.createTextNode("Abbreviations");  

                      然后把文本节点添加到 h2 元素节点: 

                      header.appendChild(header~text);  

                      对于结构比较复杂的文档，或许还需要借助于特定的 id 才能把新创建的元素插入到文档里 

                的特定位置。因为explanations.html 文档的结构并不复杂，所以只要把新创建的元素追加到 body 

                标签上即可。 

                      引用 body 标签的具体做怯有两种。第一种是使用 DOM Core，即引用某给定文档的第一个 

                (也是仅有的一个) body 标签: 

                      document.get ElementsByTagName("body") [0]  

                      第二种做法是使用HTML-DOM，即引用某给定文档的body 属性: 

                      document.body  

                      首先，插入"缩赂语表"的标题: 

                      document.body.appendChild(header)j  

                      然后，插入"缩略语表"本身: 

                      document.body.appendChild(dlist);  

                     displayAbbr、eviations() 函数终于全部完成: 

                      function  displayAbbreviations()   {  
                        var  abbreviations  = document.getElementsByTagName("abbr");  
                        if  (abbreviations.length  <  1)  return  falsej  
                        var  defs  =  new  Array()j  
                        for  (var  i=O;   i<abbreviations.length;  i++)   {  
                          var  current  abbr  =  abbreviations[i]j  
                          var  definition  =  current~abbr.getAttribute("title");  
                          var  key  =  current~abbr . lastChild.nodeValuej  
                           defs[key]  =  definition;  
                        }  
                        var  dlist  = document.createElement( "dl")j  
                        for  (key  in  defs)  {  

•  

----------------------- Page 151-----------------------

                                                                            8.4    显示"缩略语列表>>                             133  

      var  definition  =  defs[key];  
      var  dtitle  =  document.create Element("dt");  
      var  dtitle-text=document-αeateTextNode(key);  
      dtitle.appendChild(dtitle ___ text);  
      var  ddesc  =  document.create Element("dd");  
      var  ddesc_text  =  document.createTextNode(definition)j  
                                    ___ text);  
      ddesc . appendChild(ddesc  
      dlist.appendChild(dtitle)j  
      dlist.appendChild(ddesc);  

                                                       I 
    var  header  =  document . createElement("h2 ');  
    var  header ___ text  =  document.createTextNode("Abbreviations")  
                                    ___ text)j  
    header.appendChild(header  
    document .body .appendChild(header);  
    document.body.appendChild(dlist)j  

 和往常一样，这个函数还有不少需要改进的余地。 

 2. 检查兼容性 

 在这个函数的开头部分，应该安排一些检查以确保浏览器能够理解你这个函数里用到的那些 

   方法，这个函数用到了 getElementsByTagName、                                 createElernent 和 createTe刷础。你可以分 

 查这几个方法是否存在: 

 if  (!document.getElementsByTag~ame) return  falsej  
 if  (ldocument.createElement)  rèturn  falsej  
 if (ldocument.createTextNode)  return  falsej  

 当然，也可以把这几项测试合并为一条语句: 

 if  (ldocument.getElementsByTagName   II  !document.createEl ement  
 ~I I  Idocument.createTextNode)  return  falsej  

这两种做怯并无区别，你可以根据自己的个人习惯选择一种使用。 

displayAbbreviations 函数有点长，应该在它的代码里加上一些注释。 

 function  displayAbbreviations()   {  
  if  (ldocument.getElementsByTagName   II  !document.createElement  
 ål  I  !document .createTextNode)  return  falsej  
 //取得所有缩略词 
   var  abbreviations  =  document.getElementsByTagName( 飞bbr")j  
    if  (abbreviations.length  <  1)  return  falsej  
   var  defs  =  new  Array();  
 //遍历这些缩略词 
   for  (var  i=Oj   i<abbreviations .le咆thj  i++)   {  
      var  current___abbr  =  abbreviations[i)j  
      var  definition  =  current___abbr.getAttribute("title")j  
      var  key  =  current___abbr . lastChild.nodeValuej  
      defs[key]  =  definitionj  
    }                                                                            •  
 //创~定义列表 
   var  dlist  =  document.create Element("dl")j  
 //  loop  through  t he  definitions  
   for  (key  in  defs)   {  
      var  definition  =  defs[key]j  
 //创建定义析题 
      var  dtitle  =  document.create Element("dt")j  
      var  dtitle ___ text  =  document .createTextNode(keY)j  
      dtitle.appendChild(dtitle ___ text)j  
 //  create  the  definition  description  

                                                                                                                       •  

----------------------- Page 152-----------------------

                      .  
                                          134         第 8 章 充实文档的内容 

                                                   var  ddesc  = document . createEle阳lt ( " dd" ) ;  
                                                   var  ddesc_text  =  document.createTextNode(definition);  
                                                   ddesc . appendChild(ddesc_text);  
                                             //把它们添加到定义列表 
                                                   dlist .appendChild(dtitle);  
                                                   dlist.appendChild(ddesc);  

                                             //创建衍扭 
                                                var  header  = document.createElement( 咱2"); 
                                                var  header_text  =  document.createTextNode("Abbreviations")j  
                                                header.appendChild(header_text);  
                                             //把标题添加到页面主体 
                                                document .body.appendChild(header)j  
                                             //把定义列表添加到页面主体 
                                                document.body.appendChild(dlist);  

                                             这个函数应该在页面加载时被调用。你可以通过川ndow.onload 事件来做到这一点: 

                                             window.onload  =  displayAb breviations;                                   •  
       倘    面    '   户    此    由    闷    阳    以  耐 缸  地 工 时  作 够 征  方 首 ， 瞅 先 地 巾  把 把 并 练  号 冲 础  事 若 件 副 协 派  W                                        伽 
悦   把   肌  川    川  灿   叫  阳  川 闭 阴  川 山 时 文 时 山 件 来 川 门 完 为 喇 名 了 为 这  一 后  能 。 便 ' p f  文 A ·  喇 ·  M        保 M l  l l 创 处  一        数 惭 上 的   最   好 
                                          命  成     目                                 件 里  存 为  理 函                                                          于  响  凡  州  文 也 
                                                                                                          -ntcr                                                                   - 
                                                                                                               M   同  。                                            本   仰  件  哪 
                                                                                                         hvns                                                    a-m&             FL'  
                            }   } j 将 . 叩 M 新 函 条 L H 数 : 这  阶'  ·M 叫 n r  : ; H i  刷  语m u  代 切 - - m - =  ο 削 = U  灿 F M  M h  p创 叫 m m -  - 咖 以 m  M切 m d  M 川  以  川到 o P  J W h M 问 M 肌  叽 J  Lr 比 咖  P  门 - 川 抖 印  · 7 …  它m  u h  u  哄  它ι 川 ·  函 归  文 数  荆 r  1 i  t A  ] 阳 [ i m v d 叫 α 

                                        然   } 

                                            归   后     刑   下            阳   句  仰 汩    A m  u                    m u 
                                                                                                           e  
                                             M -    刷               J M           M 
                                                                               V 
                                                                                          切 

                                            现在， J avaScript 脚本文件都已经准备好了。接下来，为了调用这两个JavaScript 脚本文件， 

                                     我们需要在 explanation.html 文件的<head>部分添加一些<script>;标签，如下所示: 

                                            <script  src=飞cripts/addLoadEvent.js"></script> 
                                            <script  src=飞cripts/displayAbbreviations.js"></script> 

                                      注意请确保先包含addLoadEvent.js ，因为 displayAbbreviatiQns.js 依赖于它。在其实项目中， 

                                               你通常还需要压缩脚本，并把它们合并成一个文件(如第 5 章所示)。对我们的例子来说， 

                                               保持多个JavaScript 文件和较多的冗余空白有助于大家理解和试验。 

                                            3. 最终的标记 

                                           下面是最终完成的explanation.html 文件: 

                                            < ! DOCTYPE  html>  
                                            <html  lang="en">  
                                               <head>  
                                                                                                                                                     .  

                、 

----------------------- Page 153-----------------------

                                                                   •                                                                                                                     ,  

                                                                                                       8.4       显示"缩略语列表"                                      135  

               '  

                 <meta  charset="utf-8"  1>  
                 <title>Explaining  the  Document   Object  Model</title>  
                 <link  rel="stylesheet"  media="screen"  
          恒.href="styles/typography .css"  。 
          </head>  
          <body>  
                <hl>What  is  the  Document  Object 问odel?</hl> 
                 <p>  
          The  <abbr  title="World  Wide  Web   Consortium")旧C</abbr> defines  
          -the <abbr  title="Document  Object 问odel">DO问</abbr> as :  
                </p>                                                                                                                                               .  
                <blockquote  cite=''http://刷w.w3.org/DOM/"> 
                    <p>  
          A platform-        and  language-neutral  interface  that  will  allow  programs  
          -  and  scripts  to  dynamically  access  and  update  the  
          -content,  structure  and  style  of  documents.  
                                                                                                                                            ,  
                    </p>  
                </blockquote>  
                <p>  
          It is  an  <abbr  title="Application  Programming  Interface">API</abbn  
          -that  can  be  used  to  navigate  <abbr  title="HyperText  Markup   Language">  
          恤.HTML</abbn and  <abbr  tit1e="eXtensible  Markup   Language">XML  
          </abbr>  documents .  
                </p>  
                < script src=" scripts/ addloadEvent. j s 1.1 >< /script>  
                <script  src="scripts/displayAbbreviations.js"></script>                                                                                                                       .  
             </body>  
          </htm l>  

         现在，把 explanation.html  文件加载到 Web 浏览器里就可以看到 displayAbbreviations 函数 
                                                                         -_ .  
                                                              •  
 酌效果了， 如图 8-3 所示。 

                                                                     生户主音句:邮购崎时响1 创暗佛~t                         句       口 

                                                        ' 戴 @ 会遣一一一                         一--_，      叫一-- ~lo r  

                                              wh硝.     18 the Docum副lt ObJec:t ModeJ?  

                                              W晴叽006回阳帽晴暗以孤‘回: 

                                                   ，明翩翩，如耐 ... 事叫阳咽刷k帽如崎恻翩翩~PI吨，atM lI1d阳扭曲句回晦1IIkf 
                                                   斟揭幡..趴ljIdeI.ø.倒回幅毗甜臼郑，"l11li时向.1>1d院确副响， 

                                              嗣恤*'^闵琦回.，..1>&_Ion阳蟠础eHTMl..回XWLdoc..-聋s.. 

                                              ，\bbrevfa遭10"' 

                                              W棚2 
                                                   W时6\1曲，.\1阳1> 0回略阳恤m 
                                              DOM  
                                                   。回-幢幢。~M嗣M 
                                              API                                                                                                        '  
                                              Hn.tι AA:戴如F帽grII'IW响 1翩翩 

                                                   ~翩翩tM前停国哪躏但 
                                              l<.ML  
                                                   e>伽ltI$蜘梅M田曾叩t刷1111脑" 

                                                                                                                                                     •  

                                                                                                                                                  ,  

                                         E  

                                                                               图 8-3 

 8.4.3          一个浏览器"地雷"                                                                                                    J  

        在此以前，我一直避免提到任何特定的浏览器。只要使用的浏览器支持 DOM，则此前见到 

过的脚本就都可以正常工作。可是，这个displayAbbreviations 函数却是一个例外。 

       displayAbbreviations 函数工作得确实不错，除非你使用的浏览器是 IE6 或更早的 Windows 

                                                                                                            .  

                                                                                                                                                                                           广 

----------------------- Page 154-----------------------

,  

                136     第 8 幸 充实文档的内容 

              版本。如果把 explanation.html 文件加载到 IE 浏览器里，不仅不会看到一个"缩略语列表"， 

              极有可能会看到一条JavaScript 出错消息。 

                  你肯定会对这种行为感到不解:我们已经在 displayAbbreviations 函数的开头部分加上 

              象探测语句，以确保只有支持 DOM 的浏览器才会去执行 DOM 代码， IE 浏览器 

              getElementsByTagName 和getEl ementBy 1 d 方法的支持也毋庸置疑，为什么还会出现这样的问题呢? 

                  事情还要从本书第 1 章里提到的浏览器大战说起。在那场大战中，网景公司和微软公司曾 

              <abbr>和<acron川〉标签当做它们的武器之一。在竞争最激烈时，微软决定不在自己的浏览器里 

              现出br 元素。 

                  那场浏览器大战早已烟消云散，最终的结果是微软打败了网景，但微软的回浏览器直到 

              才支持 abbr 元素。 displayAbbreviations 函数在早期版本中失败，是因为它试图从一些 abbr 元素 

              节点那里提取属性节点和文本节点，而E浏览器却拒绝承认那些abbr 节点的"元素"地位。 

                  我们意外地踏上了一颗在一场早已结束的战争中埋藏下来的"地雷" I  

                  可供选择的解决方案有三种。 

                  口把abbr 元素统一替换为 acronym 元素。我对这种解决方案不感兴趣，因为我不想为了迁就 

                     一种顽固不化的浏览器而"牺牲" 一大批语义正确的标记。 

                  口在元素中使用 html 命名空间 (<html :abbr>abbr</html:abbr>) ，这样 IE 就可以认出这些元 

                     素。这个方案涉及修改标记，如果要在其他的文档中使用 displayAbbreviations 函数，问 

                     题仍得不到解决。 

                  口 保证displayAbbreviations 函数在E中能够平稳退化。这个方案实现起来最简单，也最容 

                     易被人接受。只要多写几行代码， IE  (或其他不能识别 abbr 元素的浏览器)就可以提前 

                     退出。 

                  所以，我们选用第三种。 

                  首先，在负责从abbr 元素提取title 属性值和文本值的for 循环里添加一条语句: 

                  for  (var  i"'Oj   i<abbreviations.lengthj.  i++)   {  
                    var  current_abbr  =  abbreviations[i]j  
                    if  (current_abbr.childNodes.length  < 1)  continue;  
                    var  definition  =  current_abbr.getAttribute("title")j  
                    var  key  =  current  abbr.lastChild.nodeValuej  
                    defs[key]  =  definitionj  

                  这条新增语句的含义是:"如果当前元素没有子节点，就立刻开始下一次循环"。因为 E 浏 

              览器在统计 abbr 元素的子节点个数时总是会返回一个错误的值一一零，所以这条新语句会让E 

             浏览器不再继续执行这个循环中的后续代码。 

                  当 IE 浏览器执行到 displayAbbreviations 函数中负责创建"缩略语列表"的那个for 循环时， 

              因为 defs 数组是空的，所以它将不会创建出任何dt 和dd 元素。我们在那个for 循环的后面添加 

             这样一条语句:如果对应于"缩略语列表"的那个 dl  元素没有任何子节点，则立刻退出 

             displayAbbreviations 函数: 

                  //创建定义列表 
                  var  dlist  =  document .createElement("dl")j  

----------------------- Page 155-----------------------

                                                                        8.4    显示"缩咯语列表"                          137  

   //遍历所有定义 
   for  (key  in  defs)   {  
     var  .definition  = defs [key];  
   //创建定义标题 
     var  dtitle  =  document.create Element("dt");  
     var  dtitle_text  =  document.createTextNode(key);  
     dtitle.appendChild(dtitle_text);  

   //创建定义描述 
     var  ddesc  =  document.create Element("dd");  
     var  ddesc_text  =  document.createTextNode(definitio时; 
     ddesc.appendChild(ddesc_text);  
   //把乞们添加到定义列表 
     dlist.appendChild(dtitle);  
     dlist.appendChild(ddesc);  
                                                                                                                         •  

   if (dlist.childNodes.length  <  1)  return  false;  

  请注意，新添加的这条 if 语句又一次违背了结构化程序设计原则(一个函数应该只有一个 

口和一个出口)一一它等于是在函数的中间增加了一个出口点。但这应该是既可以解决 IE 浏 

   的问题，又不需要对现有的函数代码大动干戈的最简单的办法了。 

  下面是改进函数之后的代码清单: 

   function  displayAbbreviations()   {  
     i f  (! document.  
                      get ElementsByTagName   11    ! docuri1 ent. create_EJement  
   叫1    !document.createTextNode) 工eturn false;  
   //取得所有缩略词 
     var  abbreviations  =  document.get ElementsByTagName("abbr");  
     if  (abbreviations.length  <  1) return  false;  
     var  defs  =  new  Array();  
   //遍历所有缩略词 
     for  (var  i=O;   i<abbreviations.length;  i++)   {  
        var  current_abbr  =  abbreviations[i];  
        if (current_abbr.childNodes.length  <  1)  continuej  
       var  definition  =  current_abbr.getAttribute("title");  
       var  key  =  current_abbr.lastChild.nodeValue;  
       defs[key]  =  definition;  
                                    ,  

   !I 创建定义列表 
     var  dlist  =  document.create Elemënt("dl");  
   //  loop  through  the  definitions  
     for  (key  in  defs)  {  
       var  definition  =  defs[key];  
  //创建定义标题 
       vår  dtitle 二 document.createElement("dt"); 
       var' dtitle_text  =  document.createTextNode(key);  
       dtitle.appendChild(dtitle_text);  
  //创建定义描述 
       var  ddesc  =  document.createElement("dd");  
       var  ddesc_text  =  document.createTextNode(definition);  
       ddesc.appendChild(ddesc_text);  
  //把它们添加到定义列表 
       dlist.appendChild(dtitle);  
                                                                          .  
       dlist.appendζhild(ddesc);  
                                                                                            、 

     if  (dlist.childNodes.length  <  1)  return  false;  
  //创建标题 
     var  header  =  document.createElement("h2");  
     var  header_text  =  document.createTextNode("Abbreviations");  
     header .appendChild(header_text);  
  //把标题添加到页面主体 

----------------------- Page 156-----------------------

                                                                                            •  

                138      第 8 章 充实文档的内容 

                    document.body.appendChild(header)j  

                  II 把定义列表添加到页面主体 
                    document.body . appendChild(dlist)j  

                  这两条新语句将确保explanation.html 文档就算遇到那些不理解abbr 元素的浏览器也不会出 

              问题。它们就像是一条保险绳，其作用与脚本开头部分的对象探测语句很相似。 

              注意 即使某种特定的浏览器会引起问题，也没有必妥使用浏览器唤探代码。对浏览器的名称 

                     和版本号进行嗅探的办法很难做到面面俱到，而且往往会导致非常复杂难解的代码。 

                  我们已经成功地排除了一颗在过去的浏览器大战中遗留下来的"地雷"。如果有什么教训的 

              话，那就是它可以让我们深刻地体会到标准的重要性。仅仅因为IE 浏览器不支持 abbr 元素，就 

              使得一大批用户没有机会看到一个自动生成的"缩略语列表 

              些用户仍能看到页面上的核心内容。缩赂语列表是一种很好的增强补充'它还算不上是页面必不 

              可少的组成部分。如果它真的必不可少，从一开始就应该把它包括在标记里。 

              8.5    显示"文献来源链接表" 

                  displayAbbreviations 函数是一个充实文档内容的好例子(至少对那些不是 E的浏览器来说 

             是如此)。它从文档结构提取出了一些内容并以一种清晰的方式显示出来。那些原本包含在 abbr 

             标签的 title 属性里的信息现在直接呈现在了浏览器窗口里。现在，我们来看另一个增强文档的 

              例子。请大家仔细看explanation.html 文档中的这段标记: 

                  <b l ockquote  cite=''http://www.w3.org/DO伺/"> 
                    <p>  
                  A  platform- and  language-neutral  interface  that  will  allow  programs  
                  恒.and scripts  to  dynamically  access  and  update  the  
                  -.content ,  structure  and  style  of  documents.  
                    </p>- 
                  </blockquote>  

                  blockquote 元素包含一个属性c1 悦。这是一个可选属性，你可以给它一个URL地址，告诉人 

             们blockquote 元素的内容引自哪里。从理论上讲，这是一个把文献资料与相关网页链接起来的好 

             办忿z    但在实践中，浏览器会完全忽视 cite 属性的存在。虽然信息就在那里，但用户却无必看 

             到它们。利用 JavaScript 语言和 DOM，我们完全可以把那些信息收集起来，并以一种更有意义 

             的方式把它们显示在网页上。 

                  我们计划按照以下步骤将文献以链接形式显示出来。 

                  (1) 遍历这个文档里所有 blockquote 元素。 

                  (2) 从blockquote 元素提取出 cite 属性的值。 

                  (3) 创建一个标识文本是source 的链接。 

                  (4) 把这个链接赋值为 blockquote 元素的 cite 属性值。 

                  (5) 把这个链接插入到文献节选的末尾。 

                             •  

•  .  

----------------------- Page 157-----------------------

                                                         8.5   显示"文献未源链接哀，)                      139  

     和显示缩略语列表一样，我们将根据上述步骤编写一个JavaScript 函数。 

编写 displayCitations 函数 

     我们将新函数命名为 displayCitations ，将它保存在displayCitations.js 文件中。 

     首先，因为它不需要任何参数，                     所以函数名后面的圆括号将是空的: 

      function  displayCitations()  {  

     第一步是把文档里的所有 bl ockquote 元素找出来。使用 getElementsByTagName 方放完成这项 

查找工作，并把找到的节点集合保存为变量quotes: 

      var  quotes  ;;  document .getElementsByTagName(lblockquote")j  

     接下来遍历这个集合: 

      for  (var  i =O;  i<quotes.lengthj  i  ++)  {  

     在这个循环里，我们只对有 cite 属性的文献节选感兴趣。我们用一个简单的测试检查本次 

 循环中的当前文献节选有没有这个属性。 

     用 getAttr协ute 方法测试节点集合 quotes  中的当前元素(即 quotes[iJ ) ，如果 
~tAttribute( "cite")的结果为真，就说明这个节点有 c;te 属性z                           如果!getAttribute ( " cite")的结 

果为真，就说明这个节点没有 cite 属性。如果是后一种情况，使用 continue 立刻跳到下一次循 

环，不再继续执行本次循环中的后续语句: 

     if  (!quotes[i].getAttribute(气ite"))  {  
        continuej  

     也可以把这条语句写成下面这样: 

     if (!quotes[i]. getAttri bute("cite"))  continuej  

     接下来的语句将只有当前blockquote 元素有c;te 属性的情况下才会执行。 

     首先，得到当前blockquote 元素的 cite 属性值并把它存入变量 urh 

                                                                                                           "  

     var  url  =  quotes[i].getAttribute("cite")j  

     下一步是确定应该把"文献来源链接"放到何处。这似乎是一项非常简单的任务。 

     1. 查找你的元素 

     一个 blockquote 元素必定包含块级元素，如文本段落， 以容纳被引用的大段文本。我们想 

把"文献来源链接"放在 blockquote 元素所包含的最后一个子元素节点之后。显然我们应该先找 

到当前blockquote 元素的 lastChi ld 属性: 

     quotes[i].lastChi ld  

     可是，这样我们就会遇到一个问题。请大家再仔细看看这段标记: 

     <blockquote  cite::o "http://www.w3.org/DOM/">  
       <p>  
     A platform - and  l anguage-neutral   interface  that  will  allow  programs  
     ~and  scripts  to  dyna mically  access  and  upd ate  t he  

 •  

----------------------- Page 158-----------------------

                          140           第 8 幸.          充实文档的内容 

                             恼.content，        structure  and  style  of  documents .  
                                 </p>  
                              </blockquote>  

                             乍看起来， blockquote 元素的最后一个子节点应该是那个p 元素，而这意味着 lastChild 属性 

                     的返回值将是一个 p 元素节点。可是，事实却并不一定如此。 

                             那个 p 节点的确是 blockquote 元素的最后一个元素节点。但在</p~标签和</blockquote~标签 

                     之间还存在着一个换行符。有些浏览器会把这个换行符解释为一个文本节点。这样一来， 

                     blockquote 元素节点的 lastChild 属性就将-是一个文本节点而不是那个p 元素节点。 

                      注意在编写 DOM脚本时， 你会想当然地认为某个节点肯定是一个元素节点，这是一种相当常 

                                  见的错误。如果没有百分之百的把握，就一定要去检查 nodeType 属性佳。有很多 DOM方 

                                  法只能用于元素节点，如果用在了文本节点身上，就会出错。 

                             DOM 已经提供了一个非常有用的 l astChild 属性，如果它能再为我们提供一个 

                     lastChildElernent 属性就更好了。但令人遗憾的是它没有。还好，你可以利用已有的DOM方法和 

                     属性编写一些语句，完成这项任务。 

                             你可以把包含在当前 blockquote 元素里的所有元素节点找出来。如果把通配符"*"作为参 

                     数传递给getElementsByTagName 方法，它就会把所有的元素，不管标签名是什么， 一一返回给我 

                     们: 

                             var  quoteElements  = quotes[i] .getElementsByTagName(  

                     变量 quoteEle阳ents 是一个数组，它包含当前 blockquote 元素(即 quotes[iJ) 所包含的全体元素 

                     节点。 

                             现在， b 1 ockquote 元素所包含的最后一个元素节点将对应着quoteElements 数组中的最后一个 

                     元素。数组中的最后一个元素的下标等于数组的长度减去 1 ，因为数组的下标从零开始。记住， 

                     数组中的最后一个元素的下标不等于数组的长度，而是数组的长度减去 1 :  

                             var  elem  = quoteElements[quoteElements.length  -                           1];  

                            现在，变量elem 对应blockquote 元素所包含的最后一个元素节点。 

                             回到我们正在displayCitations 函数里编写的那个循环，下面是已经写出来的代码: 

                             for  (var  i=Oj   i<quotes.lengthj  i++)   {  
                                if (lquotes[i].getAttribute("cite"))  cont i nuej  
                                var  url  =  quotes[i].getAttribute("cite")j  
                                var  quoteChildren  =  quotes[i].getElementsByTagName('*')j  
                                var  elem  = quoteChildren[quoteChildren.length  -                          l]j  

                            与其假设 quoteChildren 变量肯定返回一个元素节点数组，不如增加一项测试来检查它的长 

                     度是否小于 1 。如果是，就用关键字 continue 立刻退出本次循环: 

                                 飞 /                          γ - -     n h f e ' I   ， 
                              rT  
                                          、 .      、 . 
                                                                               --&FLHU 
                                                           牛 
                                               nuerL                    &L&L+LEd  
                                                     J   u n H  A  U  n  a  H  n     z d 
                                                                    e--to  
                                T r v                       』 自   U H b c 
                               o       a--unu-         nu-     Ed-?···          +-1&LOb  
                                         rnu     ..      uobse                    +tee  
                                                                            ., 
                                             =       、  L & L 
                                                    .•.  
                                且          &                    · 
                                 ••  
                                                                                     、 ‘ 
                                                 , 
                                             U J L & J 1                      俨  "  "   、 
                                                                            r 
                                                  , 
                                                                      1 0 1 " 
                                   FTaa                                                           --np  
                                、   t +  u n L +   、     』 户 n u A 牛     」 白          ，    ‘ s ' · r ·  H  n ι + a 
                                                 snuihH                                      nv"nH  
                                                                                                    nHuy  
                                                                                                         ., 
                                                                                                     UTt  
                                         H H                                            ， 
                                                  ELU-- 
                                                        Z  H n b O L 
                                                                            t---l  
                                .    飞             A 
                                                               』 。 晶                 』  自  』  白  」    』 
                                                       - 
                                                                                  0 4 4 f 
                                ·                                                     ， 
                                         t 
                                         、       -  u n H n a a r · 咱 牛  γ        &  E  ' L  m r L & ，  、 
                                         ZHU           er  
                            v u v u r r o l  =            = i 电 』 E D 忐 L t t r · · t 、    L + J         M     ，  ， L  、 
                                                                                                                   *  
                                                                                                     M 2    m  』 血    ， ‘ 
                                                                                                        ohv  - 
                                             ρ                   U  H 
                                                                                                                        . 
                                                  - . ， 
                                                                                    E 
                                                                     L                                   川  川  、  ， 
                                                                                                           a  
                                                                      」     』           』 川 
                                             』 
                                                                               ·                                        .  
                                                                                                                      J 
                                                                                                                        ,  

.  

----------------------- Page 159-----------------------

                                                        8.5  显示 u 文献未源链接哀)'                   141  

       if (quoteChildren.length  <  1)  continuej  
     var  elem  =  quoteζhildren[quoteChildren.length - l]j  

     我们已经把创建一个链接所需要的东西全准备好了。变量 url 包含着将成为那个链接的 href 

   性值的字符串， elem 变量包含着将成为那个链接在文档中的插入位置的节点。 

     2. 创建链接 

     用 createEl ement 方法创建一个"链接"元素: 

     var  link  =  document.createElement(" a ")j  

     接下来，为那个新链接创建一条标识文本。用 createTextNode 方法创建一个内容为 source 的 

     节点: 

     var  link_text  =  document.createTextNode("source")j  

     现在，变量link 包含新创建的 a 元素，变量 11nKJext 包含着新创建的文本节点。 

     用 appendChild 方怯把新的文本节点插入新链接: 

     link.appendChild(link_text);  

     把href 属性添加给新链接。用 setAttr寸bute 方法把它设置为变量 url 的值: 

     link.setAttribute( "href" ,url)j  
                                                                                                             .  
     新链接已经创建好了，可以插入文档中了。 

     3. 插入链接 

     你可以就这样把它插入文档，也可以先用另一个元素，比如 sup 元素，包装它，使它在浏览 

器里呈现出上标的效果。 

     创建一个 sup 元素节点并把它存入变量super、script: 

     var  superscript  =  document.createElement("sup ") ;  

     把新链接放入这个sup 元素: 

                                    •  
     superscript . appendChild(link);  

     现在，有了一个存在于 JavaScript 上下文中的 DocumentFragment 对象，它此时尚未被插入 

任何文档: 

     <s up> <a  href=''http: //www.w3.org/DOM/ ">source< /a></s up >  

     为了把这个标记插入文档，你要把变量 superscript 追加为变量 el 酬的最后一个子节点。因 

为变量 elem 对应着 blockquote 元素目前所包含的最后一个元素节点，这个上标形式的新链接将 

出现在文献节选的后面: 

     最后，先用一个右花括号结束这个for 循环，再用一个右花括号结束整个函数。 

     下面是displayCitations 函数到目前为止的代码清单: 

     function  displayCitations()  {  
       var  quotes  =  document.getElementsByTagName("blockquote");  
       f or  (var  i=Oj   i<quotes.lengthj  i++)   {  
         if (!quotes[ i ] .getAttribute(" cite"))  continuej  

----------------------- Page 160-----------------------

                                    142              第 8 章 充实文档的内容 

                              P   I (  n i τ  = H  e  (  dn W A P  f A  e V  " 由 -  e 伽 t 四 t 4 ·  a t  n f  h E  t 〈 的 t  A 叫 d  如U A l e c  n m [  J M 由 。 ， 此 圳 门 "  四 e · u  v m m  -  t e " h 
}   e L  n  ps v 3 l  U l  s v A  v e v 缸  L - 缸  · 缸 +  v 于 U v 缸  A 缸t n  t 』 白 = -  、  口E  L  fu M  Zm  · M ω瞅 』 - 旧伸 d 瞅 由  e  e  仰 em  d自 凹 m  - c M  M J  u  n  Hm = W 饥  ω m  n· n  n  ls M 山  M - 阳 F b  m e  NU 「 -  ω U α  J  - d a  m M r  nU  M ω m  w&  " r  " O w 凡 τ · L ' U H ， Ee 唁 & n '  i在  A  - 、 飞 . 在 r 』 L  、 i 「 l h 川 . · 肌 h  忖 L  臼 时 时  - 内  趴h % m r 4 m 

                            •  
                                                       口 
                                                                        了            在             阳             出 
                                                                                                  』  L 白  附 T 』  A  V L  。 

                         用      会  M 口  m  仰 ω  U 机 U叩 m -  盯 - m W A 川 B  mW 阿 ·  ·M m  m · U  γ A 吁  . 阳  灿  丑M . 能 」 飞 m i 唁 t ， 似  地 仁 旧 ，  代 川 - 拭  E更 个 F 数 叫  ， J 

                              t 函 A  、 一 } 川  』  白  品  α  咱咀 K 本 !  ! 是 仰  ·  J  E灿 方  进 U 的 阳 叩 C 飞 · m  川                                                      •  

                              解  这 照  惯 改  进个  例    脚 
                              •  

                                理     依                              到  刮    育         恩 。 划                  、     让     这  码      函  易  子 的  理 开  解 头  部  饥        制       该  那 些  止 ·  则  试  勤  叫  情J  热     酬       览    器 
                                                                                                                                                                  t'  
                                                       ' M  L  e v                                          ~ r - ，  T ，  睛 
                                                                                                                                                                             HHHTT- 
                                                                                       、 民  ， 
   •  
                                                                」 
                                                                                                                                                                          注   一 
                                                                            叫 
                                                         b u  t h            的    町                         / 之  。 
                                                                             ••  
                                                                                                             4 
                                                                                                             ， 

                             能    够                                                    D   r  F M                v ι 
                                                                                                                                                                                                    一 
                                                              理 
                                                                                           飞 
                                                               J 
                                                                                                                 t 

                                                                                                                                                                                      •  

                                       function  displayCitations()  {  
                                           if  (!document .getElementsByTagName   II  !document.createElement  
                                       ål I  !document .createTextNode)  return  false;  
                                       //取得所有引用 
                                           var  quotes  = document.get EleJ11 entsByTagName("blockquote");  
                                       //遍历引用 
                                           for  (var  i=O;   i<quotes . length;  i++)   {  
                                       //如果没有 cite 属性，继续循环 
                                               if (!quotes[i].getAttribute(lcite"))  continue;  

                                       //保存 cite 属性 
                                               var  url  =  quotes[i].getAttribute("cite");                                                                                矗 

                                       //取得引用中的所有元素节点 
                                               var  quoteChildr创= quotes[i].getElementsByTagName(' 串， )  ;  

                                                                                                                                                                                            、 
                                       //如果没有元素节点，继续循环 
                                               if  (quoteChildren.length  <  1)  continue;  
                                       //取得引用中的最后一个元素节点 
                                               var  elem  = quoteChildren[quoteChildren.length  -                                         1];  

                                                                                                                                                                                                     •  
                                       //创建树Z 
                                              var  link  = document . createElement(l a ");  
  l与 

                                              var  link_text  = document.createTextNode("source");  
                                               link.appendChild(link_text);  
                                               link.setAttribute("href" ,url);  
                                              var  sup凹script = document.createElement(飞Up"); 
                                               superscript .appendChild(link) ;  
                                       //把标记添加到引用中的最后一个元素节点 
                                              elem.appendChild(superscrip~);  
                                           }  
                                       }  

                                                                                                                                                                                                                           ,  

                                      用 addLoadEvent 函数词用 displayCitations 函数: 

                                       addLoadEvent(displayCitations);  

                                      5.    最终的标记 

                                      为了调用 displayCitations.js 文件，还需要在文档末尾添加一组<script>标签: 
                             •  

                                       < IDOCTYPE   html>  
                                       <html  lang="en">  
                                           <head>  
                                               <meta  charset="utf-8 "  />  
                                               <title>Explain ing  the  Document  Object  Model</title>  

  •  •  

----------------------- Page 161-----------------------

                                     ，吨 

                                                                                                8.6     显示"快捷键清单"                                   143  

                <link rel="stylesheet"   media="screen "  
         ..href="styles/typography.css"  1>                                                               .‘  

         </head>  
         <body>  
               <hl>What  is ..the  Document  Object  Model?</hl>  
               <p>  
         The  <abbr  title="Wörld  Wide  Web   Consortium">W3C</abbr>  defines  
         ..the  <abbr  title="Document  Object  Model">DOM</abbr>  as:  
               </p>  
               <blockquote  cite=''http://www.w3.org/DOM/''>  
         <p>  
        A platform-        and  language-neutral  interface  that  will  allow  programs  
         ..and  scripts  to  dynamically  access  and  update  the  
        恤.content，       structure  and  style  of  documents.  
                  </p>  
               </blockquote>  

               <p> 。 

         It  is  an  <abbr  title="Application  Programming  Interface">API</abbr>  
        恒.that can  be  used  to  navigate  <abbr  title="HyperText  Markup  Language")  
        恒.HTML</abbr> and  <abbr  title="eXtensible  Markup  Language">X问L ' 
        "</abbr>  documents.  
               </p>  
               <script  src=" scripts/addLoadEvent.j s "></script>  
               <script  src="scr-ipts/displayAbbreviations.js"></script>  
               <script  src="scripts/displayCitations.jsu></script>  
            </body>  
        </html>  
                                  a  

        现在，把explanation .  html 文件加载到一个Web 浏览器里就可以看到效果了，如图 8-4 所示。 

                                           Wh.ls the Doc跚跚ItObj制Mod副? 

                                           τM锅I3Cd酣晦胁。OM槛 

                                               A~拥胁硝烟哪冽庐咽崎刷刷制刷刷唰#刷W咿柳州刷响捕'梅句唰晦峭 
                                               .刷掉蛐蝠趴串晦嗣由幡由摘帽虱割民翩膊翩喊萄句峰创像陆幽幽暗品销藕蜒 

                    ,  
                                           酷lunÄ阴暗蝇。船栩恤剧，。阳啕晦阳城刷刷1..41阻阳酬& 
                                 、 

                                           AbbreV敏锐棚. 

                                           喃烟c 

                                           s。"W翩翩川抽。幢幢帷翩 

                                           翩欧阳跚跚嘘惘翩翩嗣 

                                               AIIP胎耐阳"用'酬耐肉øW时副捕 
                                           HTML  
                                           XtA  I-Ijpeot'l'.铺"硝Ioipt..er尊鸣~                                                         .  

                                               cl<1团回如幅M瞄恤晴1M唱幽唱‘ 

                              •  

                                                                         图 8-4 

    '  

 8.6         显示"快捷键清单" 

        此前编写的 displayAbbreviations 和 displayCitations 函数有许多共同之处:从创建一个由 

特定元素 (abbr 元素或blockquote 元素)构成的节点集合开始，用一个循环去遍历这个节点集合 

并在每次循环里创建出一些标记，最后把新创建的标记插入到文裆里。 

       让我们沿着这一思路再看一个例子。我们编写一个函数、把文档里能用到的所有快捷键显示 

在页面里。 

       acces-skey 属性可以把一个元素(如链接)与键盘上的某个特定按键关联在一起。这对那些不 

----------------------- Page 162-----------------------

                                                                                 .  

               144     第 8 幸 充实文档的内容 

             能或不喜欢使用鼠标来浏览网页的人们很有用。对于有视力障碍的人士，键盘快捷方式肯定 

             来许多方便。 

                 一般来说，在适用于Windows 系统的浏览器里，快捷键的用总是在键盘上同时按下Alt 

             特定按键z     在适用于Mac 系统的浏览器里，快捷键的用法是同时按下Ctrl 键和特定按键。 

                 下面是 accesskey 属性是一个例子: 

                 <a   href=" index.html"  accesskey=" 1 ">Home</a>  

             注意 设置太多的快捷键往往会适得其反一一它们或许会与浏览器内建的键盘快捷方式发生冲 

                    d导 

                    犬。 

                 支持 accesskey 属性的浏览器有很多，但是否以及如何把快捷键的分配'情况显示在页面上 

             需要由身为网页设计人员的你们来决定。有许多网站都会在一个快捷键清单 (accessibi 1 i  

             statement) 页面上列明该网站都支持哪些快捷键。 

                 一些基本的快捷键都有约定俗成的设置办法，对此感兴趣的读者可以浏 

             h句://www.clagnut.comlblogI193/。 

                 口 accesskey="1"对应着一个"返回到本网站主页"的链接g 

                 口 accesskey=12"对应着一个"后退到前一页面" 的链接; 

                 口 accesske~户114"对应着一个"打开本网站的搜索表单汇页面"的链接; 

                 口 accesskey="9"对应着一个"本网站联系办怯"的链接; 

                 口 accesskey="O"对应着?个"查看本网站的快捷键清单"的链接。 

                 下面是一个网站导航清单的例子，使用了快捷键: 

                 <ul  id="navigation">  
                   <li><a   href="index.html" accesskey="l">Home</a>< Ili>  
                   <li><a   href= "search.html"  accesskeY="4">Search</a></li>  
                   <li><a  href= "contact.html "  accesskey="g">Contact</a></li>  
                 </ul>  

                 把这段标记添加到 explanati on.html 文挡的<body>开标签的后面。 

                 现在， 如果把 explanation.html 文档加载到一个浏览器里，你就会看到这份清单里的链接， 

             但看不到任何能表明这些链接都有 accesskey 属性的东西。 

                 利用 DOM技术，可以动态地创建一份快捷键清单。下面是具体的步骤。 

                 (1) 把文档里的所有链接全部提取到一个节点集合里。 

                 (2) 遍历这个节点集合里的所有链接。 

                 (3) 如果某个链接带有 acesskey 属性，就把它的值保存起来。 

                 (4) 把这个链接在浏览器窗口里的屏显标识文字也保存起来。 

                 (5) 创建一个清单。 

                 (6) 为拥有快捷键的各个链接分别创建一个列表项 (li 元素)。 

                 (7) 把列表项添加到"快捷键清单"里。 

.  
 .  

----------------------- Page 163-----------------------

                                                                  8.6   显示"快捷键清羊"                      145  

      (8) 把"快捷键清单"添加到文档'里。 

      和前面的例子一样，按照以上步骤编写函数。 

      把这个函数命名为 displayAccessKeys 并存入displayAccessKeys.js 文件。 

      这个函数的工作原理与displayAbbreviations 函数很相似:先把accesskey 属性值和相关链接 

 酌屏显标识文本提取出来并存入一个关联数组，然后用一个 for/in 循环来遍历这个数组以创建各 

 个列表项。 

      不再逐行讲解， 下面是最终完成的函数代码清单。代码中的注释语句可以把各个步骤解释 

 毒楚。 

      function  displayAccesskeys()   {  
        if (! document.get ElementsByTagName   11  ! document.createElement   11  
      w. !document.createTextNode)  return  falsej  
      //取得文档中的所有链接 
        var  links  = document.getElementsByTagName("a");  
      //创建一个数组，保存访问键 
        var  akeys  =  new  A口aY()j 
      //遍历链接 
        for  (var  i=O;  i<links .lengthj  i++)   {  
          var  current_link  =  links[i];  
      //如果没有 accesskey 属性，继续循环 
          if  (!current_link.get企ttribute("accesskey")) continue;  
      //取得 accesskey 的值 

          var  key  = current_link.getAttribute("accesskey");  
      //取得链接文本 
          var  text  = current_link.lastChild.nodeValue;  
      //添加到数组 
          akeys[key]  = text;  
        }  
      //创建列表 

        var  list =  document.createElement("ul");  

      //遍历访问键 
        for  (key  in  akeys)   {  
          var  text  = akeys[key];  
                                                                                                                  -   I0Il、~宁、 a 
      //创建放到列表项中的字符串                                                                                                     - 
                                                                                                                 [;J      吃-户 
          var  str =  key  +  ":  "+textj                                                                           . ~  _ . - 

      //创建列表项 

          var  item  = document.createEle阳1t( "li");  
          var  item_text  = document .createTextNode(str) ;  
          item .appendChild(item_text);  
      //把列表项添加到列表中 
          list .appendChild(item);  

      //创建标题 
        var  header  = document.createElement( 吁13" ) ;  
        var  header_text  =  document.createTextNode("Accesskeys");  
        header.appendChild(header_text);  
      //把标题添加到页面主体 
        document.body .appendChil d(header)j  
     //把列表添加到页面主体 
        document.body.appendChild(list)j  

     add LoadEvent(displayAccesskeys)j  

     为了调用 displayAccessKeys.js 文件，还需要在explanation.html 文件的<head咯R分添加一组 

<script~标签: 

----------------------- Page 164-----------------------

                          146          第 8 幸 充实文档的内容 

                             <script  src= "scripts/displayAccesskeys.js"></script>  

                             现在，如果把 explanation . html 文档加载到一个浏览器里，就可以看到动态创建的"快捷键 

                      清单"，如图 8-5 所示。 

                                                               .黯革 
                                                            What is the 00ωmentObject 踹od创? 

                                                            1lté~由"如嗣t悔以到幅幅: 

                                                                A 111M阳帽·庸1d!Mgùa伽唰Jtr罩栩刷翩翩唰撒抽PIØQI田悔aiIlf. sc愧黯协句脚晦I!IÎY 
                                                                醋睛，自尊&廓街施lhe目翩翩t. aln皿b.re由回事》州翩翩翩，且幽阜 

                                                            ftls 翩翩翩h嗣抽酒。dto navlgøle. HTM崎岖lCMl .OOwm审悦 

                                                            巍出C'éýiat阳\8 

                                                            协IJC 
                                                                帆阳销协向曾W曲α到苗。棚" 
                                                            。唰 
                                                                阳出阳耐制制阳deI 
                                                            API  
                                                                                                          ,  
                                                            fOITML^俩就由、阳19r.ImmÍl理蛐揄嗣 

                                                            XUl   H掷，..(J'制M响串t刷哪凰" 

                                                                e烛阳回湖@锦础叩l.81l(I帽侈 

                                                            品~ 

                                                              .τ! .峙饼'" 
                                                               •  4 ~S嗣W创1 
                                                               •  <1:(均搬毗 

  •  

     、 

                                                                                        图 8-5 
                                                                                                          4  

                      8.7        检索和添加信息 

                             本章编写了几个很有用的脚本，你可以把这几个脚本用到任何一个网页里。虽然它们用途 

                      一，但基本思路是相同的:用 JavaScript 函数先把文档结构里的一些现有信息提取出来， W1e  

                      些信息以一种清晰和有意义的方式重新插入到文档里去。 

          、 

                             这些函数可以让网页变得更有条理、更容易浏览。 

                                                                                                                                                               d蝇 

       •  
                             口把文档里的缩略语显示为一个"缩略语列表"。 

                             口为文档里引用的每段文献节选生成一个"文献来源链接"。 

                                                                                                                                                             '  

                             口把文档所支持的快捷键显示为一份"快捷键清单"。 

                             你可以根据具体情况对这些脚本做进一步改进。比如说，我们这里是把"文献来源链接" 

                      接显示在每个 blockquote 元素的后面，而你可以把这些链接集中放在文档末尾的一个清 

                      像脚注那样。再比如说，我们这里生成了一份"快捷键清单'\而你可以把各个快捷键分 

                      在相关链接的末尾。 

                             当然可以利用本章介绍的技术去编写一些全新的脚本。例如，可以为文档生成一份目录: 

                      文档里的hl 和 h2 元素提取出来放入一份清单，再将其插入到文档的开头。甚至可以把这份清 

                      里的列表项增强为一些可以让用户快速到达各有关标题的内部链接。 

                             只需要少量 DOM方讼和属性，就可以创建这些有用的脚本。如果你想通过DOM脚本 

                      实网页的内容，制作一份结构良好的标记文档将是最重要的前提条件。 

                            在需要对文档里的现有信息进行检索时，以下DOM方法最有用: 

、‘ •  

----------------------- Page 165-----------------------

                                                                                             8.8    小结           147  

 口 getEl ementById 

  1:1  getElementsByTagName  
  Q  getAttri bute  

 在需要把信息添加到文档里去肘，以下DOM方法最有用: 

  Q   createEl ement  
  Q   createTextNode  
  o  appendChi ld  

 口 insertBefore 

 Q   setAttri bute  

 以上DOM方法的组合可以让我们编写出功能非常强大的DOM脚本来。 

 希望大家始终记住: J avaScript 脚本只应该用来充实文档的内容，要避免使用DOM技术来创 

    内容。 

     小结 

 至此，我们一直在使用 JavaScript 语言和 DOM去维护和创建标记。在下一章里，你将看到 

   的一种全新应用，它将展示如何运用 DOM去处理诸如颜色、字体等样式信息。 DOM技术 

再可以用来改变网页的结构，还可以用来更新HTML页面元素的 CSS 样式。 

                                            .  

                                          .  

                                                                                                                                         . .  

                                                                           、 

----------------------- Page 166-----------------------

                              匾-咂噩』回 

                                                              .  
                         Ef强司在各 

                                        CSS-DOM  

                  在本章里，Web文档的表示层和行为层将正面接触。我将展示如何利用DOM技术去获取( 

              和设置(写) CSS 信息。 

              9.1  
                     三位一体的网页 

                  我们在浏览器里看到的网页其实定由以下三层信息构成的一个共同体: 

                  口结构层 

                  口表示层 

                  口行为层 

              9.1.1  
                      结构层 
                                                             中·舍' 碰 运革 命庭Yt O 去 
                  网页的结构层 (structural layer)  由 HTML 

              或 XHTML 之类的标记语言负责创建。标签                         .Ane汹呻1m ofa par略略h 

              (tag) ，也就是那些出现在尖括号里的单词，对 

              网页内容的语义含义做出了描述，例如，〈p>标 

              签表达了这样一种语义:"这是一个文本段。" 

              (如图 9-1 所示。)但这些标签并不包含任何关于 

              内容如何显示的信息。 

                  <p>An   example  of  a  paragraph</p>  

              9.1.2  
                      表示层                                                       9-1  
                                                                            图 

                  表示层 (presentation layer)  由 CSS 负责完成。      CSS 描述页面内容应该如何呈现。你可 

                       •   •  

.  

----------------------- Page 167-----------------------

                                                                                                     9.1      三位一体的网页                             149  

               个CSS 来声明:"文本段应该使用灰色的Arial 字体和另外几种scan-serif字体来显示。" 

         9-2 所示。 

        p  {                                                                                                          •  
           color:  greyj  
           font -family:   "Arial" ,  sans-serif;  
        }  

                                            锵 …  接 … - 院 

                                            An example of a p都忘挥部h 

                                            阳ne 
                                                                                                            j五 

                                                                        图 9-2 

9 .1 .3       行为层 

       行为层 (behavior layer)  负责内容应该如何响应事件这一问题。这是JavaScript语言和DOM 

主宰的领域。例如，我们可以利用 DOM 实现这样一种行为:                                                                        "当用户点击一个文本段时，显示 

一个~lert 对话框。"如图 9-3 所示。 

        var  paras  =  伽documen时1忱t.g伊et饪Elem阳1 
        for  (var  i仨=0町j    i<pa盯ra剖s .l凹eng醉th j   i+忡+) {  
           paras[i].onclick  = function()   {  
              alert("you  clicked  on   a  paragraph.")j  

        }  

                                                                                                                                                  .  
                                                                                     川  叶 
                                                                                       w 
                                                                                       m 

                                                                                                     F  

                                                                                                                                                                             •  

                                                Done  

                                                                       图 9-3 

----------------------- Page 168-----------------------

              150     第 9 幸 CSS-DOM 

                网页的表示层和行为层总是存在的，即使未明确地绘出任何具体的指令也是如此。此时， 

            Web 浏览器将应用它的默认样式和默认事件处理函数。例如，浏览器会在呈现"文本段"一 

            留出页边距z      当用户把鼠标指针悬停在某个元素的上方时，有些浏览器会弹出一个{一 

            的title 属性值的提示框，等等。 

            9.1.4   分离 

                在所有的产品设计活动中，选择最适用的工具去解决问题是最基本的原则。具体到网页 

            工作，这意味着: 

                口使用(X)HTML去搭建文档的结构; 

                口使用 ccs 去设置文档的呈现效果; 

                口使用 DOM脚本去实现文档的行为。 

                不过，在这三种技术之间存在着一些潜在的重叠区域，你也已见过这样的例子。用DOM 

            以改变网页的结构，诸如 createElement 和 appendChild. 之类的 DOM方法允许你动态地创 

           加标记。 

                在css 上也有这种技术相互重叠的例子。诸如:hover 和:focus 之类的伪类允许你根据用户 

            发事件改变元素的呈现效果。改变元素的呈现效果当然是表示层的"势力范围"，但响应用户 

           发的事件却是行为层的领地。表示层和行为层的这种重叠形成了一个灰色地带。 

                没错， ÇSS 正在利用伪类走进DOM的领地，但DOM也有反击之道。你可以利用 DOM 

           式给元素设定样式。 

            9.2   style 属性 

                                                                                         •  

                文档中的每个元素都是一个对象，每个对象又有着各种各样的属性。有一些属性告诉我们一 

           素在节点树上的位置信息。比如说， pa rentNode、                 netxtSibling、 previousSibling、 childNodes、 

           行r、stChi1d 和 lastChild 这些属性，就告诉了我们文档中各节点之间关系信息。 

               其他一些属性(比如nodeType 和 nodel、Jame 属性)包含元素本身的信息。比如说， 
.  
           的 nodeName 属性进行的查询将返回一个诸如 "p" 之类的字符串。 

                除此之外，文档的每个元素节点还都有一个属性 style                       style 属性包含着元素的样式， 
                                                                o 

           这个属性将返回一个对象而不是一个简单的字符串。样式都存放在这个style 对象的属性里: 

                el ement.style.property  

               下面是一个内嵌样式的<p>元素的例子: 

                <p   id ="example"  style:"color:  grey;  font-family:   'Arial' ,sans-serif;">  
                An  example  of  a  paragraph  
                </p>  

               利用 style 属性，你可以得到这个<p> 标签的样式。 

               首先，需要从文档里把这个元素找出来。我已经给这个<p>标签设置了一个独一无二的 id 值 

           example  只需把这个id 值传递给getElementByld 方怯，再把这个方法的返回值赋值给变量 para， 
                  o 

----------------------- Page 169-----------------------

                                   "  

                                                                                                                                            9.2      style 属性                   151  

                就可以通过para 变量引用这个p 元素了: 

                         var  para  ~  document .getElementByld("example");  
由 恻 仙  别 则 阳 川 附 把 肌 口 协 键 下 们 一 字 在 虹 一 的 拿 师 此 到 阻 川 应 " { 个 就 也 代 可 旗 写 下 树 件 ' 式  来 前问 这 问 这  〉 码 面 之 人 和  时 们 山  我 的 〉 对段  江  R L 文 /  加 」  ' d 附 蜘  日 件 性 属  附  都 确 实 性 是 个 象 
                                                   凶                 俯                 哺 叽         时     明 叮  v           M                                  对         i 良   可  以 
                                                                                                                                                                                      zhq  
                                                                                                       丁 
                                                                                        '  t 
                                                                                                                      S       e 
                                                                                               F 
                用   关            面  ν 州  y 均州   入  川 t  寸  f 一我  '                   a 目 I 『  也  刷 u 、  凡. -     - μ  M个 拙 均   、 川 n ω            H H 浏 u d t a p  忱  w 览 m → 器 W 旦 即 叩 

                                         T  F t  i  1  Fm  U  Um 俨                            「                       口 一     页 一』 、 T d                可 

        ‘  ‘   ‘  仙  价   州 高  u … t  .h p n 〉 M 址 M  m  -k - W 州 协  w 川  b 阳 u m 

                        t w  心 - 叭 t 飞  巾 M d 问 队  川 p 时 向 m  ω 阳 m -  - M  h  m  树 H 叫  )M ω ω … 巾 倒 m  m m M v n                                                                   •  

                                           叫     巾     旷    ' 
                       } 
                             心 
         〈   〈   伽  价  〉 币 〈 川 m ，  山  …  〉刚 b A 巾 m 刚 e " 〉 N 可              何   μ  『 正                  •     M   J  '  m   S 

                                                                                                          •  
                                               叫 
                              A 
                                      旧                           问 
                      阳 A d 刷 印 b p 

                         川 

                       第一条alert 语句将返回字符串 "s时吨"，因为 nodeName 属性是一个字符串(如图 9-4 所示)。 

                       第二条 a' lert 语句将返回字符串 "object" ，                                              因为 style 属性是一个对象(如图 9-5 所示)。 

                                            拔，tß9 

                                                                                                                                                                                                      .  

                                     h们                                                                                               自W 

                                                                                                                                         四 

                                     - 

                                                   图 9-4 
                                                                                                                                         图 9-5 

                       也就是说，不仅文档里的每个元素都是一个对象，每个元素都有一个 style 属性，它们也是 

               一个对象。 

               9.2.1           获取样式 

                       你能够得到 para 变量所代表的<p>标签的样式。为了查出某个元素在浏览器里的显示颜色， 

----------------------- Page 170-----------------------

                              152               第 9 章 CSS-DOM 

                         我们需要使用 style 对象的color 属性: 

                                   element .style.color  

                                  下面这条alert 语句告诉我们 style 对象(这个对象是para 元素的属性)的color 属性: 

                                   alert("The  color  is  " + para.style.color)j  

                                  这个元素的 sty1e 属性的 color 属性是 "grey"  (如图 9-6 所示)。 

                                                                                                                                                  、 . 
                                                                                                                                    ψ  也       e a 川 
                                                                                                                                          h   dF  
                                                                                                                                         e  
                                                                                      ·ν  ，  ,. '.                                              V 
                                                                   -  ··TJY     F                                                                                                       程E楼 

                                                                                                                                                                        .'1 命 珍 奇J 
                                                    命，         命 
                                                                                                             the同hgt均 工二 ι: 

                                                                                                                          ".   "    ..>  

                                                    A罚。x部丧葬teof怠 ..，.. ".  

                             ~  

                                                .  
                                                .  

                                                                                                                  d‘  

                                                                                                                  图 9-6 

                                  刚才的代码中还设置了<p>元素的另一个CSS 属性font-fami1y。这个属性的获取方式与 co1or 

                         属性略有不同。你不能简单地查询sty1e 对象的 font-family，因为 "font" 和 "family" 之间的连 

                         字符与JavaSαipt语言中的减法操作符相同， JavaScript 会把它解释为减号。如果像下面这样去访 

                         问名为 font-fami 1y 的属性，就会收到一条出错信息: 

                                   el ement.style. font-family  

                                  JavaScript 将把减号前面的内容解释为"元素的 style 属性的 font 属性"，把减号后面的内容 

···- 

P 
K 
SF                       解释为一个名为 fami ly 的变量，把整个表达式解释为一个减法运算。这完全违背了我的本意! 

‘  

                                  减号和加号之类的操作符是保留字符，不允许用在函数或变量的名字里。这同时意味着它们 

                         也不能用在方法或属性的名字里(别忘了，方怯和属性其实是关联在某个对象上的函数和变量)。 

                                  当你需要引用一个中阅带减号的 CSS 属性时， DOM 要求你用驼峰命名也。                                                                                                                            CSS 属性 

                         font -fami 1y 变为DOM属性fontFami l y: 

                                  element.style . 于ontFamily 

                                  为了查看 para 元素的 style 属性的 fontFamily 属性，在 example.html 文件里增加一条 alert 

                         语句: 

                                   < ! DOCTYPE       htm l>  
                                   <html  lang>=" en ">  
                                  <head>  
                                      <meta  charset;"utf-8"  1>                                                                                                               •  

                                                                                                                   •  

----------------------- Page 171-----------------------

                                                                                                                                 9.2       style 属性                   153  

               <title>Example</title>  
               <script>  
           window.onload  = function()   {  
               var  para  = document.get ElementById(lexample")j  
           }akxt(叮he font 句mi1y is  ..   +  para.style.fontFami1y);  

               </script>  
           </head>  
           <body>  
              <p  id="example"  style=气olor:  greyj  font-family:  'Arial' ， sans-serifj 飞 
           An   example  of  a  paragraph  
              </p>  
           </body>  
           </html>  

          在浏览器里重新加载example.html 文件将能看到如图 9-7 所示的结果。 

                                                                                                                                    ... 1 裁 。 c 
                        争·  恶势' 盖章 
                                                                         TM:她t 

                        Anex忽mpleofa                  •  

                                                                   .  
                                                                   ,  

                                                                      .  
                                                              . -"""  
                                                                、 

                                                     l  

                                                       、 

                                                     植画-自嗣 

                                                                                  图 9-7 

         DOM属性 fontFamily 的值与 CSS 属性 font-family 的值是一样的。具体到这个例子，它是: 

          'Arial' ,sans-serif                                                                •  

         不管 CSS 样式属性的名字里有多少个连字符， DOM-律采用驼峰命名法来表示它们。 CSS 

 属性 background-color 对应着DOM属性 backgroundColor、，                                                            CSS 属性 font-weight 对应着 DOM属 

 性fontWeight，                DOM属性marginTopWidth 对应着CSS 属性margin-top-width。 

         DOM在表示样式属性时采用的单位并不总是与它们在CSS 样式表里的设置相同。 

         在示例的<p>元素里， CSS 属性color 的设置值是单词 "gey" ，用 JavaScript 代码检索出来的 

 DOM color 属性的值也是 "gey"。现在，把这个col or 属性修改为十六进制值#999999: 
         <p   id="example"  style="color:  #999999;   font-family:   'Arial' ,sans-serif">                                                                           •  

        再在JavaScript 代码里加上一条alert 语句输出 DOM里的 color 属性: 

         alert("The  color  is  11            + para.style.color)j  

        在某些浏览器里， color 属性以 RGB (红，绿，蓝)格式的颜色值(153， 153， 153)返回，如图 

9-8 所示。 

----------------------- Page 172-----------------------

                       154          第 9 章 CSS-DOM 

                                                                                                                                      。 
                                                                                        ~纠e 
                                                                                                                                       - 
                                                                                                                           刁 
                                                                                                                                      c 
                                                                                                                               e  
                                                                                                                                   e  
                                                                                                                            d 
                                                  二 啡、 钱 

                                                机油mpl叫apsrl,  

                                                                             •  

                                                                      J疆 

                                                                                                                                                               ‘  

                                               忡825??:-v                 . ?叫功门何?叩叫γ??飞γ巾，??卢瓷器坦五二士也22 fZ  

                                                                                       图 9-8 

                          还好，这类例外情况并不多。绝大部分样式属性的返回值与它们的设置值都采用同样的计量 

                   单位。如果我们在设置CSS font-size 属性时以em为单位， 相应的DOM fontSi ze 属性也将以em 

                   为单位: 

                           <IOOCTYPE   htmb  
                                                           .  
                           <html  l ang="en">  
                           <head>  
                              <meta  charset=、tf-8"  1>  
                              <title>Example</title>  
                              <script>  
                           window.onload  =  function()  {  
•                            var  para  =  document.get ElementByld("example")j  
                             al ert ("The  font   size  is  "  +  para.style.fontSize)j  

                           }                                                      ,  

                             </script>  
                           </head>  
                           <body>  
                             <p   id="example"  style="color :  greyj  font-family:   'Arial' ,sans-serif;  
                           .. font-size:  le町、 
                          An   example 。于 a  paragraph  
                             </p>  
                           </body>  
                           </html>  

                          如图 9-9 所示， DOM fontSi ze 属性的确也是以 em 为单位的。 
                                                                                            一 向 
                                                                                        缸  阳 " 
                                              06 6 二、                                                                                  o  
•  
                                                                                               户                            .,. !O 0 乱 

                                              A     命'     簸，                      τh. font slz. 1.. 1哩m 

                                              Anexaαljlie ofa pl  

                                                                                                之:您驾需要;二 

                           .  

                                             00盹e 

                                                                                       图 9-9 

                          如果 CSS font-size 属性的值是 lem，                                DOM  fontSize 属性的返回值就将是 lem。如果 CSS 

----------------------- Page 173-----------------------

                                                                                          9.2    style 属性            155  

      -s1ze 属性的值是 12px ，              DOM fontSi ze 属性的返回值就将是 12px。 
      使用 CSS 速记属性，你可以把多个样式组合在一起写成一行。比如说，如果声明了 font: 12px  
 .Arial'. sans-serif ,CSS font-size 属性将被设置为 12px， CSS font-family 属性将被设置为'Ari a l' .  
     s-serif !  

       <p   id="example"  style="col or :  greyj  font:  12pX  'Arial ' ,sans-serifj" >  

      DOM能够解析像 font 这样的速度属性。 如果查询 fontSize 属性，将得到一个 12px 的值: 

       alert("The  font  size  is  "  +  para .style.fontSize)j  

      如图 9-10 所示， DOM fontSi ze 属性的确也是以px 为单位的。 
                            e-4 
                             。  旦 
                                                           Ðsampfe~                            E)  
                          m  - 
                                       一 
                                           寸 
                                          蔚 
                                     戴 
                              … 出         咆 
                            2                           Th. fOl目uize is' l 2ipx       " ;0  0  ~  
                                       一  一 . 
                            …  

                                                           、 

                                              C3                 ..  . ' .  

                                           飞、町、 

                          WZ由四... 气.，...ψ申响?r-r畹町"制-佩τ.-伽M叩鞠叫_..叫嘲翩翩- 
                           EJO,Qe   {I   ~  •  ...•  - .l 、，. .…......  _d  •  …叫叫叫一…叫一·仲叩附划!叩吨=销等号按何?-3 
                                                                                                              ,  
                                                                                 ……一 

                                                         图 9-10 

      内嵌样式 

      通过style 属性获取样式有很大的局限性。 

      sty1e 属性只能返回内嵌样式。换句话说，只有把 CSS style 属性插入到标记里，才可以用 

DOM sty1e 属性去查询那些信息: 

      <p   id="example"  style="col or :  grey;  font:   12pX   'Arial' ,sans-serifj ">  

      这可不是使用样式的好办法一一表现信息与结构混杂在一起了。更好的办法是用一个外部样 

式表去设置样式: 

      p#example  {  
         color:  greyj  
         font:   12px  'Arial ' ,  sans-serif;  

      把上面这段-CSS 代码存入文件styles.css。然后，从 exampl e . html 文件里把内嵌在HTML代 

码里的样式删掉，只保留以下内容: 

      <p   id="example">  
      An   example  of  a  paragraph  
      </p>  

      在example.html 文件的开头部分加上一个link 元素并让它指向 sty1es.css 文件: 

      <link 工el="stylesheet" medi a="screen"  href="styles/styles .css"  1>  

----------------------- Page 174-----------------------

                                     156                第 9 幸 CSS-DOM 

                                          样式还像以前那样作用到了 HTML 内容上，但与使用 style 属性不同，来自外部文件 
    ,  

                                styles.css 的样式已经不能再用 DOM style 属性检索出来了。 

                                          alert( "The  font - size  is  "  +  para.style.fontSize);  

                                          DOMstYle 属性不能用来检索在外部css 文件里声明的样式，如图-9-11 所示。 

                                                                                                                                                                                      ,  
                                                                                                                                   tti.器mpt畴      。 川e 
                                                                                             -面 

                                                                                                                                                              睛. 

                                                                                                                                                              • ,.' ,‘, ..  
                                                                                                                                                                                 …vl 辈革 看撞在 
                                                                      每静守 ￡每护 露爱                                            ，专he;钱如幸、贯通ze JSi ;  

                                                                      部非<xarnp!告。f扉                                                  -‘  ，俨     -‘~:   • '、>..也 
                                                                                                                           、" . ..: . .飞‘ 
                                                                                                                                            .-          ...   "‘  
                                                                                                                                 • ,-   • ", 萨马、 .、回 -          ~  
                                                                                                        , ".   .、 句苟，坝'罗、，、飞          .- .  、-、. '.' ,;  、   良. 
                                                                                                         代      川 .  •  ,:'"  .; . 吨'_~.•  ~'， ‘. .  
                                                                                                         1.1.,.   • • •  " .   .;..~  T      ~阳·‘ 
                                                                                                         ~..  ...._.-~飞、 ~-.，.电、~"  '、肉" '.~'--。 λ 、 Jo，' .,,'.  _~、 
                                                                                                                ι       二.. -,  • •••  . .- 
                                                                                                                                                                         t  
                                                                                                                •.  ……………"咆户、-…J叫.>汽，针6           、川h忡. 一-‘ν  
                                                                                                                            -    叮咂M‘‘盼 - 一吗‘ •  •  
                                                                                                              •   ..             气、..一‘. .内 
                                                                                                                                            、 

                                                                                                              -、、定"，、;.~I'.  . ... 、 、 .吃. •.  "-;:  
                                                                                                                .‘. .、.                           ,  
                                                                                                         .up             。    "     - 
                                                                                                                 .7  .， ‘ "" 川 '帖，牛 .. . ; ,.  ~  

                                                                                                                                                             ,  

                                                                                       .' ." ';         .  

                                                                                                       一 

                                                                                                                                                                                                   4‘  
                                                                                                                                图 9-11 

                                         如果把样式添加在example.html 文件<head>部分的<style>标签里，你将看到相同的结果: 

                                              p#example   {  

                                                  font:   12px  'Arial' ,  sans-serif;                                                                                                                                •  
                                              }  
                                          </style>  

                                         DOM style 属性提取不到如此设置的样式。 

                                         在外部样式表里声明的样式不会进入 stYle 对象，在文档的<head>部分里声明 

                               此。 

                                         style 对象只包含在 HTML 代码里用 style 属性声明的样式。但这几乎没有实用价值，因 

                               样式应该与标记分离开来。 

                                         现在，你或许会认为用 DOM去处理css 样式毫无意义，但这里还有另一种情况可以让 

                               style 对象能够正确地反射出我们设置的样式。你用 DOM设置的样式，就可以用 DOM再把 

                               检索出来。 

                               9.2.2               设置样式 

                                         许多DOM属性是只读的一一我们只能用它们来获取信息，但不能用它们来设置或更新信 

                               类似previousSibling、                                netxtSibli 町、 parentNode、                                 firstChi l d 和 lastChild 之类的属性，它们在 

                               收集一个元素在节点树上的位置信息时可以帮上大忙，但它们不能用来更新信息。 

                                         凡事无绝对， styl e 对象的各个属性就都是可读写的。我们不仅可以通过某个元素的 sty 

                               属性去获取样式，还可以通过它去更新样式。你可以用赋值操作来更新样式: 

                                          element.style.property  =  value  

                                                                                                        ,  

、 

----------------------- Page 175-----------------------

                                                                                                                              .  

                                                                                                                              •  

                                                                                                                                                                       9.2        style 属性                        157  

                             style 对象的属性值永远是一个字符串。在example.html 文件里写一些JavaScript 代码覆盖那 

                    些内嵌在标记里的 CSS 代码。 比如说，把para 元素对象的 color 属性设置为"b1ack" : 

       .  H  n t  H  n  m  e a  L -  & m  u ma - t -  u n  n L r  t T Y V 俨 』 牛 、 
                               <<<           n 
                                              牛   "  ，  、 
                                                       mesmAU 
v    n     C    U     J    -    p     e    H    n     4 
                                             yaenvhua 
                                   r v  H a n  = E" 2 咱 ·  · 吨 v  "  LH 

                     a  i τ  〉 E  r  n t  v  k n           ， ， 、 
            r  y o  n c  - ·  - 1  e ·  G 4  A 1  i a〈 〈 〈 L & L ，  ， + 、  i 俨 〈 k  n "  o 、 . ， ttne宁 e r u x n " ， 、 

                                                                HU 
                                                        ρ  L  =    f ·    J  f 
                                   L & 川 牛  ，  ，  、  」v h o =  i · 唱 L  1 +  · ,L  4 +  1 叮 〉 
                                                                fummxqa  
                                                  冉         』 F a  - 

                                   J  C γ ·   L 
            ，  ，     ，  品  、 2 v wlJM H n 2  M U 」 ·  · T H n O  。 、 M H T 」 中 e n 忐 V F 飞  J 1 、 Ite忐 n A Y ,，  ， 吨    、 

                                                                                   14LK0                                "m  
                                                            F     H n                               dVJ  
                                                                                           '      4      -      l  p    ， ， 
                                                                                                           XO  
                                                                                                              2unH  
                                                                                                yr  
                                                                                                                         3 - 
                                                                                                          e48  
                                                                                                                mm+ 
                                                                                       m·'O  
                                                                                         ez  
                                                                                           nH· 
                                                                     。      恒      同      口 
                                                                                                                   nv- 
                                              品 - 且 a V = 唱 "  L a 咽 」  " 』 口 L 、 』  "'i L          、  ‘、 E .  ， 』 

                       』  血 a / ' s V " n  兔 x y u 
                                             s 
                                              L            - ' 。    =    u A  L F 
                                    -   - 
                                        M           』 
                                                       - 

                               e    e    L    & 
                                             -- 
                                  〈     户         〉 
                               <<h  " U J L v 〉 n   ' 

                                  川 
                       H n  e u  v h  n '  u J 
                                                                                                                                                                                      •  
                 m G A  - v 〈 n A  〈 V O  y 、  .  u ，  ，  、m  m G 』 u n A V M - 2 v  咱 n  O  " L ι a  、  e F 」  白  u 2    、         位  、  . 2 市   俨 、       F  ­ ·  、  . ,+· ， ， 、 
                                                                                                                                                       nH       z  
                                                       mrT        sr                                  ..                     UJ                         p3    e  
                                                      a  i         r  i 
                                                                                                                                                                      .,  
                                                                                                                                            i 
                                                                      v n - -                                             A  E 
                                             -                                                                  L  
                                                                                                                                                  3         、 
                                                                               」                                                        A           a 
                                             -nv                                                                         .•  
                                     u  2  4                』                                                                             日                 d 
                                                                                          ·  
                                                                                                                                          F 
                                                                                                                                                 . 
                                                                  b  σ J 
                                                                                                      ,                                          ,  
                                              、 
                               A 
                                                                             t 
                                                                    句 
                                                                             n 
                                              i 
                                                                   d 

                                    ， 
                          ， ， L n ，  ，  ，&  ui  <<D ， n t  4  J 1  〉 y ，  ， v  〉 、 

                             C∞010旷r 属性已经被变成了"bla汇ck" ，如图 9弘-1口2 所示。 

                             style 对象的属性的值必须放在引号里，单引号或双引号均可: 

                              para.style.color  =   'black';  

                             如果忘了使用引号， J avaScript 会把等号右边的值解释为一个变量: 

                              para.style.color  =  bl ack;  

                             如果前面并未定义过变量 black ，则上面这行代码将无法工作。 

                             用赋值操作符你可以设置任何一种样式属性，诸如font 之类的速记属性也不例外: 

                              para . style.font  =               "2em   'Times'Jserif";  

                             上面这条语句将把 fontSize 属性设置为 2em，把 fontFamily 属性设置为'Times'.  ser忏，如 

                    图 9-13 所示。 
                                                                                                                                                                                                                                           .  
                                              呵._ .咽          _.        _.-     ..,......  ~~- :..气， 
                         : ~、，、 。 .                           &:''''''' :1I'ft制止血 矿"         .'          ~吨                       o 00 -                       斗 轨制悔                       面       F   叶JaCB 
                          飞.. '  ...J            ..  ~        M吨~"'~fP.属          f...   ，-Þ        ..... 吊_， 

                           A      ..   ~飞U 
                                                                                                                                             中 益言 键 盘挥芥7 0@ 主 
                           可耐  』V'               属要 喝伊 ru i一一句 

                          An exampla of a. paragraph  
                                                                                                                                  An example of a  
                                                                                                                                  paragraph  

                                                                                       .  

                                                                                                                                崎一 
                                               4呻，- •                        ..  ...   ....4'-_..~.   ..~  
                          民-一                                                 …J ，·.』-4·…P阳，一j ，~.'"‘  卢 一一户-、·, ••  
                        「     n~ _                .川. .... .                                                  ... l  
                                  ....  _.           rl..           •       'J"        ~'.:-醉了....         .! LhJ                 。onc!            一一一  ，品 

                         晶 .                                                            矗      - 

                                                            图 9-口 
                                                                                                                                                                   图 9-13 

                             通过JavaScript 代码设置样式并不难，我也给出了一些具体例子。不过或许应该先问问自己: 

                                                                            ,  

----------------------- Page 176-----------------------

                     158       第 9 幸 CSS-DOM 

                  为什么要这么做? 

                  9.3      何时该用 DOM 脚本设置样式 

                       你已经看到，用 DOM设置样式是多么容易，但你能做什么事并不意味着你应该做什么事。 

                  在绝大多数场合，还是应该使用 CSS 去声明样式。就像你不应该利用 DOM去创建重要的内容那 

                  样，你也不应该利用 DOM为文档设置重要的样式。 

                       不过，在使用 CSS 不方便的场合，                         还是可以利用 DOM对文档的样式做一些小的增强。 

                  9 .3 .1   根据元素在节点树里的                               来设置样式 

                       通过CSS 声明样式的具体做站主要有三种。第一种是为标签元素 ω以日 p 元素)统一地声明 

                  样式，如下所示: 

                                                                                                                、 

•  
                       第二种是为有特定class 属性的所有元素统一声明样式，如下所示: 

                        .fineprint  {  
                          font - size:   .8emj  

                       第三种是为有独一无二的 id 属性的元素单独声明样式，如下所示: 

                       #intro  {  
                          font-size:   1. 2emj  

                       也可以为有类似属性的多个元素声明样式，如下所示: 

                       input[type*="text"]  {  
                          font-size:l . 2emj  

                                                                                                                    - 
                       在现代浏览器中，甚至可以根据元素的位置声明样式: 

  1  
  •  

                       CSS2 引入了很多与位置相关的选择器，例如:fi rst-chi 1 d 和: 1 ast-chi 1 d"                                  而CSS3 则定义 
                  诸如:nth-chi 1 d()和:nth-of-type()之类的位置选择器。尽管如此，在文档的节点树中，为特定 
                  置的某个元素应用样式仍旧不是件容易的事。例如，在CSS3 中，你可以使用 hl  '" *选择器为 

                  有hl 元素的下一个同辈无素声明样式。问题是，有那么多的浏览器根本不支持CSS3 的这些可 

                  的位置选择器。 

                       现在， CSS 还无法根据元素之间的相对位置关系找出某个特定的元素，但这对DOM来 

                  不是什么难题。我们可以利用 DOM轻而易举地找出文裆中的所有hl 元素，然后再同样轻而 

                  地找出紧跟在每个hl 元素后面的那个元素，并把样式添加给它。 

                                                                                                  、 

----------------------- Page 177-----------------------

                                                                                         9.3     何时该用 DOM脚本设置样式                                        159  

                                                                                                                                                            .  

                       首先，用 getElementByTagName 方法把所有的 hl 元素找出来: 

                       var  header s  =  document.getElementsByTag阳me("hl"); 

                       然后，遍历这个节点集合里所有元素: 

                       for  (var  i=Oj   i<headers.lengthj  i++)   {  

                       文档' 中的下一个节点可以用 nextSibl i ng 属性查找出来: 

                       headers[ i ].nextSibling  
反     (  句 创  酬 灿 请  附 脚 注剧   )  出 叫 里 。  忡  南 ' { 阳 旬  的 趴  战 要起 旧 战 克 w k 是 剧 f r ~ 为  羞 是 给 咔  羞 节如 ! 小 节 点 如  泪 」 点  面  个 
                 给       吨        呻       )  E    屈       不 节  斩 而  柑 元 阳 数 下 这 州 
                                                                                                                                                   9 
                                                                                                                                                            V 
                                                                                                                                                            < 
                                                                                                              1 
                               州  队  川   U     q     晚   完 
                            -       『 
                                   U 
                      u  i 
                               。  勺 

           m   W   M  M   M   M          M   T    M 
                                   。     以      创 
                 忏  }  口  凶  刷   刷   刷 r U               { 

                         : 

        Z       n       e       ·  炕 H  勺 A U  L 

                                                      门 

                  :    : 

             函     当  }  } 时 1  ω  r s  m - W m  " 刨 叮 啧 M '  的  川 油      山  、 u 叫 

                  个   把  脚    如     刷   素                                                                参   如                                              并 
                                                                                                     k 
                                用   元     回    即  峭 h  创                     M                                                                 t  函 
                                                                                                                                  ρ 
                                                          口 
                                                                                                     •·  
                                                                                                                                  」 

               把                                  值       直 
                   这                                                        i 

                                   M 
                                   而 

                       var  elem  =  getNextElement(headers[i].nextSibling)j  

                      现在，就可以按照我们的想泣去设置这个元素的样式了: 

                       elem.style.fontWeight  =  "bold"j  
                       elem.style.fontSize  =  "1.2em"j  

                      最后，把以上代码封装到函数styleHeaderSiblings 中，别忘了安排一些测试去检查浏览器能 

               否理解我们在这个函数里用到的DOM方法: 

                       function  styleHeaderSiblings()  {  
                         if ( !document.getEle阳ltsByTagNar时 return falsej  
                         var  headers  =  document.get ElementsByTagName("hl")j  
                         var  elemj  
                         for  (var  i=Oj   i<headers.lengthj  i++)   {  
                            elem  =  getNextElement(headers[i].nextSibling)j  
                            elem.style .fontWeight  =  "bold"j  
                            elem. sty l e . fontSize  =  "1. 2em" ;  
                         }  
                       }  
                      function  getNextElement (node)   {  
                         if(node.nodeType  ==        1)  {  
                          return  nodej  

                         if  (node .nextSibling)  {  
                         }return getNextElement(node-nextsibling) ;  

                         r eturn  nullj  

                      你可以用 window.onload 事件调用这个函数: 

----------------------- Page 178-----------------------

                    160        第 9 幸 CSS-DOM 

                      window.onload  =  styleHeaderSiblings;                                                          ~  

                      但更好的做法是用 addLoadEvent 函数，这样你就能很方便地把更多的函数绑定到这个事件: 

     •                addLoadEvent(styleHeaderSiblings)j  

                      下面是 addLoadEvent 函数的代码清单，你可以把它保存到一个外部文件: 

                      function  addLoadEvent(func)   {  
                         var  oldonload  = window.onload;  
                         if  (typeof  window .onload   1=  'function')  {  
                           window.onload  = funcj  
                         }  el se  {  
                           window.onload  = function()   {                                      •  
                             oldonload()j  
                              funcO;  

                      为了看到 styleHeaderSiblings 函数的使用效果， 
                                                                                     写一个 HTML文档，并在里面添加一些一 

                级标题(即 hl 元素) :  
                                                                              •  
                      < ! DOCTYPE  html>  
                      <html  lang="en ">  
                      <head>  
                         <meta  charset= "utf-8"   1>  
                         <title>Man  bites  dog</title>  
                      </head>  
                      <body>  
                         <hl>Hold  the  front  page</hl>  
                         <p>This  first  paragraph  leads  you   in.</p>  
                         <p>Now  you  get  the  nitty-gritty  of  the  story .</p>  
                         <p>The  most  important  information  is  delivered  first.</p>  
                         <hl>Extra!   Extra!</hl>  
                         <p>Further  developments  are  unfolding.</p>  
                         <p>You   can  read  all  about  it here.</p>  
                      </body>  
                      </html>  

•  
                      把这个文裆保存为 story.htm1 文件。图 9-14 是它目前在浏览器里的样子。 

                      接下来，创建文件夹scripts 来存放JavaScript脚本文件。把addLõadEvent 函数存为一个名为 

                addLoadEvent.js 的文件，并把它放到这个文件夹，把 sty1eHeaderSib1ings 函数存为一个名为 

                styleHeaderSiblings.js 的文件，也把它放到此文件夹。 

                      为了调用这个两个JavaScript 脚本文件，还需要在story. html 文件的</body~标签之前插入一 

                些<script>标签:: 

                                     l 
                      <script  src:  scripts/addLoadEvent.j s "></script>  
                      <script  src=l scripts/styleHeaderSiblings.j s "></script>  

                      现在，把story.html 文件加载到Web 浏览器中，你就可以看到DOM脚本生成的样式效果了。 

                动态设置的样式将作用于紧跟在各个hl 元素后面的那个元素(如图 9-15 所示)。 

                      从理论上讲，这类样式还是应该用 CSS 来设置$但在实践中，用 CSS 来设置这类样式的难 

                度往往会很大。具体到这个例子，其实只需给紧跟在hl 元素后面的每个元素添加一个c1 ass 属性， 

----------------------- Page 179-----------------------

                                                               9.3    何时该用 DOM脚本设置样式                                161  

就可以用 CSS 来获得同样的效果。 但如果文档的内容需要定期编辑和刷新，添加class 属性的工 

作很快就会变成一种负担。不仅如此，如果文档的内容需要通过一个 CMS (内容管理系统)来 

处理，给文档内容的个别部分添加class 属性或其他样式的做法甚至是不允许的。 

              · 、_.→ 
                                                                                                                    咀 
                         Manblr~do号         i                                                                       -- 
  n OEr'"     ,  
                                                 .- j C 吃              目萨、 碰撞 i宿 命夜:一…                     一 二J o (.  
  年 r争e 露 露 命院一一_.-一一…- ~- 

  Hold the front page                                            Hold tbe front page  

  Ihi.~.first P阴阳pb 知串ds yöu iil .                               This first paragraph I崎ds，you in.  
  Nowy'创get段路幅增~gñttyof岱e story.                                 Nowyou，get 岱eni即.griuyof往Iestøty. 

  The most埠。ttanl infoønatìon总deliver时段路ι 
                                                                 贸IemoS't放ψ创tanl in1创圆白白isooJiv创回位st. 

                  ，比 

  Extra! Extra!                                                  Extra! Extra!  

  further devclo严lellts are u:nfolding..                         趴R也er deve1opmeots are un如lding. 

  YOIl can read all a忱岚ltit here .  
                                                                 You础nre硝.au tì棚tit 加哥e. 

                            .呻- -呻呻曲阳明"_t..M俨耐，v. ... '"  ,,_  
  00Il.t   .  • ~，.，.;I古; ..;.z怠，EPEZi U! F w  .. '  ，.恤嘈，'L，·，咽 
                     一 
                                      ι'  
                                                   FHRhh 」重 

                                                                                •  
                         图 9-14 
                                                                                        图 9-15 

9.3.2      根据某种条件反复 
                                               某种样式 

      不妨假设我有一份由一些日期和地名构成的清单，比如一份乐队演出日程表或一份旅行日程 

衰。我们不必关心它到底是什么，只要其中的日期和地点有直接对应的关系就行了。对，就是表 

格型数据，把表格型数据转换为HTML内容的理想标签当然是<table>。 

 注意在用 CSS 安排你的内容时，千万不要人云亦云地认为表格都是不好的。虽然利用表格来 

         做页面布局不是好主意，但利用农格来显示表格数据却是理所应当的。 

                           ~                  二一一       一      一个…                             一     一一一             …一一 一 … →二 

      下面是为这个表格编写的标记: 

      <!DOCTYP E  htm l>  
      <html  lang= "en">  
      <head>  
        <meta  c-h arset=" utf-8"   1>  
        <title>Cities</title>                                                                                                              "  

      </head>  
      <body>  
        <table>                                                                                            •  

           <caption>Itinerary</caption>  
           <thead>  
           <tn  
             <th>When</th>  
             <th>Where</th>  
           </t r>  
           <l thead>  
           之tbody> 
           <tn  

----------------------- Page 180-----------------------

                             162             第 9 幸 CSS-DOM 

                                                                                                                                                                           、， 

                                           <td>June  9th</td>  
                                           <td>Portland , <abbr  title="Oregon">OR</abbr></td>  

E矗 

                                        </tr>  
                                        <tr>  
                                           <td>)une  loth</td>  
                                           <td>Seattle ,  <abbr  title="Washington">WA</abbr></td>  
                                        </tr>  
                                        <t r>  
                                           <td>)une  12th</td>  
                                           <td>Sacramento ,  <abbr  title="California">CA</abb r></td>  
                                        </tr>  
                                        </tbody>  
                                    </table>  
                                 </body>                                                                                   •  
                                 </html>  

                                把这些代码保存为 i ti nerary . htm 1  文件。如果现在就把这个文件加载到一个Web 浏览器里， 

                        你将看到一个包含全部的信息但呆滞模糊的表格，如图 9-16 所示。 

                                                                             等赞丰       嘴挣饭 
                                                                                                                   若是搞?!!!愈 命 

                                                                                           ltinemry  

                                                                                WIlω  W加赠 

                                                                              June 9tJ撞     Por世踊d等 。黑 

                                                                              Jnne lOth Se法.ttle. WA  
                                                                                                                                                                       •  
                                                                              June 12th S部邵阳110点A 
                                                                                                              一 

                                                                                                                                                                      ,  

                                                                                                                                                                         &  

                                                                                                                                         、 

                                                                                                                                                                 '  
                                                                                                                                                                 .  

                                                                                                        图 9~16 

                                编写一个css 样式表，让其中的数据可读性更好: 

                                 body   {  
                                    font-family:   "Helvetica" , "Arial" ,sans-serif;                                                                              d  
                                    background-color:  #fff;  
                                    color:  #OOOj  

                                 table  {  
                                    margin:   auto;  
                                    border:  lpx  solid  #699;                                                                                                      。， 

                                 caption  {  
                                    margin.:      auto;  
                                                     2em;  
                                    padding:        .  
                                    font-size:   1.2em;  
                                    font-weight:  boldj  
                                 }  
                                th  {  
                                    font-weight:  normal;  
                                    font-style:  italic;  
                                    text-align:  leftj  
                                    border:   lpx  dotted  #699;  
                                    background-color:  #9cc;  

                                                                                                                                •  

----------------------- Page 181-----------------------

        .  

                                                    9.3   何时该用 DOM脚本设置样式                        163  

        c010r:  #000;  
      }  
      th ,td   {  
        width:   10em;   •  
        padding:  . sem;  

     把这个 CSS 样式表保存为 fonnat.css 文件并将其放入文件夹 sty1es 里。在 itinerary. htm1  

文档的<head>部分增加一个<1 ink>:标签来引用这个CSS 文件: 

      <link  rel="stylesheet"   media="screen" href:"styles/于ormat.css" 1>  

     在Web 浏览器里刷新 iti nerary. htm1 文件就可以看到这个CSS 的效果，如图 9-17 所示。 

                                                 Otles  
                           000                                           e量 
                           1号令' 毒草           t1! f否          …~o o (.  

                                               ltinèrary  

                                 占me9th 
                                                    Por也and.OR 

                                 June 10伽           Seattte, WA  
                                 June121h           Sacramento. CA  

                                               图 9-17 

     让表格里的行更可读的常用技巧是交替改变它们的背景色，从而形成斑马线效果，使相邻 

酌两行泾渭分明。通过分别设置奇数行和偶数行样式的办法可实现这种效果。如果浏览器支持 

CSS 3 ，那就很简单，只需要如下两行样式: 
     tr:nth-child(odd)    {background-color:# 忏Cj  }  
     tr:nth-child (even)   {background-color:#fffj}                                           •  

     如果:nth-chi 1 d()不可用，要获取同样的效果就只好采用另外的技术。具体到 iti nerary .                                     htm1 

文档这个例子，只需为表格中的每个奇数行(或每个偶数行)设置一个c1ass 属性即可。不过， 

这个方法不够方便，尤其是对大表格来说更是如此:如果你以后要在这个表格的中间插入或删 

除一行，就不得不痛苦地手动更新大量的 c1 ass 属性。 

     JavaScript 特别擅长处理重复性任务。用一个whi1 e 或 for 循环就可以轻松地遍历一个很长的 

列表。 

     可以编写一个函数来为表格添加斑马线效果，只要隔行设置样式就行了。 

     (1) 把文档里的所有tab1e 元素找出来。 

     (2) 对每个table 元素，创建odd 变量并把它初始化为 fa1se。 

     (3) 遍历这个表格里的所有数据行。 

     (4) 如果变量odd 的值是true，设置样式并把创d 变量修改为 fa 1se。 

----------------------- Page 182-----------------------

                     164           第 9 幸 CSS-DOM 

                        (5) 如果变量odd 的值是 fal妃，不设置样式，但把odd 变量修改为true。 

                        我为这个函数命名为 stripeTables。这个函数不需要参数，所以函数名后面的困括号是空的。 

                 别忘了在这个函数的开头部分安排一些测试，检查浏览器是否支持函数中用到的那些DOM方法z 

                        function  stripeTables()  {  
                            if  (!document.getElementsByTagName)  return  falsej  
                           var  tables  = document.getElementsByTagName("table");  
                           var  odd ,  rOWSj  
                           for  (var  i=O;   i<tables.lengthj   i忡) {  
                              odd  = false;  
                              rows  = tables[i].get ElementsByTagName("tr");  
                              for  (var j= Oj   j<rows.lengthj  j++)   {  
                                 if (odd  ==   true)   {  
                                    rows[j].style.backgroundColor  =  11 时fc"; 
                                    odd  = false;  
                                 }  else  {  
                                    odd  = truej  
                                                                                                               •  

                        这个函数应该在页面加载时执行。用 addLoadEvent 函数来做这件事再合适不过: 

•  

                        addLoadEvent(stripeTables);  

                        把以上JavaScript 代码保存为文件stripeTables.js ，再将其和addLoadEvent .js 文件都放到文 

                件夹scripts 里去。 

                        在 iti nerary. html  文档的</body~标签之前，增加两个<script>标签来调用这两个:                                                                           JavaScri萨 

                脚本文件: 

                        <script  src="scripts/addLoadEvent.js"></script>  
                        <script  src="scripts/stripeTables.js"></script>  

                        把itinerary.html 文件加载到一个Web 浏览器里，就可以看到表格里的偶数行都有了一个新 

                 的背景颜色，如图 9-18 所示。 

                         •  

                                                                                                                 飞飞辈辈 o 惑' 
                                                     需费，，'  6每← 
                                                                            道整 盒                                                    ' .  

                                                                                                                                        J  

                                        •  
                                                                                       剧nerary 

                            •  

  .  

                                                                                       图 9-18 

----------------------- Page 183-----------------------

                                                                                                                    •  

                                                      9.3   何时该用 DOM脚本设置样式                          165  

     很凑巧，上一章的 displayAbbreviations 函数也适用于这个文档。把displayAbbreviations.js 

 文件也放到 scripts 文件夹里，并在itinerary.html 文档再增加一个<script>:标签引用它。在Web 

 浏览器里刷新这个页面可以看到动态生成的 "缩略语列表"，如图 9- 19 所示。 

                                                                                                                   •  

                          ?号♂路段' 露 暖器 命!守一~……~ ? i @ @ 毒 

              「 

                          Abbrevi8tions  

            飞 

                          OR  
                           JA  Or吨。a 

                               Washi崎ton 
                          CA                                        '  

                              C撒仰1撞 

                                                 图 9-19 

9.3.3     晌应事件 

     只要有可能，最好选用 css 为文裆设置样式。话虽这样说，你刚才也看到一些 css 不能处 

理或是难以部署的情况。在这类css 力不从心的场合， DOM可以帮上大忙。 

     何时应该使用 css 来设置样式，何时应该使用 DOM来设置样式并不总是那么容易决定。如 

果问题涉及需要根据某个事件来改变样式，就更难做出决定了。 

     css 提供的:hover 等伪 class 属性允许我们根据HTML 元素的状态来改变样式。 DOM也可 

以通过 ol"lmouseover 等事件对HT1\伍元素的状态变化做出响应。很难判断何时应该使用:hover 属 

性、何时应该使用 onmouseover 事件。 

     最简单的答案是选择最容易实现的办法。比如说，如果只是想让链接在鼠标指针悬停在其上 

肘改变颜色，就应该选用 CSS: 

     a :hover   {  
       color:  #c60;  

     伪类:hover 已经得到了绝大多数浏览器的支持一一至少在它被用来改变链接的样式时是如 

此。但如果还想利用这个伪类在鼠标指针悬停在其他元素上时改变样式，支持这种用禄的浏览器 

就没有那么多了。 

                                                                                                                        -- 

----------------------- Page 184-----------------------

•  

        166      第 9 幸 CSS-DOM 

          仍以 iti nerary. html 文档中的表格为例。如果想让某行在鼠标指针悬停其上时其文本变为粗 

     体，可以使用 CSS: 

          tr:hover  {  
            font-weight:  boldj  

          从理论上讲，鼠标指针悬停在表格的哪一行，哪一行的文本就应该加黑加粗z                                                       但在实践中， 

     这种效果只能在一部分浏览器里看到。 

          在这样的场合， DOM却能够得到公平对待。绝大多数的现代浏览器，县然对CSS 伪类的支 

     持很不完整，但对DOM却都有着良好的支持。在浏览器们对CSS 的支持进一步完善之前，在事 

     件发生时用 DOM改变HTML元素的样式更切合实际。 

          下面这个 highlightRωs 函数将在鼠标指针悬停在某个表格行的上方时，把该衍文本加黑加 

     粗:                                                                •  

                                                                      •  
          function  highlightRows()   {  
            if(!document .getElementsByTagName)  return  false;  
            var  rows  =  document.get ElementsByTagName("tr")j  
            for  (var  i=O;   i<rows.length;  i ++)  {  
              rows[i].onmouseover  =  function()   {                                                、 
                 this . style .font训eight =  "bold";  
               }  
              rows[i].onmouseout  =  fun ction()  {  
                 this.style.fontWeight  =  "normal"j  

                                                                                                 、 

          }  
          addLoadEvent(highlightRows);  

          把这个函数存入文件 highlightRows.js 并把它 厄苍苍F                               t卢立    J    剧创 

     放入 scripts 文件夹，然后在 itinerary.html 文档的 1$ ' ~. 黯毯 岱19 

     </body>标签之后增加一个如下所示的<script>:标签: 

          <script  src="scripts/highlightRows.js"></script>  

          在 Web 浏览器里刷新时nerary. html 文档。现 

     在，当你把鼠标指针悬停在某个表格行的上方时， 

     这个表格行里的文本将加黑加粗，如图 9-20 所示。 
                                                                   Abbre飞ñatfons 

          在这一类场合，需要决定是采用纯粹的CSS 来  OR  
                                                                       umaon  
     解决，还是利用 DOM 来设置样式。你需要考虑以  WA  
                                                                       Washi啕份悦 
                                                                   。A 
     下因素:                                                              Cafifomla  

          口这个问题最简单的解决方案是什么; 

          口哪种解决方案会得到更多浏览器的支持。 

          要做出明智的抉择，就必须对 CSS 和DOM技 
                                                                                     图 9-20 
     术都有足够深入的了解。如果你手里只有郁头，那 

     么你看到的任何东西都像钉子。如果你只喜欢使用 CSS ，你十有八九会选择一个CSS 解决方案， 

    而不考虑 JavaScript 解决方案的效果会不会更好。反之，如果你只懂得写 DOM脚本，你往往会 

----------------------- Page 185-----------------------

                                                                          9.4   class~aTIne 属性           167  

立刻动手编写 JavaScript 函数，而不去考虑用 CSS 来解决问题会不会更简明快捷。 

      如果想改变某个元素的呈现效果，使用 CSSz 如果想改变某个元素的行为，使用 DOM; 如 

果你想根据某个元素的行为去改变它的呈现效果，请运用你的智慧，在这个问题上没有放之四海 

而皆准的答案。 

 9.4     cl assName 属性 

      在本章前面的例子里，我们一直在使用 DOM直接设置或修改样式。这种做法让"行为层" 

                                                                                                                        •  
干"表示层"的活， 并不是理想的工作方式。如果你改变了主意， 想换换那些由 DOM脚本设 

置的样式，就不得不埋头于 JavaScript 函数中去寻找和修改与设置样式有关的语句。如果可以在 

样式表里进行那些修改，那就好多了。 

      这里有一种简明的解决方案:与其使用 DOM直接改变某个元素的样式，不如通过JavaScript 

代码去更新这个元素的 class 属性。 

      大家看看styleHeaderSiblings 函数是如何添加样式的: 

      funçtion  styleHeaderSiblings()  {  
        i f  (! doαJment.getElementsByJagName) . return  false;  
        var  headers  =  document.getElementsByTagName("hl");  
        var  elemj  
        for  (yar  i=O;   i<headers.length;  i++)   {  
          elem  =  getNextElement(headers[i].nextSibling);  
          elem.style.fon:tWeight  =  "bold";                                           •  
          elem.style.fontSize  =  "1.2em";  

     如果决定把紧跟在一级标题之后的那个元素的 CSS 字号值从 1.2em 改为 l .4em，你就不得不 

去修改styleHeaderSiblings() 函数。 

     如果你引用一个外部CSS 样式表，并且其中有一条针对.i ntro 类的样式声明: 

                                          •  

      .intro  {  
        fon尤-weight: bold;  
        font-size:  1.2emj  

     现在只需在 styleHeaderSiblings() 函数里把紧跟在一级标题之后的那个元素的 class 属性设 

置为 intro 就可以达到同样的目的。 

     可以用 setAttribute 方法来做这件事: 

      elem.setAttribute("class" ，飞ntro")j 

     更简单的办怯是更新className 属性。 className 属性是一个可读/可写的属性，凡是元素节点 

都有这个属性。 

     你可以用 className 属性得到-个元素的class 属性: 

      element.className  

     用 className 属性和赋值操作符设置一个元素的class 属性: 

----------------------- Page 186-----------------------

                                                                                                                                  、 

                            168           第 9 章 CSS-DOM 

                                element.className  = value  

   e句 

                                下面是利用 className 属性编写出来的 styleHeaderSi blings 函数，它在设置样式时不需要直 

                        接与 style 属性打交道: 

                                function  styleHeaderSiblings()  {  
                                   if  (!document.getElementsByTagName)  return  false;  
                                   va宝 headers = document.getElementsByTagName( 吁11") ;                                        ,  
                                   var  elemj  
                                   for  (var  i=Oj   i<headers.lengthj  i++)   {  
                                      elem  = getNextElement(headers[i].nextSibling)j  

                                                                                                                                                                   、 

                                      elem.className  =  "intro";  

                               现在，不论你什么时候想改变紧跟在一级标题之后的那个元素的样式，                                                                                     只需在 CSS 里修 

                        改. i ntro 类的样式声明: 
   ,                                                                                                            •  

                                .intro  {  
                                   font-weight:  boldj                                                             •  
                                   font-size:  1.4emj  

                               这个技巧只有一个不足:通过 className 属性设置某个元素的 class 属性时将替换(而不是 

                        追加)该元素原有的class 设置: 
                                                                                                                                                   、 

                                <h1>Man   bites  dog</hl>  
                                <p   class="disclaimer">This  is not  a  true  story</p>  

                                                                                                                                              、 

                               如果对包含以上标记的文档使用 styleHeaderSiblings 函数，那个"文本段"元素的 class 属 

                        拉将从 disclaimer 被替换为 intro，而这里实际需要的是"追加"效果一-class 属性应该变成 

                        disclaimer寸ntro ，也就是 disclai mer 和 i ntro 两种样式的叠加。 

                               你可以利用字符串拼接操作，把新的 class 设置值追加到className 属性上去(请注意， i ntro  

                        的第一个字符是空格)，如下所示: 

 吧. 

                                elem.className  +=   "  intro"j  

                               不过，实际上你只希望在原来确实有一个class 的情况下才这么傲。如果原来没有任何class ， 

                        直接对className 属性赋值就可以了。 

                               在需要给一个元素追加新的class 时，你可以按照以下步骤操作: 

                               (1) 检查className 属性的值是否为 null; 

                               (2) 如果是，把新的 class 设置值直接赋值给className 属性; 

                               (3) 如果不是，把一个空格和新的 class 设置值追加到 className 属性上去。 

                               你可以把以上步骤封装为一个函数 addClass。这个函数带两个参数:第一个是需要添加新 

                        class 的元素 (element) ，第二个是新的 class 设置值 (va 1 ue)  :  

                                                                                                                                 、 

                                function  addClass(element ,value)   {  
                                   if  (!element.className)  {  
                                   争  element.className = valuej  
                                   }  else  {  

                                                                           .  

•  

----------------------- Page 187-----------------------

                                                                                                 9.4     className J4性                   169 

             newCl assName  = element.classNamej  
             newClassName+=   "  "j                                                                                                  .  
             newClassName+=  valuej  
             element.className  =  newClassNamej  
                                                                                                                   •  

       在styleHeaderSiblings 函数里调用 addClass 函数: 

       function  styleHeaderSib~ings()  {  
          if  (!document.getElementsByTagName)  return 手alsej 
          var  headers  =  document.get ElementsByTagName("hl")j  
          var  elemj                                                                                            4  
          for  (var  i=Oj     i<headers.length;  i++)   {  
             elem  = getNextElement(headers[i].nextSibli咆)j 
             addCIass(elemp"intro·-);  

       你也可以更新一下stripeTables 函数。这个函数现在是通过直接改变奇数表格行的背景颜色 

来实现斑马线效果的: 
                                                                                                                                                           •  

       function  stripeTables()  {  
          if (!document .getElementsByTagName)  return  false;  
          var  tables  =  document.get ElementsByTagName("table")j  
          var  odd , rOWSj  
          for  (var  i=O;   i<tables .lengthj  i++)   {  
             odd  =  falsej  
             rows   = tables[i].getElementsByTagName("tr")j  
             for  (var  j=Oj   j<rows.lengthj  j++)          {  
                if (odd  ==   true)  {  
                  rows[j].style.backgroundColor  =  "#ffc"j  
                  odd  = falsej  
                }  else  {  
                  od'd  = truej  
                }  

          }  

                                                                                                                                                            .  

                                                                                                                                                       •  
       先在 format.css 文件里增加一条对应于class=飞dd" 的样式声明z 

       .odd  {  
          background-color:  #ffcj  

       然后修改stripeTables 函数，让它通过调用 addClass 函数来实现同样的效果: 

       function  stripeTables()  {  
          if (!document.get ElementsByTagName)  return  falsej  
          var  tables  = document.get ElementsByTagName("table")j  
          var  odd , rOWSj  
          于ot (var  i=Oj   i<tables.lengthj  i++)   {  
            odd  =  falsej                                                                      ,  
            芷ows = tables[i] .getElementsByTagName("tr")j  
            for  (var  j =Oj  j<rows.length;  j++)   {  
               if (odd  ==   true)  {  
                  addClass(rows[j] ,"odd");  
                  odd  =  falsej  
               } else  {  
                  odd  = truej  

----------------------- Page 188-----------------------

                                                                                         J  

   170        第 9 幸 CSS-DOM 

      最终结果与前面完全相同。区别在于现在是通过CSS 而不是DOM去设置样式。 JavaScript 函 

数现在更新的是className 属性，根本没碰styl e 属性。这确保了网页的表示层和行为层分离得更 

加彻底。 

对函数进行抽象                                                                     •  

      你所有的函数都工作得很好，完全可以让它们保持现状。不过，只需再做一些小小的改动， 

它们就会变得更加通用。把一个非常具体的东西改进为一个较为通用的东西的过程叫做抽象 

 ( abstraction) 。 

      仔细看看styleHeaderSiblings 函数，就会发现它仅适用于hl 元素，而且classNeme 属性值intr6 

也是硬编码在函数代码里的: 

      function  styleHeaderSiblings()  {  
         if  (!document.getElementsByTagName)  return  false;  
         var  headers  = document.get ElementsByTagName-("hl");  
         var  elem;  
         for  (var .i=o;  i<headers.length;  i++)   {  
           élem  =  getNe~tElement(headers[i] . nextSibling);  
           addClass(elem , "intro")j  
                                                                                      ‘  

      把这些具体的值转换为这个函数的参数，就可以让它成为一个更通用的函数。把改进后的新 

函数命名为 styleElementSibl ing 并给它增加两个参数一-tag 和theclass: 

      function  styleElementSiblings(tag ,theclass)  

      接下来，把函数代码中的字符串 "hl" 全部替换为参数变量 tag，再把字符串 "in柱。"全部 

替换为参数变量 theclass。为了增加代码的可读性，你也可顺便把原来的 headers 变量名替换成 

elems 以增加可读性: 

      function .styleElementSiblings(tag ,theclass)   {  
         if (! docu!'1ent. get ElementsByTagName)  return  false';  
         var  elems  = document.getElementsByTagName(tag);  
         var  elem;   .  
         for  (var  i:"O;   kelems.length;  i++)   {  
           elem  =  getNextElement(elems[i].nextSibling)j  
           addClass(elem ,theclass);  

      现在，如果把字符串值 "hl" 和"血位。"作为参数传递给这个新函数，就可以获得原来的效 

果: 

      addloadEvent(function(){  
         styleElementSiblings(lhl" ，飞ntro"); 
      });  

      不论何时你发现可以像上面这样对某个函数进行抽象，都应该马上去傲，这总是一个好主 

意。今后你或许会需要对另一种元素或另一个className 属性值进行类似的处理。如果真是那样， 

----------------------- Page 189-----------------------

                                                           •  

                                                                                                                    9.5     IJ 、结          171 

那就是写一个 styleElementSiþling豆通用函数的最好时机。 

 9.5        小结 

       在本章里，你看到了 DOM 完整全新的一面。此前介绍的 DOM 方法和属性要么属于 DOM 

Core ，要么属于HTML-DOM。本章介绍的CSS-DOM技术针对的是如何得到(读)和设置(写) 

style 对象的各种属性，而 style 对象本身又是文裆中的每个元素节点都具备的属性。 

       style 属性的最大限制是它不支持获取外部 CSS 设置的样式。但你仍可以利用 style 属性去 

改变各种 HTML 元素的呈现效果。这在我们无法或是难以通过外部 CSS 去设置样式的场合非常 

有用。只要有可能，就应选择更新className 属性，而不是去直接更新style 对象的有关属性。 

       在本章里，我们向大家介绍了以下几种CSS-DOM技术的具体应用示例。 

        口根据元素在节点树里的位置设置它们的样式 (styleHeaderSiblings 函数)。 

        口遍历一个节点集合设置有关元素的样式 (stripe丁ables 函数)。 

        口在事件发生时设置有关元素的样式 (high~ightRows 函数)。 

       这几种应用都属于用 JavaScript 入侵CSS 领地的情况，而我们这么傲的理由不外乎两点:其 

一是 CSS 无法让我们找到想要处理的目标元素，其二是用 CSS 寻找目标元素的办法还未得到广 

泛的支持。或许，未来的CSS 技术能够让我们远离这种"不务正业"的DOM脚本编程技术。 

       不过，有一种应用大概是 CSS 永远也无法与 DOM竞争的: J avaScript 脚本能定时重复执行 

一组操作。通过不断改变样式，我们就能实现CSS 根本不可能实现的效果。 

       在下一章里，你会看到一个这样的例子。你将写一个能够随着时间的推移而不断刷新元素位 

置的函数。简单地说，你将用 JavaScript 实现动画效果。 

                                                                                                                                                       '  

                                                                                                                                  .  

                                                                                                             ,  

                             .  

                                        •  
                                                       •  

                                                                      •  

                               •  

----------------------- Page 190-----------------------

圃'可气 

           •  

                        …… I  
                        l:11  

                                        用 JavaScrip 
                                                                                            果 

                  在本章里，你将看到 CSS-DOM技术最富于动感的应用之一:让网页上的元素动起来。 

              10.1    动画基础知识 

                  前面的章节介绍了如何利用 DOM 技术修改文档的样式信息。用 JavaScript 添加样式信息可 

              以节约你的时间和精力，但总的来说， CSS 仍是完成这类任务的最佳工具。 

                  不过，有一个应用领域是目前的 CSS 尚且无能为力的。如果我们想随着时间的变化而不断 

              改变某个元素的样式，则只能使用 JavaScript               JavaScript 能够按照预定的时间间隔重复调用一个 
                                                      o 

              函数，而这意味着我们可以随着时间的推移而不断改变某个元素的样式。 

                  动画是样式随时间变化的完美例子之一。简单地说，动画就是让元素的位置随着时间而不断 

              地发生变化。 

              10.1.1   位置 

                  网页元素在浏览器窗口里的位置是一种表示性的信息。因此，                            位置信息通常是由 CSS 负责 

              设置的。下面这些CSS 代码对某个元素在网页上的位置做出了规定: 

                  element  {  

                  这将把e7ement 元素摆放到距离浏览器窗口的左边界 100 像素，距离浏览器窗口的上边界50 

              像素的位置上。下面是实现同样效果的DOM代码: 

                  element.style.position  =  "absolute";  
                  element.style.left  = "100px";  
                  element . sty le. top  = "50px tI ;  

----------------------- Page 191-----------------------

                                                                                 10.1     动画基础知识                  173  

      position 属性的合怯值有 static、                   fixed、   relative 和 absolute 四种。 static 是 position 属性 

 的默认值，意思是有关元素将按照它们在标记里出现的先后顺序出现在浏览器窗口里。 relati阔 

 的含义与 static 相似，区别是position 属性等于时ative 的元素还可以(通过应用 float 属性) 

从文档的正常显示顺序里脱离出来。 

      如果把某个元素的 position 属性设置为 ab$olute，我们就可以把它摆放到容纳它的"容器" 

的任何位置。这个容器要么是文档本身，要么是一个有着fixed 或absolute 属性的父元素。这个 

元素在原始标记里出现的位置与它的显示位置无关，因为它的显示位置由 top、                                                                 left、   right 和 

bottom 等属性决定。你可以使用像素或百分比作为单位设置这些属性的值。 

      设置一个元素的 top 属性将把该元素摆放到距文档顶特定距离的位置， 一个元素的 bottom 属 

性将把该元素摆放到距文档底边界特定距离的位置。类似地， left 或right 属性可用来分别把该 

元素摆放到距文档左边界或右边界特定距离的位置。为防止它们发生冲突，最好只使用top 或只 

使用 bottom 属性; left 或right 属性也是如此。 

      把文裆里的某个元素摆放到一个特定的位置是很容易的事。不妨假设有一个这样的元素: 

      <p   id=lmessage ">Whee!</p>  

      于是，你可以用一个JavaScript 函数来设置这个元素的位置: 

      function  pos主tionMessageO {  
         if  (!document .getElementByld)  return  falsej  
         if (!document.getEle阳ltByld("message")) return  falsej  
        var  elem  =  document.get ElementByld("message");  
        elem. style..position  =  "absolute" j  
        elem.style.left  =  "SOpX"j  
        elem . style .top  =  "100pX "j  
                                                                                    •  

•  

      在页面加载时调用这个 position问essage 函数，会把这段文本摆放到距浏览器窗口的左边界 

50 像素、距浏览器窗口的顶边界 1 00 像素的位置: 

                                                                                                                 •  

      window.onload  =  positionMessagej  

      不过，最好是用 addLoadEvent 函数来完成，如下所示: 

      function  addLoadEvent(func)   { - 
        var  oldonload  = window.onloadj  
        if  (typeof  window .onload   !=  'function')  {  
          window.onload  =  funcj  
        }  else  {  
          window.onload  =于unction()  {  
             oldonload()j  
             funcOj  
           }  
        }  
      }  
      addLoadEvent(positionMessage)j  

      图 10-1 是按position="absolute"的情况来摆放这个元素的效果。 

----------------------- Page 192-----------------------

     174         第 10 章用JavaScript 实现动画效果 

                                        g静静静 
                                                           呐  J，这?溺附WfhiE:"令i  A棋手i精管协 
                                                              4· ·  +   ~aS,   e  '  1'  .."  F';'~l ，  > 叩苔  ,  布，+-"ZS 坏事Ta， 
                                                           鳞 鳞"…川川川M 
                            .  
                            .                                        4~撞                              事 
                                         华 
                                               啡' 普普 

                                               Wbee!  
                                                                                                                                           •  

                                                                  ，，.伊Tm-a..、ρJVA  ;..;.       az4B二t七 
                                        。哥f.It. 
                                                   、         、 
                                                      •                                                14革 

                                                                   图  10-1 

       改变某个元素的位置也很简单，只要执行一个函数去改变这个元素的 style.top 或style.left 

等属性就行了: 

        function  moveMessage()   {  
          if  (!document .getElement8yld)  return  false;  
          if (!document.getElement8yId("message"))  return  fal se ;  
          var  elem  = document.get ElementByld("message");  
          elem . style.left  =      "200px";  

       编写一个这样的函数并不难，问题是该如何去调用这个函数呢?如果让 moveMessage 函数在 

页面加载时运行，这个元素的位置将立刻发生变化一一由 positi onMessage 函数给出的原始位置会 

被立刻覆盖: 

       addLoadEvent(positionMessage) j  
       addLoadEvent (moveMessage);  

       如图 10-2 所示，这个元素的显示位置立刻发生了变化。 

                                                                              一 一 

                                                                  wt脱! 

                                        属前 ' 

                                                                  图 10-2 

       元素的显示位置立刻发生变化并不是我们想要的动画效果。要获得真正的动画效果，必须让 

元素的位置随着时间不断地发生变化。 

                                                                                                                                              •  

----------------------- Page 193-----------------------

                                                            10.1  动画基础知识            175  

     导致元素的显示位置立刻发生变化的根源是JavaScript 太有效率了:函数一个接一个地执行， 

其间根本没有我们所能察觉的问隔。为了实现动画效果，我们必须"创造"出时间间隔来，而这 

正是我们将要探讨的问题。 

 10.1.2   时间 

     JavaScript 函数 setTimeout 能够让某个函数在经过一段预定的时间之后才开始执行。这个函 

数带有两个参数:第一个参数通常是一个字符串，其内容是将要执行的那个函数的名字g                                            第二个 

参数是一个数值，它以毫秒为单位设定了需要经过多长时阅后才开始执行第一个参数所给出的函 

数: 

     setTimeout(γúnction"， interval)  

    在绝大多数时候，把这个函数调用赋值给一个变量将是个好主意: 

     variable  = setTimeout(γúnction 11 ,interval)  

    如果想取消某个正在排队等待执行的函数，就必须事先像上面这样把setTimeout 函数的返回 

值赋值给一个变量。你可以用一个名为 clearTimeout 的函数来取消"等待执行"队列里的某个函 

数。这个函数需要一个参数一一保存着某个setTimeout 函数调用返回值的变量: 

    clearTimeout(variable)  

    修改position问essage 函数，让它在5 秒(或者说5000 毫秒)之后才去调用 moveMessage 函数: 
     function  positionM essage()  {                                              "  
      i f  (!document .getElementByld)  return  falsej  
      if (!document .get ElementByld(lmessage"))  return  falsej  
      var  el em   =  document .getElementByld(lmessage")j  
      elem.style.position  = "absolute";  
      elem. sty le .left  =  "50px" ;  
      elem . style.top  = "100pX"j  
      movement   = setTimeo川("move问essage() "， sooo); 

    positionMessage 函数仍将在页面加载时得到执行: 

    addLoadEvent(positionMessage)j  

    这样一来，那条消息将先出现在它的原始位置上，然后在5 秒之后才向右"跳跃" 150 像素。 

    在那5 秒钟的等待时间里，我可以随时使用下面这条语句取消这一 "跳跃"行为: 

    clearTimeout(movement)j  

    movement 变量对应着在positionMessage 函数里定义的 setTimeout 调用。它是一个全局变盏， 

      明它时未使用关键字var。这意味着那个"跳跃"行为可以在positionMessage 函数以外的 

        消。 

 0.1.3   时间递增                              .                                                         •  

    把某个元素在5 秒钟之后向右移动 1 50 像素的显示效果称为动画实在有点儿勉强。真正的动 

        一个渐变的过程，元素应该从出发点逐步地移动到目的地，而不是从出发点一下子跳跃 

----------------------- Page 194-----------------------

                                      ,  

                176      第 10 章用JavaScript 实现动画效果 

             到目的地。 

                  我们更新一下moveMessage 函数，让元素的移动以渐变的方式发生。下面是新moveMessage 

             数的逻辑。 

                  (1) 获得元素的当前位置。 

                  (2) 如果元素已经到达它的目的地，则退出这个函数。 

                  (3) 如果元素尚未到达它的目的地，则把它向目的地移近一点儿。 

、 

                  (4) 经过一段时间间隔之后从步骤 l 开始重复上述步骤。 

                  第一步是确定元素的当前位置。这一点可以通过查询元素的 style.top 和 style .left 等位置 

             属性做到。我们把 style.top 和 style. 1 eft 属性的值分别赋给变量邓os 和ypos : 

                  var  xpos   =   elem.style. left;  
                  var  ypos   =  elem .style .topj  

                  当 rt盯ve问essage 函数在 position问essage 函数之后被调用时， xpos 变量将被赋值为 50px，                          ypos  

             变量将被赋值为 1 00px。我遇到了一点儿小麻烦:                         这两个值都是字符串，而接下来的代码需要进 

             行许多算术比较操作。我需要的是数，不是字符串。 

                 JavaS∞pt 函数parselnt 可以把字符串里的数值信息提取出来。如果把一个以数字开头的字符 

             串传递给这个函数， 它将返回一个数值: 

                  parselnt(string)  

                  下面是一个例子: 

                  parselnt("39  steps");  

                 这个函数调用将返回数值 "39"  (不包括引号)。 

                 parselnt 函数的返回值通常是整数。  如果需要提取的是带小数点的数值(也就是浮点数)，就 

             应该使用相应的 parseFloat 函数: 

                  parseFloat(string)  

                 我们在mover叶essage 函数里只与整数打交道，所以使用 parselnt 函数: 

                  var  xpos  =  parselnt(elem . style . left) ;  
                  var  ypos   = parselnt(elem.style .top)j  

                 parselnt 函数将把字符串 "50px" 转换为整数50，把字符串 "loopx" 转换为整数 100。现在， 

             xpos 和ypos 变量分别包含整数50 和 100。 

             -…·刷刷嗣附...111 ..." '"  ,.. U 11 1111111 n Ullml.nnu"" 11111'""" n" 111""喇懒四"副酬嗣翩翩翩-常『而 

             注意只有使用了 DOM脚本或style 属性为元素分配了位置后，这里的 parselnt 函数才起作用。 

                 在moveMessage 函数里，接下来的几个步骤需要用到大量的比较操作符。 

                 第一次测试是否相等，我们需要知道变量 xpos 和 ypos 的值是否等于目的地那里的"左" 

            位置和"上"位置。 如果是，退出这个函数。相等操作符由两个等号构成。(记住， 一个等号是 

             赋值。) 

----------------------- Page 195-----------------------

                                                                       •  

                                                                                                      10.1       动画基础知识                         177  

        if  (xpos  ==   200  &&   ypos  ==      100)  {  
           return  true;  

        如果mesage 元素还没有到达它的目的地，则继续执行下面的代码。 

                                                                                                                                                                  .  
        接下来，根据mesage 元素的当前位置及其目的地的关系更新变量xpos 和ypos 的值。我们希 

        它们移动到一个距目的坐标更近的地方。如果xpos 小于终点的 left，给它加 1 :  

        if  (xpos  < 200)   {  
           Xpos++j  

        如果xpos 大于终点的 left ，给它减1: 

        if (xpos  >  200)   {  
           XpOS--j  

       根据 ypos 的值和终点top 的关系，对变量ypos 进行类似的更新: 

        if (ypos  <  100)  {  
           ypOS++j  

        if (ypos  > 100)  {  

       现在，你知道把变量 xpos 和ypos 由字符串转换为数的原因了:我要用大子和小于操作符进 

耘数值比较，并根据比较的结果更新它们的值。 

       接下来，需要把变量 xpos 和ypos 的值应用到 mesage 元素的 style 属性。我们需要把字符串 

.px" 追加到这两个值的末尾，并把它们赋给 left 和top 属性: 

        elem.style.left  = xpos  +  "px";  
        elem.style .top  =  ypos  +  "pX"j  

       最后，我们需要在一个短暂的停顿之后重复执行这个函数。我们把停顿时间设置为百分之一 

秒，也就是 10 毫秒: 

        movement   ;::;  setTimeout("move问essageO" , 10);  

       下面是moveMessage 函数的代码清单: 

        function  moveMessage()           {  
           if  (!document.getElementByld)  return  false;  
           if (!document .getElementByld("message"))  return  falsej  
          var  elem  =  document.get ElementByld("message")j  
          var  xpos  =   parseI川(elem.style.left); 
          var  ypos  =  parselnt(elem.style.top)j  
           if (xpos  ==   200  &&  ypos  ==        100)   {  
             return  true;  
          可 
       1 - I 

               r              ， ‘ 、 ‘ ， ， 
             fxfx  
                    u  n  υ  n 
                           、 
                             nMnu  
                        J 
                 xoxo  
                   nu'CJnu-ea  
               飞 n / 、 v  牛  矿n  d 、 t 忐 ，  ，  .‘ 、  、  ，4 ，  z t 

                       ..  
               v 
           ­  v n  · 
                       ,  
          、 
          I 

             飞 ， ，              、 . ‘ ， ， 
           · 
                           、 
          1       ·  2 '   4 

              v n 
                       . 
                       .  
                       ,  

----------------------- Page 196-----------------------

-- 

                     178        第 10 章用JavaScript 实现，动画效果 

                           if  (ypos  < 100)  {  

                           if  (ypos  > 100)  {  

                          elem .style .left  =  xpos  +  "px";  

                          movement   =   setTimeout("moveMessageO" , 10);  

                        这个函数使得 message 元素以每次 1 像素的方式在浏览器窗口里移动。 一旦这个元素的 top 

                  和 left 属性同时等于 100px和200px，这个函数就停止执行。这可是实实在在的动画效果一一虽 

                  然它没有什么实际的意义。稍后，我们将利用同样的原理实现一个有实用价值的例子。 

                   10.1.4      抽象 

                        刚才编写的 moveMessage 函数只能完成一项非常特定的任务。它将把一个特定的元素移动到 

                  一个特定的位置，两次移动之间的停顿时间也是一段固定的长度。所有这些信息都是硬编码在函 

                  数代码里的: 
                                                                                                     .  
                        function  move问essageO {  
                           if (!document .getElementByld)  return  false;  
                           if (! document.get ElementByld("message"))  
                        return  false;  
                          var  elem  =  document.get ElementByld("message");  
                          var  xpos   =  parselnt(elem.style.left);  
                          var  ypos  =  pars elnt(elem.style.top);  
                           if (xpos  ==  200  &&  ypos  :;;=   100)  {  
                             return  true;  

                           if (xpos  < 2∞) {  
                             xpos++j  

                           if  (xpos  > 200 )  {                                           •  
                             xpos--;  

                          if  (ypos  < 100)   {  
                             ypos++j  

                           if (ypos  > 100)  {  
                             ypos--;  
                                                                                                                                    •  

                          elem.style.top  =  ypos   +  "px";  
                          movement   = setTimeout("moveMessage()" ,10);  

                        如果把这些常数都改为变量，这个函数的灵活性和适用范围就会大大提高。通 

                  moveMessage 函数进行抽象，你可以让它变得更加通用(便于重用)。 

                        1. ~lJ 建roveElement函数 

                        把新函数命名为 moveElement。与moveMessage 函数不同，新函数的参数将会有多个。下面 

                  每次调用这个新函数时可能变化的东西。 

----------------------- Page 197-----------------------

                                                                                                                                   10.1         动画基础知识                                     179  

                    •  

    (1)打算移动的元素的 10。 

    (2) 该元素的目的地的"左"位置。 

    (3) 该元素的目的地的"上"位置。 

    (4) 两次移动之间的停顿时间。 

    这些参数都应该取一个描述性的名字: 

    (1) e 1 ementID  

    (2) final_x  

    (3) finaly  

    (4) i nterva 1  

    定义moveElement 函数的第一步是声明它的各个参数: 

    functi on  moveElement(elementID , fin al_x ,final_y ,interval)  {  

    用这些变量把前面硬编码在moveMessage 函数里的有关常数全部替换掉。在moveMessage 函数 

              以下几条语句: 

        U  ， J ， U A                    百               U A ， ‘ 、                、 
       LIrTa                                                                   rT"e  
   、  .                   e L + L + ι +  F P ­  l  L τ  + M  H L  n + p  n 
                                                        T 
                                                                    牛 
             !1 
              F L F   m O         o  σ  m  m          D n m  m 」  A 白  γ 』 由 ， γ  ，  ，  ，  、  。  、 a p  』 白 
                           nHRH 
                     HUHU          eem                                 HUpbanu  
                 ooe             ggu   eee nnH&L  
                                           ee·  
                                                      V               o  n        E 
                                                        AT-                             - 
          ，                    L  +  - t  1  - '           A  T 3  P  L 
     .•.  
        ，  ，  、  、  』 白 川 』 · ·     俨 』                                 且         A 
                                                                                        p 
                            在                        J   、  」 中 ‘ ，  J ，  " t  r  M  2  6 ， ，  、  、    吨 
                                                                                                    Z 
    、                 m                           ρ  y V                   』  自 b o e γ  牛 u           i 
                                                                                                nH    2M  CJ  
                                                                                        ee                  e  
                                                                                                              . 
                                     』 萨 
                                                                                               r;  
          .             O  L                              u                            " L 
                                                                                                    '  
                  」 
v u - ·   、  、      - 川 
                                                                                                              .  
             · 
                                                                        " 。 
                                                                                                              ,  
              唱                                                                             、 
                           .AU  
                                                  俨 
                  m          」  F    H n                  a  H n Y V      m m    3 r 句 
         Z  e                                            m  
              i   川   ­                          E            L                 3   d     J t 
                                                      』   』 
                                                                        飞 
                                        ­ 

   把这几条语句里的getEl ementBy1dC "message")全部替换为 get日创entByld (elementID) :  

    if  (Jdocument.getElementByld)  return  falsej  
    if  (!document.getElementByld(elementID) )  return 于alse; 
    var  el em   =  document .getElementByld(elementID);  

   elem 变量现在对应着你想、移动的任何元素。 

   接下来的两行语句用不着修改。它们负责把给定元素的 left 和top 属性转换为数值，并把转 

             别赋值给变量xpos 和ypos : 

    var  xpos  =  parselnt(elem.style .left) ;  
    var  ypos   =  parselnt (elem.style .top) ;  

   接下来，检查给定元素是否已经到达目的地。在moveMessage 函数里，目的地的坐标值是200 

     位置)和 100 (top 位置)。 

    if (xpos  ==   200  &&   ypos  ==   100)   {  
       return  true;  

   在moveElement 函数里，目的地坐标值将由变量 f1na13 和final_y 提供: 

    if  (xpos  ==   final_x 协 ypos ==   final_y)   {  

   再往后是对变量xpos 和ypos 进行刷新的几条语句。如果变量 xpos 的值小于目的地的"左" 

    ，给它加 1 。 

   原来的目的地的 top 位置是硬编码在函数代码里的常数200: 

   if  (xpos  < 200 )   {  
       xpos++;  

----------------------- Page 198-----------------------

•  

          180      第 10 章 用 JavaScript 实现动画效果 

            现在的目的地的 left 位置由变量f1naLx 提供: 

            if (xpos   < final_x)  {  
              Xpos++;  

            类似地，如果xpos 大于目的地的 left 位置， xpos 减 1 :  

            if  (xpos  > final_x)   {  
              XpOS--j  

            对负责更新变量ypos 的语句做同样的修改。如果YPQS 小于行nal  y，给它加 1 ;如果它大于 

       final_y，给它减 1 :  

            if  (ypos  < final_y)   {  
              ypos++;  
            }  
            if (ypos  >  final_y)  {  
              ypos--;                                                    •  

            接下来的两行语句不用修改。它们负责把字符串"px"追加到变量 xpOS 和 ypos 的末尾，并将 

      其赋值给elem 元素的 left 和top 样式属性: 

            elem.style.left  = xpos  +  "pX"j  
            elem.style.top  = ypos  +  "pX";  

            最后，在经过一段适当的时间间隔之后再次调用同一个函数。在 moveMessage 函数里，这个 

      环节相当简单:每隔 10 毫秒词用一次moveMessage 函数: 

            movement  =  setTimeout("movel可essageO 11   , 10);  

            在moveElement 函数里，事情变得有一点儿复杂。因为在下一次调用 moveElement.时j                                             我们还 

      需要把elementID、         f1naIJ、    final_y 和 interval 等参数传给它。这将形成一个如下所示的字符串z 

            WoveElement(="+elementID+"'p"+final-X+  

           字符串拼接操作实在不少!与其把一个这么长的字符串直接插入到 setTimeout 函数里去，不 

      如先把这个字符串赋值给 repeat 变量: 

            var  repeat="fHoveElement('"+elementID+"'p"+final-X+"p"+final-y+" ,"+interval+")";  

           现在，我们只需把 repeat 变量插入到 setTimeout 函数里作为它的第一个参数就行了。第二个 

      参数是再次调用第一个参数所指定的函数之前需要等待的时间间隔。这个间隔在 moveMessage 函 

      数里被硬编码为 10 毫秒，它现在将由变量 interval 提供: 

            movement   =  setTimeout(repeat ,interval);  

           用一个右花括号结束这个函数: 

           下面是moveElement 函数的代码清单: 

            function  moveElement(elementID ,final_x ,final_y ,interval)  {  
              if (!document.getElementByld)  return  falsej  

----------------------- Page 199-----------------------

                                                                                                                                                                                                     10.1           动画基础知识                                         181  

                                                           if (!document. get ElementByld(elementID))  return  false;  
                                                          var  elem = document.getElementByld(elementID);  
                                                          var  xpos  = parselnt(elem.style.left);  
                                                          var  ypos  =  parselnt(elem.style.top)j  
                                                           if (xpos  ==手inal_x &&                             ypos  ==   final_y)  {  
                                                              return  true;  
                                                          、 
                                                       1 - # 

                                                               l f                石        咱   ， ， ‘ 、 ， 
                                                             FT  
                                                                                    、 .                J 
                                                                             飞 ， 
                                                                    VA    44  
                                                                        nu  
                                                          1                             。 哩 
                                                                      nv                nH       VA  
                                                                                           i 
                                                                                                     、 ， 、 
                                                                                   E . 
                                                                                     ‘ 
                                                                 、 

                                                              xpos++;  
                                                         忌  、 

                                                        .  J E 

                                                                f  ， ， ‘  、  ， ， ，  、  、  ，  ， ， 、  、 1 f 
                                                                                            咱 
                                                                                       .I·--1  
                                  ‘ 、  品  u ' 吨 n  . J ，  E ，  、 E  、 V 品  n ·  、 2 ' '  v  n  。 、 、 
                                                                    VAOVYOVJO  
                                                                           FD-P3·TP2·  
                                                                                        nHnunH  
                                                                                            E 
                                                                                                JJJ  
                                                                              J          a 
                                                                 飞                 、     品 
                                                                                            、  ，   ，  、 
                                                        '  ' '  P 
                                                               VAVJVF  
                                                                             . 
                                             ·     0  +        O     " 
                                                                             .  
                                                                             ,  
                                                '  5  1 f  y ￡  n 飞 、      飞 .. J · E L  d 『 A E r   t 

                                                                             ,  

                                                        .  J  E 

                                                                                  ￡        咽 
                                                         ，  、  ‘ 飞   '        J    t     a 吨  · · E    ‘ L 

                                                              s  u n 、 d  ， 
                                                                             ..  
                                                                             ,  

                                                          el em.style.left  =  xpos  +  "px";  
                                                          elem .style.top  = ypos  +  "px" ;  
                                                          var  repeat  =  "moveElement(' ''+elementID+''' ,''+fina l_x+'' J ''+final_y+''J''+interval +")";  
                                                          movement  =  setTimeout(repeat ,interval)j  

                                                    把moveElement 函数保存为moveElernent.js 文件。把这个文件放入scripts 文件夹，别忘了把 

                                                             vent .       js 文件也放到那里。 

                                                     2.    使用moveEl 仰的函数 

                                                    现在，我们来测试一下这个函数。 

                                                     首先重新创建前面的示例，创建一个名为 message.html 的文档，让它包含一个叫属性值是 

                                                    age 的文本段: 

                                                     <IDOCTYPE   htm l>  
                                                     <html  lang="en">  
                                                     <head>  
                                                          <meta  charset="utf蝇 8"  1>  
                                                         <title>Message</title>  
                                                     </head>  
                                                     <body>  
                                                         <p   id=" message">Whee!</p>  
                                                     </body>  
                                                     </htm l>  
                                                           目                 革                                                                                                                                                                                             的 
                                                                                                                                                      AMfJezg  
                                                      因        司  巨  M U ~           G A J 厅  蜡 』  目 - - 利 问 剧      川 f d -  卜 M ， I '  V  H H ' 胁 定  创 = L  J 川 H h 阅 初 、 始  位 旧    编                  个 勘    份 
                                                         - 
                                                    回  『     斗 - -  J q H d 在 - 画                  r  u  -  i          Y  ， M Z     、 n           民          用          置                    写                                    ，  『  . .                        、 . 
                                                                        EtJIooettt                                                                                                                                                     +L       Mn  
                                                                                                            -  r   J λ 
                                                                                                                  tkk~r1 
                                                                                                                       r2uk 
                                                                                            r  -  -  i 
                                                          JJnn-liveeemd  
                                                                             1 -           ·                                                     . · ，                                                                           F      句    n    0    p  『          、 户 
                                                                                                                                                                                                                                                               QL  
                                                                                                                                                                                                                               nu           nv       p3      nud  
                                                                             P  -  A U 州     A  S  u         -    -  L 7    E    -  μ 
                                                                                                                                                                                                                             nv  
                                                                                           r          v h p U U M              叩               』 护 
                                                                           2                                                                                                                                                           ， ，               d 
                                                                                                                                                                                                                                 飞 
                                                                                                                                                                                                     -M  
                                                C  2 K                      h d     V  U  .                  已    也                                                                                                                          川         、          U Z 
                                                                      - 
                                                                                                                                                                                                                                    ..  
                                                            ω                                                          t  i   J  也   却                                                                                           u                」    d              d 
                                                                                       A          ， 
                                                               '  } -        ， '  - - K A V r M .          唱          '  3 1 k                     ，                         、  。 

a           J          l  f  冒                 s                  4                              L -           」                                1 」 一       1                                           ι 
                                                                                                     • 
                                                           r 时  : J    n 寸 厅  二  e  n e r  e r e  U u I r  n N n       H U 引                                                                 m 
                                               v                                                                                                                                 :v 
                                             au   a  
                                                                                 U   L  4 s 1  U l  R  D  n   k                       m        叫 甘 F   宅 
                                                                   、 
                                         J                                                     〉                                                                                 J 
                                                                                           八 
                                                                                                     Laee 
                                                                                '     L      +  L         +  E  "  TJ M 2  A  V   A  U             、 
                                                                                                                                                                                    '  
                                                     -   l   o   J  、        。                                、      气 

                                                                             - 

                                                                                                                                 - 
                                                                 - 

               d               v m          m  (  (- f  f  d  i                4  U -      M  』 白            飞 
                            e  m   y  5 v  5 y  5 4 v 4 1 y 1 4 v U 1 m A  4 c U  1 - A c  S u n m v  u C n m  o · s  ·E  时 E 」 』 " 川 白  』  自0 n" a H  m E  m  S u门  L 4 E 、  k  t n  t  飞  j  I I dd 牛 1 

                                                 ­  -  e  L  &  -  -  u  o  k  n  u  k  n                  n      " B  y  m v e r  e     M  2  J  E    · · 
                                                                                                                  VJ 
                                                               e  - -                  n  B E F L t 牛 M - 4 、 i H  n H VJesse 3 z  · r J  4 飞 E T S L s j e 4 飞 e ' M            ;  
                                                    w    m  r      ω    h    m  ω                                                         w              川  吓 
                                                                                                  牛       牛 
                                                            缸                              m          n   u  H 0   m H n 
                                                                                                                       elo;  
                                                                              m     1  "  牛  吨  川 ·H  A n V  L A』 V 。 区  " L 
                                                                                                     · 
                                                                                                                                      飞 
                                    U  W     K    K  U  LE  a ·  E · e  n t  e nm F ·  4 e 币 s  m ev e  - e r t  - & ·  o  an  s 正 = 币  n 电  4 L · = s · t " 。 O E  ' n 0  5oeMn = 。 n " y v  p ， 、 - o u· 2 h - 1 u -  。 e ，  J 、 

                                                                               f 
                                                                 d             飞           品  A L 4  e  d d c a b o 飞 j 

                                                                                                                                                                                                                                                                                                               •  

                                                    上面这段代码中的 moveElement 函数调用语句将把字符串值 "me.ssage" 传递给 elementID 参 

----------------------- Page 200-----------------------

                                                                                                                                           .  

                    182         第 10 章 用 JavaScript 实现动画效果 

                数，把数值200 传递给f1na13 参数，把数值 100 传递给final_y 参数， 把数值 10 传递给1 

                参数。 

                       scripts 文件夹现在包含三个文件:                             addLoadEvent.js、        positionMessage.js 和 moveElement.js* 

                 我们需要在message.html 文档里插入一些<script>标签来引用这几个脚本文件，如下所示:                                                                        : 

                       <!OOCTYPE   htm l>  
                       <html  lang=" en ">  
                       <head>  
                          <meta   charset=" utf-8"  1>  
                          <title>问essage</title> 
                       </head>  
                       <body>  
•                         <p   id="message">Wheel</p>  
                          <script  src="scri pt s/addloadEvent.js"></ script >  
                                                                                                      •  
                          <scri pt  src="scripts/position问essage. js"></script> 
                          <script  sr c="scripts/ move Element .j s ">< /script>  
                       </body>  
                       </html>  

                       现在，把message. html 文档加载到一个Web 浏览器里就可以看到我们所实现的动画效果了 

                如图 1 0-3 所示，那个元素将在浏览器窗口里横向移动。 

                                                   :筋。秽工       134年Fh 俨丐f浏阳梆，...，           ，~""，寸  '二三E       G  J  

                                                   舍' 战争' 藏 辙， 命!费时吁"一……币1;1 04 @ 
                                   •  

                                                             飞气'hèt"~飞毛F总ecWbeê!领fbee! 

                                                                                                                                          ,  
                                                                             图  10-3 

                       至此， 一切都进行得很顺利。 moveElement 函数与 moveMessage 函数的效果完全一样。不过 

                 因为我们已经对这个函数进行过抽象处理，所以现在可以把任意的参数传递给它。比如说， 

                改变参数 f1naLx 和 final_y的值，就可以改变动画的移动方向z                                                      如果改变参数 interval 的 

                就可以改变动画的移动速度: 

                       function  moveElement(elementID ,final_x ,final__y ,interval )                    .  

                      在positionMessage.js 文件里修改position问essage 函数的最后一行， 让这三个值发生点j 

                       function  positionMessage()   {  
                          if (!document .get ElementByld)  return  false;  
                          if (!document .get ElementByld("message"))  return  falsej  
                         var  elem  =  document.get ElementByld("message")j  
                         elem . style .position  =  "absolute";  
                         elem.style.left  =  "SOpX"j  
                         elem . style .top  =  "100pX";  
                         move Element ( "message" , 12s,2S ,20);  

                       addLoadEvent(positionMessage);  

----------------------- Page 201-----------------------

                                                                                                   10. 1     动画基础知识                         183  

        在Web 浏览器里刷新message.html 文件，就可以看到新的动画效果了:那个元素现在将斜向 

        ，移动的速度也变慢了，如图 10-4 所示。 

                                                                                               .1 0 苦k  e 
                                      命守舍' 疆首 脑 

                     、 

                                                        Whee!  
                                                      Wht.>a!                                   v、 
                         .  
                                                  Wh优! 

                                               1忘liteT 

                                                                 图 10-4 

       还可以改变moveElement 函数的elementID 参数值: 

        f unction  moveElement( elementID ,fin al_x , final_y, interval)  

       在message.html 文件里增加一个新元素，把它的 id 属性设置为message2: 

       <IDOCTYPE   htm l>  
        <html  lang=" en ">  
       <head>  
         -<meta  charset=l utf-8"   1>  
          <title>Message</title>  
       </head>  
       <body>  
          <p  id="message">Whee l</p>  
                                                                             ·、...  
          <p   id="message2">Whoal</p>                                                                   .  
          <scri pt   src="scripts/addLoadEvent.js"></scr ipt>  
          <script  src=ffscripts/positi onMessage .js"></sc ript>  
          .<script  src="scripts/moveElement .js"></script>  
       </body>  
       </htm l>  

       现在，在 positionMessage.js 文件里增加一些代码。先为 message2 元素设定一个初始位置， 

然后增加一条moveElement 函数调用语句-一把message2 作为它的第一个参数传递: 

       function  position问essage()  {  
          if  (!documeni .getElementById )  retur n  false ;  
          if (!document.get ElementById'("message"))  return  false;  
          var  elem  =' document.get ElementById("message");  
          elem . style .pos ition   =  "absolute ";  
          elem . style. l eft  =  "Sopx" ;  
          elem . style .top  =  "100pX"j  
          move Element ("message" , 125,25 ,20)j  
          if (ldocument.getElementByld("message2"))  return  falsej  
          var  elem  =  document.get ElementByld("message2");  
          elem.style.position  =  "absolute";  
          elem.style.left  =  "sopx";  
          elem.style.top  = " S0pX";  

               •  

----------------------- Page 202-----------------------

•  

            184         第 10 章用JavaScript 实现，动画效果 

                  move Element("message2" , 12s, 12S,20);                ,  
               }  
               addLoadEvent(positionMessage);  

               在 Web 浏览器里刷新message.html 文件就可以看到新的动画效果了，如图 10-5 所示。两个 

        元素将沿着不同的方向同时移动。 

                                                                                                    、  英 命 

                    l  

                                               王起飞LL....'-'" ‘ 一n........r 

                                                                                       •  
                                                                             ,  

                                                                                                                                   .  

                                                                    图  10-5 

               在这两个例子里，所有工作都是 moveElement 函数完成的。只需简单地改变一下传递给这个 

         函数的参数值，你就可以随意重用它。这正是用参数变量代替硬编码常数的最大好处。 

         10.2        实用的动画 

               有了 moveElement 这个通用的函数，你就可以用它沿任意方向移动页面元素。从程序 

        的角度看，这会给人留下相当深刻的印象z                                          但从实用的角度看，它的意义似乎并不大。 

               网页上的动画元素不仅容易引起访问者的反感，还容易导致各种各样的可访问性问题。 

        在它们的Web Content Accessibility Guidelines  (Web 内容可访问性指南) 7.2节里给出了这样的 

        议:"除非浏览器允许用户"冻结"移动着的内容，否则就应该避免让内容在页面中移动。( 

        级2) 。如果页面上有移动着的内容，就应该用脚本或插件的机制允许用户冻结这种移动或动 

        新行为。"                           ?  

              这里的关键在于用户能不能控制。解决了这个问题，根据用户行为移动一个页面元素可 

        到增强网页的效果。让我们看一个能够起到增强页面效果的例子。 

         10.2.1       提出问题                                ,  

              我们有一个包含一系列链接的网页。当用户把鼠标指针悬停在其中的某个链接上时， 

        用一种先睹为快的方式告诉用户这个链接将把他们带往何方。我们可以展示一张预览图片。 

              这个网页的基本文档是 1 i st .'html 文件，下面是它的代码清单: 
         .  

----------------------- Page 203-----------------------

                                                                                     •  

                                                                                   10.2    实用的动画                 185  

       <!OOCTYPE   html>           .  

       <html  lang; "en">  
       <head>  
         <meta  chars et= "utf-8 "  />  
          title>Web . Oesign</title>  
         < 
       </head>  
       <body>  
         <hl>Web  Oesign</hl>  
         <p>These  are  the  t hings  you  should  know .</p>  
         <01  id="linklist">  
           <1 i>  
              <a   href=" strycture .html">St ructure< /a>  
           </li>  
           <li>  
              <a   href="presentation.html">Presentation</a>  
           </li>  
           <li>  
              <a   href="behav ior .html">Behavior</a>  
           <!li>  
         </0 1>  
       </body>  
       </htmb  

      这个网页里的每个链接分别指向一个介绍相关网页设计技巧的页面。这些链接内文本已经简 

   介绍了目标页面的内容(如图 10-6 所示)。                                                                                                          •  

                           。;60 1 二 b          川;77:LLW啕JSes19n     町、二…-413片"号三;如: 

                           舍'     吵吵奋 笔费 命鼓-E"~-1.i C 点 建 

                           Web Design  

                           Tb臼e are th.e由副gs. you sbould栩侧. 

                              1..5:姐磁黯慧 
                              2. 阳回el'l蝉刷E 
                              3.  B幽幽 

                                             •  

                           。one 

                                                       图 10-6 

      事实上这个网页已经足够完美。也就是说，为它增加一种视觉提示效果会让这个网页更有吸 

引力。 

      从某种意义上讲，这个案例与我们在本书前面的有关章节里实现的图片库颇为相似:它们都 

包含着一系列链接，我想对它们做的改进都是显示一张图片。但我们这一次要在 onmouseover 事 

件(请注意，不是onclick 事件)被触发时显示一张图片。 

      我们将沿用图片库案例中的脚本一一只需把每个链接上的事件处理函数从 onclick 改为 

onmouseover。它能工作，但图片显示得不够流畅:                                 当用户第一次把鼠标指针悬停在某个链接上时， 

新图片将被加载过去。即使是在一个高速的网络连接上，这多少也需要花费点儿时间， 而我们希 

望能够立刻响应。 

----------------------- Page 204-----------------------

                    186        第 10 章用JavaScript 实现，动画效果                                                               •  

                 10.2.2       解决问题 

                      如果为每个链接分别准备一张预览图片，在切换显示这些图片时总会有一些延迟。除此之外， 

                简单地切换显示这些图片也不是我们期望的效果。我们想要的是一种更快更好的东西。 

                      下面是我们要做的事情。 

                      口为所有的预览图片生成为一张"集体照"形式的图片。                                                               I 

                      口隐藏这张"集体照"图片的绝大部分。 

                      口 当用户把鼠标指针悬停在某个链接的上方时，只显示这张"集体照"图片的相应部分。 

                      我已经制作出了一张这样的"集体照"图片，它由三张预览图片和一张默认图片构成3 如图 10-1 

                所示。 

                                                               ?FRI-- …-‘  
                                      Choose  
                                     a  to伊1c                   a‘c>o  ..、 

                                                                盹 
                                                              …  

                                                               ~"."，=-西.......'" 

                                                                         图 10-7 

                      这个图片的文件名是topics. gif。它的宽度是400 像素，高度是 100 像素。 

                      我们把topics.gif 图片插入到1 i st. html 文档里，并把这个图片元素的id 属性设置为prevuh 

                      < ! DOCTYPE  html>                                                                                         ，向 
                      <html  lang=" en ">  
                      <head>  
                         <meta  charset=" utf-8 "  1>  
                         <tit1e>Web  Design</title>  
                      </head>  
                      <body>                                                                                                •  
                        <hl>Web  Design</hl>  
                        <p>These  are  the  things  you   should  know .</p>  
                        <01   id:;:"link1ist">                                                                                 ‘  
                           <1i>  
                             <a   href="structure.html">Structure</a>  
                           </li>  
                                                                                                                r  
                           <11>  
                             <a   href= "presentation.html">Presentation</a>  
                           </li>  
                           <1i>  
                             <a   href:;: "behavior.html">Behavior</a>  
                           </li>  
                        <10 1>  
                        dmg  src="images/topics.gif"  alt="building  blocks  of  web   design"  id:"preview"  1>  
                      </body>  
                      </htm l>  

、 

                      图 10-8 是带着那些链接和那张"集体照"图片的网页显示效果。 

----------------------- Page 205-----------------------

                                     •  

                                                       •,  

                                                                                                  10.2     实用的动画                    187  

                              ;榜@O LF二                ~二、  城拌均stgn，:ι                  1·1            τ 二~邵 

                               错? 今露面 雷轰 金也一←JC ￡ @ 

                              [web Design  

                              τ吉制aæ锥lC 街拥g.s you毒bouldknow. 

                                  i 革斟聪慧注 
                                  2.  PZ础础企捕。" 
                                  3. 量战部监E 
                 ,  

                                 Choose . 
                                a  top专￡            露运 
               '                                    孚世曲时， 
                                                    . ". ..... --‘  
                                                    "、写" 
                                                     一 

                              'Øóií~                                                                         4  

                                                                图  10-8 

       现在，整张"集体照"图片都是可见的。每次我们都只想让这个图片的某个 100 x  100 像素 

的部分出现。我们无法用 JavaScript 做到这一点，                                            但可以用 css 来傲。 

 10.2.3        CSS  

       css 的overflow 属性用来处理一个元素的尺寸超出其容器尺寸的情况。当一个元素包含的内 

容超出自身的大小时，就会发生内容溢出，这种情况，                                                         你可以对内容进行"裁剪"，只让一部分 

内容可见。你还可以通过overflow 属性告诉浏览器是否需要显示滚动条，以便让用户能够看到内 

容的其余部分。 

      over、flow. 属性的可取值有4 种: visible、                             hidden、     scroll 和auto。 

       口 visibJe:       不裁剪溢出的内容。浏览器将把溢出的内容呈现在其容器元素的显示区域以外， 

          全部内容都可见。 

       口 hidden :      隐藏溢出的内容。内容只显示在其容器元素的显示区域里，这意味着只有一部分 

           内容可见。 

       口 scroll :类似于hidden，浏览器将对溢出的内容进行隐藏，但显示一个滚动条以便让用户 

          能够滚动看到内容的其他部分。 

      口 auto:  类似于scroll ，但浏览器只在确实发生溢出时才显示滚动条。如果内容没有溢出， 

          就不显示滚动条。 

      如此说来，在overflow 属性的4 种可取值当中，最能满足我们要求的显然是hidden。我们有 

      实际尺寸是400 x 100 像素的图片，但我每次只想显示这张图片中一个尺寸为 100 像素x 100  

      的部分。 

      首先，需要把这张图片放到一个容器元素。我们把它放入一个div 元素，并把这个div 元素 

----------------------- Page 206-----------------------

、. 

                            188            第 10 章用JavaScript 实现动画效果 

                       的 id 属性{直设置为 slideshow: 

                                <div  id="slideshow">  
                                 <img     src="images/topics .gif"  alt="building  blocks  of  web   design"                                      id="preview"  1>  
                                </div>  

                               创建一个样式表文件_layout . css ，把它放入 styles 文件夹。 

                               在 layout. css 文件里，我们对 id="slideshow"的 div 元素的尺寸做了如下设置: 

                               #slideshow  {  
                                   width:   100pXj  
                                   height :  100pXj  
                                   position :  relativej  

                               把 posítion 设置为 relative 很重要，因为我们想让子图片使用绝对位置。通过使用值 

                       relative，子元素的(0， 0)坐标将固定在 slideshow div 的左上角。 

                               把CSS over、flow 属性设置为 hidden，就能确保其中的内容会被裁剪: 

                               #slideshow  {  
                                   width:   100pXj  
                                   height:   100pXj  
                                   position:  relative;  
                                   overflow:  hidden;  

                               接下来，我们添加一个<link~标签，把 layout.css 样式表引入 list.html 文档: 

                               <! DOCTYPE       htm l>  
                               <html  lang="en">  
                               <head>  
                                   <meta  charset="utf-8"  1>  
                                   <tit1e>Web  Design</tit1e>  
                                   <link  rel="stylesheet"  href="styles/layout.css"  media="screen"   1>                                                                            ,  

                               </head>  
                               <body>  
                                   <hl>Web  Design</hl>  
                                   <p>These  are  the  things  you   should  know.</p>  
                                   <01   id="linklist ">  
                                      <1 i>  
                               <a   href="structure.htrn1">Structure</a>  
                                      </li>  
                                      <li>.  
                                         <a  href="presentation .htm1">Presentation</a>  
                                      </li>  
                                      <1i>  
                                         <a   href:"behavior.htm1">Behavior</a>  
                                      </1i>  
                                   </0 1>  
                                   U J 4 4 曲  ， 、 - " - ' 唱  u ·  n - 
                                             so     'A       LHnzo  
                                                 Hr               "'/  
                               -  ·  J  I  ·  V        M 2 J  p ε v n 忐 ， 、 
                                                   CZW    em  ws  
                                               =pa  
                           、  ，  、 
                                                                                                     唁           咽                                    α a 
                                                                                   41            iD                    LK     fT        JG  
                                                                                                                l                    lo  
                                                                                                        , 
                                                                                          1i- 
                                                       .               、 .      咱 ·                      -                                  『  -      .           唱 . 
                                                                                            &L      -1·- 
                                           - 
                                                                                                                                                                             , 
                                                                                        『               1                         -  p   0 俨         、        γ 
                                                                                                                                               OO  
                                                                                                           nH            p3                      nH  
                                                                                                             nvo    nu      nu  
                                                                                                                     FL  
                                      〈  v k n         、                  r                          E           '                                                   a      ， ，  、 
                                                                     nu     FD                     HM           o                w                                uv   W  
                                          m        FL                  nv       n5                      G                                                    nv  e          J  
                                                                   L 
                                                    Z                                        --                                                          =  
                                                                                                                                           3 
                                                       4                         -      0            品           4                           牛       A             4 
                                                              』         ­ ， 」                            品                               」                     &     」 
                                                                              - 
                                                                                 ­                                                 『 

                                     ， 』 
                                          ， 、 
                                          V 
                                    B Q 
                                    f 

                             H n  -  u n t 
                                  ,/,     >>                                                                           .  
                           、 ， 、 ， f m v  牛 n L  O y  i u 、 

                               现在，把 1 i st. html 文档加载到浏览器，就可以看到变化(图片已经被裁剪)。我们只能看到 

                      topics.gif 图片的一部分一一它的第一个 1 00 像素宽的部分，如图 1 0-9 所示。 

----------------------- Page 207-----------------------

                                  .  

                                                                                                          10.2      实用的动画                      189  

                                                           .      "  
                                                                                                  尝了.说'  .   偿法飞 
                                                                      驰b税单如何  兰挝 、 
                                       '860」 
                                                                                                    ..  
                                                                                                              @  
                                       舍' 恶梦' 在毒草 岱i钱-- -z                           '一 ~"M" 一 ?!番苦 
                                                    .... .. 帽鸭，蛐..._曲响曲回..，旷............. 曲"由d也.，回._.‘.-呻叫嗣同圃，、、 飞、4·凰N ".   ...)·而晴-闻自M'酌.....帽悼响.-- 二…阳'啕-命_.、.. 、-晶，_. 
                                      、电蜘咽屿-a回』-‘-飞.、陶肉-、局、周 

                                        WebDesign  

                                        11wse are dle th加gll you sbouJd 拍1OW. 

                                           1.  S险也创um 
                                           2. 白宫锦Dla也B 
                                           3‘ Bdwjor  

                                         Choose  
                                        a   topic  

                                                               • -. ,+"'                              < 
                                                                                                              -- 
                                      · 勘白毒       『ELtw       ,   咄障"~">-~ :t  ~  4』  1..7 二. _.  1  , ，忡{ ‘   //.  

                                                                     图 10-9 

       接下来要解决的问题是，让这个网页对用户的操作行为做出正确的响应。我们想在用户把鼠 

标指针悬停在某个链接上肘，把topics.gif 图片中与之对应的那个部分显示出来。这是一种行为 

上的变化:用 JavaScript 和DOM来实现再合适不过了。 

 10.2.4          JavaScript  

       我们计划用 moveElement 函数来移动 topics.gif 图片。根据用户正把鼠标指针悬停在哪个链 

接上，我们将这个图片向左或向右移动。 

       我们需要把调用moveElement 函数的行为，与链接清单里每个链接的 onmouseover、事件关联起 

来。 

       编写一个prepareSlideshow 函数来完成这项工作，下面是它的代码清单: 

        function  prepareSlideshow()   {  
        //确保浏览器支持DOM方法 
           if  (!document .getElementsByTagName)  return  false;  
           if (ldocument . getElementByld)  return  false;  
        //确保元素存在 
           if (!document .get ElementByld("linklist"))  return  false;  
           if (!document .get ElementByld("preview"))  return  false;  
        //为图片应用样式 
          var , preview  =  document .get ElementByld("preview");  
          preview.style.pos ition  = "absolute"j  
          preview.style . left  =   "opx";  
          preview .style .top  = . "opx" j  
       //取得列表中的所有链接 
          var  list =  document .get E1ementByld(" linklist")j  
          var  l inks  =  list.getElementsByTagName("a")j                                                                      .  

       //为 mouseover 事件添加动画效果 
          links[o ] .onmouseover  =  funct i on()  {  
             moveElement("previ ew"  ,- 100 ,O, 10);  

          links [l].onmouseover  =  funct ion()  {  
             moveElement("previ ew"         , -200 ,O, 10)j  

----------------------- Page 208-----------------------

    190      第 10 章 用 JavaScript 实现动画效果 

        links[2].onmouseover  =  function()   {  
          move Element (" preview" ,-300 ,0, 10);  

      首先， prepareS1ideshow 函数检查浏览器是否支持它用到的DOM方法: 

      if  (!document.getElementsByTagName)  return  false;  
      if  (!document .getElementByld)  return  false;  

      接着，检查 1 ink1ist 和 prev1ew 元素是否存在。别忘了， prev1ew 是 topics .gif 图片的 id 属 

性值: 

      if (!document .get ElementByld("linklist"))  return  false;  
      if (ldocument .get ElementByld("preview"))  return  false ;  

     此后，为 prev1ew 图片设定一个默认位置。我将把它的 sty1 e.1 eft 属性设置为 Opx，把它的 
styl e. top 属性也设置为 OpX: 
      var  preview  = document.get ElementByld("preview");  
      preview.style.position  ::;  "absolute";  
      preview.style.left  =  "0pX ";  
      preview.style.top  =  "opx";  

     请注意，这并不意味着topics.gif 图片将出现在浏览器窗口的左上角。它将出现在它的容器 

元素，也就是那个id 属性值是slideshow 的 div 元素的左上角。因为那个div 元素的 CSS position  

属性值是 relative:          如果把 position 属性值是 absolute 的元素 A 放入一个 position 属性值是 

relative 的元素B， B就成为A的容器元素，而A将在B 的显示区域里按absolute 方式进行摆放。 

因此， prev1ew 图片将出现在 slideshow 元素的左上角一一与这个 div 元素的左边界和上边界之间 

的距离都是Opx。 
                                                                                                          •  

     最后，把onmouseover 行为与链接清单里的各个链接关联起来。首先，把一个由包容在linklist 

元素里的所有 a 元素构成的节点集合赋值给变量 1 inks。第一个链接对应着 links[OJ ，第二个链 

接对应着 1 i nks[口，第三个链接对应着 1 i nks[2J:  

     var  list  ::;  document .get ElementByld("linklist");  
     var  links  = list.getElementsByTagName("a");  

     当用户把鼠标指针悬停在第一个链接上时， rnoveEl ement 函数将被调用执行。此时，它的 
el 凹entID 参数的值是 preview，            final_x 参数的值是-100 ，          fina1_y 参数的值是0 ，           i nterva 1  参数的 

值是 10 毫秒: 

      links[O].onmouseover  =  function()  {  
        moveElement("preview勺-100， 0， 10); 

     第二个链接应该有同样的行为一一除了 f1naLx参数的值变成了-200: 

     links[l] .onmouseover  ::;  function()   {  
       move Element("preview" , -200 ,0, 10);  

     第三个链接将把prev1sw 图片向左移动-300 像素: 

     links[2] .onmouseover '::;  function()   {  
       move Element("preview" ,-300 ,0, 10);  

----------------------- Page 209-----------------------

                                                                                                10 .2    实用的动画                   191  

       接下来，         用 addLoadEvent 函数词用 prepa广eSl ideshow 函数，这将使得后者在页面加载时得到 

执行并把onmouseover 行为绑定到那三个链接上. : 

       addLoadEvent(prepareSlideshow)j  

       把 prepareSlideshow 函数保存为 prepareSlideshow.js 文件并将其放到 scripts 文件夹里。把 

moveElement.js 和 addLoadEvent. js 文件也放到同一个文件夹中。 

       为了从 1 i st. html  文档里调用这三个脚本，还需要在这个文档的</body>标签之前添:                                                                     加一些 

<script>:标签: 

       <IOOCTYP E h主ml> 
       <htm l   lang="en">  
       <head>  
          <meta  charset="utf-8"  1>  
          <title>ωeb Design</title>  
          <link  re l= n  sty lesheet"  href= " sty les/ layout • css U   media= " screen "  1>  
       </head>  
       <body>  
          <h l >Web   Oesign</hl>  
          <p> These  are  the  things  you  should  know . </p>  
          <01   id="linklist">  
             <li>  
               <a   href:"structure .html">Structure</a>  
             </li>  
             <li>  
               <a   href::"presentation.html">Presentation</a>  
            </l i>  
            <li>  
               <a  href= "behavior .html">Behavior</a>  
            <Ili>  
          <101>  
          <div  id=" slideshow">  
            <img   sr c="images/topics .gif"  alt="building  blocks  of web   design"  id="preview"   1>  
          </div>  
          <script  sr c="scr i pts/ addLoadEvent .js "></script>  
          <scri pt  src="script s/move Element.js"></ script>  
          < scri pt-l src= n  scri pts/ prepareSlideshow . j s" > < 1 script>  
       </body>                                                                                                                              •  
       </html>  
                                                                                                     -   芒 
                                                                                … 
                                                                                          一 
                                                                               叫 
                                                                                                    4 
       把 1 i st. html 文档加载到一个Web 浏览器。把 
                                                                                           一 @  一 
                                                                                          一 
                                                                                         般         会 
                                                                              舍 
                                                                                                                                                ,  
                                                                                                                            ~给 毛-     .0  
鼠标指针悬停在清单里的某个链接上就可以看到 
                                                                                                     一 
                                                                                -         - 
                                                                               m        M 
                                                                                              伊 
动画效果，如图 10-10 所示。 

       根据鼠标指针正悬停在哪个链接上， 
                                                                             1丁记soa愿the thìngs you 命。uld. know. 
                                                                                                                                  •  
topics.gif 图片的不同部分将进入我们的视线。 
                                                                                ;:器翻姐 
       不过，事情好像有点不太对头: 如果把鼠标指                                                    3.  i曲且必也 

针在链接之间快速地来回移动， 动画效果将变得混 

乱起来。 moveElerænt 函数可能什么地方有问题。 

                                                                                                                                                 •  

                                                                                                                --司 
                                                                                                                 •  

                                                                                                    图 10-10 

                                          吨 

----------------------- Page 210-----------------------

                            192              第 10 章用JavaScript 实现d 动画效果 

                        10.2.5              变量作用域问题 

                                动画效果不正确的问题是由一个全局变量引起的。在把moveMessage 函数抽象化为moveElement 

                       函数的过程中，我们未对变量movement 做任何修改: 

                                 function  moveElement(eleméntID ,final_x , final_y, interval)  {  
                                    if  (!document.getE1ementByld)  return  fa1se;  
                                     if (!docu阳1t.getElementByld(e1emêntID)) return  fa1sej  

                                                                                                                                                            J  

                                    var  e1em  = document.getElementByld(elementID);  
                                    var  xpos  =  parselnt(elem.style .left);  
                                    var  ypos  = parselnt(e1em.style.top);  
                                    if  (xpos  ==  fina1二x &&  ypos  ==  fina1_y)   {  
                                        return  true;  
                                     1J44  
                                                                                                                                                                                  •  
                                                                          ， 
                                      正  ， ，             正  、 .       、 
                                                                 14  
                                                    、 ‘ ，           / 1 E d 
                                                               2u  
                                                nv           nH  
                                              nv r3                 X  
                                            x  
                                          a 
                                      1                  t 
                                         、 ‘               4              、 

                                        xpos++;                                                                                                                                        、 
                                    、 
                                                                                                                                                                                       •  
                                                                                                                                                                                        J  
                                1 · J r 

                                      ￡  t r    ·  4  F  L 、  、 d ，  r ，  ， t 、  、 d正 1 F 
                                                           -1·1·1  
                                                              、 
                              /  、 u  n 、  -  / · v v n  n / 、 
                                            XOVYOVJo  
                                                                    XYVJ  
                                                  s-S+S- 
                                                             nHnHnH  
                                  T  l r 飞   T  r      l 吨    牛 a 
                                                                                                                                            •  

                                        v n  俨 
                                        VAVJVJ  
                                                    .‘,  
                    l D  f e  ·  1' μ n 1  -  -a  E e  ' 、 - - ' t ￡ E u u V n 飞 5 ，  n n  a  g 牛 .. 4 1 -  d 「  l J E - 

                                                    ,  

                                      正 t 飞                   d 气 ， ， ， ‘ 、 、 

                                        v n 
                                                    .•  
                                                    ,  
                                    }  
                                    elem.style.left  =  xpos  +  "px";  
                                    elem.sty1e.top  =  ypos  +  "px"  
                                    var  rep阿ea挝t =   "moveElement('''+e1ementID+'' , ， "+f但in阳alL-x卅+γ'+fi扣naι1_y+旷."' ，JJ'"~'+吐in时te盯rv旧alμ+"γ)γ" ， 
                                    movement   =  setTimeout(repeat ,interval);  

                                这留下了一个隐患:每当用户把鼠标指针悬停在某个链接上，不管上一次调用是否已经把图 

                       片移动到位， moveElement 函数都会被再次调用并试图把这个图片移动到另一个地方去。于是，当 

                       用户在链接之间快速移动鼠标时， movement 变量就会像一条拔河绳那样来回变化，而moveElement 

                       函数就会试图把图片同时移动到两个不同的地方去。 

                                如果用户移动鼠标的速度够快，积累在 setTimeout 队列里的事件就会导致动画效果产生滞 

                      后。为了消除动画滞后的现象，可以用 clearTimeout 函数清除积累在setTimeout 队列里的事件: 
                                clearTimeout(movement);                                                                                                                                、 

                                可是，如果在还没有设置 movement 变量之前就执行这条语句，我们会收获一个错误。 

                                我不能使用局部变量: . 

                                var  movement   =  setTimeout(repeat ,interval);  

P  
- 

                                如果这样做， c 1 earTimeout 函数调用语句将无泣工作，因为局部变量movement 在clear、Timeout 

                       函数的上下文里不存在。 
•  

                                也就是说，既不能使用全局变量，也不能使用局部变量。我们需要一种介乎它们二者之间的 

                      东西，需要一个只与正在被移动的那个元素有关的变量。 

                                只与某个特定元素有关的变量是存在的。事实上，我们一直在使用它们。那就是"属性"。 

                               到目前为止，我们一直在使用由 DOM提供的属性，如 element.firstChild、                                                                                                          element.style， 

                                     也 

----------------------- Page 211-----------------------

                                                                                                                                                             10.2          实用的动画                                  193  

        等等。 JavaScr中t 允许我们为元素创建属性: 

                  element.property  ~νalue  

                  只要愿意，完全可以创建一个名为 foo 的属性并把它设置为"bar": 

                  element .foo              =  "bar"j  

                  这很像是在创建一个变量，但区别是这个变量专属于某个特定的元素。 

                  我们把变量movement 从一个全局变量改变为正在被移动的那个元素 (elem 元素)的属性。这 

        样一来，就可以测试它是否已经存在，并在它已经存在的情况下使用 clear、Timeout 函数了: 

                  function  moveElement(elementID ,final_x ,final_y, interval)  {  
                       if  (!document .getElementByld)  return false j  
                       if  ( !document .getElementByld(elementID))  return  falsej  
                      var  elem  =   document.getElementByld(el ementID)j  
                       if  (el em. movement )   {  
                           clear Timeout (elem .movement)j  
                       }  
                      var  xpos  =  parselnt(elem . styl e.left)j  
                      var  ypos  =  parselnt(elem . styl e .top);   J  

                       if  (xpos  ==  final_x  &&                     ypos  ==  final_y)   {  
                           return  truej  
                      、 
                       $ 
                       4 
                   在  、  .  ， 俨  、 ‘ ， ， ，               ，  ， .  、  、 、 鸣 『 
                                               PT  
                                                      、 
                                        飞 ，   ­  · 、 . i 
                                x                    2u    VA  
                                      pb          nH  
                                    o  
                                  ny  
                        T 

                          xpos++;  
                     ，  、 
F     T    r  O  T J 1  -  J c r  u t  r  n t 4  ι r  1 t  川 4 d r 1  1 4 、 r 
                                              r 
                                  nysnrsnrsssem  
          2  e  -  &  d   t  a   d  t   ， ， 、  1 
                                                          VA-VJUJUJee  
                               xOVFOVYO- 
                                                     aaa&Lm 
                                              T    nHnHnrTD·"  
                                                            ， 

                             飞                   1   A    J 
                                                        - 
                            n 
                           V 
      、  ，  .        ，  .  ，         . 
                           A        -O+0·+L+Lnv 
                            γ 

                      、 
                                                                                                                                                                                                          •  
                 4 4 J s    r                 r川 

                 o      e  l  ·  J          1 
                                              T 
                                、     、 
                             飞 
                                                 ，  、     ， 
                                                        - 
                    f  v   n 
                           VYVJeer 

                     ， 、 

                  1  -  J                            咱 
                                              rT1i+L 
                        T 
                                                     i 
                               B      J 
                            飞 
                                    o  = y      n  e X    J 
                                                        ---HV 
      m  m      m  y  n、             · 

         U  M  t a e J S 、                                                 "nu' 
                                                                                 "-3+e  
                              ' '  V  J V M                            A V y n 
                                                                   tdmm        vh"" 
                                                               DZO- 
                                                                       +nH 
                                                                                 3 - 
               a  4  1 i  a M  2 i  1 』  i 白 」 
                                            · 
                                                                         "& 
                                                                     +e 
                               -             ·e  
                                                                                                                                                                                  吨   ，  ， ， ‘  、 
                                                                            , 
                                                                         ，  ，                        + "  、  "           止 咱               俨       、 
                                                                                                           '2 rT  
                                   m m L + ·                F                       1         O  i  U T n         ， ，  、  .                   .                    & τ  · 牛 
                                              r                                                 + 
                                   』 由                                           』 声                                    气                 T  矗 ， 唱                               「 
                                                                                                                               VA               nH     J               nH    v·- 
                                                                                                                       n                                  +        +       e uv       +       . 
                                                                                       O    H  n                                                                                  i 
                                                                           tk             mep                    +               +        +       a  
                                                                                     ，                                                             -  1 
                                r- 
                                                           E                                                                                                            L 
                                              =                          LU                     LHH  
                                                                                                                        d                                                       a 
                                                               - 
                      V 
                                                                                                                       H  
                                                                」                      』 
                                                                                                                                      .,                       .                              .  
                                                                                  自 -                      P 
                                                               - 
                                                                                                                                                               ,                              ,  
                        唱                                       -                            ·             唱 
                                              t           L &                                    晶 
                                                               TE          &L             & 
                     』 白             M                         - 1               v n   2     · ·  τ   凹       ， 
                           e       o                    <          me O        v                                 · 
                                                                            ， 
                                              nH  
                        4                                                                                  4 
                                                    - 
                                                                                                 L 
                                                                                          L  
                                                                                                             J 
                                                    -              m           · 
                                     W                                      、          "           』 
                                                        d                                                 "      '  
                                       』                                             』 
                                                                               ·  

                 于是，不管 moveElement 函数正在移动的是哪个元素，该元素都将获得一个名为 moveπænt 的 

       属性。如果该元素在 moveElement 函数开始执行时已经有了一个 movement 属性，就应该用 

       clear寸imeout 函数对它进行复位。这样一来，即使因为用户快速移动鼠标指针而使得某个元素需 

       要向不同的方向移动，                                          实际执行的也只有一条 se盯imeout 函数调用语句。 

                 i青重新加载1 ist. html 文件。现在，在链接之间快速移动鼠标指针不再有任何问题。setTimeout 

       队列里不再有积累的事件，动画将随着鼠标指针在链接之间的移动而立刻改变方向。接下来，再 

       来看看我们还可以对动画效果做哪些改进。 

        10.2.6                 改进动画效果 

                 在元素到达由 f1na13 和 final_y 参数给出的目的地之前， moveEl ement 函数每次只把它移动 

----------------------- Page 212-----------------------

     194           第 10 章 用 JavaScript 实现动画效果 

一个像素 ( 1px) 的距离。移动效果很平滑，但移动速度未免有些慢。我们把动面的移动速度加 

 快一点儿。 

        仔细看看下面这些简单的代码，它们来自 moveElement.js 文件: 

           、 . ， ， ，           i τ  ， 、 、 ， 
           rT              FT  
         .                  .1. 
                               、       E J 
                                    VA  
                       J 
                v  0          nH  
         14-     nr r3  
                               a 
                       、 
                < 
                                 由   J 
                            ,  
                                         、 

            XPOS++j  

        变量xpos 是被移动元素的当前左位置，变量 fina 1 x 是这个元素的目的地的左位置。上面这 

 段代码的含义是:                       "如果变量 xpos 小于变量f1naLx，就给xpos 的值加 1 。"也就是说，不管那个 

元素与它的目的地距离多远，它每次只前进一个像素 (lpx) 。为了增加趣味性，我们来改变它。 

        如果那个元素与它的目的地距离较远，就让它每次前进一大步;如果那个元素与它的目的地 

距离较近，就让它每次前进一小步。 

        首先，我们需要算出元素与它的目的地之间的距离。如果xpos 小于 final_x，我们要知道它 

们差多少。只要用 final_x (目的地的左位置)减去xpos  (当前左位置)就可以知道答案: 

         dist  =  final_x  -  XpOS;  

        这个结果就是元素还需要行进的距离。我们决定让元素每次前进这个距离的十分之一。 

                   I                     ，  ， .  、  、 
                      rTny  
                     4 1 - 
         JUVA  
           --nV              1+  
                                              ,,,  
             中 
                                                 nu  
                                              · 4 
                         。 呵 
                                           CJ  
                         nHF=            nv  
                               X 
            44nu                      x· 
                                        nv         ..  
          J C L 
                 ==                -P=  
                                               品 
                 × 飞 
                                                   ,  
                               」  电 · 
                                    +L  
                      u  内     u A 
                                      · 
                                      '  

        这将把元素朝它的目的地移动十分之一的距离。选用十分之一的理由是为了计算方便z                                                                                                              如果 

你愿意，选用其他的值也没问题。 

        如果xpos 与科naLx 相差500 像素，变量dist 将等于 50                                                               xpos 的值将增加50。如果xpos 与 
                                                                                                        0 

nna1-x丰目差 100 像素， xpos 的值将增加 10。 

        不过，当 xpos 与 f1na13 之间的差距小于 10 的时候，问题来了:用这个差距除以 10 的结果 

将小于 1 ，而我们不可能把一个元素移动不到一个像素的距离。 

        这个问题可以用 Math 对象的cei l  方法来解决，它可以返回不小于dist 的值的一个整数。下 

面是ceil 方法的语法: 

        Math.ceil(number)  

        这将把浮点数 number 向"大于"方向舍入为与之最接近的整数。还有一个与此相对的 floor 

方法，它可以把任意浮点数向"小子"方向合入为与之最接近的整数。 round 属性将把任意浮点 

数含入为与之最接近的整数: 

        问ath.floor(number) 
        Math.round(number)  

        具体到moveElement 函数，我需要向"大于"方向进行合入。如果错误地选用了 floor 或 round 

方法，这个元素将永远也不会到达目的地: 

        dist  =问atch . ceil((final_x -                xpos)/l0);  
        xpos   =  xpos  +  distj  

        这就解决了 xpos 小于f1na13时的问题: 

•  

----------------------- Page 213-----------------------

                                   、 

                                                                                                                                                  •  

                                                                                                      10.2      实用的动画                       195  

  if  (xpos  < final_x)   {  
     dist  =  Math . ceil((final_x  -          XpOS)/10)j               .  

  如果xpos 大于 final_x，在计算距离时就应该用 xpos 减去nna13。把这个减怯结果除以 10 ， 

"大于"合入为与之最接近的整数，然后赋值给变量 dist。此时，我们必须用 xpos 减去dist 

             更接近它的目的地: 

  if  (xpos  > final_x)   {  
     dist  =  Math.ceil((xpos  -          final_x)/10)j  
    xpos   =  xpos   -    distj 、 

  同样的逻辑也适用于变量ypos 和 f1ndJ: 

 if (ypos  <  final_y)  {  
    dist  =  Math.ceil((final_y  -  ypOS)/10)j  
    ypos   =  ypos  +  distj  

 if (ypos  > final_y)   {  
    dist  =  Math.ceil((ypos  -           final_Y )/10)j  
    ypos   = ypos   -    distj  

 不要忘了在xpos 和ypos 之后声明白st: 

 var  xpos  =  parselnt(elem . style.left)j  
 var  ypos   =  parselnt(elem.style.top)j  
 var  dist  = Oj  

                                                                                                          、 

 下面是moveElement 函数在经过上述改进后的代码清单: 
                                                                                                                                                        .  
 function  moveElement(element1D ,final_x ,final_y, interval)  {  
    if (!document.getElementByld)  return  falsej  
    if (!document.getElementBy1d(eleme时1D)) return  falsej  
   var  elem  = document.getElementBy1d(elementID)j  
    if (el em .movement)         {  
       clearTimeout(elem .movement) j  
   }  
   var  xpos   =  parselnt(elem.style . left)j  
   var  ypos   =  parse1nt(elem.style.top)j  
   var  dist  =  Oj  
   if (xpos  ==   final_x  脱 ypos ==   final_y)  {  
      return  truej  

   i f   (xpos  < final_x)   {  
      dist  =  Math.ceil((final_x  -            XpOS)/lO)j  
      xpos  =  xpos  +  distj  

                                                                    、 

   }  
   if (xpos  > final_x)   {                                                                                                                              h  
      dist  =  Math.ceil((xpos  _  f inal_x)/lO)j  
      Xpos   =  xpos  _  distj  

                                                                                                                                                                         i!II!.  
   if  (ypos  < final_y)   {                                                                                                                                             审 
                                                                                                                                                                        窜' 
                                                                                                                                                                         毒品 
      dist  =  Math.ceil((final_y  '-  ypOS)/10);                                                                                                                        『萨 
      ypos  =  ypos  +  dist;  
   }  
   if  (ypos  > final_y)  {  
      dist  = Math.ceil((ypos  _  final_Y )/10)j  

                                                                                                                                                     .  

----------------------- Page 214-----------------------

,  

                                                                                       •  

     196       第 10 章用JavaScript 实现动画效果 

            ypos  = ypos  - dist j  
          }  
          elem .style . left  =  xpos  +  "PX"j  
          el em . styl e .top  =  ypos  +  "pX "j  
         var  r epeat  = ., move Element ('飞elementID+" , ，飞final-X+:~final-y+"J+intezval+")"; 
         el em.movement  =  setTimeout(repeat ,interval)j  

       把这些修改保存到 moveElement . js 文件。重新加载 l ist.html 就可以看到新的动画效果，如 

 图 10-11 所示。 

                              坠毁豆豆 

                               错? 命毒者 番事 命1 0 一一_ __':-!j 0 笔 。 

                               WebDesign  

                                                                              1  

                               τheseare役le伽mgsyoomo也Jd koo'W,  

                                  l. S缸瓦鲍 
                                  2.  Presentation  
                                  3. 脑聊 

                                                        图  10-11 

       现在，动画效果给人的感觉是更加平滑和迅速。当你第一次把鼠标指针悬停在某个链接上时， 

 图片将跳跃一大段距离。随着图片越来越接近最终目的地，它会"放慢"自己的脚步。 

       在(X)HTML、         CSS 和JavaScript 的共同努力下，预期的动画效果终于实现了。 一切都显得那 

 么完美，但凡事都有改进的余地，这一次也不例外。 

 10.2.7       添加安全检查 
                                                                                                                    •  

      moveElement 函数现在的表现确实非常好，但还有一件事让我不放心:                                                  这个函数的开头部分需 

 要一个假设: 

       var  xpos  = parselnt(el em.style .left);  
       var  ypos  = parsel nt(elem . st yle.top)j  

       看出来了吗?这里需要假设 el 创元素肯定有一个 le仕样式属性和一个 top 样式属性。我其 

 实应该先检查一下这是不是事实。 

       如果elem 元素的 l eft 和/或top 属性未被设置，我有以下几种选择。首先， 可以简单地就此 

 退出这个函数: 

       if  (!elem.style.left  II  !elem.style.t op)   {  

----------------------- Page 215-----------------------

                                                                                                                                          10.2         实用的动画                              197  

           如果JavaScript 没有读到这些属性，整个函数将静悄悄地结束运行而不是报告出错。 

           另一种选择是在 moveElement 函数里为 left 和 top 属性分别设置一个默认值:如果这两个属 

               被设置，我将把它们的默认值设置为OpX: 

           if  (Ielem.style.left)  {  
               elem.style.left  =  "0pX "j  

           if  (!elem.style.top)  {  
               elem.style.top  =  "Opx";                                                                                •  

                                                                                                                                                                                                                      、 

          下面是moveElement 函数现在的代码清单: 

           f un ction  moveElement(elementID， fin~l_x， final_y， interval)  {  
               if  (!document.getElementByld)  return  false;  
               if  (!document .getElementBy ld(elementID) )  return  falsej  
              var  elem  =  document .getElementByld(elementID)j  
              if  (elem .movement)   {  
                  clearTimeout(elem.movement);  
               }  
              i手 (!elem.style.left) {  
                  elem.style.left  =  "Opx勺 
               }  
              i手 (Ielem.style.top) {  
                  elem.style.top  =  "0pX";  
              }  
              var  XpOS         =  parselnt(ele肌style.left)j  
              var  ypos  =  parselnt(elem.style.top)j  
              var  dist  =  0;  
              if  (xpos  ==   final_x  &&   ypos   ==   final_y)  {  
                  return  true;  
               }  
              if (xpos  < final_x)   {  
                  dist  =  Math . ceil((final_x   -                    XpOS)/10);  
                  xpos  =  XpOS   +  dist;  

              if (xpos  > final_x)  {                                                                                  ,  
                  dist  =  Math.ceil((xpos  -                    fin al_x)/10);  
                  xpos  =  xpos   - 飞 dist; 
              、 
              b 
           、  .  ，  ， 

                                 T r     、  ‘ ， ，  ，  ， ， 、 r 
                 FT r 
                                         4 1 
                                      ·lLHS  
                              〈 
                    t  VJSo            nH      vy-- 
                          o  
                        ny&LCJ           ac+  
                            Ed--=  
                                                    唱 
              A 
                     k4·-nv  
                                                 T  F L 
                                             --lBG  
                  」            M   牛             t f 、 .    咆               ，  ，  . ‘ 、 ， ， ， ‘ 、 
                                                                                  ,,,  
                                                                                    υ n 
                                                                                   4· 
                                 、       」 白              『                  俨 
                                                         nH    J        VJ nM  
                                                                          nr             ..  
                                                           4 
             Y  V U         ' μ  川 n O  a  L              d                  3 
                                        ·              .•  
                                                牛 飞 
                                                                                   e  
                                               -l                                        ,  
                             J V                r d 、 L ' · 

              if  (ypos  > final_y)  {  
                  dist  =  Math.ceil((ypos  -                    final_y)/10);  
                 ypos  =  ypos   -          dist;  

              elem.style.left  =  xpos  +  "px"j  
             elem.style.top  =  ypO$  +  "px";  
             var  repeat  =  "moveElement( ' "+elementID+'"   , "+final_x+门"+final-y+"p"+intezval+")"; 
          }elem-movement  =  setTimeout(repeat ,interval);  

                                                                                                                                                                                                                               回回 

                                                                                                                                                                                                                              面 
         有了刚才所说的安全措施之后，就用不着再明确地设置 prev1ew 元素的出发点位置了。这意 

味着可以把prepareSlideshow 函数里的这两条语句删掉: 

          preview.style.left  =  "Opx";  
          preview . style.top  =  "opx ";  

----------------------- Page 216-----------------------

      198             第 10 章用JavaScript 实现，动画效果 

         既然提到了 prepareSlideshow 函数，就仔细看看它是不是还有地方需要改进。 

 10.2.8              生成 HTML 标记 

         1 ist. html 文档里包含一些只是为了能够用 JavaScript 代码实现动画效果而存在的标记: 

          <div  id="slideshow")  
              <img   src="images/topics.gif"  alt="building  blocks  of  web   design"  id="preview"   1>  
          </div>  

         如果用户没有启用 JavaScript 支持，以上内容就未免太多余了。这里的 div 和 1 附元素纯粹 

是为了动画效果才"塞"进来的。既然如此，与其把这些元素硬编码在文档里，不如用 JavaScript 

代码来生成它们。我们决定在prepareSlideshow.js 文件里做这些事情。 

         首先，创建div 元素: 
          var  slideshow  =  document.create Element ("div")j                                                                                            、 

                                                                                                                        •  
          slideshow . setAttribute(" id" , "slideshO\oJ ") j  

         接着，创建 1附元素: 

                                                                      u n ι  '  u  ， n " 、 
                                                                                      " 
                                                                          1 - - - 
                                    JorrYA  
                        、 .                     品                o  o  t t 
                                                            4EL'""nva  
                                                                  1ia-lv  
                                                                rEmuue  
                                        』 白 』 自 . · γ L F 、 · 』 白  a          F m m D F R 
                                        Chu-Dhu                                           - 
                                            mm+L&L+L                   es--w  
                                                         e""             nH'''"H"  
                                                       rc&L"          me20e  
                                                           a' 
γ  ·  ·  γ  · · γ  M  2 .  · v n M .  u n  f H n                            s 
           VP·D-ny  
                       v 
                    zeee                  HU 
                      ewww  
                           eeee  
               reee  
                                                                                       ， 
             a  p  a  p  J  C  A L  +  L H & = " L                 』        飞 
                                                                                          3·1  
                                                                                       J 
                                                   - 
                                                                                                                                                          •  
                                                                                             ， 、  、 
                                                                                              "rT  
                               AHAHAH                                                       FTO  
                                  品 
                                     、                    4 · ·  -  - b o  u n    d  t  v、 ， k n 
                                          HU       sa-- 
                                                                                                 ., 
                 、 
                vvv  
                                                . 
                                  L 
                                                                                  』 
                  .•.                 .•.                     .•  
                                           飞 / 飞                                L F d 
                                                                                      - 
                                                                                              J 
                        --- 
                                             "  "   、                           、                  u ι 。 』  、  -     、 
                                                              inuv4                   LK  
                            牛   牛 牛 、 . ‘ ， 、                                    u n             』 自    」  白       ' '  1 
                                                                                                 w              Ob     - 
                                                                                                            p3    nH  
                 、                           ρ 
                                          HUHU  
                              L & L  L              i                           4 
                            L 
                                                                                                             a  - 
                  E 
                                                                                                                       P  
                                         」  白 』 
                                                          ' 
                  • 

                                                                          飞 
                                              f 
                                                          "  
                                                    J 
                            牛 、 ， 牛 
                  •  
                                                                             · 
                 、 
                            L                       U                     J 
                                      4 
                                              飞 
            ·                                                               ' 
                  .•                                     '  
             · 

         把新创建的 1附元素放入新创建的 div 元素: 

          slideshow.app end Child(preview)j  

         最后，我们想让这些新创建的元素紧跟着出现在链接清单的后面。我们将使用来自本书第7 

章的 insertAfter 函数来完成这一步骤: 

          var  list =  document.get ElementByld("linklist")j  
          insertAfter(slideshow ,l i st)j  

         下面是最终完成的prepareSlideshω 函数的代码清单: 

          function  prepareSlideshow()   {                                                                                         •  
          //确保浏览器理解DOM方怯 
              if  (ldocument . getElementsByTagName)  return  falsej  
              if  (!document .getElementByld)  return  falsej  
          //确保元素存在 
              if  (!document.get ElementByld("linklist"))  return  falsej  
             var  slideshow  =  document.createElement("div")j  
              slideshow.setAttribute("id" ,"slideshow");  
             var  preview  =  document.create Element("img");  
             preview.setAttribute("src" ,"images/topics .gif")j  
             preview.setAttribute("alt" ,"building  blocks  of  web  design ") ;  
             preview .setAttribute("id" ,"preview");  
              slideshow.appendChild(preview);  
             var  list =  document. get Element Byld ("linklist") ;  
             insertAfter(slideshow ,list);  
          //取得列表中的所有链接 
             var  links  =  list.getElementsByTagName("a")j  
          //为 JOOUseover 事件添加动画效果 
             links[O ]. onmouseover  =  function()   {  
                 moveElement("preview" , - 100,O, 10)j  

----------------------- Page 217-----------------------

                                                                                                    10.2      实用的动画                    199  

            1inks[1].onmouseover  =  function()   {  
              move Element("preview" , -200,O, 10);  
            }  
            1inks[2].onmouseover  = function()   {  
              moveE1ement("preview"  , -300 ,O, 10);  
            }  

         addLoadEvent(prepareSlideshow);  

        <! DOCTYPE   htm l>  
       ' 〈的tml lang=" en ">  
        <head>                                                                                                                                .  
          <meta  charset="utf-8"   />  
          <tit1e>Web  Design</tit1e>  
          <link  rel="stylesheet"  href="styles/layout.css"  media="screen"   1>  
        </head>                                                                                                                      •  
        <body>  
          <hl>Web  Design</hl>  
          <p>These  are  the  things  you   shou1d  know.</p>  
          <01   id="linklist">  
             <li>  
                <a   href=" structure.html">Structure</a>  
             </li>                                                                                                                ,  

             <li>  
                <a   href="presentation.html">Presentatiort</a>                                                       ,  
             </li>  
             <li>  
                <a   href="behavior.html">Behavior</a>  
             </li>                                                                                                                        ‘  
          </01>  
          <script  src=" s'cripts/addloadEvent. js "></script>  
          <'s.cript  src=" scriptsl insertAfter • j s" >< I scripb  
          < script  src-.'_'  scripts Imove Element. j s" > < I script>  
          <script  src=~'scripts/prepareSlideshow.js"></script>  
        </body>  
       </htm 1>        . \  

                                                                                                                          ,  
       把 i nsertAfter、函数写入 insertAfter、                       JS 文件，并把它放入scripts 文件夹: 

        function  insertAfter(newElement ,targetElement)   {  
          var  parent  = targetElement.parentNode;  
          if (parent.lastChild  ==   targetE1ement)   {  
             parent:appendChi1d(newE1ement);  
          }  e1se  {  
             parent.insertBefore(newElement)targetEle阳lt. nextSib1ing) ;  
                                                                                                                                                   睡醒:! 

                       、 

       还需要对样式表文件 layout.css 做一些修改。因为我们刚才从prepareSl ídeshow.js 文件里删 

除了如下所示的一行代码: 

       preview.style.position  =  "abso1ute";  

       所以现在需要把以下样式声明添加到 layout.css 样式表里，这才是样式信息应该属于的地 

方: 

----------------------- Page 218-----------------------

                   200        第 10 章用JavaScript 实现动画效果 

                      #slideshow  {  
                        width:   100pXj  
                        height:   100pXj  
                        position:  relativej  
                        overflow:  hiddenj  
                      }  
                      #preview  {  
                        position:  absolute;                                                                      、 

                      现在，在Web 浏览器里刷新 1 i st. html 文档。从表面上看，功能还是那些功能，行为还是那 

                些行为。但经过上述改进之后，这份文档的结构层、表示层和行为层已经分离得更加彻底了。如 

                果在禁用了 JavaScript 支持功能的情况下浏览这份文档，动画图片将根本不会出现。 

                      我们用 JavaScript 实现的动画功能非常完善。如果启用了 JavaScript，这个页面就能根据用户 

                的操作动作通过动画效果向用户提供一些赏心悦目的视觉反馈z                                                   如果没有启用 JavaScript，动画 

                功能将按照我们安排的平稳退化保持静默，不影响用户的浏览体验。                                                                   、 

                      如果想、进一步加强链接清单和动画图片的视觉联系，可以通过修改 layout.css 文件去实现一 

                些更精彩的效果。比如说，可以把动画图片的显示位置从链接清单的下方挪到它的旁边。如果想 

                让动画部分更加突出的话，还可以给它加上一个边框。 

•                10.3       小结 

                     在本章里，我们首先对 "动画"进行了定义:随时间变化而改变某个元素在浏览器窗口里的 

                显示位置。通过结合使用 CSS-DOM和 JavaScript 的setTimeout 函数，很容易实现一个简单的动 

                阻。 

                     从技术上讲，实现动画效果并不困难，问题是在实践中应不应该使用动画。动画技术可以让 

                我们创建出很多种非常酷的效果，但那些四处移动的元素对用户有用或有帮助的场合却并不多。 

                不过，我们刚才创建的 JavaScript 动画却是一个例外。我们花了不少功夫才让它有了平滑的动画 

                效果和平稳退化，最终的结果证明我们付出的努力是非常值得的。我们现在有了一个通用性的函 

                数，它可以在确有必要创建动画效果时帮上大忙。 

                     下一章将介绍最新的HTM日，你将学会如何利用它的新属性。 

           、 

                                                                                         •  

                •  

     .  

                      •  

                                     •  

----------------------- Page 219-----------------------

                                          .  

           睡噩 
                              HTML5  

               ‘  

                                                    •  

     本书开始时介绍了 Ja，vaScript 的历史以及DOM的起源。今天， HTML5 的出现使得DOM、 

样式和行为之间的界限变得模糊了。因此，现在让我们来看看HTML5 到底有哪些新特性，看看 

未来的发展方向在哪里。 

 11.1     HTML5 简介 

     HTML5 是HTML语言当前及未来的新标准。 HTML规范从HTML4到XH白伍，再到Web 

Apps1札最后又回到HTh在L5，整个成长历程充满了艰辛和争议。 HTML5 问世背后的明争暗斗 

括像一部肥皂剧(这部戏中的一些情节至今还在延续)，不管怎样，结局还是圆满的。我们有理 

由为 HTML5 欢呼，因为多种技术统一的趋势日益明朗，它标志着下一代 Web 的帷幕正在缓缓 

拉开。 

     谈到 Web 设计，最准确的理解是把网页看成三个层: 

     (1) 结构层 

     (2) 样式层                                                                           '  

     (3) 行为层 

     这三个层分别对应不同的技术，分别是: 

     (1) 超文本标记语言 (HTML) 

     (2) 层叠样式表 (CSS) 

     (3) JavaScript 和文档对象模型 (DOM) 

     没错，你可以说还能再加一层，也就是浏览器的JavaScriptA凹，包括cookie 和window 等@。 

     但随着HTML5的到来，上面所说的结构层、样式层和行为层(以及浏览器中的JavaScript API)  

    ① 这里指的是 "浏览器对象模型"  (BOM ,  Broswer Object Model) 。  一一译者注 

----------------------- Page 220-----------------------

  202     第 11 章 HTh在L5 
                                              .  
                                                           、 

已经被整装到一个小集合中，不过也仅仅就是一个集合。 HTI\1L5 在这个集合中提供了几种旗鼓 

相当的技术，让我们可以按需取用或者调用。 

    例如，在结构层中，HTI\1L5 添加了新的标记元素，如<section>、 <article>、 <header>和<footer>..  

本书并不想在这里讨论这些新的标签，想知道所有新标记的读者请查看规范 (h句://www.w3. 

TR/html5/) 0  HTML5 还提供了更多交互及媒体元素，例如<canvas>、            <audio>和<video>。表单得到 

了加强，新增了颜色拾取器、数据选择器、滑动条和进度条。除此之外，你会发现其中很多新元 

素都还带有自己的JavaScript 和DOMAPI。 

    在行为层， HTh伍5 规定了 DOM 中每个新元素的交互方式，以及新的 API。例如，我们可 

以自定义<video>元素的控件，改变其播放方式， <form>元素则支持进度控制，而在<canvas>元素 

中，可以绘制各种图形和添加图片及其他对象。 

    不仅是标记和行为，表现层同样也得到了改进。 CSS3 的多个模块囊括了高级选择器、渐变、 

变换，还有动画。这些模块完全可以替代很多过去需要编写脚本才能实现的效果，比如动画和定 

位元素，这些效果在表现层中的位置举足轻重。虽然要实现高级动画效果仍然免不了要编写很多 

脚本，但很多简单的交互应该可以跟计时器或JavaScr中t 说拜拜了。 

    最后，新JavaScript API还包括其他很多模块，比如Geolocation、             Stor鸡飞 Dr叩-and-Drop、 
Socket 以及多线程等。 

    不管打算使用 HTML5 的什么新特性，请记住:你费尽心思编写的(X)HTML 代码仍然有效. 

为了与日TML5 兼容，你要做的只有一小点改变。想不想把绝大多数文档都"升级"到HTML5? 

好，就把文档类型声明改成<!OOCTYPE html>即可。 

    假如你想让自己的页面验证无误，当然还要把一些废弃的元素替换掉，如把<acronym>替换成 

<abbr>。不过要知道，验证只是一个工具，它有助于你成为一个好程序员，但它却不是我们、 

的理想。此外， <section>或<article>等新元素在一些老浏览器中也许不会表现得很好，但浏览器 

的版本越新，它们的表现就会越好。 

    第 8 章我们已经说过了， HTl\伍(包括 HT肌5)  与 XHTML 相比，对语法的要求要宽 

多。 HTML5 的目标是和已有的HTML及XHTML文裆全部兼容，无论怎么标记文档， 

什么编码规则，都由你说了算。想要关闭所有标签并且做到标记格式良好吗?请便。你懒得关 

所有标签，嫌那样做太麻烦了一一没问题。事实上，就连下面这个"缺斤短两"的HT如伍5 文档， 

也可以完美地通过验证(但愿不会吓着你) :  

    <!DOC1VPE  htm l>  
    <meta  charset=utf-8  />  
    <title>This  is  a  vålid  HTML5  document</title>  
    <p>Try  me   at  http://validator.w3.org/check</p>  

    抛开验证成功与否不谈，如果你想让自己的工作显得更专业，我猜你一定会自己加上<html>、 

<head>和<body>-一一无论浏览器会不会为你添加这些基本的结构化元素。 

    那么， HTl\在L5 离我们还有多远?现在我们就可以使用这些令人激动的新特性了吗?答案是z 

可以。不过有个前提一一尽可能提前检查浏览器对HTtv伍5 的支持情况。然而，检查浏览器是 

支持全部 HTML5 特性是不可能的，我们说过， HTh位5 现在是一个集合，不是一个全有或全 

----------------------- Page 221-----------------------

                                              •  

                                                                     11.2   来自朋友的忠告                 203  

的概念。因此，可以利用一些可靠的特性检测，或者使用本书通篇都在强调的渐进增强机制。 

 11.2      来自朋友的忠告 

     如果你今天就想用 HTM口，那太好了，赶紧吧!在作出决定之后，我想向你推荐一个工具: 

Modemizr<D  

     Modemizr  (h句://www.modemizr.coml) 是一个开源的JavaScript 库，利用它的富特性检测功能， 

可以对HT~在L5 文档进行更好的控制。 Model1Úzr 不会给你添加浏览器不支持的特性，比如，在IE6 

中就没有办法使用本地存储。 Modemizr 能做的是为你提供一些不同的 CSS 类名以及特性检测 

 (feature-detection)  属性。要想现在使用HTML5，                 Modemizr是必不可少的，它的用途也不止于此。 

     在文档中嵌入Modemizr 之后，它会随着页面加载变一些小戏法。 

     首先，它会修改<htm怜的 class 属性，基于可用的 Hη在L5 特性添加额外的类名。要使用 
                                                                                                   r  
Modemizr 编写文档，通常都要给<html>元素添加一个no-js 类: 

     <html  class="no-js")  

     利用这个类，可以在浏览器不支持JavaScript 的情况下应用 CSS 样式。 

       style properties  

     然后， Modemizr 会检测浏览器可能支持的各种特性，并相应地添加类名。如果浏览器支持 

某些特性，经它修改后的类名大致如下所示: 

     <html  class= "js  canvas  canvastext  geolocation  crosswindowmessaging  websqldatabase  indexeddb  
     hashchange  historymanagement  draganddrop  websockets  rgba  hsla  multiplebgs  backgroundsize  
     borderimage  borderradius  boxshadow  opacity  cssanimations  csscolumns  cssgradients  
     cssreflections  csstransforms  csstransforms3d  csstransitions  video  audio  localstorage  
     sessionstorage webworkers  àpplicationcache  svg  smil  svgclippaths  fontface ")  

     如果浏览器不支持某些特性，经它修改后的类名应该如下所示: 

     <html  class="js  no-canvas  no- ζanvastext no -geolocation  no -crosswindowmessaging  no- 
     websqldatabase  no-indexeddb  no -hashchange  no-historymanagement  no-draganddrop  no -websockets  
     no -rgba  no-hsla  no-multiplebgs  no-ba ckgroundsize  no-borderimage  no-borderradius  no-boxshadow  
     no-opacity  no-cssanimations  no-csscolumns  no-cssgradient s  no -cssreflections  no-csstransforms  
     no-csstrans f orms3d  no-csstransitions  no-video  no-audio  no-localstorage  no-sessionstorage  no- 
     webworkers  no -applicationcache  no - svg  no-smil  no-svgclippaths  no-fontface")  

     当然，    实际情况是浏览器可能会支持部分特性，而不支持另一些特性。这时候，类名中就会 

阅或出现 feature 和 no-feature。 

     根据这些类名，可以在CSS 中定义相应的增强和退化版本，改善用户体验: 

     .multiplebgs  article  p {  
       /*为支持多背最浏览器编写的样式*/ 

     .no-multiplebgs  article  p  {                                                      •  
     }/幸为不支持多背景的浏览器编写的后备样式*/ 

    ① 读者也可以从GitHub '      (https:llgithub.comIModemizrlModernizr) 下载Modemizr。一一译者注 

----------------------- Page 222-----------------------

  204    第 11 幸 HTML5 

    类似地， Modernizr 库也提供了 JavaScript 特性检测对象，可以在DOM脚本中直接使用: 

    if  (  !Modernizr.inputtypes .date  )  {  
      /牢不支持本地数据，使用自定义的数据选择脚本*/ 
      createDatepicker(document .getElementByld('birthday'))j  

    Modemizr 还可以帮一些老旧的浏览器处理<section>和<article>这样的新元素。有的读者可 

能还不知道，其实你可以在大多数浏览器中创建类似<fo创立样的元素，然后再为该元素应用样 

式一一只要你不在乎验证结果就无所谓。对于这些浏览器来说，新的HTML5 元素(如<section>) 

也照样可以拿来就用。为使用这些新元素，你要傲的就是为它们指定一些基本的样式，以便浏览 

器可以把它们当做块元素来呈现: 

    articleJ  asideJ  footer , headerJ  hgroup , navJ  section  {  
      display:  blockj  

    唯一的特例就是 E。要在臣中添加未知元素，必须先使用类似下面的 JavaScript 代码来创 

建该元素: 

    document.createEler陀nt ( , article ' ) j  

    Modemizr 可以帮我们来做这件事:但是，这并不意味着你就可以放心地使用<video>元素嵌 

入视频了。 Modernizr 不会为我们添加底层的 JavaScript 及DOM API，或者与这些元素相关的其 

他特性。 

    使用 ModernizT 非常简单，从h句:/Iwww.modemizr.coml下载它，将在文档的<head;:-中添加该 

脚本: 

    <script  src="modernizr- 1. s. mi n.j s"></script>  

    一定要把这个脚本放在<hea命元素中。虽然这与第 5 章建议的不一致，但这样做有特殊的原 

因。把Modernizr放在文裆开头，可以在加载其他标记之前先加载它，以便它在文档呈现之前能 

够创建好新的 HTML5 元素。要是把它放到了文档的末尾，那么等不到 Modernizr 发挥作用，浏 

览器就已经开始呈现文档并应用样式了。 

11.3    几个示例 

    为了让读者朋友尝尝鲜，下面我们就介绍一些有关 Canvas、视频/音频以及表单的例子，看 

一看HT~在L5 都提供了什么API。要想试验以下的示例，需要下列浏览器。 

    口 苹果Safari 5+  

    口谷歌Chrome 6+  

    口 Mozilla Firefox 3.6+  

    口Opera 10.6+  

    口微软IE 9+ 

----------------------- Page 223-----------------------

                                                                                         11.3    几个示例              205  

 11 .3.1      Canvas  

       每个浏览器都可以显示静态图片。通过GIF 可以实现一些动画，或者使用 CSS 加JavaScript 

 也能变化一些样式，但仅此而已。要想与静态图片交互可就难上加难了。 HT如1L5 的<canvas>元素 

 让这一切成为了历史，通过它可以动态创建和操作图形图像。 

       在网页中支起一块"画布" (canvas) 很简单: 

       <canvas  id="draw- in-me"   width="120"    height="40 ">  
         <p> Powered  By   HTML5  canvas</p>  
       </canvas>  

      在这张"画布"上作画嘛，可就是另外一回事了。要了解详细的绘画方法，请参考<canvas> 

 元素的规范 ( http ://www. whatwg.org/specs/web-appsl current响rklmultipage/the-canv创-element. 

 h时)。不过从本质上来讲， <canvas>涉及的数学及定位的概念与 Adobe lllustrator 等基于矢量的 

 图形软件或者基于矢量的编程语言没有太大的差别。 

 注意如果读者使用这lliustrator，可以试试使用Ai->Canv;部插件(h句:/1四i也肌∞mllabs/ai2ωnvas/) ,  

          虽然作为 u所见即所得"的编辑器，免不了会在输出中生成一些冗余的东西，但通过手 

          工编辑还是能得到最佳效果的。 

      下面这个.例子利用<canvas>画一个圆角小黑盒子，带有2 像素宽的白色描边效果。 

       function  draw()   {  
         var  canvas  =  document .getElementByld('draw- in-me');  
         if  (canvas .getContext)   {  
           var  ctx  =  canvas .getCont ext('2d');  
           ct x .beginPath()j  
           ctx .moveTo(120 . 0 , 32.0) ;  
           ctx.bezierCurveTo(120~0，  36.4,  116.4,  40 .0 ,  112. 0,  40 . 0);  
           ctx.lineTo(8.0 ,  40.0);  
     (     ctx .bezierCurveTo(3.6 ,  40.0 ,  0 .0 ,  36 .4 ,  0.0 ,  32.0);  
           ctx . l ineTo(O . O,  8.0);  
           ctx .bezierCurveTo(O .o ,  3.6 ,  3.6,  0 .0 ,  8.0 ,  0 . 0);  
           ctx . lineTo(112.0 , 0 .0);  
           ctx .bezierCurveTo(116.4 ,  0.0 ,  120. 0 ,  3.6 ,  120.0,  8 . 0);  
           ctx . lineTo(120.0 ,  32.0);  
           ctx . closePath();  
           ctx. fill () ;  
           ctx . lineWidth  =  2.0;  
           ctx . strokeStyle  =  "rgb(255 ,  255 ,  255)"  
           ctx.stroke() ;  

                                                                                                                    •  

      window . onload  =  draw;  

      在这个例子中，变量 ctx 引用的是画布的绘图空间 (context) 。所谓绘图空间，在这里就是 

一个平面二维的绘图表丽，其原点(0， 0)位于<canvas>的左上角。在这个绘图表面的坐标系里，                                                                      越 

往右×的值越大，右往下y 的值越大。通过在绘图空间中指定坐标点，可以绘制出各种二维的形 

状和线条。在绘制线条时，还可以添加不同的填充及描边样式。 

                                                                 国._ 

----------------------- Page 224-----------------------

          206        第 11 幸 Hl孔包5 

             图 11-1 是在αrome 中显示的结果: 

•  

                                                                                                                       .  
                                                              图 11-1 

             当然，这个例子还很简陋。例子中的<canvas>元素使用了与其他2D 绘图库相似的 API。这里 

       使用了几个点和曲线从一个点到另一个点创建并绘制出了一条路径，但<canvas>可不仅仅能够用 

       来绘制矢量路径;还可以通过它来显示和操作位图图像。 

             比如说，我们可以使用<canvas>对象在浏览器中把一幅彩色图片变成灰度图片。然后?当用 

       户的鼠标悬停到图片上面时， 再把它切换回原始的彩色图片。 

             先创建一个HTML文件，命名为 grayscale. html ，其中有一幅图像，与脚本位于同一个域中。 

       这个页面里也使用了 Modemizr: 

             < ! OOCTYPE   htm1>  
             <html  lang:"en">  
             <head>  
             <meta  charset="utf-8 "  1>  
                <titl e>Grayscale Canvas  Example</title>  
                <script  src="scripts/mo dernizr-l .6.min .js"></scr ipt>  
             </head>  
             <body >  
             <img  src= "images/avatar.png"  id :"avat ar "  title:::; "Jeffrey  Sambells"  alt="My  Avat ar" l>  
             <script  src::"scripts/grayscal e .js"></scripb  
             </body>  
             </htm l>  

             再创建一个graysca 1 e. js 文件，并在其中添加如下脚本: 

             f unction  convertToGS(img)   {  

               //如果浏览器不支持<canvas>就星回 
               if (!Modernizr . canvas)  returnj  

----------------------- Page 225-----------------------

                                                                                                  11.3     几个示例                207  

         //存储原始的彩色版 
         img.color  =  img.srcj  

         //创建灰度版 
         img .grayscale  =  createGSCanvas( i mg)j  

         //在IOOl将四ver/out 事件发生时切换图片 

         img.onmouseover   =  functionO   {  
            this . src  = this.color;  
          }  
         img.onmouseout  =  function()   {  
            this.src  = this.grayscalej  
          }  

         img .onmouseout();  

       function  createGSCanvas(img)   {  

         var  canvas= 
                        document.create Element(" canvas") j  
         canvas .width=  img.width;                                                                                                               飞 
         canvas . height=img.heightj  
                                                                                                                                                   •  

    •    var  ctx=canvas.getContext("2d ")j  
         ctx.drawl mage(img ,o,o)j  

         //注意:     getImageOata 只能操作与脚本位于同一个域中的图片 
         var  c  =  ctx.getlmageData(o ,  0 ,  img .width ,  img .height);  
         for  (i=o;  i<c .height;   i+t)  {  
            for  (j=O;  j<c.widthj  j++)      {  
             var  x  =  (i*4)  *  c .width  +  (j*4)j  
              var  r  =  c.data[x]j  
              var  g  = c .data[X+l]j  
              var  b  =  c.data[x+2];  
              c.data[x]  = c .data[X+l]  = c . data[x+2]  =  (r+g+b)/3;  

         }  

       \  ctx. putlmageDat a(c ,O,o,O,o,  c .width ,  c .height);  

         return  canvas.toDataURL()j  

      }  

      //添加 load 事件。如果有其他脚本，可以使用 a创LoadEvent 函数 
      window.onload  =  tun ction()   1  
         convertToGS(document .getElementByld(' avatar'))j  
       }  

                                     、          惜~~WPI'-~IIIi"III.'  I  .....=, "" ," _",11""; '"'  _   .00-, .  "..",,_,,""" "-.....一 

注意在从图片之类的文件中读取数据时，                                            不同浏览器有不同的安全考虑。                                 为了保证这个例子 

          正常运行， 必须在同一个站点中提供图片和文挡。而且，就算在本地硬盘中使用 f41e 协 

          议加载这个页面，例子也无法运行。                                     虽然可以修改浏览器的安全设置，但我还是建议把 

          这个例子的相关文件都上传到 Web 服务器中。 

                                                                                  •  

      页面加载后，脚本通过在convertToGS 函数中应用mouseover 和mouseout 事件处理函数来修改 

----------------------- Page 226-----------------------

                                      208             第 1 1 幸盯ML5 

                                  avatar.png 图片。 

                                           img.color  =  img .src;  
                                           img.grayscale  = createGSCanvas(img);  
                                           img.onmouseover  =  function()   {  
                                              this.src=this .color;  

                                           img .onmouseout  = function()   {  
                                              this . src=this .grayscale;  

                                          上述事件处理函数会切换保存在图片的 src 属性中的原始彩色版，以及 createGSCanvas 函数 

                                  创建的灰度版。 

                                          为了在cr、eateGSCanvas 函数中把彩色图片转换为灰度图片，我们创建了一个新的canvas 元素， 

                                  然后在其绘图环境中绘制了彩色图片: 

                                           var  canvas=document.create Element("canvas");  
                                                                                                                                                                      .  
                                           canvas .width=  img.width ;                                                                       •  
                                           canvas.height=img.height;  

                                           var  ctx=canvas .getContext("2d")j  
                                           ctx.drawlmage(img ,o,o) ;  
        .  
                                          接下来，再取得原始的图像数据，循环遍历其中的每一个像素，将每个彩色像素的红、绿、 

                                  蓝彩色成分求平均值，得到对应彩色值的灰度值。 
                                                                             川  叫  的             仙 伊  钊 削 
                                                   据  d  =  r  、 d + 仁 川  { 斗 如 {  u n 。  图 环  协 w此         h  %  阱 : 
的       剩  }源 呐  }   c  怕 v   v  ' 就 v  h  k  -  :卜 v 问 w 川  川  川叫  ' 门 : - 飞 问 =  ;  K/ 问  但 - 几 放 w  M  i V仲 ， 严 ·  川 仲 h 协 ω 由 m L v 飞 h ， 串 m  w y U 斗  U 问  J 吨  以- · 4 ，  J 牛 、 h    F  

                        J   h   u   J   z  r  b  r g  r z x 
                                                                                     L 
                                            L   c    t  t  t       j       创 叫 

                                                                            ω 
                                                       阳        灰  应 A  L 由  协           回  画 叫  斗 
                                                                                    4  4 
                                                                                                         M U 
                                                                                                                                                                                                    ,  
                                                                                                                                                                 •  

                                  图   片               J T  作         响 d 把        酣 明 阳 阳   再          至        布      4 P M         境    由 '   并   返    因   原   始   的   图   像   数   据   作    为   新   灰   度 

                                           ctx.putlmageData(c,  0 ,  0 ,  0 ,  0 ,  c.width ,  c .height);  
                                          return  canvas.toDataURL()j  

                                          这样，即使我们只提供彩色版图片，也可以在该图像的彩色版与灰皮版之间切换了。 

                                          为什么使用<canvas>而不是多张图片呢?只有在基于用户操作实现交互时，使用<canvas>的优 

                                  势才会显现出来。以前，要想在浏览器中实现高级的图片交互功能，只能依靠Flash 或Silverlight 

                                  这样的插件。今天，有了<canvas>，就可以在浏览器窗口绘制任何对象、任何像素了。当然，还 

                                  能通过它来操作图像，或者创建令人眼花缭乱的界面元素。 可是，就跟使用 Flash 一样，也绝对 

            •  
           •  
                                  不能滥用<canvas>。换句话说，即使你真的可以在一个<canvas>元素里创建一个站点，也不表示你 

            告 

            ,  

                                  应该那样做。 

                                          此外，你还得考虑到那些使用屏幕阅读器或其他辅助浏览技术的用户。 HTML5 的这个 

                                  <canvas>元素跟 Flash 一样，都不具备可访问性，会给那些用户带来同样的烦恼。记住，不要被 

                                  先进技术的光环左右了你的心智，必要时还要留一手。 

----------------------- Page 227-----------------------

                                                                          •  

                                                                       11.3   几个示例           209  

 11.3.2    音频和视频 

     谈到HTML5 的新元素，人们议论最多的恐怕就要数<video>和它的亲兄弟<audio>了。这两个 

元素让HTML具有了原生视频和音频的能力，但也带来了一些不好处理的问题。 

     在 HTML5 之前，向网页中嵌入视频需要用到一大堆重复的<object>和<例bed>元素，其中一 

些在HTMIA 中甚至都无必通过有效性验证。<object>可以引用各种影片播放器，例如QuickTime、 

ReaIPlayer 或Flash，并使用这些插件在浏览器中播放影片。举个例子，以下就是嵌入 Flash影片 

的代码(想必你一定觉得很眼熟) :  

     <object  classid="clsid:d27cdb6e-ae6d- llcf-96b8- 
     444553540000"  width="100"  height="100"  
     codebase="http: //fpdownload .adobe .com/pub/shockwave/cabS/flash/swflash .cab#version=9 ,0,0,0")  
     <param  name="movie"  value=" mov iename.swf")  
     <param  name=" l "  value="true")  
                  p  ay 
     <param name="loop"  value="true")  
     <param  name=" quality"  value; lI high")  
     <embed   src="moviename.swf"  width="100"  height;;;; 1I 100"  
     play="true"   loop= "true"   quality="high "  
     pluginspage="  http://get . adobe.com/flashplayer''  1>  
     <Iobject>  

     除了这些代码之外，第三方插件也有各自的问题和局限性。要想让嵌入的代码发挥作用，浏 

览器中必须安装相应的插件，而且版本还要合适。插件是在一个封闭的环境中运行的，通过脚本 

无法修改或者操作视频内容。如果插件没有提供API，插件运行环境无异于文档中的一个独立王 

国。 

     HT1伍5 的<video>元素为在文档'中嵌入影片以及与影片交互定义了一种标准方式，同时也把 

嵌入操作简化成了一个标签: 

     <video  src="movie .mp4 ")  
       <!--不支持原生视频时的替代内容 --) 
       <a   href;;;;" mov i e .mp4")Download  movie.mp4</a)  
     </video)                                                                                     •  

     这里我们嵌入了一段mp4 视频，并给出了浏览器不支持<video>时的替代下载链接。 

     类似地， <audio>元素的用法也差不多: 

     <audio  src="sound.ogg")  
       <! --不支持音频时的替代内容:--) 
       <a   href="sound.ogg")Download  sound.ogg</a)  
     </audio)  

     简单、朴素，还很吸引人，是吗?除非它总能如此…… 

     1 .也有混乱的时候 

     让人失望的是， HTM口的<video>和<audio>元素也有那么点小问题。  这两个标签都很简单， 

也都有相应的属性用于显示播放控件或更改播放设置，但是它并未说明支持哪些视频格式。 

     要搞清楚有关视频格式的问题，必须从什么是视频说起。 

     像movie . mp4 这样的视频，其实是一个包含很多东西的容器。扩展名 mp4 表示视频是使用基 

于苹果QuickTime 技术的MPEG4打包而成的。这个容器规定了不同的音频和视频轨道在文件中 

的位置，以及其他与回放相关的特性。其他容器还有m4v (另一个MPEG4扩展名)、 avi  (Audio  

----------------------- Page 228-----------------------

   210     第 11 幸 HTML5 

Vìdeo Interleave ，音频视频交错)、 flv  (Flash Video) ，等等。 

     在每个影片容器中，音频和视频轨道都使用不同的编解码器来编码。编解码器决定了浏览器 

在播放时应该如何解码音频和视频。编解码器的核心就是一个算在去，用于压缩和存储视频，以减 

少原始文件的大小，同时可能会也可能不会损失品质。视频编解码器也有很多种，其中有代表性 

的有三个:      H.264、 Theora 和VP8。  同样，音频文件也有相应的编解码器，常见的有mp3 (MPEG-l  
              )、  ωc (Advanced Audio Coding) 和 ogg (Ogg Vorbis) 。 
Audio Layer 3  

                                                                             •  

 注意 H.264 编解码器存在一个非技术问题，即使用许可。                            使用 H.264 的解码器和编码器都要付 

        费，分发经编码许可制作的 H.264 内容不用付费，但要对其解码则必须得到许可。换句 

       话说，在你自己的网站上发布 H. 262 影片不用交钱，但需妥对其解码的浏览器开发商以 

       及开发解码软件的软件开发商都妥得到许可才行。                            为了解决视频格式的许可问题\'谷歌 

       把VP8 编解码器(在WebM容器中)的专利权发布到了公共域，并承诺永不收回。他们 

       的愿望是让浏览器开发商在实现 WebMIVP81飞Torbis 时不受许可限制，并向所有人提供一 

       种公共的格式。 

     这些不同的容器格式以及编解码器给我们带来了什么问题呢?问题就是没有一款浏览器支 

持所有容器和编解码器，因此我们必须提供多种后备格式。Firefox 的某些版本、Chrome 以及Opera 

支持TheoraNorbis/O钮， IE9、       Safari、 Chrome、 Mobile Safari 以及Android 支持H.264/ACC瓜。4， 

而IE9、   Firefox、 Chrome还有Opera 支持WebM (VP8 和Vorbis 的另一种容器格式)。 

     如此混乱的结果意味着没有哪些格式可以跨浏览器。但愿这个问题在不久的将来能够解决， 

否则视频这一块会让整个H岱也5 黯然失色。眼下看来，为了保证每个人都能看到视频，必须制 

作多种格式的视频并在<vi deo>元素中包含多个来源: 

     <video  id="movie"  preload  controls>  
       <source  src="movie.mp4"  1>  
       <source  src=" movie.webm"  
        type='video/webmj  codecs="vp8 , vorbis'"  1>  
       <source  src="movie.ogv"  
                                            rr  
        type=' videologgj  codecs ;;;  "theora,  vorbis . 1>  
       <p>Download  movie  as                      •  
        <a   href", "movie .mp4">MP4</a> ,  
        <a   href="movie.webm ">WebM</a >,  
        or  <a   href="movie.ogv">Ogg</a>.</p>  
       </video>  

     为了确保HTML5 的最大兼容性，至少要包含下列三个版本: 

     口 基于H.264 和AAC 的MP4 

     口 WebM (VP8+Vorbis)  

     口基于Theora视频和记rbis 音频的Ogg 文件 

    这个例子中没有给出可替代的插件版。为了确保最大程度地兼容那些不支持H刊也5 的浏览 

器， 一般还应该准备一个 Flash 或QuickTime 插件版视频。但在这里，为鼓励用户升级到较为先 

进的浏览器，我提供了直接下裁不同格式文件的链接。 

----------------------- Page 229-----------------------

                                              11.3  几个示例    211  

 注意 不同的视，频格式的排列次序也是一个问题。把 MP4 放在第一位，是为了让保证 iPad、 

     iPhone 及 iPod Touch 等运行 iOS 的设各能够顺利读取视烦。  因为 iOS 4 之前版本中的 

     Mobile Safari 只能解析一个<video>元素， 故而把针对 iOS 的格式才之在了最前面。 

   总之，  这些问题让HTML5 视频和音频变得有点乱，一定程度上影响了它的吸引力。想想要 

制作同一视频的多个版本，并且要保存三个甚至更多个文件，有人不禁会问:既然最后还是要提 

供Flash 版本，那为什么不直接就提供一个Flash 影片算了?答案是向前兼容，提供较新的<video> 

元素，可以在支持HTML5 的浏览器中对视频内容进行更多控制。 

   对HTML5 视频?可以(或将来可以) 应用 CSS 属性以修改视频的外观、 大小及形状，可以 

添加字幕和歌词等信息，还可以组合视频和画布来覆盖内容。甚至可以把视频插入到<canvas>对 

象中 ，像前面处理灰度图片一样，通过分析图像来检测视频运动。 

   下面通过一个例子来说明创deo>元素的API，        看看怎样定制视频控件，怎样创建简单的播放 

按钮。 

   2. 自定义控件 

   浏览器在显示<video>元素时， 会为其添加一些与浏览器样式统一的标准播放控件。要想自定 

义这些控件的外观，或者添加新的控件，可以通过一些DOM属性来实现，主要包括: 

   口 currentTime，返回当前播放的位置，以衫、表示s 

   口 duration ，返回媒体的总时长，以秒表示，对于流媒体返回无穷大; 

   口 paused，表示媒体是否处于暂停状态。 

   此外，还有一些与特定媒体相关的事件，可以用来触发你的脚本。主要事件有: 

   口 play，在媒体播放开始时发生; 

   o  pause，在媒体暂停时发生; 
   o  1 oadeddata ，在媒体可以从当前播放位置开始播放时发生g 

   口 ended，在媒体已播放完成而停止时发生。 

   使用这些及其他属性和事件，可以轻松地创建自定义的视频控件，                实现对视频的各种控制。 

从暂停和播放按钮到滑动条(进度条)，都没有问题。 

   不管创建什么控件，都别忘了在<video>元素中 

添加control 属性: 

   <video  sTc="movíe . ogv"  control>  

   这行代码会呈现出一个类似 Chrome 浏览器中 

所示的常见的播放控制界面，如图 11-2 所示， 但其 

中的控件可以通过脚本来移走。 

   下面就运用我们掌握的 DOM脚本技能，        来创 

建一些简单的视频控件。 
                                               图  11-2 

----------------------- Page 230-----------------------

   212         第 11 章 HTML5 

 注意 读者如果需要示例文件，可以从h句://www企iendsofed.coml中本书页面下载派代码。 

一 

      第一步先创建一个简单的HTML页面，命名为movie.html 。在其中添加一个<video>元素，并 

按照前面的介绍指定多种视频格式。此外，页面中还要包含player.css 样式表和 P1 ayer. js 脚本: 

      < ! DOCTYPE  htm l>  
      <html  lang=" en ">  
      <head>  
      <meta  charset="utf-8"  1>  
         <title>My  Video</title>  
         <link  rel=" stylesheet"  href=" styles/player.css"  1>  
      </head>  
      <body>  

      <div  class="video-旧apper"> 
        <video  id:::"movie"  controls>  
           <source  src=lmov ie.mp4 "  1>                                                                       、. 
           <source  src="   movie.webm"  
              type='video/webm;  codecs="vp8,  vorbis"'   1>  
           <source  src:::"movie.ogv  
              type:::'vide%gg;  codecs="theora)  vorbis" ,  />  
           <p>Download  movie  as  
              <a   href:::"movie.mp4">MP4</a>)  
              <a   href:::"movie.webm">ωebM</a> ，  
              or  <a   href="movie.ogv">Ogg</a>.</p>  
         </video>  
      </div>  

         <script  src:::"scripts/player.js"></script>  
      </body>  
      </html>  

      在 player.js 文件中，我们要修改页面中的所有<video>元素，删除其内置控件并添加自定义 

的 Play 按钮。把下面两个完整的函数添加到 player.js 文件中: 

      function  createVideoControls()  {  
         var  vids  :::  document.get ElementsByTagName('video');  
         于or (var  i  =  0   ;  i   < vids.length  ;  i++)   {  
           addControls(  vids[i]  );  

      function  addCo时rols( vid  )  {  

         vid.removeAttribute('controls');  

         vid.height  :::  vid.videoHeight;  
         vid.width  :::  vid.videoWidthj  
         vid . parentNode~style.height :::   vid.videoHeight  +  'px';  
         vid.parentNode.style.width  :::    vid.videoWidth  +  'pX'j  

         var  controls  :::  document.createElement('div');  
         controls.setAttribute('class' , 'controls');  

         var  play  :::  document.createElement('button');  
         play.setAttribute('title' , 'Play')j  
         play.innerHTML:::   '&#x25BAj ' ;  

         controls.appendChild(play);  

----------------------- Page 231-----------------------

                                                                                                           11.3      几个示例                  213  

           vid.parentNode.insertBefore(controls , vid)j  
                                                                                            •  

           play.onclick  =  function  ()   {  
              if  (vid.ended)   {  
                 vid.currentTime  =  0;  
              }  
              if  (vid.paused)   {  
                 vid.play();  
              }  else  {  
                vid . pause() ;  
              }  
           };  

           vid.addEventListener('play' ,  function  ()  {  
              play . innerHTML   =  '&#X2590;&#X2590;'j  
              play.setAttribute('paused' , true)j  
           },  false);  

           vid.addEventListener('pause' ,  function  ()  {  
             play.removeAttribute('paused');  
             play.innerHTML  =   ' &#X25BA;';  
           },  false)j  

          vl d.addEventListener('ended'2  function  (){  
             vid. pause();  
           },  false);  

        window.onload  =  function()   {  
           createVideoControls();  
                                                                                                                                                  ,  

       脚本文件 pl ayer . js 中的这两个函数准备完成很多任务。首先，找到页面中的 video 元素， 

然后对它们分别应用 addControls 函数: 

        function  createVideoControls()   {  
          var  videos  = document.getElementsByTagName('video');  
          for . (var  i   =  0  ;  i   < videos.length  ;  i++)   {  
             addControls(  videos[i]  )j  
                                                      •  
          } ~  
        }  

       在addControls 函数中，我们删除了 video 元素原来的controls 属性，从而去掉其内置的控件， 

接着又创建了几个DOM对象，用来充当 Play'lPause 按钮，并把它们都添加为video 元素的子元素。 

       function  addControls(  vid  )  {  

          vid. removeAttribute ( , controls ' ).j  

          vid.height  =  vid.videoHeightj  
          vid.width  =  vid.videoWidthj  
          vid.parentNode.style.height  =  vid.videoHeight  +  'px' j  
          V抖.parentNode.style.width =  vid.videoWidth  +  'pX'j  

                                                                                                                                                                       理 

          var  controls  =  document.createElement('div')j  
          controls.setAttribute('class' , 'controls')j                                                                                                     按斗 

          var  play  = document.createElement('button')j  
          play.setAttribute( 'title ' , 'Play')j  
          play.innerHTML  =        '&#X25BA;'j  
                                                                                                                                                                        且 

----------------------- Page 232-----------------------

                             214             第 11 章 HTML5 

                                     controls.appendChild(plaY)j  
                                                                                           '  

                                     vid.parentNode.insertBefore(controls ,  vid)j                                                                                               ‘  

                                 接下来，给Play 按钮添加一个click 事件，以便单击它播放影片: 

                                               、          T r             ， ，  ， ， ， ‘ 、 、 』 ， 
                                                     sknravyS  
                                                                  占  . 
                                    14            -- 
                                              f 
                                                                        nHAU  
                         U I H  1 M  1 2 · u y - n n a ·  t · r  γ o L O L P 1 r  · e 4  F  H n c 、 
                                       vdrTFT                          O  
                                             nVAUVAUSAU  
                                                              u-11J  
                                f   J   -  ， . s 、 . 」 i n e = =  L 4     、 ‘ 『  L 
                                          ·vvev  
                                                           、 
                                                』 
                        v   n  -  P  M  A  飞 ; C α e  P  t U A  I d T J E 
                                                  -HU- 
                                                               、 
                                   t r l  -                   m m 
                                                                          ..  
                                                       」 
                                               . 
                                                                          ,  

                                                           」 
                                    1 · 
                                               .  
                                        a  飞 · 4 、 ' t r u · H u 、 

                                  1 · 4 1 1 - 
                                                  -4fta  
                                     、          」  白 飞 

                             I 1  J F      ­ 」           j 、 

                                                        飞 

                               ， ， 岛 、 
                                    · 
                                    ·J  

                                 最后，利用 play、                        pause 和 ended 事件来修改Play 按钮的状态，并在影片未暂停的情况下显 

                        示Pause 按钮。 

                                 vid.addEventListener('play' ,  function  0  {  
                                                                                                                                      L  
                                     play.innerHTML  =  '&#x2S90;&#X2590;'j                                                                               -.  
                                     play.setAttribute('paused' , true);  
                                  }，干alse); 

                                 vid.addEventListener('pause' ,  function  ()  {  
                                     play.removeAttribute('paused');  
                                     play.innerHTML  =             '&#X25BA;';  
                                  },  false);  

                                 vid.addEventListener('ended' ,  function  ()  {  
                                     vid. pause 0 j  
                                  },  false) j  

                                                     >       叩刷刷刷刷翩翩翩翩刷刷刷刷糊制"唰制钳制附刷刷刷-阳明叩附蛐恻制惘糊糊酬侧帽懒懒唰啪"喇制刷刷阳怖"酬。蛐响阴阳偷懒锁                                                           ,       可叫嗣幽峭阳_w翩翩- 

                         注意恐怕有读者注意到了，这里使用的是 addEventListener  方法为视频添加事件。 

                                      addEventListener 是为对象添加事件处理函数的规范方法。之前我们使用 onclick 之类的 

                                      HThι∞M的 on 前级属性，是因为 IE(IE8 及以前版本)使用的是一个不同的attachEvent 

                                      方法。而到了 IE9，它支持<video>，也是完成本章示例必需的，也开始支持规范的addEvent­ 

                                      Listener 方法了。因此，在本章的例子中使用该方法是没有问题的。 

                        唰佛-翩翩翩制"制"刷刷棚"阳明确"刷刷刷制刷刷嗨翩翩喻-唰帽"轩"…_.._，~~....~，...，"'-叫 胃帽"                制       "      …   " . ~.，"n...    …   "-，_._..~.~币"…白白-艳阳铃兽纠佛唰刷刷刨饰娴刷刷刷-刷刷刷刷偷得俨叫四年年 】           4  

、 

                                 为了给控件添加样式，需要在 pl 句rer. css 中添加下列 css 样式。可以使用 css 对控件外观 

                        随心所欲地更改: 

                                 .video-wrapper  {  
                                    overflow:  hiddenj  

                                                                                                       •  

                                 .video-wrapper  .controls  {  
                                    position:  ab写olute; 
                                    height:30px;  
                                                                    .  
                                    width:30px;  
                                    margin:   auto;                                                                         ,  
                                    background:  rgba(o ,o ,o,O.S)j  

----------------------- Page 233-----------------------

                                                                                       11.3     几个示例              215  

       .video-wra pp er  button  {  
         display:  block;  
        .width:   100%;  
         height :  100%;  
         border:  0;  
         cursor:  pointer;                                       •  
         font-size :  17px;  
         color:  #fff ;  
         backgr ound:  transparent;  

       .video-wrapper  button[p aused]   {  
         font-size:   12pX;  

      页面加载完成后， wi ndow.load 事件就会执行createVideoControl s 函数，结果就会得到一个相 

对粗糙的视频控制界面，可以用来播放和暂时视频，如图 11-3 所示。 

                                                                                                                   •  

                                                        图 11-3 

      这个简单的例子只包含最基本的控件，在此基础上，还可以利用相应的属性和事件添加带位 

置指示器的滑动条、时间戳，以及其他特殊的控件。到底添加哪个控件，完全由你说了算。建议 

大家抽空学习一下 H刊位5 视频规范中其他与视频相关的属性，地址为 h忧p://www.whatwg吨/ 

specs/web叩ps/current-work/multipage/video.html#video。另夕卡，也可以访问 h句://www.w3.org/20 10/  

05/video/mediaevents.h时， 看看其中给出的一些实例。最后，给大家推荐一本书，女博士 Silvia 

Pfei他r 撰写的 The Dφ'litive Guide to HTML5  Vìdeo   (Apress ,  2011 ) ，看看使用<video>元素还能做 

哪些事。 

 11.3.3      表单 

      我们要介绍的最后一个H币在L5 元素就是表单。表单的身影几乎可以在任何一个网页中的看 

到，但在盯'ML5 之前，可用的输入控件类型却少得可怜。 文本框、单选按钮、复选框对于简单 

                                                                                   •  

----------------------- Page 234-----------------------

   216     第 11 章 HTML5 

的表单是够用了，但在需要更多交互功能的时候，仍然免不了求诸DOM脚本披挂上阵。  如果想 

让用户更方便地在表单中输入日期，就得自己构建界面和必要的JavaScript。老天有眼， HTMI5  

给我们带来了很多新表单元素、新输入控件类型和新的属性，帮我们实现了这些功能。不过，跟 

以往一样，你的 DOM编程才能还是可以派上用场的。 

     新的输入控件类型包括: 

     口 email ，用于输九电子邮件地址z 

     口 url ，用于输入URL; 

     o  date，用于输入日期和时间; 

     口 number，用于输入数值3 

     口 range，  用于生成滑动条: 

     口 search ，用于搜索框z 

                                                           •  

     口 tel ，用于输入电话号码g 

     口 col or，用于选择颜色。 

    这些新类型比单纯的type=11 text "好用多了。浏览器知道这些控件都接受什么类型的输入，因 

此可以为它们配备不同的输入控件，例如在移动设备上更换不同的软键盘。图 11-4 中两幅图是 

iPhone 中 Mobile Saf泣i 的界面，一幅是针对文本输入框的键盘，一幅是针对电子邮件地址的键盘。 

             Text:  [r' '"   ""'"斗中..' ..."  J    Text:  r      一一‘一 丁 

                                                                                       ,  

             Emai1:  r………………1                     Email:  (I…~，.， ' . ~-~_.._....._''''_.... '}  

                                            图 11-4 

    相应地，新的属性包括如下这些。 

----------------------- Page 235-----------------------

                                                                                 11.3   几个示例             217  
                                                      ,  

      o  autocomplete，用于为文本 ( text)  输入框添加一组建议的输入项g 
      o  autofocus ，用于让表单元素自动获得焦点; 

      口 form，用于对<form>:标签外部的表单元素分组; 

      Q   min、 max 和step ，用在范围 ( range) 和数值 (number) 输入框中z                                 •  

      口 pattern，用于定义一个正则表达式，以便验证输入的值3 

      口 placeholder，用于在文本输入框中显示临时性的提示信息， 

      口 required，表示必填。 

      这些属性把很多原来自 DOM脚本负责的任务都转移给了浏览器，例如提供自动完成的建议 

项和验证表单输入。但我们要关注的问题，是在浏览器不支持新的类型和属性时怎么办。 

      当然，现在就可以使用这些新增的输入控件，因为它们都向后兼容(某种程度上如此)。对 

于HTM口的电子邮件输入框而言: 

      <input  type:;;"email"  />  

      旧浏览器会将该类型默认为text ，并呈现出标准的文本输入框。对于email 或search 类型的 

输入框来说，这不会造成什么大问题，但对于 range 滑动条就不行了。想象一下，原本应该是滑 

动条，但现在却是一个输入框，比如 Safari 和IE 显示的 range 控件，如图 11-5 所示。 

                                                                  L "...  0  ". ".   ,.   "."".  ""  '" ''''''  J  

                       翩翩                                                 h彻附树航弹融制· 

                                                    图 11 -5 

     为了应对不兼容的浏览器，必须使用特性检测来准备另一个方案。 

     使用本章前面提到的Modernizr 库，就可以进行兼容性检查。比如，要检查浏览器是否支持 

某个输;人类型的控件，可以使用 inputtypes.type 属性: 

      If (   !Modernizr.inputtypes.date  )  {  
        //生成日期选择器的脚本 

     而要检查某个属性，则可以使用 input.attribute 属性: 

      if (   ! ModernÍzr . input . placeholder  ){  
      }//生成占位符提示信息的脚本 

     要是没有使用 Modemi泣，可以使用下面这个 inputSupportsType 函数来检查浏览器是否支持 

某种类型的输入控件: 

      function  inputSupportsType(type)   {  
        if (!document.createElement)  return  false;  
        var  input  =  document.createElement('input');  
        i叩ut.setAttribute('type' ,type);  
        if (input .type  ==  'text'  在& type   !=   'text')  {  
          return  false;  
        }  else  {  
                         •  

                                                                                       I  

----------------------- Page 236-----------------------

‘·  

                                                                                                                 ,  

                     218         第 11 章 H币1L5 

                             return  true;  

                                                                                                                           .  

                                                                                                                                 ,  
                        使用 inputSupportsType 函数的方式与使用 Modernizr 一样: 

                        If  (  !inputSupportsType('date')  )  {  
                           //生成日期选择器的脚本 

                        要检查特定的属性，可以使用下面这个elementSupportsAttribute 函数: 
                        function  elementSupportsAttribute(elementName ,  attribute)  {                                         ,  
                           if  (!document . createElement)  return  false;  
                           var  temp  ::;  document.createElement(elementName);  
                           return  (  attribute  in  test  );  

                       使用 elementSupports此tribute 函数的方在去还是那样，只不过需要传入元素名和要检查的属性名: 

                        if  (  !elementSupportsAttribute(  'input' ,  'placeholder'  )   ){  
                          //生成占位符提示信息的脚本 

                        在稳妥的特性检查的基础上，就可以一方面试用新的盯ML5 表单元素，另一方面提供备用 

                 的DOM脚本，以便浏览器不支持某种类型或属性时"挺身而出"。 

                        举个例子，假设你想在自己的文本输入框中加入占位符信息。在盯'ML忡，只要像下面这 

                 样使用 placeholder 就行了: 

                        dnput  type::;"text"  id::;"first-name"  placeholder="Your  First  Name"            1>  

                        在 Saf注目或 Chrome 浏览器中，占位符会在用户尚未输入值 
                                                                                                            较严甲户均阳1号                               :  
                 的情况下显示指定的临时文本，如图 11 -6 所示。 

                       要在不支持 placeholder 属性的浏览器中实现相同的效果， 
                                                                                                                           图 11-6 

                 就得编写一个简单的DOM脚本来完成同样的功能: 

                        if (   IModernizr.input.placeholder  )  {  
                          var  input  ::;  docωume时.getE曰lerr阳 
                          input.onfocωus =  function  ()  {  
                             var  text  ::;  this .placeholder   II  this .getAttribute('placeholder');  
                             if  (  this .value  ==   text  )  {  
                               //重置输入框的值，以隐藏临时的占位符文本 
                               this.value::;  ";  

                          input . onblur  =  function  ()  {  
                             if (  this .value  =::;  "  )   {  
                               //把输入框的值设置为占位符文本 
                               this .value  ::;  this.placeholder  II  this.getAttribute('placeholder');  

                          //在 onblur‘处理函数运行时中添加占位符文本 
                          input. onblurO;  

                       当然，这个替代方案的主要问题是必须依赖于 JavaScript 实现同样的功能。因此，还必须考 

                 虑到在JavaScript 不可用的情况下选择什么输入控件最合适。 

                       要作为后备的高级功能(如自动完成和滑动条)越多，开发工作量就越大，占用时间就越多。 

                                                                                                                                         •  

----------------------- Page 237-----------------------

                                                                  11.5  / J 、结  219 

所以还建议大家选择已有的一些帮我们完成了相应功能的库。耍了解有关 JavaScript 库的相关内 

   ，请参考本书附录。 
                                                                                       •  

 11.4    HTML5 还有其他特性吗                          •  

    有!本主主前面介绍的这几个标签和属性只是H刊ifL5 的冰山一角而已。请读者注意， HTML5  

这个规范至今仍然没有尘埃落定，很多地方都有可能发生变化。在浏览器支持不是特别完善的情 

况下，全面转入HTML5还为时过早，但这不会影响我们继续探索的兴致。比如， HTML J avaScript  

API 可是我们大家期望已久的了。等不了多长时间，我们就可以享受HTML5 的诸多便捷功能了。 

     口使用 localStorage 和 sessionStorage 在客户端存储大型和复杂数据集的更有效方案 

       (htφ://dev. w3.org/htm15/webstorage) ;  
     口使用阶bS∞ket 与服务器端脚本进行开放的双向通信 (h世p://dev.w3.o刷刷刷bsocke1sl) ;  
     口使用眼bWorker在后台执行Ja~必饲pt (http://www.wbatwg.Oll向民s/web-w。此ers/ClUTent-work/) ;  
    口 标准化的拖放实现(http://www.whatwg.orglspecs/web叩ps/current-work/multipage/dnd .  
       html#dnd) ,  

    口在浏览器中实现地理位置服务 ( h句://www.w3.org/TRlgeoloca垣on-AP川。 

    这些新功能并不都与DOM相关，但它们却是你应该了解和掌握并在不久的将来每天都会使 

用的，所以最好提前多花些时间熟悉它们。 

    耍了解更多相关内容和示例，请参考以下资源。 

    口 W3C HTML5 Working Draft:  htψ://www.w3.org厅、Rlhtm15 ;  
    口 WHATWG HTML5   (包含开发中的下一代技术): h句://www.whatwg.org/specs/web叩ps/ 
       current-work ,  

    口 HTML5 的交互性演示: h句://html5demos.comlJ  

    口 HTML5 相关的PPT、代码、示例及教程:                 ht甲://www.htm15rocks.comJ ;  
    口 Dive inωHTA-.亿5 ，作者Mark Pilgrim:  h句: //diveintohtn业5. orgl; 

 11.5    小结 

    本章，我们了解了 H币在L5 以及使用 Modemizr等工具检测特性的重要性。                           同时也编写了几 

个例子，介绍如何使用特性检测来确保为新的 HT阻5 特性提供后备功能。本章介绍的 HT肌5 

的新特性包括: 

    口可以用来在文档中绘制矢量及位图的<canvas>元素$ 

    口可以免插件而直接在网页中嵌入音频和视频的<audio>和<video>元素: 

    口可以为你提供更广泛选择的新的表单控件类型以及新的属性。 

    到目前为止，我们掌握的DOM脚本编程技能都处于各自为战的状态。下一章，我们就把前 

面学到的所有概念和技术综合起来，创建一个项目。 

    到了融会贯通学以致用的时候了。 

                           飞， 

----------------------- Page 238-----------------------

                                                        •  

                        λ忡咱 
                        .. 圃.- 
                               ~‘  
                                      示例 
                        ，原 
                               同 

                                                       ~  

    本章内容 

                                                                    、4 

    口组织内容 

    口 应用样式 

    口使用JavaScript， :'þ()M和Ajax 增强功能 

    前面我们看到过很多DOM脚本编程的例子，但那些为了说明问题而设计的例子之间都没有 

什么联系。本章我们就来做一个综合的项目，把所有与DOM脚本编程相关的技术学以致用。具 

体来说，我们会从头开始做一个网站，然后再用 JavaScript 来为这个网站增加交互功能。 

12.1    项目简介 

    有一件美差落在了你的头上!作为一名 Web 设计师，你被选中为世界最著名的乐队Jay Skript  

and the Domsters 设计一个网站。 

    噢，没听说过个乐队?不要紧，我们一起来编个故事。就当你配合我把这章写完吧，假装有 

那么一个国际知名乐队，而你恰好有幸被选中，要承担起为这个乐队设计网站的任务。 

    这个网站必须跟这个乐队一样，得酷。要是你能再给网页加上一些交互特性，那就酷毙了。 

但是别忘了，这个网站还必须对残疾用户以及搜索引擎保持友好。 

    开办这个网站的主要目的就是发布有关乐队的信息。无论怎么构思这个网站，首先都得确保 

这些信息能让访客一目了然。下面我们就来看看都要做些什么。 

12.1.1   原始资料 

    客户已经提交了构建网站所需的东西:               有关乐队的介绍材料、巡演日程，还有一些照片。这 

个网站不需要太多的页面，它本质上就是一个宣传孚册，而这一点也正是你要把握的核心用户体验。 

丁 2.1.2  站点结构 

    根据客户提供的资料，可以画出一张简单的站点地图。站点的结构的确不算复杂，至少可以 

把所有页面都放在一个文件夹里。 

                                                                     .  

----------------------- Page 239-----------------------

                                                                           12.1   项目简介            221  

      为了准备站点的制作，创建三个文件夹，一个叫 1111ages ，保存要用的图片g                                         一个叫 styles ， 

 保存CSS 文件g         一个叫 scrìpts ，保存JavaScript 文件。 

      站点文件夹的目录结构如下所示: 

      口 /images 

      口 /styles 

                             、 

      CI   /scripts  

      说到页面，首先得有一个详细介绍乐队背景信息的页面。其次要有一个类似相册的放照片的 

 页面。巡j寅日程安排当然也要单独一个页面。为了让歌迷与乐队沟通，还必须有一个联系页面。 

 最后，当然要有一个主页，放上乐队简介和站点导航信息。以下是要创建的几个页面(如图 12-1 

 所示) :  

      口 Home 

      CI   About  

      口 Photos 

      口 Live 

      口 Contact 

                      HTML          HTML          HTML         HTML          HTML  

                      Home          About        Photos         Live        Contact  

                                                图 12-1 

                                       .  
     这几个页面对应如下文件: 

     口 ìndex.html 

     口 about.html 

     口 photos.html 
 •  

     口 1 ive. html  
     CI  contact . htm 1  

     虽然每个页面的内容不一样，但它们都要使用相同的基本结构。下面该考虑为这些页面创建 

一个模板了。 

 12.1.3    页面结构 

     站点的每个页面都要分成几个区域。 

     口头部区域包含站点的品牌性信息，也是放Logo 的地方。这个区域要使用<header>元素。 

     口导航区域中包含一组链接，指向各个页面。这个区域使用<nav>元素。 

----------------------- Page 240-----------------------

                 222        第 12 幸综合示例 

                    口内容区域包含每一页的实质性内容，这个区域使用<article>元素。 

                    因为要使用 HTML5 元素，所以也要在文档的<head>元素中包含Modemízr库(第 11 章介绍 

              过)。可以从 h句://modeI nizr.coml下载这个库的最新版本(撰写本章时的最新版本为 1.6) ，并将 

              其放到 scripts 文件夹中。 

                    最后，模板的代码没有多长。 

                    < ! DOCTYPE  html>  
                    <html   lang="en">  
                    <head>  
                       <meta  charset="utf-8"  1>  
                       <title>Jay  Skript  and  the  Domsters</tit1e>  
                       <script  src="scripts/modernizr- l.6.min.js"></script>  
                    </head>  
                    <body>  
                       <headen  
                         <nav>  
                           <u l>  
                              <li><a  href="index.html">Home</a></li>  
                              <li><a  href:"about.html">About</a></li>  
                              <li><a  href:"photos.html">Photos</a></li>  
                              <li><a  href="live.html">Live</a></li>  
                              <li><a   href="contact .html")Contact</a>< /li>  
                           </ul>  
                         </nav>  
                 •  
                       </heade r>  
                       <article>  
   •  
                       </article>  
                                            ,  

                    </body>  
                    </htm l>  

                    把这些代码保存在template.html 文件中。 

                    在设计好页面结构后，下面就要一页一页地插入内容了。不过，让我们先来设想一下站点完 

              工后的外观。 

               12.2       设计                                                                                                J  

•  
                    既然知道了每个页面中都包含哪些结构化元素，而且手里也已经有了客户提供的资料，那么 

              接下来的外观设计就不难做了。你可以选择Photoshop、                                          Fireworks 或任何其他的图形设计工具， 

              做出你认为适合的任何风格的设计方案(如图 12-2 所示)。用一位著名厨师的话说，"以下是我 

              早就为您准备好的。" 

                    做完了视觉设计之后，可以把平面设计切分成多个图片。把背景图片保存为background.gif。 

              而品牌图像保存为 logo.gif。而带有一点渐变的导航条要命名为 navbar . gif。最后把人物剪影保 

              存为 guitari.st.g汗。把这些图片都到 1mages 文件夹中。 

              注意如果你不是设计高手，还是建议你从Friend ofED 网站 (ht甲://www. 企iendsofed.coml)  的 

                       本书页面中下载本章用到的图像。 

----------------------- Page 241-----------------------

                                                                                                                                                                                                  .  

                                                                                                                                                 12.3         CSS              223  

                                                                                      图 12-2 

  12.3             CSS  

         现在，你有了基本的 HTML 模板，也知道自己的站点长什么样了。通过为模板应用 CSS， 

 可以在Web 上再现你的设计方案。 

         如果把所有 css 都放到一个文件中，可能会为后期维护带来一些麻烦。而把所有 css 分别 

放在几个文件中则是个好主意。 

         怎样组件 css 由你决定，但我建议用其中一个保存与整体布局有关的样式， 用另二个作为 

专门的颜色样式表， 而用第三个来保存与版式有关的样式: 
                                                                                                                                                                                               ,  

          口 l ayout.css 

          口~   color.css  
                                                                    •  

          口 typography.css 

         这些样式表都可以导入到一个基本的样式表中: 

、 仰 血  、 ·  ·  四 血 、  阳  命  、 . ，  ，  、  、 ‘ ，  ，  ， 、 、 
                     +‘                  t 
                                            F P  a ，  e ， ， . 、 
                  onuo 
                    ZIr           aouy  
              mmP-nvn                 00o  
                       L  + c  i  y v             ， . 
                           rrr  
                         HUHU           uzn6  
          · 4       4  1 4  1  i         、 俨 」 、 
                                          - 
                                   、       =  p d 、 
                     +L 
           、 
                                          F Y V J h 
                                                  .•  
          · 4                ‘ 『 n i    喧 」 
                                        · v n d 
                                         -r  
                          、 ‘  ，  ， ， 、 
                                                   ,- 
                                             H -      ， ， . 、 、 
                     & 
           品  、                                   」 「  、 沪 
              m       L   HU                          p3    .  
                                   y      a   H 
                y  
                                                       d 
                 .                                          ,  

         把包含这三行代码的文件保存为 basic.css ，并放在 styles 文件夹中。如果你想添加一个新 

样式表或者删除一个样式，只要编辑basic.css 即可。 

         可以在模板的<head>元素中通过<link>元素引入这个基本样式表。然后，再在页面<header> 

中添加一个<1附>标签，指向 logo 图片。 此时也可以向<article>中添加一些临时性填充文本。 

          <lDOCTYPE         htm l>  
          <html  lang="en"                                                                                                                                                           .  
          <head>  
             <meta、 charset="ut子-8"  />  
             <title>Jay  Skript  and  the  Domsters</title>  
             <script  src="scripts/modernizr -l .6 .min .js"></script>  
             <li nk  re l="stylesheet"  media="screen"  href="styles/basic.css"  1>  
   .  

----------------------- Page 242-----------------------

                                 224             第 12 章综合示例 

                                      </head>                                                                                                                                 - 

                                                                                                                                                                '  
                            ,         <body>  
                                         <header>  
                                            <img     src="images/logo.-gif"  , alt="Jay,                Skript  and  the  Domst~rs" l>  
                                            <nav>  
                                                ω1>  
                                                   <lb<a  href="index .html">Home</a></li.>  
                                                 ' <li><a  href="about.html">About</a></li>  
                                                   <li><a  href= "photos. html">Phot 6s</a></li>  
                                                   <li><a . href="live.html">Live</a></l i>  
                                                   <li><a  href="contact.html">Contact</a></li>  
                                                </u l>  
                                            </nav>  
                                         </header>  
                                         <article>  
                                            <hl>Lorem  Ipsum  Dolor</hl>  
                                            <p>Lorem   ipsum  dolor  sit  amet ,  consectetuer  adipiscing  elit.  
                                     Nullam   iaculis  vestibulum  turpis.  Pellentesque  m'attis  rutrum  
                                      nibh.   Quisque  orci ,  euismod  sit  amet ,  sollicitudin .et ,  
                                      ullamcorper  at ,  lorem.                                                                     '  
     ,                                Pellentesque  habitant  morbi  tristique  senectus  et  netus  
                                      et  malesuada  fames  ac  turpis  egestas.  
                                     Ut   lectus.  Mauris  eu  sapien  non   enim  dapibus  imperdiet.  
                                      Sed  eu  mauris 骂ed pede  mollis  commodo.  
                                      Fusce  eget  est.  Sed  ullamcorper  enim  nec  est.  
                                      Cras  dui  felis ,  porta  vitae ,  faucibus  laoreet ,  sollicitudin  eget ,                                                      J  
                                      enim .  Nulla  auctor.  Fusce  interdum  diam  ac  eros.  
                                     问auris egestas.  Fusce  in  elit et  sem  aliquet  pretium.  
                                     Donec  nunc   erat ,  sodales  ac ,  facilisis  a ,  molestie  eu ,  massa.  
                                     Aenean  nec  justo  eu  neque  malesuada  aliquet . </p>  
                                         </article>  
                                      </body>  
                                     </html>  
                                                                                        •  

                                     这样，基本的模板就算完工了，如图 12-3 所示。 

                                                                  鼓挝鼓3立芫二工二二----二二-ι…斗ι斗二斗二J 
      ,  
                                                                  卷锵鞋各" 咿鸣 爱鳞警 毒辘装 命寂……………………………a叫咐………叫…w叮叮吨?们 

                                                                                                                                              4 ‘  

                                                                     . P.置费是 

                                                                     : 需品 
                                                                     .. l.kl盐 
                                                                     - 1油勘草草 

                                                                  Iø棚峪跚跚Dolllr 
                                                                                                              ,  

                                                                  主ζ立芒阳-气气  ...   由一阳飞       旷     "‘，呵，......γ          、.. . 严   甲俨叮;"";;~气"，:~"r芒?产-r-:-可?吧?片 
                                                                   ….         '~  "  ‘、川今                         ' .'  ...  r  _   ..              …  。、+   … 
H H H L 川  H  白 t                                                                                         图 12-3 

----------------------- Page 243-----------------------

                                                                                                                                       、 

                                                                                                                        12.3      CSS            225  

 12.3 .1         颜色 

       样式表 color.css 是最直观的。记住，不管为哪个元素应用什么颜色，都要同时给它一个背 

景色。否则，就有可能导致意外，看不到某些文本。 

                                                                                                       .  

       a: link  {  
          color:  #445;  
       }background-color:#eb6;  

       a:visited  {  
          color:  #345;  
          ba ckground -color:  #eb6;  
       }                                                                           .  
       a:hover  {  
          color:  #667;  
          ba ckground-color:  #fb5;  

       a:active  {  
          color:  #778;  
          background-color:  #ec8;  

       header  {  
          color:  #ec8;  
          background -color:  #334;  
          border-color :  #667;  

       header  nav   {  
          color':  tt455;  
          background-color:  #789;  
          border-color:  #667;  
       }  
       article  {  
          color:  #223;  
          background-color :  #edc;  
          border-color:  #667;  
      ‘  、 
    H n t ' E             、 ， ， ， 
            Aunu  
                         、 
        P A T 』 - r -  吨 M M U H 
           aiD    nHV··  
               EAU  
         』       ­ a  o i 

                       咱 
                              骨 骨 
                                  AHJ  
                                 ny  
               』 白         · · γ 
                       O     ..     -a  
                       · · a 
                                      .,  
                     」 

       }  
       header  nav  a:link ,header  nav  a:visited  {  
          color:  #eef;  
          background-color:  transparent;  
          border-color:  #99aj  

       header  nav  a :hover   {  
          color:  #445;  
          background -color :  #eb6j  
       }  
       header  nav  a:active  {                           •  
          color:  #667;  
          background-color:  #ec8;  

       article  img   {  
          border-color :  #ba9;  
          outline-color:  #dcb;  
       }  
       #imagegallery  a   {  

                                                                                                                                                                          ,  

----------------------- Page 244-----------------------

                          •  

    226           第 12 章综合示例 

           background-color :  transparentj  

        此时的模板已经有了色彩了，如图 12-4 所示。 

                                                                   图 12-4 

 12.3.2         布局 

       基本的布局还是相当简单的，所有内容都在一栏中。 

       为了让导航中的链接水平排列，需要应用一些浮动效果。除此之外， 1 ayout . css 也没有什么 

不好理解的了。 

       首先是为HTML5 块元素定义默认的样式。主要针对那些不支持它们的浏览器，好让这些元 

素都能够具有适当的块布局。 

       其次，使用通配选择器把所有元素的内外边距设置为零。这样就把不同浏览器为元素设置的 

不同内外边距全都删除了。重设这些值之后，所有样式就可以一视同仁了。 

       section,  heager ,  article,  nav   {  
          display:  blockj  
       ‘  、 

        E 
      φ  ψ J 
           f 
           t 
           γ U  U σ  A U A . 
                       nu 
            2   、 
           pm     nnnH  
                  b σ 
                         -3  
          、 刷  · 4    nu  

                、  · 
                        - 
            a 
                 .•  
              &     · 
                       p  

       body   {  
          margin:   1em  10%;  
          background-image :  url(../images/background .gif)j  
          background-attachment:  fixedj  
          background-position:  top  le于tj 

----------------------- Page 245-----------------------

                                                                                                                                                                                                                                                                                                         12.3        CSS              227  

                                                                                                                                                                           ba ckground -repeat:  repeat-xj  
                                                                                                                                                                           max-width:   80emj  
                  J  l            a  J  l  h  J                         l       h      J       l  h  3                1       h       J  l           h       J      l 

        u   u   o  o  i  -  -  a       o  o  o     -  -  o    a  l  -     -  d  i     d  o  o    v  -  -     d  a    o   o  o   o   a  a  a     d  o  o     o  a   a  a  d 
                                                                                                                                                                                     It 
ι  t  L  +  r       r   c  n   u  A  r     r   r  c    Z   U  A  O     S  』  自e  s e  r  r  e  u 』  A     e  u自  A  -  r  r  E  e  c』 白      』 c  e  r  r 自 r  t  c r t 、 c  h c a  v 划  -  e K  L  EJ  V  b U A U  A U A  U  A ( 
                                       n              p  颜 -                       0  屹 0                       1 -  州 -  e i  t      w   o  4 e  h   r  p 1 -广 -  -  o 0 e  h  p  4 r耐  0 句 J n 4i    1              4   M E  uJ -     M H - W h 
                                                                                                                                                                                                                                                          rTr  
                                    i    e   g  -     -    -   L    I  -  g      y    a   y   a  -  -       o n  a t  -  g - e · e  e ·  e  - u  k  - n  M o K  n o  6  o n e  a e  e - 5  - n o  - z  n O v  k O n  O 
                                                                                                                                                                                     --rrrznHrrrrrrrnn  
                         q  -  -  -                     u  A h  K 0           1 n  1  t e      3 i  -  d l  u t      n A o  - h       i p  o  s -     a a  t - e  s i        o r n -  n n t n -  a - a e b  e o            r m 
                                                                                                                                                                                                 meo--· 
                                                                                                                                                                                                       -                 m 
                                                                                                                                                                                        uuuwsbvuuuwsbt-v-wllv:v:1:zwst·-imw5 
                                                                                                                                                                                                             rn--;··r· 
                                                                                                                                                                                                            un-9dhunjdho;do;;d 
                                                                                                                                                                                                       -          -Z0·'·oe-pm·--l  
                                                                                                                     p   b   b   b   b   b    b   b   a   b   b  - b  m b  - b  -  -  d O L + l  e  i-  ·  - m o t  : 忧 叩 拭 - 
                                                                                                                                                                                                                - 
                                                                                                                                                                                u i              k  r      m  n  . u n 」  3 
                                                                                                                                                                                                                 bO(bp 
                                                                                                                                                                                                  m        m         m               - 
                                                                                                                                                                                             · 
                                                         u n  a  u n A  4 - M A  U J  a  v  n r v n r o  J  U  A Z L &  Z  U A M A G  A  M A U  A  k  i  k L  K  L r  M A M  A  M  A  R                             m  s 
                                                                                                                                                    o  t     i  n  n      n ·  o t  t  l i  t 
                                                                                                                                                                                                                                                                                                                       •  
                                                                                                                                                                                                    - 

                                        z    s    -    -    o    t    s    ·    ·    2   3    -    -    r    e    J    V    U    A    e    1    t    w    s    ·    e    l   ·    0    σ    W    S 
                                                                                                                                                                                                 ·mmo 

                                                                                                                                                                                           、 
                                                                                                                             和 f                o  u  e  v n  t  J  V  U  A  U A  U  A  U  A          扣 J             、 .                                  卢 呻 η 
                                                                                                                                                                                                                                            r                     -3  
                                                                                                                                                                                                                '  v n -  · 
                                                                                                                                                                                                       - 
                                                                                                                                     H  n女 t  4                                    1  t d  l · · e t  i      · 此   忧   』 ' 
                                                                                                                                                                                                 e····mi--{dws{iacm 
                                                                                                      义                                             ，                                             川 
                                                                                                                                                                                                              r. 

                                                                                                                                                                                                        1    ,  

                                                                                                                                                                                                        + 
                                                                                                                                                                                                                 oe-- 
                                                                                                                                                                                                             ...  
                                                                                                                                                                                                  ，  .  、 

                                                                              s  w  t  i  g  g  o                      t    i  -  -  e  e                e     -  -        o     l  o 
                                                                                                                                                                                                       - 
                                                                                                                                                                                             · 
                                                                                                                                                                                                       -     , 
                                                                                                                                  l       e a  d  e a  b  m b   o e w    a h       j       h ￡ 、 4 E w 

                                                                                                                                                           1  -  -  n  i  t  t  n  h  w h  w 
                                                                                                                                                                                     . 
                                                                                                                                                                                     .  
                                                                                                                                                                                  r 、 
                                                                                                                                                n  -   -  a   n  a  H   n   z  e r  T  i   ·  ·            ..... · 3 - 
                                                                                                                                                                                                              -SP·-'; 
                                                                                                                                                                                          正 
                                                                                                                                    定                               白                                白 
                                                                                                                                                                                 e 
                                                                                                                                                                     u  h  -  -  - 、 i l  '                                                                                 .  

                                                                                                                                                                               ;  0 i      1 

                                                                                                                                     l   p  b    b   b  t    b  p    f t  H  Kd 岛  丰  咱 J  EL - t  石 '  4 

                                                                                                                              4  4  -   -  t e  - e  - e  y -  d -  h -  2 e  r e m n e  J w e  V e e U l V  A h H O t O - e  · , 
                                                                                                                                                                                                         mm·-mm·-e-iaw  
                                                                                                                                                              H   n  &  γ  Z   Z  A 
                                                                                                                                                                                                 · 
                                                                                                                                                   V  &              V                           ·· 

                                                                                                                                                                                            、 
                                                                                                                                                                                                 ···1 
                                                                                                                                                                                            4 

                                                                                                                                                                                』 
                                                                                                                                                     A  J  o V H o  b  bU - n  H  nJ  1  U - I  t  t在  e 也 A t u M  A  iz t A  o  -s r  nO 、 r  t  ee  h- 』 ·  0  1- -  - · e  · e · 8 克 - B - - 

                                                                                                                                                                                                 ···h 
                                                                                                                                                                                                            i 
                                                                                                                                                                                 e  e 
                                                                                                                                                                                                             · 
                                                                                                                                                                                        ·                  m--u(  
                                                                                                                                                                              咱 ‘ 
                                                                                                                                                                                                             'dtJ  
                                                                                                                                                                                                 eM  
                                                                                                                                                                                i 
                                                                                                                                                                                        · 
                                                                                                                                                                     J 1 

                                                                                                                                                                       U  干  守 ↓  与 民 由 扩          二  ­ 、  叶                        色       布    局 
                                                                                                                                                                                        UU  
                                                                                                                                                                                   司                                       了                                  图               已 
                                                                                                                                                                                                                                                                                不 一 
                                                                                                                                                                                                                 S  
                                                                                                                                                                                             货                                                                       ，  句 
                                                                                                                                                                                                                                                                    TA    ZJ  
                                                                                                                                                                                                                                                                             EI  
                                                                                                                                                                                            口 
                                                                                                                                                                       足                                      、 
                                                                                                                                                                             二                   也  且 
                                                                                                                                                                                   J  d H   A                 u                                                       L      ­ H     。 

----------------------- Page 246-----------------------

      :~'饵 

       "  

                                                                                                                                                                                                          、 

                                                                                                                                                                   .  

                                        228               第 12 章综合示例 

                                                                                                                                                                                                   、画、 

                                                                                                                                                                                                                                         、 
                                                                                                                                                                                                                                         ‘  

                                                                                                                              图 12-5                                                                             J  

                                   12.3.3               版式 

        咱 

                                            有时候，的确很难分清某些样式声明放到哪个文件里更合适。字体和大小很显然应该放在 

                                  typography. css 里，但外边距和内边距呢?很难说它们到底应该与布局有关，还是与版式有关。 

                                  在我们这个例子中，把内边距信息都放在了 layout.css 中定义(上一节已经定义了)，而外边距 

                                  信息则会放在typogr叩hy .  css 中。 

                                            body   {  

                                                                                                                                                                                                               ••  

                                                font - family:   "Helvetica" ,IArial" ,sans-seríf;  
                                             lJlo  

                                                        、 ， ， 
                                                AUFT  
                                                  牛  牢 
                                              nv  VYO  
                                                      3 r t 
                                                         -  · 、 . 
                                                                      4A  
                                                                       a 
                                                                          m  
                                                             ι 7 
                                                    nH          e           ..  
                                                      L 
                                                                       」 
                                                                            ,  
                                            }  
                                            a  {                                                                                                 飞 
                                                font-weight:  boldj  
                                               text-decoration:  nonej  
                                            }  
                                            header  nav   {  
                                                font-family:   "Lucida  Grande l                      , IHelvetica l         , IArial" ,sans-serif;  

                                            }  
                                            header  nav  a  {  
                                               text-decoration:  none;  
                                                font-weight:  bold;  
                                            article  {                                                                                                                                                               、. 

4 3 8 " ' 
        bi  
        Fh-                                    line-height :  1~8em;  

    耳 
                                           }  

    q A 

    目                                      article p  {  
   t - 

       、 

----------------------- Page 247-----------------------

                           ,  

                                                                                                                              12.4       标记              229  

            margln:  lem  Oj  
         }  
         hl  {  
            font-family :  "Georgia" ,"Times  New   Roman" ,sans-serifj  
            font:  2.4em  normalj  
         }  
         h2   {  
                                                                                                             •  
            手ont-family:  "Georgia 勺"Times New   Roman" ,sans-serifj                                                                                              ,  
            font:   1.8em  normalj  
            margin -top:   lemj  
         }  
         h3   {  
            font-family :  "Georgia" ,"Times   New   Roman" , sans - serif;  
            font:   1.4em  normalj  
            margin-top:   lemj  
         }  
         #imagegallery  li  {  
         }list-style-type:none;  

         textarea  {  
            font-family:   "Helvetica" , "Arial" , sans-serifj                                       •  

        现在，模板不仅有了颜色、布局，还具有了版式，如图 12-6 所示。 

                                                            ;最善 

         •  

                          ·、 

                                                                           图  12-6                                                        •  

        以上三个css 文件 (color.css、                                 layout.css 和typography.css) 都和basic.css 样式表一块， 

放在styles 文件夹中。 

丁 2.4           标记 
           .  

        模板做完了，样式也都写得差不多了。接下来该考虑站点中的每个页面了。 

----------------------- Page 248-----------------------

,  

                      230         第 12 幸综合示例 

                         首先从主页 index.html 开始，这个页面包含一段介绍性文字，放在<article>元素中: 

                         <p   id="intro">  
                         Welcome  to  the  official  website  of  Jay  Skript  and  the  Domsters.  
                         Here ,  you   can  <a   href="about.html"   title="About">learn  more  about  the  band</a> ,  
                         view  <a   href="photos .html "  title=IPhotos">photos  of  the  band</a> ,  
                         find  out  about  <a  href="live.html"   title="Tour  Date">tour  dates</a>  
                         and  <a   href="contact.html"  title="Contact">get  in  touch  with  the  band</a>.  
                         </p>  

                         这样，主页就完成了，如图 12-7 所示。 

                                                                                                                          、. 

                                                                                                                                     、 

                                                                             图 12-7 
                                                                                                                      •  

                        这段文字有一个 id ，叫"intro" 。我们要利用这个 id 为这段介绍添加特殊的样式。此外，还 

                  可以利用这个 id 来添加一些DOM脚本。 

                   12.5        JavaScript                                                    ~  

                        在编写 DOM脚本之前，必须先确定怎么组织 JavaScript 文件。如果站点需要很多长长的脚 

                  本，那最好把它分割成几个小文件，正如本书前面展示的那样。可是，眼下这个网站非常简单， 

                  所需的JavaScript 代码也不长。为了减少请求的数量，我们就把所有脚本都放在一个叫 global.js 

 •  
                  的文件里。这样也有助于最后缩减其代码。 

                        先在scripts 文件夹中创建global.js。然后在其中添加几个整个站点都会用到的函数。 

                        肯定要用到 addLoadEvent 函数(参见第6章) ，因为在文档完全加载后如果想运行某个函数， 

                  就要用到它。 

                        function  addLoadEvent(func)   {  
                           var  oldonload  = window.onload;  

----------------------- Page 249-----------------------

                                                                                                       •                                                                                                      .  
                                                                                                                                                     12.5        JavaScript                 231  

                                    if  (typeof  window.onload   !=   'function')  {  
                                       window.onload  = func;  
                                    } else  {  
                                       window.onload  = function()   {  
                                           oldonload();  
                                           func() ;  

                                 另外， insertAfter 函数(参见第7 章)也很有用，它与 insertBefore 方法正好对应。 

                                 function  insertAfter(newE lement ,targetEl ement)   {  
                                    var  parent  = target Element. p言rentNode; 
                                     if (parent .lastChild  ==   targetElement)  {  
                                        parent.appendChild(newEle阳lt) ;  
                                     } else  {  
                                        parent.insertBefore(newElement ,targetElement.nextSibling)j  
                                     }  

                                最后还需要一个 addClass 函数(参见第9 章)。 
                      n   n   e  a  e aT F a t  i 、  . I  m L  U  + Ae U  页  f 阳A 4 1 、 阳  { 』t 、 飞 
                                                      FLnHCMNMNUNCHnM  
                  e  w  w  w  s  e s  - e -  a e O H n e  、  s  e c S e a  a e a N r e  m u p n H  r - U v M  2  u  』 自 
                                     nH-1                a             em=m·'u---TK  
                                                             S145++SML  
n         H         U         H             #     4  1       i     τ     e    i 
                                       CFTHF  
                                        m   v  a  " o e m J 、 二  t ' 」  i 
                                          .•  
                                      ·­ 、  飞  ，- I M τ ， M - 」 4 1 I - 牛 」 = 川  H  n = N  -" M ; a 、 e d n  q a 川  v 吨 吨 d j 飞  ， q - 《 L ' ' 

                                    V  4 U  1 m A 4 m  e f H n e a 4 1 e 
                                                         ammmmmaTLU  
                                    d  lJc d t d q L ·      H  d M    -    A d 
                           咱 』  白  』 A 白 」 白  在  自e n L d  q 喃 F L 」 a 』 ' i s r 自 户 q 4  、 1 a  s 、 - ， s ι ' - i O 、 面 L 牛 p 」 毗  rd 、 盹 

                                       e  a  E m 川 内 中 L ， 4 1 川  d U 气 F t ι L r   、 
                                     2 
                               F  F  -哈  1JJ1、 川    ·                      J 」   d 

                           Z  J l 

                                      司  口 同     向 ， 叫 扣 寸 斤 」         守 品 4      川                 」     川 川 认     结   束    的          由     标   签   之  … 前       添  川 响  '   个                  标 
                                                                                                                                     ku                                                        +L  
                                                                                                                                    ,, 
                                                                                    F ' 
                                                                                                              +L  
                                                    、             1         国 卢                                                                                         H n            产   - μ  n 
                                                                                                                                                                                    <            > 
                                                                                                                                                                                      hb  Fi  
                                               · γ '                             1                    Q         m 
                                                                                                                                  <    nu    > 
                                                                          同 川                      n 
                                                                                                         X  
                                                                               内 盟 
                                 吨             咀                                    巾 
                                                                                                    u 
                                                                  i 
                                          ←                                                                                                                                            u - 
                                                                                                                                   I  
                                 3 r 、 ,  f M F 里 / 』 ， l         l ­   r " M -   川 v  r 、         川  」         川                         v                            H  凹 

                        签: 
                                    ~、 

                                    </article>  
                                    <script  src="scripts/global. js飞</script> 
                                 </body>  
                                </html>  

                                这样，站点中的每个页面都将包含 gl obal.js 文件，而其中的函数也可以在这些页面里共 

                        享了。 

                                 实际上，还需要向 globa'l  . js 文件中添加一个函数，就是下一节我们要写的 highlightPage。 

                         12.5.1            页面突出显示 

                                每当我们基于模板页面创建→个新页面时，都要向<article>元素中插入标记。对你要设计的 

                        站点而言，这一部分正是每个页面之间不同的地方。 

                                理想情况下，还应该更新每个页面<nav>元素中的链接。比如，如果当前页面是index.html ， 

                        那么导航里面就没有必要添加指向当前index.html 页面的链接了。 

                                但在实际的网站开发中，不太可能一页一页地编辑导航链接。更常见的做法是通过服务器端包 

                        含技术，把包含导航标记的片段插入到每个页面中。这里我们就假设服务器端会包含下列代码块: 

                                                                              •  

                                                                                       --....                                                                             .  

----------------------- Page 250-----------------------

               232        第 12 章综合示例 

                  <header>  
                     <img   src="images/logo.gif"   alt="Jay  Skript  and  the  Domsters"    1>  
                     <nav>  
                       <u l>  
                          <li><a   href="index.html">Home</a></li>  
                          <li><a  href=飞bout .html">About</a></li> 
                          <li><a   href="photos .html">Photos</a></li>  
                         <li><a  href="live.html">Live</a></li>  
                         <li><a  href="contact.html">Contact</a></l i>  
                       </ub  
                     </nav>  
                  </header>  

                  服务器端包含可以使用 Apache Server Side Includes   ( SSIs )、  PHP、                            ASP，或者其他服务器端 

            斗五兰f 
            b仨J S:骂。 

                  服务器端包含的优点是可以把重用标记块集中保存。这样，等到以后要更新页面头部或者导 

            航链接时，只要修改一个文件就可以了。但集中保存的缺点，就是不能在每个页面中自定义这 

‘  
            个块。 

                  无论如何，至少当前页面的导航链接还是应该突出显示的。通过突出显示，访客就能知道自 

            己"现在在这里"。 

                  修改color.css 文件，添加为 here 类定义的样式: 

                  header  nav  a.here:link ,  
                  header  nav  a.here:visited ,  
                  header  nav  a.here:hover ,  
                                                                                                         •  
                  header  nav  a .here:active  {  
                     color:  #eefj  
                    background - color:  #799j  

                  为了应用刚刚定义的颜色样式，为指向当前页面的导航链接添加here 类，如下所示: 

                  <a   href="index.html"  class="here">Home</a></li>                                                   F  

                  如果使用服务器端包含的话，要做到这一点可就不容易了。一般来说，服务器端技术应该为 

            每个页面创建正确的标记。但实际情况却并非始终如此。 

                  JavaScript 这个时候就能派上用场了。 

                  在这个例子中， JavaScript 是最后一招了。如果能在标记中直接添加 here 类，当然最好了。 

            但是，如果控制不了标记，就只好求诸JavaScript 了。 

                  首先，删除已经添加到导航链接中的所有 class 属性。然后，编写一个hightlightPage 函数， 

            完成下列操作: 

                  (1)取得导航列表中所有链接g 

                  (2) 循环遍历这些链接g 

                  (3) 如果发现了与当前URL 匹配的链接，为它添加 here 类。 

                  同往常一样，先在函数中添加检查要使用的DOM方法的代码。此外，还要检查各种元素是 

            否存在。 

                  function  highlightPage()   {  
                     if  (!document.getElementsByTagName)  return  falsej  
                     if  (!document.getElementByld)  return  falsej  

                   •  

                                         •  

----------------------- Page 251-----------------------

                                                                                                                                                                         12.5           JavaScript                          233  

                      』  r 川 u  』 n a w H J       」                            咱                          ，  、 ‘ ， ，   n i   U A     ，  ，  ， ‘ 、 
                                                                                                                       'nH  
                                                             r  i 牛 τ e  E  F             牛   ρ  I  T 
                                                                            +Lr                 Ru--VJ-P  
                                                                                                          M 
              -  ·  U              3 p a e                                                b σ  ' · a - 
                                2u2uvvvw  
                     arTarT  
                     ­   」  白 a 」  自                H J L E  F 1 U H  =  」 H 白 n  也 』  σ  白 』 自 a  H  n   J C  N M b σ  ， 」 『 白 句 ρ   . '  γ 
                                       T-r-:i                                                     VJqdT'  
                                                     on5e                            mze4·                                 ev  
                        rr                                  mfL                                                 me                         -P  
                                                                               i 
                    。 哇  」 白 」  m  e i τ  - - H n u       ·     L           d  E  S  T  」  F L   。   、 m  川 d     、   川     d 
                                                                     -nunvbz  
                 、      ，  ，                          牛             、 。        品                                        '   ·   』 
        A -  ·  v  、 v  ‘ -  ， · H  n ， ， H 、  n a ‘ H = -  ·  ra 」 u  n  u  h  =俨 t  川 e e l M m  2 m  L u H  H n H a n  D n d 『 
                                            -LHn  
                                                                                                    』 
                                                                            - 
                                                  』                                                                         / 飞 
                                                                                                                             ， 
                                                                                        中 
                                                                            ptu  
                            u  2 J  c  d 、 』 白 t + 口 n 巨 u  l 2 α ­  - 3 J B 、 品 L L 』 H  白 n i 咱 L 」 M  2   川   1 、    a 

            取得导航链接，然后循环遍历它们: 

             var  links  = navs[o].getElementsByTagName(" a ");  
             var  linkurlj  
             for  (var  i=o;  i<links.length;  i+干) {  

            接下来，要比较当前链接的 URL 与当前页面的 URL。要取得链接的 URL，可以使用 

 getAttribute( 哨ref") ;_                                而要取得当前页面的URL，则可以使用川ndow.location_href。 

             linkurl  =  links[i].getAttribute("href");  

            JavaScript 为比较字符串提供了很多方法。其中， indexOf 方法用于在字符串中寻找子字符串 

 的位置: 

            string.indexOf(substring)  

            这个方法返回子字符串第一次出现的位置。我们在这里只想知道某个字符串是否被包含在另 

 一个字符串里面，是否是当前URL里的链接URL。 

             currenturl.indexOf(linkurl)  

            如果没有匹配到， indexOf 方怯将返回-1 。如果返回其他值，则表示有匹配。如果indexOf 方 

 法不返回-1 ，那么就可以前进到函数的最后一步了: 

             if (window(.location.href.indexOf(linkurl)  !=  -1)  { _  

                                                                                                                                                                                     •  
            此时的链接一定是指向当前页面的链接，因此就给它添加here 类: 

            links[i].className  =  "here";  

            剩下的代2码就是关闭 if 语句、关闭 for 循环和关闭 function 定义的花括号了。最后，使用 

 addLoadEvent 函数调用 highlightPage。 

            function  highlightPage()   {  
                 if (!document.getElementsByTagName)  return  false;  
                 if  (!document.getElementByld)-return  false;  
                 var  headers  =  document.getElementsByTagName('header');  
                 if  (headers.length  ==   0)  return  false;  
                 var  navs  = headers[o]wgetElementsByTagName('nav');  
                 if  (navs.length  ==   0)  return  falsej  
                 var  links  =  navs[o] .getElementsByTagName(" a ");  
                 for  (var  i =o;   i<links.length;  i++)   {  
                 var  linkurlj  
                于or  (var  i=o;  i <links.length;  i++)   {  
                     linkurl  =  lirtks[í].getAttribute("href")j  
                     if (window.location.href.indexOf(linkurl)   !=  -1)  {  
                         links[i].ζlassName =  "here";  
                、 ， ， ‘ 、 

         ， ，  lJa ， ‘ 

                                    、 ‘ ， ，                           、 、 
                          -AU  
                , 
                 』  ' '    L  』  F         吨 -  』 
                                          lnH       1i  tnH  
                                     牛             -  · 、 -                                                                                                                                _ ,  
                                                            &L  
                                                               nv·  
               U H  u n        』 白 
               HU       2"     V  
                                                                 b σ 
                                    nH         Ob       ob       2u  e  
                                                                          ..  
                                                                        E 
                                                H 
                                     L 
                                           - a                        ， ， ,  

           保存包含这个函数的 global.js 文件。刷新 index.html 之后，你就会看到 Home 链接突出显 

示了，如图 12-8 所示。 

----------------------- Page 252-----------------------

   234          第 12 幸综合示例 

  •  

                                                              图 12-8 

                                                                                                                      、 

      利用 highlightPage 函数，还可以达到一箭双雕的目的。 

       通过给每个页面的 body 元素添加 id 属性，可以为每个页面应用不同的样式。为了给每个页 

面添加独特的 id 属性，可以取得并使用当前链接(即添加 here 类的链接)中的文本。但需要使 

用 JavaScript 的toLower臼se 方法把该文本转换成小写形式: 

      var  linktext  =  links[i]. lastChild.nodeValue.toLowerCase();  

      这样就取得了当前链接最后一个子元素的值，也就是链接的文本，然后把它转换成小写形式。 

如果链接中的文本是 "Home" ，那么 l inktext 变量中保存的值就是' home" 。                                                         通过下面的语句就可 

以把这个变量的值设置为 body 元素的 id 属性了: 
                                                                                                                        ,  
      document.body.setAttribute("id" ， li毗text) ;  

      这条语句就相当于在<bod沪标签中添加了 id=咄ome"。 

      现在的 highlightPage 函数如下所示: 

      function  highlightPage(  href  )  {  
      if (!document.getElementsByTagName)  return  false;  
         if (!docume时.getElementByld) return  false;  
         var  headers  =  document.getElementsByTagName('header ' );  
         if (headers.length  ==       0)  return  false;  
         var  navs  =  headers[o].getElementsByTagName('nav');  
         if (navs . le鸣th ==   0)  return  false;  
         var  links  =  navs[o].get ElementsByTagName("a ")j                   、 
         for  (var  Î=o;   i<links.le鸣thj  i++)   {  
         var  linkurl ;  
         于or (var  Î=Oj   Î<links.length ;   Î++)   {  
            linkurl  =  links(i].getAttribute( 飞ref") ;  
            if  (window.locat ion.href.indexOf(linkurl)   !=  - 1)  {  
              links[i] . className  =  "here";  
              var  linktext  =  l inks[i].lastChild.nodeValue.toLowerCase();   .  
              document . body.setAttribute( 飞d" ， linktext); 
            }  
         }  
      }  
      addLoadEvent(highlightPage);  

----------------------- Page 253-----------------------

                                                               12.5  JavaScript    235  

     于是， i ndex. htm 1  文件的 body 元素就会有一个值为咱örne" 的 id，         about. html 文件中的 id 就是 
 飞bout" ， photos. htm 1 文件中的 id 将是市hotos" ，依次类推。 

     新加入的这些标识符都可以成为 CSS 中的挂钩。例如，可以利用这些 id 为不同页面的头部 

应用不同的背景图像。 

     接下来为每个页面制作一幅图像，大小为250 x 250px。也可以使用我已经做好的:lineup.gif、 

basshead.gif、 bassist .  gif 和drummer.gif，把它们都放到 1mages 文件夹中。 

     然后就可以更新 layout.css 文件，添加backg.round-image 声明: 

     #about  header  {  

      background-image:   url ( ../images/basshead .gif);  

      background-image:  url(../images/bassist.gif);  

     #ιontact header  {  
      ba ckground-image:  url( ../images/drummer .gi f);  

    如此一来，每个页面的头部就会应用不同的背景图像了。 

 12.5.2   JavaScript 幻灯片 

    主页还需要美化一下。毕竟，大多数访客都要先访问主页，在其中添加一些炫酷功能是非常 

有必要的。第 10 章讨论的JavaScript 幻灯片用在这里正合适。 

    在"i ntro"那一段文字中，有指向站点其他页面的所有链接。如果在访客把鼠标放到相应链接 

上的时候，能够让他们得到有关页面的一点信息应该不错。 在这里，可以显示相应页面头部图像 

的缩小版工 

    把每一幅图像缩小为 150 x 150px，然后合并为 750px 长的一张图，命名为 slideshow.gif。 

把这张图放在 1mages 文件夹中。 

    组合后的图像如图 12-9 所示。 

                                        图 12-9 

    为了实现幻灯片功能，需要更新 global.js 文件。 先把第 10 章中定义的 moveElement 函数复 

制过来: 

    function  moveElement(elementIDJfinal_xJfinal_Y Jinterval)   {  
      if  (! docum ent . get ElementByld )  r eturn  false;  
      i干 (!document. getElementByld(elementID)) return  false;  

----------------------- Page 254-----------------------

                                                                                                                                                                   ,  

                        236           第 12 章综合示例 

                               var  elem  =  document.getElementByld(elementID);  
                               if  (elem.movement)   {  
                                  clearTimeout(elem .movement);  
                               }  
                               if  (!elem.style .left)  {  
                                  elem.style .left  =   "opx" j  

                               if (!elem.style.top)  {  
                                  elem.style .top  =   "Opx";  
                               }  
                              var  xpos  ~  parselnt(elem.style.left);  
                              var  ypos  ~ parselnt(elem.style.top);  
                               if (xpos  ==   final_x  踊 ypos ==  final_y)   {  
                                 return  truej  
                               }  
                               if (xpos  < final_x)   {  
                                 var  dist  =问ath .ceil ((final_x -  XpOS)/10)j  
                                 Xpos   =  xpos  +  dist;  

                      -‘·  

                              if  (xpos  > final _x)   {                                                           .  
                                                                                                              •  
                                 var  dist  =  Math .ceil((xpos  -          final_x)/10)j  
                                 xpos   =  xpos   -   dist;  

                              if (ypos  < final_y)   {  
                                 vai dist  =  Math.ceil((final_y   -  ypos)/l0);  
                                 ypos   =  ypos  +  dist;  

                              i于 (ypOS 〉  final-y){ 
                                 var  dist  =  Math.ceil((ypos  -          final_Y )/10);  
                                 ypos   =  ypos   -   distj  

                              elem.style.left  =  xpos  +  "px";  
                              elem.style.top  ~ ypos  +  "px";  
                              var  rep阳ea拭t =  "moωveE曰lem肥n肥en川1怆t('''+吨elem肥n陀l陪en时l比t口I四D+俨"'3J'飞f任in阳al_x+" ，"+刊fi讪n阳a址l_y+ν"飞''J'"~'+吐in时te盯rv旧alμ+"γ)" 
                              elem.movement  ~  setTimeout(repeat ,interval);  

                           现在应该创建幻灯片元素并准备相应链接了。在此，我们把幻灯片直接放在文档中的"intro" 

                    段落后面。 

                           function  prepareSlideshow()   {  
                           if (!docωument.getE日lementsByTagN阳am陪时e叫) return  false;  
                           if (!docαωUIT阳『 
                           if (! docωument.getElementByld("intro")) return  false;  
                           var  intro  =  document.getElementByld("intrσ");  
                           var  slideshow  =   docωu川IT阳I 
                           slideshow . setAttribute("id" , "slideshow");  
                           var  preview  = document.create Element("img");  
                           preview.setAttribute("src气"images/slideshow.gif"); 
                           preview.setAttribute("alt" ,"a  glimpse  of  what  awaits  you");  
                          preview. setAttribute(" id" , "preview");  
                           slideshow.appendChild(preview);  
                          in sertAft er(slideshow ,intro)j  

                          接着循环遍历"intro"段落中的所有链接，并根据当前鼠标所在的链接来移动prev1ew 元素。 

                   比如说，如果链接的 href 值中包含字符串"about.html" ，就把 prev1ew 元素移动到二150px 的位置 

                   上;如果链接的 href 值中包含字符帘'photos.html " ，就把prev1 创元素移动到-30Opx 的位置上， 

!J寻 

                   依次类推。 

----------------------- Page 255-----------------------

                                                                                           12.5    JavaScript          237  

       为了让动画效果看起来很帅，给moveElement 函数传人仅为5 毫秒的 interval 值: 

         var  links  =  intro.get ElementsByTagName("a") j  
         var  destinationj  
         for  (var  i=O;   i< links.lengthj  i++)   {  
            links[i].onmouseover  = fu时tionO {  
              destination  = this.getAttribute("href");  
              if  (destination . indexOf("index .html")   !=  -1)  {  
                 moveElement("preview"  ,o,o,s);  
               }  
              if  (destination.indexOf(飞bout.html")  ! =  -1)  {  
                 moveElement("preview" , -150 ,0, S)j  
              }  
              if  (destination.indexOf("photos.html")   !=  -1)   {  
                 move Element("preview",- 300,0 , S)j  
              }  
              if  (destination.indexOf("live.html")   !=  -1)   {  
                 moveElement("preview"  ,-4S0 ,0 ,5);  
              }  
              if (destination.indexOf("contact.ht ml")          !=  -1)  {  
                 moveElement("preview勺-600， 0， 5)j 

       还要通过addLoadEvent 调用这个函数: 

       addLoadEvent(prepareSlideshow);  
                                                                                                                 .  
      保存global.js 文件。 

       当然，还得更新样式，在 layout.css 中添加如下声明: 

       #slideshow  {  
         width :  lS0pXj                                                                                                  、 

       J  height:150px;  
         position :  relativej  
         overflow:  hiddenj  
       }  
       #preview  {                         •  
         position:  absolutej  
         border-width :  0;  
         outline-width:  0;  

      在浏览器中刷新 index.ht时，试一试幻灯片的效果。 

      看起来还不错。要是把动画效果放到一个小窗口里，就更完美了。 

      创建一幅 150 x  150悍的图像，它的绝大部分都透明，只有四个圆角是与内容 div 颜色相同 

的。把它命名为 frame .gi.f并保存在 images 文件夹中。 

      把下列代码添加到 global.js 中的 prepareSlideshow 函数中，放到创建 slideshow 元素的代码 

后面: 

      var  frame  =  document.create Element("img")j  
      于rame.setAttribute(l         " ， "images/frame . gif"); 
                               src 
      frame . setAttribute("alt" ,"")j  
      frame.setAttribute("id" ，吁zame"); 
       slideshow .appendChild(frame);  

----------------------- Page 256-----------------------

•  

                                                                            •  
               238  
                            第 12 章综合示例 

                  为保证这个小窗口出现在动画之上，还要在 layout.css 中加入如下代码: 

                  #frame   {  
                     position:  absolute;  
                     top:  0;  
                     left:  0;  
                     z-index:  99;  

                  刷新 i ndex.html ，再试试幻灯片效果，现在图像应该会出现在小窗口里面了。 

                  目前，访客的鼠标放到" i ntro." 段落中的链接上时会触发幻灯片动画。如果想让导航div 中的 

           链接也能触发幻灯片，可以把下面这行代码: 

                  var  l inks  =  intro .get ElementsByTagName("a");  

                  改为: 

                  var  links  = document . getElementsByTagName(γ);  
                                                                                                       .  
                  完成后的 prepareSlideshow 函数如下所示: 

                  function  prepareSlideshow()   {  
                     i f   (!document . getEle阳ltsByTagName) return  false;  
                     if  (!document. getElementByld)  return  false ;  
        e  
                     if  (! docume nt  .get ElementByld("intro"))  return  false;  
                     var  i ntro  =  document.get ElementByl d("intro");  
        ‘            var  slideshow  =  document.create Element("div");  
                     slideshow .setAttribute("id"          ， 飞lideshow") ;  
                    var  frame  =  document.createElement("img");  
                     frame.setAttribute("src" ,"images/frame.gif");  
                     frame.setAttribute("alt" ,"");  
                     frame. setAttribute(" id" ，吁ra『『leH); 
                     slideshow.appendChild(frame);  
                    var  preview  =  docu阳lt.createElement("img"); 
                     preview . setAttri bute("src" , "images/slideshow .gif") ;  
                     preview.setAttribute("alt" ,"a  glimpse  of  what  awaits  you");  
                     previ ew. setAttribute("id" , "preview")j  
                     slideshow . appendChild(preview) j                                                                          .  
                    insertA干ter(slideshow， intro); 

                    var  links  =  document.get ElementsByTagName( "a");  
                    var  destination;  
                    for  (var  i=o;  i<links .length;  i++)   {  
                       l inks[i].onmouseover  =  funct ion( )   {  
                          destination  = th i s .getAttribute("href")j  
                          if (destination .indexOf("index . htm l''')  !=  -1)  {  
                             move Element("preview" ,O,o, s);  
                          }  
                          if  (destination.indexOf("about .html ")   !=  - 1)  {  
                             moveElement("preview"  , -lS0 ,0, S);  
                          }  
                          if (destination~indexOf("photos.html")  !=  -1)  {  
                             move Element("preview" , -300 ,0, S);  
                          }  
                          if  (destination.indexOf( "live .html")   !=  - 1)  {  
                             moveElement("preview"  , -4S0 ,O,S);  
                          }  
                          if  (destination .indexOf ("contact .html ")   !=  - 1)  {  
                             moveElement("preview" ，帽 600， 0， S); 

                                                                •  

----------------------- Page 257-----------------------

          •  

                                                                                                               12.5      JavaScript               239  

       }  
       addloadEvent(prepareSli deshow)j  

       这样，把鼠标放在导航链接上，也将会触发幻灯片，如图 12-10 所示。 

                                                          装F-H                 '      fZI           牛      叫可1 警备 誓 

  •  

                                                                      图 12-10 

                                                                                                                                                                     •  

12.5.3           内部导航 
                                                                      ,  

       站点中的下一页是About页面。在about.html 的<article>元素中添加如下标记: 

       <h1>About  the  band</h1>  
       <nav>  
                                                       •  
          <u l>  
             <li><a   href=l#j ay ">Jay  Skript</a></li>  
             <li><a  href="#domsters">The  Domsters </a> </li>                                                                        •  
          </ul>                                                       .  
       </nav>  
       <section  id=丁ay"> 
          <h2>Jay  Skript</h2>  
             <p>Jay  Skript  is  going  to  rock  your  world!</p>  
             <p>Together  with  his  compatriots  the  Domsters ,  
          Jay  is  set   for  world  domination.   Just  you  wait  and  see . </p>  
     ‘"      <p>Jay  Skript  has  been  on  the  scene  since  the  mid                  1990s.  
   •      His  ta1ent  hasn't  a1ways  been  recognized  or  ful1y  appreciated.  
          In  the  ear1y  days ,  he  was   often  unfavorably  compared  to  bigger ,  
          similar1y  named  artists.  That's  a11  in  the  past  now. </p>  
       </section>  
       <section  id="domsters">  
          <h2>The  Domsters</h2>  
             <p>The  Domsters  have  been  around ,  in  one  form  or  another ,  
          for  almost  as   10ng.  It's  on1y  in  the  past  few  years  that  the  Domsters  
         ' have  settled  down   to  their  current ,  stable  l ineup .  
          Now   they're  a  rock-solid  bunch:   methodica1  and  dependable.</p>  
       </section>  

----------------------- Page 258-----------------------

                     240           第 12 幸综合示例 

                                                                                                                                                               、 

                         然后， About 页面如图 12-11 所示。 

•  

                                                                                                                                                           、 
                                                                                                                                                           t  

                                                                                                                                                 \  

                                                                                      图 12-11 

                        似乎还可以，但就是页面有点长了。知道为什么<nav>元素中包含内部链接吗?就是为了解 

                 决这个问题。单击<nav>中的每个链接，都会跳到带有相应 id 属性的<section>。 

                        而使用 JavaScript 和 DOM，还可以选择性地每次只显示其中一个部分 (section) 。把下面这 

                 个函数添加到 global.js 中，它能够根据指定的 id 显示相应的<section>，同时隐藏其他部分: 

                         function  showSection(id)  {  
                            var  sections  = document.get ElementsByTagName("section")j  
                            for  (var  i=O;   i<sections.length;  i++  )  {  
                               if (sections[i].getAttribute("id")  !=  id)   {  
                                  sections[i].style.display  =  "none勺 
                               } else  {  
                                  sections[i].style.display  =  "block";  

                        这个showSection 函数的用途是修改每个部分的display 样式属性。除了与作为参数传入的 id 

                 对应的部分，其他部分的display 属性都将被设置为"none" ，而与传入id 对应的那个部分的display 

                 属性则被设置为"block" 。 

                        然后，还需要在<article>中的<nav>所包含的链接被单击时调用 showSection 函数。 

                        创建一个名为 preparelnternalnav 的函数，先从循环遍历<article>中的<nav>所包含的链接 

                 开始: 

----------------------- Page 259-----------------------

                                                                              12.5   JavaScript      241  

      function  preparelnternalnav()  {  
        if (!document .getElementsByTagName)  return  falsej  
        if (!document. getElementByld )  return  falsej  
        var  articles  =  document.get Element sByTagName("article")j  
        if (articles .length  ==   0.)  ;工eturn falsej  
        var  navs  =  articles[o].get EleìnentsByTagName("nav")j    •  
        if  (navs .length  ==   0.)   return  falsej  
        var  nav  =  navs [o. ]j                       •  
        var  l inks  = nav.getElementsByTagName("a")j  
        for  (var  i =o.j   i<links. lengthj   i++  )  {  

      每个链接的 hr甘属性中都包含对应部分的 id ，开头的" 

 的 1叫d 值，可以使用 split 方法。这是根据分隔符把一个字符串分成两或多部分的一种便捷方式: 

      。rray = string. split (character)  

     这里，我们想要的是"#"后面的字符串，因此可以以" 

个元素: 第一个元素是 " 

符。还记得吧，数组中第一个元素的索引是0 ，而我们想要的是数组中的第二个元素，它的索引 

是 1 。 

      va;r  sectionld  =  links [i].getAttribute("href"). split("#")[ l]j  

     这样就可以把"#"后面的字符串提取出来并保存到 sectionld 变量中。 

     再添加一个简单的测试，确保真的存在带有相应id的元素。如果不存在，则继续下一次 

循环。 

      if  (!document.getElementByld(sectionld))  continuej  

     在页面加载后，需要默认隐藏所有部分。下面这行代码可以解决问题: 

      document.getElementByld(sectionld).style.display  =  飞one"; 

     接下来可以给链接添加 onclick 事件处理函数，以便链接被单击后，把 sectionld 传给 

showSection 函数。但这里存在作用域问题。因为变量 sectionld 是一个局部变量，它只有在 

preparelnternal nav 函数执行期间存在，等到了事件处理函数执行的时候它就不存在了。 

     要解决这个问题，可以为每个链接创建一个自定义的属性。比如把这个属性命名为 

desti nation ， 然后把 sectionld 的值赋给它: 

      links[i].destination  =  sectionldj  

     这个属性的作用域是持久存在的。回头，我们可以在事件处理函数中再查询这个属性: 

      links[i].onclick  = function()   {  
        showSection(this .destination)j  
        r eturn  falsej  
                                                        •  

     为preparelnternalnav 函数加上几个花括号， 
                                                         结束它的定义。再通过addLoadEvent 函数调 

用它: 

     addLoa dEvent(preparelnternalnav)j  

     以下是global.js 中的 preparelnternalnav 函数: 

----------------------- Page 260-----------------------

    242           第 12 章综合示例 

        function  preparelnternalnav()   {  
           if  (!document .getElementsByTagName)  return  false;  
           if  (!document.getElementByld)  return  false;  
           var  articles  = document.get ElementsByTagName( "article");  
           if  (articles.length  ==   0)  return  falsej  
           var  navs  =  articles[o].getElementsByTagName(飞av"); 
           if (navs.le鸣th ==   0)  return  falsej  
           var  nav  =  navs[o]j  
           var  links  =  nav.get ElementsByTagName("a")j  
           for  (var  i=Oj   i<links .lengthj  i++  )  {  
              var  sectionld  =  links[i].getAttribute("href").split("#")[l]j  
              if  (!document.getElementByld(sectionId))  continuej  
              document .getElementByld(sectionld).style.display  =  "none";  
              links[i].destination  =  sectionldj  
              links[i].onclick  = funct i on()   {  
                 showSection(this .destination)j  
                return  false;  
              、 
            J P - 

           、 
         J a s 

       ，  ‘ 、 
                                                                                               •  

        J 

        addLoadEvent(preparelnternalnav)j  

       在浏览器中打开about.html ，测试一下刚才实现的功能。单击一个内部链接，应该只会显示 

相关的部分。图 12-12 只是显示了一个部分的About 页面。 

                                                   …一一-…..一…一一一- 
                                                         1看F 

                                                                                                                                        ,  

                                                                                                                    .  

                                                      ，、" 

                                                  n邸勘晰、 

                                                                    图 12-12 

       页面越长，这个功能的效果就越明显。例如，要是有一个常见问题页面，那么每个问题都可 

以作为内部链接来处理。而单击一个问题，就会显示出与该问题对应的答案，与此同时其他问题 

的答案并不显示。 
                                     ,  
                                     ,  

 12.5.4         JavaScript 图片库 

       接下来我们来制作 photos.html ，这个页面是使用 JavaScript 构建图片库的理想之所。 

----------------------- Page 261-----------------------

                                                                                   12.5    JavaScript        243  

      客户提供了 Jay Skr帜和Domsters 演出的四张照片，大小为400 x 300px:  
      口 concert.jpg  

      口 bassist.jpg 

      口 guitarist.jpg 

      口 crowd.jpg 

      在 1mages 文件夹里创建一个名为 photos 的文件夹，把这四张照片放到里面。再为每张照片 

分别创建 100 x 100px 的缩略图: 

      口 thumbnai1一concerLjpg 

      口 thumbnai1_bassist: jpg 

      o  thumbnai l_gui tari st. jpg  
      o  thumbnaî 1_ crowd. jpg  

      把这些照片也放在photos 文件夹中。 

      创建一组链接，指向全尺寸照片。为这个列表指定 id 为"ì magega 1 ery" 。在每个链接中添加一 

个 
   <1 附>标签，各个标签的 src 属性分别指向不同的缩略图。 

      <h1>Photos  of  the  band</h1>  
      <u1   id="imagega11ery">  
        <1i>  
          <a   href="images/photos/concert.jpg"  tit1e="The  crowd  goes  wild">  
             <img  src="images/photos/thumbnail_concert.jpg"  alt="the  band  in  concert"  />  
            </a>  
         </1 i>  
         <li>  
            <a   href="images/photos/bassist.jpg"  title="An  atmospheric  moment ">  
              dmg  src="images/photos/thumbnail_bassist.jpg"  alt="the  bassist"  1>  

         </li>  
         <1i>  
            <a   href="images/photos/guitarist. jpg"   tit1e="Rocking  out" >  
              <img  srζ="images/photos/thumbnail_guitarist.jpg" alt="the  guitarist"  />  
            </a>  
         </li>  

            <a   href="images/photos/crowd.jpg"  tit1e="Encore!   Encore!">  
              <img  src="images/photos/thumbnail_crowd.jpg"  alt="the  audience"  />  
           </a>  
         </li>  
       </u l>  

      把这组链接放到 photos.htm1 的<artic1e>元素中。 

     更新 layout.css 文件，让缩赂图片从垂直排列变成水平排列(如图 12-13 所示)。 

      #imagega11ery  1i  {  
        disp1ay:   in1ine;  

     为了让图片库的脚本正常运行，还需要再制作一个占位符图片。把这个图片命名为 

placeho1der.gif 并放到 1mages 文件夹中。 

     接下来就可以把第6 章和第7 章编写的图片库脚本放到 scripts 文件夹的globa1.js 文件中。 

   、 

----------------------- Page 262-----------------------

       244          第 12 章综合示例 

                                                         ?矿叫阿忡……………问时…，                   .........…叫叫叫71() O ~ 

.                  、 

                                                                    图 12-13 

          function  showPic(whichpic)  {  
             if  (!document.getElementById("placeholder"))  return  true;  
             var  source  =  whichpic .getAttribute("href");  
             var  placeholder  =   document.get ElementById(lplaceholder ");  
             placeholder.setAttribute( 飞rc" ， source); 
             if  ( !document.getEl ementById( "description" ))  return  false;  
             if (whichpic.getAttribute("title"))  {  
                var  text  = whichpic .getAttribute("title");  
             }  el se  {  
                                                                                                                                   .  
                var  text  = "";                                                                           .                        •  

             }  
             var  description  =  document . getElementById(" descripti on");  
             if  (description.firstChild.nodeType  ==  3)  {  
                description . firstChild.nodeValue  = text;  
             }  
             return  false;  

          function  preparePlaceholder()   {  
             if  (! document . createElement)  return  false;  
             if  (!docum ent  . createTextNode)  r eturn  false ;  
             if  (!docum ent.getElementByI d)  return  false;  
             if (!document.get ElementById("imagegallery"))  return  false;  
             var  placeholder  =  document.createElement("img");  
             placeholder.setAttribute("id" ,"placeholder");  
             placeholder.setAttribute("src" ,"images/placeholder.gif");  
             pl acehol der.setAttribute("alt " ,"my  image  gallery");  
             var  description  =  document . createElement("p");  
             description.setAttribute("id" , "description");  
             var  desctext  =  docωu川』川川『町阳『 
             description.appendChild(desctext);  
             var  gallery  =  document.get ElementById("imagegaller y");  
             insertAfter(description ,gallerY)j  
             insertA手ter(placeholder， description); 

----------------------- Page 263-----------------------

                                                                                                                                                                            。 
                                                                                                                                                     es'&   Z      yJ              - 
                                                                                                                                                      句 
                                                                                                                                                                                       & 
                                                                                                                                                                              ν p 
                                                                                                                                                                        v  
                                                                                                                                                                      a a          n  
                                                                                                                                                                                     p  
                                                                                                                                                                            δ 
                                                                                                                                                           J                           B.  
                                                                                                                                                      ­  '  ， 
                                                                                                                                                                                                   245  

           .function  prepareGal1ery()   {  
               if (!document .getElementsByTagName)  ~eturn falsej  
               if  (!document . get~lementByld) return  fa l sej  
               if (! document.get ElementByld ( "imagegallery"))  return  fa l sej  
               var  gallery  =  document . getElementByld("imagegallery")j  
               V注 lin\<.ß  =  '6all町'ý . 巴巴~'t.leTh巳n'ts~'ý\a'6~aTh巳(." a'丁:                                                                                                                   •  

                for   (  var  i=Oj   i   < links.lengthj  i ++ )  {  
                    links[i].onclick  =  function()   {  
                        return  showPic(this);  

            }  

           只有一处微小的变化:                                        descri pt i on 中的文本被放到了 placeholder 图像的上方。 

           在浏览器中打开photos.html ，试验一下效果(如图 12-14 所示)。 

                                                      • *-.y- I# 金会~ 
            .  
           •  

               •  
              ‘  

                                                                                                                                                                                                 、 

                                                                                                                                                                              ,  

                                                                                               图  12-14 

 丁 2.5.5               增强表格 

          客户给我们提供了 Jay Skript 和Domsters 的巡演日程。每场演出，都有一个日期 ( data) 、一 

个城市 (city)和一个地点 (venue) 。                                                         显然，这是表列数据。因此， Live 页面应该包含一个巡演 

表格。 

----------------------- Page 264-----------------------

         ,  

              246           第 12 章综合示例 

                  <hl>Tour  dates</hl>  
                  <table  summary="when  and  where  you   can  see  the  band">  
                     <thead>  
                     <tr>  
                        <th>Date</th>  
                        <th>City</th>  
                        <th>Venue</th>  
                     </tr>  
                     </thead>  
                     <tbody>  
                     <tr>  
                        <td> ]une   9th</td>  
                        <td>Portland ,  <abbr  title="Oregon">OR</abbr></td>  
                        <td>Crystal  Ballroom</td>  
                     </tr>  
                     <tr>  
                       <td>)une  loth</td>  
                       <td>Seattle ,  <abbr  title="Washington">WA</abbr></td>  
                       <td>Crocodile  Cafe</td>  
                                                                                                      e  

                     </tr>  
                     <tr>  
                     .  <td>)une  12th</td>  
                       <td>Sacramento ,  <abbr  title="California">CA</abbr></td>  
                       <td>Torch  Club</td>  
                     </tr>  
                    <t r>  
                       <td>]une  17th</td>  
                       <td>Austin ,  <abbr  title="Te文as">TX</abbr></td> 
                       <td>Speakeasy</td>  
                    </tr>  
                     </tbody>  
                  </table>  

                 把这个<table>放到 1 ive .html 中的<articl e>元素内。 

                 接着再在 layout . css 中为表格中的单元格应用一些样式: 

                 更新color.css ，为表头和表格选定指定颜色: 
                                                                                                         .  

                 th  {  
                    color:  #edc;  
                    background-color:  #455;  
                  }  
                 tr td  {  
                    color:  #223;  
                    background-color :  #eb6;  

                 在浏览器中打开 live.html 后，可以看到一个普普通通、丝毫没有应用什么脚本的表格(女日 

          图 12-15 所示)。 

                 此时，正好可以把第9 章定义的表格样式化的函数stripeTables 及highlightRows 拿过来使用。 

          还可以把第8 章的 displ ayAbbreviati ons 函数借用过来。 

、 

----------------------- Page 265-----------------------

                                                                                                       12.5      JavaScript              247  

                                                                                                                                                                    •  

       、 
                                                              图 12-15 

把这几个函数全都添加到 global.js 文件中，并通过addLoadEvent 调用它们: 

function  stripeTables(.)  {  
   if  (!document.getElementsByTagName)  return  false;  
   var  tables  =  document.get ElementsByTagName("table");  
   for  .(var  i=O;   i<tables.length;  i++)   {  
      var  odd  =  falsej  .  
      var  rows   =  tables[i].getElementsByTagName("tr");  
      for  (var  j=O;   j<rows.length;  j++)             {  
          if  (odd  ==   true)  {  
            addClass(rows[j] ,"odd");  
            odd  =  falsej                                                                                                                        ,  
          }  else  {  
            odd  =  true;  

function  highlightRows()   {  
   if(!document.getElementsByTagName)  return  fålse;  
   var  rows  =  document.getEle阳ltsByTagName("tr")j 
   for  (var  i=O;   i<rows.length;  i++)   {  
      rows[i].oldClassName  =  rows[i].className  
      rows[i].onmouseover  =  function()  {  
         addClass(this ,"highlight");  
      }  
      rows[i].onmouseout  =  function()  {  
         this.className  =  this.oldClassName  
                                                                                                                                     ·、 

function  displayAbbreviations()   {  
   if  (!document.getElementsByTagName   II  !docu附lt. create Element  
匾.  II  !document.createTextNode)  return  false;  
                                                                                                                                                       国1  

----------------------- Page 266-----------------------

                    、 

                                                                                                                                           .'  

            、 

                         248          第 12 章综合示例 
                                                                                                                                                                 、户， 

                                                                                                         a 
                               var  abbreviations  =  document.getElementsByTagNar叫" bbr")j 
                                if (abbreviations.length  <  1)  return  falsej  
                               var  defs  =  new  ArraY()i                                                                                                              .  
                               for  (var  i=Oj   i<abbreviations.lengthj  i++)   {  
                                  var  current_abbr  =  abbreviations[i]j  
                                   if (curren飞abbr.childNodes.length <  1)  continuej  
                                  var  definition  =  current_abbr.getAttribute(ltitle")j  
                                  var  key  =  current_abbr.lastChild.nodeValuej  
                                  defs[key]  =  definition;  
                                }  
                               var  dlist  =  document.create Element(ldl")j  
                               for  (key  in  defs)  {  
                                  var  definition  =  defs[keY]j  
                                  var  dti tle  =  document. createE1ement (" dt");  
                                  var  dtitle_text  =  document.createTextNode(key);  
                                  dtitle.appendChild(dtitle_text);  
                                  var  ddesc  =  document.createElement("dd");  
                                  var  ddesc  text  =  document.createTextNode(definition)j  
                                  ddesc.appendChild(ddesc_text)j                                                  •  
                                  dlist.appendChild(dtitle);  
                                  dlist.appendChild(ddesc)j  

                               if  (dlist.childNodes.length  <  1)  return  falsej  
                               var  header  =  docωur町『阳 
                               var  header一text =  document.createTextNode("Abbreviations");  
                               header.appendChild(header_text)j  
                               var  articles  =  document.getElementsByTag~ame("article");  
                               if  (articles.length  ==   0)  return  falsej  
                               var  container  =  articles[o]j  
                               container.appendChild(header)j  
                               container.appendChild(dlist)j  
                             }  

                                                 • ‘  

                                                                                                                                                       气 

                            在此， hi gh 1 i ghtRows 和 displayAbbreviations 函数都稍有改动。 

                            口 highlightRows; 没有像以前那样直接应用样式属性，而是使用 addClass 函数添加了hi纠Iight 

                                类。这个类会在用户鼠标悬停在表格行上的时候应用。在应用新类名之前，先把原来的 

                                 c 1 assl阳 

                                把className 属性重置回原来的oldClassName 值。 

                            口 displayAbbreviations: 修改了最后几行代码，因为这里要找的是article 元素，而不是第 

                                8 章 id 为content 的 div 元素。 

                            这两处修改也提醒我们，以前定义的函数仍然需要进一步抽象。比如说，可以为 

                     出splayAbbreviations 函数再增加一个参数，以便指明把新创建的列表添加到哪个元素中。 

                            还要更新 1 ayout. css'，再添加一些样式: 

                               overflow:  hidden:  

                            dt  {  
 j-                            float:  leftj  
jl                          }  
                            dd   {  
                               float:  left j  

----------------------- Page 267-----------------------

                                                                                   12.5    JavaScript        249  

      再更新typography.css: 

      dt  {  
        margin-right:  lemj  

      dd   {  
        margin-right :  3emj  

      最后，在color.css 中为 odd 和 highlight 类添加颜色样式: 

      tr.odd  td  {  
        color:  #223j  
        background-color:  #ec8j  

      tr .highlight  td  {  
        color:  #223j  
        background-color:  #cbaj  

     在浏览器中打开 1 i ve. ht时，看一看增强之后的<table>吧。此时， 偶数行都会有一个 odd 类 

(如图 12-16 所示)。 

                              - a罗 建季 运喜出 

                                                    图 12-16 

12.5.6      增强表单 

     还得为这个站点制作一个很重要的页面，这个页面能够让乐队的粉丝们跟乐手沟通。 

----------------------- Page 268-----------------------

    250       第 12 章综合示例 

        ,  

      想一想，差不多任何网站都会公布一些联系信息，哪怕只是一个电子邮件地址。对眼下这个 

 网站来说，你打算构建一个联系表单。 

      联系表单，和其他任何类型的表单一样，都需要某种服务器端技术来进一步验证并把数据保 

 存到后台数据库或系统中。 Per1、                     PHP、    AS吏以及其他服务器端编程语言都是可选的技术。但我 

 们这个例子不会涉及服务器端脚本，而是会创建一个极为普通的 HTML 页面，向访客显示感谢 

 信息。访客填充的信息也不会发送到哪去(别忘了，乐队是我们虚构的)。假如真有这么一个网 

 站，就必须得有服务器端脚本来处理用户提交的数据，把它们保存到数据库中，或者通过邮件转 

 发给适当的人，然后才显示感谢信息。 

      创建一个文件，命名为 contact.html ，当然这个文件要基于 template.html 来创建，只不过 

 <article>中要包含一个<form>: 

            <label  for="name">Name:</label>  

      恒. placeholder="Your  name"   required="required"  1>  

            <label  for="email">Email :</labe1>  

      卧 placeholder="Your email  address"   required="required"  。 

            <label  for="message">问ess.age: </1abel>  
            <textarea  c01s::"45 "  rows="]"  id="message"  
      恒. name:-"message "  required="required"  
      .. placeh01der="Write  your  message  here." ></textarea>  

      更新 layout.css 文件: 

      label  {  
        display:  b10ck;  

      fieldset  {  
        border:  0;  

      这样，就有一个基本的联系表单，如图 12-17 所示。 

     接下来，再基于 template.html 创建一个新文件，命名为 submit. html 。这一次， <a rticl e>中 

包含了感谢信息。 

      <hl>Thanks!</hl>  
      <p>Thanks  for  contacting  us.  We'11  get  back  to  you  as  soon  as  we   can.</p>  

      这个 submit.html 页面中只包含感谢信息，不处理表单提交的信息，你懂的(如图 12-18 

所示)。 

                                                                                                    、 

----------------------- Page 269-----------------------

                                                                         12.5    JavaScript      251  

                                             图  12-17  

         76408  j   >              .  ~  - .f.ly捺帜线时ThEτOo:'ltS，tel'S                    、 
                                                                                       C二E 

                                                                                  ... j 。在 
          伞'金- 毒药 O ~… 

              一 

                                            图  12-18  

 1 .字段标签 

表单中有三个字段: name、                email 和message。每个字段都有一个对应的<label>标签。 

----------------------- Page 270-----------------------

    252          第 12 幸综合示例 

       作为增进可访问性的元素， 1 abe 1                             非常有用。它通过 for 属性把一小段文本关联到表单的一 

个字段。对于屏幕阅读器来说，标签中的这一小段文本几乎是不可或缺的。 

       即使是那些视力没有任何问题的人， 1 abe1  元素同样也具有不可低估的价值。很多浏览器都 

会为 labe1 元素添加默认行为:如果 1abe1 中的文本被单击，关联的表单字段就会获得焦点。这 

对于增进表单的可用性是很有帮助的。然而，并不是所有浏览器都实现了该行为。 

       可能上述行为在默认情况下是不存在的，但我们为何不自己添加这种行为呢?所需的只不过 

数行JavaScript 代码而已。 

       (1)取得文档中的 1abel 元素。 

       (2) 如果 label 有for 属性，添加一个事件处理函数。 

       (3) 在 label 被单击时，提取 for 属性的值。这个值就是相应表单字段的 id 值。 

       (4) 确保存在相应的表单字段。 

                                                                                       •  

       (5) 让相应的表单字段获得焦点。 

       在global.js 中添加函数 focusLabels ，并通过addLoadEvent 函数在页面加载时执行该函数。 

       function  focusLabels()   {  
          if  (!document.getElementsByTagName)  return  falsej  
          var  labels  =  document .getElementsByTagName("label")j  
          for  (var  i=Oj   i<labels.lengthj  i++)   {  
             if (!labels[i].getAttribute("for"))  continuej  
             labels[i].onclick  =  function()  {  
                var  id  =  this.getAttribute( 叩or")j  
                if (!document . getElementByld(id))  return  falsej  
                var  element  =  document.getElementByl d(id)j  
                element.focus()j  
             、 
    u n  '  g IJAU t 

        lJa  

                       ， ， 』 孚       、  ，  ，  . 、 、 
         -AU    AU                 -0  
                 俨    忐        E ' 
            'L  
                    Q       r       ρ 
                      nH       cd  2u  
                           nv  uu      '=  
              吨 
                   uv  
                                          .,  
                                     4 
                 r 
                      L 
                        E 
              d             」 
                    』           』   』 
                 』 
                        、 

       在浏览器中加载contact.html 页面，单击一个标签就会把焦点转移到关联的表单字段中。也 

许访客使用的浏览器不支持这个行为。但现在不一样了，现在所有浏览器都会支持这个行为。 

       2. 占位符值 

       我们注意到，联系表单中的每个字段都通过HTML5 的 p1aceholder 属性添加了占位符文本， 

name 字段中有"your name" ,  emai 1  字段中有"your email " ，等等。 

 注意从增进可访问性的角度说，占住符值也J民有价值。 Web Accessibility Iniative 指南的 10.4 

           节指出，"在用户代理能够正确处理空的控件之前，应该在可编辑文本框和文本区中添加 

           默认的、占住字符。{优先级3] 0" 妥了解有关Web Accessibility Initi创刊的史多信息，请 

           访问 h忧p://www.w3.org/WAII。 

       过去，有些浏览器不能正确识别空的表单字段，从而为键盘导航制造了麻烦。访客无怯通过 

按Tab 键进入空字段。 

       与<1 abe 1>:标签类似，增强可访问性对任何人来说都是一件好事。即使是那些不使用键盘导航 

                                                                                                                            ,  

----------------------- Page 271-----------------------

                                                               12.5  JavaScript    253  

     ，看到表单字段中显示着提示文本，也会觉得非常友好。 

     通过HTM口的placeholder 属性设置占位符值有一个缺点，那就是使用旧版本浏览器的用户 

     到字段中的占位符文本(字段仍然是空的)。 

     使用 JavaScript 可以保证字段中始终可以显示提示信息。不过，这一次我们不再使用 DOM 

   心的方法和属性，而是要使用 HTMLDOM 中最常用的一个对象:fom对象。 

                 DOM  
                                                                     J 
               元素具有的                               还要多。            回 每  求 个  单 哀  中 单  的 元  素 

  个           ，每个 form 
                                 一个 el 
                                                     属性。 

  而? 
                el 创élts .        只关注 

  等。   可、 
              元 表  素 单  中 
                     的 所                           elements 属 
               U 

               而 elements 

              数纽中的每 

              位: 

    包含在 contact.html 中的每个表单字段都有一个初始的 pl aceholder 属性。你可以取得这些 

占位符的值并临时将它们作为相应表单字段的 value。而在该字段获得焦点时，再删除字段的 

value 值。类似地，如果用户并没有在字段中输入文本且离开了当前字段，那么再重新应用占位 

符值即可。这个例子与第 11 章中的占位符的例子是类似的。 

    为此，你需要写一个函数，命名为 resetFields ，它只接受一个 form 对象作为参数。 这个函 

数执行如下操作。 

    (1)检查浏览器是否支持 placeholder、属性。            如果支持，继续。 

    (2) 循环遍历表单中的每个元素。 

                                                                                  "  

    (3) 如果当前元素是提交按钮，跳过。 

         、 

----------------------- Page 272-----------------------

      ι  

                                                                                                               ‘E  

   254                                                                                               ·、 
              第 12 章综合示例 

      (4) 为元素获得焦点的事件添加一个处理函数。如果字段的值等于占位符文本，则将字段的 

值设置为空。 

      (5) 再为元素失去焦点的事件添加一个处理函数。如果字段的值为空，则为其添加占位符值。 

      (6) 为了应用样式，在字段显示占位符值的时候添加 placeholder 类。 

      这个函数的定义如下: 

      function  resetFields(whichform)   {  
         if (Modernizr . input.placeholder)  return;  
         for  (var  i=O;   i<whichform.elements.length;  i++)   {  
           var  element  =  whichform.elements[i];  
           if  (element .type  ==  "submit")  continue;  
           var  check  =  element .placeholder  I1  element.getAttribute('placeholder');  
           if  (!check)  continue;  
           element.onfocus  =  functi on()   {  
             var  text  =  this. placeholder   11  this. getAttribute(' placeholder' ) ;  
             i f   (this.value  ==   text)  {  
                                                                           •  
                this. className  =  ";  
                this .value  ="" ;  

           element.onblur  =  function()   {  
             if (this.value  ==川) {  

                this.value  =  this.placeholder  11   this.getAttribute('placeholder');  

           element.onblur();  

      函数中用到了两个事件处理函数。其中， onfocus 事件会在用户通过按 Tab 键或单击表单字 

段时被触发，而 onblur 事件会在用户把焦点移出表单字段时触发。另外，在 onblur 事件定义之 

后，立即调用了它，以便在必要时应用占位符值。 

 注意 鉴于不同的浏览器对未知属性的实现方式有所不同，这里同时使用了 HTMLDOM 的 

          placeholder 属性和DOM 的 getAttribute('placeholder')方法。 

            问 

…  
                                                                                                                     一 

      把resetFi elds 函数添加到global.js 文件中。但我们需要为它传人form 对象来调用它。再编 

辑一个函数prepareForms ，循环遍历文档中的所有 form 对象，并将每个form 对象传给 resetFields 

函数。 

      function  prepare Forms()  {  
         for  (var  i=O;   i<document.forms.length;  i++)   {  
           var  thisform  =  document. 干orms[i]; 
           resetFields(thisform);  

      使用 addLoadEvent 函数来调用 prepareForms。 

      addLoadEvent(prepareForms);  

----------------------- Page 273-----------------------

                                                         12.5  JavaScript  255  

    为了让占位符更突出一点，在color.css 文件中通过placeholder 类修改字段的颜色: 

    input . placeholder  {  
      color:  grey ;  
                                                                   •  

    在不支持HTML5 的浏览器中刷新contact.html ，看看 resetFields 函数的效果如何。你会看 

到 resetFields 函数起到了在支持HTM口的浏览器中使用 placeholder 属性一样的效果。 

    随便单击几个字段，或者单击相应的标签试一试。默认值应该消失。如果在没有输入文本的 

情况下移动到另一个字段，默认值应该再次出现。如果输入了文本，那么默认值就不应该再出 

现了。 

    3. 表单验证 

    围绕联系表单的下一个任务涉及JavaScr帜最古老的用途。 

    自从 JavaScript 诞生之日起，客户端表单验证就拉开了序幕。想、怯很简单，就是在用户提交 

表单时，对提交的值进行一番测试。如果必填字段留空， 用户就会看到一个警告框，告诉他哪个 

字段必须要填写内容。 

    支持HTML5 的浏览器终于针对一些字段实现了原生的表单验证。例如， Opera 10 可以自动 

验证电子邮件字段，如图 12-19 所示。 

    当你提交包含电子邮件输入字段的表单时，                Opera 会基于RFC 定义的电子邮件格式来验证用 

户的输入，而且启不启用 JavaScript 都没有关系。 HTML5 还定义了其他类型的字段验证，例如 

URL 输入字段。 对于这些字段而言，我们不必在表单中添加任何额外的标记$浏览器根据输入 

字段的类型就可以完成验证。 

    HTML5 也提供了 required 属性， 用于表示某个字段的值是必须填写不能留空的，如图 12-20 

所示。 Opera 10 同样支持不依赖任何脚本的这一原生特性。 

                                                 挝veto 
                                                   a va{i晦 

                图 12-19                                 图 12-20 

    对于支持HTM口的浏览器而言，这是个好消息。但对于客户委托给你制作的这个乐队网站 

来说，还必须再灵活一点，还得再添加使用 JavaScript 验证表单的功能。 

    使用 JavaScript 进行表单验证听起来没有什么，而且通常也确实如此。但如果 JavaScript 验 

证脚本写得不好， 也会带来负面的结果。假如代码中包含错误，最终可能会导致用户根本无法提 

交表单。 

    在使用 JavaScript 编写验证表单的脚本时，要记住三件事。 

----------------------- Page 274-----------------------

   256     第 12 幸综合示例 

     口验证脚本写得不好，反而不如没有验证。 

     口千万不要完全依赖 JavaScript 。客户端验证并不能取代服务器端的验证。即使有了 

       JavaScript 验证，服务器端照样还应该对接收到的数据再次验证。 

     口客户端验证的目的在于帮助用户填好表单，避免他们提交未完成的表单，从而节省他们 

       的时间。服务器端验证的目的在于保护数据库和后台系统的安全。 

     一定要尽量保证验证过程尽可能简单。开始的时候，可以只检查用户是否输入了什么内容。 

下面这个函数， isFilled ，以一个表单元素作为参数: 

     function  isFilled(field)  {  
       if  (field.value.replace('   ',' ').length  ==   0)  return  false;  
       var  placeholder  =  field.placeholder   II  field.getAttribute('placeholder');  
       return  (field.value  !=  placeholder);  

     通过检查去掉空格之后的 value 属性的 length 属性，就可以知道value 中是否没有任何字符 

(不都是空格)。如果确实不包含任何字符，函数返回 false。否则，继续下面的比较。 

     通过比较value 属性与placeholder 属性，就可以知道用户是否对占位符文本一字未动。如果 

两个相同，函数返回 false。如果上面两个测试都通过，说明用户已经在字段中填写了内容， 

isFilled 函数就会返回 true。 

    接下来一个类似的函数是 isEmail 。这个函数会进行非常简略的检查，看表单字段中的内容 

是不是一个电子邮件地址。 

     function  isEmail(field)  {  
      return  (干ield.value.indexOf("@")  !=  -1  &&   field.value.indexOf(".")   !=  -1);  

    这个函数使用 indexOf 方法执行了两方面测试。这个方法用于在一个字符串中查找另一个字 

符串第一次出现的位置。如果要搜索的字符串存在，则返回该字符串第一个字符所在的位置。如 

果没有找到要搜索的字符串，则返回一1 。函数中的第一个测试在表单字段的 value 属性中搜索@ 

符号。这是电子邮件中绝不能少的一个符号。如果没有找到@， isEmail 函数就返回 false。第二 

个测试的原理相同，只不过搜索的是句点(.)符号。如果在表单字段的 value 属性中没有找到这 

个字符，那么函数仍然会返回 false。如果两个测试都通过了， is Emai 1  函数就返回 true。 

    这个 isEmail 函数并不十分可靠。如果用户输入了一个伪造的电子邮件地址，甚至根本就不 

是电子邮件地址的字符串，验证也有可能通过。但是，验证写得太过复杂并不是件好事。验证越 

复杂，误报的可能性就会越大。比如，很多验证电子邮件的脚本都错误地假设电子邮件的域名只 

能是三个字母。这样的错误假设会导致域名为.info 、                       .name 之类的邮件就不能通过验证。 

    现在，你已经有了两个验证函数: i sFi 11 ed 和 isEmail 。 但你并不想对每个表单字段都运行它 

们。因此，还需要某种方式来指定哪个字段是必填的， 哪个字段必须输入电子邮件地址。 

                                                                                  ..  
    在HTML标记中，可以使用 HTML5 的 required 属性: 

     <input  type="text"  id=" name "  name=" name "  value=" Your  name "  required="required"   1>  

     • • •  
     <input  type="email"  id="email"   name=" ema il"   value=" Your  email   address"  
     .. required="required"  />  

----------------------- Page 275-----------------------

                                                                           12.5   JavaScript       257       •  

                                                                                                一 
 注意这里的代码使用了 requi red  =  11  requi red 11  ，而不是仅指定一个没有值的 required 属性。在 

        HTML5 中，这两种写法都是有效的，因为 HTML5 兼容这两种语法。尽管如此，我还是 

        建议读者使用较为严格的泪ITML 语法，也就是说，所有属性都要赋值，而且单独的标签 

        要添加付杠(/)。 

     在 CSS 文件中也可以使用这些属性。例如，可以为必填字段添加粗一些的边框，或者应用 

一种不同的背景颜色。 

     同样，在 JavaScript 中也可以使用这些属性。下面我们编写一个名为 validateForm 的函数。 

这个函数以一个 form 对象为参数，并执行下列操作。 

     (1) 循环遍历表单的 elements 数组。 

     (2) 如果发现了 required 属性，把相应的元素传递给isFilled 函数。 

     (3) 如果isFil1ed 函数返回 false ，显示警告消息，并且 validateForm 函数也返回 false。 

     例如果找到了 emai l  类型的字段， 把相应的元素传递给 isEmail 函数。 

     (5) 如果 isEmail 函数返回 false，显示警告消息，并且 validateForm 函数也返回 false。 

     (6) 否则， va 1 i dateForm 函数返回 true。 

     下面就是完成后的 validateForm 函数: 
     function  validateForm(whichform)   {  
       for  (var   i;o;  i<仙ichform.elements . length; i忡) {  
         var  element  =  whichform.elements[i];  
                      required  ==   "required')   {  
         i f   (element .  
            if  (!isFil led(el ement))   {  
              alert("Please  fill in  the  "+element.name+"  field.");  
             return  false;  
            }  

         if (element .type  ==  'email')  {  
           if  (!isEmail(element))  {  
             alert("The  "+element.name十" field  must  be  a  valid  email  address.");  
             return  false;  

       return  tru e;  

     这样，只要在表单被提交时基于表单执行 validateForm 函数就可以了。为此，可以在 

prepareForms 函数电通过 onsubmit 事件处理函数来添加验证行为: 

     function  prepareForms()   {  
       for  (var  i=O;   i<document.forms.length;  i++)   {  
         var  thisform  =  document.forms[i];  
         resetFields(thisform);  
         thisform.onsubmit  =  function()   {  
           return  validateForm(this);  

    无论竹么时候提交表单，都会触发 submit 事件，而事件会被 onsubmit 事件处理函数拦截。 

----------------------- Page 276-----------------------

    258            第 12 幸综合示例 

执行事件处理函数时，会将表单传递给validateForm 函数。 如果validateForm 函数返回 true，就 

意味着可以把表单数据提交给服务器。而如果validateForm 函数返回 false，提交操作就会被取消。 

        把上面几个表单验证函数都保存到 gl obal.js 中。 

        在浏览器中刷新contact.html 
                                                             试一试，在留空表单或保持字段中默认值的情况下提交表单。 
                                                          o 

                                                                                                                                                           12幽21 
你应该会看到一个有礼貌的警告框弹出来，告诉你必须解决哪些问题才能提交表单，如图 

所示。 

                                                                            响a耐ild 阳袖. ~酬...110成 

                                                                           图  12-21 

        4.  提交表单 

        针对联系表单的最后一项改进，就是给页面添加一点 Ajax。还记得前面创建的 submit.html 

页面吗?如果你正确地提交了表单，表单就会打开 submit.html 显示感谢信息。如果表单能够发 

送一个 Ajax 请求，而感谢信息能以嵌入方式添加到表单所在的页面，那种体验想必会更好。说 

白了，就是表单提交成功之后，不打开新页面了，而是拦截提交请求，自己显示结果。(关于拦 

截的介绍请参考第7 章。) 

        先在global.js 文件中添加第7 章的getHTTPObject 函数: 

        function  getHTTPObject()  {  
            if (typeof  XMLHttpRequest  ==   "undefined")  
               XMLHttpRequest   =  function  ()  {  
                  try  {   return  new  ActiveXObject( 呐sxm12.XMLHTTP.6.0")j  }  
                     catch  (e)  {}  
                  try  {   return  new  ActiveXObject( 呐sxm12.XMLHTTP.3.0"); }  
                     catch  (e)  {}  
                  try  {   return  new  ActiveXObject( " Msxm12 .XMLHTTP");   }  
                     catch  (e)  {}  
                  return  falsej  
           》 、 
                                                                                                ,  
        A  V  J 忐                                 ，  ，  ，  ， . 、  、 
                                     4L           4L  
                              M g a 牛 
                             VA   Hn     nk  
                        O                        、 ‘ . ， 
                 HM  nH  nH  W                HU  CJ  
                                            nu- 
              e   r                    nr  e   e       . 
               L                   L 
                              川 
                        」 
                                』 
                                                       .  
                                                       ,  
       ，  ‘  J 、 

----------------------- Page 277-----------------------

                                                                 12.5  JavaScript    259  

      然后，创建一个加载图像，在 Ajax 请求刚启动时把它添加到文档中。如果你手上没有动画 

 加载GIF ，可以到 http://句axload.info 去创建一个。把这个加载图像命名为 loading.gif，并将它放 

 在1mages 文件夹中。 

      把下面的 displayAjaxLoading 函数添加到global.js 文件中。这个函数接受一个DOM元素作 

  为参数，然后把它的所有子元素都删除掉。删除之后，再把 loading.gif 图像添加到该元素中。 

      千unction åisplay~jaxloading(element)  {  
        while  (element .hasChildNodes())  {  
         element.removeChild(el~ment.lastChild);  

        var  content  = document.createElement("img");  
        content.setAttribute("src" , "images/loading.gif");  
        content.setAttribute("alt勺"Loading..."); 
        element.appendChild(content);  

      好玩的地方到了。接下来该编写 submitFormWithAjax 函数了。这个函数的第一个参数是一个 

  form 对象，第二个参数是一个目标对象，并执行如下操作。 

      (1) 调用 displayAjaxLoading 函数，删除目标元素的子元素，并添加 loading.gif 图像。 

      (2) 把表单的值组织成URL编码的字符串，以便通过Ajax 请求发送。 

      (3) 创建方怯为 POST 的Ajax 请求，把表单的值发送给submit.html 。 

     例如果请求成功，解析响应并在吕标元素中显示结果。 

     (~)如果请求失败，显示错误消息。 

    submitFor刷ithAjax 函数在修改 DOM 和显示加载图像之前，首先要检查是否存在有效的 

泊在LHttpRequest 对象。 

     function  submitFormWithAjax(  whichform,  thetarget  )  {  
       var  request  = getHTTPObject();  
       if (!request)  {  return  false;  }  
      displayAjaxLoading(thetarget)j  

     然后，创建一个URL编码的表单数据字符串，以便通过 POST 请求发送到服务器。这个URL 

字符串的格式与URL参数相同: 

     name=va] ue&name2 =va] ue2&name3=va]ue3  

    表单中每个字段的值都会被编码为这种数据字符串。比如说，如果表单中包含消息"Whydoes 

2+2-4?" ，字符串就类似如下所示: 

     message=Why  does  2+2=4?&name=me&email=me@example.com  

    但是，这里面的加号(十)、等于号(=)和问号(?)都会带来问题。 

     口等于号的意思是不是说表单里有一个字段名叫 2 ，而它的值是4 呢? 

     口加号是一个编码后的空格，还是一个普通的加号? 

     口问号表示它后面是参数列表吗? 

    为了避免这些歧义，可以使用 JavaScript 的 encodeURIComponent 函数把这些值编码成URL安 

全的字符串。这个函数会把有歧义的字符转换成对应的ASCII 编码: 

    message=Why%20does%202%2B2%3D4%3F克26&name=Me&email=me%40example . com 

----------------------- Page 278-----------------------

   260    第 12 幸综合示例 

     接下来，就像前面验证表单一样，循环遍历表单的每个字段，但这次不是验证，而是收集它 

 们的名字和编码后的值，把结果保存在一个数组中: 

     var  dataParts  =  []j  
     var  elementj  
     for  (var  i=Oj   i<whichform.elements.lengthj  i++)   {  
      el ement  = whichform.elements[i]j  
      dataParts[i]  = element.name  +  '='  + encodeURIComponent(element .value);  

     收集到所有数据后，把数组中的项用和号(&)联结起来: 

     var  data  = dataParts .join('旷)j 

    然后，向原始表单的 actio门属性指定的处理函数发送 POST 请求: 

    request.open('POST' ,  whichform.getAttribute( 飞ction") ， true)j  

    并在请求中添加application/x例-form-urlencoded 头部: 

    request.setRequestHeader("Content-type飞飞pplication/x-www-form-urlencoded") j 

    这个头部信息对于 POST 请求是必需的，它表示请求中包含URL 编码的表单。 

    现在，请求已经准备好了。在发送请求之前，还需要创建处理响应的 onreadystatechange 事 

件处理程序。 

    服务器返回的响应就是 submit.html 页面。这个页面与站点中其他页面一样，也包含头部区 

域、导航和内容。因为我们是想把结果加载到已有的页面中，所以就不需要头部区域和导航了。 

只要从页面中取得<article>元素就足够了。而完整的页面放在那里，就是预备着在 Ajax 无效的 

情况下，就直接返回 submit.html 页面。 

    如果你在使用自己常用的服务器端脚本语言编写响应，那么可以只为 Ajax 请求输出必要的 

标记。但目前来讲，只能假设没有服务器端脚本，因此只能使用 Ajax 来增加一点用户体验。 

    为了从响应中提取出<article>元素，你得考虑使用一种叫做正则表达式的技术。简单地说， 

正则表达式就是→种模式，它以用来匹配字符串中的不同部分。 

    下面就是将会用于提取<article>中内容的正则表达式: 

    l<article>([\s\S]+)<\/article>1  

    在JavaScript 中，正则表达式的每个模式都以一个斜杠(1)开头和结尾。如果模式本身包含 

斜杠，必须使用反斜杠对其转义，就像上面模式中对结束的</article>标签中的斜杠转义那样。 

    要查找与正则表达式模式匹配的字符，只要输入想查找的字符即可。因为要提取的内容以 

<article>开始以</article>结尾，因此就直接写出来就好。 

注意正则表达式语法中会用到一些特殊字符，例如方括号和竖线。如果想直接匹配这些字符， 

      同样需妥对它们进行转义，就像对斜杠转义一样。比如说，如果想在模式中匹配至号(*)， 

      就需妥写成\* ，因为*在正则表达式中用于表示重复。要了解其他特殊字符，请参考 

      htφ:/ /en.wikipedia.org/w ikilRegular _ expression。 

----------------------- Page 279-----------------------

                                                                                                             •  

                                                                                                                12.5      JavaScript              261  

        在<article>和</article>之间，是一个捕获组，用于捕获位于开始和结束标签之间的文本。 

 捕获组中的方括号包含了要匹配的字符。 而圆括号定义的捕获组是为了便于后面提取其中匹配的 

 内容。 

        如果你想猜出两个标签之间可能包含的所有字符，即使你的模式写得再长，最终可能还是无 

济于事。为此，我们就在方括号中使用了特殊字符来表示要查找的内容。在这个正则表达式中， 

\s 匹自己任意空白字符，而\S 匹配任意非空白字符，包括回车符和换行符。当然，除此之外，正则 

表达式中还有很多其他字符类，用于匹配数值、单词、非单词之类的情况。 

        最后，在方括号后面，使用一个加号(+)表示前面的模式重复一次或多次。星号(*)表示 

前面的模式重复零或多次。 

        简单地说，正则表达式模式/<article>([\s\S]+)<\/article>/可以理解为如下: 

        口查找一个字符串 ，这个字符串以<article>开头，后跟一或多个空格或非空格字符，最后 

            还有一个</article>; 

        口把这个字符串中的空格及非空格字符包含在一个捕获组中，以便后面提取。 

        有了正则表达式之后，就可以编写 onr、eadystatechange 函数了: 

        request.onreadystatechange  = function  ()  {  
           if  (request .readyState  ==   4)   {  
                 if  (request .status  ==   200          II  requ est .status  ==   0)  {  
                    var  matches  =  request.respons eText.match(/<article>([\s\S)+)<\/article>/)j  
   ,                if  (matches.length  > 0)   {  
                       thetarget.innerHT问L =  matcheS[l]j  
                     } else  {  
                       thetarget.innerHT问L  =  '<p>OOPS , there  was   an  error.  Sorry.</p>'j  
                   ， 、 

                    J 

         ， ， 忌 、 ， ， 鸟 、 
                            JKZ  
                      、 
                  忐 」 凸 O J C 
                         PL'&L  
                  n t - l                    TI  EEL                       中   牛  牛     T'   牛 
                                    .1      Hn Mn  
                                 +L                                                                   , 
                                       」 。 T           J ， ，  、   . ·  γ  」 。 n b 俨 吨              j   / 、 
                                                                                      CJ  x  
                                       nH                nV    +       HU     F3     HU  e     +       nv   ..  
                             O σ     n 
                           2M   e  
                                                                               L 
                                                                                                     f  
                    L                                                      ι      L         L 
                                                   -- 
                                                                         3       d 
                                                       、                                           、 
                                                                     呵 
                       」             川                                  」 
                                    · 
                                         品 
                                  •  ·                                       •  
                                                                                                           ,  

        与第 7 章中的 Ajax 示例类似，这个函数一开始也是检测值为 4 的 readyState 属性，然后再 

验证状态值是不是200。 

        在得到成功的晌应后，就可以通过JavaScript 的match 方法对response丁ext 应用正则表达式了。 

match 方法以正则表达式为参数，返回包含各种匹配结果的数组。 

        数组 matches 的第一个元素(索引为 0) 是 responseText 中与整个模式匹配的部分，即包括 

<article>和</article>在内的部分。因为模式中包含了一个捕获组(一对圈括号)，因此 matches 

的第二个元素(索引为1)是 responseText 中与捕获组中的模式匹配的部分。在这个例子中，只 

有一个捕获组，因此matches 中也只包含两个元素。 

        在取得了捕获的内容之后，函数把 matches[1]中保存的内容赋值给了目标元素的 innerHTML 

属性，响应处理到此结束。 

       这样， submitFormWithAjax 函数中剩下的代码就是发送请求，并返回 true，表示函数已经成 

功发送请求。 
           request.send(data)j  
           return  trUej  
        }j  

----------------------- Page 280-----------------------

   262        第 12 幸综合示例 

      完成后的 submitFormWithAjax 函数如下所示: 

      function  submitFormWithAjax(  whichform , thetarget  )  {  
         var  request  =  getHTTPObject()j  
         if  (!request)  {  return  falsej  }  
         displayAjaxLoading(thetarget)j  
         var  dataParts  =  []j  
         var  elementj  
         for  (var  i=Oj  i<whichform.elements.length;  i++)   {  
           element  = whichform.elements[i];  
           dataParts[i]  =  element.name  +γ+ encodeURIComponent(element.value);  
         }  
         var  data  =  dataParts.join('&');  
         request.open('POST' J    whichform.getAttribute(l action") ,  true)j  
         request.setRequestHeader("Content-type飞飞pplication/x-W\\胁form-urlencoded"                 )j 
         request.onreadystatechange  =  function  ()   {  
           if (request.readyState  ==   4)   {  
                if  (request.status  ==   200  II  request.status  ==   0)   {  
                  var  matches  =  request.responseText.match(/<article>([\s\S]+)<\/article>/)j  
                  if  (matches.length  >  0)   {  
                    thetarget.innerHT问L  =  matches[l]j  
                  }  else  {  
                    thetarget.innerHTML  =  '<p>Oops ,  there  was   an   error.  Sorry.</p> , j  
                  }  
                }  else  {  
                  thetarget.innerHT问L =  '<p>'  +  request.statusText  +  '</p>'j  
                }  

         request.send(data)j  

      现在，可以利用 submitFormWithAjax 函数来执行拦截表单提交的任务了。为此，需要修改 

prepareForms 函数，调用 submitFormWithAjax，并给它传递当前的 form 对象和页面中的article 元 

素作为参数。修改后的函数应该完成如下操作。 

      口如果表单没有通过验证，返回 false;  因为验证失败，所以不能提交表单。 

      口如果 submitFormWithAjax 函数成功发送了 Ajax 请求并返回 true ，则让 submit 事件处理函 

         数返回 fa 1 se ，以便阻止浏览器重复提交表单。 

      口否则，说明 submitFormWithAjax 没有成功发送 Ajax 请求，因而让 submit 事件处理函数返 

          回 true，让表单像什么都没有发生一样继续通过页面提交。 

      以下就是完成上述三项操作的 prepareForms 函数: 

      function  prepareForms()   {  
        for  (var  i=Oj   i<document.forms.lengthj  í++)   {  
           var  thisform  =  document.forms[i]j  
           resetFields(thisform)j  
           thisform.onsubmit  =  function()   {                                   •  
             if  (!validateForm(this))  return  falsej  
             var  article  =  document.getElementsByTagName('article')[o]j  
             if  (submitFormWithAjax(this ,  article))  return  falsej  
             return  truej  
        、 ' ' 忌 、 

       J g t 

    ' ' 忌 、 

----------------------- Page 281-----------------------

                                                                               12.5   JavaScript       263  

      好了，现在提交一下表单试试，你应该看到感谢信息出现在了同一个页面上，  页面没有刷新。 

不信，就看一看浏览器的地址栏。在提交了表单之后，你看到的还是 contact.html ，                                                         而不是 

submit .ht ml  

     联系页面制作完毕，当然整个网站也随之大功告成了。 

 12.5.7     压缩代码 

      虽说你的网站已经可以上线了，但别忘了还有一件重要的事情要做:改进性能!此时此刻， 

gl obal. js 文件的大小是 13 K.B，不算大，                  而通过压缩，它还能再 "瘦身"。                      我们在第5 章曾经讨 

论过，用来压缩JavaScript 代码的工具不少。在此，我们要使用的是谷歌的Closure Compiler。  通 

过它的 
        在线表单，只要粘贴JavaScript 进去，就可以得到压缩后的结果。 

     在浏览器中打开h句:// closure-compiler.appspot.comlhome ，把global .                     js 中的代码复制粘贴到 
左侧文本区// ADD YOUR CODE HERE 的下面，如图 12-22 所示。 

            A刷盹 酶# 
                                                                。匈t刷锐鹏 
                   缸，栩栩~ llQÞ:刷刷咄咄融-画院)0 
                                                                也回嘀戴帽章Su皿 
            句&谕搅胃也QWt说_.-.QIIY e黔昭. OA4<l.，由" 
                    切嗷匍闹出由曲量ÎflI'， Iíl ,rfDí1t forrn\l c.c曲咛 

            阳"峭茸唱1: a阶喇PrW. O. 阳。归由棚血锄，加 

                   楼凝~ 脑睡 

                         钳制Pf..t..QP'f:'t辑I:1Äl1锁~ 
                                                 .  
                         deIlw1~，f$.  

                                     z  

                       份钱IlImaoO {  

              3 伽略0: 

                                                  图 12-22 

     单击 Compile 按钮，然后就可以得到编译后的代码，还有相关的统计信息。以我编写的 

global  .js 文件为例， 得到的结果如下: 

      口 原始大小 12.43 阻 (gzip 压缩后3.12 阻) 

      口编译后大小8.62 阻 (gzip 压缩后2.36 阻) 

      口比原始大小减少了 30.64% (gzip 压缩版减少了 24.22%) 

     注意，根据所添加的注释及其他代码的多少，结果会有所差异。 

----------------------- Page 282-----------------------

  264  第 12 幸综合示例 

   在scripts 文件夹中新建一个global.min.js 文件，把压缩之后的代码复制粘贴到该文件中。 

然后，把所有页面的<script>.标签中引用的脚本改为这个压缩版。 

 12.6  小结 

   好了， Jay  Skrip  and the  Domsters 乐队的网站终于可以上线了。不客气地说，你为他们设计 

的这个站点在网络上绝对可以风靡一时。更重要的是，你把内容都放到了有效的、语义化的 

HTML5 标签里面，并用外部样式表实现了整个外观设计。最后，又利用 JavaScript 和DOM为它 

添加了诸多交互功能及可用性方面的增强。 

   而且，即便你把这些增强的功能去掉一部分，甚至全都拿走，整个站点照样可以完美地运行。 

DOM 脚本在这里并不是必需的，但有了它，光临站点的访客们会有更好的体验。想想看，这个 

乐队居然是虚构的，就连我都有点为你愤愤不平啊! 

   那接下来还要学习什么?从某种意义上说，你的学习可以告一段落了。通过本书，你不仅掌 

握了 DOM背后的理论知识，还把它实际运用到了构建完整的站点上面。利用从本书中学到的各 

种方法和属性，你还能创造出更具实用性也更加强大的功能。 

   但从另外一个角度说，你的前端开发之路才刚刚开始。本书只向你展示了通过少数DOM方 

法所能实现的少数功能。不仅这些方法还有更加广泛的用途，而且从未提及的很多其他方法都有 

待你去探索呢。 

   基于DOM 的脚本编程是一项值得深入掌握的技术。希望本书能让你对JavaScript 和DOM产 

生初恋一般的美好感觉。更希望你能肩负起一位技术人应有的责任，坚守DOM可用性的阵地， 

并且能够乐在其中。在光怪陆离的现实世界中，你稍不留神就会误入歧途，掉进一味标新立异的 

泥漳里。有时候，只要静下心来，回头看一看，把视角放得更开阔一些，问题就会变得很清楚。 

从Tim Bemers Lee 发明万维网 (World Wide Web) 至今，它的宏伟愿景就没有改变过: 

     Web 的无所不在是它的魅力。保证任何人都能无障碍地使用它，是一个最基本的 

   原则。 

   Web 中无处不在的超文本文档具有天然的可访问性。之所以变得让人处处受限，仅仅是由于 

我们没有作出正确的选择。通过综合Web标准和最佳实践，让我们一起来保障Web 的开放、无 

障碍。 

   口使用有意义的标记来构建页面的结构z 

   口把表现性的信息都分离到 CSS 样式表中: 

   口负责任地使用不唐突的JavaScript 来应用行为增强，同时确保平稳退化。 

   现在，我们正处于Web 发展的十字路口。随着 Ajax 技术的普及和 HTML5 的出现，桌面软 

件与 Web 应用之间的界限已经越来越不分明了。在努力推动Web 向前发展的同时，还要坚守它 

作为一个无处不在的媒体的初衷，势必要面临诸多挑战，战胜各种困难。 

   接下来的路在何方，这个问题只能你自己来回答。我只能告诉你，这是一个令 Web 设计师 

激动不已的时代。 

----------------------- Page 283-----------------------

                JavaScript 库 

   本书从头到尾一直都在介绍 DOM的基础知识。我们学习了如何使用标准的DOM方法来完 

成常见的操作，如何在脚本中最有效地使用这些方法。也许你已经感觉到了，有时候自己的代码 

会显得十分冗长，其中不少还都是重复的。如果只使用诸如 document.getElementByld 之类的DOM 

方法，时间一长不免让人心生厌倦。实际上，很多 JavaScript 库提供的"魔术"函数(像$)不仅 

可以当 document.getElementByld 来用，还能用来完成这个方法做不到的更多事情。 

   所谓库，就是可重用的代码包，具有如下一些优点。 

   口库代码经过了大量用户的测试和验证。 

   口库能够很容易地与已有的开发框架集成。 

   口库为大多数日常琐碎的DOM编程工作提供了方便、简洁的方案，每个函数都能节省很多 

    行代码。 

   口库很好地解决了跨浏览器的问题，     让你更省心。 

   库可以把你从开发工作中解脱出来，让你专注于最重要的环节，极大地提升工作效率。虽然 

使用库的好处很多，但也不是不存在问题。 

   口库是别人而不是你自己编写的。    你可能不了解它的内部工作机制，因此很难调试 bug 或 

    解决由它所导致的问题。 

   口要使用库，就要把它集成到脚本中。这样就会加重页面加载的负担，挤占用户有限的 

    带宽。 

   口混合使用多个库可能会造成冲突，同时也会造成功能浪费。 

   如果你对库只能亦步亦趋而不能超越，那它也会成为你不思进取的慢性毒药。在决定使用库 

之前，建议大家先花点时间真正掌握本书介绍的 JavaScript 和 DOM 编程技术。从第 1 章开始， 

我们就一直强调理解工作机制的重要'性，而不要停留在问题的表面上。唾手可得的库比比皆是， 

稍后我们就会接触一些，但是如果你不能理解它们背后的工作机制，对{尔和你的程序都不能算是 

什么好事。如果你对某个库理解不透，而这个库又假设你知道相关细节，那你就很可能被一些琐 

碎的问题绊住脚。 

   在此声明一下，我本人与这些库没有任何关系，因此不会厚此薄彼。我也不认为这些库在任 

何情况下都是最佳选择，也不是说只有这几个库可供选择。下面所举的例子，都是为了更好地说 

----------------------- Page 284-----------------------

                         ,  

                                                                            •  

  266      附录 JavaScript 库 

明如何利用库来更简单地完成本书前面介绍的那些任务。 

    接下来我们会重温前面涉及的如下主题。 

     口语法 

     口选择元素 
                                                                        ,  

                                                                        、 

     口 操作DOM元素 

     口处理事件 

     口 动画 

     口 Ajax 

    你会看到怎么通过库来完成这些任务一寸恿常要用的代码都会更少一些，以及为什么说使用 

库能让你把精力更多地放在业务逻辑而非编写重复性的脚本上面。 

 注意 对任何一个任务来说，每个扉都会提供多种实现方法。                                我只会从中选择一两种我认为最 

       佳或最有效的方法，不可能把每个库完成这些任务的所有可能性都列举出来。因此，请 

       读者通过阅读这些库的文档未了解其他的方法。 

    在使用库之前，最重要的是先搞清楚哪个库适合自己的需要。下面我们就介绍几条选择库时 

需要注意的事项。 

A .1    选择合适的库 

    在选择库的时候，你会发现自己将面临上百种选择。要作出正确的选择，建议你考虑如下 

问题。 

     口 它具备你需要的所有功能吗?混合使用多个库有可能导致问题。一些常见的方法，如$() 

       和get() ，虽然表面上相同，但功能却完全不一样。此外，如果同时使用多个库，重复的 

       功能和冗余代码也是不可避免的。 

     口 它的功能是否比你想要的还多?功能太少是一个问题，但功能过多同样不好。如果库中 

       包含很多你用不到或者不能完全利用的功能，最好还是选择一个功能少一些的版本，至 

       少能加快下载的速度。开发移动应用时这一点尤其要考虑。 

     口 它是模块化的吗?在解决文件大小问题时，功能丰富的库通常使用模块化的方怯，把不 

       同功能分割保存到不同的文件中。这样，你就可以只加载包含相应功能的个别文件，从 

       而降低下载量。多数情况下，恐怕都得事先加载所有必需的文件，只有少数库提供了动 

       态加载机制，让你能够按需动态加载文件。动态加载文件时，还要事先考虑到请求的次 

       数。经验表明， 一次请求一个大文件，要比多次请求多个小文件更好。 

    口 它的支持情况怎么样?如果库的背后没有活跃的开发人员社区维护，就意味着 bug 没人 

       修改，功能无法改进。从另一方面说，使用和维护的人多本身也说明它的问题更少，也 

       更可靠。库背后的社区不仅仅意味着修复和功能，也意味着在你需要帮助时能够及时得 

       到很多人的支持。 

----------------------- Page 285-----------------------

                 二 -  一-            ‘ 

                                        A .l   选择合适的库   267  

   口它有文档吗?没有文档，会让人无所适从。是这样的，也许你会碰到别人不知道什么时 

     候写的几个使用示例，但如果没有官方的文档，至少说明它的开发人员不够投入，而库 

     本身也不会有什么大的发展前途。 

   口它的许可合适吗?别以为可以在线查看源代码，自己就可以想怎么用就怎么用了。在决 

     定使用一个库之前，必须查证自己的用途包含在它的许可范围内，如果有特殊需求，就 

     更要事先确定了。 

   在选定了一个合适的库并在此基础上有了新的发明创造之后，别忘记回馈社区!这些库都是 

开发人员无私奉献的结品，他们牺牲自己有限的休息时间，就是为了改进你每天在用的工具。如 

果你不能帮助改进库的功能或者修改bug ，可以提供一些使用示例和教程啊，就算帮着写写文档 

也是功德无量的。总之，只要有心，不管做什么都会促进库的良好发展。 

A.1 . 1  有代表性的库                         .  

   为了撰写这个附录，我根据前面的标准选择了几个有代表性的库，中间也掺杂点个人的喜好。 

直说吧，后面的大多数示例都是使用 jQuery 编写的，少数使用的是具有类似功能的其他库。这 

些库各有长短，简述如下。 

   口 jQuery (h句://jque巧. ωom) 官方网站说它是"一个快速简洁的 JavaScript 库，致力于简化 

     HTML文档搜索、事件处理、动画以及Ajaz 交互，从而实现快速Web 开发。 jQuery 的设 

     计目的是为了改变你编写 JavaScript 程序的方式。" jQuery 极为强大的选择方法、连缀语 

     法以及简化的 Ajax 和事件方法，都会让你的代码变得简洁且容易理解。这个库的背后还 

     有一个非常大的社区，包括大量插件开发人员，他们开发的插件极大增加了库的功能。 

   口 Prot。可pe (h句://prot。可pψ.org) 把自己描绘成"一个旨在简化动态 Web 应用开发的 

     JàvaScript 框架。" Prototype 提供了很多非常棒的 DOM 操作功能，还有一个广受好评的 

     Ajax 对象。它是出名最早的一个JavaScript 库，也是通过$()实现选择功能的鼻祖。 

   口 The Yahoo! User Interface  (Yl月) Library  (http://developer.yahoo.comlyui) 的定位是"一套 

     用 JavaScript 编写的实用函数和控件，可用来基于 DOM、  DHTML 以及 AJAX 构建高交 

     互性的 Web 应用。 YUI 还包含了一些核心的 CSS 资源。" YUI 的开发人员社区是很值得 

     称道的，它的文档也可圈可点。这个库涵盖的功能非常广泛，从简单的DOM操作到高级 

     的效果，以及全功能的应用程序部件，只要你能想到的，它都有。由于功能全面， YUI  

     被按照命名空间切割成很多独立的小文件，也正因为如此，有些使用者有时候会搞不清 

     自己到底需要哪个文件，到哪里去找到该文件。光API 列表就长达20 页，这个库的规模 

     就不难想象了。 

   口 Dojo Toolkit  (http://www. dojotoolkit吨。说它能"帮你节省时间，性能优异，可以让开 

     发过程收放自如。它是经验丰富的开发人员为构建伟大的 Web 体验而提供给你的工具 

     包。"DO咛jO 确实是一个功能丰富的Ja盯.v必aScαmrdipμt; 开发工具包，很多国际知识的大公司都在用。 

     它的开发人员社区也很庞大，文档做得也非常好，市面上有不少关于它的书。 

----------------------- Page 286-----------------------

   268       附录 JavaScript 库 

      口 MooTools (h句://mootools.net/)说自己是"一个小巧、模块化、面向对象的JavaScript 框 

         架，适合中高级JavaScript 开发人员。                    利用它精巧、文档完备且前后一致的API，                            可以编 

         写出强大、灵活而又能够跨浏览器的代码。" MooTools 的文档写得非常好，用户社区也有 

         相当规模。这个库不仅包含一些非常好用的 DOM增强 A凹，                                        它的 Moo.fx 效果库更是令 

         人叫绝，      能够实现各式各样的或简单或复杂的网页动画。 

                十 二一…                               …但                                                     一 

 注意 Prototype 和jQuery 还有其他库，都使用$()作为函数语法。                                 如果你打算在自己的开发环境 

         中使用其中一个库，请务必先阅读相应库的文档，看看文档描述与本书介绍有哪些出入， 

        或者说该库在什么情况下会与其他库发生冲突。 

                            2  
                          •  
                                                                                                       一 

A.1.2      内容分发网络 

     一定要尽可能想办法减少网页文档的大小，并让浏览器缓存文件。除此之外，当然还要让用 

户尽可能快地加载到页面。对于库来说，如果有很多站点要使用同一个库，那么最好是把这个库 

托管到一个公共服务器上，以便所有站点共享和访问。这样，当用户从一个站点跳到另一个站点 

时，他们就不用再重复下载相同的文件了。 

     内容分发网络(CDN ,  Content  Delevery Network) 可以解决分布共享库的问题。 CDN 就是 

一个由服务器构成的网络，这个网络的用途就是分散存储一些公共的内容。 CDN 中的每台服务 

器都包含库的一份复本，这些服务器分布在世界上不同的国家和地区，以便达到利用带宽和加快 

下载的目的。浏览器访问库的时候使用一个公共的URL，而 CDN 的底层则通过地理位置最近、 

速度最快的服务器提供相应的文件，从而解决了整个系统中的瓶颈问题。 

     Google 为以下这些库提供了免费的 CDN服务: 

     口 Dojo 

     口 jQuery 

     口 MooTools 

      (J  Prot。可pe 

      (J  Yahoo!  U ser Interface Library (YUI)  

     要了解GoogleCDN托管的这些库的最新版以及其他特殊信息，请访问http://code.google.comJ 

apis/libraries/ devguide.html。 

     使用 CDN 中托管的库与使用其他 JavaScript文件一样。例如，                                   以编写本书时的URL 为例， 

GoogleCDN 中jQuery !萃的 URL是h忧ps://勾ax. googleapis. coml句ax/lib的query/l.4.3/jquery.min.js ， 

因而在文档中就可以添加如下<script>标签: 

      <script  srG= "https://aj ax.googleapis.com/ajax/libs/jquery/  
     崎 1.4.3/jquery.min.js"></script> 

     如果你觉得仅仅依赖 Google 或其他 CDN 不保险，可以再提供一个后备<script>标签，以便 

在 CDN 不可用时从本地服务器下载相应文件。方法很简单，无非就是先检测一下相应对象是否 

----------------------- Page 287-----------------------

                                                              A.2  语法      269  

存在，如果不存在就添加加载本地文件的<script>标签: 

    <script  src="https ://ajax.googleapis .com/ajax/libs/jquery/  
    恒. 1.4.3/jquery.min.js"> </script>  
    <script>!window.jQuery  &&   document.write(unescape(' %3C  
    恒. script  src="scripts/jquery- 1. 4.3.min.js"均E克3C/script%页'))</scripb 

 注意这个方法使用 document.write 在jQuery 库没有创建全局川ndow. jQuery 对象的情况下添加 

      一个<scri pt>标签。本附录中使用的$函数，其实就是对专有的jQuery 对象的简写别名。 

    有了后备代码后，即使CDN的服务器出了问题，也不会连累你的网站了。 

A.2    语法 

    在展示具体的示例之前，应该先介绍一些很多库都采用的语法。 

 注意 jQuery、  Proωtype、 MooTools 及其他很多库， 都把$()函数作为其选择器方法的简写。因 

      此，在本附录中使用$()会让示例代码史通用一些。不过，也要注意，虽然调用这个函数 

      的语法形式相似，但不同的库在底层创建的对象则迥然不同。要了解具体的$函数的工作 

      原理，请查看相应库的文档。 

    多数库都支持以点将方法连缀起来的语法，也就是通过点操作符把多个方法调用连接成一行 

代码，就像我们前面针对getEl 创entByld 用过的一样: 

    document.getElementByld('example').nodeNamej  

    在 jQuery 之类的库中，方怯连缀是一种特色，这些库特意设计了相应的方在去，以便通过连 

缀的形式将复杂的脚本连缀成简短的代码。使用这些库时，一行脚本完成多项操作是司空见惯的。 

举个例子，使用 jQuery 先删除文档中所有段落的一个类名，然后再为它们添加另一个类名，可 

以这样来写: 

    $('p') .removeClass('classFoo').addClass('classBar');  

    与第9 章的那个添加类名的函数相比，这行代码可是清晰多了。稍后我们还会介绍有关$ ('p' )  

选择器的更多信息。 

    另一个语法是迭代。不少库都提供了方便对元素列表进行操作的循环结构，而连缀语怯则为 

此提供了一种一目了然的方式。 

    仍以jQuery 为例，对于下面这个第3 章示例中的循环: 

    var  items  =  document.getElementsByTagName("li");  
    for  (var  i=O;   i   <  items.length;  i ++)  {  
      alert(typeof  items[i] ) ;  

    使用jQuery 的 each 方法可以写成: 

----------------------- Page 288-----------------------

  270    附录 JavaScript 库 

    $('li') .each(function(i){  
      alert(  typeof  this  );  
    });  

    jQuery 的 each 方法以及其他循环方怯，会基于列表中的每个元素来执行一个回调函数。这 

个回调函数只接收元素在列表中的索引作为参数，并在当前节点的上下文中执行，因此这个例子 

中的 this 引用的就是每个 1 i 元素自身。 

    了解库的基本语法之后，下面就来看一看选择元素。 

A.3    选择元素 

    到目前为止，你已经知道怎么使用内置的 DOM 方法 getEl例entByld、                 getElementsByTagName 

以及getElementsByClassName，来分别通过ID、标签和类名来选择元素了。 

    能通过ID 选择元素很方便，但如果能使用各种CSS 选择器来选择元素不是更好吗?很多库 

都和jQuery -样，提供了类似其$函数的高级选择器方法。使用这些方法，可以基于以下要素进 

行选择: 

    口带#的 ID，如$( '#e 1 ement i d ' )  

    口带.的类名，如$( ，的ement-class') 

    口标签名，如$( 'tag' )  

    当然，这些选择元素的途径还算不上十分特别，但关键是还可以使用各种 CSS 选择器 

(h句:/州响w.w3. org/TRI css3-selectors/#selectors )来选择特定的元素。 

注意在$函数中通过B选择器和lementid 选择元素时，该函数仍然返回对象列哀，只不过返回 

      的歹I} 求中只包含一个元素。 这样，你可以使用连级语法继续调用 each 及其他jQuery 方法。 

A.3.1   CSS 选择器 

    除了使用 B、类名和标签以外，在多数库中都可以使用下列高级的选择器: 

    口$('*')选择所有元素g 

    口$( 'tag')选择所有HTML标签中的 tag 元素z 

    口$(  'tagA  tagB' )选择作为 tagA 后代的所有tagB 元素z 

    口 $('tagA，  tagB.tagC' )选择所有tagA 元素、 tagB 元素和tagC 元素: 

    口$( ，和d' )和$( 'tag#训， )选择所有 B为 id 的元素或ID 为 id 且标签为 tag 的元素; 

    口$( I  .className')和$ ( ' tag.className')选择所有类名为 className 的元素或类名为 className 

      标签为 tag 的元素。 

    也可以使用组合选择器$('和lYLi st  1 i  1  )或$( I   U 1 1 i  a. s e 1 ectMe ' )以空格来分隔选择更具体的后 

、孔穹头。 

    jQUé町还支持下列CSS2J属性选择器r 

----------------------- Page 289-----------------------

                                                           A.3   选择元素        271  

    口$( 'tag[attr] , )选择所有带有 attr 属性的 tag 元素z 

    口 $( 'tag[attr=value]')选择所有 attr 属性值恰好等于 value 的tag 元素z 

    口 $( 'tag[attr*=value]')选择所有 attr 属性值中包含字符串 value 的 tag 元素: 

    口 $('tag[attr-=value]')选择所有attr属性值为空格分隔的多个字符串且其中一个字符串等 

      子 value 的tag 元素z 

    口 $('tag[attr^=value]')选择所有attr 属性值以 value 开头的tag 元素: 

    口 $('tag[attr$=value]')选择所有 attr 属性值以 value 结尾的tag 元素， 

    口 $('tag[attrl=value]')选择所有 attr 属性值为连字符分隔的字符串且该字符串以 value 开 

      头的tag 元素: 

    口 $('tag[attr!=value]')选择所有 attr 属性值不等于val 阔的 tag 元素。 

    此外，还可以使用子选择器或同辈选择器: 

    cl  $ ( 'tagA  >  tagB')选择作为tagA 元素子元素的所有tagB 元素$ 
    口$('tagA  +  tagB')选择紧邻tagA 元素且位于其后的tagB 元素: 
    口$( 'tagA ~ tagB')选择作为 tagA 同辈元素且位于其后的所有 tagB 元素。 

    还可以使用一些伪类和伪元素选择器: 

    口$('tag: root ' )选择作为文档根元素的tag 元素z 

    口 $('tag:nth-child(时， )选择作为其父元素正数第n 个子元素的所有tag 元素z 

    口 $('tag:nth-last-child(n)')选择作为其父元素倒数第n 个子元素的所有tag 元素3 

    口 $('tag:nth-of-type(时， )选择几个同辈 tag 元素中的正数第n 个; 

    口 $('tag:nth-last- of-type(时， )选择几个同辈 tag 元素中的倒数第n 个g 

    cl   $( 'tag:first-child')选择作为其父元素第一个子元素的tag 元素s 

    口 $('tag:last-child')选择作为其父元素最后→个子元素的tag 元素$ 

    口 $('tag:first-of-type')选择几个同辈tag 元素中的第一个z 

    cl   $(' tag: 1 ast-of -type' )选择几个同辈 tag 元素中的最后一个z 

    口 $('tag:only-child')选择作为其父元素唯一子元素的 tag 元素: 

    口 $ ('tag :onl y- of-type')选择同辈元素中唯一一个标签为 tag 的元素; 

                                                                       •  
    口$( 'tag : empty , )选择所有没有子元素的tag 元素; 

    口 $('tag:enabled')选择界面元素中所有已经启用的tag 元素; 

    口 $('tag:disabled')选择界面元素中所有已经禁用的tag 元素; 

    口 $('tag:checked')选择界面元素中所有已经被选中的tag 元素(如复选框和单选按钮) ;  

    cl  $ ( 'tag : not (s) , )选择与选择器 s 不匹配的所有tag 元素。 

    不同的库对上述选择器的支持情况各不相同，请查阅相应库的文档以了解具体的情况。 

    利用这些选择器，就可以基于它们在文档中的位置而不必通过类名或 ID 而迅速找到任意一 

个特定的元素。而且，你的脚本不仅因此可以不再依赖于特定的 D或类名，还能减少选择元素 

所需的代码。比如说，要选择文章中 nav 元素包含的所有链接，可以使用 DOM方法通过下列代 

码实现: 

----------------------- Page 290-----------------------

,  

    272         附录 JavaScript库 

       var  links  =  []j  
                                                                                                                                •  
       var  articles  =  document.get ElementsByTagName("article")j  
       for  (var  a  =  Oj  a  < articles.lengthj  a++  )   {  
         var  navs  =  articles[a] .getElementsByTagName("nav")j  
         于or (var  n  =  0;  n  < navs.lengthj  n++   )   {  
            var  links  =  nav[n].getElementsByTagName("a ");  
            于or (var  1  = Oj   1  < links.lengthj  1++  )  {  
              links[links.lengh)  =  links[l]j  
            }  
          }  
       }  
       //对链接执行相应操作 

       但利用选择器语泣，则可以缩短为很少的字符: 

       //对链接执行相应操作 

                                                                                •  

       这样，代码不仅清晰了很多，而且也很容易看懂。 

 A.3.2       库所提供的专有选择器 

       有些库还提供了专有的选择器，例如 jQuery 支持$( 'tag: even ' )和$( 'tag : odd ' )选择器，用于 

 选择偶数和奇数元素。第 12 章有一个为表格行添加条纹样式的函数: 

       f unction  stripeTables()  {  
          if  (!document.getElementsByTagName)  return  false;  
         var  tables  =  document.getElementsByTagName("table");  
         for  (var  i=Oj   i<tables.length;  i++)   {  
            var  odd  =  falsej  
            var  rows  = tables[i].get ElementsByTagName("tr")j  
            for  (var  j=Oj   j<rows.lengthj  j++)    {  
              if  (odd  ==   true)   {  
                 addClass(rows[j] , "odd")j  
                 odd  =  false ;  
              }  else  {  
                 odd  = truej  

      而用一行jQuery 代码，就可以轻松地选择所有奇数表格行并为它们应用 CSS 属性: 

      $("tr:odd").addClass("odd")j  

      怎么样，是不是简单明了? 

      jQuery 还支持其他专有选择器。 

       口$( 'tag : even ' )选择匹配元素集中的偶数个元素一一特别适合突出显示表格行! 

       口 $('tag :odd ')选择匹配元素集中的奇数个元素; 

       口$( 'tag: eq ( 0) , )和$( 'tag : nth ( 0) , )选择匹配元素集中的第n 个元素，如页面中第一个段落z 

       口$( 'tag:gt(时， )选择匹配元素集中索引值大于n 的所有元素: 

       口$( 'tag : 1 t (n) , )选择匹配元素集中索引值小子n 的所有元素z 
       口$( 'tag: fi rst ' )等价于:eq(O) ; 

----------------------- Page 291-----------------------

                                                                                                                            A.3       选择元素                      273  

         口$( 'tag: 1 ast ' )选择匹配元素集中的最后一个元素z 
         口$( 'tag: pa rent ' )选择匹配元素集中包含子元素(文本节点也算)的所有元素g 

         口 $('tag:contains('test')')选择匹配元素集中包含指定文本的所有元素3 

         口$( 'tag : vi s i b 1 e ' )选择匹配元素集中所有可见的元素(包括出splay 属性为 bl ock 和 inline、 

              visibility 属性为 visible 以及type 属性不是 hidden 的表单元素) ;  

         口$( 'tag : h i dden ' )选择匹配元素集中所有隐藏的元素(包括display 属性为 none、                                                                                      visibility 

              属性为 hidden 以及type 属性为 hidden 的表单元素)。 

         使用这些选择器可以快速地修改元素，比如要修改页面中第一个段落的字体粗细: 

         $("p:fir$t") . css("font- weight"~ 飞old"); 

         或者用一行代码来显示所有隐藏的<div>元素: 

         $(" div: hidden") . showO;                                     .  

         甚至就连要隐藏所有包含单词 "sc缸ed" 的 div 元素都易如反掌: 

         $("div :contains('scared')") .hide( )j  

        最后， jQuery 还提供了一些专门为表单设计的表达式，用于快!速访问表单元素: 

         口:i nput 选择表单中的所有元素 (input、                                                select、        textarea、          button) ;  

         口 :text 选择所有文本字段 (type="text"); 

         口 :password 选择所有密码字段 (type="password"); 

         口 :radio 选择所有单选按钮 (type="radio"); 

         口 :  checkbox 选择所有复选框 (type="checkbox"); 

         口 : submit 选择所有提交按钮 (type=飞ubmit"); 

         口 :    1mage 选择所有表单图像 (type="image"); 

         口 :reset 选择所有重置按钮 (type="reset") ， 

         口 :button 选择所有其他按钮.                                   (type="button")  

A.3.3            使用回调函数筛选 
                                                                                                   •  

        在高级表达式还不能满足你的需要，或者某个库不支持某个表达式的情况下，还可以使用回 

调函数来选择DOM元素，也就是基于每个元素执行相应的筛选代码。在接下来的所有示例中， 

 因调函数返回 true 则意味着相应的元素会出现在结果集中，返回时se 则意味着相应元素不会出 

现在结果集中。 

        如果你想创建一个反向选择器，那么使用回调函数会非常方便。所有 css 选择器选择的都 

是表达式最右端的元素，因此就没有办泌通过它们选择"只包含一个图像子元素的所有锚标签"。 

但使用回调函数则可轻松实现这个选择。假设有以下HTbE: 

            、 
        、  / ，  ，  、 
           HU  
            i 

                 、 
            、  、  J .品  、  A  E、  / .  、     、          .-                     电    、  . 石  - 、 +L          咱     ,,,   ,,,  

                                                                                                                  ， ，  、 飞 ， 。 、  ， ，  、 
                                                 4A  
                                                      J               ρ            b σ                      i 
                                                                         VA                           x  
                                                               p3  rL     2u     e           2u      e Rd  nv e  
                                                                r             ny  
                                                                            m                             m  
                      J 「    、 川  m  」 白 O   i     ， ， 、                      - · E 
                                         2M     e          0hv  
                                             nv           m  
                            nH         X   m                        --                            -- 
                                                                                       t 
                                   =  
            ­ .  ，  、  ，  ，  ，、 、 J J ·  -  品 A ，  、 t ， 、  、  ‘， 、 ，  .•  d a 」 、 ‘ 』 4                  、 

----------------------- Page 292-----------------------

                              •  

    274          附录 JavaScript 库 
                                                                                       .  

                   <a   name="example2">No  Images  Here</a>  
              <!li>  
              <li>  
                   <a   name="example3">  
                         Two  here!  
                         <img   src="example2.gif"  alt="example" l>  
                         <img   src="example3.gif"  alt="example"/>  
                   </a>  
              </li>  
        </ ul>  

       使用 YUI 的 YAHOO.util.Dom.getElementsBy 方法，基于本书前面介绍的DOM元素属性，即可 

筛选出想要的元素: 

        var  singlel mageAnchors   = YAHOO.util.Dom .get ElementsBy(function(e)   {  
              II 查找只包含一个图像子元素的<a> 节点 
             return  (e .nodeName   ==        'A'  &&   e .getElementsByTagName( ' img').length  ==              1);  
       ‘ ，  ， 、  ，  ‘ 、 
           . 
       '  e 
           .  
           ,  

       此时变量 singlelmageAnchors 会包含一个列表，列表中只有一个元素，因为示例代码中只有 

一个仅包含一个图像子元素的锚，因此该元素引用的就是<a name="exampl 的">。 

       Prot。可pe 和jQuery 为此分别提供了 findAll 和filter 方法。在连缀调用方法的时候，使用这 

两个方法就可以筛选出表达式返回的元素来。 

       首先来看一下Proωtype 的代码(使用$$选择器) :  

        / / Prototype 库的回调筛选函数 
        var  singleImageAnchors  =  $$(' a ' ) . findAll (function (e)   {  
          r eturn  (e .descendants().findAll(function(e)  {  

           }).l ength  ==   l)j  
        });  

       再看一下jQuery 的代码: 

        II jQue可库的回调筛选函数 
        var  singlelmageAnchors  =  $( 'a' ) .filter(function()  {  
          ret urn  ($('img' ,this) .length  ==  1)  
        });  

       Prototype 和 jQuery 的表达式选择器应该足以应付大多数的情况。 万一你还需要对元素进行 

更深入的分析，那么回调函数还可更复杂一些。 

A.4         操作 DOM 元素 

       每个库都提供了非常多的 DOM操作方法，毕竟操作DOM的能力可以体现一个库的水平。 

这里我们只简单列举其中几个，剩下的还是请读者自己去查阅相关库的文档。 

A.4.1         生成内容 

       用jQue巧r 创建新的DOM元素很简单。                                       把HTML 代码作为$函数的参数传入，即可创建新的 

节点。下面这行代码就可以给文档的 body 元素添加一个新的div 元素。新的div 元素会有一个值 

为 example 的地，并且包含 "HeUo"。 

----------------------- Page 293-----------------------

                                                                                      A .4    操作DOM 元素                      275  
                 .  

       $(' <div  id=飞xample">Hello</div>').appendTo(document.body); 

      或者，也可以试一试jQuery 的模板插件 (http://api.jquery. comlcategory/plugins/templates) 。 

           …出              一     一…---                  …… … … ……             u … -……  ι …… ……刊，.叮叮i 叩…叫川 

 注意可以使用 Microso丘 CDN 中托管的这个模板插件。在编写本书时的 URL 为 http://ajax. 

          microsoft.coml句axljquel)响mplates/betal/jquery.tmp1.min.js。 

                   …  ~--------_.~，-_.~.~.~>...，~_..~~~~一…… 

      使用jQuery 模板插件可以在HTML字符串中声明一些特殊的变量，如${term} ，这些变量随 

后可以被替换成一组数组或其他模板。 

      举个例子，以下是第8 章的 displayAbbreviations 函数: 

       function  displayAbbreviations()   {  
        if  (!document.getElementsByTagName   11         !document.createElement  
       -11   ! document .αeateTextNode) return  false;  
         var  abbreviations  =  document.getElementsByTagName("abbr");  
         if (abbreviations . length  <  1)  return  false;  
         var  defs  =  new  Array();  
         for  (var  i=O;   i<abbreviations.length;  i++)   {  
            var  current  abbr  =  abbreviations[i];  
            var  definition  =  cur工ent_abbr.getAttribute("title"); 
            var  key  =  current_abbr.lastChild.nodeValue;  
            defs[key]  =  de于inition; 

         var  dlist  =  document.create Element("dl");  
         for  (key  in  defs)   {  
            var  definition  =  defs[key];  
            var  dtitle  =  document.create Element("dt")j  
            var  dtitle_text  =  document.createTextNode(key);  
            ,dti tle. appendChild (dti tle _ text) j  
            var  ddesc  =  document.createElement("dd");  
            var  ddesc  text  =  document.createTextNode(definition);  
            ddesc.appendChild(ddesc_text);  
            dlist.app~ndChild(dtitle);  
            dlist.appendChild(ddesc);  

         var  header  =  document.createElement("h2");                                                                   .  
         var  header  text  =  document.createTextNode("Abbreviations")j  
         header.appendChild(header_text)j  
         document~body.appendChild(header);  
         document.body.appendChild(dlist)j  

      如果使用jQuery 及jQuery 模板插件，可以如下重写: 

       function  displayAbbreviations()   {  
         II 创建缩写词数组 
         var  data  =  $('abbr').map(function(){  
            return  {  
              desc:$(this).attr('title') ,  
              term:$(this).text()  

         }).toArray()j  
         II 添加到文档并应用模板 
         $('<h2>Abbreviations</h2>').appendTo(document.body).~fter(  
             $ .tmpl(   "<dt>${term}</dt><dd>${desc}</dd>" ,  data  )  
               . wrapAll(" <dl l>")  
        ，  ， ， 、  、 
           ..  
           ,  
         ， 
     ， ， ， 、 、 

                                                                                     、 

----------------------- Page 294-----------------------

                                                               .  

   276     附录 JavaScript 库 

     更进一步，还可以把模板从函数中分离出来，根据每一页的具体情况来定义缩写词模板。模 

板插件的文档 (ht甲:// api.j query. com/tmpl) 中详细介绍了利用<script>元素的更高级模板功能，请 

读者自行参考。 

A.4.2    操作内容 

     如果想对现有文档执行某些操作，或者移动某些元素的位置，可以使用 jQue:ry的 appendTo 

或 i nsertA fter、等方怯。通过这些方怯，可以找到一组元素，并把它们全都变成另一个元素的子 

元素。 

    例如，可以把一个列表中的所有元素全部转移到另一个列表中: 

     $(' ul#listl  li'). appendTo("ul#list2") .;  

    之所以可以实现这种操作，原因在于每个元素在文档申都只有一个引用。你让它成为另一个 

元素的子元素，也就意味着它必须与原来的父元素解除"父子关系"。假如你想的是复制这些元 

素，那么可以使用jQuery 的clone 方法: 

     $('ul#listl li').clone().append丁o(飞l#list2"); 

    DOM 操作在任何一个库中都受到了极大的重视，它们分别都提供了一些用于删除、插入、 

添加、前置等操作的快捷方法。 

A.5     处理事件 

    综观全书，不难发现事件其实是用户交互的根本所在。没有事件，也就没有办越与页面交互。 

    通过前面的学习，相信你已经掌握了一些基本的事件方怯。说到使用库，当然很多也都内置 

了相应的事件管理功能。而且，这些库还包含了浏览器没有原生实现或者说 W3C 事件模块中没 

有定义的自定义事件的注册及调用机制。 

A.5.1    加载事件 

    前面介绍过一个为页面加载事件注册处理方法的函数，即 addLoadEvent: 

     function  addLoadEvent(func)   {  
      var  oldonload  =  window.onloadj  
      if  (typeof  window.onload   !=   'function')  {  
        window.onload  =  funcj  
      }  else  {  
        window.onload  =  function()   {  
          oldonload();  
          funcO;  

    利用这个函数可以在页面加载的时候执行其他函数: 

    function  myFucntion()   {  
      //在页面加载后执行一些操作 

    addLoadEvent(myFunction)j  

----------------------- Page 295-----------------------

                                                                        A.5   处理事件           277  

     以上代码也可以写成: 

      addLoadEvent(于unctionO  {  
       //在页面加载后执行一些操作 
      });  

     不同的库也都提供了类似的方法，只不过在实现方式上会有所不同。比如说， jQuery 就利用 

连缀语怯基于每种事件类型都提供了相应的事件方法 (http://api.jquery. comlcategory/even也)。 

     以 addLoadEvent 为例， jQuery 的 ready 方法以类似的方式实现了相应的机制: 

     $(document).ready(handler);  
     $(handler) ;  

     第二个方法假定 document 对象是 ready 方法的目标。而 ready 方法可以接收一个匿名函数， 

并将该函数注册为处理文档'就绪事件的处理函数: 

     $(document).ready(function()  {  

                                            •  
       //在页面加载后执行一些操作 
     });  

     这样，只要 DOM 初始化工作一完成，就会调用 ready，相应地就会立即执行传人的回调函 

数。 

     如果想像使用 addLoadEvent 函数一样使用jQùery 的方在去，只要把 addLoadEvent 替换成$就可 

以了: 

     function  myFucntion()   {  
       //在页面加载后执行一些操作 
     }  
     $(myFunction);  

     或者干脆这样写: 

     $( function 0  {  
       //在页面加载后执行一些操作 
     })j  

A.5.2     其他事件 

     除了加载事件，jQuery 等库还提供很多特定于元素的事件，例如blur、 focus、 click、 dblclick、 

mouseover、  mouseout 和 submit，等等。 

     使用这些事件方法，可以为DOM元素批量注册事件处理函数，比如为页面中的每个链接注 

册相同的 click 事件处理函数: 

     $(γ).click( function(event)  {  
         //在新窗口中打开当前href 中的链接 
         window.open(this.getAttribute('href'));  
         //阻止链接的默认动作 

     });  

     这些方法还有另一种意外的用毯，即在没有用户交互的情况下，你可以通过调用相应的方式去 

来触发元素上已经注册的事件监听器。 

     $('a:first').click()j  

----------------------- Page 296-----------------------

     278            附录 JavaScript 库 

         举例来说，下面是第 12 章的 resetFields 和 prepareForms 函数: 

         function  resetFields(whichform)   {  
            for  (var  i=O;   i<whichform . elements . length;  i++)   {  
                var  element  = whichform.elements [i];  
                i f   (element.type  ==         "submit")  continue;  
                var  hasPlaceholder  =  element.placeholder  II  element . getAttribute('placeholder');  
                if  (!hasPlaceholder)  continue;  
               element . on忏巾f旬OCIω =  fu川nctio叫)  {  
               var  text  =  element.placeholder  II  element.getAttribute( ' placeho lder') ;  
                if (this.value  ==   text)  {  
                   this . className  =  "        ;  
                   this .value  =  "";  
                 }  
                }  
               element . o巾l旧= functionO   {  
                   if  (this.value  ==          "")  {  
                      this.className  =  'placeholder';  
                      this.va l ue  =  element.placeholder  II  ele阳1t .getAttrtbute( ' placeholder');; 

               element . onblur();  

         }  
         function  prepareForms()   {  
            for  (var  i=O;   i<document . forms.length;   i++)   {  
               var  thisform  =  document.forms[i]j  
               resetFields(thisform);  
                }  
            }  
         }  
         addLoadEvent(prepareForms)                                                                                 ...  

        使用jQuery 选择器和事件方怯， 以上准备表单的代码可以缩短为: 

         $(functionO  {  
            $('form  input[placeholder]') . focus(function(){  
               var  input  =  $(this);  
               if  (input.val()  ==   input.attr('placeholder'))  {  
                  input .val(' ').removeClass('placeholder').;  

            }) . blur(function(){  
               var  input  =  $(this)j  
               if (input.va l()  ==           ")  {  
                  input.val(input.attr('placeholder')).addClass( ' pl aceholder ' );  
             ， ， 电 、 

           ，  、 ， ， 、   i τ 、 ‘ ， ， ， 、 
                 t 
                         1 
                      Z    - 
                 D  HU  
           J P . 
                           3  
                        1 
       ，  ‘  、 J  ，  ‘  、 J ' · 

                    •  

A.6           Ajax  

        Ajax 应用爆发后， JavaScript库也变得越来越流行起来。很多库中的第一个对象就是Aja:x， 

即便不是， Aja:x对象也是这些库迅速流行的一个重要原因。 

A.6.丁           Prototype 与Ajax 

        最早源于Ruby oñ Rai1s 项目的Prototype 库，就是因 Ajax 对象而流行的。 Prot。可，                                                                                pe 提供了几 

种独特的Ajax 方法: 

----------------------- Page 297-----------------------

                                                     A.6  Ajax  279  

    口Ajax.RequestCurl.  options)执行基本的 XMLHttpRequest 请求; 

    口 Ajax.UpdaterCelement. url.  options)包装请求，并且将请求返回的内容自动添加到给定的 

     DOM节点中z 

    口 Ajax.PeriodicalUpdaterCelement. ur斗.  options)按照一定的时间间隔自动将请求返回的内 

     容添加到给定的DOM节点中。 

   以上每个方法中的 options 参数都包含下列属性。 

    口 contentType，即请求的内容类型。默认值为 application/x训-form-urlencoded。 

    口 method，即请求的 HπP方法。Proωtype 对于 put 和 delete 等请求的处理方式，以 post 

     请求重写并将原始请求方法放到请求的-method 参数中。默认值为 post。 

    口 parameter飞即与请求一同发送的参数。这些参数的格式可以是类似get 请求中 URL 编码 

     的字符串，也可以是类似散列的对象，比如数组或以属性名表示参数名的对象。 

    口 postBody，默认值为 null ， 即在 post 请求体中包含的内容。如果为空，请求体中将包含 

     parameters 选项的内容。 

    口 requestHeaders ，是一个对象或数组，可以通过它在请求中添加额外的头部信息。如果是 

     对象，属性名和值分别表示请求头部的名和值;如果是数组，则偶数索引项(从0开始算) 

     表示头部信息的名称，奇数索引项(从1开始算)表示请求头部信息的值。 - 默认情况下， 

     Prototype 会在这个属性中包含几个头部信息(重写就没有了) :  

     •  X-Requested-With ，默认情况下为 XMLHttpRequest，供服务器端识别 Ajax 请求用。你可 

       以根据自己的需要设置。 

     •  X-Prototype -Version ,  Prototype 当前的版本号。 

     •  Accept ，默认设置为 text/javascript、 text/html 、 application/刀nl 、 text/xml 和*/*。 

     •  Content-type ，根据contentType 的值和编码方式构建。 

   除了这些属性外，还可以在请求的不同阶段根据服务器的响应调用一些因调方法。下列每一 

个回调方法都应该接收到两个参数，          一个是 XMLHttpRequest 对象，另一个在响应包含X-JSON头 

部的情况下是响应返回的 JavaScript 对象。如果没有X-JSON头部信息，则第二个参数为 null 。 

唯一一个例外是onException 回调方怯，它的参数一个是Ajax.Request 实例，另一个是异常对象。 

下面以它们在请求中被调用的顺序列出了这些回调方法。 

   口 onExceptionCajax.request.exception)在请求或响应中出现错误时被调用，可能会在下面任 

     何一个回调方法执行期间同时发生。 

   口 onUninitializedCXHRrequest.json)在请求对象创建完成后可能会被调用，但不一定总会被 

     调用，因此尽量不要使用它。 

   口 onLoadingCXHRrequest.json)在对象创建完成且其连接打开时可能会被调用，但同样不一定 

     总会被调用，因此尽量不要使用它。 

   口 onLoadedCXHRrequest.json)在请求对象创建完成、连接打开且准备好发送请求时可能会被 

     调用，但同样不一定总会被调用，因此尽量不要使用它。 

   口 onlnteractiveCXHRrequest.json)在请求对象接收到部分响应但尚未接收到全部响应时可能 

----------------------- Page 298-----------------------

                                                                                                       •  

     280             附录 JavaScript 库 

              会被调用。没错，它同样不一定总会被调用，因此尽量不要使用它。 

         o  on#lIfI  (XHRrequest , j son)在适当的响应代码被设置时会被调用。样#是用来表示响应情况的 

              HTTP状态代码。这个回调方法会在晌应完成但尚未调用 onComplete 之前被调用。这个方 

              法也会阻止onSuccess 和 onFailu陀回调方法的执行。 

         口 onFailure(XHRrequest ， json)在请求完成且有状态代码但其状态代码不是200 到299 之间的 

              数值时被调用。 

         口 onSuccess(XHRrequest.json)在请求完成且状态代码没有定义，或者状态代码介于 200 到 

              299 之间时被调用。 

         口 onCompl ete(XHRrequest ， json)在请求过程的最后被调用。 

         Prototype 还提供了一个全局 Ajax.Responders  方怯，用于控制和访问进进出出各种 

Ajax.Request 方法的 Ajax 请求。要了解有关Ajax.Responders 方榕的详细情况，请参考 Prot。可" 

的在线文档http: //www.prototypejs.orglapilajaxlresponders。 

         以下是使用 Prototype 发送Ajax 请求的几个例子。 

         //  Prototype  Ajax.Request  
         //创建一个新的一次性请求并在成功时弹出消息 
         new  Ajax.Request(  
             'some-server-side-script.php')  

                method:  'get ' )  
                onSuccess:  function  (transport)  {  
                     var  response  =  transport.responseText   II  "no  response  t ext";  
                         alert('Ajax.Requ est was   success仇1 1:                         '  +  response)j  
                、 
            v n J P 
                   pn  
                                                   ， 、 
                                                        r1rT  
                                   正 
                                             --nu1  
                      4 4             Q  L & 
                          1ir  
                叫  「  τ 「  a f U H r  a     ρ H n 
                                        nHcnk  
                                 ·    HUVA     nuHU  
                             ' 」 u 2 1           中 飞 z ' '  1 
                                 ·kun  

                                                                ，  ，  ， ‘ 、 
                                                                AU  
                                                           i τ 
                                                           -T4  
                      』 白  品    ， 叮 . 
                                                  F=     2M    e      ..  
                    d 止   - E              」    』  L 
                                        - 
                            飞 
                                 J 
                                                                      ,  
                、 
               J F 

         、  、 ，  ， ，  .‘ 、                、、           •  

        ，  ， 
           .  
           ,  

         //  Prototype  Ajax.Updater  
         //创建一个一次性请求，以 responseText 来填充#ajax-updater-target 元素 

         new  Ajax.Updater(  
            $('ajax-updater~target'))  
             'some-server-side-script.php')  

                   method :  ' get' ,  
                   //将其添加到目标元素的上部 
                   insertion:  Insertion.Top  
             }  

         //  Prototype  Ajax .periodicalUpdater  
         //创建一个周期性的请求，每 10 秒钟自动填充一次#ajax-peri创ic-ta可et 元素 

         new  Ajax.Periodica1Updater(  
            $('ajax-periodic-target') ,  
             'so~e-server-side-script.php  "  

                   method:        ' GET'  ,  
                   //添加到现有内容的上方 
                   insertion:  Insertion.Top ,  
                   //每 10 秒钟运行一次 

                        3  

----------------------- Page 299-----------------------

                                                                                                                                             A.6         Ajax              281  

                    frequency:   10  
             、 
            J  E  L 

       ， ， ，  ，  、 、 ..  
            ,  

         Ajax.Request 对象的另一个简单但却很给力的用法，是隔一段时间保存一次表单信息。这特 

 别适合在博客应用中解决用户临时保存数据的问题。使用 Ajax.Request()对象，再配合Proωtype 

 的 Form 序列化方法，可以从表单中取得当前的信息，每隔几分钟就保存到服务器一次，从而保 

证用户不会意外丢失已经花时间填写的内容。 

          //使用 Prototype 实现自动保存功能 
          //每30 秒钟就保存一次#autosave-fonn 表单中的信息 
          //然后更新#autosave-status 元素标明更新状态 
      r   setTimeout(function()  {  
             new  Ajax.Updater(  
                    $('autosave-status') ,                                                                                                            •  

                           method: ' post' ,  
                           parameters   :  $('autosave-form').serialize(true)  

          }, 30000) ;  

A.6.2            jQuery 与Ajax 

         为了比较语怯上的异同，接下来看一看jQuery0                                                                  jQuery 也有一个低级的$ .ajax 方法， 可以接 

受各种属性。不过，还是先来看看它的那些简单易用的方法吧。 

          口 $.post(url ，              params ,       callback)通过 POST 请求取得数据。 
         口 $. get(url ，             params.   callback)通过G盯请求取得数据。 
          口 $. getJSON(ur斗. params ,                       callback)取得JSON 对象。 
         口 $.getScript(u斤， ca llback)取得并执行JavaScript 文件。 

         这些方法实际上都是$.ajax()的包装方怯，它们的回调方法总会被作为$.ajax()的成功回调方 

法调用。每个回调方法都接受两个参数，分别是请求对象的晌应文本 (responseText)  和状态 

 (status) :  

                                                                                                                                  •  

         $.get('some-server-side-script.php' ,  
             { key:       'value'  },  
             functio叫responseText，                   status){  
                    //你的代码 
            也  、 

            ' 5 

         、 
       ，  ，  .  ‘ 
            -3  

         状态是以下几个值之一: 

         口 success 

         o  error  

         口 notmodified 

         在使用 getJSON 和getScript 方法时响应会被求值，因此getJSON 方法中传给回调的参数是一 

个JavaScript对象。 

                                                                                                                           .  

----------------------- Page 300-----------------------

_.  
 ,  

                         282           附录 JavaScript 库 

                             下面再给出几个使用上述方法的例子。 
                                                                                                                                                                                  ,  
                             //使用$.getO实现快速的人j 缸调用 

                             //创建一个一次性的请求并在成功时弹出消息 
                             $.get('some-server-side-script.php' ,  
                                { key:     'value'  },  
                                function(responseText ,status){  
                                      alert('successful:  '  +  responseText);  
                                、 
                              J  r  t 

                           ， ， . 、 、 
                                                                                                                          '  
                               ..  
                               ,  

                             //使用$. getJSON ( )加载 JSON对象 
                             //创建4个一次性的请求加载JSON文件并在成功时弹出消息 
                             $.getJSON('some-server-side-script.php' ,  function(json){  
                                alert('successful:   '  +  json.type);                                                                  •  
                             });  

                            jQuery 还提供了一个 loadC)方法: 

                             口 $Cexpression) . loadCurl.  para邸. cal1 back)才巴 URL 的结果加载到相应的DOM元素中。 

                            这个方怯会以返回的结果自动填充相应的一个或多个元素: 

                             / / $( . . . ) .1 oadO用于自动填充元素 
                             /1 创建一个一次性的请求，用 responseText 的内容填充#ajax-updater-target 元素 

                             $ ("在ajax-updater-target").load( 
                                ' some-server-side-script.php' ,  
                                { key :  'value I      },  
                                   function(responseText ,status)  {  
                                      alert('successful:  '  + responseText);  

                            Prototype 的Ajax . update C )方怯与此也是类似的。 

                           气而且，也可以使用$()方法实现周期性的保存功能: 

                             //使用 jQuery 实现自动保存功能 
                             //每 30 秒钟保存一次#autosave-form 表单的信息 

                             //然后更新扣utosave-status 元素标明更新状态 
                             setTimeout(function()  {  
                                $('autosave-status'). 工oad( 
                                       'some -server-side-script.php' ,  
                                      $.param({  
                                           . title:$( '#autosave-form  input[@name=title] 冒  ).val() ， 
                                             story:$('#autosave-form  textarea[@name=story]').val()  
                              、       })  

                             } ,30000);  

                            jQuery 还有一些Ajax 插件，例如MikeAlsup 的AjaxForm 插件 (h句://p lugins.jquery. coml)  

                     就让处理表单和 Ajax 事件变得很容易。想要像第 12 章那样通过 Ajax 提交评论表单吗?就这么 

                     简单: 

                             $('#commentForm').ajaxForm(干unction()  {  
                                alert("Thank  yåu  for  your  comment!")  
 ,                           });  

                            这个方法会将表单的内容序列化，然后将结果发送给表单的 action 属性中指定的脚本。 

----------------------- Page 301-----------------------

                                    • •  -   ←一一- 

                      一-  一- 

                                                                  A.7  动画和效果           283  

  A.7     动画和效果 

      到现在为止，我们已经知道使用库能完成很多 DOM操作和脚本任务了。下面我们来享受一 

  些视觉上的冲击和交互效果。 

      有些库(如jQue巧r)        会内置二些效果属性，而另一些库则会依赖插件来提供效果方法。如果 

  你选择的库没有效果方法，建议考虑一下Moo.fx 和Scr才 pt.aculo.us。 

       口问oof. fx   (h句://moofx. mad4milk.netJ)把自身描述为"一个超轻量、 超小巧、超精简的 

         JavaScript效果库，可以配合prototype. js 或mootools 框架使用。"总的来说， Moo.fx 的使 

         用还是非常方便的，它采用了一种低抽象度的方式，让你指出元素以及想要在给定的时 

         间间隔内修改哪个 CSS 属性。这些修改只会应用到特定的元素，不会应用到该元素的子 

         元素(除非子元素根据层叠规则会继承相应的 CSS 属性)。利用这些低抽象度的特性，不 

         用编写太多代码，就可以创造出几乎任何你能够想到的效果。 

       口 Scri pt. acul o. us   (http://script.aculo.us)  呢，它"是一个好用、跨浏览器的JavaScript 用户 

         界面库，能够让你的网站和Web 应用动起来。" Script.aculo.us 采用的是一种高抽象度的 

         方式，提供了一些核心效果以及在此基础上的组合效果。在应用这些高级效果的情况下， 

         指定元素的所有子元素可能也会受到影响。例如，在某个段落上调用 Effect.Scale 时，字 

         体的大小也会随着段落及其他子元素的宽度和高度的变化而同步缩放。这些高级效果的 

         组合让应用大型、复杂的效果变得比较简单，值得考虑。 

      以上这两个效果库都是构建在 Proωψpe 基础上的， Moo. fx 也有基于 MooTools 库的版本 

  (ht甲://mootools.netJ)。 

  注意!叶oO.fx 需要通过$()和$$()方法取得元素，因此再重申一次，如果你使用的是这个库，那 

         么就要在混合多个库时倍加小心。建议查看文档，采取最佳方式避免冲突。 

  A .7. 1  基于 css 属性的动画 

•  

      动画的最基本形式，就是随着时间推移改变一个元素的 CSS 属性，比如下面这个我们在第 

  10 章看到过的moveElement 函数: 

      function  move Element(elementID,final_x,final_y, interval)  {  
        if (!document.getElementByld)  return  falsej  
        if (!document.getElementByld(elementID))  return  falsej  
        var  elem  =  docωur町阳『 
        if  (elem .movement)  {  
          clearTimeout(elem.movement)j  

        if  ( !elem.styl e.left)  {  
          elem.style.left  =  "OpX"j  
        }  
        if  ( !el em. style.top)  {  
          elem.style.top  =  "opx";  

----------------------- Page 302-----------------------

                                     284                    附录 JavaScript 库 

                                                var  xpos   =  parselnt(elem~style.left);  
                                                var  ypos   =  parselnt (elem.style.top);  
                                                var  dist  =  0;  
                                                 if  (xpos  ==  final_x  &&                               ypos  ==  final_y)   {  
                                                     return  trl!.e;  
                                                、 
                                          1 - J P 

                                                   ￡  飞 ' '           、  J   俨 ·    『  、  ‘ 、  ， ，  ，  ， ‘ 、 1 r 
                                                                                            VA---lvA1i-l  
                                                                                   nH·nH·  
                                      ·  v n  d  C  L  +  v n                 唱 
                                                           VACdnUVAF3nu  
                                                                   ra=--e3=-- 
                                           O  L  +  T    r   u a  n  i t  ' - T  e  i 
                                                                 nvnv  
                                T       F       I                   3 F H h · ·  r d            正 、 
                                                                                          -idTd  
                                                · 0  4  4                                        ，          、    、   ，   ，  、 ，  、 ‘  ， 、  ， ， 飞 
                                                      JUVAJUVA  
                                                                                                                                         '' 
                                                                                                      --ny  
                                                                A v n  M 
                                                                                                                                               nunv  
                                                                                                                                            4444  
                                                                                                t                           V n 
                                                                                                                  x         VA2u  
                                                                                                         nHnu  Cd 
                                                                  ' u n d q 
                                                                                                            a5  
                                                                                                                                  o- 
                                                                                                            i 
                                                                       '  ·  ·  X  L 」 4 r  '  ·  1 
                                                                                                                         ••  
                                                                                                                                          ',,,  
                                                                                              牛 飞 
                                                                                                                                                   3·3  
                                           1 · J  、 P               F  M  2  ·  ·  t 4  r  3  r L 

                                                    飞  ， ，                             ， ，  ，  ， 、 、 
                                                                               . 
                                                                                                                                                                                                                                     •  
                                                                     ， ， 、    a 、 -                                                  e 

                                                                                                                              吨 
                                                                       3  P  H  H  - 
                                                                                                                     41  
                                               y  n  1  -    忐  A V  u  m M 
                                                                                                                                    VA                                                  •  
                                                                          、                                          - · 咱 
                                                                                                                          nH  
                                                                                                                              i     J I       J J 
                                                       J  C  L     ­ u n a          」 ­ 』   3 r t 、 L 4 、 

                                          、 . ，  ，  ‘ 、 4  f                 rT+LO 、  r  M. 2 、 飞 t r 

                                                                                  nH        uYT--1  
                                                        =  v =  n  J ζ 
                                                                nu      < 
                                                            uyso  
                                                 4                    P H n t 4  e   i  t r ' 1 
                                                    8  
                                                        飞 
                                                v n  l 」 -                        ， 品 ， 、 . - i r 正 、       、                     ，  ，  ， ‘ 、   、 
                                                                                                                                          , 
                                                                                                       .l  
                                                             牛 
                                                                        MY                                                                    nu  
                                                                                                                                         ·  4 ， ，  .  ‘ 
                                                                                                           2u               VJ      qd             -3  
                                                                                                         nH      J             nMO  
                                                                                                                                  o  
                                                                          哈 
                                                                                                            i 
                                                                                                                                         I  
                                               y  v  u  s   ι      E U n d      牛  」         ' ·  t                                        晶 
                                                                                  ·  
                                                                                              、 占 、 
                                                                               d 、  ­  u n  d q L 

                                         牛  、  . ， ，  ‘  、 f                         、  ‘ ， ，  ，  ， ‘ 、 ,< 

                                                                             rT&LO  
                                                                             、 .  0 4 - - 
                                                    FT  
                                                                                1 -  吨 i τ d v 
                                                                nu      >         nH·  
                                                                   r2==  
                                                           v n 
                                                            uyso  
                                                        飞           3 P H  ­ n l L 4  r d 
                                                                                                   tvy. 
                                                                                       『 · -    ，                 - ￡ ‘ .  、  . 、 ，  ，  ， ‘ 、 ，  ，  ， 、 、 
                                                      JUUY  
                                                                                                                                          , 
                                                v n  l  -    牛 
                                                                        Mnvy                                                               4  nv  
                                                                                                                            气 
                                                                                                                          nH       J               -3  
                                                                          『                     t                             i 
                                                                                                           CJ  
                                                                                                         o  
                                                                                                      nv·                                J  A  
                                                        s   ι      ' u n a         U  J 」 i b F 飞 L 品 ,                    d 

                                                :::m二;:::-:飞;vzi;m;n俨;elem口D+"'3 刊川川3 刊叫jp飞归val+")"; 

                                           使用计时器和数学公式的问题在于，代码会在不知不觉中变得非常复杂冗长。好在 jQuery 

                              之类的库可以为我们提供很大的帮助。 

                                           上面这个moveElement 函数是通过链接的鼠标事件触发的: 

、 

                                           var  links  =  list.getElementsByTagName( 飞"); 
                                            //为 mousωver 事件添加动画行为 
         /                                 links[O].onmouseover  =  function()   {  
                                                moveElement("preview" , -100 ,0 , 10);  

                                           ii阳[1] . 0川seover =  function()   {  
                                                move Element("preview" , -200 ,0 , 10);  
                                            }  
                                            links[2] . onmouseover  =  function()   {  
                                                move Element("preview" ,-300 ,0 , 10);  

                                           我们可以把rnoveElement 相关的逻辑集中起来，通过jQuery 的 animate 方法来为 prev1ew 元素 

                              应用位置动画。这个animate 方法以 css 属性及最终值的列表作为参数，能够按照指定的时间间 

                              隔从当前值开始修改相应的属性值。 

                                            $('a') . each(function(i)   {  
                                                var  preview  = $('#preview');  
                                                var  final  x  = i 牢 -100; 
                     、                          $(this).mouseover(function(){  
                                                     preview.animate({left:final_x} ,  10);  
                                                 });  
                                            });  

                                           这就比第 10 章的代码简单多了。使用jQuery 只需几行代码，而且不必担心复杂的数学计算 

                              和计时器问题。 

                                           当然，还不止于此，你还可以控制动画的变化过程。 jQuery 的 animate 方也为此还接受另一 

                                                                                                                                                                                                                                           飞E 

----------------------- Page 303-----------------------

                                                         一 

                                                                                               •  

                                                                    A.7   动画和效果             285  

个参数: 

     $(expression).animate( properties ,  duration ,  easing  )  

     第三个参数eas1ng 是一个函数，用于计算动画在特定时间段内的速度。这些函数涉及的数学 

计算有时候会非常复杂，但借助它们来改变速度却能创建出精彩的淡入淡出以及弹跳效果。 

jQuery 库中默认的缓动函数只有默认的 sw1ng 和速度恒定的 1 inear。 

     要想得到更多缓动函数，可以在 jQuery UI 套件 (h句://j queryui. com/)或 jQuery 缓动插件 

 (h句://gsgd. co.咏/sandboxljquery/easing)  中去找。 

A.7.2     组合动画 

     不少库都提供了一些组合动画，以方便开发人员使用。例如，在不用插件的情况下， jQuery  

提供了下列方法。 

     口 fadeln 和fadeOut。 

     口 fadeTo 将匹配元素的不透明度调整到指定的值。 

     口 slideToggle、   slideDown 和 slideUp 用"滑移动画"隐藏和显示匹配的元素。 

     其他库， 比如Script.aculo.us ，还提供了更多高级动画效果，比如下面这些。 

     口 Effect.Appear、   Effect.Fade 

     口 Effect.Puff 

    ， 口 Effect .DropOut 

     口 Effect.Shake 

     口 Effect.SwitchOff 

     口 Effect.BlindDown 和 Effect.BlindUp 

     口 Effect.SlideDown 来日 Effect. SlideUp 

     Q   E ffect. PU 1 sate  
     o  Effect. Squish  

     口 Effect. Fold 

     口 Effect.Grow 

                                    •  
     口 Effect.Shrink 

A.7.3    注意可访问性 

     在使用恰当的情况下，微妙的效果可以起到提示变更的作用。动画和效果也可以把人的注意 

力吸引到界面的某个地方，从而引导交互顺利进行，或者只是让访客感到惊喜并给人留下难忘的 

印象，为没有什么新意的HTML添加一点生命气息。 

     请注意，应用效果时要时刻提醒自己注意可访问性。看上去美不胜收的各种效果，如果影响 

到访客顺利查看信息，恐怕就得不偿失了。 

----------------------- Page 304-----------------------

                                                                                                                                                                                                                                                .  
                                                                                                                                                                        •                                          ‘  
                                                                                                                                                                               ,  
                                                                                                                                                                                                                                    .  
                                                                                                                                                                                                                   •                                                                          •  

                                                                                                                                                                                                                                              •  

                                       286                    附录 JavaScript 库 

                                 A.8                  小结 

                                             在本附录中，我们探讨了为什么库能够帮我们简化日常的编程工作。篇幅所限，不可能面面 

                                 俱到地谈到所有库或者库的所有功能。为此，请感兴趣的读者自行查阅相关库的文档，从而全面 

                                  了解库的特点，作出正确的选择。 

                                             选择库的时候， 一定要全面考察自己看中的每一个候选库。搞清楚如何处理库之间的冲突， 

                                 功能太少还是太多，有没有坚强的社区做后盾，或者说能否得到及时的技术支持二在选定了合适 

                                 的库以后，还要尽可能发挥出这个库的最大效用。与此同时，最好能够进一步理解库的工作原理。 

                                 依赖于库不要紧，关键是不要只停留在简单的使用这个表面上。 

                                                                                                                                                              •  

                                                                                                                                                                            旷"•  

                                                                                                                                                                         •  

   •  
                                                                                                                                   .  

                                                                                                          •  

                                                                                                                             ‘  

.  
~  

                                                                                                                                                                                                                                                           .  
                                                                                                                                                                                                                                                          ,  

                                                                                                                                                                                                                             .  

                                                                                                                                                                                                                                                                                           、 

                                                                                                   ‘  

                                                                                 .  
                                                                                                                                                                                       •  
                                                                                                                                                                                                                                                           ..  
                                                                                                                                                               . .  
                                                                                                                          ·蛐 

----------------------- Page 305-----------------------

     "本书不愧为经典，文笔清新，深入浅出，不知不觉让你掌握优秀的编程原则，明白为什么要遵守标准。 " 

                                                                                      一一-Slashdot 

     "我要隆重推荐本书， 它前所未有地演示了DOM脚本编程的真正潜力。 无论你是JavaScri pt新手还是专家，本书都绝 

对值得你拥有。 " 

                                                        一一-Garre忧 Dimon ， Digítal-Web.com杂志专栏作家 

DOM  Scripting  

                                                          ‘，nlt凰mn.:nmm.. 
Web Desi伊with J avaScript and the  Document 0均ect Model  

    avaδcript                                                                 (第2版) 

    JavaScript是Web开发中最重要的一门语言，它强大而优美。  无论是桌面开发，还是移动应用， 

JavaScript都是必须掌握的技术。 W3C的DOM标准是开发Web应用的基石，已经得到所有现代浏览器的支 

持，这使得跨平台Web开发成了一件轻松惬意的事。 

     本书是超级畅销书的升级版，由倡导Web标准的领军人物执笔，揭示了前端开发的真i帝，是学习 

JavaScript和DOM开发的必读之作。 

    本书在简洁明快地讲述JavaScript和DOM的基本知识之后，通过几个实例演示了专业水准的网页开发技 

术，透彻阐述了平稳退化等一批至关重要的JavaScript编程原则和最佳实践，并全面探讨了HTML5以及 

jQuery等JavaScript库。 读者将看到JavaScript、        HTML5和CSS如何协作来创建易用的、与标准兼容的Web 

设计，掌握使用JavaScript和DOM通过客户端动态效果和用户控制的动画来加强Web页面的必备技术，同 

时，还将对如何利用库提高开发效率有全面深入的理解。 

                                                                          I SBN  978-7-115 - 24999- 9  

                                                                                                L  

                                                                          9  " 7 8 7 1 1 5 " 2 4 9 9 9 9" >  

           计算机/网页制作/J叫叩l                                                 |SBN 978-7-115-24999-9  

                                                                              定价: 49.00元 
