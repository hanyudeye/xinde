* 编译原理
  文字，语音，形状 翻译器
** 绪论
*** 上下文无关文法 
*** 正则表达式 
*** 编译器的中间数据结构 中间采用的临时数据结构，大都采用树型的结构, 源代码也会转化成树结构进行操作
*** 文法定义 相当于不同类型的句子定义一种不同类型的数据，和不同的方法（算法）
** 语法分析
*** 语法分析树 
* 正则 
  foo ——————字符串"foo" 
  ^foo ——————以"foo"开头的字符串 
  foo$ ——————以"foo"结尾的字符串 
  ^foo$ ——————"foo"开头和结尾，（只能是他自己 ） 
  [abc]—————— a 或者b 或者c 
  [a-z] —————— a到z之间任意字母 
  [^A-Z]——————除了 A-Z这些之外的字符 
  (gif|jpg)——————"gif"或者 "jpeg" 
  [a-z]+—————— 一个或者多个 a到z之间任意字母
  [0-9.-]—————— 0-9之间任意数字，或者 点 或者 横线
  ^[a-zA-Z0-9_]{1,}$—————— 至少一个字母数字下划线 
  ([wx])([yz])—————— wy或wz或xy或xz
  [^A-Za-z0-9]—————— 字符数字之外的字符 
  ([A-Z]{3}|[0-9]{4})—————— 三个大写字母或者4个数字
  \B 匹配非单词边界。
  'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。 
  \cx 匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
 \d 匹配一个数字字符。等价于 [0-9]。 
\D 匹配一个非数字字符。等价于 [^0-9]。
 \f 匹配一个换页符。等价于 \x0c 和 \cL。 
 \n 匹配一个换行符。等价于 \x0a 和 \cJ。
 \r 匹配一个回车符。等价于 \x0d 和 \cM。 
\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 
\t 匹配一个制表符。等价于 \x09 和 \cI。 
\v 匹配一个垂直制表符。等价于 \x0b 和 \cK。
 \w 匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。 
\W 匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。 
\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码。. 
\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。 \n 标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \nm 标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。 \nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。 常用的正则表达式 1、非负整数："^\d+$" 2、正整数："^[0-9]*[1-9][0-9]*$" 3、非正整数："^((-\d+)|(0+))$" 4、负整数："^-[0-9]*[1-9][0-9]*$" 5、整数："^-?\d+$" 6、非负浮点数："^\d+(\.\d+)?$" 7、正浮点数："^((0-9)+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$" 8、非正浮点数："^((-\d+\.\d+)?)|(0+(\.0+)?))$" 9、负浮点数："^(-((正浮点数正则式)))$" 10、英文字符串："^[A-Za-z]+$" 11、英文大写串："^[A-Z]+$" 12、英文小写串："^[a-z]+$" 13、英文字符数字串："^[A-Za-z0-9]+$" 14、英数字加下划线串："^\w+$" 15、E-mail地址："^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$" 16、URL："^[a-zA-Z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\s*)?$" PHP 常用正则表达式整理 表单验证匹配 验证账号，字母开头，允许 5-16 字节，允许字母数字下划线：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 验证账号，不能为空，不能有空格，只能是英文字母：^\S+[a-z A-Z]$ 验证账号，不能有空格，不能非数字：^\d+$ 验证用户密码，以字母开头，长度在 6-18 之间：^[a-zA-Z]\w{5,17}$ 验证是否含有 ^%&',;=?$\ 等字符：[^%&',;=?$\x22]+ 匹配Email地址：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* 匹配腾讯QQ号：[1-9][0-9]{4,} 匹配日期，只能是 2004-10-22 格式：^\d{4}\-\d{1,2}-\d{1,2}$ 匹配国内电话号码：^\d{3}-\d{8}|\d{4}-\d{7,8}$ 评注：匹配形式如 010-12345678 或 0571-12345678 或 0831-1234567 匹配中国邮政编码：^[1-9]\d{5}(?!\d)$ 匹配身份证：\d{14}(\d{4}|(\d{3}[xX])|\d{1}) 评注：中国的身份证为 15 位或 18 位 不能为空且二十字节以上：^[\s|\S]{20,}$ 字符匹配 匹配由 26 个英文字母组成的字符串：^[A-Za-z]+$ 匹配由 26 个大写英文字母组成的字符串：^[A-Z]+$ 匹配由 26 个小写英文字母组成的字符串：^[a-z]+$ 匹配由数字和 26 个英文字母组成的字符串：^[A-Za-z0-9]+$ 匹配由数字、26个英文字母或者下划线组成的字符串：^\w+$ 匹配空行：\n[\s| ]*\r 匹配任何内容：[\s\S]* 匹配中文字符：[\x80-\xff]+ 或者 [\xa1-\xff]+ 只能输入汉字：^[\x80-\xff],{0,}$ 匹配双字节字符(包括汉字在内)：[^\x00-\xff] 匹配数字 只能输入数字：^[0-9]*$ 只能输入n位的数字：^\d{n}$ 只能输入至少n位数字：^\d{n,}$ 只能输入m-n位的数字：^\d{m,n}$ 匹配正整数：^[1-9]\d*$ 匹配负整数：^-[1-9]\d*$ 匹配整数：^-?[1-9]\d*$ 匹配非负整数（正整数 + 0）：^[1-9]\d*|0$ 匹配非正整数（负整数 + 0）：^-[1-9]\d*|0$ 匹配正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 匹配负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 匹配浮点数：^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$ 匹配非负浮点数（正浮点数 + 0）：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$ 匹配非正浮点数（负浮点数 + 0）：^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$ 其他 匹配HTML标记的正则表达式（无法匹配嵌套标签）：<(\S*?)[^>]*>.*?</\1>|<.*? /> 匹配网址 URL ：[a-zA-z]+://[^\s]* 匹配 IP 地址：((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?) 匹配完整域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.? 提示 上述正则表达式通常都加了 ^ 与 $ 来限定字符的起始和结束，如果需要匹配的内容包括在字符串当中，可能需要考虑去掉 ^ 和 $ 限定符。 以上正则表达式仅供参考，使用时请检验后再使用s

  ^                Matches the beginning of a line.
  $                Matches the end of a line.
  .                Matches any single character (like ? in filenames).
  .*               Matches any group of zero or more characters 
  \<               Matches the beginning of a word.
  \>               Matches the end of a word.
  []               Matches any character specified within the brackets; for example, [a-z]
  \{n,m\}          表示它前面的单个字符重新的次数
  \s, \S           \S matches any character except whitespace.
  \d, \D           Matches any single digit, 0-9; \D matches any character but a digit.
  \w, \W           Matches any "word" character (upper- and lowercase letters, digits, and the
