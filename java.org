* java-mode
** Ensime key bindings
*** Search
 | Key Binding | Description                                         |
 |-------------+-----------------------------------------------------|
 | ~SPC m /~   | incremental search using =ensime-scalex= major mode |
 | ~SPC m ?~   | incremental search in all live buffers              |

*** Ensime Search Mode
 | Key Binding | Description                                                       |
 |-------------+-------------------------------------------------------------------|
 | ~C-j~       | Move to next match                                                |
 | ~C-k~       | Move to previous match                                            |
 | ~C-i~       | Insert at point import of current result                          |
 | ~RET~       | Jump to the target of the currently selected ensime-search-result |
 | ~C-q~       | Quit ensime search                                                |

*** sbt
 | Key Binding | Description         |
 |-------------+---------------------|
 | ~SPC m b .~ | sbt transient state |
 | ~SPC m b b~ | sbt command         |
 | ~SPC m b c~ | compile             |
 | ~SPC m b C~ | clean command       |
 | ~SPC m b i~ | switch to sbt shell |
 | ~SPC m b p~ | package command     |
 | ~SPC m b r~ | run command         |

*** Typecheck
 | Key Binding | Description                     |
 |-------------+---------------------------------|
 | ~SPC m c t~ | type check the current file     |
 | ~SPC m c T~ | type check all the open buffers |

*** Debug
 | Key Binding | Description                 |
 |-------------+-----------------------------|
 | ~SPC m d A~ | Attach to a remote debugger |
 | ~SPC m d b~ | set breakpoint              |
 | ~SPC m d B~ | clear breakpoint            |
 | ~SPC m d C~ | clear all breakpoints       |
 | ~SPC m d c~ | continue                    |
 | ~SPC m d i~ | inspect value at point      |
 | ~SPC m d n~ | next                        |
 | ~SPC m d o~ | step out                    |
 | ~SPC m d q~ | quit                        |
 | ~SPC m d r~ | run                         |
 | ~SPC m d s~ | step                        |
 | ~SPC m d t~ | backtrace                   |

 *Note:* These key bindings need a transient-state, PR welcome :-)

*** Errors

 | Key Binding | Description                                        |
 |-------------+----------------------------------------------------|
 | ~SPC m e e~ | print error at point                               |
 | ~SPC m e l~ | show all errors and warnings                       |
 | ~SPC m e s~ | switch to buffer containing the stack trace parser |

*** Goto

 | Key Binding | Description          |
 |-------------+----------------------|
 | ~SPC m g g~ | go to definition     |
 | ~SPC m g i~ | go to implementation |
 | ~SPC m g t~ | go to test           |

*** Print and yank types

 |-------------+--------------------------------|
 | ~SPC m h T~ | print full type name at point  |
 | ~SPC m h t~ | print short type name at point |
 | ~SPC m y T~ | yank full type name at point   |
 | ~SPC m y t~ | yank short type name at point  |

*** Documentation, Inspect

 | Key Binding | Description                            |
 |-------------+----------------------------------------|
 | ~SPC m h h~ | show documentation for symbol at point |
 | ~SPC m h u~ | show uses for symbol at point          |
 | ~SPC m i i~ | inspect type at point                  |
 | ~SPC m i I~ | inspect type in other frame            |
 | ~SPC m i p~ | inspect project package                |

*** Server

 | Key Binding | Description                                            |
 |-------------+--------------------------------------------------------|
 | ~SPC m D f~ | reload open files                                      |
 | ~SPC m D r~ | regenerate the =.ensime= and restart the ensime server |
 | ~SPC m D s~ | start ensime server                                    |

*** Refactoring

 | Key Binding | Description                                                          |
 |-------------+----------------------------------------------------------------------|
 | ~SPC m r a~ | add type annotation                                                  |
 | ~SPC m r f~ | format source                                                        |
 | ~SPC m r d~ | get rid of an intermediate variable (=ensime-refactor-inline-local=) |
 | ~SPC m r D~ | get rid of an intermediate variable (=ensime-undo-peek=)             |
 | ~SPC m r i~ | organize imports                                                     |
 | ~SPC m r m~ | extract a range of code into a method                                |
 | ~SPC m r r~ | rename a symbol project wide                                         |
 | ~SPC m r t~ | import type at point                                                 |
 | ~SPC m r v~ | extract a range of code into a variable                              |
 | ~SPC m z~   | expand/contract region                                               |

*** Tests

 | Key Binding | Description              |
 |-------------+--------------------------|
 | ~SPC m t a~ | test command (sbt)       |
 | ~SPC m t r~ | test quick command (sbt) |
 | ~SPC m t t~ | test only (sbt)          |

*** REPL

 | Key Binding | Description                                                         |
 |-------------+---------------------------------------------------------------------|
 | ~SPC m s a~ | ask for a file to be loaded in the REPL                             |
 | ~SPC m s b~ | send buffer to the REPL                                             |
 | ~SPC m s B~ | send buffer to the REPL and focus the REPL buffer in =insert state= |
 | ~SPC m s i~ | start or switch to the REPL inferior process                        |
 | ~SPC m s r~ | send region to the REPL                                             |
 | ~SPC m s R~ | send region to the REPL and focus the REPL buffer in =insert state= |
** ensime java集成环境  
   1.在工程下执行 sbt ensimeConfig 生成项目
   2.emacs 打开服务并连接服务 ensime 就可以了, 多连接几次，可能在下载依赖
   3.如要要用build 功能, 需配置，可以创建一个project/build.properties
   #+BEGIN_SRC scala
   sbt.version=1.0.4  
   #+END_SRC
   查看版本，可以在 sbt 命令行下，执行 sbtVersion
  
   这样就可以 build , 和执行了
*** 什么是错误？ error 里面有 
** sbt scala 写的 交互式构建工具
   echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
   sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2EE0EA64E40A89B84B2DF73499E82A75642AC823
   sudo apt-get update
   sudo apt-get install sbt
   sbt repositories
** maven 中国镜像
** 选择后端
   我选的是 ensime, 此工具可以管理好多类工程
*** sbt工程 
安装 sbt
   #+BEGIN_SRC shell
     nix-env --install sbt
#+END_SRC
*** gradle工程
    Refer to the [[https://ensime.org/build_tools/gradle/][Ensime installation instructions]] to install the =ensime-gradle=
*** 配置
    Follow [[https://ensime.github.io/build_tools/sbt/][the ENSIME configuration instructions]]. Spacemacs uses
*** 使用
    ~SPC SPC spacemacs/ensime-gen-and-restart~ or ~SPC m D r~ generates a new config
for a project and starts the server. Afterwards ~SPC SPC ensime~ or ~SPC m D s~
will suffice do the trick.
*** 注意
    ENSIME is originally built for Scala, so support for java is not complete, in
    particular refactoring doesn't work.
    ensime 原来是为 scala 语言服务的，Java不完善

* java工具
** 编译 javac 
   -classpath Path
   -d Dir   指定编译后的类存放路径
   -g  生成调试表
   -nowarn 关闭警告
   -verbose 打开详细信息
   -o 优化
   
   相对的会在 当前目录一起编译 引用的文件，或者在classpath中找
   编译 java CLASSNAME
   包含jar包 指定搜索路径, 默认在当前目录 java -cp C:\workspace;C:\classes HelloWorld
   JVM 会依 CLASSPATH 路径顺序,搜索是否有对应的类文档,先找到先载入。
** javadoc 文档生成器
   javadoc [options...] [package names...] [source filenames...]
#+BEGIN_SRC java
  $ javadoc net.multitool.Payback
        -public -protected -package -private
        -sourcepath      and -classpath -verbose     and -quiet
        -doclet starting_class

  /** This is a C-style comment, but it
      is also a Javadoc comment. */
#+END_SRC

*** 文档注释
    /** 开始 */ 结束
    javadoc 文件名
    @see 放入链接
    @version 放入版本号
    @author 作者
    @param 方法参数
    @return 返回
    @throws
** javah 
       Example 5.7 Java application with a native method (GetUser.java)
       #+BEGIN_SRC java
        public class GetUser {
          static {
             System.loadLibrary("getuser");
          }
          public native String getUserName();
          public static void main(String[] args)
          {
             GetUser usr = new GetUser();
             System.out.println(usr.getUserName());
          }
       }
       #+END_SRC

       $ javah GetUser //生成Ｃ格式的头文件/定义文件
    Example 5.8 Header file for GetUser native methods (GetUser.h)
    #+BEGIN_SRC c
     /* DO NOT EDIT THIS FILE - it is machine generated */
    #include <jni.h>
    /* Header for class GetUser */
    #ifndef _Included_GetUser
    #define _Included_GetUser
    #ifdef __cplusplus
    extern "C" {
    #endif
    /*
      * Class:       GetUser
      * Method:      getUserName
      * Signature: ()Ljava/lang/String;
      */
    JNIEXPORT jstring JNICALL Java_GetUser_getUserName
       (JNIEnv *, jobject);
    #ifdef __cplusplus
    }
    #endif
    #endif
    Example 5.9 Native method’s C implementation file (GetUser.c)
    #include "GetUser.h"
    #include <stdio.h>
    JNIEXPORT jstring JNICALL
    Java_GetUser_getUserName(JNIEnv *jenv, jobject obj)
    {
       char buffer[L_cuserid + 1];
       cuserid(buffer);
       return (*jenv)->NewStringUTF(jenv, buffer);
    }
    #+END_SRC
    
    #+BEGIN_SRC bash
      $ cc -c GetUser.c
      $ cc -shared -o libgetuser.so GetUser.o
      $ export LD_LIBRARY_PATH=.
    #+END_SRC

** 反编译
   javap
** jar
   $ jar cvf jars/jgnash.jar jgnash/bin
$jar cmf pp.jar manifest bin/*.class
   manifest文件
#+BEGIN_SRC 
   Manifest-Version: 1.0
   Ant-Version: Apache Ant 1.5.3
   Created-By: 1.4.1_02-b06 (Sun Microsystems Inc.)
   Version: 1.0
   Main-Class: net.multitool.Payback.Payback
#+END_SRC
 
** build tool
*** ant
*** maven
* java
** 对象
   文字
   申明常量 final
   整数
   严格浮点计算 strictfp
   boolean 不能强制转换，但可以 int castb=b?1:0;
   ArrayList
   Iterator 
   小数 默认 double, float 要加个 后缀 f 
   多个数 []
** 对象操作
*** 文字
    长度  length() 
    equals
    equalsIgnoreCase
    toLowerCase
    startsWith endsWith
    substring
*** 数组
    ArrayList
    add
*** sound
*** video
*** music
*** 异常
** 流程控制 
   for(String str: args)
** 类、包
java 类库中有几个重要的包
java.lang
java.awt
java.net
java.io
java.util

类库被组织成几个包, 每个包含几个类
java.lang   中 String, Math, Integer 和 Thread
java.awt  包含图形类
java.applet  包含可执行 applet 的特殊行为的类
java.net 包含网络
java.util  包含任务设置的实用程序类，如随机数，定义系统特性 ，日历

引用其他的类 import
静态导入？ import static 可以不加类名调用对象的静态属性或方法
*** java Date 函数
默认不带参数是 当前时间
System.out.printf("%1$tm / %1$td \n",d);
printf 函数的精致操作,%s 是输出字符串 
Wed Jan 10 12:37:55 CST 2018
** 异常
   #+BEGIN_SRC java
         try {
           String name = "//penfold/Session";
           // Obtain reference to the remote object
           Session sess = (Session) Naming.lookup(name);
           System.out.println("Pointless RMI Client. 47 + 13 = " +
                                     sess.add(47,13) + ", right?");
        } catch (Exception e) {
           e.printStackTrace();
        }
   #+END_SRC
* java 
** 第1篇　基础知识
*** 第1章　初识Java 
   1 1.1　Java简介 
   2 1.2　Java语言的特性 
   3 1.3　搭建Java环境 
   设置 PATH 和JAVA_HOME(库文件）
   4 1.4　第一个Java程序 
   5 1.5　小结 

*** 第2章　熟悉Eclipse开发工具 
    1 2.1　熟悉Eclipse 
    2 2.2　使用Eclipse 
    3 2.3　程序调试 
    4 2.4　小结 
    5 2.5　实践与练习 

*** 第3章　Java语言基础 
  1 3.1　Java主类结构 
  2 3.2　基本数据类型 
  3 3.3　变量与常量 
  4 3.4　运算符 
  5 3.5　数据类型转换 
  6 3.6　代码注释与编码规范 
  7 3.7　小结 
  8 3.8　实践与练习 

*** 第4章　流程控制 

  1 4.1　复合语句 
  2 4.2　条件语句 
  3 4.3　循环语句 
  4 4.4　小结 
  5 4.5　实践与练习 

  5 第5章　字符串 

  1 5.1　String类 
  2 5.2　连接字符串 
  3 5.3　获取字符串信息 
  4 5.4　字符串操作 
  5 5.5　格式化字符串 
  6 5.6　使用正则表达式 
  7 5.7　字符串生成器 
  8 5.8　小结 
  9 5.9　实践与练习 

  6 第6章　数组 

  1 6.1　数组概述 
  2 6.2　一维数组的创建及使用 
  3 6.3　二维数组的创建及使用 
  4 6.4　数组的基本操作 
  5 6.5　数组排序算法 
  6 6.6　小结 
  7 6.7　实践与练习 

  7 第7章　类和对象 

  1 7.1　面向对象概述 
  2 7.2　类 
  3 7.3　类的构造方法 
  4 7.4　静态变量、常量和方法 
  5 7.5　类的主方法 
  6 7.6　对象 
  7 7.7　小结 
  8 7.8　实践与练习 

  8 第8章　包装类 

  1 8.1　Integer 
  2 8.2　Boolean 
  3 8.3　Byte 
  4 8.4　Character 
  5 8.5　Double 
  6 8.6　Number 
  7 8.7　小结 
  8 8.8　实践与练习 

  9 第9章　数字处理类 

  1 9.1　数字格式化 
  2 9.2　数学运算 
  3 9.3　随机数 
  4 9.4　大数字运算 
  5 9.5　小结 
  6 9.6　实践与练习 

 8 第2篇　核心技术 

  1 第10章　接口、继承与多态 

  1 10.1　类的继承 
  2 10.2　Object类 
  3 10.3　对象类型的转换 
  4 10.4　使用instanceof操作符判断对象类型 
  5 10.5　方法的重载 
  6 10.6　多态 
  7 10.7　抽象类与接口 
  8 10.8　小结 
  9 10.9　实践与练习 

  2 第11章　类的高级特性 

  1 11.1　Java类包 
  2 11.2　final变量 
  3 11.3　final方法 
  4 11.4　final类 
  5 11.5　内部类 
  6 11.6　小结 
  7 11.7　实践与练习 

  3 第12章　异常处理 

  1 12.1　异常概述 
  2 12.2　处理程序异常错误 
  3 12.3　Java常见异常 
  4 12.4　自定义异常 
  5 12.5　在方法中抛出异常 
  6 12.6　运行时异常 
  7 12.7　异常的使用原则 
  8 12.8　小结 
  9 12.9　实践与练习 

  4 第13章　Swing程序设计 

  1 13.1　Swing概述 
  2 13.2　常用窗体 
  3 13.3　标签组件与图标 
  4 13.4　常用布局管理器 
  5 13.5　常用面板 
  6 13.6　按钮组件 
  7 13.7　列表组件 
  8 13.8　文本组件 
  9 13.9　常用事件监听器 
  10 13.10　小结 
  11 13.11　实践与练习 

  5 第14章　集合类 

  1 14.1　集合类概述 
  2 14.2　Collection接口 
  3 14.3　List集合 
  4 14.4　Set集合 
  5 14.5　Map集合 
  6 14.6　小结 
  7 14.7　实践与练习 

  6 第15章　I/O（输入/输出） 

  1 15.1　流概述 
  2 15.2　输入/输出流 
  3 15.3　File类 
  4 15.4　文件输入/输出流 
  5 15.5　带缓存的输入/输出流 
  6 15.6　数据输入/输出流 
  7 15.7　ZIP压缩输入/输出流 
  8 15.8　小结 
  9 15.9　实践与练习 

  7 第16章　反射 

  1 16.1　Class类与Java反射 
  2 16.2　使用Annotation功能 
  3 16.3　小结 
  4 16.4　实践与练习 

  8 第17章　枚举类型与泛型 

  1 17.1　枚举类型 
  2 17.2　泛型 
  3 17.3　小结 
  4 17.4　实践与练习 

  9 第18章　多线程 

  1 18.1　线程简介 
  2 18.2　实现线程的两种方式 
  3 18.3　线程的生命周期 
  4 18.4　操作线程的方法 
  5 18.5　线程的优先级 
  6 18.6　线程同步 
  7 18.7　小结 
  8 18.8　实践与练习 

  10 第19章　网络通信 

  1 19.1　网络程序设计基础 
  2 19.2　TCP程序设计基础 
  3 19.3　UDP程序设计基础 
  4 19.4　小结 
  5 19.5　实践与练习 

  11 第20章　数据库操作 

  1 20.1　数据库基础知识 
  2 20.2　JDBC概述 
  3 20.3　JDBC中常用的类和接口 
  4 20.4　数据库操作 
  5 20.5　小结 
  6 20.6　实践与练习 

 9 第3篇　高级应用 

  1 第21章　Swing表格组件 

  1 21.1　利用JTable类直接创建表格 
  2 21.2　表格模型与表格 
  3 21.3　提供行标题栏的表格 
  4 21.4　小结 
  5 21.5　实践与练习 

  2 第22章　Swing树组件 

  1 22.1　简单的树 
  2 22.2　处理选中节点事件 
  3 22.3　遍历树节点 
  4 22.4　定制树 
  5 22.5　维护树模型 
  6 22.6　处理展开节点事件 
  7 22.7　小结 
  8 22.8　实践与练习 

  3 第23章　Swing其他高级组件 

  1 23.1　高级组件面板 
  2 23.2　菜单 
  3 23.3　工具栏 
  4 23.4　文件选择器 
  5 23.5　进度条 
  6 23.6　系统托盘 
  7 23.7　桌面集成控件 
  8 23.8　小结 
  9 23.9　实践与练习 

  4 第24章　高级布局管理器 

  1 24.1　箱式布局管理器 
  2 24.2　卡片布局管理器 
  3 24.3　网格组布局管理器 
  4 24.4　弹簧布局管理器 
  5 24.5　小结 
  6 24.6　实践与练习 

  5 第25章　高级事件处理 

  1 25.1　键盘事件 
  2 25.2　鼠标事件 
  3 25.3　窗体事件 
  4 25.4　选项事件 
  5 25.5　表格模型事件 
  6 25.6　小结 
  7 25.7　实践与练习 

  6 第26章　AWT绘图与音频播放 

  1 26.1　Java绘图 
  2 26.2　绘制图形 
  3 26.3　绘图颜色与笔画属性 
  4 26.4　绘制文本 
  5 26.5　绘制图片 
  6 26.6　图像处理 
  7 26.7　播放音频文件 
  8 26.8　小结 
  9 26.9　实践与练习 

  7 第27章　打印技术 

  1 27.1　打印控制类 
  2 27.2　“打印”对话框 
  3 27.3　打印页面 
  4 27.4　多页打印 
  5 27.5　打印预览 
  6 27.6　小结 
  7 27.7　实践与练习 

 10 第4篇　项目实战 

  1 第28章　企业进销存管理系统 

  1 28.1　系统分析 
  2 28.2　系统设计 
  3 28.3　开发环境 
  4 28.4　数据库与数据表设计 
  5 28.5　创建项目 
  6 28.6　系统文件夹组织结构 
  7 28.7　公共类设计 
  8 28.8　系统登录模块设计 
  9 28.9　系统主窗体设计 
  10 28.10　进货单模块设计 
  11 28.11　销售单模块设计 
  12 28.12　库存盘点模块设计 
  13 28.13　数据库备份与恢复模块设计 
  14 28.14　运行项目 
  15 28.15　系统打包发行 
  16 28.16　开发常见问题与解决 
  17 28.17　小结 

 11 附录A　JDK7改进的功能 

  1 A.1　语法 

  1 A.1.1　switch语句允许使用字符串 
  2 A.1.2　整型数据支持二进制形式 
  3 A.1.3　数值型数据中可以出现下划线 
  4 A.1.4　 泛型实例的创建可以通过类型推断来简化 
  5 A.1.5　try-with-resources 语句 
  6 A.1.6　改进了捕获多个异常时的类型检查 
  7 A.1.7　在可变参数方法中传递非具体化参数时，改进编译
  警告和错误 

  2 A.2　网络 
  3 A.3　Java 2D 
  4 A.4　Swing 
  5 A.5　Java I/O 
  6 A.6　并发 
  7 A.7　安全性 
  8 A.8　Java XML 
  9 A.9　Java虚拟器（JVM） 

* awt
  #+BEGIN_SRC java
    import java.awt.*;

    public class ChatClient extends Frame {

        public static void main(String[] args){
            new ChatClient().launchFrame(); 
        }


        public void launchFrame(){
            this.setLocation(400,300);
            this.setSize(300,300);
            this.setVisible(true);
        }
    }

  #+END_SRC
