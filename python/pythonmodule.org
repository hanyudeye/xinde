#+TITLE: python 模块
#+DESCRIPTION: 
#+TAGS: 
#+CATEGORIES: 软件使用

* 模块列表
** math
   max()
   pow(100,	2) 平方
   sqrt  平方根
   e
** 文件
*** 键盘输入
**** : raw_input 函数
: raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：
**** : input 函数
: input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个 Python 表达式作为输入，并将运算结果返回
*** 打开和关闭文件 
    
    open 
    
     把文件读到字符串    open('file').read()
     读 N 字节文件到字符串 open('file').read(N)
     读全部到字符串列表 open('file').readlines()
     读取下一行到字符串串 open('file').readline()
     
      file = open('spam.txt', 'w')
      file.write(('spam' * 5) + '\n')
      file.close()

      close
      write
      read
      文件定位
      重命名和删除文件
      remove()方法
*** 目录
**** mkdir()方法 
**** chdir()方法 
**** rmdir()方法 
** json
*** encode 	将 Python 对象编码成 JSON 字符串
*** decode	将已编码的 JSON 字符串解码为 Python 对象
    pip install --upgrade "jedi>=0.9.0" "json-rpc>=1.8.1" "service_factory>=0.1.5"
** enum
*** 枚举类的使用 
    #+begin_src python
      #!/usr/bin/env python3
      # -*- coding: UTF-8 -*-

      from enum import Enum

      Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))

      # 遍历枚举类型
      for name, member in Month.__members__.items():
          print(name, '---------', member, '----------', member.value)

      # 直接引用一个常量
      print('\n', Month.Jan)
    #+end_src

***  Enum 的源码 
Enum 在模块 enum.py 中，先来看看 Enum 类的片段

#+begin_src python
 class Enum(metaclass=EnumMeta):
     """Generic enumeration.
     Derive from this class to define new enumerations.
     """
#+end_src

 可以看到，Enum 是继承元类 EnumMeta 的；再看看 EnumMeta 的相关片段

#+begin_src python
 class EnumMeta(type):
     """Metaclass for Enum"""
     @property
     def __members__(cls):
         """Returns a mapping of member name->value.
         This mapping lists all enum members, including aliases. Note that this
         is a read-only view of the internal mapping.
         """
         return MappingProxyType(cls._member_map_)
#+end_src
 首先 `__members__` 方法返回的是一个包含一个 Dict 既 Map 的 MappingProxyType，并
 且通过 @property 将方法 `__members__(cls)` 的访问方式改变为了变量的的形式，既可
 以直接通过 `__members__` 来进行访问了

** operator
   add()  
   sub()
   mul
   div
   concat
   operator.lt(a, b)
   operator.le(a, b)
   operator.eq(a, b)
   operator.ne(a, b)
   operator.__lt__(a, b)
   operator.__le__(a, b)
   operator.__eq__(a, b)
   operator.__ne__(a, b)
   operator.__ge__(a, b)
   operator.__gt__(a, b)
** collections 
