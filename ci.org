* CI 框架
** 应用程序流程图
***    index.php 文件作为前端控制器，初始化运行 CodeIgniter 所需的基本资源；
    : index.php 是唯一入口,因为其他文件开头都有
    : defined('BASEPATH') OR exit('No direct script access allowed');
***    Router 检查 HTTP 请求，以确定如何处理该请求；
***    如果存在缓存文件，将直接输出到浏览器，不用走下面正常的系统流程；
***    在加载应用程序控制器之前，对 HTTP 请求以及任何用户提交的数据进行安全检查；
***    控制器加载模型、核心类库、辅助函数以及其他所有处理请求所需的资源；
***    最后一步，渲染视图并发送至浏览器，如果开启了缓存，视图被会先缓存起来用于 后续的请求。
** 模型-视图-控制器  //用户请求一个资源  (数据库中存放资源/找到资源并构图/返回资源给用户)
** 判断请求(生成资源/存储资源)通过浏览器返回给他页面
** 安装(设备安装一下)
   1:  解压缩安装包；
   2:  将 CodeIgniter 文件夹及里面的文件上传到服务器，通常 index.php 文件将位于网站的根目录；
   3:  使用文本编辑器打开 application/config/config.php 文件设置你网站的根 URL，如果你想使用加密或会话，在这里设置上你的加密密钥；
   4:  如果你打算使用数据库，打开 application/config/database.php 文件设置数据库参数。
** 请求流程
*** 1.弄到 URL http://example.com/news/latest/10
*** 2.分析,路由  routes.php //路由的作用是分析成类和方法调用,路由条目中没有,就不分析了
    $route['default_controller']='pages/view'; 控制器路径
    $route['(:any)'] = 'pages/view/$1';  通配规则
*** 3.制造控制器 News
    #+BEGIN_SRC php
      class News extends CI_Controller{
      }    
    #+END_SRC
*** 4.制造数据模型 News_model
****    1.创建数据库表
     #+BEGIN_SRC sql
       CREATE TABLE news (
       id int(11) NOT NULL AUTO_INCREMENT,
       title varchar(128) NOT NULL,
       slug varchar(128) NOT NULL,
       text text NOT NULL,
       PRIMARY KEY (id),
       KEY slug (slug)
       );
     #+END_SRC
****    2.在 application/models/目录
     #+BEGIN_SRC php
       class News_model extends CI_Model{

         public function __construct()
                {
                  $this->load->database();
                }

         public function get_news($slug=FALSE)
                {
                  if ($slug===FALSE)
                  {
                    $query=$this->db->get('news');
                    return $query->result_array();
                  }
                  $query=$this->db->get_where('news',array('slug'=>$slug));
                  return $query->row_array();
                }
       }
     #+END_SRC
*** 5.控制器中使用 model
    #+BEGIN_SRC php
      class News externs CI_controller{
        public function __construct(){
                 parent::__construct();
                 $this->load->model('news_model');
                 $this->load->helper('url_help');
               }
        public function index()
               {
                 $data['news']=$this->news_model->get_news();
               }
        public function view($slug){
                 $data['news_item']=$this->news_model->get_news($slug);
               }
      }
    #+END_SRC
*** 6.控制器中把数据传递给视图
    #+BEGIN_SRC php
      public function index(){
               : $data['news']=$this->news_model->get_news();
        $data['title']="Hello,world";

        $this->load->view('templates/header',$data);
        $this->load->view('news/index',$data);
        $this->load->view('templates/footer');   此视图不传数据
                                                     }
    #+END_SRC
*** 7.视图中调用数据 application/views/news/index.php ;这里就是前台啦
    #+BEGIN_SRC php
      <h2><?php echo $title; ?></h2>
      <?php foreach($news as $new_item):?>
      <h3><?php echo $news_item['title']; ?></h3>
      <div class="main">
      <?php echo $new_item['text']; ?>
      </div>
      <?php endforch; ?>
#+END_SRC
*** 8.修改路由
#+BEGIN_SRC php
$route['news/(:any)'] = 'news/view/$1';
$route['news'] = 'news';
#+END_SRC
** 创建数据 
*** 1.表单或 jquery
*** 2.控制器验证并插入数据
#+BEGIN_SRC php
class News extends CI_Controller{
public function create()
{
if(INPUT==RIGHT)
{
$this->news_model->set_news();
$this->load->view('news/success');    创建成功返回页面
}
}
}
#+END_SRC
*** 3.插入数据的模块
#+BEGIN_SRC php
public function set_news()
{
$data=array(
'title'=>$this->input->post('title'),
'slug'=>$slug,
'text'=>$this->input->post('text')
);
return $this->db->insert('news',$data);
}
#+END_SRC
** 常规主题
*** CodeIgniter URL
**** (默认) URI 分段方式 : example.com/class/function/ID
**** 查询字符串格式 : index.php?c=controller&m=method
*** 配置文件 config/config.php
**** 后缀 .html
**** 启用查询字符串格式
#+BEGIN_SRC php
$config['enable_query_strings'] = FALSE;
$config['controller_trigger'] = 'c';
$config['function_trigger'] = 'm';
#+END_SRC
**** 管理应用程序目录 $application_folder = 'application';
*** 控制器
**** 默认控制器 当 URI 没有分段参数时加载
#+BEGIN_SRC php
$route['default_controller'] = 'blog';
#+END_SRC
**** _remap
: 如果你的控制包含一个 _remap() 方法，那么无论 URI 中包含什么参数时都会调用该方法
**** 处理输出 
: 如果你的控制器含有一个 _output() 方法，输出类将会调用该方法来显示数据， 而不是直接显示数据。该方法的第一个参数包含了最终输出的数据。
#+BEGIN_SRC php
public function _output($output)
{
    echo $output;
}
#+END_SRC
**** 私有方法
只要简单的将方法声明为 private 或 protected 或 _methodname [名字前加下划线]
*** 视图
**** 加载视图$this->load->view('view_name');
**** 将视图作为数据返回
: 如果你将该参数设置为 TRUE， 该方法返回字符串，默认情况下为 FALSE，视图将显示到浏览器。
: $string = $this->load->view('myfile', '', TRUE);
*** 模型  
模型是专门用来和数据库打交道的 PHP 类
**** 加载模型 $this->load->model('model_name');
*** 辅助函数
**** 加载辅助函数 $this->load->helper('url');
*** 类库 位于 /system/libraries
**** 加载类库$this->load->library('class_name');
*** 网页缓存
**** 开始缓存$this->output->cache($n);
**** 删除缓存
#+BEGIN_SRC php
// Deletes cache for the currently requested URI
$this->output->delete_cache();
// Deletes cache for /foo/bar
$this->output->delete_cache('/foo/bar');
#+END_SRC
*** 以 CLI 方式运行
: $ php index.php tools message 重新路由了,单一入口
*** 处理环境
: ENVIRONMENT 常量
: define('ENVIRONMENT', isset($_SERVER['CI_ENV']) ? $_SERVER['CI_ENV'] : 'development');
*** URI 安全
: CodeIgniter 严格限制 URI 中允许出现的字符，以此来减少恶意数据传到你的应用程序的可能性。
