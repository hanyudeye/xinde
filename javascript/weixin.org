#+TITLE: 微信小程序简介
#+DESCRIPTION: 微信小程序简介
#+TAGS: 微信小程序
#+CATEGORIES: 框架使用

* 小程序
** 前提
*** 费用  
    企业、政府、媒体、其他组织注册小程序需要进行微信认证，认证费用为 300 元，如该企
    业已有微信公众号，则可以用微信公众号快速创建小程序账号，以此创建的小程序无需
    认证。
   
    个人注册主体无法认证，故无需缴纳 300 元认证费用，但会有功能限制。
   
    微信小程序需要 https 请求，需要准备 
    1：备案的域名：由于备案需要一定的时间，所以请事先准备 
    2：受认可的证书 https 排查说明：http://www.wxapp-union.com/forum.php?mod=viewthread&tid=6483：
    一个账号只能发布一个小程序，如需发布多个，请申请多个

    1：必须通读运营规范；有需要禁止开发的事项需要了解；比如直播，游戏，抽奖，排行
    榜等； 常见拒绝情形：
   
    7：你必须通过微信认证，才可以使用微信支付等功能：
    认证指引：https://mp.weixin.qq.com/debug/wxadoc/product/renzheng.html?t=201714
*** 有账号，用账号管理小程序(小程序所有者)  
**** 注册小程序账号(小程序所有者)  
     https://mp.weixin.qq.com/
**** 获取开发者 ID, 在左侧开发里面(小程序自己的信息)
     获取 AppID(小程序 ID）
     [[file:image/wxconfig.png][配置]] 
**** 添加开发者 开发者需要认证
     管理-》成员管理
**** 发布->上线审核->审核通过-》上线
*** 工具 
    /home/wuming/soft/tar/wechat_web_devtools
**** 开发者工具 ->用于调试，预览
**** 代码编辑器 

** 创建小程序 
   wxml  weixin markup language
   wxss  weixin style sheets
   
   Pages 目录下。微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 Pages 中，且 Pages 中的第一个页面是小程序的首页。
   每一个小程序页面是由同路径下同名的四个不同后缀文件的组成，如：index.js、index.wxml、index.wxss、index.json。.js 后缀的文件是脚本文件，.json 后缀的文件
   是配置文件，.wxss 后缀的是样式表文件，.wxml 后缀的文件是页面结构文件。
   index.wxml 是页面的结构文件：
   #+BEGIN_SRC html
     <!--index.wxml-->
     <view class="container">

       <view  bindtap="bindViewTap" class="userinfo">

         <image class="userinfo-avatar" src="{{userInfo.avatarUrl}}" background-size="cover">

         </image>

         <text class="userinfo-nickname">
           {{userInfo.nickName}}
         </text>

       </view>

       <view class="usermotto">

         <text class="user-motto">
           {{motto}}
         </text>
       </view>

     </view>

   #+END_SRC
   index.js 是页面的脚本文件，在这个文件中我们可以监听并处理页面的生命周期函数、获取小程序实例，声明并处理数据，响应页面交互事件等。
   #+BEGIN_SRC css
     //index.js //获取应用实例 var app = getApp()
     Page({
     data: {
         motto: 'Hello World',
         userInfo: {}
     },
     //事件处理函数
       bindViewTap: function() {
         wx.navigateTo({

     url: '../logs/logs'
     })
     },
     onLoad: function () {
         console.log('onLoad')
         var that = this
         //调用应用实例的方法获取全局数据
         app.getUserInfo(function(userInfo){
                                //更新数据
                                that.setData({
     userInfo:userInfo
     })
                            })
     } })
#+END_SRC

index.wxss 是页面的样式表：
#+BEGIN_SRC css
/**index.wxss**/
 
.userinfo {
display: flex;
flex-direction: column;
align-items: center; }
.userinfo-avatar {
width: 128rpx;
height: 128rpx;
margin: 20rpx;
border-radius: 50%; }

.userinfo-nickname {
color: #aaa; }



.usermotto {
margin-top: 200px; } 
#+END_SRC

index.json 是页面的配置文件：

页面的配置文件是非必要的。当有页面的配置文件时，配置项在该页面会覆盖 app.json 的
 window 中相同的配置项。如果没有指定的页面配置文件，则在该页面直接使用
 app.json 中的默认配置。

logs 的页面结构
#+BEGIN_SRC html
<!--logs.wxml-->
 <view class="container log-list">

<block wx:for="{{logs}}" wx:for-item="log">

  <text class="log-item">
{{index + 1}}. {{log}}
</text>


</block>
 
</view>
#+END_SRC
logs 页面使用 <block/>  控制标签来组织代码，在 <block/>  上使用 wx:for 绑定 logs 数据，并将 logs 数据循环展开节点
#+BEGIN_SRC json
//logs.js var util = require('../../utils/util.js') 
Page({
data: {
  logs: []
},
onLoad: function () {
  this.setData({

 logs: (wx.getStorageSync('logs') || []).map(function (log) {


return util.formatTime(new Date(log))

 })
  })
} })
#+END_SRC
** 结构（页面）
*** 小程序公共设置 
**** 公共数据 app.json
 app.json 是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。QuickStart 项目里边的 app.json 配置内容如下：

 {
   "pages":[
     "pages/index/index",
     "pages/logs/logs"
   ],
   "window":{
     "backgroundTextStyle":"light",
     "navigationBarBackgroundColor": "#fff",
     "navigationBarTitleText": "WeChat",
     "navigationBarTextStyle":"black"
   }
 }
 我们简单说一下这个配置各个项的含义:

 pages 字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。
 window 字段 —— 小程序所有页面的顶部背景颜色，文字颜色定义在这里的。
 其他配置项细节可以参考文档 小程序的配置 app.json。
**** 公共逻辑 app.js
**** 公共样式 app.wxss
*** 项目配置 project.config.json
*** 页面设置
**** 页面内容设置 WXML 
     从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，
     JS 通常是用来处理这个页面和用户的交互。

     同样道理，在小程序中也有同样的角色，其中 WXML 充当的就是类似 HTML 的角色。打开 pages/index/index.wxml，你会看到以下的内容:
 #+BEGIN_SRC xml
 <view class="container">
   <view class="userinfo">
     <button wx:if="{{!hasUserInfo && canIUse}}"> 获取头像昵称 </button>
     <block wx:else>
       <image src="{{userInfo.avatarUrl}}" background-size="cover"></image>
       <text class="userinfo-nickname">{{userInfo.nickName}}</text>
     </block>
   </view>
   <view class="usermotto">
     <text class="user-motto">{{motto}}</text>
   </view>
 </view>
 #+END_SRC

 和 HTML 非常相似，有标签、属性等等构成。但是也有很多不一样的地方，我们来一一阐述一下：
 标签名字有点不一样 往往写 HTML 的时候，经常会用到的标签是 div, p, span，开发者在写一个页面的时候可以根据这些基础的标签组合出不一样的组件，
 例如日历、弹窗等等。换个思路，既然大家都需要这些组件，为什么我们不能把这些常用的组件包装起来，大大提高我们的开发效率。 从上边的例子可以看到，
 小程序的 WXML 用的标签是 view, button, text 等等，这些标签就是小程序给开发者包装好的基本能力，我们还提供了地图、视频、音频等等组件能力 
 更多详细的组件讲述参考下个章节 小程序的能力

 多了一些 wx:if 这样的属性以及 {{ }} 这样的表达式 在网页的一般开发流程中，我们通常会通过 JS 操作 DOM (对应 HTML 的描述产生的树)，
 以引起界面的一些变化响应用户的行为。例如，用户点击某个按钮的时候，JS 会记录一些状态到 JS 变量里边，同时通过 DOM API 操控 DOM 的属性或者行为，
 进而引起界面一些变化。当项目越来越大的时候，你的代码会充斥着非常多的界面交互逻辑和程序的各种状态变量，显然这不是一个很好的开发模式，因此就有了 MVVM 的开发模式(例如 React, Vue)，提倡把渲染和逻辑分离。简单来说就是不要再让 JS 直接操控 DOM，JS 只需要管理状态即可，然后再通过一种模板语法来描述状态和界面结构的关系即可。 小程序的框架也是用到了这个思路，如果你需要把一个 Hello World 的字符串显示在界面上。WXML 是这么写 :

 <text></text>
 JS 只需要管理状态即可:

 this.setData({ msg: "Hello World" })
 通过 {{ }} 的语法把一个变量绑定到界面上，我们称为数据绑定。仅仅通过数据绑定还不够完整的描述状态和界面的关系，还需要 if/else, for 等控制能力，
 在小程序里边，这些控制能力都用 wx: 开头的属性来表达。 更详细的文档可以参考 WXML

**** 页面样式设置 WXSS 
 WXSS 具有 CSS 大部分的特性，小程序在 WXSS 也做了一些扩充和修改。

 新增了尺寸单位。在写 CSS 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。WXSS 
 在底层支持新的尺寸单位 rpx，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。
 提供了全局的样式和局部样式。和前边 app.json, page.json 的概念相同，你可以写一个 app.wxss 作为全局样式，会作用于当前小程序的所有页面，
 局部页面样式 page.wxss 仅对当前页面生效。
 此外 WXSS 仅支持部分 CSS 选择器
 更详细的文档可以参考 WXSS。

**** 页面交互设置 JS 
     一个服务仅仅只有界面展示是不够的，还需要和用户做交互：响应用户的点击、获取用户的位置等等。在小程序里边，我们就通过编写 JS 脚本文件来处理用户的操作。
     #+BEGIN_SRC html
        <view>{{ msg }}</view>
        <button bindtap="clickMe">点击我</button>
     #+END_SRC
    点击 button 按钮的时候，我们希望把界面上 msg 显示成 "Hello World"，于是我们在 button 上声明一个属性: bindtap，在 JS 文件里边声明了
     clickMe 方法来响应这次点击操作：
 #+BEGIN_SRC javascript
     Page({
     clickMe: function() {
     this.setData({ msg: "Hello World" })
     }
   })
 #+END_SRC
 响应用户的操作就是这么简单，更详细的事件可以参考文档 WXML - 事件 。

 此外你还可以在 JS 中调用小程序提供的丰富的 API，利用这些 API 可以很方便的调起微信提供的能力，例如获取用户信息、本地存储、微信支付等。在前边的 QuickStart 例子中，在 pages/index/index.js 就调用了 wx.getUserInfo 获取微信用户的头像和昵称，最后通过 setData 把获取到的信息显示到界面上。更多 API 可以参考文档 小程序的 API。
 通过这个章节，你了解了小程序涉及到的文件类型以及对应的角色，在下个章节中，我们把这一章所涉及到的文件通过 “小程序的框架” 给 “串” 起来，让他们都工作起来。
**** 页面数据设置 json
** 小程序的能力
*** 小程序的启动
微信客户端在打开小程序之前，会把整个小程序的代码包下载到本地。
紧接着通过 app.json 的 pages 字段就可以知道你当前小程序的所有页面路径:

{
  "pages":[
    "pages/index/index",
    "pages/logs/logs"
  ]
}

这个配置说明在 QuickStart 项目定义了两个页面，分别位于 pages/index/index 和 pages/logs/logs 目录。而写在 pages 
字段的第一个页面就是这个小程序的首页(打开小程序看到的第一个页面)。

于是微信客户端就把首页的代码装载进来，通过小程序底层的一些机制，就可以渲染出这个首页。
小程序启动之后，在 app.js 定义的 App 实例的 onLaunch 回调会被执行:

App({
  onLaunch: function () {
    // 小程序启动之后 触发
  }
})
整个小程序只有一个 App 实例，是全部页面共享的，更多的事件回调参考文档 注册程序 App。
接下来我们简单看看小程序的一个页面是怎么写的。

*** 程序与页面
你可以观察到 pages/logs/logs 下其实是包括了 4 种文件的，微信客户端会先根据 logs.json 配置生成一个界面，顶部的颜色和文字你都可以在这个 json 文件里边定义好。
紧接着客户端就会装载这个页面的 WXML 结构和 WXSS 样式。最后客户端会装载 logs.js，你可以看到 logs.js 的大体内容就是:

Page({
  data: { // 参与页面渲染的数据
    logs: []
  },
  onLoad: function () {
    // 页面渲染后 执行
  }
})
Page 是一个页面构造器，这个构造器就生成了一个页面。在生成页面的时候，小程序框架会把 data 数据和 index.wxml 一起渲染出最终的结构，
于是就得到了你看到的小程序的样子。
在渲染完界面之后，页面实例就会收到一个 onLoad 的回调，你可以在这个回调处理你的逻辑。
有关于 Page 构造器更多详细的文档参考 注册页面 Page。

*** 组件
小程序提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼合成自己的小程序。
就像 HTML 的 div, p 等标签一样，在小程序里边，你只需要在 WXML 写上对应的组件标签名字就可以把该组件显示在界面上，例如，你需要在界面上显示地图，
你只需要这样写即可：

<map></map>
使用组件的时候，还可以通过属性传递值给组件，让组件可以以不同的状态去展现，例如，我们希望地图一开始的中心的经纬度是广州，那么你需要声明地图的 
longitude(中心经度) 和 latitude(中心纬度) 两个属性:

<map longitude="广州经度" latitude="广州纬度"></map>
组件的内部行为也会通过事件的形式让开发者可以感知，例如用户点击了地图上的某个标记，你可以在 js 编写 markertap 函数来处理：

<map bindmarkertap="markertap" longitude="广州经度" latitude="广州纬度"></map>
当然你也可以通过 style 或者 class 来控制组件的外层样式，以便适应你的界面宽度高度等等。

更多的组件可以参考 小程序的组件 。

*** API
为了让开发者可以很方便的调起微信提供的能力，例如获取用户信息、微信支付等等，小程序提供了很多 API 给开发者去使用。
要获取用户的地理位置时，只需要：

wx.getLocation({
  type: 'wgs84',
  success: (res) => {
    var latitude = res.latitude // 经度
    var longitude = res.longitude // 纬度
  }
})
调用微信扫一扫能力，只需要：

wx.scanCode({
  success: (res) => {
    console.log(res)
  }
})
需要注意的是：多数 API 的回调都是异步，你需要处理好代码逻辑的异步问题。

更多的 API 能力见 小程序的 API。

通过这个章节你已经大概了解了小程序运行的一些基本概念，当你开发完一个小程序之后，你就需要发布你的小程序。在下个章节，你会知道发布前需要做什么准备。
   
* 微信公众
** 1、公众号消息会话
** 2、公众号内网页
许多复杂的业务场景，需要通过网页形式来提供服务，这时需要用到：
1）网页授权获取用户基本信息：通过该接口，可以获取用户的基本信息（获取用户的 OpenID 是无需用户同意的，
获取用户的基本信息则需用户同意）
2）微信 JS-SDK：是开发者在网页上通过 JavaScript 代码使用微信原生功能的工具包，开发者可以使用它在网页
上录制和播放微信语音、监听微信分享、上传手机本地图片、拍照等许多能力。
** Token 验证
   1）微信后台在发送数据给公众账号服务器的时候，会额外带上 3 个参数：signature、timestamp、nonce。
   nonce 是一个随机数、signature 是对 timestamp、nonce 和 Token 进行 SHA1 加密后的字符串。
   2) 我们自己的网站也要对三个加密，同样对 nonce、timestamp 和 Token 使用 SHA1 加密算法，得到自己的签名，
   如果自己的签名和请求中的 signatrue 是一样的，那么说明请求是来自微信后台而不是恶意第三方。
** 公众平台以 access_token 为接口调用凭据，
来调用接口，所有接口的调用需要先获取 access_token，access_token 在 2 小时内有效，过期需要重新获取，但 1 天内获取次数有限，开发者需自行存储，详见获取接口调用凭据（access_token）文档。
** 获取凭证, 验证请求是否来自微信，需要建立两者关系
   https://api.weixin.qq.com/cgi-bin/token?grant_type=cgrant_type=client_credential＆appid=APPID＆secret=APPSECRET
   expires_in 的值表示在经过多长的时间后，该凭证将会失效
** 自定义菜单 设置 获取，删除
获取 https://api.weixin.qq.com/cgi-bin/menu/get?access_token=ACCESS_TOKEN
创建  https://api.weixin.qq.com/cgi-bin/menu/get?access_token=ACCESS_TOKEN
删除   https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN
* 本地调试微信接口
 在微信开发的时候 需要填写与微信服务器相连接的 url 这个 url 必须是外网域名，
 也就是说我们需要在这个外网域名对应的 ip 服务器上做开发，而没办法本地开发调试
 所以用 natapp/ngrok 获得一个外网域名 这个外网域名实际访问的是本地主机
 这样把此外网域名填入到微信需要的外网 url 里 就可以在本地开发调试了 

 1.chmod a+x natapp
2. 后台运行 nohup ./natapp -authtoken=e5eb817e91aeee83 -log=stdout -log-level=ERROR &
3.在外网访问 http://3c8db5aa.ngrok.natapp.cn 就可以将请求转发到本地 80 端口对应的服务上了。当然你需要在本机装一个监听 80 端口的 web 服务，
比如：nginx、apache、iis。如果你是用 Tomcat 等应用服务器，端口也不是 80 的话，需要在 nginx 上再做一个反向代理配置，转换到 tomcat 对应的端口上。

location / {
    proxy_pass http://localhost:8080;
}
访问 http://127.0.0.1:4040 可以监控请求路径、请求头和响应头等日志信息。
3> 指定映射端口 需要购买
* 申请微信公众平台接口测试帐号
http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login

微信公众号测试号申请地址，没有登录的时候需要先登录再申请，网页有提示
http://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&t=sandbox/index
第一步是配置 appID 和 appsecret
appID wx42c615cfaf7b2407
appsecret 177748b2be99bb502bd01ec61306adf1
这两个值在个人设置可以看到，是微信给每一位用户提供的属性值，复制即可
第二步配置接口
url 是项目中调用微信接口的 url，需要是外网地址，我是开启 natapp，通过外网映射本地搞定
第三步配置域名
域名即外网域名
第四步，关注测试号
需要关注测试号才可以
前三步通过验证之后，网页下面会显示各种权限的列表
往下翻找到网页授权获取用户基本信息
点击修改，输入外网域名，搞定
到此，测试号已成功生成
之后在获取用户信息时，头像，昵称等基本信息可以获取，但是 unionid 为 null，经查找原因，本地不支持，找个外网公众号映射下个人的账号就可以
* 微信公众平台
** 第 1 章　公众平台基础知识 
*** 1 1.1　公众平台简介 
公众平台是腾讯公司在微信的基础上新增的功能模块，通过这一平台，个人和企业都可以打
造一个微信公众账号（以下简称公众账号或公众号），并实现与特定群体的文字、图片及语
音的全方位沟通、互动。公众平台主要面向名人、政府、媒体、企业等，在这里可以通过微
信渠道将品牌推广给上亿的微信用户，减少宣传成本，提高品牌知名度，打造更具影响力的
品牌形象。

*** 2 1.2　注册公众账号 
经过前面的介绍，相信读者对公众平台已经有了大致的认识。下面为读者介绍公众账号的注
册流程。随着公众平台的发展，公众账号的注册流程越来越复杂，公众账号的审核也变得更
加严格。因此，在动手注册账号之前，有必要先了解账号注册的相关知识及注意事项。
**** 1 1.2.1　公众账号的分类 
 公众账号分为服务号和订阅号两种类型，它们在用途和功能上有着很大的差别。
**** 2 1.2.2　注册账号所需资料 
**** 3 1.2.3　公众账号的注册流程 
*** 3 1.3　公众平台的使用 
**** 1 1.3.1　功能 
**** 2 1.3.2　管理 
**** 3 1.3.3　服务 
**** 4 1.3.4　统计 
**** 5 1.3.5　设置 
*** 4 1.4　公众账号认证 
**** 1 1.4.1　认证条件 
**** 2 1.4.2　微信认证流程 
**** 3 1.4.3　微博认证流程 

 5 1.5　小结 

** 3 第 2 章　编辑模式的使用 

***  1 2.1　编辑模式的应用场景 
    在公众平台的高级功能模块中，可以看到两种模式：编辑模式和开发模式，这两种模式有着各自的适用场景，是互斥的，即两个模式不能同时使用。
    编辑模式主要是通过界面编辑的方式设置自动回复和自定义菜单，所有的设置都是在公众平台完成。编辑模式主要适用于以下几种应用场景：

    ●公众账号的运营者不具备开发能力；
    ●针对主要用途是品牌宣传、新闻媒体、自助客服的公众账号；
    ●公众账号运营初期通过编辑模式快速建立原型；
    ●通过开发模式建立的公众账号在系统故障或升级期间可以临时切换到编辑模式提醒用户。
    公众账号申请完成后，两种模式都处于关闭状态。在使用某个模式前，需要先将对应的模式置于开启状态。开启编辑模式的步骤如下：
    1）登录公众平台，依次点击“功能”→“高级功能”，选择进入“编辑模式”；
    2）将编辑模式的开关由关闭切换为开启，如图 2-1 所示。
 
图 2-1　开启编辑模式
开启编辑模式后，就可以进行自动回复和自定义菜单设置了。

*** 2 2.2　自动回复 

**** 1 2.2.1　被添加自动回复 
**** 2 2.2.2　消息自动回复 
****  3 2.2.3　关键词自动回复 
****  4 2.2.4　自动回复优先规则 

*** 3 2.3　案例：简易号码簿 
 1 2.3.1　案例功能描述 
 2 2.3.2　数据准备 
 3 2.3.3　设计关注提示语 
 4 2.3.4　设计关键词规则 
 5 2.3.5　设置默认回复 
 6 2.3.6　测试体验 

*** 4 2.4　自定义菜单 
自定义菜单将公众账号的功能直观地呈现在用户面前，用户只要点击菜单项就能够获取相应的信息。自定义菜单使
得用户获取信息的方式从输入关键字逐渐转变为点击菜单项，它在一定程度上降低了用户获取信息的成本，同时也
增加了用户与公众账号的交互频次。

服务号默认有自定义菜单权限，订阅号通过微信认证后也能获得自定义菜单权限。与自动回复一样，自定义菜单默
认也是停用状态，在设置前需要先将它启用，启用后就能看到“设置”按钮，点击后进入到自定义菜单设置界面，
该界面分为“编辑”和“发布”两部分，编辑界面用于创建菜单（包括添加菜单、设置菜单响应动作、排序等），
如图 2-19 所示，发布界面用于预览和发布菜单，如图 2-20 所示。


**** 1 2.4.1　编辑菜单 
**** 2 2.4.2　预览和发布菜单 

** 4 第 3 章　开发模式的启用 
*** 1 3.1　开发模式的基础知识 
    开发模式主要针对具备开发能力的账号运营者。在开发模式下，公众账号的所有功能都是通过编程实现的。相对而
言，开发模式更加复杂，对账号运营者的要求也更高。

**** 1 3.1.1　启用开发模式的必备条件 
     不同于编辑模式，开发模式的启用并不是简单地切换状态开关就能完成的。启用开发模式至少需要具备以下 3 个条
件。

1）完善账号信息：在启用开发模式时，系统会检查公众账号的头像、功能介绍、运营地区等信息是否设置完整。在
公众平台的设置模块，能够看到公众账号的全部信息。

2）请求校验程序：启用开发模式的过程中会要求填写接口配置信息，这就意味着要先完成请求校验程序的开发。至
于请求校验程序有哪些要求、如何开发都将在 3.2 节中为读者详细介绍。

3）公网环境：通常，我们在个人电脑上部署的 Web 应用都处在内网环境，只能由自己或局域网用户访问，外网用户
是访问不到的。由于公众账号的处理程序需要与微信服务器进行交互，因此必须将其部署在公网环境。公网环境除
了能够支撑程序的运行外，还应具备独立的公网 IP 或者能够为部署的应用程序分配访问域名，使得应用程序能够被
外网用户访问。对于许多中小企业或个人开发者而言，公网环境无疑成了使用公众平台开发模式的最大障碍。
**** 2 3.1.2　应用引擎简介 
     应用引擎（App Engine）是一种网络应用开发平台，它使得开发者不需要维护任何服务器，只需要简单上传应用程
序，就能够为外网用户提供服务，为开发者节约了大量的人力投入、时间投入以及各种软硬件成本。

应用引擎正好能够解决我们对公网环境的需求。接下来，笔者将为大家介绍两个常用的应用引擎：新浪的 SAE 和百度
的 BAE。
SAE 和 BAE 各有优势，都能够满足公众平台的开发需要。但对于访问量较小的应用来说，BAE 几乎是完全免费的。因
此，对于没有公网环境的开发者而言，BAE 无疑是学习公众平台开发的首选。


**** 3 3.1.3　开发工具介绍 
对于公众平台的开发，官方只给出了 PHP 的示例代码，这也让部分开发者误以为只有 PHP 一种选择。公众平台的处
理程序其实就是一个 Web 项目，负责接收并响应微信服务器发送的 HTTP 请求。因此，只要是支持动态 Web 开发的编
程语言，都能够用于公众平台开发，例如 Java、PHP、.NET、ASP 和 Ruby。

建议读者选择自己擅长或者热门的编程语言，这样才能保证有较好的质量和效率，笔者选择的是 Java 语言。本章及
后续章节的内容并不太适合没有任何编程基础的读者阅读，读者至少应该熟悉 Java 基础及 Java Web 开发，并对 JSP
和 Servlet 有一定的了解。

下面将对搭建公众平台开发环境用到的工具进行介绍，至于工具的安装和配置都比较简单，网上有大量的资料可以
参考，笔者在此不再赘述了。

*** 2 3.2　开发请求校验程序 
**** 1 3.2.1　开发者文档介绍 
     第一步：填写服务器配置
登录微信公众平台官网后，在公众平台官网的开发-基本设置页面，勾选协议成为开发者，点击“修改配置”按钮，
填写服务器地址（URL）、Token 和 EncodingAESKey，其中 URL 是开发者用来接收微信消息和事件的接口 URL。
Token 可由开发者可以任意填写，用作生成签名（该 Token 会和接口 URL 中包含的 Token 进行比对，从而验证安全性）。
EncodingAESKey 由开发者手动填写或随机生成，将用作消息体加解密密钥。

同时，开发者可选择消息加解密方式：明文模式、兼容模式和安全模式。模式的选择与服务器配置在提交后都会立即生效，
请开发者谨慎填写及选择。加解密方式的默认状态为明文模式，选择兼容模式和安全模式需要提前配置好相关加解密代码，
详情请参考消息体签名及加解密部分的文档 。
**** 2 3.2.2　明确请求校验流程 
**** 3 3.2.3　请求校验流程分析 
**** 4 3.2.4　请求校验程序的实现 
**** 5 3.2.5　本地测试 
**** 6 3.2.6　导出 WAR 包 

*** 3 3.3　BAE 的使用 

 1 3.3.1　注册账号 
 2 3.3.2　创建应用 
 3 3.3.3　托管设置 
 4 3.3.4　部署应用 
 5 3.3.5　获取访问地址 

 4 3.4　启用开发模式的步骤 
 5 3.5　小结 

5 第 4 章　消息的接收与响应 

 1 4.1　消息交互基础知识 

 1 4.1.1　消息交互流程 
 2 4.1.2　消息的分类 

 2 4.2　消息结构的封装 

 1 4.2.1　封装请求消息 
 2 4.2.2　封装事件 
 3 4.2.3　封装响应消息 

 3 4.3　消息的处理 

 1 4.3.1　Dom4j 的使用 
 2 4.3.2　XStream 的使用 
 3 4.3.3　解析请求消息 
 4 4.3.4　响应消息对象转 XML 

 4 4.4　案例：消息的接收与响应 

 1 4.4.1　开发准备工作 
 2 4.4.2　消息封装类 
 3 4.4.3　封装消息处理工具 
 4 4.4.4　使用 CoreServlet 类完成消息的接收与响应 
 5 4.4.5　使用 CoreService 类完成消息的处理 
 6 4.4.6　部署应用及测试体验 

 5 4.5　小结 

6 第 5 章　自定义菜单的使用 

 1 5.1　发送 HTTPS 请求 

 1 5.1.1　两种解决方法 
 2 5.1.2　自定义信任管理器 

 2 5.2　接口访问凭证 

 1 5.2.1　获取凭证接口介绍 
 2 5.2.2　获取凭证的方式 

 3 5.3　自定义菜单接口 

 1 5.3.1　菜单按钮的分类 
 2 5.3.2　菜单结构说明 
 3 5.3.3　封装菜单结构 
 4 5.3.4　案例：创建菜单 
 5 5.3.5　菜单的查询与删除 

 4 5.4　响应菜单点击事件 
 5 5.5　接口调用频率限制 
 6 5.6　案例：网址导航 

 1 5.6.1　案例功能描述 
 2 5.6.2　案例开发准备 
 3 5.6.3　封装通用工具类 
 4 5.6.4　封装菜单工具类 
 5 5.6.5　创建自定义菜单 
 6 5.6.6　实现业务逻辑 
 7 5.6.7　部署应用及测试体验 

 7 5.7　小结 

7 第 6 章　高级接口的使用 

 1 6.1　语音识别 

 1 6.1.1　开启语音识别功能 
 2 6.1.2　如何获取语音消息 

 2 6.2　客服接口 

 1 6.2.1　接口描述 
 2 6.2.2　方法封装 
 3 6.2.3　案例：发送客服消息 

 3 6.3　OAuth2.0 网页授权 

 1 6.3.1　配置网页授权回调域名 
 2 6.3.2　网页授权流程 
 3 6.3.3　方法封装 
 4 6.3.4　案例：通过网页授权获取用户信息 

 4 6.4　生成带参数二维码 

 1 6.4.1　创建临时二维码 
 2 6.4.2　创建永久二维码 
 3 6.4.3　换取二维码 
 4 6.4.4　案例：通过 ticket 换取二维码 

 5 6.5　获取用户地理位置 

 1 6.5.1　开启获取用户地理位置功能 
 2 6.5.2　接收上报地理位置事件 

 6 6.6　获取用户基本信息 

 1 6.6.1　接口描述 
 2 6.6.2　方法封装 
 3 6.6.3　案例：获取用户基本信息 

 7 6.7　获取关注者列表 

 1 6.7.1　接口描述 
 2 6.7.2　方法封装 
 3 6.7.3　案例：获取公众账号关注者列表 

 8 6.8　用户分组接口 

 1 6.8.1　查询分组 
 2 6.8.2　创建分组 
 3 6.8.3　修改分组名 
 4 6.8.4　移动用户分组 

 9 6.9　上传及下载多媒体文件 

 1 6.9.1　上传多媒体文件接口描述 
 2 6.9.2　使用抓包工具分析文件上传请求 
 3 6.9.3　上传多媒体文件方法封装 
 4 6.9.4　下载多媒体文件 
 5 6.9.5　案例：上传及下载语音文件 

 10 6.10　小结 

8 第 7 章　网络表情的使用 

 1 7.1　微信支持的网络表情 
 2 7.2　QQ 表情 

 1 7.2.1　微信上的 QQ 表情代码 
 2 7.2.2　在微信上发送 QQ 表情 
 3 7.2.3　QQ 表情的识别 
 4 7.2.4　回复 QQ 表情 
 5 7.2.5　案例：原样回复 QQ 表情 

 3 7.3　Emoji 表情 

 1 7.3.1　微信上的 Emoji 表情编码 
 2 7.3.2　如何使用 Emoji 表情编码 
 3 7.3.3　案例：回复 Emoji 表情 

 4 7.4　小结 

9 第 8 章　公众平台开发技巧 

 1 8.1　图文消息使用详解 

 1 8.1.1　单图文消息的实现 
 2 8.1.2　多图文消息的实现 
 3 8.1.3　图文消息使用注意事项 

 2 8.2　公众账号无响应的处理 

 1 8.2.1　公众账号无响应的几种情况 
 2 8.2.2　计算字符串所占字节数 

 3 8.3　应用开发最佳实践 

 1 8.3.1　解析消息创建时间 
 2 8.3.2　换行符的使用 
 3 8.3.3　网页超链接的使用 
 4 8.3.4　隐藏浏览器工具栏 
 5 8.3.5　表情飘落效果 

 4 8.4　识别微信浏览器 

 1 8.4.1　判断微信浏览器 
 2 8.4.2　只允许微信浏览器访问 

 5 8.5　服务多个公众账号 

 1 8.5.1　公众账号托管平台原理 
 2 8.5.2　案例：服务两个公众账号 

 6 8.6　业务系统对接 

 1 8.6.1　短信方式绑定账号 
 2 8.6.2　网页方式绑定账号 

 7 8.7　公众平台开发测试 
 8 8.8　小结 

10 第 9 章　LBS 应用开发实战：周边搜索 

 1 9.1　“周边搜索”功能及设计 

 1 9.1.1　使用方法 
 2 9.1.2　功能演示 
 3 9.1.3　需求分析 
 4 9.1.4　数据表设计 

 2 9.2　百度地图 API 的使用 

 1 9.2.1　百度地图 API 产品简介 
 2 9.2.2　申请访问密钥 
 3 9.2.3 Place　API 的使用 
 4 9.2.4　步行导航检索的使用 
 5 9.2.5　百度坐标转换 

 3 9.3　MySQL 的使用 

 1 9.3.1　MySQL 的下载与安装 
 2 9.3.2　MySQL 的常用操作 
 3 9.3.3　JDBC 的基本使用 
 4 9.3.4　案例：使用 JDBC 查询数据 

 4 9.4　BAE 的 MySQL 服务 

 1 9.4.1　创建数据库 
 2 9.4.2　使用 phpMyAdmin 操作 MySQL 
 3 9.4.3　案例：使用 JDBC 操作 MySQL 

 5 9.5　“周边搜索”应用实现 

 1 9.5.1　应用开发准备 
 2 9.5.2　封装数据库操作 
 3 9.5.3　封装百度地图操作 
 4 9.5.4　编写步行导航页面 
 5 9.5.5　CoreService 类的实现 
 6 9.5.6　部署应用及测试体验 

 6 9.6　小结 

11 第 10 章　游戏开发实战：猜数字 

 1 10.1　“猜数字”功能及设计 

 1 10.1.1　游戏规则 
 2 10.1.2　游戏术语 
 3 10.1.3　核心流程设计 
 4 10.1.4　数据表设计 

 2 10.2　“猜数字”游戏的实现 

 1 10.2.1　游戏开发准备 
 2 10.2.2　游戏算法封装 
 3 10.2.3　数据库操作封装 
 4 10.2.4　核心处理逻辑 
 5 10.2.5　CoreService 类的实现 
 6 10.2.6　部署应用及测试体验 

 3 10.3　小结 

12 第 11 章　智能聊天应用开发实战：聊天机器人 

 1 11.1　聊天机器人原理及设计 

 1 11.1.1　实现原理 
 2 11.1.2　数据表设计 

 2 11.2　全文检索引擎 Lucene 

 1 11.2.1　Lucene 的组成结构 
 2 11.2.2　倒排索引结构 
 3 11.2.3　索引和检索原理 
 4 11.2.4　常用 API 介绍 
 5 11.2.5　Lucene 的评分机制 
 6 11.2.6　案例：使用 Lucene 索引和检索 

 3 11.3　中文分词 

 1 11.3.1　中文分词方法 
 2 11.3.2　IK 分词器的使用 

 4 11.4　索引浏览器 Luke 

 1 11.4.1　Luke 的功能及下载 
 2 11.4.2　Luke 的用法 

 5 11.5　聊天机器人的实现 

 1 11.5.1　应用开发准备 
 2 11.5.2　封装数据库操作 
 3 11.5.3　封装聊天服务类 
 4 11.5.4　CoreService 类的实现 
 5 11.5.5　应用启动时创建索引 
 6 11.5.6　部署应用及测试体验 

 6 11.6　小结 

13 附录　返回码及接口调用次数说明 

* 手把手教你入门微信公众号开发
** 目前微信公众号主要分为订阅号和服务号，每种账号又分为未认证和已认证，它们的差别主要在于具有不同的接口权限，下图（引用自微信开发实战系列）是一些例子：

不同类型公众号的权限
总体来说，服务号权限 > 订阅号权限，认证账号权限 > 未认证账号权限。申请订阅号比较简单，服务号相对复杂点，另外要认证的话还要额外提交一些材料。
我们可以根据不同的业务需求去申请不同类型的账号，基本上常用的权限列表已经可以满足大部分的场景。

开发微信公众号本质上和通常的网站开发并无区别。当我们进入一个公众号页面之后，我们可以向公众号发送文字、语音、图片等消息，也可以通过点击页面下方的菜单触发相应的功能。
那么开发者与微信用户究竟是怎么进行交互的呢？实际上我们在公众号里的所有操作，都会发送到微信的服务器上，微信服务器将这些动作的具体含义按照一定的格式进行封装后，
发送到微信公众号所对应的服务器上（这个服务器的地址可以由开发者在微信公众号的后台进行配置），开发者通过编写代码来处理不同的用户行为，并将处理后的结果按照一定的格式返回给微信服务器
，再由微信服务器发送到微信公众号里面，从而完成了一次交互过程。在这里借用方倍老师博客中的一张图片来展示下这个过程，可以帮助大家理解地更清楚：
[[file:image/wx.jpg][流程]]

微信用户与开发者的交互流程
到这里我们可以知道，所谓的微信公众号开发，其实就是编写业务代码来处理用户的动作请求。这里面会涉及到和微信服务器之间的通信，也就涉及到一些安全认证方面的知识，
后文会通过一个实际的例子进行说明。现在，就让我们来看看具体的流程吧。

** 巧妇难为无米之炊
开发微信公众号需要准备以下两样食材：

1、微信公众号
微信公众号可以在微信·公众平台的官网上申请。前文说过，微信公众号分为几种类型，不同的类型具有不同的权限，具体的权限列表可以查看微信公众平台技术文档。
值得注意的是，现在已经不再支持个人类型的公众账号申请微信认证。申请的过程无非是填写下邮箱和信息，建议使用 QQ 邮箱，毕竟是自家的东西。

2、服务器
由于我们的服务器需要与微信服务器进行交互，因此必须能够让微信服务器可以访问到。很多公司都提供了云服务器租赁，价格不一，可以自行申请，细节在此不表。如果不想花钱申请，
也可以使用一些外网穿透工具，将本地的 IP 暴露到公网中供外部访问，具体的工具请自行百度，不过大部分软件稳定性无法保证，而且分配的域名经常改变。
个人建议还是申请一台服务器比较方便，等以后公众号运营良好开始涨(ying)粉(li)了，这些都不是事~

** 撸起袖子加油干
以下是详细步骤：

*** 1、开启公众号开发者模式
为了让微信服务器知道开发者服务器的存在，必须在公众号后台进行相应的配置。

（1）登录公众平台官网，找到左边功能栏的最下方，有一个基本配置的选项
（2）点击基本配置按钮，在右边的页面中填写服务器的相关信息。其中 URL 填写 http://外网 IP:端口号/wx，这里外网 IP 是服务器的外网 IP 地址，端口号固定填写 80。Token 可以自由填写，用于两个服务器之间的验证。具体见下图：
[[file:image/wxpeizhi.jpeg][配置]]
配置微信公众号

!（3）点击提交按钮，提示配置失败。这是自然的，因为我们还需要在开发者服务器上进行配置，才能完成验证的过程。
（4）前面在配置微信公众号时为什么提示失败呢？在此我们有必要探究下这个认证过程。当我们点击了提交后，微信服务器会向我们所填写的那个 URL 发起一个 GET 请求，
并携带以下几个参数：timestamp, nonce, echostr, signature。
其中 timestamp 是一个时间戳，nonce 是一个随机数，echostr 也是随机数，这几个都很普通，重点在于 signature，它的生成方式是将 nonce、timestamp 和 token
（也就是我们在网页中配置的 TOKEN）三个字符串按照字典序排序后，对排序后得到的字符串数组使用哈希加密算法得到。我们的服务器在收到这个 GET 请求后，提取对应的参数，
并按照前面说的方式生成 hashcode，如果这个值与参数中的 signature 相同，那么我们就将 echostr 返回给微信服务器，否则返回空值。微信服务器收到这个 echostr 之后，
验证这个值与它发送的 echostr 值是否相同，如果相同，说明这个值的确是由我们的服务器返回的，从而完成验证，今后所有的信息就都可以发送到这个服务器地址上。
这里面涉及到了一些安全认证的相关知识，有兴趣的朋友可以去查阅更详细的资料。总的来说，就是让通信的双方都能够确认对方的真实身份。
以下是认证部分的主要代码，使用 Python2.7 和 web.py 框架编写：
[[file:image/wxrenzheng.png][认证]]
验证开发者服务器
*** 2、编写服务器业务逻辑
    前面我们完成了微信服务器与开发者服务器的相互认证过程，接下来我们需要编写业务逻辑代码来处理微信服务器发送过来的信息。
    以文本消息为例，当用户在公众号页面发送了消息后，微信服务器会将这条消息封装成如下的 XML 格式，
    并将其作为请求的内容向开发者服务器发起一个 POST 请求：
[[file:image/wxxml.png][xml]]
    微信服务器封装的请求内容
    各个字段的具体含义就如字段名所示，比较直观。我们首先需要解析这个 XML 对象，
    并提取出各个字段用于后续的处理：
解析 XML 对象
[[file:image/wxxml%E8%A7%A3%E6%9E%90.png][解析]]
解析之后，我们可以在主函数中根据消息的不同类型，来调用不同的处理函数得到相应的处理结果，然后我们要将处理结果封装成同样的 XML 格式返回给微信服务器，封装 XML 对象的代码如下所示（以文本消息为例）：
[[file:image/wxfenzhuang.png][封装]]
封装 XML 对象
至此，我们就完成了一个简单的回复流程（虽然目前这种只能回复文本消息==）。

** 更上一层楼
以上就是一个基本的微信公众号开发流程。当然，想要让我们的公众号变得多姿多彩，需要掌握的内容还有很多。比如

（1）access_token：前面我们所做的实际是被动回复消息，微信服务器发起 POST 请求，我们将处理后的内容借由微信服务器返回给用户。如果我们需要主动地和用户进行交互，比如主动地向用户发一条消息，我们就需要调用微信公众平台提供的相应接口，并且需要主动告诉微信服务器我们的身份，这是通过 access_token 实现的。

access_token 是微信公众号的全局唯一接口调用凭据，公众号在调用各个接口时都需要使用 access_token。

如上所述，在我们调用各个接口前，需要先使用公众号的 appid 和 appSecret 信息（这两个值可以从微信公众号的网页上查看）向微信服务器请求获取 access_token，然后带着这个值去调用微信公众平台提供的接口，实现相应的功能。

（2）微信网页开发：网页开发就是指编写一系列的 HTML5 页面，并在微信公众号中引导用户打开我们开发的页面，从而实现相关的业务逻辑，这一功能使得公众号可以像一个内嵌在微信当中的应用一样，能够实现非常复杂的交互逻辑，而且相比于通常的应用来说更加小巧。

从这里出发
以上就是本文的主体内容。楼主经验尚浅，斗胆提笔撰文，有不当之处欢迎各位指出。本文主要是一个入门的简介，后续的开发还有很多内容要学，以下列出一些个人认为比较不错的文档和资料，楼主也从中学到了很多，在此感谢各位作者。

（1）微信公众平台技术文档

（2）方培工作室-微信公众平台开发教程

（3）Webot

（4）微信开发者联盟

（5）微信开发实战系列

本文中的代码已上传到 github，里面包含了微信公众号一些常用功能的实现，仅供参考：微信公众号开发示例程序

最后，各位如果有任何的问题或者想法，欢迎在评论区交流。

既然都看到这了，不妨随手点个赞吧><

么么扎
 日常 © 著作权归作者所有 举报文章
96 关注郗南枫 
写了 25840 字，被 70 人关注，获得了 101 个喜欢

要做一辈子的热血少年。 我已加入“维权骑士”(rightknights.com)的版权保护计划。
喜欢 59    更多分享
Web note ad 1
被以下专题收入，发现更多相似内容
程序员
IT 在线课程
微信平台
微信相关
 240
微信公众号开发之入门篇
本篇技术博客来自 Worktile 微信之父 @龚林杰的动情分享，为您详细讲述我们微信公众号【getworktile】背后的点点滴滴~ 现如今，微信已经不再只承担着交流沟通、娱乐大众的功能，微信公众号的推出将微信逐渐转变成个人、商家、企业单位用来营销的重要工具。而微信推出的公...

 48  Worktile
Android - 收藏集 - 掘金
用两张图告诉你，为什么你的 App 会卡顿? - Android - 掘金 Cover 有什么料？ 从这篇文章中你能获得这些料： 知道 setContentView()之后发生了什么？ ... Android 获取 View 宽高的常用正确方式，避免为零 - 掘金相信有很多朋友...

 48  掘金官方
Android - 收藏集
用两张图告诉你，为什么你的 App 会卡顿? - Android - 掘金 Cover 有什么料？ 从这篇文章中你能获得这些料： 知道 setContentView()之后发生了什么？ ... Android 获取 View 宽高的常用正确方式，避免为零 - 掘金 相信有很多...

 48  passiontim
 240
微信公众号开发：获取 openId 和用户信息
title: 微信公众号开发：获取 openId 和用户信息 tags: 微信公众号 categories: 笔记 date: 2017-05-01 14:35:34 最近一直在做微信公众号项目的开发，会有一种感觉，就是微信相关的开发真 TM 的啰嗦麻烦啊。当首次接触这个微信相关...

 48  行径行
 240
微信公众号开发(一)
开发前首先我们要知道一些概念 各公众号区别：1、订阅号：为媒体和个人提供一种信息传播方式，主要偏于为用户传达资讯（类似报纸杂志），主要的定位是阅读，每天可以群发 1 条消息；2、服务号：为企业，政府或组织提供对用户进行服务，主要偏于服务交互（类似银行提供服务查询），每个月只可群...

 48  CoderZS
 240
Api 使用方式
LuaIde 0.4.5 版本添加了 对各 lua 解决方案 Api 的支持 第一步:生成 api 文件 1.cocos 生成 2.ulua 生成 3.slua 生成 4.xlua 生成 第二步: 配置 LuaIde 默认导出了 4 份 api 分别为: 1.quick2.2.6 ...

 48  LuaIde
正则表达式
正则表达式 \n\n\n 【5】正则表达式应用——删除空行 启动 EditPlus，打开待处理的文本类型文件。 ①、选择“查找”菜单的“替换”命令，弹出文本替换对话框。选中“正则表达式”复选框，表明我们要在查找、替换中使用正则表达式。然后，选中“替换范围”中的“当前文件”，表...

 48  黄花菜已凉
 240
使用 redux 架构 react 项目--项目设计(二)
 48  azothaw
 240
观复博物馆
嘟嘟私地儿。品类不少 五十大洋，相比，还是更喜欢故宫、国博~

 48  琪乐无穷
路见
路上看到一个城管指着一名卖板栗的中年女士说，下次不要在这里卖了，下次再碰到没收你的这些东西。虽然语气还算客气，但充满了威胁意味。那名女子吓得不敢吭声，看着蛮可怜。其实那只是一个小角落，既没有占用人行道，也没有阻碍交通，更不会影响市容，可以说完全不起眼。不禁想到，小商贩做点生...
* 认证
  1. 开发者认证
  这个最简单了,直接上个超简单版代码:
  exit($_GET['echostr']);

  php 文件就写上面这一句就行,微信公共平台随便填写 token,写上 php 文件的 url,然后验证即可通过,超级简单吧？官方的认证根本没有必要,因为后面的步骤没有使用的验证签名的地方,所以这个地方为了图方便直接输出返回值轻松通过验证,当然下面也给出官方要求的认证代码:

$token='11';
$signarr=array($token,$_GET['timestamp'],$_GET['nonce']);
if($this->signnature($signarr,$_GET['signature'])){
  exit($_GET['echostr']);
}
function signnature($arr,$signature){
  sort($arr);
  if(sha1(implode($arr))==$signature) return true;
  return false;
}

把上面的代码保存成 php 文件,在微信公共平台设置同样的 token,然后验证即可通过.

注:url 是允许带 get 参数的
* 分装样式 https://github.com/Tencent/weui-wxss
