#+TITLE: vuejs 简介
#+DESCRIPTION: vuejs 简介
#+TAGS: vue,vuejs
#+CATEGORIES: 框架使用

* vue js 简介                                                      
** 简介 
   Vue.js（读音 /vjuː/, 类似于 view） 是一套构建界面的形式。

   功能是 数据晚绑定 和 界面组件 
  
   相当于 ~HTML~  只创建一个结构，跟切入式 ~php~  一样的 ,就是现在由后端完成改为前端完成了。
   整个的含义是 ~js~ 里面定义 ~DOM~  的属性和方法,在 ~html~  里面使用所定义的属性方法 。

   #+begin_quote
   就一套 ~代码化~ 界面元素的工具。 
   #+end_quote

** 安装   
*** Vue Devtools   
    安装浏览器插件
*** 直接引入 (推荐)
     在 ~cdn.jsdelivr.net/npm/vue~ 浏览源代码查看最新的发行版版本号
     在生产环境中，要把 vue.js 换成 vue.min.js
     #+begin_src html
       <script src="https://cdn.jsdelivr.net/npm/vue@2.6.6/dist/vue.js"></script>
     #+end_src
     
     #+begin_src html
       <!-- 开发版，包括有用的控制台警告  -->
       <script  src = "https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
       <!-- 生产版本，针对大小和速度进行了优化 -->
       <script  src = "https://cdn.jsdelivr.net/npm/vue"></script>
     #+end_src
*** npm
    用于大型应用，配合其他组件
    #+begin_src sh
      # 最新稳定版
      $ npm install vue
    #+end_src
*** 命令行工具 (vue-cli)
    快速构建单页应用
    #+begin_src sh
      # 全局安装 vue-cli
      $ npm install --global vue-cli
      # 创建一个基于 webpack 模板的新项目
      $ vue init webpack my-project
      # 安装依赖，走你
      $ cd my-project
      $ npm install
      $ npm run dev
    #+end_src
    
    用法
   | init   | generate a new project from a template |
   | list   | list available official templates      |
   | build  | prototype a new project                |
   | create | (for v3 warning only)                  |

** 初始化主环境
*** el 绑定主环境
    #+begin_src js
    new Vue({
    el: '#app'
    })
    #+end_src
*** $mount 手动挂载
    #+begin_src js
    new Vue({

    }).$mount('#app');
    #+end_src
     
*** 实例$mount 挂载
    #+begin_src js
    let app = new Vue({
    });

    app.$mount('#app');
    #+end_src

** 定义数据 (data)
  #+begin_src html
    <div id="app">
      {{ message }}
    </div>
  #+end_src

 #+begin_src javascript
   var app = new Vue（{ 
       el：'＃app'，
       data：{ 
           message：'Hello Vue！'
       } 
   }）
 #+end_src
*** DOM 设置属性
    #+begin_src html
      <div id="app-2">
        <span v-bind:title="message">
          将鼠标悬停在我身上几秒钟 ，看看我动态绑定的标题！
        </span>
      </div>
        #+end_src
** 定义方法 (methods)
   #+begin_src js
     new Vue({
         el: '#app',
         methods: {
             fun(){
                 alert(1);
             }
         }
     })
   #+end_src
** 使用条件和循环
   #+begin_src html
     <div id="app-3">
          <span v-if="seen">Now you see me</span>
     </div>
   #+end_src

   #+begin_src html
     <div id="app-4">
       <ol>
         <li v-for="todo in todos">
           {{ todo.text }}
         </li>
       </ol>
     </div>
   #+end_src
   
   #+begin_src js
     var app4 = new Vue({
         el: '#app-4',
         data: {
             todos: [
                 { text: 'Learn JavaScript' },
                 { text: 'Learn Vue' },
                 { text: 'Build something awesome' }
             ]
         }
     })
#+end_src
** 事件绑定指令 (v-on/@)
   #+begin_src html
     <div id="app">
       <input type="button" value="点击我" v-on:click="fun()">
     </div>
   #+end_src
   
   #+begin_src js
     new Vue({
         el: '#app',
         methods: {
             fun(){
                 alert('Hello World !');
             }
         }
     })
   #+end_src
   
   #+begin_src html
     <div id="app-5">
       <p>{{ message }}</p>
       <button v-on:click="reverseMessage">Reverse Message</button>
     </div>
   #+end_src

   #+begin_src js
     var app5 = new Vue({
         el: '#app-5',
         data: {
             message: 'Hello Vue.js!'
         },
         methods: {
             reverseMessage: function () {
                 this.message = this.message.split('').reverse().join('')
             }
         }
     })
   #+end_src

   v-on 指令的简写方式 @
   #+begin_src html
     <input type="button" value="点击我" @:click="fun()">
   #+end_src
   
** v-model 用于非成对 DOM 的数据绑定({{}}模板数据绑定只适合成对标签)
   #+begin_src html
   <input type="input" v-model="">
   #+end_src
   
** v-show 用于显示或隐藏 DOM 元素，配合布尔值表示显示状态，使用场景较多
** 使用组件
   #+begin_src js
     // Define a new component called todo-item
     Vue.component('todo-item', {
         template: '<li>This is a todo</li>'
     })
#+end_src

Now you can compose it in another component’s template:


#+begin_src html
  <ol>
    <!-- Create an instance of the todo-item component -->
    <todo-item></todo-item>
  </ol>
#+end_src


