#+TITLE: Vue.js 简介
#+DESCRIPTION: Vue 简介
#+TAGS[]: vuejs
#+CATEGORIES[]: 技术
#+DATE: 2020-02-12T05:44:50+08:00
#+draft: t

我们看一张 *报纸* ，然后版面栏目不是很多嘛，比如这块是实事新闻，那块是娱乐新闻，东西很多放在一起管理就麻烦，分块各人管一小块就清晰点。   
vuejs 就是干这事的，它提供了版面接口(版面成了一个容易扩展的独立对象)，使得报纸的内容更容易修改(动态化)。

#+begin_quote
就是把报纸的 *版面结构* 和 *版面内容* 分离开来，使 *版面结构*  不动的情况下  *版面内容*  可以随意变化。
#+end_quote
# more  
** 前端历史
   - *html* ， *javascript* , *css* 技术相继出来以后，一张 *报纸* 基本满足用户的需求了，且还有少量互动，但程序员处理浏览器兼容性还是非常麻烦。
   - *ajax* 技术的出现，使 *报纸* 可以局部更新,体验更好，也节省了带宽。
   - *jQuery* 大大简化语法，提高了生产力。
   - *angularjs* *vuejs*  等前端框架出现，改变着传统网页单页无法重用的设计模式，改变了编码范式
   - *nodejs* 的出现，使得前端工程师都要把后端工程师消灭了。
 
** 安装
   #+begin_src html
     <script src="https://cdn.bootcss.com/vue/2.6.10/vue.min.js"></script>
   #+end_src
  
** 基本结构 
   版面结构
   #+begin_src html
     <div>
       <h1>Hello,world {{message}}</h1>
     </div>
   #+end_src

   版面内容
   #+begin_src js
     new Vue(
         {
             el:'h1', 
             data:{
                 message:'Hello Vue', 
             }
         })
   #+end_src

   #+begin_quote
   看下结构，模板式的关联方式，这样版面结构和版面内容就相互对应了，以后只要修改版面内容就可以了。
   #+end_quote
   
** 特性    
*** 版面结构(模板)
    动态数据和事件的绑定方式跟原来不一样了，用了 vue 定义的模板样式。编程范式也跟
    原来很不相同，以前是一步一步命令式的方式(命令范式)，现在是配置式的（声明范
    式），简化了好多代码。
    
    因为版面结构与数据发生了绑定，所以 *vue* 会追踪数据是否发生变化来决定是否重新
    渲染页面结构。这种方式叫响应式系统， 实例被创建时 *data* 中的数据是 *响应式*
    的。
**** 数据绑定
***** 文本 
      #+begin_src html
        <div id="app">
          {{ message }}
        </div>
      #+end_src

      #+begin_src javascript
        var app = new Vue（{ 
            el:'＃app'，
            data:{ 
                message:'Hello Vue！'
            } 
        }）
      #+end_src
      #+begin_quote
      这里 *message* 是响应式的，它一变，页面就要重新渲染。
      #+end_quote
      
      不会改变的文本
      #+begin_src html
        <span v-once>这个将不会改变: {{ msg }}</span>
      #+end_src
***** HTML
      对文本进行 *HTML* 解析
      #+begin_src html
        <span v-html="rawHtml"></span>
      #+end_src

**** 属性绑定
     - v-bind:title="message"

     #+begin_src html
       <button v-bind:disabled="isButtonDisabled">Button</button>
     #+end_src

     #+begin_quote
     特殊例子， 如果 `isButtonDisabled` 的值是 `null`、`undefined` 或 `false`，则 `disabled` 特性甚至不会被包含在渲染出来的 `<button>` 元素中。
     #+end_quote

**** 使用 JavaScript 表达式
     直接使用，注意与语句区分
     #+begin_src html
       {{ number + 1 }}
       {{ ok ? 'YES' : 'NO' }}
       {{ message.split('').reverse().join('') }}
       <div v-bind:id="'list-' + id"></div>
     #+end_src
**** 条件与循环
     - v-if 条件判断
     - v-else 分支
     - v-for 循环
     - v-else-if
     - v-show 仅仅隐藏

       #+begin_src html
         <div v-if="type === 'A'">
           A
         </div>
         <div v-else-if="type === 'B'">
           B
         </div>
         <div v-else-if="type === 'C'">
           C
         </div>
         <div v-else>
           Not A/B/C
         </div>

       #+end_src

**** 事件绑定
     - v-on
    
***** 事件修饰符
      #+begin_src html
        <!-- 阻止单击事件继续传播 -->
        <a v-on:click.stop="doThis"></a>

        <!-- 提交事件不再重载页面 -->
        <form v-on:submit.prevent="onSubmit"></form>

        <!-- 修饰符可以串联 -->
        <a v-on:click.stop.prevent="doThat"></a>

        <!-- 只有修饰符 -->
        <form v-on:submit.prevent></form>

        <!-- 添加事件监听器时使用事件捕获模式 -->
        <!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 -->
        <div v-on:click.capture="doThis">...</div>

        <!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
        <!-- 即事件不是从内部元素触发的 -->
        <div v-on:click.self="doThat">...</div>

        <!-- 点击事件将只会触发一次 -->
        <a v-on:click.once="doThis"></a>

        <!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->
        <!-- 而不会等待 `onScroll` 完成  -->
        <!-- 这其中包含 `event.preventDefault()` 的情况 -->
        <div v-on:scroll.passive="onScroll">...</div>
        <!-- 这个 `.passive` 修饰符尤其能够提升移动端的性能。 -->

      #+end_src
       
***** 按键修饰符
      #+begin_src html
        <!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` -->
        <input v-on:keyup.13="submit">
        <!-- 同上 -->
        <input v-on:keyup.enter="submit">

      #+end_src

      自定义按键修饰符别名 
      #+begin_src js
        // 可以使用 `v-on:keyup.f1`
        Vue.config.keyCodes.f1 = 112
      #+end_src

      全部的按键别名
      - .enter
      - .tab
      - .delete (捕获“删除”和“退格”键)
      - .esc
      - .space
      - .up
      - .down
      - .left
      - .right
      - 

      系统修饰键
      - .ctrl
      - .alt
      - .shift
      - .meta

      #+begin_src html
        <!-- Alt + C -->
        <input @keyup.alt.67="clear">

        <!-- Ctrl + Click -->
        <div @click.ctrl="doSomething">Do something</div>
        `
      #+end_src
**** 表单绑定 
     - v-model

       #+begin_src html
         <input v-model="message" placeholder="edit me">

         <!-- 多行文本 -->
         <textarea v-model="message" placeholder="add multiple lines"></textarea>

         <!-- 复选框 -->
         <input type="checkbox" id="jack" value="Jack" v-model="checkedNames">
         <input type="checkbox" id="john" value="John" v-model="checkedNames">

         <!-- 单选按钮 -->
         <input type="radio" id="one" value="One" v-model="picked">
         <input type="radio" id="two" value="Two" v-model="picked">

         <!-- 选择框 -->
         <select v-model="selected">
           <option disabled value="">请选择</option>
           <option>A</option>
           <option>B</option>
           <option>C</option>
         </select>

         <!-- 渲染的动态选项 -->
         <select v-model="selected">
           <option v-for="option in options" v-bind:value="option.value">
             {{ option.text }}
           </option>
         </select>

         #+end_src
***** 值绑定 

      #+begin_src html
        <input
          type="checkbox"
          v-model="toggle"
          true-value="yes"
          false-value="no"
          >

      #+end_src
**** 冻结绑定
     - Object.freeze(obj)
**** 缩写
     - v-bind 缩写  :
     - v-on 缩写 @
**** 计算属性
     对于需要修饰的内容 ，直接用模板处理会加重模板的清晰度，可以用计算属性维护 
     #+begin_src js
       computed: {
           // 计算属性的 getter
           reversedMessage: function () {
               // `this` 指向 vm 实例
               return this.message.split('').reverse().join('')
           }
       }
     #+end_src
**** 侦听器
     自己有特殊需求可以使用
     #+begin_src js
       watch: {
              // 如果  dataname 发生改变，这个函数就会运行
           dataname: function ( ){
           }
       },

  #+end_src
**** Class 与 Style 绑定
***** class 
      #+begin_src html
        <div class="static"
             v-bind:class="{ active: isActive, 'text-danger': hasError }">
        </div>
      #+end_src
     
      #+begin_src js
        data: {
            isActive: true,
            hasError: false
        }
      #+end_src

      结果渲染为
      #+begin_src html
        <div class="static active"></div>
      #+end_src

     或者 
     #+begin_src html
       <div v-bind:class="classObject"></div>
     #+end_src
    
 #+begin_src js
   data: {
       classObject: {
           active: true,
           'text-danger': false
       }
   }
 #+end_src
***** style
      #+begin_src html
      <div v-bind:style="styleObject"></div>
      #+end_src
      
      #+begin_src js
        data: {
            styleObject: {
                color: 'red',
                fontSize: '13px'
            }
        }
      #+end_src

*** 组件
    相当于自定义的标签，自己辛苦定义一个，当然要重复使用了啊
**** 定义组件 
     - Vue.component(tagName, options)

       #+begin_src js
         // 定义名为 todo-item 的新组件
         Vue.component('todo-item', {
             template: '<li>这是个待办项</li>'
         })
       #+end_src
**** 使用组件
     组件也是要配对的，和标签一样的用法
     #+begin_src html
       <ol>
         <!-- 创建一个 todo-item 组件的实例 -->
         <todo-item1 v-for="i in [1,2,3]"></todo-item>
       </ol>
     #+end_src
**** 定义局部组件
     #+begin_src js
       var Child = {
           template: '<div>A custom component!</div>'
       }

       new Vue({
           // ...
           components: {
               // <my-component> 将只在父组件模板中可用
               'my-component': Child
           }
       })

     #+end_src
**** 模板解析注意事项
     因为 Vue 的解析在 *DOM* 之后，所以对于像 `<ul>`、`<ol>`、`<table>`、
     `<select>` 这样的元素会有限制，这时要用到 *is* 特性
     
     错误的方法
     #+begin_src html
       <table>
         <my-row>...</my-row>
       </table>
     #+end_src
     正确的方法
     #+begin_src html
       <table>
         <tr is="my-row"></tr>
       </table>
     #+end_src
     
    - JavaScript 内联模板字符串
     - `.vue` 组件
     这两种方式就没有限制

**** data 必须是函数
     #+begin_src js -n
       Vue.component('buttonclicked', {
           props: [
               'initial_count'
           ],
           data() {
               return {
                   count: 0
               }
           },
           template: '<button v-on:click="onclick">Clicked {{ count }} times</button>',
           methods: {
               onclick() {
                   this.count += 1;
               }
           },
           mounted() {
               this.count = this.initial_count;
           }
       });
     #+end_src
     
*** 过渡效果
    Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。 包括以下工具：

    #+begin_verse
    在 CSS 过渡和动画中自动应用 class
    可以配合使用第三方 CSS 动画库，如 Animate.css
    在过渡钩子函数中使用 JavaScript 直接操作 DOM
    可以配合使用第三方 JavaScript 动画库，如 Velocity.js.
    #+end_verse
*** 单文件组件
    为了更好地适应复杂的项目，Vue 支持以.vue 为扩展名的文件来定义一个完整组件，
    用以替代使用 Vue.component 注册组件的方式。开发者可以使用 Webpack 或
    Browserify 等构建工具来打包单文件组件。
*** 生命周期
    每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、
    编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运
    行一些叫做 *生命周期钩子* 的函数，这给了用户在不同阶段添加自己的代码的机会。

    - created 实例被创建后执行
    - mounted
    - updated
    - destroyed
