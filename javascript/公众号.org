#+TITLE: 公众号简介
#+DESCRIPTION: 公众号
#+TAGS[]: 公众号
#+CATEGORIES: 技术
#+DATE: <2019-06-27 14:46:46>

* 公众号
** 公众号接入微信
   公众程序想要接入，微信会先认证一下。
*** 填写公众号的认证配置
    #+begin_quote
    服务器地址 URL : 公众程序认证入口 ！
    Token: 微信用来生成签名的。（该 Token 会和接口 URL 中包含的 Token 进行比对，从而验证安全性）。
    EncodingAESKey 由开发者手动填写或随机生成，将用作消息体加解密密钥。
    #+end_quote

*** 微信认证配置的服务器
    点击提交，微信就认证了，认证结果会有通知。
**** 微信发送认证请求 (你是这 Token 吗？)
     微信发送 ~GET~ 请求到 ~公众号 URL~ ，GET 请求携带参数如下表所示：
    | 参数      | 描述                                                                                         |
    | signature | 微信加密签名，signature 结合了开发者填写的 token 参数和请求中的 timestamp 参数、nonce 参数。 |
    | timestamp | 时间戳                                                                                       |
    | nonce     | 随机数                                                                                       |
    | echostr   | 随机字符串                                                                                   |
  
**** 公众程序回馈 (我是这 Token, 是我)
     开发者校验 ~signature~ 是否正确，然后返回响应。

    若确认此次 ~GET~ 请求来自微信服务器，请原样返回 echostr 参数内容，则接入生效，
    否则接入失败。

    校验步骤
    #+begin_quote
    1）将 token、timestamp、nonce 三个参数进行字典序排序 
    2）将三个参数字符串拼接成一个字符串进行 sha1 加密 
    3）开发者获得加密后的字符串可与 signature 对比，标识该请求来源于微信
    #+end_quote
**** 认证方法
***** 简单的 
      #+begin_src php
        exit($_GET['echostr']);
      #+end_src

      官方的认证根本没有必要,因为后面的步骤没有使用验证签名的地方,所以这个地方为
      了图方便直接输出返回值轻松通过验证
***** 官方要求的
      #+begin_src php
        $token='11';
        $signarr=array($token,$_GET['timestamp'],$_GET['nonce']);

        if($this->signnature($signarr,$_GET['signature'])){
            exit($_GET['echostr']);
        }

        function signnature($arr,$signature){
            sort($arr);
            if(sha1(implode($arr))==$signature) return true;
            return false;
        }
      #+end_src

** 公众程序做自己的功能
   公众程序做 ~web~ 的事情时没啥问题，但是要用到微信的 ~api~ 的时候，要有  ~access_token~ 。
   
*** access_token
**** 简介   
     access_token 是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用
     access_token。开发者需要进行妥善保存。access_token 的存储至少要保留 512 个
     字符空间。access_token 的有效期目前为 2 个小时，需定时刷新，重复获取将导致
     上次获取的 access_token 失效。

**** 获取 access_token 的方法
***** 在平台设置 IP 白名单
***** 发送 GET 请求
      https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET

      | 参数       | 是否必须 | 说明                                     |
      | grant_type | 是       | 获取 access_token 填写 client_credential |
      | appid      | 是       | 第三方用户唯一凭证                       |
      | secret     | 是       | 第三方用户唯一凭证密钥，即 appsecret     |

      正确:
      #+begin_src json
        {"access_token":"ACCESS_TOKEN","expires_in":7200}
      #+end_src

      错误:
      #+begin_src json
        {"errcode":40013,"errmsg":"invalid appid"}
      #+end_src

      | 返回码 | 说明                                                                                                           |
      | ( -1 ) | 系统繁忙，此时请开发者稍候再试                                                                                 |
      |      0 | 请求成功                                                                                                       |
      |  40001 | AppSecret 错误或者 AppSecret 不属于这个公众号，请开发者确认 AppSecret 的正确性                                 |
      |  40002 | 请确保 grant_type 字段值为 client_credential                                                                   |
      |  40164 | 调用接口的 IP 地址不在白名单中，请在接口 IP 白名单中进行设置。（小程序及小游戏调用不要求 IP 地址在白名单内。） |

      -------------------       
  
      #+begin_quote
      有了 token ，就能获取微信的接口做事情了
      #+end_quote
      
*** 用 token 获取微信服务器 IP 地址
    如果公众号基于安全等考虑，需要获知微信服务器的 IP 地址列表，以便进行相关限制，可以通过该接口获得微信服务器 IP 地址列表或者 IP 网段信息。

    接口调用请求说明
    #+begin_quote
    http 请求方式: GEThttps://api.weixin.qq.com/cgi-bin/getcallbackip?access_token=ACCESS_TOKEN
    #+end_quote

    正常
    #+begin_src js
      {"ip_list": ["127.0.0.1", "127.0.0.2", "101.226.103.0/25"    ]}
    #+end_src

    | 参数    | 说明                   |
    | ip_list | 微信服务器 IP 地址列表 |

    错误
    #+begin_src js
      {"errcode":40013,"errmsg":"invalid appid"}
    #+end_src

*** 自定义菜单 
    就是公众号打字的地方，可以放几个按钮
**** 创建菜单
***** 菜单类型
      #+begin_verse
      1、click： 按钮 (发送点击事件给公众号)
      2、view：跳转链接
      3、scancode_push：扫一扫工具
      4、scancode_waitmsg：扫码且弹出“消息接收中”提示框
      5、pic_sysphoto：调用系统相机
      6、pic_photo_or_album：弹出选择器供用户选择“拍照”或者“从手机相册选择”
      7、pic_weixin：调起微信相册
      8、location_select：弹出地理位置
      9、media_id：下发素材
      10、view_limited：跳转图文消息
      #+end_verse

      #+begin_quote
      #+begin_verse
      请注意，3到 8 的所有事件，仅支持微信 iPhone5.4.1 以上版本，和 Android5.4 以上版本的微信用户
      9 和 10，是专门给订阅号用的。
      #+end_verse
      #+end_quote
***** 创建菜单
    #+begin_verse
    接口调用请求说明
    http 请求方式：POST（请使用 https 协议）
    https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN
    #+end_verse

    click 和 view 的请求示例
     #+begin_src json -n
       {
           "button":[
           {    
                "type":"click",
                "name":"今日歌曲",
                "key":"V1001_TODAY_MUSIC"
            },
            {
                 "name":"菜单",
                 "sub_button":[
                 {    
                     "type":"view",
                     "name":"搜索",
                     "url":"http://www.soso.com/"
                  },
                  {
                       "type":"miniprogram",
                       "name":"wxa",
                       "url":"http://mp.weixin.qq.com",
                       "appid":"wx286b93c14bbf93aa",
                       "pagepath":"pages/lunar/index"
                   },
                  {
                     "type":"click",
                     "name":"赞一下我们",
                     "key":"V1001_GOOD"
                  }]
             }]
       }
     #+end_src
   
    其他新增按钮类型的请求示例
    #+begin_src js
      {
          "button": [
              {
                  "name": "扫码", 
                  "sub_button": [
                      {
                          "type": "scancode_waitmsg", 
                          "name": "扫码带提示", 
                          "key": "rselfmenu_0_0", 
                          "sub_button": [ ]
                      }, 
                      {
                          "type": "scancode_push", 
                          "name": "扫码推事件", 
                          "key": "rselfmenu_0_1", 
                          "sub_button": [ ]
                      }
                  ]
              }, 
              {
                  "name": "发图", 
                  "sub_button": [
                      {
                          "type": "pic_sysphoto", 
                          "name": "系统拍照发图", 
                          "key": "rselfmenu_1_0", 
                         "sub_button": [ ]
                       }, 
                      {
                          "type": "pic_photo_or_album", 
                          "name": "拍照或者相册发图", 
                          "key": "rselfmenu_1_1", 
                          "sub_button": [ ]
                      }, 
                      {
                          "type": "pic_weixin", 
                          "name": "微信相册发图", 
                          "key": "rselfmenu_1_2", 
                          "sub_button": [ ]
                      }
                  ]
              }, 
              {
                  "name": "发送位置", 
                  "type": "location_select", 
                  "key": "rselfmenu_2_0"
              },
              {
                 "type": "media_id", 
                 "name": "图片", 
                 "media_id": "MEDIA_ID1"
              }, 
              {
                 "type": "view_limited", 
                 "name": "图文消息", 
                 "media_id": "MEDIA_ID2"
              }
          ]
      }
    #+end_src
  
    参数说明
    | 参数       | 是否必须                              | 说明                                                                                                                   |
    | button     | 是                                    | 一级菜单数组，个数应为 1~3 个                                                                                          |
    | sub_button | 否                                    | 二级菜单数组，个数应为 1~5 个                                                                                          |
    | type       | 是                                    | 菜单的响应动作类型，view 表示网页类型，click 表示点击类型，miniprogram 表示小程序类型                                  |
    | name       | 是                                    | 菜单标题，不超过 16 个字节，子菜单不超过 60 个字节                                                                     |
    | key        | click 等点击类型必须                  | 菜单 KEY 值，用于消息接口推送，不超过 128 字节                                                                         |
    | url        | view、miniprogram 类型必须            | 网页 链接，用户点击菜单可打开链接，不超过 1024 字节。 type 为 miniprogram 时，不支持小程序的老版本客户端将打开本 url。 |
    | media_id   | media_id 类型和 view_limited 类型必须 | 调用新增永久素材接口返回的合法 media_id                                                                                |
    | appid      | miniprogram 类型必须                  | 小程序的 appid（仅认证公众号可配置）                                                                                   |
    | pagepath   | miniprogram 类型必须                  | 小程序的页面路径                                                                                                       |

    正确时的返回 JSON 数据包如下：
    #+begin_src js
    {"errcode":0,"errmsg":"ok"}
    #+end_src

    错误时的返回 JSON 数据包如下（示例为无效菜单名长度）：
    #+begin_src js
    {"errcode":40018,"errmsg":"invalid button name size"}
    #+end_src

**** 查询菜单
     http 请求方式：GET
     #+begin_src 
   https://api.weixin.qq.com/cgi-bin/menu/get?access_token=ACCESS_TOKEN
     #+end_src

     返回说明（无个性化菜单时）

     对应创建接口，正确的 Json 返回结果:
     #+begin_src js -n
       {
           "menu": {
               "button": [
                   {
                       "type": "click", 
                       "name": "今日歌曲", 
                       "key": "V1001_TODAY_MUSIC", 
                       "sub_button": [ ]
                   }, 
                   {
                       "type": "click", 
                       "name": "歌手简介", 
                       "key": "V1001_TODAY_SINGER", 
                       "sub_button": [ ]
                   }, 
                   {
                       "name": "菜单", 
                       "sub_button": [
                           {
                               "type": "view", 
                               "name": "搜索", 
                               "url": "http://www.soso.com/", 
                               "sub_button": [ ]
                           }, 
                           {
                               "type": "view", 
                               "name": "视频", 
                               "url": "http://v.qq.com/", 
                               "sub_button": [ ]
                           }, 
                           {
                               "type": "click", 
                               "name": "赞一下我们", 
                               "key": "V1001_GOOD", 
                               "sub_button": [ ]
                           }
                       ]
                   }
               ]
           }
       }
                   #+end_src
     返回说明（有个性化菜单时）

     #+begin_src js
       {
           "menu": {
               "button": [
                   {
                       "type": "click", 
                       "name": "今日歌曲", 
                       "key": "V1001_TODAY_MUSIC", 
                       "sub_button": [ ]
                   }
               ], 
               "menuid": 208396938
           }, 
           "conditionalmenu": [
               {
                   "button": [
                       {
                           "type": "click", 
                           "name": "今日歌曲", 
                           "key": "V1001_TODAY_MUSIC", 
                           "sub_button": [ ]
                       }, 
                       {
                           "name": "菜单", 
                           "sub_button": [
                               {
                                   "type": "view", 
                                   "name": "搜索", 
                                   "url": "http://www.soso.com/", 
                                   "sub_button": [ ]
                               }, 
                               {
                                   "type": "view", 
                                   "name": "视频", 
                                   "url": "http://v.qq.com/", 
                                   "sub_button": [ ]
                               }, 
                               {
                                   "type": "click", 
                                   "name": "赞一下我们", 
                                   "key": "V1001_GOOD", 
                                   "sub_button": [ ]
                               }
                           ]
                       }
                   ], 
                   "matchrule": {
                       "group_id": 2, 
                       "sex": 1, 
                       "country": "中国", 
                       "province": "广东", 
                       "city": "广州", 
                       "client_platform_type": 2
                   }, 
                   "menuid": 208396993
               }
           ]
       }
     #+end_src

     注：menu 为默认菜单，conditionalmenu 为个性化菜单列表。字段说明请见个性化菜单接
     口页的说明。

**** 删除菜单
     #+begin_src 
   http 请求方式：GET
   https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN
     #+end_src
 
     对应创建接口，正确的 Json 返回结果:
     #+begin_src js
       {"errcode":0,"errmsg":"ok"}
     #+end_src

**** 菜单事件
***** 点击事件
      推送 XML 数据包示例：
      #+begin_src xml -n
        <xml>
          <ToUserName><![CDATA[toUser]]></ToUserName>
          <FromUserName><![CDATA[FromUser]]></FromUserName>
          <CreateTime>123456789</CreateTime>
          <MsgType><![CDATA[event]]></MsgType>
          <Event><![CDATA[CLICK]]></Event>
          <EventKey><![CDATA[EVENTKEY]]></EventKey>
        </xml>
      #+end_src
      参数说明：
      | 参数         | 描述                                       |
      | ToUserName   | 开发者 微信号                              |
      | FromUserName | 发送方帐号（一个 OpenID）                  |
      | CreateTime   | 消息创建时间 （整型）                      |
      | MsgType      | 消息类型，event                            |
      | Event        | 事件类型，CLICK                            |
      | EventKey     | 事件 KEY 值，与自定义菜单接口中 KEY 值对应 |
***** 跳转链接
      推送 XML 数据包示例：
      #+begin_src xml -n
        <xml>
          <ToUserName><![CDATA[toUser]]></ToUserName>
          <FromUserName><![CDATA[FromUser]]></FromUserName>
          <CreateTime>123456789</CreateTime>
          <MsgType><![CDATA[event]]></MsgType>
          <Event><![CDATA[VIEW]]></Event>
          <EventKey><![CDATA[www.qq.com]]></EventKey>
          <MenuId>MENUID</MenuId>
        </xml>
      #+end_src
      参数说明：

      参数	描述
      | ToUserName   | 开发者 微信号                                                                   |
      | FromUserName | 发送方帐号（一个 OpenID）                                                       |
      | CreateTime   | 消息创建时间 （整型）                                                           |
      | MsgType      | 消息类型，event                                                                 |
      | Event        | 事件类型，VIEW                                                                  |
      | EventKey     | 事件 KEY 值，设置的跳转 URL                                                     |
      | MenuID       | 指菜单 ID，如果是个性化菜单，则可以通过这个字段，知道是哪个规则的菜单被点击了。 |
***** scancode_push：扫码推事件的事件推送
      推送 XML 数据包示例：

      #+begin_src xml -n
        <xml><ToUserName><![CDATA[gh_e136c6e50636]]></ToUserName>
        <FromUserName><![CDATA[oMgHVjngRipVsoxg6TuX3vz6glDg]]></FromUserName>
        <CreateTime>1408090502</CreateTime>
        <MsgType><![CDATA[event]]></MsgType>
        <Event><![CDATA[scancode_push]]></Event>
        <EventKey><![CDATA[6]]></EventKey>
        <ScanCodeInfo><ScanType><![CDATA[qrcode]]></ScanType>
        <ScanResult><![CDATA[1]]></ScanResult>
        </ScanCodeInfo>
        </xml>
      #+end_src
      参数说明：

      | 参数         | 描述                                  |
      | ToUserName   | 开发者 微信号                         |
      | FromUserName | 发送方帐号（一个 OpenID）             |
      | CreateTime   | 消息创建时间（整型）                  |
      | MsgType      | 消息类型，event                       |
      | Event        | 事件类型，scancode_push               |
      | EventKey     | 事件 KEY 值，由开发者在创建菜单时设定 |
      | ScanCodeInfo | 扫描信息                              |
      | ScanType     | 扫描类型，一般是 qrcode               |
      | ScanResult   | 扫描结果，即二维码对应的字符串信息    |
***** scancode_waitmsg：扫码推事件且弹出“消息接收中”提示框的事件推送
      推送 XML 数据包示例：

      #+begin_src xml -n
        <xml><ToUserName><![CDATA[gh_e136c6e50636]]></ToUserName>
        <FromUserName><![CDATA[oMgHVjngRipVsoxg6TuX3vz6glDg]]></FromUserName>
        <CreateTime>1408090606</CreateTime>
        <MsgType><![CDATA[event]]></MsgType>
        <Event><![CDATA[scancode_waitmsg]]></Event>
        <EventKey><![CDATA[6]]></EventKey>
        <ScanCodeInfo><ScanType><![CDATA[qrcode]]></ScanType>
        <ScanResult><![CDATA[2]]></ScanResult>
        </ScanCodeInfo>
        </xml>
      #+end_src
      参数说明：

      |参数|	描述
      |ToUserName|		开发者 微信号
      |FromUserName|		发送方帐号（一个 OpenID）
      |CreateTime	|	消息创建时间 （整型）
      |MsgType	|	消息类型，event
      |Event	|	事件类型，scancode_waitmsg
      |EventKey	|	事件 KEY 值，由开发者在创建菜单时设定
      |ScanCodeInfo|		扫描信息
      |ScanType|		扫描类型，一般是 qrcode
      |ScanResult|		扫描结果，即二维码对应的字符串信息
***** pic_sysphoto：弹出系统拍照发图的事件推送
      推送 XML 数据包示例：
      #+begin_src xml -n
        <xml><ToUserName><![CDATA[gh_e136c6e50636]]></ToUserName>
        <FromUserName><![CDATA[oMgHVjngRipVsoxg6TuX3vz6glDg]]></FromUserName>
        <CreateTime>1408090651</CreateTime>
        <MsgType><![CDATA[event]]></MsgType>
        <Event><![CDATA[pic_sysphoto]]></Event>
        <EventKey><![CDATA[6]]></EventKey>
        <SendPicsInfo><Count>1</Count>
        <PicList><item><PicMd5Sum><![CDATA[1b5f7c23b5bf75682a53e7b6d163e185]]></PicMd5Sum>
        </item>
        </PicList>
        </SendPicsInfo>
        </xml>
      #+end_src
      参数说明：

      |参数|	描述
      |ToUserName|	开发者 微信号
      |FromUserName|	发送方帐号（一个 OpenID）
      |CreateTime	|消息创建时间 （整型）
      |MsgType	|消息类型，event
      |Event	|事件类型，pic_sysphoto
      |EventKey|	事件 KEY 值，由开发者在创建菜单时设定
      |SendPicsInfo|	发送的图片信息
      |Count	|发送的图片数量
      |PicList|	图片列表
      |PicMd5Sum|	图片的 MD5 值，开发者若需要，可用于验证接收到图片
***** pic_photo_or_album：弹出拍照或者相册发图的事件推送
      推送 XML 数据包示例：

      #+begin_src xml -n
        <xml><ToUserName><![CDATA[gh_e136c6e50636]]></ToUserName>
        <FromUserName><![CDATA[oMgHVjngRipVsoxg6TuX3vz6glDg]]></FromUserName>
        <CreateTime>1408090816</CreateTime>
        <MsgType><![CDATA[event]]></MsgType>
        <Event><![CDATA[pic_photo_or_album]]></Event>
        <EventKey><![CDATA[6]]></EventKey>
        <SendPicsInfo><Count>1</Count>
        <PicList><item><PicMd5Sum><![CDATA[5a75aaca956d97be686719218f275c6b]]></PicMd5Sum>
        </item>
        </PicList>
        </SendPicsInfo>
        </xml>
      #+end_src
      参数说明：

      |参数|	描述
      |ToUserName|	开发者 微信号
      |FromUserName|	发送方帐号（一个 OpenID）
      |CreateTime|	消息创建时间 （整型）
      |MsgType|	消息类型，event
      |Event|	事件类型，pic_photo_or_album
      |EventKey|	事件 KEY 值，由开发者在创建菜单时设定
      |SendPicsInfo|	发送的图片信息
      |Count|	发送的图片数量
      |PicList|	图片列表
      |PicMd5Sum|	图片的 MD5 值，开发者若需要，可用于验证接收到图片
***** pic_weixin：弹出微信相册发图器的事件推送
      推送 XML 数据包示例：
      #+begin_src xml -n
        <xml><ToUserName><![CDATA[gh_e136c6e50636]]></ToUserName>
        <FromUserName><![CDATA[oMgHVjngRipVsoxg6TuX3vz6glDg]]></FromUserName>
        <CreateTime>1408090816</CreateTime>
        <MsgType><![CDATA[event]]></MsgType>
        <Event><![CDATA[pic_weixin]]></Event>
        <EventKey><![CDATA[6]]></EventKey>
        <SendPicsInfo><Count>1</Count>
        <PicList><item><PicMd5Sum><![CDATA[5a75aaca956d97be686719218f275c6b]]></PicMd5Sum>
        </item>
        </PicList>
        </SendPicsInfo>
        </xml>
      #+end_src
      参数说明：

      |参数|	描述
      |ToUserName|	开发者 微信号
      |FromUserName|		发送方帐号（一个 OpenID）
      |CreateTime|		消息创建时间 （整型）
      |MsgType|		消息类型，event
      |Event|		事件类型，pic_weixin
      |EventKey|		事件 KEY 值，由开发者在创建菜单时设定
      |SendPicsInfo|		发送的图片信息
      |Count|		发送的图片数量
      |PicList|		图片列表
      |PicMd5Sum|		图片的 MD5 值，开发者若需要，可用于验证接收到图片
***** location_select：弹出地理位置选择器的事件推送
      推送 XML 数据包示例：

      #+begin_src xml -n
        <xml><ToUserName><![CDATA[gh_e136c6e50636]]></ToUserName>
        <FromUserName><![CDATA[oMgHVjngRipVsoxg6TuX3vz6glDg]]></FromUserName>
        <CreateTime>1408091189</CreateTime>
        <MsgType><![CDATA[event]]></MsgType>
        <Event><![CDATA[location_select]]></Event>
        <EventKey><![CDATA[6]]></EventKey>
        <SendLocationInfo><Location_X><![CDATA[23]]></Location_X>
        <Location_Y><![CDATA[113]]></Location_Y>
        <Scale><![CDATA[15]]></Scale>
        <Label><![CDATA[ 广州市海珠区客村艺苑路 106 号]]></Label>
        <Poiname><![CDATA[]]></Poiname>
        </SendLocationInfo>
        </xml>
      #+end_src
      参数说明：

      | 参数             | 描述                                                |
      | ToUserName       | 开发者 微信号                                       |
      | FromUserName     | 发送方帐号（一个 OpenID）                           |
      | CreateTime       | 消息创建时间 （整型）                               |
      | MsgType          | 消息类型，event                                     |
      | Event            | 事件类型，location_select                           |
      | EventKey         | 事件 KEY 值，由开发者在创建菜单时设定               |
      | SendLocationInfo | 发送的位置信息                                      |
      | Location_X       | X 坐标信息                                          |
      | Location_Y       | Y 坐标信息                                          |
      | Scale            | 精度，可理解为精度或者比例尺、越精细的话 scale 越高 |
      | Label            | 地理位置的字符串信息                                |
      | Poiname          | 朋友圈 POI 的名字，可能为空                         |
***** 点击菜单跳转小程序的事件推送
      推送 XML 数据包示例：

      #+begin_src xml -n
        <xml>
          <ToUserName><![CDATA[toUser]]></ToUserName>
          <FromUserName><![CDATA[FromUser]]></FromUserName>
          <CreateTime>123456789</CreateTime>
          <MsgType><![CDATA[event]]></MsgType>
          <Event><![CDATA[view_miniprogram]]></Event>
          <EventKey><![CDATA[pages/index/index]]></EventKey>
          <MenuId>MENUID</MenuId>
        </xml>
      #+end_src
      参数说明：

      | 参数         | 描述                                                                        |
      | ToUserName   | 开发者 微信号                                                               |
      | FromUserName | 发送方帐号（一个 OpenID）                                                   |
      | CreateTime   | 消息创建时间 （整型）                                                       |
      | MsgType      | 消息类型，event                                                             |
      | Event        | 事件类型，view_miniprogram                                                  |
      | EventKey     | 事件 KEY 值，跳转的小程序路径                                               |
      | MenuID       | 菜单 ID，如果是个性化菜单，则可以通过这个字段，知道是哪个规则的菜单被点击了 |

* 消息管理
** 接收普通消息
 当普通微信用户向公众账号发消息时，微信服务器将 POST 消息的 XML 数据包到开发者填写的 URL 上。

 请注意：

 1、关于重试的消息排重，推荐使用 msgid 排重。

 2、微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。假如服务器无法保证在五秒内处理并回复，

 可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。详情请见“发送消息-被动回复消息”。

 3、如果开发者需要对用户消息在 5 秒内立即做出回应，即使用“发送消息-被动回复消息”接口向用户被动回复消息时，可以在

 公众平台官网的开发者中心处设置消息加密。开启加密后，用户发来的消息和开发者回复的消息都会被加密（但开发者通过客服

 接口等 API 调用形式向用户发送消息，则不受影响）。关于消息加解密的详细说明，请见“发送消息-被动回复消息加解密说明”。

 各消息类型的推送 XML 数据包结构如下：

 文本消息
 <xml>
   <ToUserName><![CDATA[toUser]]></ToUserName>
   <FromUserName><![CDATA[fromUser]]></FromUserName>
   <CreateTime>1348831860</CreateTime>
   <MsgType><![CDATA[text]]></MsgType>
   <Content><![CDATA[this is a test]]></Content>
   <MsgId>1234567890123456</MsgId>
 </xml>
 参数	描述
 ToUserName	开发者微信号
 FromUserName	发送方帐号（一个 OpenID）
 CreateTime	消息创建时间 （整型）
 MsgType	消息类型，文本为 text
 Content	文本消息内容
 MsgId	消息 id，64 位整型
 使用网页调试工具调试该接口

 图片消息
 <xml>
   <ToUserName><![CDATA[toUser]]></ToUserName>
   <FromUserName><![CDATA[fromUser]]></FromUserName>
   <CreateTime>1348831860</CreateTime>
   <MsgType><![CDATA[image]]></MsgType>
   <PicUrl><![CDATA[this is a url]]></PicUrl>
   <MediaId><![CDATA[media_id]]></MediaId>
   <MsgId>1234567890123456</MsgId>
 </xml>
 参数	描述
 ToUserName	开发者微信号
 FromUserName	发送方帐号（一个 OpenID）
 CreateTime	消息创建时间 （整型）
 MsgType	消息类型，图片为 image
 PicUrl	图片链接（由系统生成）
 MediaId	图片消息媒体 id，可以调用获取临时素材接口拉取数据。
 MsgId	消息 id，64 位整型
 使用网页调试工具调试该接口

 语音消息
 <xml>
   <ToUserName><![CDATA[toUser]]></ToUserName>
   <FromUserName><![CDATA[fromUser]]></FromUserName>
   <CreateTime>1357290913</CreateTime>
   <MsgType><![CDATA[voice]]></MsgType>
   <MediaId><![CDATA[media_id]]></MediaId>
   <Format><![CDATA[Format]]></Format>
   <MsgId>1234567890123456</MsgId>
 </xml>
 参数	描述
 ToUserName	开发者微信号
 FromUserName	发送方帐号（一个 OpenID）
 CreateTime	消息创建时间 （整型）
 MsgType	语音为 voice
 MediaId	语音消息媒体 id，可以调用获取临时素材接口拉取数据。
 Format	语音格式，如 amr，speex 等
 MsgID	消息 id，64 位整型
 使用网页调试工具调试该接口

 请注意，开通语音识别后，用户每次发送语音给公众号时，微信会在推送的语音消息 XML 数据包中，增加一个 Recognition 字段（注：由于客户端缓存，开发者开启或者关闭语音识别功能，对新关注者立刻生效，对已关注用户需要 24 小时生效。开发者可以重新关注此帐号进行测试）。开启语音识别后的语音 XML 数据包如下：

 <xml><ToUserName>< ![CDATA[toUser] ]></ToUserName><FromUserName>< ![CDATA[fromUser] ]></FromUserName><CreateTime>1357290913</CreateTime><MsgType>< ![CDATA[voice] ]></MsgType><MediaId>< ![CDATA[media_id] ]></MediaId><Format>< ![CDATA[Format] ]></Format><Recognition>< ![CDATA[腾讯微信团队] ]></Recognition><MsgId>1234567890123456</MsgId></xml>
 参数说明：

 参数	描述
 ToUserName	开发者微信号
 FromUserName	发送方帐号（一个 OpenID）
 CreateTime	消息创建时间 （整型）
 MsgType	语音为 voice
 MediaID	语音消息媒体 id，可以调用获取临时素材接口拉取该媒体
 Format	语音格式：amr
 Recognition	语音识别结果，UTF8 编码
 MsgID	消息 id，64 位整型
 视频消息
 <xml>
   <ToUserName><![CDATA[toUser]]></ToUserName>
   <FromUserName><![CDATA[fromUser]]></FromUserName>
   <CreateTime>1357290913</CreateTime>
   <MsgType><![CDATA[video]]></MsgType>
   <MediaId><![CDATA[media_id]]></MediaId>
   <ThumbMediaId><![CDATA[thumb_media_id]]></ThumbMediaId>
   <MsgId>1234567890123456</MsgId>
 </xml>
 参数	描述
 ToUserName	开发者微信号
 FromUserName	发送方帐号（一个 OpenID）
 CreateTime	消息创建时间 （整型）
 MsgType	视频为 video
 MediaId	视频消息媒体 id，可以调用获取临时素材接口拉取数据。
 ThumbMediaId	视频消息缩略图的媒体 id，可以调用多媒体文件下载接口拉取数据。
 MsgId	消息 id，64 位整型
 使用网页调试工具调试该接口

 小视频消息
 <xml>
   <ToUserName><![CDATA[toUser]]></ToUserName>
   <FromUserName><![CDATA[fromUser]]></FromUserName>
   <CreateTime>1357290913</CreateTime>
   <MsgType><![CDATA[shortvideo]]></MsgType>
   <MediaId><![CDATA[media_id]]></MediaId>
   <ThumbMediaId><![CDATA[thumb_media_id]]></ThumbMediaId>
   <MsgId>1234567890123456</MsgId>
 </xml>
 参数	描述
 ToUserName	开发者微信号
 FromUserName	发送方帐号（一个 OpenID）
 CreateTime	消息创建时间 （整型）
 MsgType	小视频为 shortvideo
 MediaId	视频消息媒体 id，可以调用获取临时素材接口拉取数据。
 ThumbMediaId	视频消息缩略图的媒体 id，可以调用获取临时素材接口拉取数据。
 MsgId	消息 id，64 位整型
 使用网页调试工具调试该接口

 地理位置消息
 <xml>
   <ToUserName><![CDATA[toUser]]></ToUserName>
   <FromUserName><![CDATA[fromUser]]></FromUserName>
   <CreateTime>1351776360</CreateTime>
   <MsgType><![CDATA[location]]></MsgType>
   <Location_X>23.134521</Location_X>
   <Location_Y>113.358803</Location_Y>
   <Scale>20</Scale>
   <Label><![CDATA[位置信息]]></Label>
   <MsgId>1234567890123456</MsgId>
 </xml>
 参数	描述
 ToUserName	开发者微信号
 FromUserName	发送方帐号（一个 OpenID）
 CreateTime	消息创建时间 （整型）
 MsgType	消息类型，地理位置为 location
 Location_X	地理位置维度
 Location_Y	地理位置经度
 Scale	地图缩放大小
 Label	地理位置信息
 MsgId	消息 id，64 位整型
 使用网页调试工具调试该接口

 链接消息
 <xml>
   <ToUserName><![CDATA[toUser]]></ToUserName>
   <FromUserName><![CDATA[fromUser]]></FromUserName>
   <CreateTime>1351776360</CreateTime>
   <MsgType><![CDATA[link]]></MsgType>
   <Title><![CDATA[公众平台官网链接]]></Title>
   <Description><![CDATA[公众平台官网链接]]></Description>
   <Url><![CDATA[url]]></Url>
   <MsgId>1234567890123456</MsgId>
 </xml>
 参数	描述
 ToUserName	接收方微信号
 FromUserName	发送方微信号，若为普通用户，则是一个 OpenID
 CreateTime	消息创建时间
 MsgType	消息类型，链接为 link
 Title	消息标题
 Description	消息描述
 Url	消息链接
 MsgId	消息 id，64 位整型
 使用网页调试工具调试该接口
** 接收事件推送
在微信用户和公众号产生交互的过程中，用户的某些操作会使得微信服务器通过事件推送的
形式通知到开发者在开发者中心处设置的服务器地址，从而开发者可以获取到该信息。其中，
某些事件推送在发生后，是允许开发者回复用户的，某些则不允许，详细内容如下：

目录

1 关注/取消关注事件

2 扫描带参数二维码事件

3 上报地理位置事件

4 自定义菜单事件

5 点击菜单拉取消息时的事件推送

6 点击菜单跳转链接时的事件推送

关注/取消关注事件
用户在关注与取消关注公众号时，微信会把这个事件推送到开发者填写的 URL。方便开发者给用户下发欢迎消息或者做帐号的解绑。为保护用户数据隐私，开发者收到用户取消关注事件时需要删除该用户的所有信息。

微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。

关于重试的消息排重，推荐使用 FromUserName + CreateTime 排重。

假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。

推送 XML 数据包示例：

<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[FromUser]]></FromUserName>
  <CreateTime>123456789</CreateTime>
  <MsgType><![CDATA[event]]></MsgType>
  <Event><![CDATA[subscribe]]></Event>
</xml>
参数说明：

参数	描述
ToUserName	开发者微信号
FromUserName	发送方帐号（一个 OpenID）
CreateTime	消息创建时间 （整型）
MsgType	消息类型，event
Event	事件类型，subscribe(订阅)、unsubscribe(取消订阅)
使用网页调试工具调试该接口

扫描带参数二维码事件
用户扫描带场景值二维码时，可能推送以下两种事件：

如果用户还未关注公众号，则用户可以关注公众号，关注后微信会将带场景值关注事件推送给开发者。
如果用户已经关注公众号，则微信会将带场景值扫描事件推送给开发者。
1. 用户未关注时，进行关注后的事件推送

推送 XML 数据包示例：

<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[FromUser]]></FromUserName>
  <CreateTime>123456789</CreateTime>
  <MsgType><![CDATA[event]]></MsgType>
  <Event><![CDATA[subscribe]]></Event>
  <EventKey><![CDATA[qrscene_123123]]></EventKey>
  <Ticket><![CDATA[TICKET]]></Ticket>
</xml>
参数说明：

参数	描述
ToUserName	开发者微信号
FromUserName	发送方帐号（一个 OpenID）
CreateTime	消息创建时间 （整型）
MsgType	消息类型，event
Event	事件类型，subscribe
EventKey	事件 KEY 值，qrscene_为前缀，后面为二维码的参数值
Ticket	二维码的 ticket，可用来换取二维码图片
2. 用户已关注时的事件推送

推送 XML 数据包示例：

<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[FromUser]]></FromUserName>
  <CreateTime>123456789</CreateTime>
  <MsgType><![CDATA[event]]></MsgType>
  <Event><![CDATA[SCAN]]></Event>
  <EventKey><![CDATA[SCENE_VALUE]]></EventKey>
  <Ticket><![CDATA[TICKET]]></Ticket>
</xml>
参数说明：

参数	描述
ToUserName	开发者微信号
FromUserName	发送方帐号（一个 OpenID）
CreateTime	消息创建时间 （整型）
MsgType	消息类型，event
Event	事件类型，SCAN
EventKey	事件 KEY 值，是一个 32 位无符号整数，即创建二维码时的二维码 scene_id
Ticket	二维码的 ticket，可用来换取二维码图片
使用网页调试工具调试该接口

上报地理位置事件
用户同意上报地理位置后，每次进入公众号会话时，都会在进入时上报地理位置，或在进入会话后每 5 秒上报一次地理位置，公众号可以在公众平台网站中修改以上设置。上报地理位置时，微信会将上报地理位置事件推送到开发者填写的 URL。

推送 XML 数据包示例：

<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[fromUser]]></FromUserName>
  <CreateTime>123456789</CreateTime>
  <MsgType><![CDATA[event]]></MsgType>
  <Event><![CDATA[LOCATION]]></Event>
  <Latitude>23.137466</Latitude>
  <Longitude>113.352425</Longitude>
  <Precision>119.385040</Precision>
</xml>
参数说明：

参数	描述
ToUserName	开发者微信号
FromUserName	发送方帐号（一个 OpenID）
CreateTime	消息创建时间 （整型）
MsgType	消息类型，event
Event	事件类型，LOCATION
Latitude	地理位置纬度
Longitude	地理位置经度
Precision	地理位置精度
使用网页调试工具调试该接口

自定义菜单事件
用户点击自定义菜单后，微信会把点击事件推送给开发者，请注意，点击菜单弹出子菜单，不会产生上报。

点击菜单拉取消息时的事件推送

推送 XML 数据包示例：

<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[FromUser]]></FromUserName>
  <CreateTime>123456789</CreateTime>
  <MsgType><![CDATA[event]]></MsgType>
  <Event><![CDATA[CLICK]]></Event>
  <EventKey><![CDATA[EVENTKEY]]></EventKey>
</xml>
参数说明：

参数	描述
ToUserName	开发者微信号
FromUserName	发送方帐号（一个 OpenID）
CreateTime	消息创建时间 （整型）
MsgType	消息类型，event
Event	事件类型，CLICK
EventKey	事件 KEY 值，与自定义菜单接口中 KEY 值对应
点击菜单跳转链接时的事件推送

推送 XML 数据包示例：

<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[FromUser]]></FromUserName>
  <CreateTime>123456789</CreateTime>
  <MsgType><![CDATA[event]]></MsgType>
  <Event><![CDATA[VIEW]]></Event>
  <EventKey><![CDATA[www.qq.com]]></EventKey>
</xml>
参数说明：

参数	描述
ToUserName	开发者微信号
FromUserName	发送方帐号（一个 OpenID）
CreateTime	消息创建时间 （整型）
MsgType	消息类型，event
Event	事件类型，VIEW
EventKey	事件 KEY 值，设置的跳转 URL
使用网页调试工具调试该接口
** 被动回复用户消息
当用户发送消息给公众号时（或某些特定的用户操作引发的事件推送时），会产生一个 POST 请求，开发者可以在响应包（Get）中返回特定 XML 结构，来对该消息进行响应（现支持回复文本、图片、图文、语音、视频、音乐）。严格来说，发送被动响应消息其实并不是一种接口，而是对微信服务器发过来消息的一次回复。

微信服务器在将用户的消息发给公众号的开发者服务器地址（开发者中心处配置）后，微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次，如果在调试中，发现用户无法收到响应的消息，可以检查是否消息处理超时。关于重试的消息排重，有 msgid 的消息推荐使用 msgid 排重。事件类型消息推荐使用 FromUserName + CreateTime 排重。

如果开发者希望增强安全性，可以在开发者中心处开启消息加密，这样，用户发给公众号的消息以及公众号被动回复用户消息都会继续加密（但），详见被动回复消息加解密说明。

假如服务器无法保证在五秒内处理并回复，必须做出下述回复，这样微信服务器才不会对此作任何处理，并且不会发起重试（这种情况下，可以使用客服消息接口进行异步回复），否则，将出现严重的错误提示。详见下面说明：

1、直接回复 success（推荐方式） 2、直接回复空串（指字节长度为 0 的空字符串，而不是 XML 结构体中 content 字段的内容为空）

一旦遇到以下情况，微信都会在公众号会话中，向用户下发系统提示“该公众号暂时无法提供服务，请稍后再试”：

1、开发者在 5 秒内未回复任何内容 2、开发者回复了异常数据，比如 JSON 数据等

另外，请注意，回复图片（不支持 gif 动图）等多媒体消息时需要预先通过素材管理接口上传临时素材到微信服务器，可以使用素材管理中的临时素材，也可以使用永久素材。

各消息类型需要的 XML 数据包结构如下：

目录

1 回复文本消息

2 回复图片消息

3 回复语音消息

4 回复视频消息

5 回复音乐消息

6 回复图文消息


回复文本消息
<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[fromUser]]></FromUserName>
  <CreateTime>12345678</CreateTime>
  <MsgType><![CDATA[text]]></MsgType>
  <Content><![CDATA[你好]]></Content>
</xml>
参数	是否必须	描述
ToUserName	是	接收方帐号（收到的 OpenID）
FromUserName	是	开发者微信号
CreateTime	是	消息创建时间 （整型）
MsgType	是	消息类型，文本为 text
Content	是	回复的消息内容（换行：在 content 中能够换行，微信客户端就支持换行显示）

回复图片消息
<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[fromUser]]></FromUserName>
  <CreateTime>12345678</CreateTime>
  <MsgType><![CDATA[image]]></MsgType>
  <Image>
    <MediaId><![CDATA[media_id]]></MediaId>
  </Image>
</xml>
参数	是否必须	说明
ToUserName	是	接收方帐号（收到的 OpenID）
FromUserName	是	开发者微信号
CreateTime	是	消息创建时间 （整型）
MsgType	是	消息类型，图片为 image
MediaId	是	通过素材管理中的接口上传多媒体文件，得到的 id。

回复语音消息
<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[fromUser]]></FromUserName>
  <CreateTime>12345678</CreateTime>
  <MsgType><![CDATA[voice]]></MsgType>
  <Voice>
    <MediaId><![CDATA[media_id]]></MediaId>
  </Voice>
</xml>
参数	是否必须	说明
ToUserName	是	接收方帐号（收到的 OpenID）
FromUserName	是	开发者微信号
CreateTime	是	消息创建时间戳 （整型）
MsgType	是	消息类型，语音为 voice
MediaId	是	通过素材管理中的接口上传多媒体文件，得到的 id

回复视频消息
<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[fromUser]]></FromUserName>
  <CreateTime>12345678</CreateTime>
  <MsgType><![CDATA[video]]></MsgType>
  <Video>
    <MediaId><![CDATA[media_id]]></MediaId>
    <Title><![CDATA[title]]></Title>
    <Description><![CDATA[description]]></Description>
  </Video>
</xml>
参数	是否必须	说明
ToUserName	是	接收方帐号（收到的 OpenID）
FromUserName	是	开发者微信号
CreateTime	是	消息创建时间 （整型）
MsgType	是	消息类型，视频为 video
MediaId	是	通过素材管理中的接口上传多媒体文件，得到的 id
Title	否	视频消息的标题
Description	否	视频消息的描述

回复音乐消息
<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[fromUser]]></FromUserName>
  <CreateTime>12345678</CreateTime>
  <MsgType><![CDATA[music]]></MsgType>
  <Music>
    <Title><![CDATA[TITLE]]></Title>
    <Description><![CDATA[DESCRIPTION]]></Description>
    <MusicUrl><![CDATA[MUSIC_Url]]></MusicUrl>
    <HQMusicUrl><![CDATA[HQ_MUSIC_Url]]></HQMusicUrl>
    <ThumbMediaId><![CDATA[media_id]]></ThumbMediaId>
  </Music>
</xml>
参数	是否必须	说明
ToUserName	是	接收方帐号（收到的 OpenID）
FromUserName	是	开发者微信号
CreateTime	是	消息创建时间 （整型）
MsgType	是	消息类型，音乐为 music
Title	否	音乐标题
Description	否	音乐描述
MusicURL	否	音乐链接
HQMusicUrl	否	高质量音乐链接，WIFI 环境优先使用该链接播放音乐
ThumbMediaId	是	缩略图的媒体 id，通过素材管理中的接口上传多媒体文件，得到的 id

回复图文消息
<xml>
  <ToUserName><![CDATA[toUser]]></ToUserName>
  <FromUserName><![CDATA[fromUser]]></FromUserName>
  <CreateTime>12345678</CreateTime>
  <MsgType><![CDATA[news]]></MsgType>
  <ArticleCount>1</ArticleCount>
  <Articles>
    <item>
      <Title><![CDATA[title1]]></Title>
      <Description><![CDATA[description1]]></Description>
      <PicUrl><![CDATA[picurl]]></PicUrl>
      <Url><![CDATA[url]]></Url>
    </item>
  </Articles>
</xml>
参数	是否必须	说明
ToUserName	是	接收方帐号（收到的 OpenID）
FromUserName	是	开发者微信号
CreateTime	是	消息创建时间 （整型）
MsgType	是	消息类型，图文为 news
ArticleCount	是	图文消息个数；当用户发送文本、图片、视频、图文、地理位置这五种消息时，开发者只能回复 1 条图文消息；其余场景最多可回复 8 条图文消息
Articles	是	图文消息信息，注意，如果图文数超过限制，则将只发限制内的条数
Title	是	图文消息标题
Description	是	图文消息描述
PicUrl	是	图片链接，支持 JPG、PNG 格式，较好的效果为大图 360*200，小图 200*200
Url	是	点击图文消息跳转链接
* 微信网页开发
  跟微信交互需要获取微信的授权  ~access_token~
  跟用户交互需要获取用户的授权
  
  : 公众号要在 **网页授权获取用户基本信息**  中 ~配置~ 用户授权后的 回调页面 (跳转页面) 。

** 微信网页授权
   1、以 snsapi_base 为 scope 发起的网页授权，是用来获取进入页面的用户的 openid 的，
   并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页
   面）

   2、以 snsapi_userinfo 为 scope 发起的网页授权，是用来获取用户的基本信息的。但这
   种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户
   的基本信息。

   3、用户管理类接口中的“获取用户基本信息接口”，是在用户和公众号产生消息交互或关
   注后事件推送后，才能根据用户 OpenID 来获取用户基本信息。这个接口，包括其他微信接
   口，都是需要该用户（即 openid）关注了公众号后，才能调用成功的。

   关于网页授权 access_token 和普通 access_token 的区别

   1、微信网页授权是通过 OAuth2.0 机制实现的，在用户授权给公众号后，公众号可以获取
   到一个网页授权特有的接口调用凭证（网页授权 access_token），通过网页授权
   access_token 可以进行授权后接口调用，如获取用户基本信息；

   2、其他微信接口，需要通过基础支持中的“获取 access_token”接口来获取到的普通
   access_token 调用。

*** 授权页面
 在确保微信公众账号拥有授权作用域（scope 参数）的权限的前提下（服务号获得高级接口
 后，默认拥有 scope 参数中的 snsapi_base 和 snsapi_userinfo），引导关注者打开如下
 页面：

 https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect

 参数说明
 | 参数             | 是否必须 | 说明                                                                                                                                                                                                              |
 | appid            | 是       | 公众号的唯一标识                                                                                                                                                                                                  |
 | redirect_uri     | 是       | 授权后重定向的回调链接地址， 请使用 urlEncode 对链接进行处理                                                                                                                                                      |
 | response_type    | 是       | 返回类型，请填写 code                                                                                                                                                                                             |
 | scope            | 是       | 应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户 openid），snsapi_userinfo （弹出授权页面，可通过 openid 拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ） |
 | state            | 否       | 重定向后会带上 state 参数，开发者可以填写 a-zA-Z0-9 的参数值，最多 128 字节                                                                                                                                       |
 | #wechat_redirect | 是       | 无论直接打开还是做页面 302 重定向时候，必须带此参数                                                                                                                                                               |

 错误返回码说明如下：
 | 返回码 | 说明                                           |
 |  10003 | redirect_uri 域名与后台配置不一致              |
 |  10004 | 此公众号被封禁                                 |
 |  10005 | 此公众号并没有这些 scope 的权限                |
 |  10006 | 必须关注此测试号                               |
 |  10009 | 操作太频繁了，请稍后重试                       |
 |  10010 | scope 不能为空                                 |
 |  10011 | redirect_uri 不能为空                          |
 |  10012 | appid 不能为空                                 |
 |  10013 | state 不能为空                                 |
 |  10015 | 公众号未授权第三方平台，请检查授权状态         |
 |  10016 | 不支持微信开放平台的 Appid，请使用公众号 Appid |

*** 第二步：通过 code 换取网页授权 access_token
    首先请注意，这里通过 code 换取的是一个特殊的网页授权 access_token,与基础支持
    中的 access_token（该 access_token 用于调用其他接口）不同。公众号可通过下述接
    口来获取网页授权 access_token。如果网页授权的作用域为 snsapi_base，则本步骤中
    获取到网页授权 access_token 的同时，也获取到了 openid，snsapi_base 式的网页授
    权流程即到此为止。

 尤其注意：由于公众号的 secret 和获取到的 access_token 安全级别都非常高，必须只保
 存在服务器，不允许传给客户端。后续刷新 access_token、通过 access_token 获取用户
 信息等步骤，也必须从服务器发起。

 请求方法
 #+begin_verse
 获取 code 后，请求以下链接获取 access_token：  https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code
 #+end_verse

 参数说明

 | 参数       | 是否必须 | 说明                       |
 | appid      | 是       | 公众号的唯一标识           |
 | secret     | 是       | 公众号的 appsecret         |
 | code       | 是       | 填写第一步获取的 code 参数 |
 | grant_type | 是       | 填写为 authorization_code  |

 正确时返回的 JSON 数据包如下：

 #+begin_src js
 {
     "access_token":"ACCESS_TOKEN",
     "expires_in":7200,
     "refresh_token":"REFRESH_TOKEN",
     "openid":"OPENID",
     "scope":"SCOPE" 
  }
 #+end_src
 | 参数          | 描述                                                                                                |
 | access_token  | 网页授权接口调用凭证,注意：此 access_token 与基础支持的 access_token 不同                           |
 | expires_in    | access_token 接口调用凭证超时时间，单位（秒）                                                       |
 | refresh_token | 用户刷新 access_token                                                                               |
 | openid        | 用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的 OpenID |
 | scope         | 用户授权的作用域，使用逗号（,）分隔                                                                 |
 错误时微信会返回 JSON 数据包如下（示例为 Code 无效错误）:
 #+begin_src js
 {"errcode":40029,"errmsg":"invalid code"}
 #+end_src

*** 第三步：刷新 access_token（如果需要）
 由于 access_token 拥有较短的有效期，当 access_token 超时后，可以使用
 refresh_token 进行刷新，refresh_token 有效期为 30 天，当 refresh_token 失效之后，
 需要用户重新授权。

 请求方法

 获取第二步的 refresh_token 后，请求以下链接获取 access_token：
 https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=APPID&grant_type=refresh_token&refresh_token=REFRESH_TOKEN
 | 参数          | 是否必须 | 说明                                              |
 | appid         | 是       | 公众号的唯一标识                                  |
 | grant_type    | 是       | 填写为 refresh_token                              |
 | refresh_token | 是       | 填写通过 access_token 获取到的 refresh_token 参数 |
 返回说明

 正确时返回的 JSON 数据包如下：
 #+begin_src js
 { 
     "access_token":"ACCESS_TOKEN",
     "expires_in":7200,
     "refresh_token":"REFRESH_TOKEN",
     "openid":"OPENID",
     "scope":"SCOPE" 
 }
 #+end_src
 |参数	|描述
 |access_token	|网页授权接口调用凭证,注意：此 access_token 与基础支持的 access_token 不同
 |expires_in	|access_token 接口调用凭证超时时间，单位（秒）
 |refresh_token|	用户刷新 access_token
 |openid	|用户唯一标识
 |scope|	用户授权的作用域，使用逗号（,）分隔
 错误时微信会返回 JSON 数据包如下（示例为 code 无效错误）:
 #+begin_src js
 {"errcode":40029,"errmsg":"invalid code"}
 #+end_src

*** 第四步：拉取用户信息(需 scope 为 snsapi_userinfo)
 如果网页授权作用域为 snsapi_userinfo，则此时开发者可以通过 access_token 和 openid 拉取用户信息了。

 请求方法
 #+begin_verse
 http：GET（请使用 https 协议） https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN
 #+end_verse

 参数说明

 | 参数         | 描述                                                                      |
 | access_token | 网页授权接口调用凭证,注意：此 access_token 与基础支持的 access_token 不同 |
 | openid       | 用户的唯一标识                                                            |
 | lang         | 返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语                     |
 返回说明

 正确时返回的 JSON 数据包如下：
 #+begin_src js
 {   
     "openid":" OPENID",
     " nickname": NICKNAME,
     "sex":"1",
     "province":"PROVINCE"
     "city":"CITY",
     "country":"COUNTRY",
     "headimgurl":       "http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46",
     "privilege":[ "PRIVILEGE1" "PRIVILEGE2"     ],
     "unionid": "o6_bmasdasdsad6_2sgVt7hMZOPfL"
 }
 #+end_src
 | 参数       | 描述                                                                                                                                                                |
 | openid     | 用户的唯一标识                                                                                                                                                      |
 | nickname   | 用户昵称                                                                                                                                                            |
 | sex        | 用户的性别，值为 1 时是男性，值为 2 时是女性，值为 0 时是未知                                                                                                       |
 | province   | 用户个人资料填写的省份                                                                                                                                              |
 | city       | 普通用户个人资料填写的城市                                                                                                                                          |
 | country    | 国家，如中国为 CN                                                                                                                                                   |
 | headimgurl | 用户头像，最后一个数值代表正方形头像大小（有 0、46、64、96、132 数值可选，0代表 640*640 正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像 URL 将失效。 |
 | privilege  | 用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）                                                                                                            |
 | unionid    | 只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。                                                                                                        |
 错误时微信会返回 JSON 数据包如下（示例为 openid 无效）:

 #+begin_src js
 {"errcode":40003,"errmsg":" invalid openid "}
 #+end_src

*** 检验授权凭证（access_token）是否有效

 请求方法

 #+begin_src js
 http：GET（请使用 https 协议） https://api.weixin.qq.com/sns/auth?access_token=ACCESS_TOKEN&openid=OPENID
 #+end_src

 参数说明

 |参数|	描述
 |access_token|	网页授权接口调用凭证,注意：此 access_token 与基础支持的 access_token 不同
 |openid|	用户的唯一标识
 返回说明
 正确的 JSON 返回结果：

 #+begin_src js
 { "errcode":0,"errmsg":"ok"}
 #+end_src
 错误时的 JSON 返回示例：
 #+begin_src js
 { "errcode":40003,"errmsg":"invalid openid"}
 #+end_src
** 微信网页开发样式库
   WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页
   和微信小程序量身设计，令用户的使用感知更加统一。在微信网页或小程序中使用 WeUI，
   有如下优势：

   http://weui.io 
** 微信 JS-SDK 说明文档
*** 概述
 微信 JS-SDK 是微信公众平台 面向网页开发者提供的基于微信内的网页开发工具包。

 通过使用微信 JS-SDK，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机
 系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微
 信用户提供更优质的网页体验。

 此文档面向网页开发者介绍微信 JS-SDK 如何使用及相关注意事项。


 JSSDK 使用步骤
**** 步骤一：绑定域名
  先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS 接口安全域名”。

  备注：登录后可在“开发者中心”查看对应的接口权限。
**** 步骤二：引入 JS 文件
 
  在需要调用 JS 接口的页面引入如下 JS 文件，（支持 https）：
  http://res.wx.qq.com/open/js/jweixin-1.4.0.js

  如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：
  http://res2.wx.qq.com/open/js/jweixin-1.4.0.js （支持 https）。

  备注：支持使用 AMD/CMD 标准模块加载方法加载
**** 步骤三：通过 config 接口注入权限验证配置
  所有需要使用 JS-SDK 的页面必须先注入配置信息，否则将无法调用（同一个 url 仅需调用一次，对于变化 url 的 SPA 的 web app 可在每次 url 变化时进行调用,目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题会在 Android6.2 中修复）。

  wx.config({
      debug: true, // 开启调试模式,调用的所有 api 的返回值会在客户端 alert 出来，若要查看传入的参数，可以在 pc 端打开，参数信息会通过 log 打出，仅在 pc 端时才会打印。
      appId: '', // 必填，公众号的唯一标识
      timestamp: , // 必填，生成签名的时间戳
      nonceStr: '', // 必填，生成签名的随机串
      signature: '',// 必填，签名
      jsApiList: [] // 必填，需要使用的 JS 接口列表
  });
  签名算法见文末的附录 1，所有 JS 接口列表见文末的附录 2
**** 步骤四：通过 ready 接口处理成功验证
  wx.ready(function(){
      // config 信息验证后会执行 ready 方法，所有接口调用都必须在 config 接口获得结果之后，config 是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在 ready 函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在 ready 函数中。
  });
**** 步骤五：通过 error 接口处理失败验证
  wx.error(function(res){
      // config 信息验证失败会执行 error 函数，如签名过期导致验证失败，具体错误信息可以打开 config 的 debug 模式查看，也可以在返回的 res 参数中查看，对于 SPA 可以在这里更新签名。
  });
*** 接口调用说明
  所有接口通过 wx 对象(也可使用 jWeixin 对象)来调用，参数是一个对象，除了每个接口本身需要传的参数之外，还有以下通用参数：

  1.success：接口调用成功时执行的回调函数。

  2.fail：接口调用失败时执行的回调函数。

  3.complete：接口调用完成时执行的回调函数，无论成功或失败都会执行。

  4.cancel：用户点击取消时的回调函数，仅部分有用户取消操作的 api 才会用到。

  5.trigger: 监听 Menu 中的按钮点击时触发的方法，该方法仅支持 Menu 中的相关接口。

  备注：不要尝试在 trigger 中使用 ajax 异步请求修改本次分享的内容，因为客户端分享操作是一个同步操作，这时候使用 ajax 的回包会还没有返回。

  以上几个函数都带有一个参数，类型为对象，其中除了每个接口本身返回的数据之外，还有一个通用属性 errMsg，其值格式如下：

  调用成功时："xxx:ok" ，其中 xxx 为调用的接口名

  用户取消时："xxx:cancel"，其中 xxx 为调用的接口名

  调用失败时：其值为具体错误信息
*** 基础接口

  判断当前客户端版本是否支持指定 JS 接口
  wx.checkJsApi({
      jsApiList: ['chooseImage'], // 需要检测的 JS 接口列表，所有 JS 接口列表见附录 2,
      success: function(res) {
      // 以键值对的形式返回，可用的 api 值 true，不可用为 false
      // 如：{"checkResult":{"chooseImage":true},"errMsg":"checkJsApi:ok"}
      }
  });
  备注：checkJsApi 接口是客户端 6.0.2 新引入的一个预留接口，第一期开放的接口均可不使用 checkJsApi 来检测。
*** 分享接口
  请注意，不要有诱导分享等违规行为，对于诱导分享行为将永久回收公众号接口权限，详细规则请查看：朋友圈管理常见问题

  请注意，原有的 wx.onMenuShareTimeline、wx.onMenuShareAppMessage、wx.onMenuShareQQ、wx.onMenuShareQZone 接口，即将废弃。请尽快迁移使用客户端 6.7.2 及 JSSDK 1.4.0 以上版本支持的 wx.updateAppMessageShareData、updateTimelineShareData 接口。


  自定义“分享给朋友”及“分享到 QQ”按钮的分享内容（1.4.0）
  wx.ready(function () {   //需在用户可能点击分享按钮前就先调用
      wx.updateAppMessageShareData({ 
          title: '', // 分享标题
          desc: '', // 分享描述
          link: '', // 分享链接，该链接域名或路径必须与当前页面对应的公众号 JS 安全域名一致
          imgUrl: '', // 分享图标
          success: function () {
            // 设置成功
          }
      })
  });

  自定义“分享到朋友圈”及“分享到 QQ 空间”按钮的分享内容（1.4.0）
  wx.ready(function () {      //需在用户可能点击分享按钮前就先调用
      wx.updateTimelineShareData({ 
          title: '', // 分享标题
          link: '', // 分享链接，该链接域名或路径必须与当前页面对应的公众号 JS 安全域名一致
          imgUrl: '', // 分享图标
          success: function () {
            // 设置成功
          }
      })
  });

  获取“分享到朋友圈”按钮点击状态及自定义分享内容接口（即将废弃）
  wx.onMenuShareTimeline({
      title: '', // 分享标题
      link: '', // 分享链接，该链接域名或路径必须与当前页面对应的公众号 JS 安全域名一致
      imgUrl: '', // 分享图标
      success: function () {
      // 用户点击了分享后执行的回调函数
  },

  获取“分享给朋友”按钮点击状态及自定义分享内容接口（即将废弃）
  wx.onMenuShareAppMessage({
  title: '', // 分享标题
  desc: '', // 分享描述
  link: '', // 分享链接，该链接域名或路径必须与当前页面对应的公众号 JS 安全域名一致
  imgUrl: '', // 分享图标
  type: '', // 分享类型,music、video 或 link，不填默认为 link
  dataUrl: '', // 如果 type 是 music 或 video，则要提供数据链接，默认为空
  success: function () {
  // 用户点击了分享后执行的回调函数
  }
  });

  获取“分享到 QQ”按钮点击状态及自定义分享内容接口（即将废弃）
  wx.onMenuShareQQ({
  title: '', // 分享标题
  desc: '', // 分享描述
  link: '', // 分享链接
  imgUrl: '', // 分享图标
  success: function () {
  // 用户确认分享后执行的回调函数
  },
  cancel: function () {
  // 用户取消分享后执行的回调函数
  }
  });

  获取“分享到腾讯微博”按钮点击状态及自定义分享内容接口
  wx.onMenuShareWeibo({
  title: '', // 分享标题
  desc: '', // 分享描述
  link: '', // 分享链接
  imgUrl: '', // 分享图标
  success: function () {
  // 用户确认分享后执行的回调函数
  },
  cancel: function () {
  // 用户取消分享后执行的回调函数
  }
  });

  获取“分享到 QQ 空间”按钮点击状态及自定义分享内容接口（即将废弃）
  wx.onMenuShareQZone({
  title: '', // 分享标题
  desc: '', // 分享描述
  link: '', // 分享链接
  imgUrl: '', // 分享图标
  success: function () {
  // 用户确认分享后执行的回调函数
  },
  cancel: function () {
  // 用户取消分享后执行的回调函数
  }
  });
*** 图像接口

  拍照或从手机相册中选图接口
  wx.chooseImage({
  count: 1, // 默认 9
  sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
  sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
  success: function (res) {
  var localIds = res.localIds; // 返回选定照片的本地 ID 列表，localId 可以作为 img 标签的 src 属性显示图片
  }
  });

  预览图片接口
  wx.previewImage({
  current: '', // 当前显示图片的 http 链接
  urls: [] // 需要预览的图片 http 链接列表
  });

  上传图片接口
  wx.uploadImage({
  localId: '', // 需要上传的图片的本地 ID，由 chooseImage 接口获得
  isShowProgressTips: 1, // 默认为 1，显示进度提示
  success: function (res) {
  var serverId = res.serverId; // 返回图片的服务器端 ID
  }
  });
  备注：上传图片有效期 3 天，可用微信多媒体接口下载图片到自己的服务器，此处获得的 serverId 即 media_id。


  下载图片接口
  wx.downloadImage({
  serverId: '', // 需要下载的图片的服务器端 ID，由 uploadImage 接口获得
  isShowProgressTips: 1, // 默认为 1，显示进度提示
  success: function (res) {
  var localId = res.localId; // 返回图片下载后的本地 ID
  }
  });

  获取本地图片接口
  wx.getLocalImgData({
  localId: '', // 图片的 localID
  success: function (res) {
  var localData = res.localData; // localData 是图片的 base64 数据，可以用 img 标签显示
  }
  });
  备注：此接口仅在 iOS WKWebview 下提供，用于兼容 iOS WKWebview 不支持 localId 直接显示图片的问题。具体可参考《iOS 网页开发适配指南》


  音频接口

  开始录音接口
  wx.startRecord();

  停止录音接口
  wx.stopRecord({
  success: function (res) {
  var localId = res.localId;
  }
  });

  监听录音自动停止接口
  wx.onVoiceRecordEnd({
  // 录音时间超过一分钟没有停止的时候会执行 complete 回调
  complete: function (res) {
  var localId = res.localId;
  }
  });

  播放语音接口
  wx.playVoice({
  localId: '' // 需要播放的音频的本地 ID，由 stopRecord 接口获得
  });

  暂停播放接口
  wx.pauseVoice({
  localId: '' // 需要暂停的音频的本地 ID，由 stopRecord 接口获得
  });

  停止播放接口
  wx.stopVoice({
  localId: '' // 需要停止的音频的本地 ID，由 stopRecord 接口获得
  });

  监听语音播放完毕接口
  wx.onVoicePlayEnd({
  success: function (res) {
  var localId = res.localId; // 返回音频的本地 ID
  }
  });

  上传语音接口
  wx.uploadVoice({
  localId: '', // 需要上传的音频的本地 ID，由 stopRecord 接口获得
  isShowProgressTips: 1, // 默认为 1，显示进度提示
  success: function (res) {
  var serverId = res.serverId; // 返回音频的服务器端 ID
  }
  });
  备注：上传语音有效期 3 天，可用微信多媒体接口下载语音到自己的服务器，此处获得的 serverId 即 media_id，参考文档 .目前多媒体文件下载接口的频率限制为 10000 次/天，如需要调高频率，请登录微信公众平台，在开发 - 接口权限的列表中，申请提高临时上限。




  下载语音接口
  wx.downloadVoice({
  serverId: '', // 需要下载的音频的服务器端 ID，由 uploadVoice 接口获得
  isShowProgressTips: 1, // 默认为 1，显示进度提示
  success: function (res) {
  var localId = res.localId; // 返回音频的本地 ID
  }
  });

  智能接口

  识别音频并返回识别结果接口
  wx.translateVoice({
  localId: '', // 需要识别的音频的本地 Id，由录音相关接口获得
  isShowProgressTips: 1, // 默认为 1，显示进度提示
  success: function (res) {
  alert(res.translateResult); // 语音识别的结果
  }
  });

  设备信息

  获取网络状态接口
  wx.getNetworkType({
  success: function (res) {
  var networkType = res.networkType; // 返回网络类型 2g，3g，4g，wifi
  }
  });

  地理位置

  使用微信内置地图查看位置接口
  wx.openLocation({
  latitude: 0, // 纬度，浮点数，范围为 90 ~ -90
  longitude: 0, // 经度，浮点数，范围为 180 ~ -180。
  name: '', // 位置名
  address: '', // 地址详情说明
  scale: 1, // 地图缩放级别,整形值,范围从 1~28。默认为最大
  infoUrl: '' // 在查看位置界面底部显示的超链接,可点击跳转
  });

  获取地理位置接口
  wx.getLocation({
  type: 'wgs84', // 默认为 wgs84 的 gps 坐标，如果要返回直接给 openLocation 用的火星坐标，可传入'gcj02'
  success: function (res) {
  var latitude = res.latitude; // 纬度，浮点数，范围为 90 ~ -90
  var longitude = res.longitude; // 经度，浮点数，范围为 180 ~ -180。
  var speed = res.speed; // 速度，以米/每秒计
  var accuracy = res.accuracy; // 位置精度
  }
  });

  摇一摇周边

  开启查找周边 ibeacon 设备接口
  wx.startSearchBeacons({
  ticket:"",  //摇周边的业务 ticket, 系统自动添加在摇出来的页面链接后面
  complete:function(argv){
  //开启查找完成后的回调函数
  }
  });
  备注：如需接入摇一摇周边功能，请参考：申请开通摇一摇周边


  关闭查找周边 ibeacon 设备接口
  wx.stopSearchBeacons({
  complete:function(res){
  //关闭查找完成后的回调函数
  }
  });

  监听周边 ibeacon 设备接口
  wx.onSearchBeacons({
  complete:function(argv){
  //回调函数，可以数组形式取得该商家注册的在周边的相关设备列表
  }
  });
  备注：上述摇一摇周边接口使用注意事项及更多返回结果说明，请参考：摇一摇周边获取设备信息


  界面操作

  关闭当前网页窗口接口
  wx.closeWindow();

  批量隐藏功能按钮接口
  wx.hideMenuItems({
  menuList: [] // 要隐藏的菜单项，只能隐藏“传播类”和“保护类”按钮，所有 menu 项见附录 3
  });

  批量显示功能按钮接口
  wx.showMenuItems({
  menuList: [] // 要显示的菜单项，所有 menu 项见附录 3
  });

  隐藏所有非基础按钮接口
  wx.hideAllNonBaseMenuItem();
  // “基本类”按钮详见附录 3

  显示所有功能按钮接口
  wx.showAllNonBaseMenuItem();

  微信扫一扫

  调起微信扫一扫接口
  wx.scanQRCode({
  needResult: 0, // 默认为 0，扫描结果由微信处理，1则直接返回扫描结果，
  scanType: ["qrCode","barCode"], // 可以指定扫二维码还是一维码，默认二者都有
  success: function (res) {
  var result = res.resultStr; // 当 needResult 为 1 时，扫码返回的结果
  }
  });

  微信小店

  跳转微信商品页接口
  wx.openProductSpecificView({
  productId: '', // 商品 id
  viewType: '' // 0.默认值，普通商品详情页 1.扫一扫商品详情页 2.小店商品详情页
  });
  <span id = "53>

  微信卡券
  微信卡券接口中使用的签名凭证 api_ticket，与步骤三中 config 使用的签名凭证 jsapi_ticket 不同，开发者在调用微信卡券 JS-SDK 的过程中需依次完成两次不同的签名，并确保凭证的缓存。


  获取 api_ticket
  api_ticket 是用于调用微信卡券 JS API 的临时票据，有效期为 7200 秒，通过 access_token 来获取。

  开发者注意事项：

  1.此用于卡券接口签名的 api_ticket 与步骤三中通过 config 接口注入权限验证配置使用的 jsapi_ticket 不同。

  2.由于获取 api_ticket 的 api 调用次数非常有限，频繁刷新 api_ticket 会导致 api 调用受限，影响自身业务，开发者需在自己的服务存储与更新 api_ticket。

  接口调用请求说明

  http 请求方式: GET
  https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&type=wx_card
  参数说明

  参数	是否必须	说明
  access_token	是	接口调用凭证
  返回数据

  数据示例：

  {
  "errcode":0,
  "errmsg":"ok",
  "ticket":"bxLdikRXVbTPdHSM05e5u5sUoXNKdvsdshFKA",
  "expires_in":7200
  }
  参数名	描述
  errcode	错误码
  errmsg	错误信息
  ticket	api_ticket，卡券接口中签名所需凭证
  expires_in	有效时间

  拉取适用卡券列表并获取用户选择信息
  wx.chooseCard({
  shopId: '', // 门店 Id
  cardType: '', // 卡券类型
  cardId: '', // 卡券 Id
  timestamp: 0, // 卡券签名时间戳
  nonceStr: '', // 卡券签名随机串
  signType: '', // 签名方式，默认'SHA1'
  cardSign: '', // 卡券签名
  success: function (res) {
  var cardList= res.cardList; // 用户选中的卡券列表信息
  }
  });
  参数名	必填	类型	示例值	描述
  shopId	否	string(24)	1234	门店 ID。shopID 用于筛选出拉起带有指定 location_list(shopID)的卡券列表，非必填。
  cardType	否	string(24)	GROUPON	卡券类型，用于拉起指定卡券类型的卡券列表。当 cardType 为空时，默认拉起所有卡券的列表，非必填。
  cardId	否	string(32)	p1Pj9jr90_SQRaVqYI239Ka1erk	卡券 ID，用于拉起指定 cardId 的卡券列表，当 cardId 为空时，默认拉起所有卡券的列表，非必填。
  timestamp	是	string(32)	14300000000	时间戳。
  nonceStr	是	string(32)	sduhi123	随机字符串。
  signType	是	string(32)	SHA1	签名方式，目前仅支持 SHA1
  cardSign	是	string(64)	abcsdijcous123	签名。
  cardSign 详见附录 4。

  开发者特别注意：签名错误会导致拉取卡券列表异常为空，请仔细检查参与签名的参数有效性。

  特别提醒

  拉取列表仅与用户本地卡券有关，拉起列表异常为空的情况通常有三种：签名错误、时间戳无效、筛选机制有误。请开发者依次排查定位原因。


  批量添加卡券接口
  wx.addCard({
  cardList: [{
  cardId: '',
  cardExt: ''
  }], // 需要添加的卡券列表
  success: function (res) {
  var cardList = res.cardList; // 添加的卡券列表信息
  }
  });
  cardExt 详见附录 4，开发者若调用接口报签名错误、已领完等异常情况可以参照：卡券签名错误排查方法


  查看微信卡包中的卡券接口
  wx.openCard({
  cardList: [{
  cardId: '',
  code: ''
  }]// 需要打开的卡券列表
  });

  微信支付

  发起一个微信支付请求
  wx.chooseWXPay({
  timestamp: 0, // 支付签名时间戳，注意微信 jssdk 中的所有使用 timestamp 字段均为小写。但最新版的支付后台生成签名使用的 timeStamp 字段名需大写其中的 S 字符
  nonceStr: '', // 支付签名随机串，不长于 32 位
  package: '', // 统一支付接口返回的 prepay_id 参数值，提交格式如：prepay_id=\*\*\*）
  signType: '', // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
  paySign: '', // 支付签名
  success: function (res) {
  // 支付成功后的回调函数
  }
  });
  备注：prepay_id 通过微信支付统一下单接口拿到，paySign 采用统一的微信支付 Sign 签名生成方法，注意这里 appId 也要参与签名，appId 与 config 中传入的 appId 一致，即最后参与签名的参数有 appId, timeStamp, nonceStr, package, signType。

  微信支付开发文档：https://pay.weixin.qq.com/wiki/doc/api/index.html


  快速输入

  共享收货地址接口
  wx.openAddress({
  success: function (res) {
  var userName = res.userName; // 收货人姓名
  var postalCode = res.postalCode; // 邮编
  var provinceName = res.provinceName; // 国标收货地址第一级地址（省）
  var cityName = res.cityName; // 国标收货地址第二级地址（市）
  var countryName = res.countryName; // 国标收货地址第三级地址（国家）
  var detailInfo = res.detailInfo; // 详细收货地址信息
  var nationalCode = res.nationalCode; // 收货地址国家码
  var telNumber = res.telNumber; // 收货人手机号码
  }
  });
  备注：

  微信地址共享使用的数据字段包括：

  收货人姓名
  地区，省市区三级
  详细地址
  邮编
  联系电话
  其中，地区对应是国标三级地区码，如“广东省-广州市-天河区”，对应的邮编是是 510630。详情参考链接：http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201401/t20140116_501070.html

  附录 1-JS-SDK 使用权限签名算法
  jsapi_ticket

  生成签名之前必须先了解一下 jsapi_ticket，jsapi_ticket 是公众号用于调用微信 JS 接口的临时票据。正常情况下，jsapi_ticket 的有效期为 7200 秒，通过 access_token 来获取。由于获取 jsapi_ticket 的 api 调用次数非常有限，频繁刷新 jsapi_ticket 会导致 api 调用受限，影响自身业务，开发者必须在自己的服务全局缓存 jsapi_ticket 。

  1.参考以下文档获取 access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）：../15/54ce45d8d30b6bf6758f68d2e95bc627.html

  2.用第一步拿到的 access_token 采用 http GET 方式请求获得 jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）：https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&type=jsapi

  成功返回如下 JSON：

  {
  "errcode":0,
  "errmsg":"ok",
  "ticket":"bxLdikRXVbTPdHSM05e5u5sUoXNKd8-41ZO3MhKoyN5OfkWITDGgnr2fwJ0m9E8NYzWKVZvdVtaUgWvsdshFKA",
  "expires_in":7200
  }
  获得 jsapi_ticket 之后，就可以生成 JS-SDK 权限验证的签名了。

  签名算法

  签名生成规则如下：参与签名的字段包括 noncestr（随机字符串）, 有效的 jsapi_ticket, timestamp（时间戳）, url（当前网页的 URL，不包含#及其后面部分） 。对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即 key1=value1&key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。

  即 signature=sha1(string1)。 示例：

  noncestr=Wm3WZYTPz0wzccnW
  jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg
  timestamp=1414587457
  url=http://mp.weixin.qq.com?params=value
  步骤 1. 对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即 key1=value1&key2=value2…）拼接成字符串 string1：

  jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg&noncestr=Wm3WZYTPz0wzccnW&timestamp=1414587457&url=http://mp.weixin.qq.com?params=value
  步骤 2. 对 string1 进行 sha1 签名，得到 signature：

  0f9de62fce790f9a083d5c99e95740ceb90c27ed
  注意事项

  1.签名用的 noncestr 和 timestamp 必须与 wx.config 中的 nonceStr 和 timestamp 相同。

  2.签名用的 url 必须是调用 JS 接口页面的完整 URL。

  3.出于安全考虑，开发者必须在服务器端实现签名的逻辑。

  如出现 invalid signature 等错误详见附录 5 常见错误及解决办法。


  附录 2-所有 JS 接口列表
  版本 1.4.0 接口

  updateAppMessageShareData

  updateTimelineShareData

  onMenuShareTimeline（即将废弃）

  onMenuShareAppMessage（即将废弃）

  onMenuShareQQ（即将废弃）

  onMenuShareWeibo

  onMenuShareQZone

  startRecord

  stopRecord

  onVoiceRecordEnd

  playVoice

  pauseVoice

  stopVoice

  onVoicePlayEnd

  uploadVoice

  downloadVoice

  chooseImage

  previewImage

  uploadImage

  downloadImage

  translateVoice

  getNetworkType

  openLocation

  getLocation

  hideOptionMenu

  showOptionMenu

  hideMenuItems

  showMenuItems

  hideAllNonBaseMenuItem

  showAllNonBaseMenuItem

  closeWindow

  scanQRCode

  chooseWXPay

  openProductSpecificView

  addCard

  chooseCard

  openCard


  附录 3-所有菜单项列表
  基本类

  举报: "menuItem:exposeArticle"

  调整字体: "menuItem:setFont"

  日间模式: "menuItem:dayMode"

  夜间模式: "menuItem:nightMode"

  刷新: "menuItem:refresh"

  查看公众号（已添加）: "menuItem:profile"

  查看公众号（未添加）: "menuItem:addContact"

  传播类

  发送给朋友: "menuItem:share:appMessage"

  分享到朋友圈: "menuItem:share:timeline"

  分享到 QQ: "menuItem:share:qq"

  分享到 Weibo: "menuItem:share:weiboApp"

  收藏: "menuItem:favorite"

  分享到 FB: "menuItem:share:facebook"

  分享到 QQ 空间/menuItem:share:QZone

  保护类

  编辑标签: "menuItem:editTag"

  删除: "menuItem:delete"

  复制链接: "menuItem:copyUrl"

  原网页: "menuItem:originPage"

  阅读模式: "menuItem:readMode"

  在 QQ 浏览器中打开: "menuItem:openWithQQBrowser"

  在 Safari 中打开: "menuItem:openWithSafari"

  邮件: "menuItem:share:email"

  一些特殊公众号: "menuItem:share:brand"


  附录 4-卡券扩展字段及签名生成算法
  JSSDK 使用者请读这里，JSAPI 用户可以跳过

  卡券签名和 JSSDK 的签名完全独立，两者的算法和意义完全不同，请不要混淆。JSSDK 的签名是使用所有 JS 接口都需要走的一层鉴权，用以标识调用者的身份，和卡券本身并无关系。其次，卡券的签名考虑到协议的扩展性和简单的防数据擅改，设计了一套独立的签名协议。另外由于历史原因，卡券的 JS 接口先于 JSSDK 出现，当时的 JSAPI 并没有鉴权体系，所以在卡券的签名里也加上了 appsecret/api_ticket 这些身份信息，希望开发者理解。

  卡券 api_ticket

  卡券 api_ticket 是用于调用卡券相关接口的临时票据，有效期为 7200 秒，通过 access_token 来获取。这里要注意与 jsapi_ticket 区分开来。由于获取卡券 api_ticket 的 api 调用次数非常有限，频繁刷新卡券 api_ticket 会导致 api 调用受限，影响自身业务，开发者必须在自己的服务全局缓存卡券 api_ticket 。

  1.参考以下文档获取 access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）：../15/54ce45d8d30b6bf6758f68d2e95bc627.html

  2.用第一步拿到的 access_token 采用 http GET 方式请求获得卡券 api_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存卡券 api_ticket）：https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&type=wx_card

  卡券扩展字段 cardExt 说明

  cardExt 本身是一个 JSON 字符串，是商户为该张卡券分配的唯一性信息，包含以下字段：

  字段	是否必填	是否参与签名	说明
  code	否	是	指定的卡券 code 码，只能被领一次。自定义 code 模式的卡券必须填写，非自定义 code 和预存 code 模式的卡券不必填写。详情见： 是否自定义 code 码
  openid	否	是	指定领取者的 openid，只有该用户能领取。bind_openid 字段为 true 的卡券必须填写，bind_openid 字段为 false 不必填写。
  timestamp	是	是	时间戳，商户生成从 1970 年 1 月 1 日 00:00:00 至今的秒数,即当前的时间,且最终需要转换为字符串形式;由商户生成后传入,不同添加请求的时间戳须动态生成，若重复将会导致领取失败！。
  nonce_str	否	是	随机字符串，由开发者设置传入， 加强安全性（若不填写可能被重放请求） 。随机字符串，不长于 32 位。推荐使用大小写字母和数字，不同添加请求的 nonce 须动态生成，若重复将会导致领取失败。
  fixed_begintimestamp	否	否	卡券在第三方系统的实际领取时间，为东八区时间戳（UTC+8,精确到秒）。当卡券的有效期类型为 DAT E_TYPE_FIX_TERM 时专用，标识卡券的实际生效时间，用于解决商户系统内起始时间和领取时间不同步的问题。
  outer_str	否	否	领取渠道参数，用于标识本次领取的渠道值。
  signature	是	-	签名，商户将接口列表中的参数按照指定方式进行签名,签名方式使用 SHA1,具体签名方案参见下文;由商户按照规范签名后传入。
  签名说明

  1.将 api_ticket、timestamp、card_id、code、openid、nonce_str 的 value 值进行字符串的字典序排序。

  2.将所有参数字符串拼接成一个字符串进行 sha1 加密，得到 signature。

  3.signature 中的 timestamp，nonce 字段和 card_ext 中的 timestamp，nonce_str 字段必须保持一致。

  4.code=1434008071，timestamp=1404896688，card_id=pjZ8Yt1XGILfi-FUsewpnnolGgZk， api_ticket=ojZ8YtyVyr30HheH3CM73y7h4jJE ，nonce_str=123 则 signature=sha1(12314048966881434008071ojZ8YtyVyr30HheH3CM73y7h4jJEpjZ8Yt1XGILfi-FUsewpnnolGgZk)=f137ab68b7f8112d20ee528ab6074564e2796250。

  强烈建议开发者使用卡券资料包中的签名工具 SDK 进行签名或使用 debug 工具进行校验：http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=cardsign

  卡券签名 cardSign 说明

  1.将 api_ticket、appid、location_id、timestamp、nonce_str、card_id、card_type 的 value 值进行字符串的字典序排序。

  2.将所有参数字符串拼接成一个字符串进行 sha1 加密，得到 cardSign。


  附录 5-常见错误及解决方法
  调用 config 接口的时候传入参数 debug: true 可以开启 debug 模式，页面会 alert 出错误信息。以下为常见错误及解决方法：

  1.invalid url domain 当前页面所在域名与使用的 appid 没有绑定，请确认正确填写绑定的域名，仅支持 80（http）和 443（https）两个端口，因此不需要填写端口号（一个 appid 可以绑定三个有效域名，见 ]目录 1.1.1）。

  2.invalid signature 签名错误。建议按如下顺序检查：

  1.确认签名算法正确，可用 http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign 页面工具进行校验。

  2.确认 config 中 nonceStr（js 中驼峰标准大写 S）, timestamp 与用以签名中的对应 noncestr, timestamp 一致。

  3.确认 url 是页面完整的 url(请在当前页面 alert(location.href.split('#')[0])确认)，包括'http(s)://'部分，以及'？'后面的 GET 参数部分,但不包括'#'hash 后面的部分。

  4.确认 config 中的 appid 与用来获取 jsapi_ticket 的 appid 一致。

  5.确保一定缓存 access_token 和 jsapi_ticket。

  6.确保你获取用来签名的 url 是动态获取的，动态页面可参见实例代码中 php 的实现方式。如果是 html 的静态页面在前端通过 ajax 将 url 传到后台签名，前端需要用 js 获取当前页面除去'#'hash 部分的链接（可用 location.href.split('#')[0]获取,而且需要 encodeURIComponent），因为页面一旦分享，微信客户端会在你的链接末尾加入其它参数，如果不是动态获取当前链接，将导致分享后的页面签名失败。

  3.the permission value is offline verifying 这个错误是因为 config 没有正确执行，或者是调用的 JSAPI 没有传入 config 的 jsApiList 参数中。建议按如下顺序检查：

  1.确认 config 正确通过。

  2.如果是在页面加载好时就调用了 JSAPI，则必须写在 wx.ready 的回调中。

  3.确认 config 的 jsApiList 参数包含了这个 JSAPI。

  4.permission denied 该公众号没有权限使用这个 JSAPI，或者是调用的 JSAPI 没有传入 config 的 jsApiList 参数中（部分接口需要认证之后才能使用）。

  5.function not exist 当前客户端版本不支持该接口，请升级到新版体验。

  6.为什么 6.0.1 版本 config:ok，但是 6.0.2 版本之后不 ok（因为 6.0.2 版本之前没有做权限验证，所以 config 都是 ok，但这并不意味着你 config 中的签名是 OK 的，请在 6.0.2 检验是否生成正确的签名以保证 config 在高版本中也 ok。）

  7.在 iOS 和 Android 都无法分享（请确认公众号已经认证，只有认证的公众号才具有分享相关接口权限，如果确实已经认证，则要检查监听接口是否在 wx.ready 回调函数中触发）

  8.服务上线之后无法获取 jsapi_ticket，自己测试时没问题。（因为 access_token 和 jsapi_ticket 必须要在自己的服务器缓存，否则上线后会触发频率限制。请确保一定对 token 和 ticket 做缓存以减少 2 次服务器请求，不仅可以避免触发频率限制，还加快你们自己的服务速度。目前为了方便测试提供了 1w 的获取量，超过阀值后，服务将不再可用，请确保在服务上线前一定全局缓存 access_token 和 jsapi_ticket，两者有效期均为 7200 秒，否则一旦上线触发频率限制，服务将不再可用）。

  9.uploadImage 怎么传多图（目前只支持一次上传一张，多张图片需等前一张图片上传之后再调用该接口）

  10.没法对本地选择的图片进行预览（chooseImage 接口本身就支持预览，不需要额外支持）

  11.通过 a 链接(例如先通过微信授权登录)跳转到 b 链接，invalid signature 签名失败（后台生成签名的链接为使用 jssdk 的当前链接，也就是跳转后的 b 链接，请不要用微信登录的授权链接进行签名计算，后台签名的 url 一定是使用 jssdk 的当前页面的完整 url 除去'#'部分）

  12.出现 config:fail 错误（这是由于传入的 config 参数不全导致，请确保传入正确的 appId、timestamp、nonceStr、signature 和需要使用的 jsApiList）

  13.如何把 jsapi 上传到微信的多媒体资源下载到自己的服务器（请参见文档中 uploadVoice 和 uploadImage 接口的备注说明）

  14.Android 通过 jssdk 上传到微信服务器，第三方再从微信下载到自己的服务器，会出现杂音（微信团队已经修复此问题，目前后台已优化上线）

  15.绑定父级域名，是否其子域名也是可用的（是的，合法的子域名在绑定父域名之后是完全支持的）

  16.在 iOS 微信 6.1 版本中，分享的图片外链不显示，只能显示公众号页面内链的图片或者微信服务器的图片，已在 6.2 中修复

  17.是否需要对低版本自己做兼容（jssdk 都是兼容低版本的，不需要第三方自己额外做更多工作，但有的接口是 6.0.2 新引入的，只有新版才可调用）

  18.该公众号支付签名无效，无法发起该笔交易（请确保你使用的 jweixin.js 是官方线上版本，不仅可以减少用户流量，还有可能对某些 bug 进行修复，拷贝到第三方服务器中使用，官方将不对其出现的任何问题提供保障，具体支付签名算法可参考 JSSDK 微信支付一栏）

  19.目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题已在 Android6.2 中修复

  20.uploadImage 在 chooseImage 的回调中有时候 Android 会不执行，Android6.2 会解决此问题，若需支持低版本可以把调用 uploadImage 放在 setTimeout 中延迟 100ms 解决

  21.require subscribe 错误说明你没有订阅该测试号，该错误仅测试号会出现

  22.getLocation 返回的坐标在 openLocation 有偏差，因为 getLocation 返回的是 gps 坐标，openLocation 打开的腾讯地图为火星坐标，需要第三方自己做转换，6.2 版本开始已经支持直接获取火星坐标

  23.查看公众号（未添加）: "menuItem:addContact"不显示，目前仅有从公众号传播出去的链接才能显示，来源必须是公众号

  24.ICP 备案数据同步有一天延迟，所以请在第二日绑定


  附录 6-DEMO 页面和示例代码
  DEMO 页面：

  http://demo.open.weixin.qq.com/jssdk



  示例代码：

  http://demo.open.weixin.qq.com/jssdk/sample.zip

  备注：链接中包含 php、java、nodejs 以及 python 的示例代码供第三方参考，第三方切记要对获取的 accesstoken 以及 jsapi_ticket 进行缓存以确保不会触发频率限制。


  附录 7-问题反馈
  邮箱地址：weixin-open@qq.com

  邮件主题：【微信 JS-SDK 反馈】

  邮件内容说明：

  用简明的语言描述问题所在，并交代清楚遇到该问题的场景，可附上截屏图片，微信团队会尽快处理你的反馈。
** 微信 web 开发者工具
*** 概述
    为帮助开发者更方便、更安全地开发和调试基于微信的网页，我们推出了 web 开发者工具。
    它是一个桌面应用，通过模拟微信客户端的表现，使得开发者可以使用这个工具方便地在
    PC 或者 Mac 上进行开发和调试工作。

 你可以：
 1.使用自己的微信号来调试微信网页授权
 2.调试、检验页面的 JS-SDK 相关功能与权限，模拟大部分 SDK 的输入和输出
 3.使用基于 weinre 的移动调试功能，支持 X5 Blink 内核的远程调试
 4.利用集成的 Chrome DevTools 协助开发
 该工具界面主要由几大部分组成，如下图所示：

 顶部菜单栏是刷新、后退、选中地址栏等动作的统一入口，以及微信客户端版本的模拟设
 置页。左侧是微信的 webview 模拟器，可以直接操作网页，模拟用户真实行为。右侧上方
 是地址栏，用于输入待调试的页面链接，以及清除缓存按钮。右侧下方是相关的请求和返
 回结果，以及调试界面和登录按钮。

*** 调试微信网页授权
  之前在开发基于微信的网页授权的功能时，开发者通常需要手机上输入 URL 进而获取用
  户信息，从而进行开发和调试工作，可是因为手机的诸多限制，这个过程很不方便。 通
  过使用微信 web 开发者工具，从此开发者可以直接在 PC 或者 Mac 上进行这种调试了。
  具体操作步骤为：

  
**** 1.开发者可以在调试器中点击“登录”，使用手机微信扫码登录，从而使用真实的用户身
  份（支持测试号）来开发和调试微信网页授权。请确认手机登录页，绑定的公众号为“微
  信 web 开发者工具”，如下图所示：

**** 2.为了保证开发者身份信息的安全，对于希望调试的公众号，我们要求开发者微信号与之
     建立绑定关系。具体操作为：公众号登录管理后台，启用开发者中心，在开发者工
     具——web 开发者工具页面，向开发者微信号发送绑定邀请。绑定页面如下图所示：

**** 3.开发者在手机微信上接受邀请，即可完成绑定。每个公众号最多可同时绑定 10 个开发
     者微信号。邀请确认页面如下图所示：

     
**** 4.完成登录和绑定后，开发者就可以开始调试微信网页授权了，注意只能调试自己绑定过
  的公众号：

  非静默授权的 URL 样例：
  https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx841a97238d9e17b2&redirect_uri=http://cps.dianping.com/weiXinRedirect&response_type=code&scope=snsapi_userinfo

  &state=type%3Dquan%2Curl%3Dhttp%3A%2F%2Fmm.dianping.com%2Fweixin%2Faccount%2Fhome

  在微信 web 开发者工具中打开类似的授权页 URL（样例不可直接使用，请更换为绑定完
  成的公众号授权页 URL），webview 模拟器显示效果如图：

  点击“确认登录”即可带着用户信息跳转到第三方页面，很方便的进行后续的开发和调试。

  静默授权的 URL 样例：
  https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx841a97238d9e17b2&redirect_uri=http://cps.dianping.com/weiXinRedirect&response_type=code&scope=snsapi_base

  &state=type%3Dquan%2Curl%3Dhttp%3A%2F%2Fmm.dianping.com%2Fweixin%2Faccount%2Fhome

  在微信 web 开发者工具中打开类似的授权页 URL（样例不可直接使用，请更换为绑定完成的公众号授权页 URL）则会自动跳转到第三方页面。

  注意：如果使用了代理，需代理本身支持 https 直连，才能调试 https 页面。

*** 模拟 JSSDK 权限校验

  通过 web 开发者工具，可以模拟 JSSDK 在微信客户端中的请求，并直观地看到鉴权结果
  和 log。以微信 JSSDK DEMO 页面为例：

  http://demo.open.weixin.qq.com/jssdk

  在调试器中打开该 URL，可以方便地在右侧的 JS-SDK Tab 中看到当前页面 wx.config
  的校验情况和 JSSDK 的调用 log。 如下是校验通过的页面：



  如下是校验未通过的页面：



  在“权限列表” Tab 中，可以查询到当前页面拥有权限的 JS-SDK 列表：



  结合左侧的微信 Webview 模拟器，可以直观地调试 JSSDK 的效果，如使用微信 web 开
  发者工具调试卡券 JSSDK Demo：

  http://203.195.235.76:8080/jssdk/wxcardDemo.php

  注意：0.7.0 及以后版本的微信 web 开发者工具支持卡券 JSSDK 的调试，但对于希望调试的卡券公众号，我们要求开发者微信号与之建立绑定关系，绑定流程同授权登录一致。


*** 移动调试

  移动端网页的表现，通常和桌面浏览器上有所区别，包括样式的呈现、脚本的逻辑等等，这会给开发者带来一定的困扰。现在，微信安卓客户端 webview 已经开始全面升级至 X5 Blink 内核，新的内核无论在渲染能力、API 支持还是在开发辅助上都有很大进步。通过微信 web 开发者工具中的远程调试功能，实时映射手机屏幕到微信 web 开发者工具上，将帮助开发者更高效地调试 X5 Blink 内核的网页，具体步骤如下：

  （1）准备工作

  安装 0.5.0 或以上版本的微信 web 开发者工具
  确认移动设备是否支持远程调试功能
  打开微信 web 开发者工具，选择“移动调试”tab，点击验证移动设备是否支持。随后使用移动设备扫描弹出的二维码，在设备上即可获得支持信息。

  打开移动设备中的 USB 调试功能
  1.打开移动设备，进入“设置”->“开发人员选项”

  2.勾选“USB 调试功能”



  需要注意的是，Android 4.2 之后的设备，开发人员选项默认是隐藏的，通过以下步骤可以打开：

  1.打开移动设备，进入“设置”->“关于手机”

  2.找到并单击“内部版本号”7 次

  安装移动设备 USB 驱动
  通常开发者可以在移动设备厂商的官网中下载到相关驱动，或者使用腾讯手机管家来安装设备驱动。

  打开 X5 Blink 内核的 inspector 功能
  打开微信 web 开发者工具，选择“移动调试”tab ，使用设备扫描“调试步骤”中的二维码。

  如下图，勾选“是否打开 TBS 内核 Inspector 调试功能”，并重启微信。



  （2）开始调试

  使用 USB 数据线连接移动设备与 PC 或者 Mac 后，点击打开微信 web 开发者工具“移动调试”tab，选择 X5 Blink 调试功能，将会打开一个新窗口，在微信中访问任意网页即可开始调试。关于 X5 Blink 内核更多信息，可以查看官网介绍。

  在所有准备工作都完成的情况下，窗口中可以看到当前设备的基本信息：



  点击任意页面的“inspect”，打开新窗口，开发者会看到熟悉的调试界面：



  点击上图右上角的“手机”图标，将启用屏幕映射功能：



  微信 web 开发者工具集成的移动调试功能，基于 weinre 并做了一些改进，相比直接使用 weinre 有两个优点：

  1.无须手工在页面中加入 weinre 调试脚本

  2.可以在 weinre 的网络请求页卡中，看到完整的 http 请求 log，非局限于 ajax 请求

  如下图所示：



  注意，移动调试功能暂不支持 https。
*** Chrome DevTools

  微信 web 开发者工具集成了 Chrome DevTools。同之前在 PC 上的调试体验一致，可以快速上手。

  如下图所示：

  #下载地址

  最新版本： (2016.05.19) 0.7.0

  更新内容：

  1.新增对卡券 JSSDK 的调试支持

  2.修复个别情况下网络出错的问题

  3.修复个别情况下 JSSDK 鉴权失败的问题

  4.其他体验优化以及 bug 修复

* 用户管理
** 用户标签管理
开发者可以使用用户标签管理的相关接口，实现对公众号的标签进行创建、查询、修改、删除等操作，也可以对用户进行打标签、取消标签等操作。

标签管理

1. 创建标签

一个公众号，最多可以创建 100 个标签。

接口调用请求说明

http 请求方式：POST（请使用 https 协议）
https://api.weixin.qq.com/cgi-bin/tags/create?access_token=ACCESS_TOKEN
POST 数据格式：JSON 
POST 数据示例：

{   "tag" : {     "name" : "广东"//标签名   } }
参数说明

参数	说明
access_token	调用接口凭据
name	标签名（30 个字符以内）
返回说明（正常时返回的 json 数据包示例）

{   "tag":{ "id":134,//标签 id "name":"广东"   } }
返回参数说明

参数	说明
id	标签 id，由微信分配
name	标签名，UTF8 编码
错误码说明

错误码	说明
-1	系统繁忙
45157	标签名非法，请注意不能和其他标签重名
45158	标签名长度超过 30 个字节
45056	创建的标签数过多，请注意不能超过 100 个
2. 获取公众号已创建的标签

接口调用请求说明

http 请求方式：GET（请使用 https 协议） 
https://api.weixin.qq.com/cgi-bin/tags/get?access_token=ACCESS_TOKEN
返回说明

{   
"tags":[{       
    "id":1,       
    "name":"每天一罐可乐星人",      
    "count":0 //此标签下粉丝数
},
{   
    "id":2,   
    "name":"星标组",   
    "count":0
},
{   
    "id":127,  
    "name":"广东",  
    "count":5 
 }   
] }
3. 编辑标签

接口调用请求说明

http 请求方式：POST（请使用 https 协议）
https://api.weixin.qq.com/cgi-bin/tags/update?access_token=ACCESS_TOKEN
POST 数据格式：JSON 
POST 数据例子：

{   "tag" : {     "id" : 134,     "name" : "广东人"   } }
返回说明

{   "errcode":0,   "errmsg":"ok" }
错误码说明

错误码	说明
-1	系统繁忙
45157	标签名非法，请注意不能和其他标签重名
45158	标签名长度超过 30 个字节
45058	不能修改 0/1/2 这三个系统默认保留的标签
4. 删除标签

请注意，当某个标签下的粉丝超过 10w 时，后台不可直接删除标签。此时，开发者可以对该标签下的 openid 列表，先进行取消标签的操作，直到粉丝数不超过 10w 后，才可直接删除该标签。

接口调用请求说明

http 请求方式：POST（请使用 https 协议） 
https://api.weixin.qq.com/cgi-bin/tags/delete?access_token=ACCESS_TOKEN
POST 数据格式：JSON 
POST 数据例子：

{   "tag":{        "id" : 134   } }
返回说明

{   "errcode":0,   "errmsg":"ok" }
错误码说明

错误码	说明
-1	系统繁忙
45058	不能修改 0/1/2 这三个系统默认保留的标签
45057	该标签下粉丝数超过 10w，不允许直接删除
5. 获取标签下粉丝列表

接口调用请求说明

http 请求方式：GET（请使用 https 协议） 
https://api.weixin.qq.com/cgi-bin/user/tag/get?access_token=ACCESS_TOKEN
POST 数据格式：JSON 
POST 数据例子：

{   "tagid" : 134,   "next_openid":""//第一个拉取的 OPENID，不填默认从头开始拉取 }
返回说明（正常时返回的 json 包示例）

{  
    "count":2,//这次获取的粉丝数量   
    "data":{//粉丝列表
    "openid":[  
    "ocYxcuAEy30bX0NXmGn4ypqx3tI0",    
    "ocYxcuBt0mRugKZ7tGAHPnUaOW7Y"  ]  
},  
    "next_openid":"ocYxcuBt0mRugKZ7tGAHPnUaOW7Y"//拉取列表最后一个用户的 openid 
}
错误码说明

错误码	说明
-1	系统繁忙
40003	传入非法的 openid
45159	非法的 tag_id
用户管理

标签功能目前支持公众号为用户打上最多 20 个标签。

1. 批量为用户打标签

接口调用请求说明

http 请求方式：POST（请使用 https 协议）
https://api.weixin.qq.com/cgi-bin/tags/members/batchtagging?access_token=ACCESS_TOKEN
POST 数据例子：

{   
    "openid_list" : [//粉丝列表    
    "ocYxcuAEy30bX0NXmGn4ypqx3tI0",    
    "ocYxcuBt0mRugKZ7tGAHPnUaOW7Y"   ],   
    "tagid" : 134
 }
返回说明（正常时返回的 json 包示例）

{   
    "errcode":0,   
    "errmsg":"ok"
}
错误码说明

错误码	说明
-1	系统繁忙
40032	每次传入的 openid 列表个数不能超过 50 个
45159	非法的标签
45059	有粉丝身上的标签数已经超过限制，即超过 20 个
40003	传入非法的 openid
49003	传入的 openid 不属于此 AppID
2. 批量为用户取消标签

接口调用请求说明

http 请求方式：POST（请使用 https 协议） 
https://api.weixin.qq.com/cgi-bin/tags/members/batchuntagging?access_token=ACCESS_TOKEN
POST 数据格式：JSON 
POST 数据例子：

{   
    "openid_list" : [//粉丝列表     
    "ocYxcuAEy30bX0NXmGn4ypqx3tI0",     
    "ocYxcuBt0mRugKZ7tGAHPnUaOW7Y"   ],   
    "tagid" : 134
 }
返回说明（正常时返回的 json 包示例）

{  
    "errcode":0,   
    "errmsg":"ok"
}
错误码说明

错误码	说明
-1	系统繁忙
40032	每次传入的 openid 列表个数不能超过 50 个
45159	非法的标签
40003	传入非法的 openid
49003	传入的 openid 不属于此 AppID
3. 获取用户身上的标签列表

接口调用请求说明

http 请求方式：POST（请使用 https 协议）
https://api.weixin.qq.com/cgi-bin/tags/getidlist?access_token=ACCESS_TOKEN
POST 数据格式：JSON 
POST 数据例子：

{   "openid" : "ocYxcuBt0mRugKZ7tGAHPnUaOW7Y" }
返回说明（正常情况下返回的 json 示例）

{   "tagid_list":[//被置上的标签列表 134, 2   ] }
错误码说明

错误码	说明
-1	系统繁忙
40003	传入非法的 openid
49003	传入的 openid 不属于此 AppID
** 设置用户备注名
开发者可以通过该接口对指定用户设置备注名，该接口暂时开放给微信认证的服务号。 接口调用请求说明

http 请求方式: POST（请使用 https 协议）



https://api.weixin.qq.com/cgi-bin/user/info/updateremark?access_token=ACCESS_TOKEN



POST 数据格式：JSON

POST 数据例子：
{
    "openid":"oDF3iY9ffA-hqb2vVvbr7qxf6A0Q",
    "remark":"pangzi"
}
参数说明

参数	说明
access_token	调用接口凭证
openid	用户标识
remark	新的备注名，长度必须小于 30 字符
返回说明 正常时的返回 JSON 数据包示例：

{
"errcode":0,
"errmsg":"ok" 
}
错误时的 JSON 数据包示例（该示例为 AppID 无效错误）：

{"errcode":40013,"errmsg":"invalid appid"}
** 获取用户基本信息(UnionID 机制)
获取用户基本信息(UnionID 机制)

在关注者与公众号产生消息交互后，公众号可获得关注者的 OpenID（加密后的微信号，每个用户对每个公众号的 OpenID 是唯一的。对于不同公众号，同一用户的 openid 不同）。公众号可通过本接口来根据 OpenID 获取用户基本信息，包括昵称、头像、性别、所在城市、语言和关注时间。

请注意，如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用 UnionID 机制来满足上述需求。

UnionID 机制说明：

开发者可通过 OpenID 来获取用户基本信息。特别需要注意的是，如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的 unionid 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号，用户的 unionid 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，unionid 是相同的。

获取用户基本信息（包括 UnionID 机制）

开发者可通过 OpenID 来获取用户基本信息。请使用 https 协议。

接口调用请求说明
http 请求方式: GET
https://api.weixin.qq.com/cgi-bin/user/info?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN
参数说明

参数	是否必须	说明
access_token	是	调用接口凭证
openid	是	普通用户的标识，对当前公众号唯一
lang	否	返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语
返回说明

正常情况下，微信会返回下述 JSON 数据包给公众号：

{
    "subscribe": 1, 
    "openid": "o6_bmjrPTlm6_2sgVt7hMZOPfL2M", 
    "nickname": "Band", 
    "sex": 1, 
    "language": "zh_CN", 
    "city": "广州", 
    "province": "广东", 
    "country": "中国", 
    "headimgurl":"http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/0",
    "subscribe_time": 1382694957,
    "unionid": " o6_bmasdasdsad6_2sgVt7hMZOPfL"
    "remark": "",
    "groupid": 0,
    "tagid_list":[128,2],
    "subscribe_scene": "ADD_SCENE_QR_CODE",
    "qr_scene": 98765,
    "qr_scene_str": ""
}
参数说明

参数	说明
subscribe	用户是否订阅该公众号标识，值为 0 时，代表此用户没有关注该公众号，拉取不到其余信息。
openid	用户的标识，对当前公众号唯一
nickname	用户的昵称
sex	用户的性别，值为 1 时是男性，值为 2 时是女性，值为 0 时是未知
city	用户所在城市
country	用户所在国家
province	用户所在省份
language	用户的语言，简体中文为 zh_CN
headimgurl	用户头像，最后一个数值代表正方形头像大小（有 0、46、64、96、132 数值可选，0代表 640*640 正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像 URL 将失效。
subscribe_time	用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间
unionid	只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。
remark	公众号运营者对粉丝的备注，公众号运营者可在微信公众平台用户管理界面对粉丝添加备注
groupid	用户所在的分组 ID（兼容旧的用户分组接口）
tagid_list	用户被打上的标签 ID 列表
subscribe_scene	返回用户关注的渠道来源，ADD_SCENE_SEARCH 公众号搜索，ADD_SCENE_ACCOUNT_MIGRATION 公众号迁移，ADD_SCENE_PROFILE_CARD 名片分享，ADD_SCENE_QR_CODE 扫描二维码，ADD_SCENEPROFILE LINK 图文页内名称点击，ADD_SCENE_PROFILE_ITEM 图文页右上角菜单，ADD_SCENE_PAID 支付后关注，ADD_SCENE_OTHERS 其他
qr_scene	二维码扫码场景（开发者自定义）
qr_scene_str	二维码扫码场景描述（开发者自定义）
错误时微信会返回错误码等信息，JSON 数据包示例如下（该示例为 AppID 无效错误）:

{"errcode":40013,"errmsg":"invalid appid"}
批量获取用户基本信息

开发者可通过该接口来批量获取用户基本信息。最多支持一次拉取 100 条。

接口调用请求说明

http 请求方式: POST
https://api.weixin.qq.com/cgi-bin/user/info/batchget?access_token=ACCESS_TOKEN
POST 数据示例

{
    "user_list": [
        {
            "openid": "otvxTs4dckWG7imySrJd6jSi0CWE", 
            "lang": "zh_CN"
        }, 
        {
            "openid": "otvxTs_JZ6SEiP0imdhpi50fuSZg", 
            "lang": "zh_CN"
        }
    ]
}
参数说明

参数	是否必须	说明
openid	是	用户的标识，对当前公众号唯一
lang	否	国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语，默认为 zh-CN
返回说明

正常情况下，微信会返回下述 JSON 数据包给公众号（示例中为一次性拉取了 2 个 openid 的用户基本信息，第一个是已关注的，第二个是未关注的）：

{
   "user_info_list": [
       {
           "subscribe": 1, 
           "openid": "otvxTs4dckWG7imySrJd6jSi0CWE", 
           "nickname": "iWithery", 
           "sex": 1, 
           "language": "zh_CN", 
           "city": "揭阳", 
           "province": "广东", 
           "country": "中国", 

           "headimgurl": "http://thirdwx.qlogo.cn/mmopen/xbIQx1GRqdvyqkMMhEaGOX802l1CyqMJNgUzKP8MeAeHFicRDSnZH7FY4XB7p8XHXIf6uJA2SCunTPicGKezDC4saKISzRj3nz/0",

          "subscribe_time": 1434093047, 
           "unionid": "oR5GjjgEhCMJFyzaVZdrxZ2zRRF4", 
           "remark": "", 

           "groupid": 0,
           "tagid_list":[128,2],
           "subscribe_scene": "ADD_SCENE_QR_CODE",
           "qr_scene": 98765,
           "qr_scene_str": ""

      }, 
       {
           "subscribe": 0, 
           "openid": "otvxTs_JZ6SEiP0imdhpi50fuSZg"
       }
   ]
}
参数说明

参数	说明
subscribe	用户是否订阅该公众号标识，值为 0 时，代表此用户没有关注该公众号，拉取不到其余信息。
openid	用户的标识，对当前公众号唯一
nickname	用户的昵称
sex	用户的性别，值为 1 时是男性，值为 2 时是女性，值为 0 时是未知
city	用户所在城市
country	用户所在国家
province	用户所在省份
language	用户的语言，简体中文为 zh_CN
headimgurl	用户头像，最后一个数值代表正方形头像大小（有 0、46、64、96、132 数值可选，0代表 640*640 正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像 URL 将失效。
subscribe_time	用户关注时间，为时间戳。如果用户曾多次关注，则取最后关注时间
unionid	只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。
remark	公众号运营者对粉丝的备注，公众号运营者可在微信公众平台用户管理界面对粉丝添加备注
groupid	用户所在的分组 ID（暂时兼容用户分组旧接口）
tagid_list	用户被打上的标签 ID 列表
subscribe_scene	返回用户关注的渠道来源，ADD_SCENE_SEARCH 公众号搜索，ADD_SCENE_ACCOUNT_MIGRATION 公众号迁移，ADD_SCENE_PROFILE_CARD 名片分享，ADD_SCENE_QR_CODE 扫描二维码，ADD_SCENEPROFILE LINK 图文页内名称点击，ADD_SCENE_PROFILE_ITEM 图文页右上角菜单，ADD_SCENE_PAID 支付后关注，ADD_SCENE_OTHERS 其他
qr_scene	二维码扫码场景（开发者自定义）
qr_scene_str	二维码扫码场景描述（开发者自定义）
错误时微信会返回错误码等信息，JSON 数据包示例如下（该示例为 AppID 无效错误）:

{"errcode":40013,"errmsg":"invalid appid"}
** 获取用户列表
公众号可通过本接口来获取帐号的关注者列表，关注者列表由一串 OpenID（加密后的微信号，每个用户对每个公众号的 OpenID 是唯一的）组成。一次拉取调用最多拉取 10000 个关注者的 OpenID，可以通过多次拉取的方式来满足需求。

接口调用请求说明

http 请求方式: GET（请使用 https 协议）
https://api.weixin.qq.com/cgi-bin/user/get?access_token=ACCESS_TOKEN&next_openid=NEXT_OPENID
参数	是否必须	说明
access_token	是	调用接口凭证
next_openid	是	第一个拉取的 OPENID，不填默认从头开始拉取
返回说明

正确时返回 JSON 数据包：

{
    "total":2,
    "count":2,
    "data":{
    "openid":["OPENID1","OPENID2"]},
    "next_openid":"NEXT_OPENID"
}
参数	说明
total	关注该公众账号的总用户数
count	拉取的 OPENID 个数，最大值为 10000
data	列表数据，OPENID 的列表
next_openid	拉取列表的最后一个用户的 OPENID
错误时返回 JSON 数据包（示例为无效 AppID 错误）：

{"errcode":40013,"errmsg":"invalid appid"}
附：关注者数量超过 10000 时

当公众号关注者数量超过 10000 时，可通过填写 next_openid 的值，从而多次拉取列表的方式来满足需求。

具体而言，就是在调用接口时，将上一次调用得到的返回中的 next_openid 值，作为下一次调用中的 next_openid 值。

示例如下：

公众账号 A 拥有 23000 个关注的人，想通过拉取关注接口获取所有关注的人，那么分别请求 url 如下：https://api.weixin.qq.com/cgi-bin/user/get?access_token=ACCESS_TOKEN 返回结果:
{
  "total":23000,
  "count":10000,
  "data":{"
     openid":[
        "OPENID1",
        "OPENID2",
        ...,
        "OPENID10000"
     ]
   },
   "next_openid":"OPENID10000"
}https://api.weixin.qq.com/cgi-bin/user/get?access_token=ACCESS_TOKEN&next_openid=NEXT_OPENID1 返回结果:
{
   "total":23000,
   "count":10000,
   "data":{
     "openid":[
       "OPENID10001",
       "OPENID10002",
       ...,
       "OPENID20000"
     ]
   },
   "next_openid":"OPENID20000"
}https://api.weixin.qq.com/cgi-bin/user/get?access_token=ACCESS_TOKEN&next_openid=NEXT_OPENID2 返回结果（关注者列表已返回完时，返回 next_openid 为空）:
{
   "total":23000,
   "count":3000,
   "data":{"
       "openid":[
         "OPENID20001",
         "OPENID20002",
         ...,
         "OPENID23000"
       ]
   },
   "next_openid":"OPENID23000"
}
** 获取用户地理位置
开通了上报地理位置接口的公众号，用户在关注后进入公众号会话时，会弹框让用户确认是否允许公众号使用其地理位置。弹框只在关注后出现一次，用户以后可以在公众号详情页面进行操作。

第三方在收到地理位置上报信息之后，只需要回复 success 表明收到即可，是不允许回复消息给粉丝的。

获取用户地理位置

用户同意上报地理位置后，每次进入公众号会话时，都会在进入时上报地理位置，上报地理位置以推送 XML 数据包到开发者填写的 URL 来实现。

推送 XML 数据包示例：

<xml>
<ToUserName><![CDATA[toUser]]></ToUserName>
<FromUserName><![CDATA[fromUser]]></FromUserName>
<CreateTime>123456789</CreateTime>
<MsgType><![CDATA[event]]></MsgType>
<Event><![CDATA[LOCATION]]></Event>
<Latitude>23.137466</Latitude>
<Longitude>113.352425</Longitude>
<Precision>119.385040</Precision>
</xml>
参数说明：

参数	说明
ToUserName	开发者 微信号
FromUserName	发送方帐号（一个 OpenID）
CreateTime	消息创建时间 （整型）
MsgType	消息类型，event
Event	事件类型，LOCATION
Latitude	地理位置纬度
Longitude	地理位置经度
Precision	地理位置精度

* 公众平台接口域名的使用
  开发者可以根据自己的服务器部署情况，选择最佳的接入点（延时更低，稳定性更高）。
  除此之外，可以将其他接入点用作容灾用途，当网络链路发生故障时，可以考虑选择备
  用接入点来接入。

  #+begin_quote
  通用域名(api.weixin.qq.com)，使用该域名将访问官方指定就近的接入点；
  通用异地容灾域名(api2.weixin.qq.com)，当上述域名不可访问时可改访问此域名；
  上海域名(sh.api.weixin.qq.com)，使用该域名将访问上海的接入点；
  深圳域名(sz.api.weixin.qq.com)，使用该域名将访问深圳的接入点；
  香港域名(hk.api.weixin.qq.com)，使用该域名将访问香港的接入点。
  #+end_quote
* 申请微信公众平台接口测试帐号
  #+begin_quote
  由于用户体验和安全性方面的考虑，微信公众号的注册有一定门槛，某些高级接口的权限需要微信认证后才可以获取。
  所以，为了帮助开发者快速了解和上手微信公众号开发，熟悉各个接口的调用，我们推出了微信公众帐号测试号，通过手机微信扫描二维码即可获得测试号。
  http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login
  #+end_quote
#+begin_quote
就是我们一般只能申请订阅号，但订阅号能调用的接口少，故可以申请一个 ~测试订阅号什么的~ ,那个权限就大了,可以用来测试。
#+end_quote
  
* 本地调试微信接口
#+begin_quote
nohup ./natapp -authtoken=e5eb817e91aeee83 -log=stdout -log-level=ERROR &
#+end_quote

访问 http://127.0.0.1:4040 可以监控请求路径、请求头和响应头等日志信息。

#+begin_quote
本地测试接口时可以通过  ~natapp~ 获取一个临时域名测试。
#+end_quote
* 接口调试工具 
  https://mp.weixin.qq.com/debug/cgi-bin/apiinfo?t=index&type=%E5%9F%BA%E7%A1%80%E6%94%AF%E6%8C%81&form=%E8%8E%B7%E5%8F%96access_token%E6%8E%A5%E5%8F%A3%20/token

  #+begin_quote
  看看你的接口和微信提供的接口返回的值是不是一样
  #+end_quote
