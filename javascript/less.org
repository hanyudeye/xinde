* less
  动态样式语言
** 变量
   变量允许我们单独定义一系列通用的样式，然后在需要的时候去调用。所以在做全局样式调
   整的时候我们可能只需要修改几行代码就可以了。

#+begin_src less
@color: #4D926F;

#header {
    color: @color;
}
h2 {
    color: @color;
}
编译后的 CSS：

#header {
    color: #4D926F;
}
h2 {
    color: #4D926F;
}
#+end_src

** 混合（Mixins）
   混合可以将一个定义好的 class A 轻松的引入到另一个 class B 中，从而简单实现 class B 继承 class A 中的所有属性。我们还可以带参数地调用，就像使用函数一样。

   LESS 源码：
   #+BEGIN_SRC less

.rounded-corners (@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    -ms-border-radius: @radius;
    -o-border-radius: @radius;
    border-radius: @radius;
}

#header {
    .rounded-corners;
}
#footer {
    .rounded-corners(10px);
}
编译后的 CSS：

#header {
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    -ms-border-radius: 5px;
    -o-border-radius: 5px;
    border-radius: 5px;
}
#footer {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
    -o-border-radius: 10px;
    border-radius: 10px;
}

   #+END_SRC
** 嵌套
   我们可以在一个选择器中嵌套另一个选择器来实现继承，这样很大程度减少了代码量，并且代码看起来更加的清晰。

   LESS 源码：

   #+BEGIN_SRC less

#header {
    h1 {
        font-size: 26px;
        font-weight: bold;
    }
    p {
        font-size: 12px;
        a {
            text-decoration: none;
            &:hover {
                border-width: 1px
            }
        }
    }
}
编译后的 CSS：

#header h1 {
    font-size: 26px;
    font-weight: bold;
}
#header p {
    font-size: 12px;
}
#header p a {
    text-decoration: none;
}
#header p a:hover {
    border-width: 1px;
}

   #+END_SRC
** 函数和运算
   运算提供了加，减，乘，除操作；我们可以做属性值和颜色的运算，这样就可以实现属性值之间的复杂关系。LESS 中的函数一一映射了 JavaScript 代码，如果你愿意的话可以操作属性值。

   LESS 源码：

   @the-border: 1px;
   @base-color: #111;
   @red:        #842210;

   #header {
   color: (@base-color * 3);
   border-left: @the-border;
   border-right: (@the-border * 2);
   }
   #footer {
   color: (@base-color + #003300);
   border-color: desaturate(@red, 10%);
   }
   编译后的 CSS：

   #header {
   color: #333;
   border-left: 1px;
   border-right: 2px;
   }
   #footer {
   color: #114411;
   border-color: #7d2717;
   }
   更多说明
   更多更详细的语法特性请参见语言文档

** 快速上手
   LESSCSS 的使用是很容易的，首先，使用你最常使用的代码编辑器，按 LESSCSS 的语法规
   则写好.less 文件，接下来，使用编译工具它编译成.css，最后再引入页面即可。

   GUI 编译工具
   为方便起见，建议初学者使用 GUI 编译工具来编译.less 文件，以下是一些可选 GUI 编译工具：


   Codekit(Mac)
   一款自动编译 Less/Sass/Stylus/CoffeeScript/Jade/Haml 的工具，含语法检查、图片优化、自动刷新等附加功能。下载地址 http://incident57.com/codekit/
   WinLess(Win)
   一款 LESS 编译软件。下载地址 http://winless.org/

   SimpleLess(Win/Mac/Linux)
   一款 LESS 编译软件。下载地址 http://wearekiss.com/simpless
*** Node.js 库
    LESSCSS 官方有一款基于 Node.js 的库，用于编译.less 文件。
    使用时，首先全局安装 less（部分系统下可能需要在前面加上 sudo 切换为超级管理员权限）：

    npm install -g less
    接下来就可以使用 lessc 来编译.less 文件了：

    lessc example/example.less example/example.css
    更多选项可以直接运行 lessc 查看说明。

    浏览器端使用
    LESSCSS 也可以不经编译，直接在浏览器端使用。

    使用方法：

    下载 LESSCSS 的.js 文件，例如 lesscss-1.4.0.min.js。
    在页面中引入.less 文件

    <link rel="stylesheet/less" href="example.less" />
    需要注意 rel 属性的值是 stylesheet/less，而不是 stylesheet。

    引入第 1 步下载的.js 文件

    <script src="lesscss-1.4.0.min.js"></script>
    需要特别注意的是，由于浏览器端使用时是使用 ajax 来拉取.less 文件，因此直接在本机文件系统打开（即地址是 file://开头）或者是有跨域的情况下会拉取不到.less 文件，导致样式无法生效。

    还有一种情况容易导致样式无法生效，就是部分服务器（以 IIS 居多）会对未知后缀的文件返回 404，导致无法正常读取.less 文件。解决方案是在服务器中为.less 文件配置 MIME 值为 text/css（具体方法请搜索）。或者还有一种更简单的方法，即是直接将.less 文件改名为.css 文件即可。

    更多说明
    更多使用上的说明请参见使用说明。


    @import-once 被移除，现在@import 的默认行为就是只引入一次（和旧版本@import-once 功能一样）。
    像(~".myclass_@{index}") {...}这样在选择器中插入变量的语法不再被支持，请使用.myclass_@{index} {...}来代替，这种新语法在 1.3.1 以上版本中都支持。
    用于浏览器的 less.js 不再包含 es5-shim.js。因为我们之前用的 es5-shim.js 版本中有一些错误，而新版本的体积又明显变大了。使用时请根据需要选用 es5-shim 或者是只在现代浏览器中使用。
    引入了一种“严格运算模式”（可选），在严格运算模式中，数学运算必须被括号包裹，如：

    (1 + 1)  // 2
    1 + 1    // 1+1
    在 1.4.0 中，这个选项默认被关闭，但我们希望在未来的某个时间将它默认设置为开启。我们建议你升级代码的写法，并打开严格运算模式。（在命令行中加上-strict-math=on 或者是在 JavaScript 代码中加入 strictMath:true。）带括号的写法与旧版的 less 编译器兼容。

    引入了一种“严格单位模式”（strictUnits:true 或者 strict-units=on），这将强制让 lessc 验证单位的合法性。例如 4px/2px 结果为 2，而不是 2px，而 4em/2px 将报错。目前没有将这个选项默认打开的计划，但它可能在排查 bug 的时候有用。
    单位的运算功能已完成，所以(4px * 3em) / 4px 以前结果是 3px，但现在是 3em。但是，我们没有取消有单位数字向无单位数字转换的功能，除非“严格单位模式”被开启。
    你可以现在就将选择器中插入变量、运算、单位的涉及到的变化应用到代码中去，这些变化能很好地与 less 1.3.3 兼容。
