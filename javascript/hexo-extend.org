* 插件
** 站长统计 不蒜子 
*** 总计
    文件 /home/wuming/git/web/blog/themes/yilia/layout/_partial/footer.ejs
    添加
    <script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
    <span id="busuanzi_container_site_pv">本站总访问量<span id="busuanzi_value_site_pv"></span>次</span>
*** 单页面
    文件    /home/wuming/git/web/blog/themes/yilia/layout/_partial/article.ejs
    添加
    <% if ( !index ){ %>
		<span class="archive-article-date">
		阅读量 <span id="busuanzi_value_page_pv"></span>
		</span>
    <% } %>
* [[https://theme-next.org/docs/getting-started/][NexT]]
** 安装 
*** 下载最新 release 版本
    #+BEGIN_SRC sh 
      $ mkdir themes/next
      $ curl -s https://api.github.com/repos/theme-next/hexo-theme-next/releases/latest | grep tarball_url | cut -d '"' -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1
    #+END_SRC
*** 指定 branch 使用 git 安装：
    #+begin_src js
      $ git clone --branch v6.0.0 https://github.com/theme-next/hexo-theme-next themes/next
    #+end_src
     
*** 下载最新 master 分支
    #+begin_src js
    $ git clone https://github.com/theme-next/hexo-theme-next themes/next
    #+end_src
     
    获取 tags 列表：
    #+BEGIN_SRC shell
      $ cd themes/next
      $ git tag -l
      $ git checkout tags/v6.0.1
    #+END_SRC
*** 完成配置
    在 hexo 根配置文件 _config.yml 中设置你的主题：
    #+begin_src yaml
    theme: next
    #+end_src
     
** 配置
*** 主题风格设定
    通过修改 next 主题下的_config.yml 的 scheme 字段，配置不同的风格。
    #+begin_src yaml
      # Schemes
      scheme: Muse
      #scheme: Mist
      #scheme: Pisces
 #+end_src
*** 菜单设置
 通过修改 next 主题下的_config.yml 的 menu 字段，选定显示的菜单项。

 #+begin_src yaml
     menu:
       home: /
       categories: /categories
       about: /about
       archives: /archives
       tags: /tags
       commonweal: /404.html
 #+end_src
 其中，home 代表主页，categories 代表分类页，about 代表关于页面，archives 代表
 归档页，commonweal 代表 404 页面（page not found 时候显示的页面）。

 菜单项文本修改是在对 next 主题下的 language 文件夹下的文件进行修改，若当前语言
 是简体中文，直接修改 language/zh-Hans.yml 里的对应字段即可。

 本站点显示主页，分类页，关于页面和归档页。
*** 头像设置
 在主题下的 source/images/下放置头像文件 avatar.gif 即可。
*** 设置文章代码主题
    Next 主题总共支持 5 种主题，默认主题是白色的 normal。通过修改 next 主题下
    的_config.yml 的 highlight 字段，来设置代码主题。

    本站点使用的是 night 主题。即令 highlight 为 night。
*** 添加标签页面
    前面通过修改 next 主题下的_config.yml 文件中的 menu 选项，可以在主页面的菜单栏添加标签选项，但是此时点击标签，跳转的页面会显示 page not found。

    添加标签页面的具体方法是：

    新建页面
    输入如下命令：

    $ cd myBlog
    $ hexo new page tags
    输入命令后，在 myBlog/source 下会新生成一个新的文件夹 tags，在该文件夹下会有一个 index.md 文件。
     
*** 加入站点内容搜索功能
    本站点使用的是 Local Search。加入站点内容搜索功能步骤如下：

    安装 hexo-generator-searchdb
    $ npm install hexo-generator-searchdb --save
 注意：安装时应在站点根目录下，即 myBlog 目录下
*** 添加 search 字段
 在站点 myBlog/_config.yml 中添加 search 字段，如下：

 search:
   path: search.xml
   field: post
   format: html
   limit: 10000
** 提交合并请求

提交合并请求前，请再次确认您已经查看了[你需要了解的](#before-submitting-an-issue)内
容，避免提交重复的合并请求。确定相关仓库后，创建合并请求。更多详细操作过程可以查
看[帮助文档](https://help.github.com/articles/creating-a-pull-request/)。

1. 进入 [hexo-theme-next](https://github.com/theme-next/hexo-theme-next) 源仓库，点击`Fork`。
2. 
3. 进入到已经`Fork`的个人仓库（`https://github.com/username/hexo-theme-next`），
   点击 **Clone or download** 并复制该仓库地址。选择本地文件夹，并打开 Git Bash，
   输入如下命令并回车，即可完成仓库克隆。
4. 
    ```bash
    $ git clone git@github.com:username/hexo-theme-next.git
    ```
5. 进入 `hexo-theme-next` 本地文件夹，并创建分支。
    ```bash
    $ cd hexo-theme-next
    $ git checkout -b patchname
    ```
6. 本地修改并测试，推送分支。
    ```bash
    $ git add .
    $ git commit -m "add commit messamge"
    $ git push origin patchname
    ```
7. 进入 `fork` 后的仓库，切换到新提交的 `patchname` 分支，点击 `patchname` 分支右侧的 **New pull request** 。在 PR 对比页面，正确选择你需要发起合并请求的分支，然后点击 **Create pull request** ，建立一个新的合并申请并描述变动。

请认真遵守如下指南，这样我们才能更好地理解你的合并请求：

创建合并请求时，请遵守[编码规范](#coding-rules)和[提交信息规范](#commit-messages-rules)。
在标题中清晰准确地描述你的合并请求，不要加入 Issue 编号。
按照[模板](../../.github/PULL_REQUEST_TEMPLATE.md)尽可能的详细填写相关信息。
合并请求需要在所有主题样式中测试通过，并提供所表现功能的样例，如图像文件、在线演示网址等等。
<a name="creating-releases"></a>
  
* 帮助
** 标签插件  
   标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。
   
   引用块
   在文章中插入引言，可包含作者、来源和标题。

别号：quote

{% blockquote [author[, source]] [link] [source_link_title] %}
content
{% endblockquote %}
样例
没有提供参数，则只输出普通的 blockquote

{% blockquote %}
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.
{% endblockquote %}
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.

引用书上的句子

{% blockquote David Levithan, Wide Awake %}
Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.
{% endblockquote %}
Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.

David LevithanWide Awake
引用 Twitter

{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}
NEW: DevDocs now comes with syntax highlighting. http://devdocs.io
{% endblockquote %}
NEW: DevDocs now comes with syntax highlighting. http://devdocs.io

@DevDocstwitter.com/devdocs/status/356095192085962752
引用网络上的文章

{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}
Every interaction is both precious and an opportunity to delight.
{% endblockquote %}
Every interaction is both precious and an opportunity to delight.

Seth GodinWelcome to Island Marketing
代码块
在文章中插入代码。

别名：code

{% codeblock [title] [lang:language] [url] [link text] %}
code snippet
{% endcodeblock %}
样例
普通的代码块

{% codeblock %}
alert('Hello World!');
{% endcodeblock %}
alert('Hello World!');
指定语言

{% codeblock lang:objc %}
[rectangle setX: 10 y: 10 width: 20 height: 20];
{% endcodeblock %}
[rectangle setX: 10 y: 10 width: 20 height: 20];
附加说明

{% codeblock Array.map %}
array.map(callback[, thisArg])
{% endcodeblock %}
Array.map
array.map(callback[, thisArg])
附加说明和网址

{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}
_.compact([0, 1, false, 2, '', 3]);
=> [1, 2, 3]
{% endcodeblock %}
_.compactUnderscore.js
_.compact([0, 1, false, 2, '', 3]);
=> [1, 2, 3]
反引号代码块
另一种形式的代码块，不同的是它使用三个反引号来包裹。

``` [language] [title] [url] [link text] code snippet ```
Pull Quote
在文章中插入 Pull quote。

{% pullquote [class] %}
content
{% endpullquote %}
jsFiddle
在文章中嵌入 jsFiddle。

{% jsfiddle shorttag [tabs] [skin] [width] [height] %}
Gist
在文章中嵌入 Gist。

{% gist gist_id [filename] %}
iframe
在文章中插入 iframe。

{% iframe url [width] [height] %}
Image
在文章中插入指定大小的图片。

{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}
Link
在文章中插入链接，并自动给外部链接添加 target="_blank" 属性。

{% link text url [external] [title] %}
Include Code
插入 source 文件夹内的代码文件。

{% include_code [title] [lang:language] path/to/file %}
Youtube
在文章中插入 Youtube 视频。

{% youtube video_id %}
Vimeo
在文章中插入 Vimeo 视频。

{% vimeo video_id %}
引用文章
引用其他文章的链接。

{% post_path slug %}
{% post_link slug [title] %}
引用资源
引用文章的资源。

{% asset_path slug %}
{% asset_img slug [title] %}
{% asset_link slug [title] %}
Raw
如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。

{% raw %}
content
{% endraw %}
** 资源文件夹
   资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的 Hexo 项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 ![](/images/image.jpg) 的方法访问它们。

文章资源文件夹
对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo 也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。

_config.yml
post_asset_folder: true
当资源文件管理功能打开后，Hexo 将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。
这个资源文件夹将会有与这个 markdown 文件一样的名字。
将所有与你的文章有关的资源放在这个关联文件夹中之后，
你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。


相对路径引用的标签插件
通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。
在 Hexo 2 时代，社区创建了很多插件来解决这个问题。但是，随着 Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。
这使得你可以更简单地在文章中引用你的资源。

{% asset_path slug %}
{% asset_img slug [title] %}
{% asset_link slug [title] %}
比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，
如果通过使用相对路径的常规 markdown 语法 ![](/example.jpg) ，
它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）

正确的引用图片方式是使用下列的标签插件而不是 markdown：

{% asset_img example.jpg This is an example image %}
通过这种方式，图片将会同时出现在文章和主页以及归档页中。
** 数据文件
有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，
那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 source/_data 内
的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。

举例来说，在 source/_data 文件夹中新建 menu.yml 文件：

Home: /
Gallery: /gallery/
Archives: /archives/
您就能在模板中使用这些资料：

<% for (var link in site.data.menu) { %>
  <a href="<%= site.data.menu[link] %>"> <%= link %> </a>
<% } %>
渲染结果如下 :

<a href="/"> Home </a>
<a href="/gallery/"> Gallery </a>
<a href="/archives/"> Archives </a>
** 模版
模板决定了网站内容的呈现方式，每个主题至少都应包含一个 index 模板，以下是各页面
相对应的模板名称：

模板	用途	回调
index	首页	
post	文章	index
page	分页	index
archive	归档	index
category	分类归档	archive
tag	标签归档	archive
布局（Layout）
如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，举例来说：

index.ejs
index
layout.ejs
<!DOCTYPE html>
<html>
  <body><%- body %></body>
</html>
生成：

<!DOCTYPE html>
<html>
  <body>index</body>
</html>
每个模板都默认使用 layout 布局，您可在 front-matter 指定其他布局，或是设为 false 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。

局部模版（Partial）
局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。举例来说：

partial/header.ejs
<h1 id="logo"><%= config.title %></h1>
index.ejs
<%- partial('partial/header') %>
<div id="content">Home page</div>
生成：

<h1 id="logo">My Site</h1>
<div id="content">Home page</div>
局部变量
您可以在局部模板中指定局部变量并使用。

partial/header.ejs
<h1 id="logo"><%= title></h1>
index.ejs
<%- partial('partial/header', {title: 'Hello World'}) %>
<div id="content">Home page</div>
生成：

<h1 id="logo">Hello World</h1>
<div id="content">Home page</div>
优化
如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。

本功能借鉴于 Ruby on Rails，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。

它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：

<%- fragment_cache('header', function(){
  return '<header></header>';
});
如果您使用局部模板的话，可以更简单：

<%- partial('header', {}, {cache: true});
但是，如果您开启了 relative_link 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。
** 变量
   全局变量
   变量	描述
site	网站变量
page	针对该页面的内容以及 front-matter 所设定的变量。
config	网站配置
theme	主题配置。继承自网站配置。
_ (单下划线)	Lodash 函数库
path	当前页面的路径（不含根路径）
url	当前页面的完整网址
env	环境变量
网站变量
变量	描述
site.posts	所有文章
site.pages	所有分页
site.categories	所有分类
site.tags	所有标签
页面变量
页面（page）

变量	描述
page.title	页面标题
page.date	页面建立日期（Moment.js 对象）
page.updated	页面更新日期（Moment.js 对象）
page.comments	留言是否开启
page.layout	布局名称
page.content	页面的完整内容
page.excerpt	页面摘要
page.more	除了页面摘要的其余内容
page.source	页面原始路径
page.full_source	页面的完整原始路径
page.path	页面网址（不含根路径）。我们通常在主题中使用 url_for(page.path)。
page.permalink	页面的完整网址
page.prev	上一个页面。如果此为第一个页面则为 null。
page.next	下一个页面。如果此为最后一个页面则为 null。
page.raw	文章的原始内容
page.photos	文章的照片（用于相簿）
page.link	文章的外部链接（用于链接文章）
文章 (post): 和 page 布局类似，但是添加了下列变量。

Variable	Description
page.published	如果该文章已发布则为 True
page.categories	该文章的所有分类
page.tags	该文章的所有标签
首页（index）

变量	描述
page.per_page	每页显示的文章数量
page.total	总文章数
page.current	目前页数
page.current_url	目前分页的网址
page.posts	本页文章
page.prev	上一页的页数。如果此页是第一页的话则为 0。
page.prev_link	上一页的网址。如果此页是第一页的话则为 ''。
page.next	下一页的页数。如果此页是最后一页的话则为 0。
page.next_link	下一页的网址。如果此页是最后一页的话则为 ''。
page.path	当前页面的路径（不含根目录）。我们通常在主题中使用 url_for(page.path)。
归档 (archive)：与 index 布局相同，但新增以下变量。

变量	描述
page.archive	等于 true
page.year	年份归档 (4 位)
page.month	月份归档 (没有前导零的 2 位数)
分类 (category)：与 index 布局相同，但新增以下变量。

变量	描述
page.category	分类名称
标签 (tag)：与 index 布局相同，但新增以下变量。

变量	描述
page.tag	标签名称
** 更多 <!-- more -->
* 评论头像
** Gravatar 
   请自行登录或注册 Gravatar，然后修改自己的头像。
   评论的时候，留下在 Gravatar 注册时所使用的邮箱即可。
* 设置首页隐藏指定文章 
1. 自定义 front-matter 的参数
#+begin_src yaml
  notshow: true
#+end_src
2. 修改主题的首页 Hexo\themes\next\layout\index.swig
添加了一个判断
   #+begin_src swig
{% block content %}
  <section id="posts" class="posts-expand">
    {% for post in page.posts %}
     {% if post.notshow != true %}
      {{ post_template.render(post, true) }}
       {% endif %}
    {% endfor %}
  </section>
   #+end_src
org 中 bool 是 yes/no 哦，记住
* 评论输入打字礼花及震动特效
打开 ~\themes\next\layout\_custom\custom.swig~

添加
#+begin_src js
  <!-- 打字礼花及震动特效 -->
  <script type="text/javascript" src="https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/js/activate-power-mode.js"></script>
  <script>
      POWERMODE.colorful = true; // ture 为启用礼花特效
      POWERMODE.shake = false; // false 为禁用震动特效
      document.body.addEventListener('input', POWERMODE);
    // document.body.addEventListener('#veditor', POWERMODE);
  </script>
#+end_src
然后引入
* 引入自定义文件
打开 ~\themes\next\layout\_layout.swig~

在 </body> 前添加
#+begin_src js
{% include '_custom/custom.swig' %}
#+end_src
* 开启 Valine 评论邮件通知
  云引擎”一键”部署
  打开服务就好了
* 音乐
** 普通音频  
   #+begin_src html
     <audio src="Tune for a Found Harmonium.mp3" controls="controls">
     </audio>
   #+end_src

** aplay  
  安装 
  npm install --save hexo-tag-aplayer

  用法： 
  {% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}

  title : 音乐名称
  author: 艺人
  url: 音乐 URL
  picture_url: 音乐图片 URL(可选)
  narrow: optional, narrow style
  autoplay: 音乐自动播放, 不被移动端浏览器支持(可选)
  width:xxx: 前缀 width:,播放器的宽度 (default: 100%), (可选)
  lrc:xxx: 前缀 lrc:, 歌词文件 url (可选)

  外链用法 
  {% aplayer "你怎麼說" "Jay && 邓丽君" "http://fs.open.kugou.com/15ad66aa2470482df1919a5538a6c663/5c1eea95/G008/M04/0B/05/qIYBAFUGzV-ADtHPAExveQ6d2Rs873.mp3" "autoplay" %}
  
  使用音乐外链带歌词的示例:
  {% aplayerlrc "你怎麼說" "Jay && 邓丽君" "http://fs.open.kugou.com/15ad66aa2470482df1919a5538a6c663/5c1eea95/G008/M04/0B/05/qIYBAFUGzV-ADtHPAExveQ6d2Rs873.mp3" "autoplay" %}
  [00:04.76]你怎么说[00:26.31]我没忘记你忘记我[00:32.53]连名字你都说错[00:50.51]你说过两天来看我[00:56.04]一走就是一年多[01:01.36]三百六十五个日子不好过[01:07.93]你心里根本没有我[01:14.37]把我的爱情还给我[01:43.60]我没忘记你忘记我[01:49.80]连名字你都说错[01:55.97]证明你一切都是在骗我[02:01.95]看今天你怎么说[02:07.16]你说过两天来看我[02:13.20]一等就是一年多[02:18.26]三百六十五个日子不好过[02:25.22]你心里根本没有我[02:31.43]把我的爱情还给我[02:36.75]红尘客栈[02:39.13]天涯的尽头是风沙[02:44.59]红尘的故事叫牵挂[02:50.01]封刀隐没在寻常人家东篱下[02:55.53]闲云野鹤古剎[03:03.19]快马在江湖里厮杀[03:08.92]无非是名跟利放不下[03:14.01]心中有江山的人岂能快意潇洒[03:19.91]我只求与你共华发[03:27.01]剑出鞘 恩怨了 谁笑[03:31.61]我只求今朝拥你入怀抱[03:37.02]红尘客栈风似刀[03:41.08]骤雨落宿命敲[03:46.26]任武林谁领风骚我却[03:49.76]只为你折腰[03:52.82]你回眸多娇我泪中带笑[03:58.36]酒招旗风中萧萧[04:02.41]剑出鞘恩怨了[04:08.58]千里之外[04:13.09]我送你离开千里之外[04:17.64]你无声黑白[04:21.62]沉默年代或许不该[04:25.62]太遥远的相爱[04:29.59]我送你离开天涯之外[04:33.79]你是否还在[04:37.85]琴声何来生死难猜[04:41.90]用一生去等待
  {% endaplayerlrc %}
** MeingJS
根配置 
aplayer:
  meting: true
meting 单曲示例:

这里的参数: 歌曲 ID、服务器、播放器类型 ,具体的 ID 怎么获取我在文章最后给出参考链接.

参考链接
https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md#meingjs-%E6%94%AF%E6%8C%81-30-%E6%96%B0%E5%8A%9F%E8%83%BD

{% meting "000IAEln10GWew" "tencent" "song" %}
meting 播放列表示例:

<!-- 简单示例 (id, server, type)  -->
{% meting "60198" "netease" "playlist" %}

<!-- 进阶示例 -->
{% meting "60198" "netease" "playlist" "autoplay" "mutex:false" "listmaxheight:340px" "preload:none" "theme:#ad7a86"%}

至于歌单 id 怎么获取嘛，你在网易云音乐的歌单上按右键，复制链接，拿去浏览器里打开，地址栏里面可以看到这个歌单的 id┌( ಠ_ಠ)┘

我的歌单 *白噪音*
 {% meting "884528449" "netease" "playlist" %}

 其他地方插入播放器的方法：在 md 里插入播放器后你们去看生成的 html 文件。直接复制那段代码到你想要的地方，改下歌单 id 就好了。
* 视频

** 通用  
   #+begin_src html
   <video src=' ' type='video/mp4' controls='controls'  width='100%' height='100%'>
   </video>
   #+end_src
  
   自适应 
   #+begin_src html
     <video src="example.mp4" height=498 width='100%' controls="controls">
     </video>
   #+end_src

  #+begin_src html
  <iframe src="//player.bilibili.com/player.html?aid=57577386&cid=100512806&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width='100%' height='100%'> </iframe>
  #+end_src
 
  自适应 
  #+begin_src html
  <iframe src="example.mp4" height=360 width='100%' controls="controls" allowfullscreen></iframe>
  #+end_src

** dplayer 视频 
   安装
   npm install hexo-tag-dplayer --save

   使用
   {% dplayer "url=mp4 的地址" "pic=图片的地址" "loop=yes" "theme=#FADFA3" "autoplay" "token=tokendemo" %}

   “pic=图片的地址”不写也是没问题的

 实例
 #+begin_src js
   {% dplayer "url=http://music.yuti.site/mv-%E5%AD%A6%E4%B8%8D%E4%BC%9A.mp4" "loop=yes" "theme=#FADFA3" "token=tokendemo" %}
   {% dplayer "url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4" "addition=https://dplayer.daoapp.io/bilibili?aid=4157142" "api=https://api.prprpr.me/dplayer/" "pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg" "id=9E2E3368B56CDBB4" "loop=yes" "theme=#FADFA3" "autoplay=false" "token=tokendemo" %}
   {% dplayer 'url=some.mp4' "id=someid" "api=https://api.prprpr.me/dplayer/" "addition=/some.json" 'code=player.on("loadstart",function(){console.log("loadstart")})' "autoplay" %} 
 #+end_src

 #+begin_src js
dplayer options:
    'autoplay', 'loop', 'screenshot', 'hotkey', 'mutex', 'dmunlimited' : bool options, use "yes" "y" "true" "1" "on" or just without value to enable
    'preload', 'theme', 'lang', 'logo', 'url', 'pic', 'thumbnails', 'vidtype', 'suburl', 'subtype', 'subbottom', 'subcolor', 'subcolor', 'id', 'api', 'token', 'addition', 'dmuser' : string arguments
    'volume', 'maximum' : number arguments
container options:
    'width', 'height' : string, used in container element style
other:
    'code' : value of this key will be append to script tag
 #+end_src
 
#+begin_src js
{
    container: "you needn't set this",
    autoplay: 'autoplay',
    theme: 'theme',
    loop: 'loop',
    lang: 'lang',
    screenshot: 'screenshot',
    hotkey: 'hotkey',
    preload: 'preload',
    logo: 'logo',
    volume: 'volume',
    mutex: 'mutex',
    video: {
        url: 'url',
        pic: 'pic',
        thumbnails: 'thumbnails',
        type: 'vidtype',
    },
    subtitle: {
        url: 'suburl',
        type: 'subtype',
        fontSize: 'subsize',
        bottom: 'subbottom',
        color: 'subcolor',
    },
    danmaku: {
        id: 'id',
        api: 'api',
        token: 'token',
        maximum: 'maximum',
        addition: ['addition'],
        user: 'dmuser',
        unlimited: 'dmunlimited',
    },
    icons: 'icons',
    contextmenu: 'menu',
}
#+end_src

***  framer

    自适应 
    #+begin_src css
      .bilibili{
          position: relative;
          width: 100%;
          height: 35em;
      }
      @media only screen and (max-width: 768px) {
          .bilibili {
              height: 15em;
          }
      }
    #+end_src

* 思维导图
  {% pullquote mindmap mindmap-md %}
- [在 Hexo 中使用思维导图](https://hunterx.xyz/use-mindmap-in-hexo.html)
  - 前言
  - 操作指南
    - 准备需要的文件
    - 为主题添加 CSS/JS 文件
  - 使用方法
{% endpullquote %}

