* ubuntu 操作系统软件
** 安装 
*** CD安装, 分区,分区挂载，图形配置，选择语言等
   命令行，网络配置, 显示器
   远程图像界面登录 X -query 192.168.0.2
*** 远程批量安装
** 安装内核
   apt install linux-head-generic linux-image-genric linux-head
   sudo update-grub
   sudo reboot
** 软件安装
*** 依赖库
*** 依赖库降级 
    libpng12-dev : Depends: libpng12-0 (= 1.2.54-1ubuntu1) but 1.2.54-1ubuntu1k1 is to be installed 
    E: Unable to correct problems, you have held broken packages
    解决办法
    sudo apt install libpng12-0=1.2.54-1ubuntu1
*** deb软件
    自己装依赖
    安装 sudo dpkg -i *.deb  进行安装
*** apt 
    apt-get source <package> 获取源码
    apt-cache search 'expression'
    列表位于/etc/apt/sources.list
    维护好依赖, 都是 deb文件
    路径  /var/cache/apt/archives
*** Composer  
php 依赖管理器
在composer 中国推荐的加速方法就是把默认的国外镜像换成国内的。
具体步骤：

composer config repo.packagist composer https://packagist.phpcomposer.com
该命令是修改config.json配置

然后在自己项目里面的composer.json文件里面添加如下：
 "repositories": {
        "packagist": {
            "type": "composer",
            "url": "https://packagist.phpcomposer.com"
        }
    }

测试后，速度是变快了很多。

原有项目新添加扩展的，都使用 composer require new/package 这种方式来安装。
需要加版本的话
composer require "foo/bar:1.0.0"

** 帮助
*** 邮件列表 list.ubuntu.com
*** 帮助irc ubuntu-zh 论坛 wiki
** 任务 相对用户说的 fg bg
   jobs 
   -l：显示进程号；
   -p：仅任务对应的显示进程号；
   -n：显示任务状态的变化；
   -r：仅输出运行状态（running）的任务；
   -s：仅输出停止状态（stoped）的任务。
** 进程 相对系统来说
**** w 谁？
**** runlevel 运行等级
**** ps 
    #+BEGIN_SRC conf
      -e   显示所有进程 
      -f    全格式
      -h   不显示标题
      -l    长格式
      -w     宽输出
      a    显示终端上的所有进程，包括其他用户的进程。
      r    只显示正在运行的进程。
      u 　以用户为主的格式来显示程序状况。
      x     显示所有程序，不以终端机来区分。

      ps -ef 显示出的结果：
          1.UID       用户ID
          2.PID        进程ID
          3.PPID      父进程ID
          4.C           CPU占用率
          5.STIME     开始时间
          6.TTY         开始此进程的TTY----终端设备
          7.TIME       此进程运行的总时间
          8.CMD       命令名
    #+END_SRC
   
    init init进程是所有Linux进程的父进程
**** crontab 周期性执行
***** 命令
      crontab [ -u user ] file
      crontab [ -u user ] [ -i ] { -e | -l | -r } |
      -e 编辑crontab文件
      -l　列出crontab文件内容
      -r 删除crontab文件
***** 开启日志     
     修改rsyslog文件，将/etc/rsyslog.d/50-default.conf 文件中的#cron.*前的#删掉；
     重启rsyslog服务service rsyslog restart；
     重启cron服务service cron restart；

     more /var/log/cron.log；
     就可以查看运行时的日志文件，如果在日志文件中出现：No MTA installed, discarding output

     那么就是说，crontab执行脚本时是不会直接错误的信息输出，而是会以邮件的形式发送到你的邮箱里，这时候就需要邮件服务器了，
     如果你没有安装邮件服务器，它就会报这个错。如果是测试，可以用下面的办法来解决：

     在每条定时脚本后面加入：
     ?
     001
     >/dev/null 2>&1
     就可以解决No MTA installed, discarding output的问题
***** 编辑文件, 其实编辑好后就会自动执行
     crontab -e  

     # m h  dom mon dow   command  
     */2 * * * * date >> ~/time.log  
***** 执行     
     sudo service cron restart  

     对于自己的，只要执行下自己的crontab　文件即可
     crontab -u wuming crontabfile

 | 分钟 | 0 - 59                                                                     |
 | 小时 | 0 - 23                                                                     |
 | 天   | 1 - 31                                                                     |
 | 月   | 1 - 12                                                                     |
 | 星期 | 0 - 6   0表示星期天                                                        |
 | 星号 | 表示任意值，比如在小时部分填写 * 代表任意小时（每小时）                    |
 | 逗号 | 可以允许在一个部分中填写多个值，比如在分钟部分填写 1,3 表示一分钟或三分钟  |
 | 斜线 | 一般配合 * 使用，代表每隔多长时间，比如在小时部分填写 */2 代表每隔两分钟。 |
\* * * * *                  # 每隔一分钟执行一次任务  
0 * * * *                  # 每小时的0点执行一次任务，比如6:00，10:00  
6,10 * 2 * *            # 每个月2号，每小时的6分和10分执行一次任务  
**** pkill 可以按照进程名杀死进程
**** 进程属性
    ls /proc/PID 
    
cwd 进程运行目录
exe 程序绝对路径
cmdline 运行时的命令行命令
environ 环境变量
fd 打开或使用的文件的符号链接
** 用户管理
*** 添加用户   
     useradd -m -g users -G wheel -s /bin/bash ikke
     passwd ikke

     安装 sudo
     pacman -S sudo
     打开 /etc/sudoers 文件，找到 root ALL=(ALL) ALL 并依葫芦画瓢添加 ikke ALL=(ALL) ALL 即可。
*** 忘记登录密码
   1,启动时在启动的linux系统（或grub到计时结束前）上按下“e”键
   2，选中类似“于kernel /boot/vmlinuz-2.4.18-14 ”按“e”键
   3,修改命令行，加入linux single，结果如下：
   kernel /vmlinuz-2.6.18-8.el5  ro root=LABEL=/ rhgb quiet linux single
   4,回车返回，按b键,进入命令行
   5, #vi /etc/shadow 编辑shadow
   将第一行，即以root开头的一行中root:后和下一个:前的内容删除，
   第一行将类似于
   root::……
   保存
   (如果保存不了，是文件属性的问题，就chmod 755 /etc/shadow，这样就OK了)
6. #reboot重启，root密码为空
* 软件
** 压缩
*** 7z 
    解压
    7z x  dist.7z -r -o/home/Baby/Desktop
    x 代表解压缩文件，并且是按原始目录解压
    dist.7z 是压缩文件，如果不在当前目录下要带上完整的目录
    -r 表示递归所有的子文件夹
    -o 是指定解压到的目录，（注意-o后是没有空格的直接接目录）

    压缩文件／文件夹
    7z a -t7z -r  dist.7z   /web/source/*
    a 代表添加文件／文件夹到压缩包
    -t 是指定压缩类型 
    -r 表示递归所有的子文件夹
    dist.7z 是压缩好后的压缩包名
    /web/source/* 是要压缩的目录，＊是表示该目录下所有的文件
** 编程
*** gcc 基于C/C++的预处理器和编译器
    -o：指定生成的输出文件,所以编译多个文件是,-o 没有意义；
    -E：仅执行编译预处理； .i
    -S：将C代码转换为汇编代码；.s
    -wall：显示警告信息；
    -c：仅执行编译操作，不进行连接操作。.o
**** 1. 预处理 gcc -E test.c -o test.i
     -C:
     -H:
     -include:
**** 2. 编译为汇编代码   gcc -S test.i -o test.s
     masm=intel	汇编代码 
     -std 指定使用的语言标准
**** 3. gas  gcc -c test.s -o test.o
     :-Wa,option
     :-llibrary 连接名为library的库文件
     :-L 指定额外路径
     :-m32
**** 4. ld  gcc test.o -o test
     :-lobjc 这个-l选项的特殊形式用于连接Objective C程序.
     :-nostartfiles 不连接系统标准启动文件,而标准库文件仍然正常使用.
     :-nostdlib 不连接系统标准启动文件和标准库文件.只把指定的文件传递给连接器.
     :-static 在支持动态连接(dynamic linking)的系统上,阻止连接共享库.该选项在其他系统上无效.
     :-shared 生成一个共享目标文件,他可以和其他目标文件连接产生可执行文件.只有部分系统支持该选项.
     :-symbolic 建立共享目标文件的时候,把引用绑定到全局符号上.对所有无法解析的引用作出警
     告(除非用连接编辑选项 `-Xlinker -z -Xlinker defs'取代).只有部分系统支持该选项.
     :-u symbol 使连接器认为取消了symbol的符号定义,从而连接库模块以取得定义.你可以使用多
     个 `-u'选项,各自跟上不同的符号,使得连接器调入附加的库模块.
     : [-e ENTRY]|[--entry=ENTRY]	 使用 ENTRY (入口)标识符作为程序执行的开始端,而不是缺省入口.   
     : -lAR	在连接文件列表中增加归档库文件AR.可以多次使用这个选项. 凡指定一项AR,ld 就会在路径列表中增加一项对libar.a的搜索.
     : -LSEARCHDIR   这个选项将路径SEARCHDIR添加到路径列表, ld在这个列表中搜索归档库.
     可以多次使用这个选项.缺省的搜索路径集(不使用-L时)取决于ld使用的
     模拟模式(emulation)及其配置.在连接脚本中,可以用SEARCH_DIR命令指定路径. 
     : -Tbss org
     : -Tdata org
     : -Ttext org
     把org作为输出文件的段起始地址 --- 特别是 --- bss,data,或text段.org必须是十六进制整数. 
     : -X    删除 全部 临时的 局部符号. 大多数 目的文件 中, 这些 局部符	    号 的 名字 用 `L' 做 开头.
     : -x    删除 全部 局部符号. 
     : -m 指定仿真环境,这里要与gcc 的选项 -m32一致; -V显示 支持的仿真：本机支持   elf_x86_64   
     elf32_x86_64   elf_i386   i386linux   elf_l1om   elf_k1om   i386pep   i386pe
     LDFLAGS="-L/usr/lib64 -L/lib64" 全局常量
     : 注意,如果连接器通过被编译器驱动来间接引用(比如gcc), 那所有的连接器命令行选项前必须加上前缀'-Wl'
     gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup 
     : `-b INPUT-FORMAT'
     `--format=INPUT-FORMAT' [binary]
     'ld'可以被配置为支持多于一种的目标文件.缺省的格式是从环境变量'GNUTARGET'中得到的.
     你也可以从一个脚本中定义输入格式,使用的命令是'TARGET'. 
     : `--oformat OUTPUT-FORMAT'	  指定输出目标文件的二进制格式.一般不需要指定,ld的缺省输出格式配置
     为/各个机器上最常用的/ 格式. output-format是一个 字符串,BFD库支持的格式名称:在操作系统一层了,如果是操作系统本身,加入此选项
     : [`-N']|[`--omagic']
     把text和data节设置为可读写.同时,取消数据节的页对齐,同时,取消对共享库的连接.如果输出格式
     支持Unix风格的magic number, 把输出标志为'OMAGIC'. 
**** 5. 检错
     : -Wall 产生尽可能多的警告信息
     : -Werror GCC会在所有产生警告的地方停止编译
**** 6. 库文件连接 .a .so
     : 包含文件 -I /usr/dirpath    
     : 库   -L /dirpath   -llibname  不要.a 或.so 后缀
     : 强制静态库 gcc –L /usr/dev/mysql/lib –static –lmysqlclient test.o –o test
     静态库链接时搜索路径顺序：
     1. ld会去找GCC命令中的参数-L
     2. 再找gcc的环境变量LIBRARY_PATH
     3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的

     动态链接时、执行时搜索路径顺序:
     1. 编译目标代码时指定的动态库搜索路径
     2. 环境变量LD_LIBRARY_PATH指定的动态库搜索路径
     3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径
     4. 默认的动态库搜索路径/lib
     5. 默认的动态库搜索路径/usr/lib
     有关环境变量：
     LIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径
     LD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径
**** 7. 调试
     -g:
     -gstabs:
     -gcoff:
     -gdwarf:
**** 8. 优化
     -O0 不优化
     -fcaller-saves: 
**** 9. 目标机选项(Target Option) 交叉编译
     -b machine 
     -V version 哪个版本的gcc
**** 10.配置相关选项(Configuration Dependent Option)
     M680x0 选项
     i386选项
**** 11.总体选项(Overall Option)
     -x language
     明确指出后面输入文件的语言为language (而不是从文件名后缀得到的默认选择).

**** 12.目录选项(DIRECTORY OPTION)
     :-Idir 在头文件的搜索路径列表中添加dir 目录.
     :-Ldir 在`-l'选项的搜索路径列表中添加dir目录.

**** 13.C 文件与 汇编文件编译
     以下涉及到不同编译器对符号的处理问题。比如我们写个汇编文件，汇编后，汇编文件中的符号未变，但是当我们写个C文件再生成目标文件后，源文件中的符号前可能加了下划线，当两者之间发生引用关系时可能无法连接，此时我们会用到下面的命令。
     : --change-leading-char
     : --remove-leading-char
     : --prefix-symbols=string
*** ldconfig 动态链接库管理命令
*** readelf 用于显示elf格式文件的信息
    : -a       --all
**** elf header
     描述了这个elf文件的一些信息，如数据格式是big-endian 或者little-endian
     运行平台、section header 的个数等。
***** section headers是一个表，表中的每个条目描述了一个section，
      如section在文件中的偏移，大小等。
***** section中就是elf文件中"真正"的信息了。

*** objdump 显示二进制文件信息
    : -a|--archive-header 列出 archive头/列表用'ar tv'
    : -d反汇编
    : -S|--source
    : -m MACHINE| --architecture=MACHINE
    : -G|--stabs
*** gdb 功能强大的程序调试器
**** options gdb <program> [core]|[PID]
     -d 指定远程调试时串行接口的线路速度
     -batch 以批处理模式运行
     -c 指定要分析的核心转储文件
     -cd 指定工作目录
     -d 指定搜索源文件的目录
     -e 指定要执行的文件
     -f 调试时以标准格式输出文件名和行号
     -q 安静模式
     -s 指定符号的文件名
     -se 指定符号和要执行的文件名
     -tty 设置标准输出和输入设备
     -x 从指定的文件执行 gdb 命令
**** 常用的调试命令
     shell <command>
     make <make -args>

     运行参数
     set args 设定参数
     show args 查看运行参数
     运行环境
     path<dir> 设定程序的运行路径。
     show paths 查看程序的运行路径。
     set environment varname[=value]设置环境变量。如:set env USER=hchen
     show environment[varname]查看环境变量
     工作目录
     cd <dir>相当于 shell 的 cd 命令。
     pwd 显示当前的工作目录。
     程序的输入输出
     info terminal 显示程序用到的终端的模式
     使用重定向空值程序输出。如 run>outfile
     tty 命令可以指定写输入输出的终端设备。如 tty /dev/ttyb
     列出源码 ;l 3 （开始行） 根据本地文件,没有就列不出 
     设置断点 ;b filename: <行号>;break +offset -offset 当前行号前后
     b filename: <函数名称>;
     b *<函数名称>;
     b *<代码地址> 
     break...if<condition>
     调试程序 ;r 
     继续执行 ;c
     删除断点 ;clear <行号>
     删除断点 ;d <编号>
     执行一行 ;n /s
     结束循环 ;until
     p $1 ($1为历史记录变量); 
     p <数组名>显示数组元素;
     p <*数组指针>显示数组int a[N]的特定值：
     p &var 显示变量地址
     显示变量类型;    whatis p
     显示各类信息   info b 显示断点信息
     finish 退出函数
     info r 寄存器信息
     info local 当前函数中的局部变量信息;
     info prog 显示被调试程序的执行状态
     break *_start+1 由于 gnu 调试时忽略开始处断点, 需要在开始标签处执行一个空指令
     print/d 显示十进制数字
     print/t 显示二进制数字
     print/x 显示 16 进制数字

     x/FMT ADDRESS.
     ADDRESS is an expression for the memory address to examine.
     FMT is a repeat count followed by a format letter and a size letter.
     Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
     t(binary), f(float), a(address), i(instruction), c(char), s(string)
     and z(hex, zero padded on the left).
     Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
     The specified number of objects of the specified size are printed
     according to the format.
     7.0版本以上gdb的disas命令可以携带/m参数，让汇编与c源码同时显示：disas /m main

     使用 x 命令可以查看特定内存的值:
     x/nyz
     其中 n 为要显示的字段数
     y 时输出格式, 它可以是:
     c 用于字符, d 用于十进制, x 用于 16 进制
     z 是要显示的字段长度, 它可以是:
     b 用于字节, h 用于 16 字节, w 用于 32 位字
     如:
     x/42cb 用于显示前 42 字节
     print-stack      查看堆栈               
     u start end      反汇编内存                       
     trace on          反汇编每一条                    
     trace-reg on    每执行一条打印cpu               
     xp /32bx 0x90000  查询从0x90000开始的32个字节内容 
*** make GNU的工程化编译工具
*** eclipse
**** eclipse快捷键
   1. 常用快捷键
   这是使用工具的第一步，熟练使用快捷键对于我们编写程序会起到相当大帮助，所以这里笔者列出的快捷键建议大家必须都掌握。
   Ctrl + 鼠标左键（类、方法、属性的变量名词）：定位跟踪某变量声明或定义的位置
   Ctrl + S：保存当前文件
   Ctrl + X：剪切
   Ctrl + C：复制
   Ctrl + V：粘贴
   Ctrl + D：删除当前行
   Ctrl + F：查找/替换（当前编辑窗口）
   Ctrl + H：全局搜索
   Ctrl + /：注释当前行或多行代码
   Ctrl + Shift + C：注释当前行或多行代码
   Ctrl + Shift + F：格式化当前代码
   Ctrl + Shift + O：缺少的Import语句被加入，多余的Import语句被删除（先把光标定位到需导入包的类名上）
   Ctrl + Shift + S：保存所有文件
   Ctrl + Shift + X：把当前选中的文本全部变为大写
   Ctrl + Shift + Y：把当前选中的文本全部变为小写
   Alt + /：代码智能提示
   Alt + Shift + R：重命名（包括文件名、类名、方法名、变量名等等，非常好用）
   Alt + Shift + J：生成类或方法的注释
   Alt + Shift + S：打开Source窗口（生成get、set方法，实现、覆盖接口或类的方法，很常用）
   Alt + Shift + D, J：如果有main方法入口，则以Debug方式执行代码
   Alt + Shift + X, J：如果有main方法入口，则以Run方式执行代码
 
 
   2. 插件推荐
   Eclipse默认情况下是一个纯净版的，所以功能简单，而开源IDE最为强大的莫过于各种插件，通过使用插件可以帮助我们减少大量编写代码的工作量，
   也帮助我们降低了编写代码的难度，所以懂得安装必要插件，也是熟练使用IDE的鉴证。
   ① hibernate Tools
   Hibernate Tools是一套全新而且完整的面向Hibernate3的工具集合，它包含了Eclipse插件和Ant编译流程，是JBoss Tools的核心组件。使用该插件能大大减少我们
   使用Hibernate的工作量，支持自动生成全部Hibernate的xml文件、javabean、HTML表单文件等。
   安装地址：http://download.jboss.org/jbosstools/updates/development/indigo/
   ② spring IDE
   Spring IDE是Spring官方网站推荐的Eclipse插件，可提供在开发Spring时对Bean定义文件进行提示、验证并以可视化的方式查看各个Bean之间
   的依赖关系等，对基于spring框架的项目开发提供了有力的支持。
   安装地址：http://dist.springsource.com/release/TOOLS/update/e3.6/
   ③ Subclipse
   Subclipse是基于Eclipse的SVN插件，支持所有版本的Eclipse，团队开发必备插件。
   安装地址：http://subclipse.tigris.org/update_1.8.x
   ④ Findbugs
   FindBugs是一个能静态分析源代码中可能会出现Bug的Eclipse插件工具。它检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。
   利用这个工具，就可以在不实际运行程序的情况对软件进行分析。它可以帮助改进代码的质量。
   安装地址：http://findbugs.cs.umd.edu/eclipse/
   ⑤ Sysdeo Tomcat Launcher Plugin
   Sysdeo Tomcat Launcher Plugin是Tomcat的Eclipse插件，帮助我们自动部署tomcat服务器。该插件不是必要插件，可以不装。
   下载地址：http://www.eclipsetotale.com/tomcatPlugin/tomcatPluginV33.zip
 
   插件安装方法
   插件大概有三种安装方法：
   第一种：知道在线安装地址。Eclipse→Help→Install New Software...→地址栏（Work with）中输入安装地址→
   勾选要安装的插件→Next→同意安装协议→Finish→等待安装完毕→按要求重启Eclipse
   第二种：手动从官网下载好插件并手动与Eclipse集成。这种方法一般的思路是：先关闭Eclipse，然后将下载好的插件解压后，复制到Eclipse安装目
   录下的plugins文件夹和features文件夹下，如果必要的话再创建一个link文件，再重新打开Eclipse。
   第三种：在线搜索安装。Eclipse→Help→Eclipse Marketplace...→在搜索栏输入要查找的插件→点击Install按钮→等待安装完毕→按要求重启Eclipse
   这里笔者推荐第一种，如果不知道安装地址，那么就用第三种，第二种方法有时操作错误的话就会出现问题，风险较大，所以不推荐。
 
   3. tomcat
   ① 配置
   Window→Preferences→Server→Runtime Environment→Add→Apache→选择tomcat版本→Next→更改显示名称（Name）
   →Browse...浏览选择事先解压好的tomcat文件夹→选择jre→Finish→OK→打开Servers窗体→右击选择New→Server→选择tomcat版本→
   选择刚配置好的tomcat→Next→选择项目→Finish
   ② 使用心得
   当我们修改某处代码后，启动tomcat发现页面没有变化时，要先关掉tomcat，右击Servers窗口中tomcat服务器图标，选择Clean...
   来清理下编译后的源码，再启动tomcat来重新编译下源码。
   而且如果部署多个，或tomcat异常时，右击Servers窗口中tomcat服务器图标，选择Properties，检查General选项右侧Location是否正确，
   如果不正确则点击Switch Location。
   虽然一个tomcat支持同时启动多个项目，但项目多启动时会很慢，所以如果不是工程项目需要的话，建议tomcat只部署启动一个项目，将暂时无用的项目移除。
   当web项目启动加载时间过长导致tomcat启动失败的话，可适当延长tomcat启动超时的时间（默认45秒），双击Servers窗口中tomcat
   服务器打开tomcat属性窗口，点击右上方Timeouts选项，修改Start(in seconds)的时间。
   eclipse默认情况下是调用tomcat接口模拟启动tomcat，而不是真正启动tomcat，所以大家经常会遇到一件怪事：启动tomcat后，虽然能正常进web项目首页，
   却仅不了tomcat小猫首页（即http://localhost:8080/），并且web项目部署编译后生成的文件也不在tomcat文件目录下的work目录下。
   解决办法：如果tomcat服务器下已经部署了项目，就先要将其全部移除，即右击Servers窗口中tomcat服务器图标，选择Add and Remove...，
   单击Remove All按钮，单击Finish按钮。之后先Clean清理下，再双击tomcat服务器图标打开属性窗口，选择左侧中间Server Locations选项，
   选择下方第二个单选按钮（Use Tomcat installation），并将Deploy path文本框中的"wtpwebapps"（默认值）改为webapps，也就是tomcat中发布
   项目所在的文件夹名字，最好再将项目重新部署到tomcat上，启动tomcat后，就可以看到熟悉的小猫页面了，同时在tomcat文件目录下的work文件夹下也能
   看见熟悉的编译后的页面文件了。
   如果代码出现引入javax.servlet.http.*报错，说明是缺少tomcat的jar包，引入即可。方法：在左侧资源管理器右击项目，选择Build Path下的
   Configure Build Path...，右侧点击Add Library...按钮，选择Server Runtime，点击Next后选择tomcat，Finish。
 
   4. eclipse常见配置
   ● 字体大小
   Window→Preferences→General→Appearance→Colors and Fonts→右侧窗口→Basic选项→双击Text Font
   ● 修改打开文件的编辑浏览器
   Window→Preferences→General→Editors→File Associations→选择要修改的文件类型→在下方选择编辑浏览器
   ● 显示/隐藏代码行号
   Window→Preferences→General→Editors→勾选Show line numbers
   ● 添加自定义jar包Libraries
   Window→Preferences→Java→Build Path→User Libraries→右侧点击New...→输入名称→点击Add JARs...→浏览选择相应的jar文件
   ● 配置tomcat等服务器
   Window→Preferences→Server→Runtime Environment→Add...→选择需要的服务器（以tomcat为例请见上面tomcat配置）
   ● 修改格式化代码的换行判定
   Window→Preferences→Java→Code Style→Formatter→右侧点击New...→输入名称→点击OK→在弹出的窗口选择Line Wrapping选项卡→修改Maixmum line width文本框的值（默认80）
   ● 添加xml的dtd、xsd等xml语法规则文件，实现代码自动提示
   Window→Preferences→XML→XML Catalog→右侧点击Add...→Key type选择Public ID→Location浏览选择你所下载的DTD文件的物理位置→Key填入xml文档头部 <!DOCTYPE sqlMapConfig PUBLIC 后面的那些url地址→OK
   ● 修改编码格式
   右击你要修改的项目/包/类→选择Properties→在Resource选项右侧的Text file encoding下选择你需要的编码格式
   ● 相同名称（包括类名、方法名、变量名等等）以不同背景色标识出来
   见下图：

   或者按快捷键：Alt + Shift + O
 
   在Window→Preferences下有许多配置，这里并不可能介绍很全，所以只列出最为常用的，大家有时间可能多进这里看看，再多点点多试试就明白了。
 
 
   5. SVN
   ● 上传项目至SVN服务器
   右击要上传的项目→Team→Share Project...→SVN→创建新的资源库位置/使用现有的资源库→Next→（输入URL地址）→Next→使用项目名称作为文件夹名→Next→Finish→（输入用户名/密码）
   注意："使用项目名称作为文件夹名"时，要保证SVN服务器端已创建与项目名称相同的文件夹，否则会导入失败。如果SVN端创建的文件夹名与项目名称不符，则在该步骤选择"使用指定的模块名"以确保SVN服务器端与项目名称一致。
   ● 下载项目从SVN服务器
   在资源管理器空白处右击→Import...→选择SVN文件夹→从SVN检出项目→创建新的资源库位置/使用现有的资源库→Next→（输入URL地址）→Next→做为新项目检出，并使用新建项目向导进行配置→Finish→Yes→配置新建项目（如输入项目名称）→OK
   注意：这个"输入URL地址"与上面上传项目的不同，这个URL地址需要输入项目具体所在的文件夹，而上一个因为有"使用项目名称作为文件夹名"这步，所以不需要带文件夹名称。
   ● 提交、更新、还原文件
   选中需要提交的文件、jar包、javabean等文件然后右击→Team→选择相应的操作。（这个基本地球人看看都会，所以就不多说了）
 
 
   所谓学武功首先要被口诀练习基本招式，只有打好基础，才能快速参悟渗透"上层武功"，所以希望笔者写的"基本心法"能助各位菜鸟早日成为威震四海的武林高手！
   pp
   java.lang.RuntimeException: error:  out: An error has occurred.  See the log file
   /home/wuming/.eclipse/org.eclipse.platform_4.6.3_1353066266_linux_gtk_x86_64/configuration/1498476862792.log
	   at org.eclim.installer.step.EclipseInfo.installInstallerPlugin(EclipseInfo.java:185)
	   at org.eclim.installer.step.EclipseInfoStep$1.run(EclipseInfoStep.java:67)
	   at foxtrot.AbstractWorkerThread$1.run(AbstractWorkerThread.java:40)
	   at java.security.AccessController.doPrivileged(Native Method)
	   at foxtrot.AbstractWorkerThread.runTask(AbstractWorkerThread.java:36)
	   at foxtrot.workers.SingleWorkerThread.run(SingleWorkerThread.java:199)
	   at foxtrot.workers.SingleWorkerThread.run(SingleWorkerThread.java:182)
	   at java.lang.Thread.run(Thread.java:748)
** xclip 这个剪切板和 图形下的剪切板不是同一个
*** 保存到剪切板
   ls -al | xclip
*** 文件内容 到剪切板中
   xclip /etc/apt/sources.list
*** 输出到终端
   xclip -o
** 文件系统
*** umount 用于卸载已经加载的文件系统
*** mount 用于加载文件系统到指定的加载点
    mount  [-t vfstype] [-o options] device dir
    1.-t vfstype 文件系统类型
    　　光盘或光盘镜像：iso9660
    　　DOS fat16文件系统：msdos
    　　Windows 9x fat32文件系统：vfat
    　　Windows NT ntfs文件系统：ntfs
    　　Mount Windows文件网络共享：smbfs
    　　UNIX(LINUX) 文件网络共享：nfs
    2.-o options 主要用来描述设备或档案的挂接方式。常用的参数有：
    　　loop：用来把一个文件当成硬盘分区挂接上系统
    　　ro：采用只读方式挂接设备
    　　rw：采用读写方式挂接设备
    　　iocharset：指定访问文件系统所用字符集,不能显示中文 iocharset=cp936
    3.device 要挂接(mount)的设备。
    4.dir设备在系统上的挂接点(mount point)。
    sudo mount -t smbfs -o username=user,password='' //10.0.1.1/windowsshare /mnt 浏览windows 共享文件夹
** 搜索
*** grep 文本搜索
     -C 5 foo file  显示file文件中匹配foo字串那行以及上下5行
     -B 5 foo file  显示foo及前5行
     -A 5 foo file  显示foo及后5行
     －c：只输出匹配行的计数。
     －I：不区分大 小写(只适用于单字符)。
     －h：查询多文件时不显示文件名。
     －l：查询多文件时只输出包含匹配字符的文件名。
     －n：显示匹配行及 行号。
     －s：不显示不存在或无匹配文本的错误信息。
     －v：显示不包含匹配文本的所有行。
     pattern正则表达式主要参数：
     \： 忽略正则表达式中特殊字符的原有含义。
     ^：匹配正则表达式的开始行。
     $: 匹配正则表达式的结束行。
     \<：从匹配正则表达 式的行开始。
     \>：到匹配正则表达式的行结束。
     [ ]：单个字符，如[A]即A符合要求 。
     [ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。
     .：所有的单个字符。
     $ grep ‘test’ d*
     显示所有以d开头的文件中包含 test的行。
     $ grep ‘test’ aa bb cc
     显示在aa，bb，cc文件中匹配test的行。
     $ grep ‘[a-z]\{5\}’ aa
     显示所有包含每个字符串至少有5个连续小写字符的字符串的行。
     $ grep ‘w\(es\)t.*\1′ aa
     如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符(.*)，这些字符后面紧跟着 另外一个es(\1)，找到就显示该行。如果用egrep或grep -E，就不用"\"号进行转义，直接写成’w(es)t.*\1′就可以了。

     grep命令使用复杂实例
     假设您正在’/usr/src/Linux/Doc’目录下搜索带字符 串’magic’的文件：
     $ grep magic /usr/src/Linux/Doc/*
     sysrq.txt:* How do I enable the magic SysRQ key?
     sysrq.txt:* How do I use the magic SysRQ key?
     其中文件’sysrp.txt’包含该字符串，讨论的是 SysRQ 的功能。
     默认情况下，’grep’只搜索当前目录。如果 此目录下有许多子目录，’grep’会以如下形式列出：
     grep: sound: Is a directory
     这可能会使’grep’ 的输出难于阅读。这里有两种解决的办法：
     明确要求搜索子目录：grep -r
     或忽略子目录：grep -d skip
     如果有很多 输出时，您可以通过管道将其转到’less’上阅读：
     $ grep magic /usr/src/Linux/Documentation/* | less
     这样，您就可以更方便地阅读。

     -q 静静地 ，存在则返回 0, 不存在返回 1
     下面还有一些有意思的命令行参数：
     grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，
     grep -l pattern files ：只列出匹配的文件名，
     grep -L pattern files ：列出不匹配的文件名，
     grep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，
     grep -C number pattern files ：匹配的上下文分别显示[number]行，
     grep pattern1 | pattern2 files ：显示匹配 pattern1 或 pattern2 的行，
     grep pattern1 files | grep pattern2 ：显示既匹配 pattern1 又匹配 pattern2 的行。
     grep -n pattern files  即可显示行号信息
     grep -c pattern files  即可查找总行数

*** find 
pathname -options [-print -exec -ok ...]
    关系操作
    -a and
    -or -o or
    -n not 
     : -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' {  } \;，注意{   }和\；之间的空格。
     : -ok：和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。
     : -name   按照文件名查找文件。
     : -perm   按照文件权限来查找文件。
     : -prune  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。
     : -user   按照文件属主来查找文件。
     : -group  按照文件所属的组来查找文件。
     : -mtime -n +n  按照文件的更改时间来查找文件， - n表示文件更改时间距
     : 现在n天以内，+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。
     : -nogroup  查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。
     : -nouser   查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。
     : -newer file1 ! file2  查找更改时间比文件file1新但比文件file2旧的文件。
     : -iname 忽略大小写
     : -type  查找某一类型的文件，诸如：
     + b - 块设备文件。
     + d - 目录。
     + c - 字符设备文件。
     + p - 管道文件。
     + l - 符号链接文件。
     + f - 普通文件。
     + -size n：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。
     + -depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。
     + -fstype：查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到，该配置文件中包含了本系统中有关文件系统的信息。
     + -mount：在查找文件时不跨越文件系统mount点。
     + -follow：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。
     + -cpio：对匹配的文件使用cpio命令，将这些文件备份到磁带设备中。

     另外,下面三个的区别:
     : -amin n   查找系统中最后N分钟访问的文件  -n n天以内;+n n天之前
     : -atime n  查找系统中最后n*24小时访问的文件
     : -cmin n   查找系统中最后N分钟被改变文件状态的文件
     : -ctime n  查找系统中最后n*24小时被改变文件状态的文件
     : -mmin n   查找系统中最后N分钟被改变文件数据的文件
     : -mtime n  查找系统中最后n*24小时被改变文件数据的文件
     : find  ./    -mtime    -1    -type f    -ok   ls -l    {} \;  
     : find .    -perm -007    -exec ls -l {} \;  
     : ! 否定参数
     whereis 查找二进制程序、代码等相关文件路径

** 编辑
*** sed 
    sed [options] 'command' file(s)
    sed [options] -f scriptfile file(s)
    -e<script>或--expression=<script>：以选项中的指定的script来处理输入的文本文件；
    -f<script文件>或--file=<script文件>：以选项中指定的script文件来处理输入的文本文件；
**** sed命令
     a\ 在当前行下面插入文本。
     i\ 在当前行上面插入文本。
     c\ 把选定的行改为新的文本。
     d 删除，删除选择的行。
     D 删除模板块的第一行。
     s 替换指定字符 sed 's/aa/bb/' file 注意/ 符,用来分界
     h 拷贝模板块的内容到内存中的缓冲区。
     H 追加模板块的内容到内存中的缓冲区。
     g 获得内存缓冲区的内容，并替代当前模板块中的文本。
     G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
     l 列表不能打印字符的清单。
     n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
     N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
     p 打印模板块的行。(显示两遍)
     P(大写) 打印模板块的第一行。
     q 退出Sed。
     b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。
     r file 从file中读行。
     t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
     T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
     w file 写并追加模板块到file末尾。  
     W file 写并追加模板块的第一行到file末尾。  
     ! 表示后面的命令对所有没有被选定的行发生作用。  
     = 打印当前行号码。  
     # 把注释扩展到下一个换行符以前。  

     sed替换标记
     g 表示行内全面替换。  
     p 表示打印行。  
     w 表示把行写入一个文件。  
     x 表示互换模板块中的文本和缓冲区中的文本。  
     y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）
     \1 子串匹配标记
     & 已匹配字符串标记

     sed元字符集
     ^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。
     $ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。
     . 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。
     [* 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。
     [] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。  
     [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。
     \(..\) 匹配子串，保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。
     & 保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。
     \< 匹配单词的开始，如:/\<love/匹配包含以love开头的单词的行。
     \> 匹配单词的结束，如/love\>/匹配包含以love结尾的单词的行。
     x\{m\} 重复字符x，m次，如：/0\{5\}/匹配包含5个0的行。
     x\{m,\} 重复字符x，至少m次，如：/0\{5,\}/匹配至少有5个0的行。
     x\{m,n\} 重复字符x，至少m次，不多于n次，如：/0\{5,10\}/匹配5~10个0的行。 

**** sed用法实例
     替换操作：s命令

     替换文本中的字符串：
     sed 's/book/books/' file

     -n选项和p命令一起使用表示只打印那些发生替换的行：
     sed -n 's/test/TEST/p' file

     直接编辑文件选项-i，会匹配file文件中每一行的第一个book替换
     为books：
     sed -i 's/book/books/g' file

     全面替换标记g
     使用后缀 /g 标记会替换每一行中的所有匹配：

     sed 's/book/books/g' file
     当需要从第N处匹配开始替换时，可以使用 /Ng：

     echo sksksksksksk | sed 's/sk/SK/2g'
     skSKSKSKSKSK

     定界符
     以上命令中字符 / 在sed中作为定界符使用，也可以使用任意的定
     界符：
     sed 's:test:TEXT:g'
     sed 's|test|TEXT|g'

     定界符出现在样式内部时，需要进行转义：
     sed 's/\/bin/\/usr\/local\/bin/g'

     删除操作：d命令
     删除空白行：
     sed '/^$/d' file

     删除文件的第2行：
     sed '2d' file

     删除文件的第2行到末尾所有行：
     sed '2,$d' file

     删除文件最后一行：

     sed '$d' file

     删除文件中所有开头是test的行：

     sed '/^test/'d file

     已匹配字符串标记&

     正则表达式 \w\+ 匹配每一个单词，使用 [&] 替换它，& 对应于之
     前所匹配到的单词：

     echo this is a test line | sed 's/\w\+/[&]/g'
     [this] [is] [a] [test] [line]

     所有以192.168.0.1开头的行都会被替换成它自已加localhost：

     sed 's/^192.168.0.1/&localhost/' file
     192.168.0.1localhost

     子串匹配标记\1

     匹配给定样式的其中一部分：

     echo this is digit 7 in a number | sed 's/digit \([0-9]\)/\1/'
     this is 7 in a number

     命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\)
     用于匹配子串，对于匹配到的第一个子串就标记为 \1，依此类推匹
     配到的第二个结果就是 \2，例如：

     echo aaa BBB | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
     BBB aaa

     love被标记为1，所有loveable会被替换成lovers，并打印出来：

     sed -n 's/\(love\)able/\1rs/p' file

     组合多个表达式

     sed '表达式' | sed '表达式'

     等价于：

     sed '表达式; 表达式'

     引用

     sed表达式可以使用单引号来引用，但是如果表达式内部包含变量字
     符串，就需要使用双引号。

     test=hello
     echo hello WORLD | sed "s/$test/HELLO"
     HELLO WORLD

     选定行的范围：,（逗号）

     所有在模板test和check所确定的范围内的行都被打印：

     sed -n '/test/,/check/p' file

     打印从第5行开始到第一个包含以test开始的行之间的所有行：

     sed -n '5,/^test/p' file

     对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：

     sed '/test/,/west/s/$/aaa bbb/' file

     多点编辑：e命令

     -e选项允许在同一行里执行多条命令：

     sed -e '1,5d' -e 's/test/check/' file

     上面sed表达式的第一条命令删除1至5行，第二条命令用check替换
     test。命令的执行顺序对结果有影响。如果两个命令都是替换命令
     ，那么第一个替换命令将影响第二个替换命令的结果。

     和 -e 等价的命令是 --expression：

     sed --expression='s/test/check/' --expression='/love/d' file

     从文件读入：r命令

     file里的内容被读进来，显示在与test匹配的行后面，如果匹配多
     行，则file的内容将显示在所有匹配行的下面：

     sed '/test/r file' filename

     写入文件：w命令  

     在example中所有包含test的行都被写入file里：

     sed -n '/test/w file' example

     追加（行下）：a\命令

     将 this is a test line 追加到以test 开头的行后面：

     sed '/^test/a\this is a test line' file

     在 test.conf 文件第2行之后插入 this is a test line：

     sed -i '2a\this is a test line' test.conf

     插入（行上）：i\命令

     将 this is a test line 追加到以test开头的行前面：

     sed '/^test/i\this is a test line' file

     在test.conf文件第5行之前插入this is a test line：

     sed -i '5i\this is a test line' test.conf

     下一个：n命令

     如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变
     为bb，并打印该行，然后继续：

     sed '/test/{ n; s/aa/bb/; }' file

     变形：y命令

     把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使
     用这个命令：

     sed '1,10y/abcde/ABCDE/' file

     退出：q命令

     打印完第10行后，退出sed

     sed '10q' file

     保持和获取：h命令和G命令

     在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓
     冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将
     打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。

     sed -e '/test/h' -e '$G' file

     在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将
     其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的
     意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它
     放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾
     。在这个例子中就是追加到最后一行。简单来说，任何包含test的
     行都被复制并追加到该文件的末尾。

     保持和互换：h命令和x命令

     互换模式空间和保持缓冲区的内容。也就是把包含test与check的行
     互换：

     sed -e '/test/h' -e '/check/x' file

     脚本scriptfile

     sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名
     。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空
     白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行
     为注释行，且不能跨行。

     sed [options] -f scriptfile file(s)

     打印奇数行或偶数行

     方法1：

     sed -n 'p;n' test.txt  #奇数行
     sed -n 'n;p' test.txt  #偶数行

     方法2：

     sed -n '1~2p' test.txt  #奇数行
     sed -n '2~2p' test.txt  #偶数行

     打印匹配字符串的下一行

     grep -A 1 SCC URFILE
     sed -n '/SCC/{n;p}' URFILE
     awk '/SCC/{getline; print}' URFILE

** 聊天
*** IRC
  /server irc.debian.org
  /join #debian
  /part #debian  离开
  /quit
  要给 foo 发送一条内容为 "Hello Mr. Foo"的私人消息,请输入
  /msg foo Hello Mr. Foo
  

**** irc 频道
     #linuxba 国内linux贴吧
     #c_lang_cn C语言中文irc频道
     ##g讲到这里，必须得推广下自己的频道，##g，作为一个大水比，同时也是小白，
     #archlinux-cn 
     #emacs
     #orz
     #debiancn
     #kali
     #osdev 操作系统开发频道
** 数据库
*** mysql 
***** 导出
      1、导出数据和表结构：
      mysqldump -u用户名 -p密码 数据库名 > 数据库名.sql
      #/usr/local/mysql/bin/   mysqldump -uroot -p abc > abc.sql
      
      2、只导出表结构
      mysqldump -u用户名 -p密码 -d 数据库名 > 数据库名.sql
      #/usr/local/mysql/bin/   mysqldump -uroot -p -d abc > abc.sql

***** 导入    

      1、首先建空数据库
mysql>create database abc;

2、导入数据库
方法一：
（1）选择数据库
mysql>use abc;
（2）设置数据库编码
mysql>set names utf8;
（3）导入数据（注意sql文件的路径）
mysql>source /home/abc/abc.sql;
方法二：
mysql -u用户名 -p密码 数据库名 < 数据库名.sql
#mysql -uabc_f -p abc < abc.sql

建议使用第二种方法导入。

** ssh
1、复制SSH密钥到目标主机，开启无密码SSH登录
ssh-copy-id user@host
如果还没有密钥，请使用ssh-keygen命令生成。

2、从某主机的80端口开启到本地主机2001端口的隧道
ssh -N -L2001:localhost:80 somemachine
现在你可以直接在浏览器中输入http://localhost:2001访问这个网站。

3、将你的麦克风输出到远程计算机的扬声器
dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp
这样来自你麦克风端口的声音将在SSH目标计算机的扬声器端口输出，但遗憾的是，声音质量很差，你会听到很多嘶嘶声。

4、比较远程和本地文件
ssh user@host cat /path/to/remotefile | diff /path/to/localfile –
在比较本地文件和远程文件是否有差异时这个命令很管用。

5、通过SSH挂载目录/文件系统
sshfs name@server:/path/to/folder /path/to/mount/point
从http://fuse.sourceforge.net/sshfs.html下载sshfs，它允许你跨网络安全挂载一个目录。

6、通过中间主机建立SSH连接
ssh -t reachable_host ssh unreachable_host
Unreachable_host表示从本地网络无法直接访问的主机，但可以从reachable_host所在网络访问，这个命令通过到reachable_host的"隐藏"连接，创建起到unreachable_host的连接。

7、将你的SSH公钥复制到远程主机，开启无密码登录 – 简单的方法
ssh-copy-id username@hostname

8、直接连接到只能通过主机B连接的主机A
ssh -t hostA ssh hostB
当然，你要能访问主机A才行。

9、创建到目标主机的持久化连接
ssh -MNf <user>@<host>
在后台创建到目标主机的持久化连接，将这个命令和你~/.ssh/config中的配置结合使用：

Host host
ControlPath ~/.ssh/master-%r@%h:%p
ControlMaster no

所有到目标主机的SSH连接都将使用持久化SSH套接字，如果你使用SSH定期同步文件（使用rsync/sftp/cvs/svn），这个命令将非常有用，因为每次打开一个SSH连接时不会创建新的套接字。

10、通过SSH连接屏幕
ssh -t remote_host screen –r
直接连接到远程屏幕会话（节省了无用的父bash进程）。

11、端口检测（敲门）
knock <host> 3000 4000 5000 && ssh -p <port> user@host && knock <host> 5000 4000 3000
在一个端口上敲一下打开某个服务的端口（如SSH），再敲一下关闭该端口，需要先安装knockd，下面是一个配置文件示例。

[options]
logfile = /var/log/knockd.log
[openSSH]
sequence = 3000,4000,5000
seq_timeout = 5
command = /sbin/iptables -A INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT
tcpflags = syn
[closeSSH]
sequence = 5000,4000,3000
seq_timeout = 5
command = /sbin/iptables -D INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT
tcpflags = syn

12、删除文本文件中的一行内容，有用的修复
ssh-keygen -R <the_offending_host>
在这种情况下，最好使用专业的工具。

13、通过SSH运行复杂的远程shell命令
ssh host -l user $(<cmd.txt)

更具移植性的版本：
ssh host -l user "`cat cmd.txt`"

14、通过SSH将MySQL数据库复制到新服务器
mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost "mysql -uUSER -pPASS NEW_DB_NAME"

通过压缩的SSH隧道Dump一个MySQL数据库，将其作为输入传递给mysql命令，我认为这是迁移数据库到新服务器最快最好的方法。

15、删除文本文件中的一行，修复"SSH主机密钥更改"的警告
sed -i 8d ~/.ssh/known_hosts

16、从一台没有SSH-COPY-ID命令的主机将你的SSH公钥复制到服务器
cat ~/.ssh/id_rsa.pub | ssh user@machine "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
如果你使用Mac OS X或其它没有ssh-copy-id命令的*nix变种，这个命令可以将你的公钥复制到远程主机，因此你照样可以实现无密码SSH登录。

17、实时SSH网络吞吐量测试
yes | pv | ssh $host "cat > /dev/null"

通过SSH连接到主机，显示实时的传输速度，将所有传输数据指向/dev/null，需要先安装pv。
如果是Debian：
apt-get install pv

如果是Fedora：
yum install pv
（可能需要启用额外的软件仓库）。

18、如果建立一个可以重新连接的远程GNU screen
ssh -t user@some.domain.com /usr/bin/screen –xRR

人们总是喜欢在一个文本终端中打开许多shell，如果会话突然中断，或你按下了"Ctrl-a d"，远程主机上的shell不会受到丝毫影响，你可以重新连接，其它有用的screen命令有"Ctrl-a c"（打开新的shell）和"Ctrl-a a"（在shell之间来回切换），请访问http://aperiodic.net/screen/quick_reference阅读更多关于screen命令的快速参考。

19、继续SCP大文件
rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file

它可以恢复失败的rsync命令，当你通过VPN传输大文件，如备份的数据库时这个命令非常有用，需要在两边的主机上安装rsync。

rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file local -> remote

或

rsync –partial –progress –rsh=ssh $user@$host:$remote_file $destination_file remote -> local

20、通过SSH W/ WIRESHARK分析流量
ssh root@server.com ‘tshark -f "port !22″ -w -' | wireshark -k -i –

使用tshark捕捉远程主机上的网络通信，通过SSH连接发送原始pcap数据，并在wireshark中显示，按下Ctrl+C将停止捕捉，但也会关闭wireshark窗口，可以传递一个"-c #"参数给tshark，让它只捕捉"#"指定的数据包类型，或通过命名管道重定向数据，而不是直接通过SSH传输给wireshark，我建议你过滤数据包，以节约带宽，tshark可以使用tcpdump替代：

ssh root@example.com tcpdump -w – ‘port !22′ | wireshark -k -i –

21、保持SSH会话永久打开
autossh -M50000 -t server.example.com ‘screen -raAd mysession’

打开一个SSH会话后，让其保持永久打开，对于使用笔记本电脑的用户，如果需要在Wi-Fi热点之间切换，可以保证切换后不会丢失连接。

22、更稳定，更快，更强的SSH客户端
ssh -4 -C -c blowfish-cbc
强制使用IPv4，压缩数据流，使用Blowfish加密。

23、使用cstream控制带宽
tar -cj /backup | cstream -t 777k | ssh host ‘tar -xj -C /backup’

使用bzip压缩文件夹，然后以777k bit/s速率向远程主机传输。Cstream还有更多的功能，请访问http://www.cons.org/cracauer/cstream.html#usage了解详情，例如：

echo w00t, i’m 733+ | cstream -b1 -t2

24、一步将SSH公钥传输到另一台机器
ssh-keygen; ssh-copy-id user@host; ssh user@host

这个命令组合允许你无密码SSH登录，注意，如果在本地机器的~/.ssh目录下已经有一个SSH密钥对，ssh-keygen命令生成的新密钥可能会覆盖它们，ssh-copy-id将密钥复制到远程主机，并追加到远程账号的~/.ssh/authorized_keys文件中，使用SSH连接时，如果你没有使用密钥口令，调用ssh user@host后不久就会显示远程shell。

25、将标准输入（stdin）复制到你的X11缓冲区
ssh user@host cat /path/to/some/file | xclip
你是否使用scp将文件复制到工作用电脑上，以便复制其内容到电子邮件中？xclip可以帮到你，它可以将标准输入复制到X11缓冲区，你需要做的就是点击鼠标中键粘贴缓冲区中的内容。

** 触摸板和小红点
    关闭:sudo modprobe -r psmouse
    开启:sudo modprobe  psmouse
    只关闭触摸板: synclient touchpadoff=1
    开启:synclient touchpadoff=0
** 屏幕截图
  import -frame window.tif
*** shutter 
    1. 里面的快捷键命令用：shutter -s 或者shutter –select
    2. 截取当前活动窗口：shutter -a （a表示active）
    3. 截取拖拉区域：shutter -s （s是select之意），拖拉出矩形区域后按Enter。 

** 中文语音朗读ekho
** 网络
*** remmina 远程桌面
*** 无线网
   # iwconfig ath0 essid lincoln 这样就意味着你正在加入一个ESSID为lincoln的无线网络
   nm-connection-editor
*** 网速 nload
*** 网络请求 
**** curl
     post  curl -i -X POST -H 'Content-type':'application/json' -d {"BTime":""$btime""} http://api.baidu.com
     curl Post Json
     $ curl -i -X POST -H "'Content-type':'application/x-www-form-urlencoded', 'charset':'utf-8', 'Accept': 'text/plain'" -d 'json_data={"a":"aaa","b":"bbb","data":[{"c":"ccc","d":"ddd","keywords":[{"e": "eee", "f":"fff", "g":"ggg"}]}]}' url
     返回信息：
     
     HTTP/1.1 200 OK
     Server: Apache-Coyote/1.1
     Set-Cookie: JSESSIONID=02565379F21852B33D0367FB7982FE1C; Path=/; HttpOnly
     Content-Type: application/json;charset=UTF-8
     Transfer-Encoding: chunked
     Date: Tue, 22 Oct 2013 10:48:24 GMT
     
 这里想要post Json数据到接口上，需要设置好Header，也就是：'Content-type':'application/x-www-form-urlencoded', 'charset':'utf-8', 'Accept': 'text/plain'。
 之前一直认为是设置好Content-Type=application/json即可，但是如果有中文就会遇到需要encode的地方了。

 get 
 curl http://mywebsite.com/index.php?a=1&b=2&c=3

 $_GET只能获取到参数a

 由于url中有&，其他参数获取不到，在linux系统中& 会使进程系统后台运行

 必须对&进行下转义才能$_GET获取到所有参数

 curl http://mywebsite.com/index.php?a=1\&b=2\&c=3
 url 为 http://mywebsite.com/index.php?a=1&b=2&c=3

 web形式下访问url地址，使用 $_GET是可以获取到所有的参数
 curl  -s  http://mywebsite.com/index.php?a=1&b=2&c=3
 然而在linux下，上面的例子 $_GET只能获取到参数 a

 由于url中有&其他参数获取不到，在linux系统中 &会使进程系统后台运行
 必须对 &进行下转义才能 $_GET获取到所有参数

 curl  -s  http://mywebsite.com/index.php?a=1\&b=2\&c=3

 当然，最简单的方法 用双引号把整个url引起来就ok了

 curl  -s  "http://mywebsite.com/index.php?a=1&b=2&c=3"

 # 顺便再提一下 curl 中 post 传参数的方法
 curl  -d  'name=1&pagination=2'demoapp.sinap.com/worker.php
 # 这样 demoapp.sinap.com 站点中的 worker.php 脚本，就能得到 $_POST['name'] 和 $_POST[''pagination] 对应的值     
 # 再补充下curl获得网站信息的方法（ -s 表示静默  --head 表示取得head信息 ）
 curl  -s  --head  www.sina.com

*** 状态
    sudo netstat -ntupl 
    n表示不查询dns t表示tcp协议 u表示udp协议 p表示查询占用的程序 l表示查询正在监听的程序
** usb
   lsusb
** 垃圾清理  
 bleachbit 工具
 删除多余手册 
 #+BEGIN_SRC bash
  cd /usr/share/man
  find ./ -maxdepth 1 -type d | tail -n +2 | grep -E -v '(en|zh|man).*' | 
     while read d; do rm -rf $d; done
 #+END_SRC

** 用户, 组
   # useradd -s /bin/sh -g group –G adm,root –d /usr/gem -m gem
   此命令新建了一个用户gem，该用户的登录Shell是 /bin/sh，它属于group用户组，
   同时又属于adm和root用户组，其中group用户组是其主组。
   
   userdel -r 把用户的主目录一起删除
   
   加入sudo 组
   vim /etc/sudoers, 找到一行root ALL=(ALL)   ALL的下一行，按i，插入模式，输入
   xxx(你的用户名)  ALL=(ALL)   ALL
   
   或者 用有权限的组，然后加入组 usermod -a -G sudo USER
   
   指定当前用户切换到其他组 newgrp root
*** 批量添加用户
 #+BEGIN_SRC 
 user001::600:100:user:/home/user001:/bin/bash
 user002::601:100:user:/home/user002:/bin/bash
 user003::602:100:user:/home/user003:/bin/bash
 user004::603:100:user:/home/user004:/bin/bash
 user005::604:100:user:/home/user005:/bin/bash
 user006::605:100:user:/home/user006:/bin/bash
 #+END_SRC

** latex 
 书名：The Latex Companion, 排版强
** 服务器
*** tomcat
   开启 
   sudo ./bin/startup.sh
   验证tomcat配置和安装是否成功：
   在浏览器中输入：http://localhost:8080/
   关闭tomcat：
   sudo ./bin/shutdown.sh

*** apache 
**** 配置  
     创建文件 other
     #+BEGIN_SRC conf
         <VirtualHost *>  
             # 在ServerName后加上你的网站名称  
             ServerName www.yoursite.com
             # 如果你想多个网站名称都取得相同的网站，可以加在ServerAlias后加上其他网站别名。  
             # 别名间以空格隔开。  
             ServerAlias ftp.yoursite.com 
             # 在ServerAdmin后加上网站管理员的电邮地址，方便别人有问题是可以联络网站管理员。  
             ServerAdmin webmaster@yoursite.com  
             # 在DocumentRoot后加上存放网站内容的目录路径(用户的个人目录)  
             DocumentRoot  "/home/username/mysite/"   
             <Directory  /home/username/mysite/ >  
                   Options Indexes FollowSymLinks MultiViews  
                   AllowOverride None  
                   Order allow,deny  
                   allow from all  
             </Directory>  
       </VirtualHost>  
     #+END_SRC
**** 链接
     sudo ln -s /etc/apache2/sites-available/other /etc/apache2/sites-enabled/other  
**** 检查
     sudo apache2ctl configtest 
** 窗口管理器
*** i3 
**** 安装xserver
     安装必需驱动和X环境：apt-get install xserver-xorg-input-evdev xserver-xorg-input-kbd xserver-xorg-input-mouse xserver-xorg-video-（查看下方）
  如果是虚拟机，此处使用xserver-xorg-video-vesa和xserver-xorg-video-vmware
  如果是Intel核显，用xserver-xorg-video-intel
  如果是A卡，xserver-xorg-video-ati
  如果是N卡，xserver-xorg-video-nvidia
  （A卡和N卡可能需要闭源驱动才能搞定，具体查找官方wiki。）


  装完了这些之后再安装i3之类的其他软件包，就不会因为依赖没解决好而把所有xserver包全部安装，只需要装自己必需的就可以了。
**** 安装i3
  执行apt-get install i3 zsh vim sakura lightdm ttf-wqy-zenhei
  其 中sakura是个terminal，不自己选择的话i3会默认依赖rxvt，个人不喜欢这个终端，gnome-terminal，xfce4- terminal，包括tilda，guake等等其他的终端都会有一大堆的依赖，sakura的功能足够，而且并没有依赖桌面环境。lightdm是登 录管理器，也可以不要，自己执行startx。
  安装的过程中可以ctrl+alt+f2切换到另一个tty编辑一下语言环境——
  nano /etc/environment
  添加这两行
  LANG=zh_CN.UTF-8
  LC_ALL=zh_CN.UTF-8

  等安装完毕就可以重启了。


   Vbox虚拟机可以直接安装aptget install virtualboxguestx11 virtualboxguestutils，之后就能实现和主机的复制粘贴，共享文件夹之类操作。

**** 登录配置
  登录之后会提示你配置文件缺失，是否自动建立一个，回车就好。
  选择win或者alt键，作为mod键（意思就是，在i3里面的各种操作，都是靠这个键和其他按键组合完成），选一个自己喜欢的回车。

  然后就会剩下一个光秃秃的界面，除了地下的一条状态栏之外啥都没有。同时按下刚刚设置的mod键（alt或者win）和回车键，会打开全屏状态的终端，这里是sakura~

**** 默认快捷键
  mod键+回车，打开新的终端。无聊的话可以打开无数个…
  mod键+h，表示下一次在当前窗口右侧打开终端，
  mod键+v，表示下一次在当前窗口下方打开终端。
  简单操作一下就会理解，上一个布局——

**** 再安装一些需要的软件
     apt-get install xcompmgr sudo fcitx fcitx-rime feh midori network-manager-gnome volumeicon-alsa pulseaudio pavucontrol xorg lxappearance fonts-arphic-uming flashplugin-nonfree
  其中xcompmgr可以用来实现终端透明，fcitx输入 法，feh是图片查看器并且我们需要用它来设置桌面背景，
  midori浏览器，networkmanager管理网络（就是nm- applet）volumeicon用来当控制音量的小插件，pulseaudio pavucontrol 驱动声卡配置声音（debian好像不要alsa了？xfce4里面的混音器都拆掉了），xorg里面有个xrandr是需要的，可以用来添加系统托盘， lxappearance用来调节gtk主题和字体，uming字体可以防止flash里面中文方块。


  开启systemtray，我们可以在桌面右下角方便的操作网络、音量、输入法——
  在终端键入xrandr --output 然后空格使用补全，会自动弹出你可用的显示器，（我在虚拟机里是VGA-0，自己机器上是HDMI，这个应该和硬件有关，不需要管。）然后添加 --primary
  整条命令最终看起来是这样的：xrandr --output VGA-0 --primary


  编辑i3的配置文件，在文件最底部添加一下指令
  vim .config/i3/config（需要退出root状态，仅编辑自己home下的config）


  # Autostart
  exec --no-startup-id xcompmgr &
  exec --no-startup-id nm-applet
  exec --no-startup-id fcitx
  exec --no-startup-id xrandr --output VGA-0 --primary
  exec --no-startup-id volumeicon


  再重启一下，（或者按下ctrl+alt+e，然后鼠标点击yes，exit x回到lightdm界面重新登录。）
  现在进入桌面，应该可以看到左下角已经有了输入法\网络\音量调节的按钮。如图——


  至此，基本的i3环境就算完毕了。一些操作——
  mod键+d，可以打开dmenu，会在屏幕顶部打开一个“启动器”，键入命令的同时后方会自动显示可用的命令，这里可以使用tab补全。

  关闭窗口：shift+mod键+q
  调整窗口大小：同时按下mod键+r，左下角会有红色字体提示resize，按下方向键或者hjkl查看窗口状况~esc退出调整。

  设置壁纸—>feh --bg-scale /path/to/your/pictures(自行替换)
  添加到config的autostart部分可以实现开机自动设置壁纸。


  补充，刚刚给自己组了两个屏幕，i3的双屏需要自己稍微配置以下才能好用。
  方法：在自动启动部分添加如下命令（删掉原来的语句）
  exec xrandr --output HDMI1 --mode 1920x1080 --right-of VGA1
  exec xrandr --output VGA1 --mode 1440x900 --left-of HDMI1
  同时，系统托盘的显示也要进行一下调整
  修改为
  bar {
  status_command i3status
  tray_output HDMI1 
  tray_output VGA1
  }
  简单解释一下。
  启动i3时，使用xrandr配置双屏。--mode指定分辨率，--right-of或者--left-of指定显示器位置。系统托盘部分添加新屏幕的名称。


  配 置之后，两台显示器都能以各自的分辨率展示，workspace1是显示器1，2是显示器2，打开新workspace的方式和之前相同，不过会固定在你 打开的显示器上，比如在显示器1打开workspace3，那这个工作区就会“绑定”显示器1上，在显示器2里面按mod+3会跳转回显示器1。说的有点 绕，一会儿上图。

** 屏幕管理
*** xrandr
      xrandr 命令行可以很方便地切换双屏，常用方式如下，其他的可以自己探索：
  xrandr --output VGA --same-as LVDS --auto
           打开外接显示器(最高分辨率)，与笔记本液晶屏幕显示同样内容（克隆）
  xrandr --output VGA --same-as LVDS --mode 1024x768
           打开外接显示器(分辨率为1024x768)，与笔记本液晶屏幕显示同样内容（克隆）
  xrandr --output VGA --right-of LVDS --auto
           打开外接显示器(最高分辨率)，设置为右侧扩展屏幕
  xrandr --output VGA --off
            关闭外接显示器
  xrandr --output VGA --auto --output LVDS --off
          打开外接显示器，同时关闭笔记本液晶屏幕（只用外接显示器工作）
  xrandr --output VGA --off --output LVDS --auto
          关闭外接显示器，同时打开笔记本液晶屏幕 (只用笔记本液晶屏)
  （最后两种情况请小心操作，不要误把两个屏幕都关掉了。。。。）

* 正则 
  foo ——————字符串"foo" 
  ^foo ——————以"foo"开头的字符串 
  foo$ ——————以"foo"结尾的字符串 
  ^foo$ ——————"foo"开头和结尾，（只能是他自己 ） 
  [abc]—————— a 或者b 或者c 
  [a-z] —————— a到z之间任意字母 
  [^A-Z]——————除了 A-Z这些之外的字符 
  (gif|jpg)——————"gif"或者 "jpeg" 
  [a-z]+—————— 一个或者多个 a到z之间任意字母
  [0-9.-]—————— 0-9之间任意数字，或者 点 或者 横线
  ^[a-zA-Z0-9_]{1,}$—————— 至少一个字母数字下划线 
  ([wx])([yz])—————— wy或wz或xy或xz
  [^A-Za-z0-9]—————— 字符数字之外的字符 
  ([A-Z]{3}|[0-9]{4})—————— 三个大写字母或者4个数字
  \B 匹配非单词边界。
  'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。 
  \cx 匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
 \d 匹配一个数字字符。等价于 [0-9]。 
\D 匹配一个非数字字符。等价于 [^0-9]。
 \f 匹配一个换页符。等价于 \x0c 和 \cL。 
 \n 匹配一个换行符。等价于 \x0a 和 \cJ。
 \r 匹配一个回车符。等价于 \x0d 和 \cM。 
\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 
\t 匹配一个制表符。等价于 \x09 和 \cI。 
\v 匹配一个垂直制表符。等价于 \x0b 和 \cK。
 \w 匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。 
\W 匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。 
\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码。. 
\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。 \n 标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \nm 标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。 \nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。 常用的正则表达式 1、非负整数："^\d+$" 2、正整数："^[0-9]*[1-9][0-9]*$" 3、非正整数："^((-\d+)|(0+))$" 4、负整数："^-[0-9]*[1-9][0-9]*$" 5、整数："^-?\d+$" 6、非负浮点数："^\d+(\.\d+)?$" 7、正浮点数："^((0-9)+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$" 8、非正浮点数："^((-\d+\.\d+)?)|(0+(\.0+)?))$" 9、负浮点数："^(-((正浮点数正则式)))$" 10、英文字符串："^[A-Za-z]+$" 11、英文大写串："^[A-Z]+$" 12、英文小写串："^[a-z]+$" 13、英文字符数字串："^[A-Za-z0-9]+$" 14、英数字加下划线串："^\w+$" 15、E-mail地址："^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$" 16、URL："^[a-zA-Z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\s*)?$" PHP 常用正则表达式整理 表单验证匹配 验证账号，字母开头，允许 5-16 字节，允许字母数字下划线：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 验证账号，不能为空，不能有空格，只能是英文字母：^\S+[a-z A-Z]$ 验证账号，不能有空格，不能非数字：^\d+$ 验证用户密码，以字母开头，长度在 6-18 之间：^[a-zA-Z]\w{5,17}$ 验证是否含有 ^%&',;=?$\ 等字符：[^%&',;=?$\x22]+ 匹配Email地址：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* 匹配腾讯QQ号：[1-9][0-9]{4,} 匹配日期，只能是 2004-10-22 格式：^\d{4}\-\d{1,2}-\d{1,2}$ 匹配国内电话号码：^\d{3}-\d{8}|\d{4}-\d{7,8}$ 评注：匹配形式如 010-12345678 或 0571-12345678 或 0831-1234567 匹配中国邮政编码：^[1-9]\d{5}(?!\d)$ 匹配身份证：\d{14}(\d{4}|(\d{3}[xX])|\d{1}) 评注：中国的身份证为 15 位或 18 位 不能为空且二十字节以上：^[\s|\S]{20,}$ 字符匹配 匹配由 26 个英文字母组成的字符串：^[A-Za-z]+$ 匹配由 26 个大写英文字母组成的字符串：^[A-Z]+$ 匹配由 26 个小写英文字母组成的字符串：^[a-z]+$ 匹配由数字和 26 个英文字母组成的字符串：^[A-Za-z0-9]+$ 匹配由数字、26个英文字母或者下划线组成的字符串：^\w+$ 匹配空行：\n[\s| ]*\r 匹配任何内容：[\s\S]* 匹配中文字符：[\x80-\xff]+ 或者 [\xa1-\xff]+ 只能输入汉字：^[\x80-\xff],{0,}$ 匹配双字节字符(包括汉字在内)：[^\x00-\xff] 匹配数字 只能输入数字：^[0-9]*$ 只能输入n位的数字：^\d{n}$ 只能输入至少n位数字：^\d{n,}$ 只能输入m-n位的数字：^\d{m,n}$ 匹配正整数：^[1-9]\d*$ 匹配负整数：^-[1-9]\d*$ 匹配整数：^-?[1-9]\d*$ 匹配非负整数（正整数 + 0）：^[1-9]\d*|0$ 匹配非正整数（负整数 + 0）：^-[1-9]\d*|0$ 匹配正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 匹配负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 匹配浮点数：^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$ 匹配非负浮点数（正浮点数 + 0）：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$ 匹配非正浮点数（负浮点数 + 0）：^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$ 其他 匹配HTML标记的正则表达式（无法匹配嵌套标签）：<(\S*?)[^>]*>.*?</\1>|<.*? /> 匹配网址 URL ：[a-zA-z]+://[^\s]* 匹配 IP 地址：((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?) 匹配完整域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.? 提示 上述正则表达式通常都加了 ^ 与 $ 来限定字符的起始和结束，如果需要匹配的内容包括在字符串当中，可能需要考虑去掉 ^ 和 $ 限定符。 以上正则表达式仅供参考，使用时请检验后再使用s
* 一般问题
** 中文乱码  
*** unzip中文乱码 
zip中文乱码 unzip -O cp936 /-O gbk gb18030 都可以
指定目录 -d
 或 7z 或
#+BEGIN_SRC python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import zipfile

#print "Processing File " + sys.argv[1]

file=zipfile.ZipFile(sys.argv[1],"r");
for name in file.namelist():
    utf8name=name.decode('gbk')
#    print "Extracting " + utf8name
    pathname = os.path.dirname(utf8name)
    if not os.path.exists(pathname) and pathname!= "":
        os.makedirs(pathname)
    data = file.read(name)
    if not os.path.exists(utf8name):
        fo = open(utf8name, "w")
        fo.write(data)
        fo.close
file.close()
#+END_SRC

** 重启输入法
   #!/bin/sh
   pidof fcitx | xargs kill
   pidof sogou-qimpanel | xargs kill
   nohup fcitx  1>/dev/null 2>/dev/null &
   nohup sogou-qimpanel  1>/dev/null 2>/dev/null &
** xrandr 
    显示显示器 xrandr -q
    关闭笔记本，开外置：xrandr --output VGA-1-1 --auto --output LVDS-1-1 --off
** 识别usb
   最近项目需要在Android源码中进行开发，于是在Virtual Box中安装Ubuntu，郁闷的是插上usb连接线，连接上手机，Ubuntu不能自动识别连接设备。在网上搜索了很多解决办法，各抒己见，最终找到一种可行的解决方案：
 1、安装usbmount
 $ sudo apt-get install usbmount  
 2、更改usbmount配置文件
 $ sudo gedit /etc/usbmount/usbmount.conf  
 3、在打开的文件中找到FILESYSTEM，并在其中添加vfat,ntfs
 4、FS_MOUNTOPTIONS这个选项里加入”"-fstype= vfat,iocharset=utf8,codepage=936,umask=000,users”
 5、重启udev
 $sudo /etc/init.d/udev restart  
 6、重启Ubuntu
 $ sudo reboot  
 重启之后即可识别USB。
   
** 服务systemctl 
 systemctl is-enabled servicename.service #查询服务是否开机启动
 systemctl enable *.service #开机运行服务
 systemctl disable *.service #取消开机运行
 systemctl start *.service #启动服务
 systemctl stop *.service #停止服务
 systemctl restart *.service #重启服务
 systemctl reload *.service #重新加载服务配置文件
 systemctl status *.service #查询服务运行状态 
** 开机启动
   update-rc.d使用
   update-rc.d是一个Perl脚本，是用来自动升级System V类型初始化脚本，简单来说就是哪些东西是你想要在系统引导初始化的时候运行的，哪些是希望在关机或重启时候停止的，都可以用它来帮你设置。这些脚本的连接位于/etc/rcX.d/下（X代表0～6），对应脚本位于/etc/init.d/下。
   1、设置启动项：
   update-rc.d <serviceName> start <order> <runlevel>
  
 2、设置停止项：
 update-rc.d <serviceName> stop <order> <runlevel>
 设置启动和停止可以写在一起，例如：
 sudo update-rc.d <serviceName> start 20 1 2 3 4 5 . stop 60 0 6 .   
 一定要注意，写在一起的时候后面的两个“.”符号一定要有，不然报错。

 3、从所有的运行级别中删除制定的启动项
 update-rc.d -f <serviceName> remove
 示例
 根据上面的介绍，如何将一个软件安装为服务也就比较清楚了，那就是在/etc/init.d添加一个服务的启动脚本，然后在需要启动服务的对应级别中/etc/rc[0~6].d按照文件名格式添加一个指向/etc/init.d的脚本符号链接。
 以apache2为例，默认情况下，apache2编译安装在/usr/local/apache2，apache2的服务器启动脚本是/usr/local/apache2/bin/apachectl，那么安装服务就是要把此apachectl拷贝到需要启动apache2服务器的运行级别对应的/etc/rc[0~6].d目录下，一半来说ubuntu的运行级别为2，所以也就是拷贝到/etc/rc2.d下。

 sudo cp /usr/local/apache2/bin/apachectl /etc/init.d/apache2  
 如果手动添加的话：
 sudo ln -s /etc/init.d/apache2 /etc/rc2.d/S80apache2  
 重启服务器后，就可以看到apache2自动启动了。
 这时如果想要停止或重启apache2也可以使用以下命令：

 service apache2 stop  
 service apache2 restart  

** 查看错误
     vi /var/log/message
   然后查找你所需要的内容把    
   您也可以grep warning这样的条目
   使用tail和grep只是为了使您查看起来更方便简捷更有针对性而已哦
** 临时域名
    ./natapp -authtoken=e5eb817e91aeee83 
* arch linux
** install
*** pre-installation
    need 800MB of diskspace ;network;
**** 1.1 verify the boot mode
     if exist the efivars directory,then UEFI motherboard boot
     ls /sys/firmware/efi/efivars
     else the system is booted in BIOS(or CSM) mode
**** 1.2 set the keyboard layout
     default console keymap is US.
     all: ls /usr/share/kbd/keymaps/**/*.map.gz
     layout changed: loadkeys de-latin1
     console fonts: /usr/share/kbd/consolefonts/
     set font: setfont
**** 1.3 connect the Internet
     default wired devices: dhcpcd
     different network: systemd-networkd and netctl;first stop dhcpcd@interface.service
     无线 wifi-menu
**** 1.4 update the system clock
     timedatectl set-ntp true
     check the service status: timedatectl status
     timedatectl set-timezone Asia/Shanghai
**** 1.5 partition the disks
     fdisk or parted for both MBR and GPT, or
     gdisk for GPT only
     display partitions: lsblk or fdisk -l
     /(root) directory must be available
     如果要LVM,disk encryption or RAID,现在就做
**** 1.6 format the partions
     mkfs,mkswap
**** 1.7 Mount the file system
     mount /dev/sda1 /mnt
     mount /dev/XX /mnt/boot 100MB 够了
     mount /dev/xxx /mnt/home
     swapon /dev/xxx
*** Installation
**** 2.1 Select the mirrors
     packages to be installed from the mirror servers,need downloaded.
     defined in /etc/pacman.d/mirrorlist 
**** 2.2 Install the base packages
     base package group: pacstrap /mnt base base-devel
     ohter packages: append their names to pacstrap or pacman
*** Configure the system
**** 3.1 Fstab (-U or -L to define by UUID or labels)
     genfstab -U /mnt >> /mnt/etc/fstab
     check the resulting file in /mnt/etc/fstab
**** 3.2 Chroot
     arch-chroot /mnt
**** Time zone
     list-timezones
     set: ln -s /usr/share/zoneinfo/zone/subzone /etc/localtime
     generate /etc/adjtime: hwclock --systohc --utc
**** Locale
     uncomment en_US.UTF-8 UTF-8 and other needed localizations in
     /etc/locale.gen,and generate them with:
     # locale-gen
     set the LANG variable 
     # echo LANG=en_US.UTF-8 > /etc/locale.conf
     if required,set the console keymap and font in vconsole.conf
**** Hostname
     create:
     # echo myhostname >/etc/hostname
     add: /etc/hosts
     127.0.1.1 myhostname.localdomain myhostname
**** Network configuration
     For wireless configuration, install the iw,wpa_supplicant,and dialog packages, and firmware packages.
     systemctl enable dhcpcd@enp2s0.service
**** Initramfs RAM磁盘
     create a new initial RAM disk with:
     # mkinitcpio -p linux
**** Root password
     # passwd
**** Boot loader
     pacman -S grub
     grub-install /dev/sda
     grub-mkconfig -o /boot/grub/grub.cfg
**** 用户管理
     useradd -m -g users -G wheel -s /bin/bash ikke
     passwd ikke

     安装 sudo
     pacman -S sudo
     打开 /etc/sudoers 文件，找到 root ALL=(ALL) ALL 并依葫芦画瓢添加 ikke ALL=(ALL) ALL 即可。

*** Reboot
    # exit 
    # umount -R /mnt
    # reboot
*** Post-installation
