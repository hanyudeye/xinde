* 数据类型(对象会有类型，但lisp(变量） 对象的类型可以变）
** 基本类型（自带), 解释型语言不强制声明类型, 但要注意类型, 编程类型
interger, float, cons, symbol, string, vector, hash-table, subr, byte-code function
整数，浮点，字符，符号（函数），序列, 列表, 数组、向量，字符串，矢量（一维数组, 用一些符号存储方向）
布尔，哈希表（超快查找表），宏，字节码，
** editing 类型
*** Buffer Type::         The basic object of editing.
*** Marker Type::         A position in a buffer.
*** Window Type::         Buffers are displayed in windows.
*** Frame Type::          Windows subdivide frames.
*** Terminal Type::       A terminal device displays frames.
*** Window Configuration Type::   Recording the way a frame is subdivided.
*** Frame Configuration Type::    Recording the status of all frames.
*** Process Type::        A subprocess of Emacs running on the underlying OS.
*** Stream Type::         Receive or send characters.
*** Keymap Type::         What function a keystroke invokes.
*** Overlay Type::        How an overlay is represented.
*** Font Type::           Fonts for displaying text.
* 对象的字符输出形式
print 函数
* 控制字符表示法？ 加个问号 ?Q?81, 使用 (insert ?\s)
  特殊的控制字符
     ?\a ⇒ 7                 ; control-g, ‘C-g’
     ?\b ⇒ 8                 ; backspace, <BS>, ‘C-h’
     ?\t ⇒ 9                 ; tab, <TAB>, ‘C-i’
     ?\n ⇒ 10                ; newline, ‘C-j’
     ?\v ⇒ 11                ; vertical tab, ‘C-k’
     ?\f ⇒ 12                ; formfeed character, ‘C-l’
     ?\r ⇒ 13                ; carriage return, <RET>, ‘C-m’
     ?\e ⇒ 27                ; escape character, <ESC>, ‘C-[’
     ?\s ⇒ 32                ; space character, <SPC>
     ?\\ ⇒ 92                ; backslash character, ‘\’
     ?\d ⇒ 127               ; delete character, <DEL>
* 通用的转义语法？ 对于转义符号 \ 的用法 (insert ?\u662f)是
  1.指定unicode字符 ?\uNNNN, N是十六制数字   
  2.用x指定十六进制字符码 ?\x41  八进制 ？\002
  3.控制字符   ?\^I ⇒ 9     ?\C-I ⇒ 9   这里 ^ 和 C 等价 , a是0，以此类推，？是历史原因 127, 查看 lisp 手册
  4.元字符语法 用<META> 键修饰 , 有 2**27这么多位长
  ‘?\M-A’ 表示 ‘M-A’
  ‘?\M-\C-b’, ‘?\C-\M-b’, or ‘?\M-\002’表示 ‘C-M-b’ 
  5.‘?\H-\M-\A-x’ represents ‘Alt-Hyper-Meta-x’
  6.‘?\C-\S-o’ or ‘?\C-\S-O’ represents the shifted-control-o character.
* cons cell? 是一种 car 插槽 和 cdr 插槽 组合而成的对象
* 列表？ 列表是由一系列 cons cell组成的对象
* 原子？ 相当于基本数据
* 点对符号? 表示 cons cell 的一种方式
  '(rose . red)
  #+BEGIN_SRC lisp
(setq alist-of-colors
      '((rose . red) (lily . white) (buttercup . yellow)))
(cdr '((rose . red) (lily . white) (buttercup . yellow)))
  #+END_SRC
* 向量？ vector
  [1 "two" (three)]      ; A vector of three elements.
* eval? 求值，调用lisp解释器
* 控制结构?
** 1.一段程序        
  #+BEGIN_SRC lisp
    (progn (print "The first form")
           (print "The second form")
           (print "The third form"))
  #+END_SRC 
 prog2, prog3 的含义就是 返回的参数是哪一个 
** 2.if
   #+BEGIN_SRC lisp
     (if nil
         (print 'true)
       'very-false)
#+END_SRC
* lisp interaction mode? buffer中可以直接解释lisp代码
* 符号表达式？ 函数式编程，函数是第一位的，比如，吃，穿，用
* setq? 赋值语句
* insert? 插入字符串
* 代码段？　用progn包含的东西
* 局部变量定义?  let ((name value)(name2 value))
* 输入？ (read-from-minibuffer "Enter your name: ")
* 列表？　(setq names '("xiaoli" "xiaoming"))
